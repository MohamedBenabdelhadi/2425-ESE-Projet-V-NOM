
Projet_V-NOM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dba0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  0800dd80  0800dd80  0000ed80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e508  0800e508  00011118  2**0
                  CONTENTS
  4 .ARM          00000008  0800e508  0800e508  0000f508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e510  0800e510  00011118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e510  0800e510  0000f510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e514  0800e514  0000f514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001118  20000000  0800e518  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  20001118  0800f630  00011118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001994  0800f630  00011994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf80  00000000  00000000  00011148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a6a  00000000  00000000  0002d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  00030b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e2  00000000  00000000  00032398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235bc  00000000  00000000  0003367a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cff9  00000000  00000000  00056c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1a67  00000000  00000000  00073c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007da8  00000000  00000000  001556dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0015d484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001118 	.word	0x20001118
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800dd68 	.word	0x0800dd68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000111c 	.word	0x2000111c
 800021c:	0800dd68 	.word	0x0800dd68

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f009 f9c1 	bl	800a3d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 fe5f 	bl	8002d80 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fa09 	bl	80014de <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 fbec 	bl	80038b4 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 f9fc 	bl	80014de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f001 ffc0 	bl	8003088 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 f9e6 	bl	80014de <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20001134 	.word	0x20001134
 8001120:	0c900008 	.word	0x0c900008

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f009 f945 	bl	800a3d4 <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d134      	bne.n	80011be <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fd95 	bl	8004c94 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 f9b5 	bl	80014de <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ToF2_Pin|ToF1_Pin;
 80011a4:	2305      	movs	r3, #5
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ba:	f002 fdef 	bl	8003d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3768      	adds	r7, #104	@ 0x68
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b42      	ldr	r3, [pc, #264]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a41      	ldr	r2, [pc, #260]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fa:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	4a3b      	ldr	r2, [pc, #236]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001206:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	4a35      	ldr	r2, [pc, #212]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121e:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <MX_GPIO_Init+0x120>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a2f      	ldr	r2, [pc, #188]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8001248:	4829      	ldr	r0, [pc, #164]	@ (80012f0 <MX_GPIO_Init+0x124>)
 800124a:	f002 ff29 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2103      	movs	r1, #3
 8001252:	4828      	ldr	r0, [pc, #160]	@ (80012f4 <MX_GPIO_Init+0x128>)
 8001254:	f002 ff24 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4820      	ldr	r0, [pc, #128]	@ (80012f0 <MX_GPIO_Init+0x124>)
 800126e:	f002 fd95 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AG_INT1_Pin|AG_INT2_Pin;
 8001272:	2318      	movs	r3, #24
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001276:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128a:	f002 fd87 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin;
 800128e:	f44f 6341 	mov.w	r3, #3088	@ 0xc10
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4812      	ldr	r0, [pc, #72]	@ (80012f0 <MX_GPIO_Init+0x124>)
 80012a8:	f002 fd78 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80012ac:	2303      	movs	r3, #3
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <MX_GPIO_Init+0x128>)
 80012c4:	f002 fd6a 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin;
 80012c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_MODE_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_GPIO_Init+0x128>)
 80012de:	f002 fd5d 	bl	8003d9c <HAL_GPIO_Init>

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000400 	.word	0x48000400

080012f8 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001300:	1d39      	adds	r1, r7, #4
 8001302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001306:	2201      	movs	r2, #1
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <__io_putchar+0x20>)
 800130a:	f005 fee1 	bl	80070d0 <HAL_UART_Transmit>

	return ch;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20001318 	.word	0x20001318

0800131c <HAL_UART_RxCpltCallback>:
 * @brief UART receive complete callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <HAL_UART_RxCpltCallback+0x2c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d107      	bne.n	800133e <HAL_UART_RxCpltCallback+0x22>
	{
		//printf("UART2: 0x%X\r\n", rxByte);
		YLIDARX2_UART_irq(&hYLIDAR);
 800132e:	4807      	ldr	r0, [pc, #28]	@ (800134c <HAL_UART_RxCpltCallback+0x30>)
 8001330:	f001 fa7a 	bl	8002828 <YLIDARX2_UART_irq>

		// Restart reception for the next byte
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	4906      	ldr	r1, [pc, #24]	@ (8001350 <HAL_UART_RxCpltCallback+0x34>)
 8001338:	4806      	ldr	r0, [pc, #24]	@ (8001354 <HAL_UART_RxCpltCallback+0x38>)
 800133a:	f005 ff57 	bl	80071ec <HAL_UART_Receive_IT>
	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40004400 	.word	0x40004400
 800134c:	200011a4 	.word	0x200011a4
 8001350:	200011a0 	.word	0x200011a0
 8001354:	200013ac 	.word	0x200013ac

08001358 <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1b      	ldr	r2, [pc, #108]	@ (80013d4 <HAL_UART_ErrorCallback+0x7c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d130      	bne.n	80013cc <HAL_UART_ErrorCallback+0x74>
	{
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f006 fae2 	bl	8007934 <HAL_UART_GetError>
 8001370:	4603      	mov	r3, r0
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_UART_ErrorCallback+0x28>
			printf("Parity Error!\r\n");
 800137a:	4817      	ldr	r0, [pc, #92]	@ (80013d8 <HAL_UART_ErrorCallback+0x80>)
 800137c:	f008 ff10 	bl	800a1a0 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f006 fad7 	bl	8007934 <HAL_UART_GetError>
 8001386:	4603      	mov	r3, r0
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HAL_UART_ErrorCallback+0x3e>
			printf("Noise Error!\r\n");
 8001390:	4812      	ldr	r0, [pc, #72]	@ (80013dc <HAL_UART_ErrorCallback+0x84>)
 8001392:	f008 ff05 	bl	800a1a0 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f006 facc 	bl	8007934 <HAL_UART_GetError>
 800139c:	4603      	mov	r3, r0
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <HAL_UART_ErrorCallback+0x54>
			printf("Framing Error!\r\n");
 80013a6:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <HAL_UART_ErrorCallback+0x88>)
 80013a8:	f008 fefa 	bl	800a1a0 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f006 fac1 	bl	8007934 <HAL_UART_GetError>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_UART_ErrorCallback+0x6a>
			printf("Overrun Error!\r\n");
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <HAL_UART_ErrorCallback+0x8c>)
 80013be:	f008 feef 	bl	800a1a0 <puts>

		// Restart UART reception after error
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80013c2:	2201      	movs	r2, #1
 80013c4:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <HAL_UART_ErrorCallback+0x90>)
 80013c6:	4809      	ldr	r0, [pc, #36]	@ (80013ec <HAL_UART_ErrorCallback+0x94>)
 80013c8:	f005 ff10 	bl	80071ec <HAL_UART_Receive_IT>
	}
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40004400 	.word	0x40004400
 80013d8:	0800dd80 	.word	0x0800dd80
 80013dc:	0800dd90 	.word	0x0800dd90
 80013e0:	0800dda0 	.word	0x0800dda0
 80013e4:	0800ddb0 	.word	0x0800ddb0
 80013e8:	200011a0 	.word	0x200011a0
 80013ec:	200013ac 	.word	0x200013ac

080013f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013f4:	f001 fa7e 	bl	80028f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013f8:	f000 f826 	bl	8001448 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013fc:	f7ff fee6 	bl	80011cc <MX_GPIO_Init>
	MX_SPI1_Init();
 8001400:	f000 f874 	bl	80014ec <MX_SPI1_Init>
	MX_TIM1_Init();
 8001404:	f000 fa28 	bl	8001858 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001408:	f000 faee 	bl	80019e8 <MX_TIM3_Init>
	MX_TIM4_Init();
 800140c:	f000 fb42 	bl	8001a94 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8001410:	f000 fcce 	bl	8001db0 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001414:	f000 fc80 	bl	8001d18 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8001418:	f7ff fe0c 	bl	8001034 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n*** Waking up V-NOM ***\r\n");
 800141c:	4806      	ldr	r0, [pc, #24]	@ (8001438 <main+0x48>)
 800141e:	f008 febf 	bl	800a1a0 <puts>
	printf("%s", jumbo_logo_msg);
 8001422:	4906      	ldr	r1, [pc, #24]	@ (800143c <main+0x4c>)
 8001424:	4806      	ldr	r0, [pc, #24]	@ (8001440 <main+0x50>)
 8001426:	f008 fe53 	bl	800a0d0 <iprintf>
	GP2Y0A41SK0F_Init(&hTof);
	printf("GP2Y0A41SK0F Initialization Successful!\r\n");
	 */

	/* ADXL343 Initialization */
	ADXL343_Init(&hADXL);
 800142a:	4806      	ldr	r0, [pc, #24]	@ (8001444 <main+0x54>)
 800142c:	f000 feda 	bl	80021e4 <ADXL343_Init>
		Motor_SetSpeed_percent(&hMotors, hTof.distance_tof1, hTof.distance_tof1);
		//printf("Mot1 speed: %d, Mot2 speed: %d\r\n", hMotors.current_speed1, hMotors.current_speed2);
		Motor_UpdateSpeed(&hMotors);
		 */
		/* ADXL343 test */
		ADXL343_get_Acceleration(&hADXL);
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <main+0x54>)
 8001432:	f000 ff23 	bl	800227c <ADXL343_get_Acceleration>
 8001436:	e7fb      	b.n	8001430 <main+0x40>
 8001438:	0800de08 	.word	0x0800de08
 800143c:	20000000 	.word	0x20000000
 8001440:	0800de24 	.word	0x0800de24
 8001444:	200011b8 	.word	0x200011b8

08001448 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	@ 0x50
 800144c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	2238      	movs	r2, #56	@ 0x38
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f008 ffbc 	bl	800a3d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800146a:	2000      	movs	r0, #0
 800146c:	f002 fe30 	bl	80040d0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001474:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800147a:	2340      	movs	r3, #64	@ 0x40
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147e:	2302      	movs	r3, #2
 8001480:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001482:	2302      	movs	r3, #2
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001486:	2304      	movs	r3, #4
 8001488:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800148a:	2355      	movs	r3, #85	@ 0x55
 800148c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800148e:	2302      	movs	r3, #2
 8001490:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001492:	2302      	movs	r3, #2
 8001494:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001496:	2302      	movs	r3, #2
 8001498:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149a:	f107 0318 	add.w	r3, r7, #24
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 feca 	bl	8004238 <HAL_RCC_OscConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0x66>
	{
		Error_Handler();
 80014aa:	f000 f818 	bl	80014de <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ae:	230f      	movs	r3, #15
 80014b0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b2:	2303      	movs	r3, #3
 80014b4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2104      	movs	r1, #4
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 f9c8 	bl	800485c <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80014d2:	f000 f804 	bl	80014de <Error_Handler>
	}
}
 80014d6:	bf00      	nop
 80014d8:	3750      	adds	r7, #80	@ 0x50
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e2:	b672      	cpsid	i
}
 80014e4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014e6:	bf00      	nop
 80014e8:	e7fd      	b.n	80014e6 <Error_Handler+0x8>
	...

080014ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <MX_SPI1_Init+0x74>)
 80014f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001564 <MX_SPI1_Init+0x78>)
 80014f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <MX_SPI1_Init+0x74>)
 80014f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <MX_SPI1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_SPI1_Init+0x74>)
 8001506:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800150a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_SPI1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_SPI1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_SPI1_Init+0x74>)
 800151a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800151e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_SPI1_Init+0x74>)
 8001522:	2228      	movs	r2, #40	@ 0x28
 8001524:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_SPI1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_SPI1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <MX_SPI1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_SPI1_Init+0x74>)
 800153a:	2207      	movs	r2, #7
 800153c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <MX_SPI1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_SPI1_Init+0x74>)
 8001546:	2208      	movs	r2, #8
 8001548:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_SPI1_Init+0x74>)
 800154c:	f003 fd92 	bl	8005074 <HAL_SPI_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001556:	f7ff ffc2 	bl	80014de <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200011cc 	.word	0x200011cc
 8001564:	40013000 	.word	0x40013000

08001568 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <HAL_SPI_MspInit+0x7c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d128      	bne.n	80015dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <HAL_SPI_MspInit+0x80>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158e:	4a16      	ldr	r2, [pc, #88]	@ (80015e8 <HAL_SPI_MspInit+0x80>)
 8001590:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001594:	6613      	str	r3, [r2, #96]	@ 0x60
 8001596:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <HAL_SPI_MspInit+0x80>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_SPI_MspInit+0x80>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <HAL_SPI_MspInit+0x80>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_SPI_MspInit+0x80>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015ba:	23e0      	movs	r3, #224	@ 0xe0
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ca:	2305      	movs	r3, #5
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d8:	f002 fbe0 	bl	8003d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	@ 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40013000 	.word	0x40013000
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <HAL_MspInit+0x44>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <HAL_MspInit+0x44>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80015fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <HAL_MspInit+0x44>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_MspInit+0x44>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <HAL_MspInit+0x44>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6593      	str	r3, [r2, #88]	@ 0x58
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_MspInit+0x44>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001622:	f002 fdf9 	bl	8004218 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <NMI_Handler+0x4>

0800163c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <MemManage_Handler+0x4>

0800164c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <UsageFault_Handler+0x4>

0800165c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168a:	f001 f985 	bl	8002998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <USART2_IRQHandler+0x10>)
 800169a:	f005 fdf3 	bl	8007284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200013ac 	.word	0x200013ac

080016a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_kill>:

int _kill(int pid, int sig)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c2:	f008 fed9 	bl	800a478 <__errno>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2216      	movs	r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
  return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_exit>:

void _exit (int status)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffe7 	bl	80016b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ea:	bf00      	nop
 80016ec:	e7fd      	b.n	80016ea <_exit+0x12>

080016ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e00a      	b.n	8001716 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001700:	f3af 8000 	nop.w
 8001704:	4601      	mov	r1, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	60ba      	str	r2, [r7, #8]
 800170c:	b2ca      	uxtb	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbf0      	blt.n	8001700 <_read+0x12>
  }

  return len;
 800171e:	687b      	ldr	r3, [r7, #4]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e009      	b.n	800174e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fdd8 	bl	80012f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbf1      	blt.n	800173a <_write+0x12>
  }
  return len;
 8001756:	687b      	ldr	r3, [r7, #4]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_close>:

int _close(int file)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001788:	605a      	str	r2, [r3, #4]
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_isatty>:

int _isatty(int file)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f008 fe3e 	bl	800a478 <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20008000 	.word	0x20008000
 8001828:	00000400 	.word	0x00000400
 800182c:	20001230 	.word	0x20001230
 8001830:	20001998 	.word	0x20001998

08001834 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09c      	sub	sp, #112	@ 0x70
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001878:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2234      	movs	r2, #52	@ 0x34
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f008 fd9e 	bl	800a3d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001898:	4b51      	ldr	r3, [pc, #324]	@ (80019e0 <MX_TIM1_Init+0x188>)
 800189a:	4a52      	ldr	r2, [pc, #328]	@ (80019e4 <MX_TIM1_Init+0x18c>)
 800189c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800189e:	4b50      	ldr	r3, [pc, #320]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b4e      	ldr	r3, [pc, #312]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018aa:	4b4d      	ldr	r3, [pc, #308]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80018ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b4b      	ldr	r3, [pc, #300]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b8:	4b49      	ldr	r3, [pc, #292]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018be:	4b48      	ldr	r3, [pc, #288]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c4:	4846      	ldr	r0, [pc, #280]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80018c6:	f004 fb0b 	bl	8005ee0 <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018d0:	f7ff fe05 	bl	80014de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80018de:	4619      	mov	r1, r3
 80018e0:	483f      	ldr	r0, [pc, #252]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80018e2:	f004 fd6f 	bl	80063c4 <HAL_TIM_ConfigClockSource>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018ec:	f7ff fdf7 	bl	80014de <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018f0:	483b      	ldr	r0, [pc, #236]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80018f2:	f004 fb4c 	bl	8005f8e <HAL_TIM_PWM_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018fc:	f7ff fdef 	bl	80014de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800190c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001910:	4619      	mov	r1, r3
 8001912:	4833      	ldr	r0, [pc, #204]	@ (80019e0 <MX_TIM1_Init+0x188>)
 8001914:	f005 fa7e 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800191e:	f7ff fdde 	bl	80014de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001922:	2360      	movs	r3, #96	@ 0x60
 8001924:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192a:	2300      	movs	r3, #0
 800192c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800192e:	2300      	movs	r3, #0
 8001930:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800193e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001942:	2200      	movs	r2, #0
 8001944:	4619      	mov	r1, r3
 8001946:	4826      	ldr	r0, [pc, #152]	@ (80019e0 <MX_TIM1_Init+0x188>)
 8001948:	f004 fc28 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001952:	f7ff fdc4 	bl	80014de <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001956:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800195a:	2204      	movs	r2, #4
 800195c:	4619      	mov	r1, r3
 800195e:	4820      	ldr	r0, [pc, #128]	@ (80019e0 <MX_TIM1_Init+0x188>)
 8001960:	f004 fc1c 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800196a:	f7ff fdb8 	bl	80014de <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800196e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001972:	2208      	movs	r2, #8
 8001974:	4619      	mov	r1, r3
 8001976:	481a      	ldr	r0, [pc, #104]	@ (80019e0 <MX_TIM1_Init+0x188>)
 8001978:	f004 fc10 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001982:	f7ff fdac 	bl	80014de <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800199a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800199e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019b6:	2300      	movs	r3, #0
 80019b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80019c4:	f005 faa8 	bl	8006f18 <HAL_TIMEx_ConfigBreakDeadTime>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80019ce:	f7ff fd86 	bl	80014de <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019d2:	4803      	ldr	r0, [pc, #12]	@ (80019e0 <MX_TIM1_Init+0x188>)
 80019d4:	f000 f94a 	bl	8001c6c <HAL_TIM_MspPostInit>

}
 80019d8:	bf00      	nop
 80019da:	3770      	adds	r7, #112	@ 0x70
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20001234 	.word	0x20001234
 80019e4:	40012c00 	.word	0x40012c00

080019e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	@ 0x30
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2224      	movs	r2, #36	@ 0x24
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f008 fcec 	bl	800a3d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a06:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <MX_TIM3_Init+0xa4>)
 8001a08:	4a21      	ldr	r2, [pc, #132]	@ (8001a90 <MX_TIM3_Init+0xa8>)
 8001a0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <MX_TIM3_Init+0xa4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <MX_TIM3_Init+0xa4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a18:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <MX_TIM3_Init+0xa4>)
 8001a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <MX_TIM3_Init+0xa4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a26:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <MX_TIM3_Init+0xa4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a34:	2301      	movs	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a44:	2301      	movs	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	4619      	mov	r1, r3
 8001a56:	480d      	ldr	r0, [pc, #52]	@ (8001a8c <MX_TIM3_Init+0xa4>)
 8001a58:	f004 fafa 	bl	8006050 <HAL_TIM_Encoder_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a62:	f7ff fd3c 	bl	80014de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	@ (8001a8c <MX_TIM3_Init+0xa4>)
 8001a74:	f005 f9ce 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a7e:	f7ff fd2e 	bl	80014de <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	3730      	adds	r7, #48	@ 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20001280 	.word	0x20001280
 8001a90:	40000400 	.word	0x40000400

08001a94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	@ 0x30
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2224      	movs	r2, #36	@ 0x24
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f008 fc96 	bl	800a3d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <MX_TIM4_Init+0xa4>)
 8001ab4:	4a21      	ldr	r2, [pc, #132]	@ (8001b3c <MX_TIM4_Init+0xa8>)
 8001ab6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <MX_TIM4_Init+0xa4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <MX_TIM4_Init+0xa4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <MX_TIM4_Init+0xa4>)
 8001ac6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <MX_TIM4_Init+0xa4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad2:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <MX_TIM4_Init+0xa4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001af0:	2301      	movs	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4619      	mov	r1, r3
 8001b02:	480d      	ldr	r0, [pc, #52]	@ (8001b38 <MX_TIM4_Init+0xa4>)
 8001b04:	f004 faa4 	bl	8006050 <HAL_TIM_Encoder_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b0e:	f7ff fce6 	bl	80014de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4806      	ldr	r0, [pc, #24]	@ (8001b38 <MX_TIM4_Init+0xa4>)
 8001b20:	f005 f978 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b2a:	f7ff fcd8 	bl	80014de <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	3730      	adds	r7, #48	@ 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200012cc 	.word	0x200012cc
 8001b3c:	40000800 	.word	0x40000800

08001b40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <HAL_TIM_Base_MspInit+0x38>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d10b      	bne.n	8001b6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_TIM_Base_MspInit+0x3c>)
 8001b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b56:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <HAL_TIM_Base_MspInit+0x3c>)
 8001b58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b5e:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <HAL_TIM_Base_MspInit+0x3c>)
 8001b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40012c00 	.word	0x40012c00
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08c      	sub	sp, #48	@ 0x30
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c5c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d128      	bne.n	8001bf4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bae:	4b2c      	ldr	r3, [pc, #176]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	4a28      	ldr	r2, [pc, #160]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc6:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bd2:	2330      	movs	r3, #48	@ 0x30
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001be2:	2302      	movs	r3, #2
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	481d      	ldr	r0, [pc, #116]	@ (8001c64 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001bee:	f002 f8d5 	bl	8003d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bf2:	e02e      	b.n	8001c52 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d129      	bne.n	8001c52 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	4a17      	ldr	r2, [pc, #92]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	4a11      	ldr	r2, [pc, #68]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c2e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001c40:	230a      	movs	r3, #10
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4e:	f002 f8a5 	bl	8003d9c <HAL_GPIO_Init>
}
 8001c52:	bf00      	nop
 8001c54:	3730      	adds	r7, #48	@ 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40000400 	.word	0x40000400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000400 	.word	0x48000400
 8001c68:	40000800 	.word	0x40000800

08001c6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <HAL_TIM_MspPostInit+0xa0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d13a      	bne.n	8001d04 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <HAL_TIM_MspPostInit+0xa4>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c92:	4a1f      	ldr	r2, [pc, #124]	@ (8001d10 <HAL_TIM_MspPostInit+0xa4>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <HAL_TIM_MspPostInit+0xa4>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <HAL_TIM_MspPostInit+0xa4>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <HAL_TIM_MspPostInit+0xa4>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <HAL_TIM_MspPostInit+0xa4>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001cbe:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480e      	ldr	r0, [pc, #56]	@ (8001d14 <HAL_TIM_MspPostInit+0xa8>)
 8001cdc:	f002 f85e 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ce0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d00:	f002 f84c 	bl	8003d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40012c00 	.word	0x40012c00
 8001d10:	40021000 	.word	0x40021000
 8001d14:	48000400 	.word	0x48000400

08001d18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d1c:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d1e:	4a23      	ldr	r2, [pc, #140]	@ (8001dac <MX_USART1_UART_Init+0x94>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d22:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b17      	ldr	r3, [pc, #92]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d54:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d60:	4811      	ldr	r0, [pc, #68]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d62:	f005 f965 	bl	8007030 <HAL_UART_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d6c:	f7ff fbb7 	bl	80014de <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d70:	2100      	movs	r1, #0
 8001d72:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d74:	f007 f9b3 	bl	80090de <HAL_UARTEx_SetTxFifoThreshold>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d7e:	f7ff fbae 	bl	80014de <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d82:	2100      	movs	r1, #0
 8001d84:	4808      	ldr	r0, [pc, #32]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d86:	f007 f9e8 	bl	800915a <HAL_UARTEx_SetRxFifoThreshold>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d90:	f7ff fba5 	bl	80014de <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d94:	4804      	ldr	r0, [pc, #16]	@ (8001da8 <MX_USART1_UART_Init+0x90>)
 8001d96:	f007 f969 	bl	800906c <HAL_UARTEx_DisableFifoMode>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001da0:	f7ff fb9d 	bl	80014de <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20001318 	.word	0x20001318
 8001dac:	40013800 	.word	0x40013800

08001db0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db4:	4b22      	ldr	r3, [pc, #136]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001db6:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <MX_USART2_UART_Init+0x94>)
 8001db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dba:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001dbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de0:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de6:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dec:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df2:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df8:	4811      	ldr	r0, [pc, #68]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001dfa:	f005 f919 	bl	8007030 <HAL_UART_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e04:	f7ff fb6b 	bl	80014de <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	480d      	ldr	r0, [pc, #52]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001e0c:	f007 f967 	bl	80090de <HAL_UARTEx_SetTxFifoThreshold>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e16:	f7ff fb62 	bl	80014de <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4808      	ldr	r0, [pc, #32]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001e1e:	f007 f99c 	bl	800915a <HAL_UARTEx_SetRxFifoThreshold>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e28:	f7ff fb59 	bl	80014de <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <MX_USART2_UART_Init+0x90>)
 8001e2e:	f007 f91d 	bl	800906c <HAL_UARTEx_DisableFifoMode>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e38:	f7ff fb51 	bl	80014de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200013ac 	.word	0x200013ac
 8001e44:	40004400 	.word	0x40004400

08001e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b09e      	sub	sp, #120	@ 0x78
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	2244      	movs	r2, #68	@ 0x44
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f008 fab3 	bl	800a3d4 <memset>
  if(uartHandle->Instance==USART1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a4f      	ldr	r2, [pc, #316]	@ (8001fb0 <HAL_UART_MspInit+0x168>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d136      	bne.n	8001ee6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 ff05 	bl	8004c94 <HAL_RCCEx_PeriphCLKConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e90:	f7ff fb25 	bl	80014de <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e94:	4b47      	ldr	r3, [pc, #284]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e98:	4a46      	ldr	r2, [pc, #280]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001e9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ea0:	4b44      	ldr	r3, [pc, #272]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eac:	4b41      	ldr	r3, [pc, #260]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb0:	4a40      	ldr	r2, [pc, #256]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001eb2:	f043 0302 	orr.w	r3, r3, #2
 8001eb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001ec4:	23c0      	movs	r3, #192	@ 0xc0
 8001ec6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001edc:	4619      	mov	r1, r3
 8001ede:	4836      	ldr	r0, [pc, #216]	@ (8001fb8 <HAL_UART_MspInit+0x170>)
 8001ee0:	f001 ff5c 	bl	8003d9c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ee4:	e060      	b.n	8001fa8 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a34      	ldr	r2, [pc, #208]	@ (8001fbc <HAL_UART_MspInit+0x174>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d15b      	bne.n	8001fa8 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 fec9 	bl	8004c94 <HAL_RCCEx_PeriphCLKConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001f08:	f7ff fae9 	bl	80014de <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0c:	4b29      	ldr	r3, [pc, #164]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f10:	4a28      	ldr	r2, [pc, #160]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f18:	4b26      	ldr	r3, [pc, #152]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f28:	4a22      	ldr	r2, [pc, #136]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f30:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f40:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f48:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb4 <HAL_UART_MspInit+0x16c>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8001f54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f58:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f66:	2307      	movs	r3, #7
 8001f68:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f74:	f001 ff12 	bl	8003d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f90:	4619      	mov	r1, r3
 8001f92:	4809      	ldr	r0, [pc, #36]	@ (8001fb8 <HAL_UART_MspInit+0x170>)
 8001f94:	f001 ff02 	bl	8003d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2026      	movs	r0, #38	@ 0x26
 8001f9e:	f001 fe08 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fa2:	2026      	movs	r0, #38	@ 0x26
 8001fa4:	f001 fe1f 	bl	8003be6 <HAL_NVIC_EnableIRQ>
}
 8001fa8:	bf00      	nop
 8001faa:	3778      	adds	r7, #120	@ 0x78
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	48000400 	.word	0x48000400
 8001fbc:	40004400 	.word	0x40004400

08001fc0 <Reset_Handler>:
 8001fc0:	480d      	ldr	r0, [pc, #52]	@ (8001ff8 <LoopForever+0x2>)
 8001fc2:	4685      	mov	sp, r0
 8001fc4:	f7ff fc36 	bl	8001834 <SystemInit>
 8001fc8:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <LoopForever+0x6>)
 8001fca:	490d      	ldr	r1, [pc, #52]	@ (8002000 <LoopForever+0xa>)
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <LoopForever+0xe>)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:
 8001fd2:	58d4      	ldr	r4, [r2, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:
 8001fd8:	18c4      	adds	r4, r0, r3
 8001fda:	428c      	cmp	r4, r1
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <LoopForever+0x12>)
 8001fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800200c <LoopForever+0x16>)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:
 8001fea:	42a2      	cmp	r2, r4
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>
 8001fee:	f008 fa49 	bl	800a484 <__libc_init_array>
 8001ff2:	f7ff f9fd 	bl	80013f0 <main>

08001ff6 <LoopForever>:
 8001ff6:	e7fe      	b.n	8001ff6 <LoopForever>
 8001ff8:	20008000 	.word	0x20008000
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20001118 	.word	0x20001118
 8002004:	0800e518 	.word	0x0800e518
 8002008:	20001118 	.word	0x20001118
 800200c:	20001994 	.word	0x20001994

08002010 <ADC1_2_IRQHandler>:
 8002010:	e7fe      	b.n	8002010 <ADC1_2_IRQHandler>
	...

08002014 <spiWrite>:
 * @param address The address of the register to write to.
 * @param data Pointer to the data to send.
 * @param length Number of bytes to send.
 */
void spiWrite(uint8_t address, uint8_t *data, uint16_t length)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
 8002020:	4613      	mov	r3, r2
 8002022:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;

	// Set the write command (clear MSB of the register address)
	uint8_t writeAddress = address & 0x7F;
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800202a:	b2db      	uxtb	r3, r3
 800202c:	73bb      	strb	r3, [r7, #14]

	// Pull CS low to start the SPI transaction
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002034:	481a      	ldr	r0, [pc, #104]	@ (80020a0 <spiWrite+0x8c>)
 8002036:	f002 f833 	bl	80040a0 <HAL_GPIO_WritePin>

	// Transmit the address
	status = HAL_SPI_Transmit(&hspi1, &writeAddress, 1, HAL_MAX_DELAY);
 800203a:	f107 010e 	add.w	r1, r7, #14
 800203e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002042:	2201      	movs	r2, #1
 8002044:	4817      	ldr	r0, [pc, #92]	@ (80020a4 <spiWrite+0x90>)
 8002046:	f003 f8c0 	bl	80051ca <HAL_SPI_Transmit>
 800204a:	4603      	mov	r3, r0
 800204c:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <spiWrite+0x56>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set CS high on error
 8002054:	2201      	movs	r2, #1
 8002056:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800205a:	4811      	ldr	r0, [pc, #68]	@ (80020a0 <spiWrite+0x8c>)
 800205c:	f002 f820 	bl	80040a0 <HAL_GPIO_WritePin>
		printf("SPI Write Error during address transmission!\n");
 8002060:	4811      	ldr	r0, [pc, #68]	@ (80020a8 <spiWrite+0x94>)
 8002062:	f008 f89d 	bl	800a1a0 <puts>
		Error_Handler();
 8002066:	f7ff fa3a 	bl	80014de <Error_Handler>
	}

	// Transmit the data
	status = HAL_SPI_Transmit(&hspi1, data, length, HAL_MAX_DELAY);
 800206a:	88ba      	ldrh	r2, [r7, #4]
 800206c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <spiWrite+0x90>)
 8002074:	f003 f8a9 	bl	80051ca <HAL_SPI_Transmit>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set CS high after transaction
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002082:	4807      	ldr	r0, [pc, #28]	@ (80020a0 <spiWrite+0x8c>)
 8002084:	f002 f80c 	bl	80040a0 <HAL_GPIO_WritePin>

	if (status != HAL_OK)
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <spiWrite+0x84>
	{
		printf("SPI Write Error during data transmission!\n");
 800208e:	4807      	ldr	r0, [pc, #28]	@ (80020ac <spiWrite+0x98>)
 8002090:	f008 f886 	bl	800a1a0 <puts>
		Error_Handler();
 8002094:	f7ff fa23 	bl	80014de <Error_Handler>
	}
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	48000400 	.word	0x48000400
 80020a4:	200011cc 	.word	0x200011cc
 80020a8:	0800de28 	.word	0x0800de28
 80020ac:	0800de58 	.word	0x0800de58

080020b0 <spiRead>:
 * @param address The address of the register to read from.
 * @param data Pointer to the buffer to store the received data.
 * @param length Number of bytes to read.
 */
void spiRead(uint8_t address, uint8_t *data, uint16_t length)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	4613      	mov	r3, r2
 80020be:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;

	// Pull CS low to start the SPI transaction
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020c6:	481f      	ldr	r0, [pc, #124]	@ (8002144 <spiRead+0x94>)
 80020c8:	f001 ffea 	bl	80040a0 <HAL_GPIO_WritePin>

	// Transmit the address
	status = HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 80020cc:	1df9      	adds	r1, r7, #7
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020d2:	2201      	movs	r2, #1
 80020d4:	481c      	ldr	r0, [pc, #112]	@ (8002148 <spiRead+0x98>)
 80020d6:	f003 f878 	bl	80051ca <HAL_SPI_Transmit>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]
	DEBUG_PRINT("Transmission status: 0x%X\r\n", status);
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	4619      	mov	r1, r3
 80020e2:	481a      	ldr	r0, [pc, #104]	@ (800214c <spiRead+0x9c>)
 80020e4:	f007 fff4 	bl	800a0d0 <iprintf>
	if (status != HAL_OK)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <spiRead+0x54>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set CS high on error
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020f4:	4813      	ldr	r0, [pc, #76]	@ (8002144 <spiRead+0x94>)
 80020f6:	f001 ffd3 	bl	80040a0 <HAL_GPIO_WritePin>
		printf("SPI Read Error during address transmission!\n");
 80020fa:	4815      	ldr	r0, [pc, #84]	@ (8002150 <spiRead+0xa0>)
 80020fc:	f008 f850 	bl	800a1a0 <puts>
		Error_Handler();
 8002100:	f7ff f9ed 	bl	80014de <Error_Handler>
	}

	// Receive the data
	status = HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 8002104:	88ba      	ldrh	r2, [r7, #4]
 8002106:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800210a:	6839      	ldr	r1, [r7, #0]
 800210c:	480e      	ldr	r0, [pc, #56]	@ (8002148 <spiRead+0x98>)
 800210e:	f003 f9d1 	bl	80054b4 <HAL_SPI_Receive>
 8002112:	4603      	mov	r3, r0
 8002114:	73fb      	strb	r3, [r7, #15]
	DEBUG_PRINT("Reception status: 0x%X\r\n", status);
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	4619      	mov	r1, r3
 800211a:	480e      	ldr	r0, [pc, #56]	@ (8002154 <spiRead+0xa4>)
 800211c:	f007 ffd8 	bl	800a0d0 <iprintf>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set CS high after transaction
 8002120:	2201      	movs	r2, #1
 8002122:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002126:	4807      	ldr	r0, [pc, #28]	@ (8002144 <spiRead+0x94>)
 8002128:	f001 ffba 	bl	80040a0 <HAL_GPIO_WritePin>

	if (status != HAL_OK)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d004      	beq.n	800213c <spiRead+0x8c>
	{
		printf("SPI Read Error during data reception!\n");
 8002132:	4809      	ldr	r0, [pc, #36]	@ (8002158 <spiRead+0xa8>)
 8002134:	f008 f834 	bl	800a1a0 <puts>
		Error_Handler();
 8002138:	f7ff f9d1 	bl	80014de <Error_Handler>
	}
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	48000400 	.word	0x48000400
 8002148:	200011cc 	.word	0x200011cc
 800214c:	0800de84 	.word	0x0800de84
 8002150:	0800dea0 	.word	0x0800dea0
 8002154:	0800decc 	.word	0x0800decc
 8002158:	0800dee8 	.word	0x0800dee8

0800215c <ADXL343_writeRegister>:
 * @brief Writes data to a specific register of the ADXL343.
 * @param reg The register address to write to.
 * @param values Pointer to the data to write.
 * @param length Number of bytes to write.
 */
void ADXL343_writeRegister(uint8_t reg, uint8_t * values, uint16_t length) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	4613      	mov	r3, r2
 800216a:	80bb      	strh	r3, [r7, #4]
	// Setting R/W = 0, i.e.: Write Mode
	uint8_t writeAddress = reg & ~(0x80);
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002172:	73fb      	strb	r3, [r7, #15]

	spiWrite(writeAddress, values, length);
 8002174:	88ba      	ldrh	r2, [r7, #4]
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	6839      	ldr	r1, [r7, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff4a 	bl	8002014 <spiWrite>
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <ADXL343_readRegister>:
 * @brief Reads data from a specific register of the ADXL343.
 * @param reg The register address to read from.
 * @param data Pointer to the buffer to store the read data.
 * @param num Number of bytes to read.
 */
void ADXL343_readRegister(uint8_t reg, uint8_t *data, uint16_t num) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	4613      	mov	r3, r2
 8002196:	80bb      	strh	r3, [r7, #4]
	if (reg > 63)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	2b3f      	cmp	r3, #63	@ 0x3f
 800219c:	d901      	bls.n	80021a2 <ADXL343_readRegister+0x1a>
		reg = 63;
 800219e:	233f      	movs	r3, #63	@ 0x3f
 80021a0:	71fb      	strb	r3, [r7, #7]

	// Multiple Byte Read Settings
	if (num > 1)
 80021a2:	88bb      	ldrh	r3, [r7, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d904      	bls.n	80021b2 <ADXL343_readRegister+0x2a>
		reg |= 0x40;
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ae:	71fb      	strb	r3, [r7, #7]
 80021b0:	e003      	b.n	80021ba <ADXL343_readRegister+0x32>
	else
		reg &= ~(0x40);
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021b8:	71fb      	strb	r3, [r7, #7]

	// Setting R/W = 1, i.e.: Read Mode
	reg |= (0x80);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021c0:	71fb      	strb	r3, [r7, #7]

	DEBUG_PRINT("Reading register 0x%X\r\n", reg);
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	4619      	mov	r1, r3
 80021c6:	4806      	ldr	r0, [pc, #24]	@ (80021e0 <ADXL343_readRegister+0x58>)
 80021c8:	f007 ff82 	bl	800a0d0 <iprintf>
	spiRead(reg, data, num);
 80021cc:	88ba      	ldrh	r2, [r7, #4]
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff6c 	bl	80020b0 <spiRead>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	0800df10 	.word	0x0800df10

080021e4 <ADXL343_Init>:

/**
 * @brief Initializes the ADXL343 accelerometer.
 * @param hadxl Pointer to the ADXL343 handle structure.
 */
void ADXL343_Init(h_ADXL343_t * hadxl) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("Setting CSn\r\n");
 80021ec:	481f      	ldr	r0, [pc, #124]	@ (800226c <ADXL343_Init+0x88>)
 80021ee:	f007 ffd7 	bl	800a1a0 <puts>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set CS high
 80021f2:	2201      	movs	r2, #1
 80021f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021f8:	481d      	ldr	r0, [pc, #116]	@ (8002270 <ADXL343_Init+0x8c>)
 80021fa:	f001 ff51 	bl	80040a0 <HAL_GPIO_WritePin>

	uint8_t deviceID;
	ADXL343_readRegister(ADXL343_DEVID, &deviceID, 1);
 80021fe:	f107 030f 	add.w	r3, r7, #15
 8002202:	2201      	movs	r2, #1
 8002204:	4619      	mov	r1, r3
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff ffbe 	bl	8002188 <ADXL343_readRegister>

	if (deviceID == 0xE5) { // Device ID for ADXL343
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2be5      	cmp	r3, #229	@ 0xe5
 8002210:	d105      	bne.n	800221e <ADXL343_Init+0x3a>
		printf("ADXL343 detected successfully! Device ID: 0x%02X\r\n", deviceID);
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	4619      	mov	r1, r3
 8002216:	4817      	ldr	r0, [pc, #92]	@ (8002274 <ADXL343_Init+0x90>)
 8002218:	f007 ff5a 	bl	800a0d0 <iprintf>
 800221c:	e004      	b.n	8002228 <ADXL343_Init+0x44>
	} else {
		printf("Failed to detect ADXL343. Read Device ID: 0x%02X\r\n", deviceID);
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	4619      	mov	r1, r3
 8002222:	4815      	ldr	r0, [pc, #84]	@ (8002278 <ADXL343_Init+0x94>)
 8002224:	f007 ff54 	bl	800a0d0 <iprintf>
	}

	if (deviceID == 0xE5)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2be5      	cmp	r3, #229	@ 0xe5
 800222c:	d11a      	bne.n	8002264 <ADXL343_Init+0x80>
	{
		uint8_t val = 0x00;
 800222e:	2300      	movs	r3, #0
 8002230:	73bb      	strb	r3, [r7, #14]
		ADXL343_writeRegister (ADXL343_POWER_CTL, &val, 1);  // reset all bits; standby
 8002232:	f107 030e 	add.w	r3, r7, #14
 8002236:	2201      	movs	r2, #1
 8002238:	4619      	mov	r1, r3
 800223a:	202d      	movs	r0, #45	@ 0x2d
 800223c:	f7ff ff8e 	bl	800215c <ADXL343_writeRegister>

		val = 0x08;
 8002240:	2308      	movs	r3, #8
 8002242:	73bb      	strb	r3, [r7, #14]
		ADXL343_writeRegister (ADXL343_POWER_CTL, &val, 1);  // measure=1 and wake up 8hz
 8002244:	f107 030e 	add.w	r3, r7, #14
 8002248:	2201      	movs	r2, #1
 800224a:	4619      	mov	r1, r3
 800224c:	202d      	movs	r0, #45	@ 0x2d
 800224e:	f7ff ff85 	bl	800215c <ADXL343_writeRegister>

		val = 0x01;
 8002252:	2301      	movs	r3, #1
 8002254:	73bb      	strb	r3, [r7, #14]
		ADXL343_writeRegister (ADXL343_DATA_FORMAT, &val, 1);  // 10bit data, range= +- 4g
 8002256:	f107 030e 	add.w	r3, r7, #14
 800225a:	2201      	movs	r2, #1
 800225c:	4619      	mov	r1, r3
 800225e:	2031      	movs	r0, #49	@ 0x31
 8002260:	f7ff ff7c 	bl	800215c <ADXL343_writeRegister>
	}
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	0800df28 	.word	0x0800df28
 8002270:	48000400 	.word	0x48000400
 8002274:	0800df38 	.word	0x0800df38
 8002278:	0800df6c 	.word	0x0800df6c

0800227c <ADXL343_get_Acceleration>:
/**
 * @brief Reads the acceleration data from the ADXL343.
 * @param hadxl Pointer to the ADXL343 handle structure.
 */
void ADXL343_get_Acceleration(h_ADXL343_t * hadxl)
{
 800227c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002280:	b088      	sub	sp, #32
 8002282:	af04      	add	r7, sp, #16
 8002284:	6078      	str	r0, [r7, #4]
	ADXL343_readRegister(0x32, hadxl->RxData, 6);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2206      	movs	r2, #6
 800228a:	4619      	mov	r1, r3
 800228c:	2032      	movs	r0, #50	@ 0x32
 800228e:	f7ff ff7b 	bl	8002188 <ADXL343_readRegister>

	int16_t RAWX = ((hadxl->RxData[1]<<8)|hadxl->RxData[0]);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	b21a      	sxth	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b21b      	sxth	r3, r3
 80022a0:	4313      	orrs	r3, r2
 80022a2:	81fb      	strh	r3, [r7, #14]
	int16_t RAWY = ((hadxl->RxData[3]<<8)|hadxl->RxData[2]);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	78db      	ldrb	r3, [r3, #3]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	789b      	ldrb	r3, [r3, #2]
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	4313      	orrs	r3, r2
 80022b4:	81bb      	strh	r3, [r7, #12]
	int16_t RAWZ = ((hadxl->RxData[5]<<8)|hadxl->RxData[4]);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	795b      	ldrb	r3, [r3, #5]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	b21a      	sxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	791b      	ldrb	r3, [r3, #4]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	4313      	orrs	r3, r2
 80022c6:	817b      	strh	r3, [r7, #10]

	hadxl->xg = (float)RAWX/128;
 80022c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d4:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800235c <ADXL343_get_Acceleration+0xe0>
 80022d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	edc3 7a02 	vstr	s15, [r3, #8]
	hadxl->yg = (float)RAWY/128;
 80022e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ee:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800235c <ADXL343_get_Acceleration+0xe0>
 80022f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	edc3 7a03 	vstr	s15, [r3, #12]
	hadxl->zg = (float)RAWZ/128;
 80022fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002300:	ee07 3a90 	vmov	s15, r3
 8002304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002308:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800235c <ADXL343_get_Acceleration+0xe0>
 800230c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	edc3 7a04 	vstr	s15, [r3, #16]

	DEBUG_PRINT(
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f93c 	bl	8000598 <__aeabi_f2d>
 8002320:	4680      	mov	r8, r0
 8002322:	4689      	mov	r9, r1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f935 	bl	8000598 <__aeabi_f2d>
 800232e:	4604      	mov	r4, r0
 8002330:	460d      	mov	r5, r1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f92e 	bl	8000598 <__aeabi_f2d>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002344:	e9cd 4500 	strd	r4, r5, [sp]
 8002348:	4642      	mov	r2, r8
 800234a:	464b      	mov	r3, r9
 800234c:	4804      	ldr	r0, [pc, #16]	@ (8002360 <ADXL343_get_Acceleration+0xe4>)
 800234e:	f007 febf 	bl	800a0d0 <iprintf>
			"Xg: %.4f\r\n"
			"Yg: %.4f\r\n"
			"Zg: %.4f\r\n",
			hadxl->xg, hadxl->yg, hadxl->zg);
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800235c:	43000000 	.word	0x43000000
 8002360:	0800dfa0 	.word	0x0800dfa0

08002364 <YLIDARX2_PrintData>:

/**
 * Debugging function to print data
 */
void YLIDARX2_PrintData(h_YLIDARX2_t * hYLIDAR)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

		printf("Packet Header: 0x%X\r\n", packetHeader);
		printf("Package Type: %s\r\n", YLIDAR_PACKAGE_TYPE(packageType));
		printf("Scan frequency: %d Hz\r\n", scan_frequency);
#endif
		printf("Sample Quantity: %d\r\n", hYLIDAR->sample_quantity);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7b1b      	ldrb	r3, [r3, #12]
 8002370:	4619      	mov	r1, r3
 8002372:	4819      	ldr	r0, [pc, #100]	@ (80023d8 <YLIDARX2_PrintData+0x74>)
 8002374:	f007 feac 	bl	800a0d0 <iprintf>

	printf("Data: ");
 8002378:	4818      	ldr	r0, [pc, #96]	@ (80023dc <YLIDARX2_PrintData+0x78>)
 800237a:	f007 fea9 	bl	800a0d0 <iprintf>

	for (int i=0; i < hYLIDAR->data_length; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e01c      	b.n	80023be <YLIDARX2_PrintData+0x5a>
	{
		printf("0x%X ", hYLIDAR->data_buffer[i]);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	4813      	ldr	r0, [pc, #76]	@ (80023e0 <YLIDARX2_PrintData+0x7c>)
 8002392:	f007 fe9d 	bl	800a0d0 <iprintf>

		if (i%10 == 0) printf("\r\n");
 8002396:	68f9      	ldr	r1, [r7, #12]
 8002398:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <YLIDARX2_PrintData+0x80>)
 800239a:	fb83 2301 	smull	r2, r3, r3, r1
 800239e:	109a      	asrs	r2, r3, #2
 80023a0:	17cb      	asrs	r3, r1, #31
 80023a2:	1ad2      	subs	r2, r2, r3
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	1aca      	subs	r2, r1, r3
 80023ae:	2a00      	cmp	r2, #0
 80023b0:	d102      	bne.n	80023b8 <YLIDARX2_PrintData+0x54>
 80023b2:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <YLIDARX2_PrintData+0x84>)
 80023b4:	f007 fef4 	bl	800a1a0 <puts>
	for (int i=0; i < hYLIDAR->data_length; i++)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	dbdd      	blt.n	8002384 <YLIDARX2_PrintData+0x20>
	}

	printf("\r\n");
 80023c8:	4807      	ldr	r0, [pc, #28]	@ (80023e8 <YLIDARX2_PrintData+0x84>)
 80023ca:	f007 fee9 	bl	800a1a0 <puts>
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	0800dfc0 	.word	0x0800dfc0
 80023dc:	0800dfd8 	.word	0x0800dfd8
 80023e0:	0800dfe0 	.word	0x0800dfe0
 80023e4:	66666667 	.word	0x66666667
 80023e8:	0800dfe8 	.word	0x0800dfe8

080023ec <YLIDARX2_PrintSamples>:

/**
 * Debugging function to print samples
 */
void YLIDARX2_PrintSamples(h_YLIDARX2_t * hYLIDAR)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	for (int i=0; i < hYLIDAR->sample_quantity; i++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e023      	b.n	8002442 <YLIDARX2_PrintSamples+0x56>
			{
				printf("Sample %d: Distance = %d mm, ", i + 1, hYLIDAR->samples[i].distance);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1c58      	adds	r0, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6919      	ldr	r1, [r3, #16]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	885b      	ldrh	r3, [r3, #2]
 8002410:	461a      	mov	r2, r3
 8002412:	4601      	mov	r1, r0
 8002414:	4810      	ldr	r0, [pc, #64]	@ (8002458 <YLIDARX2_PrintSamples+0x6c>)
 8002416:	f007 fe5b 	bl	800a0d0 <iprintf>
	#if (LOGS)
				printf("Interference = %d, ", hYLIDAR->samples[i].interference_flag);
	#endif
				printf("Corrected Angle = %.2f°\r\n", hYLIDAR->samples[i].corrected_angle);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6919      	ldr	r1, [r3, #16]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f8b3 	bl	8000598 <__aeabi_f2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4809      	ldr	r0, [pc, #36]	@ (800245c <YLIDARX2_PrintSamples+0x70>)
 8002438:	f007 fe4a 	bl	800a0d0 <iprintf>
	for (int i=0; i < hYLIDAR->sample_quantity; i++)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3301      	adds	r3, #1
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7b1b      	ldrb	r3, [r3, #12]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4293      	cmp	r3, r2
 800244c:	dbd5      	blt.n	80023fa <YLIDARX2_PrintSamples+0xe>
			}
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	0800dfec 	.word	0x0800dfec
 800245c:	0800e00c 	.word	0x0800e00c

08002460 <YLIDARX2_CalculateChecksum>:

uint16_t YLIDARX2_CalculateChecksum(uint8_t *data, uint16_t length)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
	uint16_t checksum = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < length; i+=2) // Exclude received checksum bytes
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	e015      	b.n	80024a2 <YLIDARX2_CalculateChecksum+0x42>
	{
		checksum ^= data[i] | (data[i+1] << 8);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b21a      	sxth	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	3301      	adds	r3, #1
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	440b      	add	r3, r1
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	b21b      	sxth	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b21a      	sxth	r2, r3
 8002492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002496:	4053      	eors	r3, r2
 8002498:	b21b      	sxth	r3, r3
 800249a:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < length; i+=2) // Exclude received checksum bytes
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	3302      	adds	r3, #2
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dbe5      	blt.n	8002476 <YLIDARX2_CalculateChecksum+0x16>
	}

	return checksum;
 80024aa:	89fb      	ldrh	r3, [r7, #14]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <YLIDARX2_ParseData>:
 * @brief Parse and print YDLIDAR X2 scan data.
 * @param data: Pointer to the received data buffer.
 * @retval None
 */
void YLIDARX2_ParseData(h_YLIDARX2_t * hYLIDAR)
{
 80024b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024bc:	b093      	sub	sp, #76	@ 0x4c
 80024be:	af00      	add	r7, sp, #0
 80024c0:	61f8      	str	r0, [r7, #28]
	if (hYLIDAR->data_buffer[0] == YLIDAR_START_BYTE2 && hYLIDAR->data_buffer[1] == YLIDAR_START_BYTE1)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2baa      	cmp	r3, #170	@ 0xaa
 80024ca:	f040 8195 	bne.w	80027f8 <YLIDARX2_ParseData+0x340>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	3301      	adds	r3, #1
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b55      	cmp	r3, #85	@ 0x55
 80024d8:	f040 818e 	bne.w	80027f8 <YLIDARX2_ParseData+0x340>
	{
 80024dc:	466b      	mov	r3, sp
 80024de:	461e      	mov	r6, r3
#if (LOGS)
		printf("Started parsing\r\n");
#endif

		// Verify checksum
		uint16_t checksum = hYLIDAR->data_buffer[8] | (hYLIDAR->data_buffer[9] << 8);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	3308      	adds	r3, #8
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b21a      	sxth	r2, r3
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	3309      	adds	r3, #9
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	b21b      	sxth	r3, r3
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b21b      	sxth	r3, r3
 80024fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		uint16_t calculatedChecksum = YLIDARX2_CalculateChecksum(hYLIDAR->data_buffer, YLIDAR_SAMPLE_BYTE_OFFSET);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2108      	movs	r1, #8
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ffac 	bl	8002460 <YLIDARX2_CalculateChecksum>
 8002508:	4603      	mov	r3, r0
 800250a:	87bb      	strh	r3, [r7, #60]	@ 0x3c

		if (calculatedChecksum != checksum)
 800250c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800250e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <YLIDARX2_ParseData+0x60>
		{
#if (LOGS)
			printf("Checksum mismatch! Calculated: 0x%X, Received: 0x%X\r\n", calculatedChecksum, checksum);
#endif
			return;
 8002514:	46b5      	mov	sp, r6
 8002516:	e172      	b.n	80027fe <YLIDARX2_ParseData+0x346>
		}
#if (DEBUG)
		YLIDARX2_PrintData(hYLIDAR);
 8002518:	69f8      	ldr	r0, [r7, #28]
 800251a:	f7ff ff23 	bl	8002364 <YLIDARX2_PrintData>
#endif
		uint16_t startAngleRaw = hYLIDAR->data_buffer[4] | (hYLIDAR->data_buffer[5] << 8);
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	3304      	adds	r3, #4
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	b21a      	sxth	r2, r3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	3305      	adds	r3, #5
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	b21b      	sxth	r3, r3
 8002534:	4313      	orrs	r3, r2
 8002536:	b21b      	sxth	r3, r3
 8002538:	877b      	strh	r3, [r7, #58]	@ 0x3a
		uint16_t endAngleRaw = hYLIDAR->data_buffer[6] | (hYLIDAR->data_buffer[7] << 8);
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	3306      	adds	r3, #6
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b21a      	sxth	r2, r3
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	3307      	adds	r3, #7
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	b21b      	sxth	r3, r3
 8002550:	4313      	orrs	r3, r2
 8002552:	b21b      	sxth	r3, r3
 8002554:	873b      	strh	r3, [r7, #56]	@ 0x38

		// Calculate starting and ending angles
		float Angle_FSA = (startAngleRaw >> 1) / 64.0f; // Formula: Rshiftbit(FSA) / 64
 8002556:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	b29b      	uxth	r3, r3
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002564:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8002810 <YLIDARX2_ParseData+0x358>
 8002568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		float Angle_LSA = (endAngleRaw >> 1) / 64.0f;   // Formula: Rshiftbit(LSA) / 64
 8002570:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002572:	085b      	lsrs	r3, r3, #1
 8002574:	b29b      	uxth	r3, r3
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257e:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8002810 <YLIDARX2_ParseData+0x358>
 8002582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002586:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
#if (LOGS)
		printf("Start Angle: %.2f°, End Angle: %.2f°\r\n", Angle_FSA, Angle_LSA);
#endif

		// Calculate the angle difference
		float diffAngle = (Angle_LSA > Angle_FSA) ? (Angle_LSA - Angle_FSA) : (360.0f + Angle_LSA - Angle_FSA);
 800258a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800258e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	dd06      	ble.n	80025aa <YLIDARX2_ParseData+0xf2>
 800259c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80025a0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a8:	e009      	b.n	80025be <YLIDARX2_ParseData+0x106>
 80025aa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80025ae:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8002814 <YLIDARX2_ParseData+0x35c>
 80025b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80025b6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025be:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
#if (DEBUG)
		// Process sample data
		printf("Sample Data:\r\n");
 80025c2:	4895      	ldr	r0, [pc, #596]	@ (8002818 <YLIDARX2_ParseData+0x360>)
 80025c4:	f007 fdec 	bl	800a1a0 <puts>
#endif
		YLIDARX2_sample_t samples[hYLIDAR->sample_quantity];
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	7b19      	ldrb	r1, [r3, #12]
 80025cc:	460b      	mov	r3, r1
 80025ce:	3b01      	subs	r3, #1
 80025d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d2:	b2cb      	uxtb	r3, r1
 80025d4:	2200      	movs	r2, #0
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	617a      	str	r2, [r7, #20]
 80025da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025de:	1890      	adds	r0, r2, r2
 80025e0:	60b8      	str	r0, [r7, #8]
 80025e2:	415b      	adcs	r3, r3
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025ea:	6938      	ldr	r0, [r7, #16]
 80025ec:	eb12 0800 	adds.w	r8, r2, r0
 80025f0:	6978      	ldr	r0, [r7, #20]
 80025f2:	eb43 0900 	adc.w	r9, r3, r0
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002602:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002606:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800260a:	b2cb      	uxtb	r3, r1
 800260c:	2200      	movs	r2, #0
 800260e:	469a      	mov	sl, r3
 8002610:	4693      	mov	fp, r2
 8002612:	4652      	mov	r2, sl
 8002614:	465b      	mov	r3, fp
 8002616:	1890      	adds	r0, r2, r2
 8002618:	6038      	str	r0, [r7, #0]
 800261a:	415b      	adcs	r3, r3
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002622:	eb12 040a 	adds.w	r4, r2, sl
 8002626:	eb43 050b 	adc.w	r5, r3, fp
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	016b      	lsls	r3, r5, #5
 8002634:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002638:	0162      	lsls	r2, r4, #5
 800263a:	460a      	mov	r2, r1
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	3307      	adds	r3, #7
 8002646:	08db      	lsrs	r3, r3, #3
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	ebad 0d03 	sub.w	sp, sp, r3
 800264e:	466b      	mov	r3, sp
 8002650:	3303      	adds	r3, #3
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24

		for (int i = 0; i < hYLIDAR->sample_quantity; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	647b      	str	r3, [r7, #68]	@ 0x44
 800265c:	e0bd      	b.n	80027da <YLIDARX2_ParseData+0x322>
		{
			samples[i].data = hYLIDAR->data_buffer[10 + i*2] | (hYLIDAR->data_buffer[11 + i*2] << 8);
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002664:	3205      	adds	r2, #5
 8002666:	0052      	lsls	r2, r2, #1
 8002668:	4413      	add	r3, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b21a      	sxth	r2, r3
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002674:	0049      	lsls	r1, r1, #1
 8002676:	310b      	adds	r1, #11
 8002678:	440b      	add	r3, r1
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	b21b      	sxth	r3, r3
 8002680:	4313      	orrs	r3, r2
 8002682:	b21b      	sxth	r3, r3
 8002684:	b298      	uxth	r0, r3
 8002686:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	4602      	mov	r2, r0
 8002696:	801a      	strh	r2, [r3, #0]
			samples[i].distance = (uint16_t)((samples[i].data) >> 2);
 8002698:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800269a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	b298      	uxth	r0, r3
 80026ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3302      	adds	r3, #2
 80026bc:	4602      	mov	r2, r0
 80026be:	801a      	strh	r2, [r3, #0]
			samples[i].interference_flag = (samples[i].data) & 0b11; // Lower 2 bits
 80026c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	b2d8      	uxtb	r0, r3
 80026d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	3304      	adds	r3, #4
 80026e8:	4602      	mov	r2, r0
 80026ea:	701a      	strb	r2, [r3, #0]

			// Compute the intermediate angle
			float Angle_i = diffAngle * (float)((i - 1)/(hYLIDAR->sample_quantity-1)) + Angle_FSA;
 80026ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ee:	1e5a      	subs	r2, r3, #1
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	7b1b      	ldrb	r3, [r3, #12]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002702:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800270e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002712:	edc7 7a08 	vstr	s15, [r7, #32]

			// Compute angle correction
			float AngCorrect = 0.0f;
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	643b      	str	r3, [r7, #64]	@ 0x40

			if (samples[i].distance > 0)
 800271c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800271e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3302      	adds	r3, #2
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d040      	beq.n	80027b4 <YLIDARX2_ParseData+0x2fc>
			{
				AngCorrect = atan(21.8f * (155.3f - samples[i].distance)/(155.3f * samples[i].distance) ) * (180.0f / PI);
 8002732:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3302      	adds	r3, #2
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800281c <YLIDARX2_ParseData+0x364>
 8002750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002754:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002820 <YLIDARX2_ParseData+0x368>
 8002758:	ee27 7a87 	vmul.f32	s14, s15, s14
 800275c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800275e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3302      	adds	r3, #2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002776:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800281c <YLIDARX2_ParseData+0x364>
 800277a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800277e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002782:	ee16 0a90 	vmov	r0, s13
 8002786:	f7fd ff07 	bl	8000598 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	ec43 2b10 	vmov	d0, r2, r3
 8002792:	f00b f949 	bl	800da28 <atan>
 8002796:	ec51 0b10 	vmov	r0, r1, d0
 800279a:	a31b      	add	r3, pc, #108	@ (adr r3, 8002808 <YLIDARX2_ParseData+0x350>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd ff52 	bl	8000648 <__aeabi_dmul>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7fe fa44 	bl	8000c38 <__aeabi_d2f>
 80027b0:	4603      	mov	r3, r0
 80027b2:	643b      	str	r3, [r7, #64]	@ 0x40
			}

			samples[i].corrected_angle = Angle_i + AngCorrect;
 80027b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80027b8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80027bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3308      	adds	r3, #8
 80027d0:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < hYLIDAR->sample_quantity; i++)
 80027d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027d6:	3301      	adds	r3, #1
 80027d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	7b1b      	ldrb	r3, [r3, #12]
 80027de:	461a      	mov	r2, r3
 80027e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f6ff af3b 	blt.w	800265e <YLIDARX2_ParseData+0x1a6>
		}

		hYLIDAR->samples = samples;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ec:	611a      	str	r2, [r3, #16]
#if (DEBUG)
		YLIDARX2_PrintSamples(hYLIDAR);
 80027ee:	69f8      	ldr	r0, [r7, #28]
 80027f0:	f7ff fdfc 	bl	80023ec <YLIDARX2_PrintSamples>
 80027f4:	46b5      	mov	sp, r6
	{
 80027f6:	e002      	b.n	80027fe <YLIDARX2_ParseData+0x346>
#endif
	}
	else
	{
		printf("YLIDAR X2: Invalid start bytes!\r\n");
 80027f8:	480a      	ldr	r0, [pc, #40]	@ (8002824 <YLIDARX2_ParseData+0x36c>)
 80027fa:	f007 fcd1 	bl	800a1a0 <puts>
	}
}
 80027fe:	374c      	adds	r7, #76	@ 0x4c
 8002800:	46bd      	mov	sp, r7
 8002802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002806:	bf00      	nop
 8002808:	1a63bfe5 	.word	0x1a63bfe5
 800280c:	404ca5dc 	.word	0x404ca5dc
 8002810:	42800000 	.word	0x42800000
 8002814:	43b40000 	.word	0x43b40000
 8002818:	0800e028 	.word	0x0800e028
 800281c:	431b4ccd 	.word	0x431b4ccd
 8002820:	41ae6666 	.word	0x41ae6666
 8002824:	0800e038 	.word	0x0800e038

08002828 <YLIDARX2_UART_irq>:

/**
 * @param	UART buffer, should be a variable or an array of 1.
 */
void YLIDARX2_UART_irq(h_YLIDARX2_t * hYLIDAR)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	// Add received byte to the buffer
	uartBuffer[bufferIndex++] = hYLIDAR->uart_buffer[0];
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b2c      	ldr	r3, [pc, #176]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	1c59      	adds	r1, r3, #1
 800283a:	b288      	uxth	r0, r1
 800283c:	492a      	ldr	r1, [pc, #168]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 800283e:	8008      	strh	r0, [r1, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	4b29      	ldr	r3, [pc, #164]	@ (80028ec <YLIDARX2_UART_irq+0xc4>)
 8002846:	545a      	strb	r2, [r3, r1]

	// Check for start bytes and process data only if a full packet is received
	if (bufferIndex >= 2)
 8002848:	4b27      	ldr	r3, [pc, #156]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d93e      	bls.n	80028ce <YLIDARX2_UART_irq+0xa6>
	{
		if(uartBuffer[0] == YLIDAR_START_BYTE2 && uartBuffer[1] == YLIDAR_START_BYTE1)
 8002850:	4b26      	ldr	r3, [pc, #152]	@ (80028ec <YLIDARX2_UART_irq+0xc4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2baa      	cmp	r3, #170	@ 0xaa
 8002856:	d12b      	bne.n	80028b0 <YLIDARX2_UART_irq+0x88>
 8002858:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <YLIDARX2_UART_irq+0xc4>)
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	2b55      	cmp	r3, #85	@ 0x55
 800285e:	d127      	bne.n	80028b0 <YLIDARX2_UART_irq+0x88>
		{
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 8002860:	4b21      	ldr	r3, [pc, #132]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	2b19      	cmp	r3, #25
 8002866:	d931      	bls.n	80028cc <YLIDARX2_UART_irq+0xa4>
			{
				// Extract sample quantity
				hYLIDAR->sample_quantity = uartBuffer[3];
 8002868:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <YLIDARX2_UART_irq+0xc4>)
 800286a:	78da      	ldrb	r2, [r3, #3]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	731a      	strb	r2, [r3, #12]
				uint16_t expectedLength = YLIDAR_PACKET_HEADER_LENGTH + (hYLIDAR->sample_quantity * 2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7b1b      	ldrb	r3, [r3, #12]
 8002874:	330d      	adds	r3, #13
 8002876:	b29b      	uxth	r3, r3
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	81fb      	strh	r3, [r7, #14]

				// Process only when the full packet is received
				if (bufferIndex >= expectedLength)
 800287c:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	89fa      	ldrh	r2, [r7, #14]
 8002882:	429a      	cmp	r2, r3
 8002884:	d822      	bhi.n	80028cc <YLIDARX2_UART_irq+0xa4>
				{
					hYLIDAR->data_buffer = uartBuffer;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a18      	ldr	r2, [pc, #96]	@ (80028ec <YLIDARX2_UART_irq+0xc4>)
 800288a:	605a      	str	r2, [r3, #4]
					hYLIDAR->data_length = bufferIndex;
 800288c:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	609a      	str	r2, [r3, #8]

					YLIDARX2_ParseData(hYLIDAR);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fe0e 	bl	80024b8 <YLIDARX2_ParseData>

					// Reset the buffer
					bufferIndex = 0;
 800289c:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	801a      	strh	r2, [r3, #0]
					memset(uartBuffer, 0, sizeof(uartBuffer));
 80028a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028a6:	2100      	movs	r1, #0
 80028a8:	4810      	ldr	r0, [pc, #64]	@ (80028ec <YLIDARX2_UART_irq+0xc4>)
 80028aa:	f007 fd93 	bl	800a3d4 <memset>
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 80028ae:	e00d      	b.n	80028cc <YLIDARX2_UART_irq+0xa4>
			}
		}
		else
		{
			// Shift buffer to discard invalid start bytes
			memmove(uartBuffer, uartBuffer + 1, --bufferIndex);
 80028b0:	490f      	ldr	r1, [pc, #60]	@ (80028f0 <YLIDARX2_UART_irq+0xc8>)
 80028b2:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4809      	ldr	r0, [pc, #36]	@ (80028ec <YLIDARX2_UART_irq+0xc4>)
 80028c6:	f007 fd6b 	bl	800a3a0 <memmove>
 80028ca:	e000      	b.n	80028ce <YLIDARX2_UART_irq+0xa6>
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 80028cc:	bf00      	nop
		}
	}

	if (bufferIndex >= USART_BUFFER_SIZE)
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d6:	d302      	bcc.n	80028de <YLIDARX2_UART_irq+0xb6>
	{
		// Reset buffer if overflow occurs
		bufferIndex = 0;
 80028d8:	4b03      	ldr	r3, [pc, #12]	@ (80028e8 <YLIDARX2_UART_irq+0xc0>)
 80028da:	2200      	movs	r2, #0
 80028dc:	801a      	strh	r2, [r3, #0]
#if (LOGS)
		printf("YLIDAR X2: Buffer overflow! Clearing buffer.\r\n");
#endif
	}
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20001440 	.word	0x20001440
 80028ec:	20001444 	.word	0x20001444
 80028f0:	20001445 	.word	0x20001445

080028f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fe:	2003      	movs	r0, #3
 8002900:	f001 f94c 	bl	8003b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002904:	200f      	movs	r0, #15
 8002906:	f000 f80d 	bl	8002924 <HAL_InitTick>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	71fb      	strb	r3, [r7, #7]
 8002914:	e001      	b.n	800291a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002916:	f7fe fe69 	bl	80015ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800291a:	79fb      	ldrb	r3, [r7, #7]

}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002930:	4b16      	ldr	r3, [pc, #88]	@ (800298c <HAL_InitTick+0x68>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d022      	beq.n	800297e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002938:	4b15      	ldr	r3, [pc, #84]	@ (8002990 <HAL_InitTick+0x6c>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b13      	ldr	r3, [pc, #76]	@ (800298c <HAL_InitTick+0x68>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002944:	fbb1 f3f3 	udiv	r3, r1, r3
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	4618      	mov	r0, r3
 800294e:	f001 f958 	bl	8003c02 <HAL_SYSTICK_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10f      	bne.n	8002978 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	d809      	bhi.n	8002972 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800295e:	2200      	movs	r2, #0
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002966:	f001 f924 	bl	8003bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800296a:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_InitTick+0x70>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	e007      	b.n	8002982 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
 8002976:	e004      	b.n	8002982 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e001      	b.n	8002982 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000f4c 	.word	0x20000f4c
 8002990:	20000f44 	.word	0x20000f44
 8002994:	20000f48 	.word	0x20000f48

08002998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_IncTick+0x1c>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <HAL_IncTick+0x20>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <HAL_IncTick+0x1c>)
 80029a8:	6013      	str	r3, [r2, #0]
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	20001844 	.word	0x20001844
 80029b8:	20000f4c 	.word	0x20000f4c

080029bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_GetTick+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20001844 	.word	0x20001844

080029d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	609a      	str	r2, [r3, #8]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3360      	adds	r3, #96	@ 0x60
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <LL_ADC_SetOffset+0x44>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	03fff000 	.word	0x03fff000

08002a84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3360      	adds	r3, #96	@ 0x60
 8002a92:	461a      	mov	r2, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3360      	adds	r3, #96	@ 0x60
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b087      	sub	sp, #28
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3360      	adds	r3, #96	@ 0x60
 8002af6:	461a      	mov	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3360      	adds	r3, #96	@ 0x60
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	615a      	str	r2, [r3, #20]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3330      	adds	r3, #48	@ 0x30
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	4413      	add	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	211f      	movs	r1, #31
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	0e9b      	lsrs	r3, r3, #26
 8002bb0:	f003 011f 	and.w	r1, r3, #31
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3314      	adds	r3, #20
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	0e5b      	lsrs	r3, r3, #25
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	4413      	add	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	0d1b      	lsrs	r3, r3, #20
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2107      	movs	r1, #7
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	401a      	ands	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0d1b      	lsrs	r3, r3, #20
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	431a      	orrs	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	43db      	mvns	r3, r3
 8002c42:	401a      	ands	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0318 	and.w	r3, r3, #24
 8002c4a:	4908      	ldr	r1, [pc, #32]	@ (8002c6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c4c:	40d9      	lsrs	r1, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	400b      	ands	r3, r1
 8002c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	0007ffff 	.word	0x0007ffff

08002c70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6093      	str	r3, [r2, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca8:	d101      	bne.n	8002cae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ccc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cd0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cf8:	d101      	bne.n	8002cfe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <LL_ADC_IsEnabled+0x18>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <LL_ADC_IsEnabled+0x1a>
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d101      	bne.n	8002d4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b089      	sub	sp, #36	@ 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e167      	b.n	800306a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fe f9bb 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff67 	bl	8002c94 <LL_ADC_IsDeepPowerDownEnabled>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff4d 	bl	8002c70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff82 	bl	8002ce4 <LL_ADC_IsInternalRegulatorEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d115      	bne.n	8002e12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ff66 	bl	8002cbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df0:	4ba0      	ldr	r3, [pc, #640]	@ (8003074 <HAL_ADC_Init+0x2f4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	4aa0      	ldr	r2, [pc, #640]	@ (8003078 <HAL_ADC_Init+0x2f8>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	3301      	adds	r3, #1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e04:	e002      	b.n	8002e0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f9      	bne.n	8002e06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff64 	bl	8002ce4 <LL_ADC_IsInternalRegulatorEnabled>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	f043 0210 	orr.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff75 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 8002e48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 8100 	bne.w	8003058 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 80fc 	bne.w	8003058 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e68:	f043 0202 	orr.w	r2, r3, #2
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff49 	bl	8002d0c <LL_ADC_IsEnabled>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d111      	bne.n	8002ea4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e84:	f7ff ff42 	bl	8002d0c <LL_ADC_IsEnabled>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	487c      	ldr	r0, [pc, #496]	@ (800307c <HAL_ADC_Init+0x2fc>)
 8002e8c:	f7ff ff3e 	bl	8002d0c <LL_ADC_IsEnabled>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4323      	orrs	r3, r4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4878      	ldr	r0, [pc, #480]	@ (8003080 <HAL_ADC_Init+0x300>)
 8002ea0:	f7ff fd98 	bl	80029d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7f5b      	ldrb	r3, [r3, #29]
 8002ea8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002eb4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002eba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ec2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d106      	bne.n	8002ee0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	045b      	lsls	r3, r3, #17
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	4b60      	ldr	r3, [pc, #384]	@ (8003084 <HAL_ADC_Init+0x304>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	69b9      	ldr	r1, [r7, #24]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff14 	bl	8002d58 <LL_ADC_INJ_IsConversionOngoing>
 8002f30:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d16d      	bne.n	8003014 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d16a      	bne.n	8003014 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f42:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f4a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f5a:	f023 0302 	bic.w	r3, r3, #2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002f7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f88:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6911      	ldr	r1, [r2, #16]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002f9e:	e013      	b.n	8002fc8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002fae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fc4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d118      	bne.n	8003004 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fe8:	4311      	orrs	r1, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	e007      	b.n	8003014 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10c      	bne.n	8003036 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f023 010f 	bic.w	r1, r3, #15
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	1e5a      	subs	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
 8003034:	e007      	b.n	8003046 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 020f 	bic.w	r2, r2, #15
 8003044:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003056:	e007      	b.n	8003068 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	f043 0210 	orr.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003068:	7ffb      	ldrb	r3, [r7, #31]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3724      	adds	r7, #36	@ 0x24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}
 8003072:	bf00      	nop
 8003074:	20000f44 	.word	0x20000f44
 8003078:	053e2d63 	.word	0x053e2d63
 800307c:	50000100 	.word	0x50000100
 8003080:	50000300 	.word	0x50000300
 8003084:	fff04007 	.word	0xfff04007

08003088 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b0b6      	sub	sp, #216	@ 0xd8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x22>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e3c8      	b.n	800383c <HAL_ADC_ConfigChannel+0x7b4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fe3b 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 83ad 	bne.w	800381e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	f7ff fd51 	bl	8002b78 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fe29 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 80030e0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fe35 	bl	8002d58 <LL_ADC_INJ_IsConversionOngoing>
 80030ee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 81d9 	bne.w	80034ae <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003100:	2b00      	cmp	r3, #0
 8003102:	f040 81d4 	bne.w	80034ae <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800310e:	d10f      	bne.n	8003130 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	4619      	mov	r1, r3
 800311c:	f7ff fd58 	bl	8002bd0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fd12 	bl	8002b52 <LL_ADC_SetSamplingTimeCommonConfig>
 800312e:	e00e      	b.n	800314e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	461a      	mov	r2, r3
 800313e:	f7ff fd47 	bl	8002bd0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2100      	movs	r1, #0
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fd02 	bl	8002b52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	08db      	lsrs	r3, r3, #3
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b04      	cmp	r3, #4
 800316e:	d022      	beq.n	80031b6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6919      	ldr	r1, [r3, #16]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003180:	f7ff fc5c 	bl	8002a3c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6919      	ldr	r1, [r3, #16]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	461a      	mov	r2, r3
 8003192:	f7ff fca8 	bl	8002ae6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d102      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x124>
 80031a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031aa:	e000      	b.n	80031ae <HAL_ADC_ConfigChannel+0x126>
 80031ac:	2300      	movs	r3, #0
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7ff fcb4 	bl	8002b1c <LL_ADC_SetOffsetSaturation>
 80031b4:	e17b      	b.n	80034ae <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fc61 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x15a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2100      	movs	r1, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fc56 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 80031d8:	4603      	mov	r3, r0
 80031da:	0e9b      	lsrs	r3, r3, #26
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	e01e      	b.n	8003220 <HAL_ADC_ConfigChannel+0x198>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fc4b 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003200:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003204:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003208:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e004      	b.n	800321e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003214:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x1b0>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0e9b      	lsrs	r3, r3, #26
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	e018      	b.n	800326a <HAL_ADC_ConfigChannel+0x1e2>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800324c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003254:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800325c:	2320      	movs	r3, #32
 800325e:	e004      	b.n	800326a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003260:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800326a:	429a      	cmp	r2, r3
 800326c:	d106      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fc1a 	bl	8002ab0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fbfe 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x220>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2101      	movs	r1, #1
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fbf3 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	f003 021f 	and.w	r2, r3, #31
 80032a6:	e01e      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x25e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fbe8 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80032c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80032d6:	2320      	movs	r3, #32
 80032d8:	e004      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80032da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x276>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0e9b      	lsrs	r3, r3, #26
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	e018      	b.n	8003330 <HAL_ADC_ConfigChannel+0x2a8>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003312:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800331a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e004      	b.n	8003330 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003326:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003330:	429a      	cmp	r2, r3
 8003332:	d106      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2200      	movs	r2, #0
 800333a:	2101      	movs	r1, #1
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fbb7 	bl	8002ab0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fb9b 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <HAL_ADC_ConfigChannel+0x2e6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2102      	movs	r1, #2
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fb90 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 8003364:	4603      	mov	r3, r0
 8003366:	0e9b      	lsrs	r3, r3, #26
 8003368:	f003 021f 	and.w	r2, r3, #31
 800336c:	e01e      	b.n	80033ac <HAL_ADC_ConfigChannel+0x324>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2102      	movs	r1, #2
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fb85 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 800337a:	4603      	mov	r3, r0
 800337c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800338c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003394:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800339c:	2320      	movs	r3, #32
 800339e:	e004      	b.n	80033aa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80033a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x33c>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0e9b      	lsrs	r3, r3, #26
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	e016      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x36a>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80033e4:	2320      	movs	r3, #32
 80033e6:	e004      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80033e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d106      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fb56 	bl	8002ab0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2103      	movs	r1, #3
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fb3a 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x3a8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2103      	movs	r1, #3
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fb2f 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 8003426:	4603      	mov	r3, r0
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	f003 021f 	and.w	r2, r3, #31
 800342e:	e017      	b.n	8003460 <HAL_ADC_ConfigChannel+0x3d8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2103      	movs	r1, #3
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fb24 	bl	8002a84 <LL_ADC_GetOffsetChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003448:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800344a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800344c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e003      	b.n	800345e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003456:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x3f0>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	e011      	b.n	800349c <HAL_ADC_ConfigChannel+0x414>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003486:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003488:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800348a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800349c:	429a      	cmp	r2, r3
 800349e:	d106      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2103      	movs	r1, #3
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fb01 	bl	8002ab0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fc2a 	bl	8002d0c <LL_ADC_IsEnabled>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 8140 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f7ff fbab 	bl	8002c28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4a8f      	ldr	r2, [pc, #572]	@ (8003714 <HAL_ADC_ConfigChannel+0x68c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	f040 8131 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10b      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x47e>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0e9b      	lsrs	r3, r3, #26
 80034f4:	3301      	adds	r3, #1
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2b09      	cmp	r3, #9
 80034fc:	bf94      	ite	ls
 80034fe:	2301      	movls	r3, #1
 8003500:	2300      	movhi	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e019      	b.n	800353a <HAL_ADC_ConfigChannel+0x4b2>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003516:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003518:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800351e:	2320      	movs	r3, #32
 8003520:	e003      	b.n	800352a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003522:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2b09      	cmp	r3, #9
 8003532:	bf94      	ite	ls
 8003534:	2301      	movls	r3, #1
 8003536:	2300      	movhi	r3, #0
 8003538:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353a:	2b00      	cmp	r3, #0
 800353c:	d079      	beq.n	8003632 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003546:	2b00      	cmp	r3, #0
 8003548:	d107      	bne.n	800355a <HAL_ADC_ConfigChannel+0x4d2>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	0e9b      	lsrs	r3, r3, #26
 8003550:	3301      	adds	r3, #1
 8003552:	069b      	lsls	r3, r3, #26
 8003554:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003558:	e015      	b.n	8003586 <HAL_ADC_ConfigChannel+0x4fe>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800356c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003572:	2320      	movs	r3, #32
 8003574:	e003      	b.n	800357e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	3301      	adds	r3, #1
 8003580:	069b      	lsls	r3, r3, #26
 8003582:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x51e>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	0e9b      	lsrs	r3, r3, #26
 8003598:	3301      	adds	r3, #1
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	e017      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x54e>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80035b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80035b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80035be:	2320      	movs	r3, #32
 80035c0:	e003      	b.n	80035ca <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80035c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	2101      	movs	r1, #1
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	ea42 0103 	orr.w	r1, r2, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x574>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	3301      	adds	r3, #1
 80035ee:	f003 021f 	and.w	r2, r3, #31
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	051b      	lsls	r3, r3, #20
 80035fa:	e018      	b.n	800362e <HAL_ADC_ConfigChannel+0x5a6>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800360a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800360e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003614:	2320      	movs	r3, #32
 8003616:	e003      	b.n	8003620 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	3301      	adds	r3, #1
 8003622:	f003 021f 	and.w	r2, r3, #31
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362e:	430b      	orrs	r3, r1
 8003630:	e081      	b.n	8003736 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <HAL_ADC_ConfigChannel+0x5c6>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	0e9b      	lsrs	r3, r3, #26
 8003644:	3301      	adds	r3, #1
 8003646:	069b      	lsls	r3, r3, #26
 8003648:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800364c:	e015      	b.n	800367a <HAL_ADC_ConfigChannel+0x5f2>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003666:	2320      	movs	r3, #32
 8003668:	e003      	b.n	8003672 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	3301      	adds	r3, #1
 8003674:	069b      	lsls	r3, r3, #26
 8003676:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_ADC_ConfigChannel+0x612>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0e9b      	lsrs	r3, r3, #26
 800368c:	3301      	adds	r3, #1
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	e017      	b.n	80036ca <HAL_ADC_ConfigChannel+0x642>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	61fb      	str	r3, [r7, #28]
  return result;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80036b2:	2320      	movs	r3, #32
 80036b4:	e003      	b.n	80036be <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2101      	movs	r1, #1
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	ea42 0103 	orr.w	r1, r2, r3
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x66e>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0e9b      	lsrs	r3, r3, #26
 80036e0:	3301      	adds	r3, #1
 80036e2:	f003 021f 	and.w	r2, r3, #31
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	3b1e      	subs	r3, #30
 80036ee:	051b      	lsls	r3, r3, #20
 80036f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	e01e      	b.n	8003734 <HAL_ADC_ConfigChannel+0x6ac>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	613b      	str	r3, [r7, #16]
  return result;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800370e:	2320      	movs	r3, #32
 8003710:	e006      	b.n	8003720 <HAL_ADC_ConfigChannel+0x698>
 8003712:	bf00      	nop
 8003714:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	3b1e      	subs	r3, #30
 800372e:	051b      	lsls	r3, r3, #20
 8003730:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003734:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800373a:	4619      	mov	r1, r3
 800373c:	f7ff fa48 	bl	8002bd0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b3f      	ldr	r3, [pc, #252]	@ (8003844 <HAL_ADC_ConfigChannel+0x7bc>)
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d071      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800374c:	483e      	ldr	r0, [pc, #248]	@ (8003848 <HAL_ADC_ConfigChannel+0x7c0>)
 800374e:	f7ff f967 	bl	8002a20 <LL_ADC_GetCommonPathInternalCh>
 8003752:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3c      	ldr	r2, [pc, #240]	@ (800384c <HAL_ADC_ConfigChannel+0x7c4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_ADC_ConfigChannel+0x6e2>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3a      	ldr	r2, [pc, #232]	@ (8003850 <HAL_ADC_ConfigChannel+0x7c8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d127      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800376a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800376e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d121      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800377e:	d157      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003784:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003788:	4619      	mov	r1, r3
 800378a:	482f      	ldr	r0, [pc, #188]	@ (8003848 <HAL_ADC_ConfigChannel+0x7c0>)
 800378c:	f7ff f935 	bl	80029fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003790:	4b30      	ldr	r3, [pc, #192]	@ (8003854 <HAL_ADC_ConfigChannel+0x7cc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	4a30      	ldr	r2, [pc, #192]	@ (8003858 <HAL_ADC_ConfigChannel+0x7d0>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037aa:	e002      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f9      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037b8:	e03a      	b.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a27      	ldr	r2, [pc, #156]	@ (800385c <HAL_ADC_ConfigChannel+0x7d4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d113      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10d      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a22      	ldr	r2, [pc, #136]	@ (8003860 <HAL_ADC_ConfigChannel+0x7d8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d02a      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e2:	4619      	mov	r1, r3
 80037e4:	4818      	ldr	r0, [pc, #96]	@ (8003848 <HAL_ADC_ConfigChannel+0x7c0>)
 80037e6:	f7ff f908 	bl	80029fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037ea:	e021      	b.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003864 <HAL_ADC_ConfigChannel+0x7dc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d11c      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d116      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a16      	ldr	r2, [pc, #88]	@ (8003860 <HAL_ADC_ConfigChannel+0x7d8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d011      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800380c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003810:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003814:	4619      	mov	r1, r3
 8003816:	480c      	ldr	r0, [pc, #48]	@ (8003848 <HAL_ADC_ConfigChannel+0x7c0>)
 8003818:	f7ff f8ef 	bl	80029fa <LL_ADC_SetCommonPathInternalCh>
 800381c:	e008      	b.n	8003830 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f043 0220 	orr.w	r2, r3, #32
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003838:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800383c:	4618      	mov	r0, r3
 800383e:	37d8      	adds	r7, #216	@ 0xd8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	80080000 	.word	0x80080000
 8003848:	50000300 	.word	0x50000300
 800384c:	c3210000 	.word	0xc3210000
 8003850:	90c00010 	.word	0x90c00010
 8003854:	20000f44 	.word	0x20000f44
 8003858:	053e2d63 	.word	0x053e2d63
 800385c:	c7520000 	.word	0xc7520000
 8003860:	50000100 	.word	0x50000100
 8003864:	cb840000 	.word	0xcb840000

08003868 <LL_ADC_IsEnabled>:
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <LL_ADC_IsEnabled+0x18>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <LL_ADC_IsEnabled+0x1a>
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <LL_ADC_REG_IsConversionOngoing>:
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d101      	bne.n	80038a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b0a1      	sub	sp, #132	@ 0x84
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e08b      	b.n	80039ea <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038da:	2300      	movs	r3, #0
 80038dc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038de:	2300      	movs	r3, #0
 80038e0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ea:	d102      	bne.n	80038f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038ec:	4b41      	ldr	r3, [pc, #260]	@ (80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	e001      	b.n	80038f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e06a      	b.n	80039ea <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff ffb9 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 800391c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff ffb3 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d14c      	bne.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800392e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003930:	2b00      	cmp	r3, #0
 8003932:	d149      	bne.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003934:	4b30      	ldr	r3, [pc, #192]	@ (80039f8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003936:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d028      	beq.n	8003992 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003940:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003952:	035b      	lsls	r3, r3, #13
 8003954:	430b      	orrs	r3, r1
 8003956:	431a      	orrs	r2, r3
 8003958:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800395a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800395c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003960:	f7ff ff82 	bl	8003868 <LL_ADC_IsEnabled>
 8003964:	4604      	mov	r4, r0
 8003966:	4823      	ldr	r0, [pc, #140]	@ (80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003968:	f7ff ff7e 	bl	8003868 <LL_ADC_IsEnabled>
 800396c:	4603      	mov	r3, r0
 800396e:	4323      	orrs	r3, r4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d133      	bne.n	80039dc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003974:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800397c:	f023 030f 	bic.w	r3, r3, #15
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	6811      	ldr	r1, [r2, #0]
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	6892      	ldr	r2, [r2, #8]
 8003988:	430a      	orrs	r2, r1
 800398a:	431a      	orrs	r2, r3
 800398c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800398e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003990:	e024      	b.n	80039dc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800399a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800399c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800399e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039a2:	f7ff ff61 	bl	8003868 <LL_ADC_IsEnabled>
 80039a6:	4604      	mov	r4, r0
 80039a8:	4812      	ldr	r0, [pc, #72]	@ (80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80039aa:	f7ff ff5d 	bl	8003868 <LL_ADC_IsEnabled>
 80039ae:	4603      	mov	r3, r0
 80039b0:	4323      	orrs	r3, r4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d112      	bne.n	80039dc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039be:	f023 030f 	bic.w	r3, r3, #15
 80039c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80039c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039c6:	e009      	b.n	80039dc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80039da:	e000      	b.n	80039de <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80039e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3784      	adds	r7, #132	@ 0x84
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd90      	pop	{r4, r7, pc}
 80039f2:	bf00      	nop
 80039f4:	50000100 	.word	0x50000100
 80039f8:	50000300 	.word	0x50000300

080039fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a40 <__NVIC_SetPriorityGrouping+0x44>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a2e:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <__NVIC_SetPriorityGrouping+0x44>)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	60d3      	str	r3, [r2, #12]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a48:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <__NVIC_GetPriorityGrouping+0x18>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	f003 0307 	and.w	r3, r3, #7
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	db0b      	blt.n	8003a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	f003 021f 	and.w	r2, r3, #31
 8003a78:	4907      	ldr	r1, [pc, #28]	@ (8003a98 <__NVIC_EnableIRQ+0x38>)
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2001      	movs	r0, #1
 8003a82:	fa00 f202 	lsl.w	r2, r0, r2
 8003a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	db0a      	blt.n	8003ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	490c      	ldr	r1, [pc, #48]	@ (8003ae8 <__NVIC_SetPriority+0x4c>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac4:	e00a      	b.n	8003adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4908      	ldr	r1, [pc, #32]	@ (8003aec <__NVIC_SetPriority+0x50>)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	440b      	add	r3, r1
 8003ada:	761a      	strb	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e100 	.word	0xe000e100
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	@ 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f1c3 0307 	rsb	r3, r3, #7
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	bf28      	it	cs
 8003b0e:	2304      	movcs	r3, #4
 8003b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d902      	bls.n	8003b20 <NVIC_EncodePriority+0x30>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3b03      	subs	r3, #3
 8003b1e:	e000      	b.n	8003b22 <NVIC_EncodePriority+0x32>
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	401a      	ands	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	4313      	orrs	r3, r2
         );
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	@ 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b68:	d301      	bcc.n	8003b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00f      	b.n	8003b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b98 <SysTick_Config+0x40>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b76:	210f      	movs	r1, #15
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b7c:	f7ff ff8e 	bl	8003a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <SysTick_Config+0x40>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b86:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <SysTick_Config+0x40>)
 8003b88:	2207      	movs	r2, #7
 8003b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	e000e010 	.word	0xe000e010

08003b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff29 	bl	80039fc <__NVIC_SetPriorityGrouping>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc0:	f7ff ff40 	bl	8003a44 <__NVIC_GetPriorityGrouping>
 8003bc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	6978      	ldr	r0, [r7, #20]
 8003bcc:	f7ff ff90 	bl	8003af0 <NVIC_EncodePriority>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff5f 	bl	8003a9c <__NVIC_SetPriority>
}
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4603      	mov	r3, r0
 8003bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff33 	bl	8003a60 <__NVIC_EnableIRQ>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ffa4 	bl	8003b58 <SysTick_Config>
 8003c10:	4603      	mov	r3, r0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d005      	beq.n	8003c3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2204      	movs	r2, #4
 8003c36:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e037      	b.n	8003cae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 020e 	bic.w	r2, r2, #14
 8003c4c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c5c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	f003 021f 	and.w	r2, r3, #31
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c8a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00c      	beq.n	8003cae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ca2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d00d      	beq.n	8003d00 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
 8003cfe:	e047      	b.n	8003d90 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 020e 	bic.w	r2, r2, #14
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d42:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
    }
  }
  return status;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003daa:	e15a      	b.n	8004062 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 814c 	beq.w	800405c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d005      	beq.n	8003ddc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d130      	bne.n	8003e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e12:	2201      	movs	r2, #1
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	f003 0201 	and.w	r2, r3, #1
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d017      	beq.n	8003e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d123      	bne.n	8003ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	08da      	lsrs	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3208      	adds	r2, #8
 8003e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	08da      	lsrs	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3208      	adds	r2, #8
 8003ec8:	6939      	ldr	r1, [r7, #16]
 8003eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0203 	and.w	r2, r3, #3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80a6 	beq.w	800405c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f10:	4b5b      	ldr	r3, [pc, #364]	@ (8004080 <HAL_GPIO_Init+0x2e4>)
 8003f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f14:	4a5a      	ldr	r2, [pc, #360]	@ (8004080 <HAL_GPIO_Init+0x2e4>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f1c:	4b58      	ldr	r3, [pc, #352]	@ (8004080 <HAL_GPIO_Init+0x2e4>)
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f28:	4a56      	ldr	r2, [pc, #344]	@ (8004084 <HAL_GPIO_Init+0x2e8>)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	3302      	adds	r3, #2
 8003f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	220f      	movs	r2, #15
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f52:	d01f      	beq.n	8003f94 <HAL_GPIO_Init+0x1f8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a4c      	ldr	r2, [pc, #304]	@ (8004088 <HAL_GPIO_Init+0x2ec>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d019      	beq.n	8003f90 <HAL_GPIO_Init+0x1f4>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a4b      	ldr	r2, [pc, #300]	@ (800408c <HAL_GPIO_Init+0x2f0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_GPIO_Init+0x1f0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a4a      	ldr	r2, [pc, #296]	@ (8004090 <HAL_GPIO_Init+0x2f4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00d      	beq.n	8003f88 <HAL_GPIO_Init+0x1ec>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a49      	ldr	r2, [pc, #292]	@ (8004094 <HAL_GPIO_Init+0x2f8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <HAL_GPIO_Init+0x1e8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a48      	ldr	r2, [pc, #288]	@ (8004098 <HAL_GPIO_Init+0x2fc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_GPIO_Init+0x1e4>
 8003f7c:	2305      	movs	r3, #5
 8003f7e:	e00a      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f80:	2306      	movs	r3, #6
 8003f82:	e008      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f84:	2304      	movs	r3, #4
 8003f86:	e006      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e004      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e002      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f94:	2300      	movs	r3, #0
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	f002 0203 	and.w	r2, r2, #3
 8003f9c:	0092      	lsls	r2, r2, #2
 8003f9e:	4093      	lsls	r3, r2
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fa6:	4937      	ldr	r1, [pc, #220]	@ (8004084 <HAL_GPIO_Init+0x2e8>)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	3302      	adds	r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fb4:	4b39      	ldr	r3, [pc, #228]	@ (800409c <HAL_GPIO_Init+0x300>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fd8:	4a30      	ldr	r2, [pc, #192]	@ (800409c <HAL_GPIO_Init+0x300>)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fde:	4b2f      	ldr	r3, [pc, #188]	@ (800409c <HAL_GPIO_Init+0x300>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004002:	4a26      	ldr	r2, [pc, #152]	@ (800409c <HAL_GPIO_Init+0x300>)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004008:	4b24      	ldr	r3, [pc, #144]	@ (800409c <HAL_GPIO_Init+0x300>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	43db      	mvns	r3, r3
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4013      	ands	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800402c:	4a1b      	ldr	r2, [pc, #108]	@ (800409c <HAL_GPIO_Init+0x300>)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004032:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <HAL_GPIO_Init+0x300>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	43db      	mvns	r3, r3
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4013      	ands	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004056:	4a11      	ldr	r2, [pc, #68]	@ (800409c <HAL_GPIO_Init+0x300>)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3301      	adds	r3, #1
 8004060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f ae9d 	bne.w	8003dac <HAL_GPIO_Init+0x10>
  }
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40021000 	.word	0x40021000
 8004084:	40010000 	.word	0x40010000
 8004088:	48000400 	.word	0x48000400
 800408c:	48000800 	.word	0x48000800
 8004090:	48000c00 	.word	0x48000c00
 8004094:	48001000 	.word	0x48001000
 8004098:	48001400 	.word	0x48001400
 800409c:	40010400 	.word	0x40010400

080040a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
 80040ac:	4613      	mov	r3, r2
 80040ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040b0:	787b      	ldrb	r3, [r7, #1]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040bc:	e002      	b.n	80040c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d141      	bne.n	8004162 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040de:	4b4b      	ldr	r3, [pc, #300]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ea:	d131      	bne.n	8004150 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040ec:	4b47      	ldr	r3, [pc, #284]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040f2:	4a46      	ldr	r2, [pc, #280]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040fc:	4b43      	ldr	r3, [pc, #268]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004104:	4a41      	ldr	r2, [pc, #260]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800410a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800410c:	4b40      	ldr	r3, [pc, #256]	@ (8004210 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2232      	movs	r2, #50	@ 0x32
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	4a3f      	ldr	r2, [pc, #252]	@ (8004214 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	0c9b      	lsrs	r3, r3, #18
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004122:	e002      	b.n	800412a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3b01      	subs	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800412a:	4b38      	ldr	r3, [pc, #224]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004136:	d102      	bne.n	800413e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f2      	bne.n	8004124 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800413e:	4b33      	ldr	r3, [pc, #204]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414a:	d158      	bne.n	80041fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e057      	b.n	8004200 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004150:	4b2e      	ldr	r3, [pc, #184]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004156:	4a2d      	ldr	r2, [pc, #180]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800415c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004160:	e04d      	b.n	80041fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004168:	d141      	bne.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800416a:	4b28      	ldr	r3, [pc, #160]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004176:	d131      	bne.n	80041dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004178:	4b24      	ldr	r3, [pc, #144]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800417e:	4a23      	ldr	r2, [pc, #140]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004184:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004188:	4b20      	ldr	r3, [pc, #128]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004190:	4a1e      	ldr	r2, [pc, #120]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004196:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004198:	4b1d      	ldr	r3, [pc, #116]	@ (8004210 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2232      	movs	r2, #50	@ 0x32
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	0c9b      	lsrs	r3, r3, #18
 80041aa:	3301      	adds	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ae:	e002      	b.n	80041b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041b6:	4b15      	ldr	r3, [pc, #84]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c2:	d102      	bne.n	80041ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f2      	bne.n	80041b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041ca:	4b10      	ldr	r3, [pc, #64]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d6:	d112      	bne.n	80041fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e011      	b.n	8004200 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041dc:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e2:	4a0a      	ldr	r2, [pc, #40]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80041ec:	e007      	b.n	80041fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041ee:	4b07      	ldr	r3, [pc, #28]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041f6:	4a05      	ldr	r2, [pc, #20]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	40007000 	.word	0x40007000
 8004210:	20000f44 	.word	0x20000f44
 8004214:	431bde83 	.word	0x431bde83

08004218 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800421c:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a04      	ldr	r2, [pc, #16]	@ (8004234 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004222:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004226:	6093      	str	r3, [r2, #8]
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40007000 	.word	0x40007000

08004238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e2fe      	b.n	8004848 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d075      	beq.n	8004342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004256:	4b97      	ldr	r3, [pc, #604]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004260:	4b94      	ldr	r3, [pc, #592]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	d102      	bne.n	8004276 <HAL_RCC_OscConfig+0x3e>
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d002      	beq.n	800427c <HAL_RCC_OscConfig+0x44>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d10b      	bne.n	8004294 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	4b8d      	ldr	r3, [pc, #564]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d05b      	beq.n	8004340 <HAL_RCC_OscConfig+0x108>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d157      	bne.n	8004340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e2d9      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800429c:	d106      	bne.n	80042ac <HAL_RCC_OscConfig+0x74>
 800429e:	4b85      	ldr	r3, [pc, #532]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a84      	ldr	r2, [pc, #528]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e01d      	b.n	80042e8 <HAL_RCC_OscConfig+0xb0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x98>
 80042b6:	4b7f      	ldr	r3, [pc, #508]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7e      	ldr	r2, [pc, #504]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b7c      	ldr	r3, [pc, #496]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7b      	ldr	r2, [pc, #492]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0xb0>
 80042d0:	4b78      	ldr	r3, [pc, #480]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a77      	ldr	r2, [pc, #476]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b75      	ldr	r3, [pc, #468]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a74      	ldr	r2, [pc, #464]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fe fb64 	bl	80029bc <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7fe fb60 	bl	80029bc <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	@ 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e29e      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800430a:	4b6a      	ldr	r3, [pc, #424]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0xc0>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fe fb50 	bl	80029bc <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7fe fb4c 	bl	80029bc <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	@ 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e28a      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004332:	4b60      	ldr	r3, [pc, #384]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0xe8>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d075      	beq.n	800443a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800434e:	4b59      	ldr	r3, [pc, #356]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004358:	4b56      	ldr	r3, [pc, #344]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d102      	bne.n	800436e <HAL_RCC_OscConfig+0x136>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d002      	beq.n	8004374 <HAL_RCC_OscConfig+0x13c>
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d11f      	bne.n	80043b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004374:	4b4f      	ldr	r3, [pc, #316]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_OscConfig+0x154>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e25d      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438c:	4b49      	ldr	r3, [pc, #292]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	4946      	ldr	r1, [pc, #280]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043a0:	4b45      	ldr	r3, [pc, #276]	@ (80044b8 <HAL_RCC_OscConfig+0x280>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fabd 	bl	8002924 <HAL_InitTick>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d043      	beq.n	8004438 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e249      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d023      	beq.n	8004404 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043bc:	4b3d      	ldr	r3, [pc, #244]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3c      	ldr	r2, [pc, #240]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fe faf8 	bl	80029bc <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d0:	f7fe faf4 	bl	80029bc <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e232      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e2:	4b34      	ldr	r3, [pc, #208]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ee:	4b31      	ldr	r3, [pc, #196]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	061b      	lsls	r3, r3, #24
 80043fc:	492d      	ldr	r1, [pc, #180]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
 8004402:	e01a      	b.n	800443a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004404:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2a      	ldr	r2, [pc, #168]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800440a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800440e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fe fad4 	bl	80029bc <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004418:	f7fe fad0 	bl	80029bc <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e20e      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800442a:	4b22      	ldr	r3, [pc, #136]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x1e0>
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004438:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d041      	beq.n	80044ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01c      	beq.n	8004488 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444e:	4b19      	ldr	r3, [pc, #100]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004454:	4a17      	ldr	r2, [pc, #92]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445e:	f7fe faad 	bl	80029bc <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004466:	f7fe faa9 	bl	80029bc <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e1e7      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004478:	4b0e      	ldr	r3, [pc, #56]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800447a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0ef      	beq.n	8004466 <HAL_RCC_OscConfig+0x22e>
 8004486:	e020      	b.n	80044ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004488:	4b0a      	ldr	r3, [pc, #40]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800448a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800448e:	4a09      	ldr	r2, [pc, #36]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fe fa90 	bl	80029bc <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800449e:	e00d      	b.n	80044bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a0:	f7fe fa8c 	bl	80029bc <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d906      	bls.n	80044bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e1ca      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	20000f48 	.word	0x20000f48
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044bc:	4b8c      	ldr	r3, [pc, #560]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1ea      	bne.n	80044a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80a6 	beq.w	8004624 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d8:	2300      	movs	r3, #0
 80044da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044dc:	4b84      	ldr	r3, [pc, #528]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_OscConfig+0x2b4>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x2b6>
 80044ec:	2300      	movs	r3, #0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	4b7f      	ldr	r3, [pc, #508]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f6:	4a7e      	ldr	r2, [pc, #504]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80044fe:	4b7c      	ldr	r3, [pc, #496]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800450a:	2301      	movs	r3, #1
 800450c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800450e:	4b79      	ldr	r3, [pc, #484]	@ (80046f4 <HAL_RCC_OscConfig+0x4bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d118      	bne.n	800454c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800451a:	4b76      	ldr	r3, [pc, #472]	@ (80046f4 <HAL_RCC_OscConfig+0x4bc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a75      	ldr	r2, [pc, #468]	@ (80046f4 <HAL_RCC_OscConfig+0x4bc>)
 8004520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004526:	f7fe fa49 	bl	80029bc <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452e:	f7fe fa45 	bl	80029bc <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e183      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004540:	4b6c      	ldr	r3, [pc, #432]	@ (80046f4 <HAL_RCC_OscConfig+0x4bc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d108      	bne.n	8004566 <HAL_RCC_OscConfig+0x32e>
 8004554:	4b66      	ldr	r3, [pc, #408]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455a:	4a65      	ldr	r2, [pc, #404]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004564:	e024      	b.n	80045b0 <HAL_RCC_OscConfig+0x378>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b05      	cmp	r3, #5
 800456c:	d110      	bne.n	8004590 <HAL_RCC_OscConfig+0x358>
 800456e:	4b60      	ldr	r3, [pc, #384]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004574:	4a5e      	ldr	r2, [pc, #376]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004576:	f043 0304 	orr.w	r3, r3, #4
 800457a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800457e:	4b5c      	ldr	r3, [pc, #368]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004584:	4a5a      	ldr	r2, [pc, #360]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800458e:	e00f      	b.n	80045b0 <HAL_RCC_OscConfig+0x378>
 8004590:	4b57      	ldr	r3, [pc, #348]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004596:	4a56      	ldr	r2, [pc, #344]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045a0:	4b53      	ldr	r3, [pc, #332]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a6:	4a52      	ldr	r2, [pc, #328]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d016      	beq.n	80045e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fe fa00 	bl	80029bc <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fe f9fc 	bl	80029bc <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e138      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d6:	4b46      	ldr	r3, [pc, #280]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ed      	beq.n	80045c0 <HAL_RCC_OscConfig+0x388>
 80045e4:	e015      	b.n	8004612 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7fe f9e9 	bl	80029bc <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fe f9e5 	bl	80029bc <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e121      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004604:	4b3a      	ldr	r3, [pc, #232]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ed      	bne.n	80045ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004612:	7ffb      	ldrb	r3, [r7, #31]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004618:	4b35      	ldr	r3, [pc, #212]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461c:	4a34      	ldr	r2, [pc, #208]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 800461e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004622:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d03c      	beq.n	80046aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01c      	beq.n	8004672 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004638:	4b2d      	ldr	r3, [pc, #180]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 800463a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800463e:	4a2c      	ldr	r2, [pc, #176]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fe f9b8 	bl	80029bc <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004650:	f7fe f9b4 	bl	80029bc <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e0f2      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004662:	4b23      	ldr	r3, [pc, #140]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004664:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0ef      	beq.n	8004650 <HAL_RCC_OscConfig+0x418>
 8004670:	e01b      	b.n	80046aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004672:	4b1f      	ldr	r3, [pc, #124]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004678:	4a1d      	ldr	r2, [pc, #116]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004682:	f7fe f99b 	bl	80029bc <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800468a:	f7fe f997 	bl	80029bc <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0d5      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800469c:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 800469e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1ef      	bne.n	800468a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80c9 	beq.w	8004846 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b4:	4b0e      	ldr	r3, [pc, #56]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	f000 8083 	beq.w	80047c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d15e      	bne.n	8004788 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a08      	ldr	r2, [pc, #32]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80046d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fe f971 	bl	80029bc <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046dc:	e00c      	b.n	80046f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046de:	f7fe f96d 	bl	80029bc <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d905      	bls.n	80046f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e0ab      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f8:	4b55      	ldr	r3, [pc, #340]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ec      	bne.n	80046de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004704:	4b52      	ldr	r3, [pc, #328]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	4b52      	ldr	r3, [pc, #328]	@ (8004854 <HAL_RCC_OscConfig+0x61c>)
 800470a:	4013      	ands	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6a11      	ldr	r1, [r2, #32]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004714:	3a01      	subs	r2, #1
 8004716:	0112      	lsls	r2, r2, #4
 8004718:	4311      	orrs	r1, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800471e:	0212      	lsls	r2, r2, #8
 8004720:	4311      	orrs	r1, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004726:	0852      	lsrs	r2, r2, #1
 8004728:	3a01      	subs	r2, #1
 800472a:	0552      	lsls	r2, r2, #21
 800472c:	4311      	orrs	r1, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004732:	0852      	lsrs	r2, r2, #1
 8004734:	3a01      	subs	r2, #1
 8004736:	0652      	lsls	r2, r2, #25
 8004738:	4311      	orrs	r1, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800473e:	06d2      	lsls	r2, r2, #27
 8004740:	430a      	orrs	r2, r1
 8004742:	4943      	ldr	r1, [pc, #268]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 8004744:	4313      	orrs	r3, r2
 8004746:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004748:	4b41      	ldr	r3, [pc, #260]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a40      	ldr	r2, [pc, #256]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 800474e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004752:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004754:	4b3e      	ldr	r3, [pc, #248]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a3d      	ldr	r2, [pc, #244]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 800475a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800475e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fe f92c 	bl	80029bc <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004768:	f7fe f928 	bl	80029bc <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e066      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477a:	4b35      	ldr	r3, [pc, #212]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0x530>
 8004786:	e05e      	b.n	8004846 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004788:	4b31      	ldr	r3, [pc, #196]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a30      	ldr	r2, [pc, #192]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 800478e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fe f912 	bl	80029bc <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fe f90e 	bl	80029bc <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e04c      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ae:	4b28      	ldr	r3, [pc, #160]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047ba:	4b25      	ldr	r3, [pc, #148]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	4924      	ldr	r1, [pc, #144]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 80047c0:	4b25      	ldr	r3, [pc, #148]	@ (8004858 <HAL_RCC_OscConfig+0x620>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	60cb      	str	r3, [r1, #12]
 80047c6:	e03e      	b.n	8004846 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e039      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004850 <HAL_RCC_OscConfig+0x618>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f003 0203 	and.w	r2, r3, #3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d12c      	bne.n	8004842 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	3b01      	subs	r3, #1
 80047f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d123      	bne.n	8004842 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d11b      	bne.n	8004842 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d113      	bne.n	8004842 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	3b01      	subs	r3, #1
 8004828:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d109      	bne.n	8004842 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	3b01      	subs	r3, #1
 800483c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000
 8004854:	019f800c 	.word	0x019f800c
 8004858:	feeefffc 	.word	0xfeeefffc

0800485c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e11e      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004874:	4b91      	ldr	r3, [pc, #580]	@ (8004abc <HAL_RCC_ClockConfig+0x260>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d910      	bls.n	80048a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	4b8e      	ldr	r3, [pc, #568]	@ (8004abc <HAL_RCC_ClockConfig+0x260>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 020f 	bic.w	r2, r3, #15
 800488a:	498c      	ldr	r1, [pc, #560]	@ (8004abc <HAL_RCC_ClockConfig+0x260>)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004892:	4b8a      	ldr	r3, [pc, #552]	@ (8004abc <HAL_RCC_ClockConfig+0x260>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e106      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d073      	beq.n	8004998 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d129      	bne.n	800490c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b8:	4b81      	ldr	r3, [pc, #516]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0f4      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048c8:	f000 f99e 	bl	8004c08 <RCC_GetSysClockFreqFromPLLSource>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4a7c      	ldr	r2, [pc, #496]	@ (8004ac4 <HAL_RCC_ClockConfig+0x268>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d93f      	bls.n	8004956 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048d6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d033      	beq.n	8004956 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d12f      	bne.n	8004956 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048f6:	4b72      	ldr	r3, [pc, #456]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048fe:	4a70      	ldr	r2, [pc, #448]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004904:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004906:	2380      	movs	r3, #128	@ 0x80
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e024      	b.n	8004956 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d107      	bne.n	8004924 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004914:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0c6      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004924:	4b66      	ldr	r3, [pc, #408]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0be      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004934:	f000 f8ce 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8004938:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4a61      	ldr	r2, [pc, #388]	@ (8004ac4 <HAL_RCC_ClockConfig+0x268>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d909      	bls.n	8004956 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004942:	4b5f      	ldr	r3, [pc, #380]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800494a:	4a5d      	ldr	r2, [pc, #372]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 800494c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004950:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004956:	4b5a      	ldr	r3, [pc, #360]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f023 0203 	bic.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4957      	ldr	r1, [pc, #348]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004964:	4313      	orrs	r3, r2
 8004966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004968:	f7fe f828 	bl	80029bc <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	e00a      	b.n	8004986 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004970:	f7fe f824 	bl	80029bc <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e095      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	4b4e      	ldr	r3, [pc, #312]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 020c 	and.w	r2, r3, #12
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	429a      	cmp	r2, r3
 8004996:	d1eb      	bne.n	8004970 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d023      	beq.n	80049ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b0:	4b43      	ldr	r3, [pc, #268]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a42      	ldr	r2, [pc, #264]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80049b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049c8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80049d0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80049d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d8:	4b39      	ldr	r3, [pc, #228]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4936      	ldr	r1, [pc, #216]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
 80049ea:	e008      	b.n	80049fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b80      	cmp	r3, #128	@ 0x80
 80049f0:	d105      	bne.n	80049fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049f2:	4b33      	ldr	r3, [pc, #204]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	4a32      	ldr	r2, [pc, #200]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 80049f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049fe:	4b2f      	ldr	r3, [pc, #188]	@ (8004abc <HAL_RCC_ClockConfig+0x260>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d21d      	bcs.n	8004a48 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004abc <HAL_RCC_ClockConfig+0x260>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 020f 	bic.w	r2, r3, #15
 8004a14:	4929      	ldr	r1, [pc, #164]	@ (8004abc <HAL_RCC_ClockConfig+0x260>)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a1c:	f7fd ffce 	bl	80029bc <HAL_GetTick>
 8004a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a24:	f7fd ffca 	bl	80029bc <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e03b      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	4b20      	ldr	r3, [pc, #128]	@ (8004abc <HAL_RCC_ClockConfig+0x260>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d1ed      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a54:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4917      	ldr	r1, [pc, #92]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a72:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	490f      	ldr	r1, [pc, #60]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a86:	f000 f825 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac0 <HAL_RCC_ClockConfig+0x264>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	490c      	ldr	r1, [pc, #48]	@ (8004ac8 <HAL_RCC_ClockConfig+0x26c>)
 8004a98:	5ccb      	ldrb	r3, [r1, r3]
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8004acc <HAL_RCC_ClockConfig+0x270>)
 8004aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <HAL_RCC_ClockConfig+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd ff3a 	bl	8002924 <HAL_InitTick>
 8004ab0:	4603      	mov	r3, r0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40022000 	.word	0x40022000
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	04c4b400 	.word	0x04c4b400
 8004ac8:	0800e05c 	.word	0x0800e05c
 8004acc:	20000f44 	.word	0x20000f44
 8004ad0:	20000f48 	.word	0x20000f48

08004ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ada:	4b2c      	ldr	r3, [pc, #176]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d102      	bne.n	8004aec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	e047      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004aec:	4b27      	ldr	r3, [pc, #156]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d102      	bne.n	8004afe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004af8:	4b26      	ldr	r3, [pc, #152]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	e03e      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004afe:	4b23      	ldr	r3, [pc, #140]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b0c      	cmp	r3, #12
 8004b08:	d136      	bne.n	8004b78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b0a:	4b20      	ldr	r3, [pc, #128]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b14:	4b1d      	ldr	r3, [pc, #116]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	3301      	adds	r3, #1
 8004b20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d10c      	bne.n	8004b42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b28:	4a1a      	ldr	r2, [pc, #104]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	4a16      	ldr	r2, [pc, #88]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b32:	68d2      	ldr	r2, [r2, #12]
 8004b34:	0a12      	lsrs	r2, r2, #8
 8004b36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	617b      	str	r3, [r7, #20]
      break;
 8004b40:	e00c      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b42:	4a13      	ldr	r2, [pc, #76]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4a:	4a10      	ldr	r2, [pc, #64]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b4c:	68d2      	ldr	r2, [r2, #12]
 8004b4e:	0a12      	lsrs	r2, r2, #8
 8004b50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b54:	fb02 f303 	mul.w	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]
      break;
 8004b5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	0e5b      	lsrs	r3, r3, #25
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	3301      	adds	r3, #1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	e001      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b7c:	693b      	ldr	r3, [r7, #16]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	00f42400 	.word	0x00f42400
 8004b94:	007a1200 	.word	0x007a1200

08004b98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	@ (8004bac <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000f44 	.word	0x20000f44

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bb4:	f7ff fff0 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4904      	ldr	r1, [pc, #16]	@ (8004bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	0800e06c 	.word	0x0800e06c

08004bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004be0:	f7ff ffda 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004be4:	4602      	mov	r2, r0
 8004be6:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	0adb      	lsrs	r3, r3, #11
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	4904      	ldr	r1, [pc, #16]	@ (8004c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bf2:	5ccb      	ldrb	r3, [r1, r3]
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000
 8004c04:	0800e06c 	.word	0x0800e06c

08004c08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c18:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d10c      	bne.n	8004c46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c2c:	4a17      	ldr	r2, [pc, #92]	@ (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	4a14      	ldr	r2, [pc, #80]	@ (8004c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c36:	68d2      	ldr	r2, [r2, #12]
 8004c38:	0a12      	lsrs	r2, r2, #8
 8004c3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	617b      	str	r3, [r7, #20]
    break;
 8004c44:	e00c      	b.n	8004c60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c46:	4a12      	ldr	r2, [pc, #72]	@ (8004c90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8004c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c50:	68d2      	ldr	r2, [r2, #12]
 8004c52:	0a12      	lsrs	r2, r2, #8
 8004c54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c58:	fb02 f303 	mul.w	r3, r2, r3
 8004c5c:	617b      	str	r3, [r7, #20]
    break;
 8004c5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	0e5b      	lsrs	r3, r3, #25
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c7a:	687b      	ldr	r3, [r7, #4]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	007a1200 	.word	0x007a1200
 8004c90:	00f42400 	.word	0x00f42400

08004c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8098 	beq.w	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb6:	4b43      	ldr	r3, [pc, #268]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10d      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	4b40      	ldr	r3, [pc, #256]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cce:	4b3d      	ldr	r3, [pc, #244]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cde:	4b3a      	ldr	r3, [pc, #232]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a39      	ldr	r2, [pc, #228]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cea:	f7fd fe67 	bl	80029bc <HAL_GetTick>
 8004cee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cf0:	e009      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf2:	f7fd fe63 	bl	80029bc <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d902      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	74fb      	strb	r3, [r7, #19]
        break;
 8004d04:	e005      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d06:	4b30      	ldr	r3, [pc, #192]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0ef      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d12:	7cfb      	ldrb	r3, [r7, #19]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d159      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d18:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01e      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d019      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d34:	4b23      	ldr	r3, [pc, #140]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d40:	4b20      	ldr	r3, [pc, #128]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d46:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d50:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d56:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d60:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d016      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fd fe23 	bl	80029bc <HAL_GetTick>
 8004d76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d78:	e00b      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd fe1f 	bl	80029bc <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d902      	bls.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	74fb      	strb	r3, [r7, #19]
            break;
 8004d90:	e006      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d92:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0ec      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10b      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da6:	4b07      	ldr	r3, [pc, #28]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	4903      	ldr	r1, [pc, #12]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dbe:	7cfb      	ldrb	r3, [r7, #19]
 8004dc0:	74bb      	strb	r3, [r7, #18]
 8004dc2:	e005      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd0:	7c7b      	ldrb	r3, [r7, #17]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d105      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd6:	4ba6      	ldr	r3, [pc, #664]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dda:	4aa5      	ldr	r2, [pc, #660]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dee:	4ba0      	ldr	r3, [pc, #640]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df4:	f023 0203 	bic.w	r2, r3, #3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	499c      	ldr	r1, [pc, #624]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e10:	4b97      	ldr	r3, [pc, #604]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e16:	f023 020c 	bic.w	r2, r3, #12
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	4994      	ldr	r1, [pc, #592]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e32:	4b8f      	ldr	r3, [pc, #572]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	498b      	ldr	r1, [pc, #556]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e54:	4b86      	ldr	r3, [pc, #536]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	4983      	ldr	r1, [pc, #524]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e76:	4b7e      	ldr	r3, [pc, #504]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	497a      	ldr	r1, [pc, #488]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e98:	4b75      	ldr	r3, [pc, #468]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	4972      	ldr	r1, [pc, #456]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eba:	4b6d      	ldr	r3, [pc, #436]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	4969      	ldr	r1, [pc, #420]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004edc:	4b64      	ldr	r3, [pc, #400]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	4961      	ldr	r1, [pc, #388]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004efe:	4b5c      	ldr	r3, [pc, #368]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	4958      	ldr	r1, [pc, #352]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f20:	4b53      	ldr	r3, [pc, #332]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	4950      	ldr	r1, [pc, #320]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f40:	4b4b      	ldr	r3, [pc, #300]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a4a      	ldr	r2, [pc, #296]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f4a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f58:	4b45      	ldr	r3, [pc, #276]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	4942      	ldr	r1, [pc, #264]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f76:	d105      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f78:	4b3d      	ldr	r3, [pc, #244]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f82:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d015      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f90:	4b37      	ldr	r3, [pc, #220]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9e:	4934      	ldr	r1, [pc, #208]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004faa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fae:	d105      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fc8:	4b29      	ldr	r3, [pc, #164]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd6:	4926      	ldr	r1, [pc, #152]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe8:	4b21      	ldr	r3, [pc, #132]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4a20      	ldr	r2, [pc, #128]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ff2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d015      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005000:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005006:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	4918      	ldr	r1, [pc, #96]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800501e:	d105      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005020:	4b13      	ldr	r3, [pc, #76]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800502a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d015      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005038:	4b0d      	ldr	r3, [pc, #52]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005046:	490a      	ldr	r1, [pc, #40]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005056:	d105      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005058:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4a04      	ldr	r2, [pc, #16]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005062:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005064:	7cbb      	ldrb	r3, [r7, #18]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000

08005074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e09d      	b.n	80051c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d108      	bne.n	80050a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005096:	d009      	beq.n	80050ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	61da      	str	r2, [r3, #28]
 800509e:	e005      	b.n	80050ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fc fa4e 	bl	8001568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050ec:	d902      	bls.n	80050f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e002      	b.n	80050fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005102:	d007      	beq.n	8005114 <HAL_SPI_Init+0xa0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800510c:	d002      	beq.n	8005114 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005156:	ea42 0103 	orr.w	r1, r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	0c1b      	lsrs	r3, r3, #16
 8005170:	f003 0204 	and.w	r2, r3, #4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005190:	ea42 0103 	orr.w	r1, r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69da      	ldr	r2, [r3, #28]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b088      	sub	sp, #32
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_SPI_Transmit+0x22>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e15f      	b.n	80054ac <HAL_SPI_Transmit+0x2e2>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051f4:	f7fd fbe2 	bl	80029bc <HAL_GetTick>
 80051f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b01      	cmp	r3, #1
 8005208:	d002      	beq.n	8005210 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800520a:	2302      	movs	r3, #2
 800520c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800520e:	e148      	b.n	80054a2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_SPI_Transmit+0x52>
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005220:	e13f      	b.n	80054a2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2203      	movs	r2, #3
 8005226:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	88fa      	ldrh	r2, [r7, #6]
 800523a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800526c:	d10f      	bne.n	800528e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800527c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800528c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005298:	2b40      	cmp	r3, #64	@ 0x40
 800529a:	d007      	beq.n	80052ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052b4:	d94f      	bls.n	8005356 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_SPI_Transmit+0xfa>
 80052be:	8afb      	ldrh	r3, [r7, #22]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d142      	bne.n	800534a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	881a      	ldrh	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d4:	1c9a      	adds	r2, r3, #2
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052e8:	e02f      	b.n	800534a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d112      	bne.n	800531e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	1c9a      	adds	r2, r3, #2
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800531c:	e015      	b.n	800534a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800531e:	f7fd fb4d 	bl	80029bc <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d803      	bhi.n	8005336 <HAL_SPI_Transmit+0x16c>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005334:	d102      	bne.n	800533c <HAL_SPI_Transmit+0x172>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d106      	bne.n	800534a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005348:	e0ab      	b.n	80054a2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1ca      	bne.n	80052ea <HAL_SPI_Transmit+0x120>
 8005354:	e080      	b.n	8005458 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_SPI_Transmit+0x19a>
 800535e:	8afb      	ldrh	r3, [r7, #22]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d174      	bne.n	800544e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	d912      	bls.n	8005394 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b02      	subs	r3, #2
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005392:	e05c      	b.n	800544e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80053ba:	e048      	b.n	800544e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d12b      	bne.n	8005422 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d912      	bls.n	80053fa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d8:	881a      	ldrh	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	1c9a      	adds	r2, r3, #2
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b02      	subs	r3, #2
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053f8:	e029      	b.n	800544e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	7812      	ldrb	r2, [r2, #0]
 8005406:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005420:	e015      	b.n	800544e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005422:	f7fd facb 	bl	80029bc <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d803      	bhi.n	800543a <HAL_SPI_Transmit+0x270>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005438:	d102      	bne.n	8005440 <HAL_SPI_Transmit+0x276>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d106      	bne.n	800544e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800544c:	e029      	b.n	80054a2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1b1      	bne.n	80053bc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fcf9 	bl	8005e54 <SPI_EndRxTxTransaction>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e003      	b.n	80054a2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80054aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d002      	beq.n	80054da <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
 80054d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054d8:	e11a      	b.n	8005710 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054e2:	d112      	bne.n	800550a <HAL_SPI_Receive+0x56>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10e      	bne.n	800550a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2204      	movs	r2, #4
 80054f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054f4:	88fa      	ldrh	r2, [r7, #6]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f90e 	bl	8005722 <HAL_SPI_TransmitReceive>
 8005506:	4603      	mov	r3, r0
 8005508:	e107      	b.n	800571a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_SPI_Receive+0x64>
 8005514:	2302      	movs	r3, #2
 8005516:	e100      	b.n	800571a <HAL_SPI_Receive+0x266>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005520:	f7fd fa4c 	bl	80029bc <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_SPI_Receive+0x7e>
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005536:	e0eb      	b.n	8005710 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2204      	movs	r2, #4
 800553c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005582:	d908      	bls.n	8005596 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	e007      	b.n	80055a6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055a4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ae:	d10f      	bne.n	80055d0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055da:	2b40      	cmp	r3, #64	@ 0x40
 80055dc:	d007      	beq.n	80055ee <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055f6:	d86f      	bhi.n	80056d8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055f8:	e034      	b.n	8005664 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d117      	bne.n	8005638 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f103 020c 	add.w	r2, r3, #12
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005636:	e015      	b.n	8005664 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005638:	f7fd f9c0 	bl	80029bc <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d803      	bhi.n	8005650 <HAL_SPI_Receive+0x19c>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800564e:	d102      	bne.n	8005656 <HAL_SPI_Receive+0x1a2>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005662:	e055      	b.n	8005710 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1c4      	bne.n	80055fa <HAL_SPI_Receive+0x146>
 8005670:	e038      	b.n	80056e4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d115      	bne.n	80056ac <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	b292      	uxth	r2, r2
 800568c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	1c9a      	adds	r2, r3, #2
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80056aa:	e015      	b.n	80056d8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ac:	f7fd f986 	bl	80029bc <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d803      	bhi.n	80056c4 <HAL_SPI_Receive+0x210>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056c2:	d102      	bne.n	80056ca <HAL_SPI_Receive+0x216>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80056d6:	e01b      	b.n	8005710 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1c6      	bne.n	8005672 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fb5b 	bl	8005da4 <SPI_EndRxTransaction>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
 8005706:	e003      	b.n	8005710 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b08a      	sub	sp, #40	@ 0x28
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	607a      	str	r2, [r7, #4]
 800572e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005730:	2301      	movs	r3, #1
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_SPI_TransmitReceive+0x26>
 8005744:	2302      	movs	r3, #2
 8005746:	e20a      	b.n	8005b5e <HAL_SPI_TransmitReceive+0x43c>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005750:	f7fd f934 	bl	80029bc <HAL_GetTick>
 8005754:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800575c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005764:	887b      	ldrh	r3, [r7, #2]
 8005766:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800576c:	7efb      	ldrb	r3, [r7, #27]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d00e      	beq.n	8005790 <HAL_SPI_TransmitReceive+0x6e>
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005778:	d106      	bne.n	8005788 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <HAL_SPI_TransmitReceive+0x66>
 8005782:	7efb      	ldrb	r3, [r7, #27]
 8005784:	2b04      	cmp	r3, #4
 8005786:	d003      	beq.n	8005790 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005788:	2302      	movs	r3, #2
 800578a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800578e:	e1e0      	b.n	8005b52 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0x80>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0x80>
 800579c:	887b      	ldrh	r3, [r7, #2]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80057a8:	e1d3      	b.n	8005b52 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d003      	beq.n	80057be <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2205      	movs	r2, #5
 80057ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	887a      	ldrh	r2, [r7, #2]
 80057ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	887a      	ldrh	r2, [r7, #2]
 80057d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	887a      	ldrh	r2, [r7, #2]
 80057e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	887a      	ldrh	r2, [r7, #2]
 80057ea:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005800:	d802      	bhi.n	8005808 <HAL_SPI_TransmitReceive+0xe6>
 8005802:	8a3b      	ldrh	r3, [r7, #16]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d908      	bls.n	800581a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	e007      	b.n	800582a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005828:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005834:	2b40      	cmp	r3, #64	@ 0x40
 8005836:	d007      	beq.n	8005848 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005846:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005850:	f240 8081 	bls.w	8005956 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <HAL_SPI_TransmitReceive+0x140>
 800585c:	8a7b      	ldrh	r3, [r7, #18]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d16d      	bne.n	800593e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005866:	881a      	ldrh	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005872:	1c9a      	adds	r2, r3, #2
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005886:	e05a      	b.n	800593e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b02      	cmp	r3, #2
 8005894:	d11b      	bne.n	80058ce <HAL_SPI_TransmitReceive+0x1ac>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d016      	beq.n	80058ce <HAL_SPI_TransmitReceive+0x1ac>
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d113      	bne.n	80058ce <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058aa:	881a      	ldrh	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b6:	1c9a      	adds	r2, r3, #2
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d11c      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x1f4>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d016      	beq.n	8005916 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	b292      	uxth	r2, r2
 80058f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	1c9a      	adds	r2, r3, #2
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005912:	2301      	movs	r3, #1
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005916:	f7fd f851 	bl	80029bc <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005922:	429a      	cmp	r2, r3
 8005924:	d80b      	bhi.n	800593e <HAL_SPI_TransmitReceive+0x21c>
 8005926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800592c:	d007      	beq.n	800593e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800593c:	e109      	b.n	8005b52 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d19f      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x166>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d199      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x166>
 8005954:	e0e3      	b.n	8005b1e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_SPI_TransmitReceive+0x244>
 800595e:	8a7b      	ldrh	r3, [r7, #18]
 8005960:	2b01      	cmp	r3, #1
 8005962:	f040 80cf 	bne.w	8005b04 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b01      	cmp	r3, #1
 800596e:	d912      	bls.n	8005996 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005974:	881a      	ldrh	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b02      	subs	r3, #2
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005994:	e0b6      	b.n	8005b04 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	7812      	ldrb	r2, [r2, #0]
 80059a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059bc:	e0a2      	b.n	8005b04 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d134      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x314>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d02f      	beq.n	8005a36 <HAL_SPI_TransmitReceive+0x314>
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d12c      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d912      	bls.n	8005a0c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	881a      	ldrh	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	1c9a      	adds	r2, r3, #2
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b02      	subs	r3, #2
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a0a:	e012      	b.n	8005a32 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	7812      	ldrb	r2, [r2, #0]
 8005a18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d148      	bne.n	8005ad6 <HAL_SPI_TransmitReceive+0x3b4>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d042      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d923      	bls.n	8005aa4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	b292      	uxth	r2, r2
 8005a68:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	1c9a      	adds	r2, r3, #2
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b02      	subs	r3, #2
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d81f      	bhi.n	8005ad2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	e016      	b.n	8005ad2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f103 020c 	add.w	r2, r3, #12
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	7812      	ldrb	r2, [r2, #0]
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ad6:	f7fc ff71 	bl	80029bc <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d803      	bhi.n	8005aee <HAL_SPI_TransmitReceive+0x3cc>
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aec:	d102      	bne.n	8005af4 <HAL_SPI_TransmitReceive+0x3d2>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005b02:	e026      	b.n	8005b52 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f47f af57 	bne.w	80059be <HAL_SPI_TransmitReceive+0x29c>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f47f af50 	bne.w	80059be <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 f996 	bl	8005e54 <SPI_EndRxTxTransaction>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b48:	e003      	b.n	8005b52 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3728      	adds	r7, #40	@ 0x28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b78:	f7fc ff20 	bl	80029bc <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	4413      	add	r3, r2
 8005b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b88:	f7fc ff18 	bl	80029bc <HAL_GetTick>
 8005b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b8e:	4b39      	ldr	r3, [pc, #228]	@ (8005c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	015b      	lsls	r3, r3, #5
 8005b94:	0d1b      	lsrs	r3, r3, #20
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b9e:	e054      	b.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ba6:	d050      	beq.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ba8:	f7fc ff08 	bl	80029bc <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d902      	bls.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d13d      	bne.n	8005c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bd6:	d111      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005be0:	d004      	beq.n	8005bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bea:	d107      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c04:	d10f      	bne.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e017      	b.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d19b      	bne.n	8005ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000f44 	.word	0x20000f44

08005c78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	@ 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c8a:	f7fc fe97 	bl	80029bc <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	4413      	add	r3, r2
 8005c98:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005c9a:	f7fc fe8f 	bl	80029bc <HAL_GetTick>
 8005c9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8005da0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	00da      	lsls	r2, r3, #3
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	0d1b      	lsrs	r3, r3, #20
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005cc0:	e060      	b.n	8005d84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005cc8:	d107      	bne.n	8005cda <SPI_WaitFifoStateUntilTimeout+0x62>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ce0:	d050      	beq.n	8005d84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ce2:	f7fc fe6b 	bl	80029bc <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d902      	bls.n	8005cf8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d13d      	bne.n	8005d74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d10:	d111      	bne.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d1a:	d004      	beq.n	8005d26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d24:	d107      	bne.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d3e:	d10f      	bne.n	8005d60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e010      	b.n	8005d96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d196      	bne.n	8005cc2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3728      	adds	r7, #40	@ 0x28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000f44 	.word	0x20000f44

08005da4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005db8:	d111      	bne.n	8005dde <SPI_EndRxTransaction+0x3a>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc2:	d004      	beq.n	8005dce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dcc:	d107      	bne.n	8005dde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ddc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2180      	movs	r1, #128	@ 0x80
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff febd 	bl	8005b68 <SPI_WaitFlagStateUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d007      	beq.n	8005e04 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df8:	f043 0220 	orr.w	r2, r3, #32
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e023      	b.n	8005e4c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e0c:	d11d      	bne.n	8005e4a <SPI_EndRxTransaction+0xa6>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e16:	d004      	beq.n	8005e22 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e20:	d113      	bne.n	8005e4a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff ff22 	bl	8005c78 <SPI_WaitFifoStateUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e3e:	f043 0220 	orr.w	r2, r3, #32
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e000      	b.n	8005e4c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff ff03 	bl	8005c78 <SPI_WaitFifoStateUntilTimeout>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7c:	f043 0220 	orr.w	r2, r3, #32
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e027      	b.n	8005ed8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2180      	movs	r1, #128	@ 0x80
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fe68 	bl	8005b68 <SPI_WaitFlagStateUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ea2:	f043 0220 	orr.w	r2, r3, #32
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e014      	b.n	8005ed8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff fedc 	bl	8005c78 <SPI_WaitFifoStateUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e000      	b.n	8005ed8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e049      	b.n	8005f86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fb fe1a 	bl	8001b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f000 fb4a 	bl	80065b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e049      	b.n	8006034 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d106      	bne.n	8005fba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f841 	bl	800603c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f000 faf3 	bl	80065b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e097      	b.n	8006194 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d106      	bne.n	800607e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7fb fd81 	bl	8001b80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2202      	movs	r2, #2
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006094:	f023 0307 	bic.w	r3, r3, #7
 8006098:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f000 fa87 	bl	80065b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d2:	f023 0303 	bic.w	r3, r3, #3
 80060d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	4313      	orrs	r3, r2
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80060f0:	f023 030c 	bic.w	r3, r3, #12
 80060f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006100:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	021b      	lsls	r3, r3, #8
 800610c:	4313      	orrs	r3, r2
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	011a      	lsls	r2, r3, #4
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	031b      	lsls	r3, r3, #12
 8006120:	4313      	orrs	r3, r2
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800612e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006136:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	4313      	orrs	r3, r2
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e0ff      	b.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b14      	cmp	r3, #20
 80061c6:	f200 80f0 	bhi.w	80063aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061ca:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	08006225 	.word	0x08006225
 80061d4:	080063ab 	.word	0x080063ab
 80061d8:	080063ab 	.word	0x080063ab
 80061dc:	080063ab 	.word	0x080063ab
 80061e0:	08006265 	.word	0x08006265
 80061e4:	080063ab 	.word	0x080063ab
 80061e8:	080063ab 	.word	0x080063ab
 80061ec:	080063ab 	.word	0x080063ab
 80061f0:	080062a7 	.word	0x080062a7
 80061f4:	080063ab 	.word	0x080063ab
 80061f8:	080063ab 	.word	0x080063ab
 80061fc:	080063ab 	.word	0x080063ab
 8006200:	080062e7 	.word	0x080062e7
 8006204:	080063ab 	.word	0x080063ab
 8006208:	080063ab 	.word	0x080063ab
 800620c:	080063ab 	.word	0x080063ab
 8006210:	08006329 	.word	0x08006329
 8006214:	080063ab 	.word	0x080063ab
 8006218:	080063ab 	.word	0x080063ab
 800621c:	080063ab 	.word	0x080063ab
 8006220:	08006369 	.word	0x08006369
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fa60 	bl	80066f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0208 	orr.w	r2, r2, #8
 800623e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0204 	bic.w	r2, r2, #4
 800624e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6999      	ldr	r1, [r3, #24]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	619a      	str	r2, [r3, #24]
      break;
 8006262:	e0a5      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fad0 	bl	8006810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800627e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800628e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6999      	ldr	r1, [r3, #24]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	619a      	str	r2, [r3, #24]
      break;
 80062a4:	e084      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fb39 	bl	8006924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0208 	orr.w	r2, r2, #8
 80062c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0204 	bic.w	r2, r2, #4
 80062d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69d9      	ldr	r1, [r3, #28]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	61da      	str	r2, [r3, #28]
      break;
 80062e4:	e064      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68b9      	ldr	r1, [r7, #8]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 fba1 	bl	8006a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69d9      	ldr	r1, [r3, #28]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	021a      	lsls	r2, r3, #8
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	61da      	str	r2, [r3, #28]
      break;
 8006326:	e043      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68b9      	ldr	r1, [r7, #8]
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fc0a 	bl	8006b48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0208 	orr.w	r2, r2, #8
 8006342:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0204 	bic.w	r2, r2, #4
 8006352:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006366:	e023      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68b9      	ldr	r1, [r7, #8]
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fc4e 	bl	8006c10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006382:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006392:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	021a      	lsls	r2, r3, #8
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80063a8:	e002      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	75fb      	strb	r3, [r7, #23]
      break;
 80063ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop

080063c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_TIM_ConfigClockSource+0x1c>
 80063dc:	2302      	movs	r3, #2
 80063de:	e0de      	b.n	800659e <HAL_TIM_ConfigClockSource+0x1da>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80063fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800640a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a63      	ldr	r2, [pc, #396]	@ (80065a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	f000 80a9 	beq.w	8006572 <HAL_TIM_ConfigClockSource+0x1ae>
 8006420:	4a61      	ldr	r2, [pc, #388]	@ (80065a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	f200 80ae 	bhi.w	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 8006428:	4a60      	ldr	r2, [pc, #384]	@ (80065ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	f000 80a1 	beq.w	8006572 <HAL_TIM_ConfigClockSource+0x1ae>
 8006430:	4a5e      	ldr	r2, [pc, #376]	@ (80065ac <HAL_TIM_ConfigClockSource+0x1e8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	f200 80a6 	bhi.w	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 8006438:	4a5d      	ldr	r2, [pc, #372]	@ (80065b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800643a:	4293      	cmp	r3, r2
 800643c:	f000 8099 	beq.w	8006572 <HAL_TIM_ConfigClockSource+0x1ae>
 8006440:	4a5b      	ldr	r2, [pc, #364]	@ (80065b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006442:	4293      	cmp	r3, r2
 8006444:	f200 809e 	bhi.w	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 8006448:	4a5a      	ldr	r2, [pc, #360]	@ (80065b4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	f000 8091 	beq.w	8006572 <HAL_TIM_ConfigClockSource+0x1ae>
 8006450:	4a58      	ldr	r2, [pc, #352]	@ (80065b4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	f200 8096 	bhi.w	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 8006458:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800645c:	f000 8089 	beq.w	8006572 <HAL_TIM_ConfigClockSource+0x1ae>
 8006460:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006464:	f200 808e 	bhi.w	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 8006468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646c:	d03e      	beq.n	80064ec <HAL_TIM_ConfigClockSource+0x128>
 800646e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006472:	f200 8087 	bhi.w	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 8006476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800647a:	f000 8086 	beq.w	800658a <HAL_TIM_ConfigClockSource+0x1c6>
 800647e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006482:	d87f      	bhi.n	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 8006484:	2b70      	cmp	r3, #112	@ 0x70
 8006486:	d01a      	beq.n	80064be <HAL_TIM_ConfigClockSource+0xfa>
 8006488:	2b70      	cmp	r3, #112	@ 0x70
 800648a:	d87b      	bhi.n	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 800648c:	2b60      	cmp	r3, #96	@ 0x60
 800648e:	d050      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x16e>
 8006490:	2b60      	cmp	r3, #96	@ 0x60
 8006492:	d877      	bhi.n	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 8006494:	2b50      	cmp	r3, #80	@ 0x50
 8006496:	d03c      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x14e>
 8006498:	2b50      	cmp	r3, #80	@ 0x50
 800649a:	d873      	bhi.n	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 800649c:	2b40      	cmp	r3, #64	@ 0x40
 800649e:	d058      	beq.n	8006552 <HAL_TIM_ConfigClockSource+0x18e>
 80064a0:	2b40      	cmp	r3, #64	@ 0x40
 80064a2:	d86f      	bhi.n	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 80064a4:	2b30      	cmp	r3, #48	@ 0x30
 80064a6:	d064      	beq.n	8006572 <HAL_TIM_ConfigClockSource+0x1ae>
 80064a8:	2b30      	cmp	r3, #48	@ 0x30
 80064aa:	d86b      	bhi.n	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d060      	beq.n	8006572 <HAL_TIM_ConfigClockSource+0x1ae>
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d867      	bhi.n	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d05c      	beq.n	8006572 <HAL_TIM_ConfigClockSource+0x1ae>
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d05a      	beq.n	8006572 <HAL_TIM_ConfigClockSource+0x1ae>
 80064bc:	e062      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064ce:	f000 fc81 	bl	8006dd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	609a      	str	r2, [r3, #8]
      break;
 80064ea:	e04f      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064fc:	f000 fc6a 	bl	8006dd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800650e:	609a      	str	r2, [r3, #8]
      break;
 8006510:	e03c      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651e:	461a      	mov	r2, r3
 8006520:	f000 fbdc 	bl	8006cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2150      	movs	r1, #80	@ 0x50
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fc35 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006530:	e02c      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800653e:	461a      	mov	r2, r3
 8006540:	f000 fbfb 	bl	8006d3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2160      	movs	r1, #96	@ 0x60
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fc25 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006550:	e01c      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800655e:	461a      	mov	r2, r3
 8006560:	f000 fbbc 	bl	8006cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2140      	movs	r1, #64	@ 0x40
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fc15 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006570:	e00c      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4619      	mov	r1, r3
 800657c:	4610      	mov	r0, r2
 800657e:	f000 fc0c 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006582:	e003      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	73fb      	strb	r3, [r7, #15]
      break;
 8006588:	e000      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800658a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	00100070 	.word	0x00100070
 80065ac:	00100040 	.word	0x00100040
 80065b0:	00100030 	.word	0x00100030
 80065b4:	00100020 	.word	0x00100020

080065b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a42      	ldr	r2, [pc, #264]	@ (80066d4 <TIM_Base_SetConfig+0x11c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00f      	beq.n	80065f0 <TIM_Base_SetConfig+0x38>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d6:	d00b      	beq.n	80065f0 <TIM_Base_SetConfig+0x38>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a3f      	ldr	r2, [pc, #252]	@ (80066d8 <TIM_Base_SetConfig+0x120>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d007      	beq.n	80065f0 <TIM_Base_SetConfig+0x38>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a3e      	ldr	r2, [pc, #248]	@ (80066dc <TIM_Base_SetConfig+0x124>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_Base_SetConfig+0x38>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a3d      	ldr	r2, [pc, #244]	@ (80066e0 <TIM_Base_SetConfig+0x128>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d108      	bne.n	8006602 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4313      	orrs	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a33      	ldr	r2, [pc, #204]	@ (80066d4 <TIM_Base_SetConfig+0x11c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01b      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006610:	d017      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a30      	ldr	r2, [pc, #192]	@ (80066d8 <TIM_Base_SetConfig+0x120>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2f      	ldr	r2, [pc, #188]	@ (80066dc <TIM_Base_SetConfig+0x124>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00f      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a2e      	ldr	r2, [pc, #184]	@ (80066e0 <TIM_Base_SetConfig+0x128>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00b      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a2d      	ldr	r2, [pc, #180]	@ (80066e4 <TIM_Base_SetConfig+0x12c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2c      	ldr	r2, [pc, #176]	@ (80066e8 <TIM_Base_SetConfig+0x130>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_Base_SetConfig+0x8a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a2b      	ldr	r2, [pc, #172]	@ (80066ec <TIM_Base_SetConfig+0x134>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d108      	bne.n	8006654 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a16      	ldr	r2, [pc, #88]	@ (80066d4 <TIM_Base_SetConfig+0x11c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00f      	beq.n	80066a0 <TIM_Base_SetConfig+0xe8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a17      	ldr	r2, [pc, #92]	@ (80066e0 <TIM_Base_SetConfig+0x128>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00b      	beq.n	80066a0 <TIM_Base_SetConfig+0xe8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a16      	ldr	r2, [pc, #88]	@ (80066e4 <TIM_Base_SetConfig+0x12c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d007      	beq.n	80066a0 <TIM_Base_SetConfig+0xe8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a15      	ldr	r2, [pc, #84]	@ (80066e8 <TIM_Base_SetConfig+0x130>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_Base_SetConfig+0xe8>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a14      	ldr	r2, [pc, #80]	@ (80066ec <TIM_Base_SetConfig+0x134>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d103      	bne.n	80066a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d105      	bne.n	80066c6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	611a      	str	r2, [r3, #16]
  }
}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40013400 	.word	0x40013400
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800

080066f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f023 0201 	bic.w	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800671e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f023 0302 	bic.w	r3, r3, #2
 800673c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a2c      	ldr	r2, [pc, #176]	@ (80067fc <TIM_OC1_SetConfig+0x10c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00f      	beq.n	8006770 <TIM_OC1_SetConfig+0x80>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a2b      	ldr	r2, [pc, #172]	@ (8006800 <TIM_OC1_SetConfig+0x110>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00b      	beq.n	8006770 <TIM_OC1_SetConfig+0x80>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a2a      	ldr	r2, [pc, #168]	@ (8006804 <TIM_OC1_SetConfig+0x114>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_OC1_SetConfig+0x80>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a29      	ldr	r2, [pc, #164]	@ (8006808 <TIM_OC1_SetConfig+0x118>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC1_SetConfig+0x80>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a28      	ldr	r2, [pc, #160]	@ (800680c <TIM_OC1_SetConfig+0x11c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d10c      	bne.n	800678a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f023 0308 	bic.w	r3, r3, #8
 8006776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f023 0304 	bic.w	r3, r3, #4
 8006788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <TIM_OC1_SetConfig+0x10c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00f      	beq.n	80067b2 <TIM_OC1_SetConfig+0xc2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a1a      	ldr	r2, [pc, #104]	@ (8006800 <TIM_OC1_SetConfig+0x110>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00b      	beq.n	80067b2 <TIM_OC1_SetConfig+0xc2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a19      	ldr	r2, [pc, #100]	@ (8006804 <TIM_OC1_SetConfig+0x114>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <TIM_OC1_SetConfig+0xc2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a18      	ldr	r2, [pc, #96]	@ (8006808 <TIM_OC1_SetConfig+0x118>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_OC1_SetConfig+0xc2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a17      	ldr	r2, [pc, #92]	@ (800680c <TIM_OC1_SetConfig+0x11c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d111      	bne.n	80067d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	621a      	str	r2, [r3, #32]
}
 80067f0:	bf00      	nop
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40013400 	.word	0x40013400
 8006804:	40014000 	.word	0x40014000
 8006808:	40014400 	.word	0x40014400
 800680c:	40014800 	.word	0x40014800

08006810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f023 0210 	bic.w	r2, r3, #16
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800683e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800684a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f023 0320 	bic.w	r3, r3, #32
 800685e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a28      	ldr	r2, [pc, #160]	@ (8006910 <TIM_OC2_SetConfig+0x100>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC2_SetConfig+0x6c>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a27      	ldr	r2, [pc, #156]	@ (8006914 <TIM_OC2_SetConfig+0x104>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d10d      	bne.n	8006898 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006896:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1d      	ldr	r2, [pc, #116]	@ (8006910 <TIM_OC2_SetConfig+0x100>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00f      	beq.n	80068c0 <TIM_OC2_SetConfig+0xb0>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006914 <TIM_OC2_SetConfig+0x104>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00b      	beq.n	80068c0 <TIM_OC2_SetConfig+0xb0>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <TIM_OC2_SetConfig+0x108>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d007      	beq.n	80068c0 <TIM_OC2_SetConfig+0xb0>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1a      	ldr	r2, [pc, #104]	@ (800691c <TIM_OC2_SetConfig+0x10c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_OC2_SetConfig+0xb0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a19      	ldr	r2, [pc, #100]	@ (8006920 <TIM_OC2_SetConfig+0x110>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d113      	bne.n	80068e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40013400 	.word	0x40013400
 8006918:	40014000 	.word	0x40014000
 800691c:	40014400 	.word	0x40014400
 8006920:	40014800 	.word	0x40014800

08006924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a27      	ldr	r2, [pc, #156]	@ (8006a20 <TIM_OC3_SetConfig+0xfc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d003      	beq.n	800698e <TIM_OC3_SetConfig+0x6a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a26      	ldr	r2, [pc, #152]	@ (8006a24 <TIM_OC3_SetConfig+0x100>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d10d      	bne.n	80069aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006a20 <TIM_OC3_SetConfig+0xfc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00f      	beq.n	80069d2 <TIM_OC3_SetConfig+0xae>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a24 <TIM_OC3_SetConfig+0x100>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00b      	beq.n	80069d2 <TIM_OC3_SetConfig+0xae>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a28 <TIM_OC3_SetConfig+0x104>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d007      	beq.n	80069d2 <TIM_OC3_SetConfig+0xae>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a19      	ldr	r2, [pc, #100]	@ (8006a2c <TIM_OC3_SetConfig+0x108>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_OC3_SetConfig+0xae>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a18      	ldr	r2, [pc, #96]	@ (8006a30 <TIM_OC3_SetConfig+0x10c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d113      	bne.n	80069fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	621a      	str	r2, [r3, #32]
}
 8006a14:	bf00      	nop
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	40012c00 	.word	0x40012c00
 8006a24:	40013400 	.word	0x40013400
 8006a28:	40014000 	.word	0x40014000
 8006a2c:	40014400 	.word	0x40014400
 8006a30:	40014800 	.word	0x40014800

08006a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	031b      	lsls	r3, r3, #12
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a28      	ldr	r2, [pc, #160]	@ (8006b34 <TIM_OC4_SetConfig+0x100>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_OC4_SetConfig+0x6c>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a27      	ldr	r2, [pc, #156]	@ (8006b38 <TIM_OC4_SetConfig+0x104>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10d      	bne.n	8006abc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	031b      	lsls	r3, r3, #12
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a1d      	ldr	r2, [pc, #116]	@ (8006b34 <TIM_OC4_SetConfig+0x100>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00f      	beq.n	8006ae4 <TIM_OC4_SetConfig+0xb0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b38 <TIM_OC4_SetConfig+0x104>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d00b      	beq.n	8006ae4 <TIM_OC4_SetConfig+0xb0>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a1b      	ldr	r2, [pc, #108]	@ (8006b3c <TIM_OC4_SetConfig+0x108>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d007      	beq.n	8006ae4 <TIM_OC4_SetConfig+0xb0>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b40 <TIM_OC4_SetConfig+0x10c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_OC4_SetConfig+0xb0>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a19      	ldr	r2, [pc, #100]	@ (8006b44 <TIM_OC4_SetConfig+0x110>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d113      	bne.n	8006b0c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006af2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	019b      	lsls	r3, r3, #6
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	019b      	lsls	r3, r3, #6
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	40013400 	.word	0x40013400
 8006b3c:	40014000 	.word	0x40014000
 8006b40:	40014400 	.word	0x40014400
 8006b44:	40014800 	.word	0x40014800

08006b48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a17      	ldr	r2, [pc, #92]	@ (8006bfc <TIM_OC5_SetConfig+0xb4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00f      	beq.n	8006bc2 <TIM_OC5_SetConfig+0x7a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a16      	ldr	r2, [pc, #88]	@ (8006c00 <TIM_OC5_SetConfig+0xb8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00b      	beq.n	8006bc2 <TIM_OC5_SetConfig+0x7a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a15      	ldr	r2, [pc, #84]	@ (8006c04 <TIM_OC5_SetConfig+0xbc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d007      	beq.n	8006bc2 <TIM_OC5_SetConfig+0x7a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a14      	ldr	r2, [pc, #80]	@ (8006c08 <TIM_OC5_SetConfig+0xc0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d003      	beq.n	8006bc2 <TIM_OC5_SetConfig+0x7a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a13      	ldr	r2, [pc, #76]	@ (8006c0c <TIM_OC5_SetConfig+0xc4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d109      	bne.n	8006bd6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	621a      	str	r2, [r3, #32]
}
 8006bf0:	bf00      	nop
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	40012c00 	.word	0x40012c00
 8006c00:	40013400 	.word	0x40013400
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40014400 	.word	0x40014400
 8006c0c:	40014800 	.word	0x40014800

08006c10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	021b      	lsls	r3, r3, #8
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	051b      	lsls	r3, r3, #20
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a18      	ldr	r2, [pc, #96]	@ (8006cc8 <TIM_OC6_SetConfig+0xb8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00f      	beq.n	8006c8c <TIM_OC6_SetConfig+0x7c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a17      	ldr	r2, [pc, #92]	@ (8006ccc <TIM_OC6_SetConfig+0xbc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00b      	beq.n	8006c8c <TIM_OC6_SetConfig+0x7c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a16      	ldr	r2, [pc, #88]	@ (8006cd0 <TIM_OC6_SetConfig+0xc0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_OC6_SetConfig+0x7c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a15      	ldr	r2, [pc, #84]	@ (8006cd4 <TIM_OC6_SetConfig+0xc4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_OC6_SetConfig+0x7c>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a14      	ldr	r2, [pc, #80]	@ (8006cd8 <TIM_OC6_SetConfig+0xc8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d109      	bne.n	8006ca0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	029b      	lsls	r3, r3, #10
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	621a      	str	r2, [r3, #32]
}
 8006cba:	bf00      	nop
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40013400 	.word	0x40013400
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	40014400 	.word	0x40014400
 8006cd8:	40014800 	.word	0x40014800

08006cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f023 0201 	bic.w	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f023 030a 	bic.w	r3, r3, #10
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b087      	sub	sp, #28
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	f023 0210 	bic.w	r2, r3, #16
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	031b      	lsls	r3, r3, #12
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f043 0307 	orr.w	r3, r3, #7
 8006dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	021a      	lsls	r2, r3, #8
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	609a      	str	r2, [r3, #8]
}
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e065      	b.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2c      	ldr	r2, [pc, #176]	@ (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d108      	bne.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1b      	ldr	r2, [pc, #108]	@ (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d018      	beq.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea2:	d013      	beq.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a18      	ldr	r2, [pc, #96]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00e      	beq.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a17      	ldr	r2, [pc, #92]	@ (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d009      	beq.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a12      	ldr	r2, [pc, #72]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d004      	beq.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a13      	ldr	r2, [pc, #76]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d10c      	bne.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ed2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	40012c00 	.word	0x40012c00
 8006f08:	40013400 	.word	0x40013400
 8006f0c:	40000400 	.word	0x40000400
 8006f10:	40000800 	.word	0x40000800
 8006f14:	40014000 	.word	0x40014000

08006f18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e073      	b.n	800701c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	041b      	lsls	r3, r3, #16
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a19      	ldr	r2, [pc, #100]	@ (8007028 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a18      	ldr	r2, [pc, #96]	@ (800702c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d11c      	bne.n	800700a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fda:	051b      	lsls	r3, r3, #20
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40013400 	.word	0x40013400

08007030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e042      	b.n	80070c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fa fef7 	bl	8001e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2224      	movs	r2, #36	@ 0x24
 800705e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 ff34 	bl	8007ee8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fc65 	bl	8007950 <UART_SetConfig>
 8007086:	4603      	mov	r3, r0
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e01b      	b.n	80070c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800709e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0201 	orr.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 ffb3 	bl	800802c <UART_CheckIdleState>
 80070c6:	4603      	mov	r3, r0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	@ 0x28
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d17b      	bne.n	80071e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <HAL_UART_Transmit+0x26>
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e074      	b.n	80071e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2221      	movs	r2, #33	@ 0x21
 8007106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800710a:	f7fb fc57 	bl	80029bc <HAL_GetTick>
 800710e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007128:	d108      	bne.n	800713c <HAL_UART_Transmit+0x6c>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	61bb      	str	r3, [r7, #24]
 800713a:	e003      	b.n	8007144 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007140:	2300      	movs	r3, #0
 8007142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007144:	e030      	b.n	80071a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2200      	movs	r2, #0
 800714e:	2180      	movs	r1, #128	@ 0x80
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f001 f815 	bl	8008180 <UART_WaitOnFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e03d      	b.n	80071e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10b      	bne.n	8007186 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800717c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	3302      	adds	r3, #2
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	e007      	b.n	8007196 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	781a      	ldrb	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	3301      	adds	r3, #1
 8007194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1c8      	bne.n	8007146 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2200      	movs	r2, #0
 80071bc:	2140      	movs	r1, #64	@ 0x40
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 ffde 	bl	8008180 <UART_WaitOnFlagUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e006      	b.n	80071e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	e000      	b.n	80071e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80071e2:	2302      	movs	r3, #2
  }
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	@ 0x28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007200:	2b20      	cmp	r3, #32
 8007202:	d137      	bne.n	8007274 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <HAL_UART_Receive_IT+0x24>
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e030      	b.n	8007276 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a18      	ldr	r2, [pc, #96]	@ (8007280 <HAL_UART_Receive_IT+0x94>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d01f      	beq.n	8007264 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d018      	beq.n	8007264 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	613b      	str	r3, [r7, #16]
   return(result);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	623b      	str	r3, [r7, #32]
 8007252:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	69f9      	ldr	r1, [r7, #28]
 8007256:	6a3a      	ldr	r2, [r7, #32]
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	61bb      	str	r3, [r7, #24]
   return(result);
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e6      	bne.n	8007232 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	461a      	mov	r2, r3
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fff6 	bl	800825c <UART_Start_Receive_IT>
 8007270:	4603      	mov	r3, r0
 8007272:	e000      	b.n	8007276 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007274:	2302      	movs	r3, #2
  }
}
 8007276:	4618      	mov	r0, r3
 8007278:	3728      	adds	r7, #40	@ 0x28
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	40008000 	.word	0x40008000

08007284 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b0ba      	sub	sp, #232	@ 0xe8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80072ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80072b2:	4013      	ands	r3, r2
 80072b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80072b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d11b      	bne.n	80072f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d015      	beq.n	80072f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d105      	bne.n	80072e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d009      	beq.n	80072f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8300 	beq.w	80078ee <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
      }
      return;
 80072f6:	e2fa      	b.n	80078ee <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8123 	beq.w	8007548 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007302:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007306:	4b8d      	ldr	r3, [pc, #564]	@ (800753c <HAL_UART_IRQHandler+0x2b8>)
 8007308:	4013      	ands	r3, r2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800730e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007312:	4b8b      	ldr	r3, [pc, #556]	@ (8007540 <HAL_UART_IRQHandler+0x2bc>)
 8007314:	4013      	ands	r3, r2
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8116 	beq.w	8007548 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800731c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d011      	beq.n	800734c <HAL_UART_IRQHandler+0xc8>
 8007328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800732c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00b      	beq.n	800734c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2201      	movs	r2, #1
 800733a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007342:	f043 0201 	orr.w	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800734c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d011      	beq.n	800737c <HAL_UART_IRQHandler+0xf8>
 8007358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2202      	movs	r2, #2
 800736a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007372:	f043 0204 	orr.w	r2, r3, #4
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800737c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d011      	beq.n	80073ac <HAL_UART_IRQHandler+0x128>
 8007388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00b      	beq.n	80073ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2204      	movs	r2, #4
 800739a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a2:	f043 0202 	orr.w	r2, r3, #2
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d017      	beq.n	80073e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d105      	bne.n	80073d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80073c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80073c8:	4b5c      	ldr	r3, [pc, #368]	@ (800753c <HAL_UART_IRQHandler+0x2b8>)
 80073ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2208      	movs	r2, #8
 80073d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073de:	f043 0208 	orr.w	r2, r3, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d012      	beq.n	800741a <HAL_UART_IRQHandler+0x196>
 80073f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00c      	beq.n	800741a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007408:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007410:	f043 0220 	orr.w	r2, r3, #32
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 8266 	beq.w	80078f2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b00      	cmp	r3, #0
 8007430:	d013      	beq.n	800745a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d105      	bne.n	800744a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800743e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d007      	beq.n	800745a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007460:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746e:	2b40      	cmp	r3, #64	@ 0x40
 8007470:	d005      	beq.n	800747e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007476:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800747a:	2b00      	cmp	r3, #0
 800747c:	d054      	beq.n	8007528 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 f80e 	bl	80084a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800748e:	2b40      	cmp	r3, #64	@ 0x40
 8007490:	d146      	bne.n	8007520 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3308      	adds	r3, #8
 8007498:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80074a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3308      	adds	r3, #8
 80074ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80074be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80074c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80074ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80074d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1d9      	bne.n	8007492 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d017      	beq.n	8007518 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ee:	4a15      	ldr	r2, [pc, #84]	@ (8007544 <HAL_UART_IRQHandler+0x2c0>)
 80074f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fc fbe7 	bl	8003ccc <HAL_DMA_Abort_IT>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d019      	beq.n	8007538 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007512:	4610      	mov	r0, r2
 8007514:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007516:	e00f      	b.n	8007538 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7f9 ff1d 	bl	8001358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751e:	e00b      	b.n	8007538 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7f9 ff19 	bl	8001358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007526:	e007      	b.n	8007538 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7f9 ff15 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007536:	e1dc      	b.n	80078f2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	bf00      	nop
    return;
 800753a:	e1da      	b.n	80078f2 <HAL_UART_IRQHandler+0x66e>
 800753c:	10000001 	.word	0x10000001
 8007540:	04000120 	.word	0x04000120
 8007544:	0800856d 	.word	0x0800856d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800754c:	2b01      	cmp	r3, #1
 800754e:	f040 8170 	bne.w	8007832 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007556:	f003 0310 	and.w	r3, r3, #16
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 8169 	beq.w	8007832 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 8162 	beq.w	8007832 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2210      	movs	r2, #16
 8007574:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007580:	2b40      	cmp	r3, #64	@ 0x40
 8007582:	f040 80d8 	bne.w	8007736 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007594:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80af 	beq.w	80076fc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075a8:	429a      	cmp	r2, r3
 80075aa:	f080 80a7 	bcs.w	80076fc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f040 8087 	bne.w	80076da <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80075e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007602:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800760e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1da      	bne.n	80075cc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3308      	adds	r3, #8
 800761c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007626:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007628:	f023 0301 	bic.w	r3, r3, #1
 800762c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3308      	adds	r3, #8
 8007636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800763a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800763e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007642:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800764c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e1      	bne.n	8007616 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3308      	adds	r3, #8
 8007658:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007676:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007678:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800767c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e3      	bne.n	8007652 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076a8:	f023 0310 	bic.w	r3, r3, #16
 80076ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e4      	bne.n	8007698 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fc faa0 	bl	8003c1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2202      	movs	r2, #2
 80076de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f911 	bl	800791c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80076fa:	e0fc      	b.n	80078f6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007706:	429a      	cmp	r2, r3
 8007708:	f040 80f5 	bne.w	80078f6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b20      	cmp	r3, #32
 800771c:	f040 80eb 	bne.w	80078f6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f8f4 	bl	800791c <HAL_UARTEx_RxEventCallback>
      return;
 8007734:	e0df      	b.n	80078f6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007742:	b29b      	uxth	r3, r3
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 80d1 	beq.w	80078fa <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 80cc 	beq.w	80078fa <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007784:	647b      	str	r3, [r7, #68]	@ 0x44
 8007786:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800778a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e4      	bne.n	8007762 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3308      	adds	r3, #8
 800779e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	623b      	str	r3, [r7, #32]
   return(result);
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077ae:	f023 0301 	bic.w	r3, r3, #1
 80077b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3308      	adds	r3, #8
 80077bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80077c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e1      	bne.n	8007798 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f023 0310 	bic.w	r3, r3, #16
 80077fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	69b9      	ldr	r1, [r7, #24]
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	617b      	str	r3, [r7, #20]
   return(result);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e4      	bne.n	80077e8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2202      	movs	r2, #2
 8007822:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f876 	bl	800791c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007830:	e063      	b.n	80078fa <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00e      	beq.n	800785c <HAL_UART_IRQHandler+0x5d8>
 800783e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d008      	beq.n	800785c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007852:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fbeb 	bl	8009030 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800785a:	e051      	b.n	8007900 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007864:	2b00      	cmp	r3, #0
 8007866:	d014      	beq.n	8007892 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800786c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007870:	2b00      	cmp	r3, #0
 8007872:	d105      	bne.n	8007880 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007878:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007884:	2b00      	cmp	r3, #0
 8007886:	d03a      	beq.n	80078fe <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
    }
    return;
 8007890:	e035      	b.n	80078fe <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <HAL_UART_IRQHandler+0x62e>
 800789e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fe74 	bl	8008598 <UART_EndTransmit_IT>
    return;
 80078b0:	e026      	b.n	8007900 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80078b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d009      	beq.n	80078d2 <HAL_UART_IRQHandler+0x64e>
 80078be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 fbc4 	bl	8009058 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078d0:	e016      	b.n	8007900 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80078d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d010      	beq.n	8007900 <HAL_UART_IRQHandler+0x67c>
 80078de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da0c      	bge.n	8007900 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 fbac 	bl	8009044 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078ec:	e008      	b.n	8007900 <HAL_UART_IRQHandler+0x67c>
      return;
 80078ee:	bf00      	nop
 80078f0:	e006      	b.n	8007900 <HAL_UART_IRQHandler+0x67c>
    return;
 80078f2:	bf00      	nop
 80078f4:	e004      	b.n	8007900 <HAL_UART_IRQHandler+0x67c>
      return;
 80078f6:	bf00      	nop
 80078f8:	e002      	b.n	8007900 <HAL_UART_IRQHandler+0x67c>
      return;
 80078fa:	bf00      	nop
 80078fc:	e000      	b.n	8007900 <HAL_UART_IRQHandler+0x67c>
    return;
 80078fe:	bf00      	nop
  }
}
 8007900:	37e8      	adds	r7, #232	@ 0xe8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop

08007908 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007954:	b08c      	sub	sp, #48	@ 0x30
 8007956:	af00      	add	r7, sp, #0
 8007958:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	431a      	orrs	r2, r3
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	431a      	orrs	r2, r3
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	4313      	orrs	r3, r2
 8007976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	4bab      	ldr	r3, [pc, #684]	@ (8007c2c <UART_SetConfig+0x2dc>)
 8007980:	4013      	ands	r3, r2
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007988:	430b      	orrs	r3, r1
 800798a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4aa0      	ldr	r2, [pc, #640]	@ (8007c30 <UART_SetConfig+0x2e0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d004      	beq.n	80079bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079b8:	4313      	orrs	r3, r2
 80079ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80079c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	6812      	ldr	r2, [r2, #0]
 80079ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079d0:	430b      	orrs	r3, r1
 80079d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079da:	f023 010f 	bic.w	r1, r3, #15
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a91      	ldr	r2, [pc, #580]	@ (8007c34 <UART_SetConfig+0x2e4>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d125      	bne.n	8007a40 <UART_SetConfig+0xf0>
 80079f4:	4b90      	ldr	r3, [pc, #576]	@ (8007c38 <UART_SetConfig+0x2e8>)
 80079f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d81a      	bhi.n	8007a38 <UART_SetConfig+0xe8>
 8007a02:	a201      	add	r2, pc, #4	@ (adr r2, 8007a08 <UART_SetConfig+0xb8>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a19 	.word	0x08007a19
 8007a0c:	08007a29 	.word	0x08007a29
 8007a10:	08007a21 	.word	0x08007a21
 8007a14:	08007a31 	.word	0x08007a31
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a1e:	e0d6      	b.n	8007bce <UART_SetConfig+0x27e>
 8007a20:	2302      	movs	r3, #2
 8007a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a26:	e0d2      	b.n	8007bce <UART_SetConfig+0x27e>
 8007a28:	2304      	movs	r3, #4
 8007a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a2e:	e0ce      	b.n	8007bce <UART_SetConfig+0x27e>
 8007a30:	2308      	movs	r3, #8
 8007a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a36:	e0ca      	b.n	8007bce <UART_SetConfig+0x27e>
 8007a38:	2310      	movs	r3, #16
 8007a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a3e:	e0c6      	b.n	8007bce <UART_SetConfig+0x27e>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a7d      	ldr	r2, [pc, #500]	@ (8007c3c <UART_SetConfig+0x2ec>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d138      	bne.n	8007abc <UART_SetConfig+0x16c>
 8007a4a:	4b7b      	ldr	r3, [pc, #492]	@ (8007c38 <UART_SetConfig+0x2e8>)
 8007a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a50:	f003 030c 	and.w	r3, r3, #12
 8007a54:	2b0c      	cmp	r3, #12
 8007a56:	d82d      	bhi.n	8007ab4 <UART_SetConfig+0x164>
 8007a58:	a201      	add	r2, pc, #4	@ (adr r2, 8007a60 <UART_SetConfig+0x110>)
 8007a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5e:	bf00      	nop
 8007a60:	08007a95 	.word	0x08007a95
 8007a64:	08007ab5 	.word	0x08007ab5
 8007a68:	08007ab5 	.word	0x08007ab5
 8007a6c:	08007ab5 	.word	0x08007ab5
 8007a70:	08007aa5 	.word	0x08007aa5
 8007a74:	08007ab5 	.word	0x08007ab5
 8007a78:	08007ab5 	.word	0x08007ab5
 8007a7c:	08007ab5 	.word	0x08007ab5
 8007a80:	08007a9d 	.word	0x08007a9d
 8007a84:	08007ab5 	.word	0x08007ab5
 8007a88:	08007ab5 	.word	0x08007ab5
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007aad 	.word	0x08007aad
 8007a94:	2300      	movs	r3, #0
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a9a:	e098      	b.n	8007bce <UART_SetConfig+0x27e>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aa2:	e094      	b.n	8007bce <UART_SetConfig+0x27e>
 8007aa4:	2304      	movs	r3, #4
 8007aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aaa:	e090      	b.n	8007bce <UART_SetConfig+0x27e>
 8007aac:	2308      	movs	r3, #8
 8007aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ab2:	e08c      	b.n	8007bce <UART_SetConfig+0x27e>
 8007ab4:	2310      	movs	r3, #16
 8007ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aba:	e088      	b.n	8007bce <UART_SetConfig+0x27e>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a5f      	ldr	r2, [pc, #380]	@ (8007c40 <UART_SetConfig+0x2f0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d125      	bne.n	8007b12 <UART_SetConfig+0x1c2>
 8007ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8007c38 <UART_SetConfig+0x2e8>)
 8007ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007acc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ad0:	2b30      	cmp	r3, #48	@ 0x30
 8007ad2:	d016      	beq.n	8007b02 <UART_SetConfig+0x1b2>
 8007ad4:	2b30      	cmp	r3, #48	@ 0x30
 8007ad6:	d818      	bhi.n	8007b0a <UART_SetConfig+0x1ba>
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d00a      	beq.n	8007af2 <UART_SetConfig+0x1a2>
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d814      	bhi.n	8007b0a <UART_SetConfig+0x1ba>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <UART_SetConfig+0x19a>
 8007ae4:	2b10      	cmp	r3, #16
 8007ae6:	d008      	beq.n	8007afa <UART_SetConfig+0x1aa>
 8007ae8:	e00f      	b.n	8007b0a <UART_SetConfig+0x1ba>
 8007aea:	2300      	movs	r3, #0
 8007aec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007af0:	e06d      	b.n	8007bce <UART_SetConfig+0x27e>
 8007af2:	2302      	movs	r3, #2
 8007af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007af8:	e069      	b.n	8007bce <UART_SetConfig+0x27e>
 8007afa:	2304      	movs	r3, #4
 8007afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b00:	e065      	b.n	8007bce <UART_SetConfig+0x27e>
 8007b02:	2308      	movs	r3, #8
 8007b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b08:	e061      	b.n	8007bce <UART_SetConfig+0x27e>
 8007b0a:	2310      	movs	r3, #16
 8007b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b10:	e05d      	b.n	8007bce <UART_SetConfig+0x27e>
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a4b      	ldr	r2, [pc, #300]	@ (8007c44 <UART_SetConfig+0x2f4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d125      	bne.n	8007b68 <UART_SetConfig+0x218>
 8007b1c:	4b46      	ldr	r3, [pc, #280]	@ (8007c38 <UART_SetConfig+0x2e8>)
 8007b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b28:	d016      	beq.n	8007b58 <UART_SetConfig+0x208>
 8007b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b2c:	d818      	bhi.n	8007b60 <UART_SetConfig+0x210>
 8007b2e:	2b80      	cmp	r3, #128	@ 0x80
 8007b30:	d00a      	beq.n	8007b48 <UART_SetConfig+0x1f8>
 8007b32:	2b80      	cmp	r3, #128	@ 0x80
 8007b34:	d814      	bhi.n	8007b60 <UART_SetConfig+0x210>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <UART_SetConfig+0x1f0>
 8007b3a:	2b40      	cmp	r3, #64	@ 0x40
 8007b3c:	d008      	beq.n	8007b50 <UART_SetConfig+0x200>
 8007b3e:	e00f      	b.n	8007b60 <UART_SetConfig+0x210>
 8007b40:	2300      	movs	r3, #0
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b46:	e042      	b.n	8007bce <UART_SetConfig+0x27e>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4e:	e03e      	b.n	8007bce <UART_SetConfig+0x27e>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b56:	e03a      	b.n	8007bce <UART_SetConfig+0x27e>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5e:	e036      	b.n	8007bce <UART_SetConfig+0x27e>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b66:	e032      	b.n	8007bce <UART_SetConfig+0x27e>
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a30      	ldr	r2, [pc, #192]	@ (8007c30 <UART_SetConfig+0x2e0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d12a      	bne.n	8007bc8 <UART_SetConfig+0x278>
 8007b72:	4b31      	ldr	r3, [pc, #196]	@ (8007c38 <UART_SetConfig+0x2e8>)
 8007b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b80:	d01a      	beq.n	8007bb8 <UART_SetConfig+0x268>
 8007b82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b86:	d81b      	bhi.n	8007bc0 <UART_SetConfig+0x270>
 8007b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b8c:	d00c      	beq.n	8007ba8 <UART_SetConfig+0x258>
 8007b8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b92:	d815      	bhi.n	8007bc0 <UART_SetConfig+0x270>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <UART_SetConfig+0x250>
 8007b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b9c:	d008      	beq.n	8007bb0 <UART_SetConfig+0x260>
 8007b9e:	e00f      	b.n	8007bc0 <UART_SetConfig+0x270>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba6:	e012      	b.n	8007bce <UART_SetConfig+0x27e>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bae:	e00e      	b.n	8007bce <UART_SetConfig+0x27e>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb6:	e00a      	b.n	8007bce <UART_SetConfig+0x27e>
 8007bb8:	2308      	movs	r3, #8
 8007bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bbe:	e006      	b.n	8007bce <UART_SetConfig+0x27e>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bc6:	e002      	b.n	8007bce <UART_SetConfig+0x27e>
 8007bc8:	2310      	movs	r3, #16
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a17      	ldr	r2, [pc, #92]	@ (8007c30 <UART_SetConfig+0x2e0>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	f040 80a8 	bne.w	8007d2a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d834      	bhi.n	8007c4c <UART_SetConfig+0x2fc>
 8007be2:	a201      	add	r2, pc, #4	@ (adr r2, 8007be8 <UART_SetConfig+0x298>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007c0d 	.word	0x08007c0d
 8007bec:	08007c4d 	.word	0x08007c4d
 8007bf0:	08007c15 	.word	0x08007c15
 8007bf4:	08007c4d 	.word	0x08007c4d
 8007bf8:	08007c1b 	.word	0x08007c1b
 8007bfc:	08007c4d 	.word	0x08007c4d
 8007c00:	08007c4d 	.word	0x08007c4d
 8007c04:	08007c4d 	.word	0x08007c4d
 8007c08:	08007c23 	.word	0x08007c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c0c:	f7fc ffd0 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8007c10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c12:	e021      	b.n	8007c58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c14:	4b0c      	ldr	r3, [pc, #48]	@ (8007c48 <UART_SetConfig+0x2f8>)
 8007c16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c18:	e01e      	b.n	8007c58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c1a:	f7fc ff5b 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8007c1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c20:	e01a      	b.n	8007c58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c28:	e016      	b.n	8007c58 <UART_SetConfig+0x308>
 8007c2a:	bf00      	nop
 8007c2c:	cfff69f3 	.word	0xcfff69f3
 8007c30:	40008000 	.word	0x40008000
 8007c34:	40013800 	.word	0x40013800
 8007c38:	40021000 	.word	0x40021000
 8007c3c:	40004400 	.word	0x40004400
 8007c40:	40004800 	.word	0x40004800
 8007c44:	40004c00 	.word	0x40004c00
 8007c48:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 812a 	beq.w	8007eb4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c64:	4a9e      	ldr	r2, [pc, #632]	@ (8007ee0 <UART_SetConfig+0x590>)
 8007c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c72:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	4413      	add	r3, r2
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d305      	bcc.n	8007c90 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d903      	bls.n	8007c98 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c96:	e10d      	b.n	8007eb4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	60bb      	str	r3, [r7, #8]
 8007c9e:	60fa      	str	r2, [r7, #12]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	4a8e      	ldr	r2, [pc, #568]	@ (8007ee0 <UART_SetConfig+0x590>)
 8007ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2200      	movs	r2, #0
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	607a      	str	r2, [r7, #4]
 8007cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cba:	f7f9 f80d 	bl	8000cd8 <__aeabi_uldivmod>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f04f 0200 	mov.w	r2, #0
 8007cca:	f04f 0300 	mov.w	r3, #0
 8007cce:	020b      	lsls	r3, r1, #8
 8007cd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cd4:	0202      	lsls	r2, r0, #8
 8007cd6:	6979      	ldr	r1, [r7, #20]
 8007cd8:	6849      	ldr	r1, [r1, #4]
 8007cda:	0849      	lsrs	r1, r1, #1
 8007cdc:	2000      	movs	r0, #0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	eb12 0804 	adds.w	r8, r2, r4
 8007ce6:	eb43 0905 	adc.w	r9, r3, r5
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	469a      	mov	sl, r3
 8007cf2:	4693      	mov	fp, r2
 8007cf4:	4652      	mov	r2, sl
 8007cf6:	465b      	mov	r3, fp
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f7f8 ffec 	bl	8000cd8 <__aeabi_uldivmod>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4613      	mov	r3, r2
 8007d06:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d0e:	d308      	bcc.n	8007d22 <UART_SetConfig+0x3d2>
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d16:	d204      	bcs.n	8007d22 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6a3a      	ldr	r2, [r7, #32]
 8007d1e:	60da      	str	r2, [r3, #12]
 8007d20:	e0c8      	b.n	8007eb4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d28:	e0c4      	b.n	8007eb4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d32:	d167      	bne.n	8007e04 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007d34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d828      	bhi.n	8007d8e <UART_SetConfig+0x43e>
 8007d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d44 <UART_SetConfig+0x3f4>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d69 	.word	0x08007d69
 8007d48:	08007d71 	.word	0x08007d71
 8007d4c:	08007d79 	.word	0x08007d79
 8007d50:	08007d8f 	.word	0x08007d8f
 8007d54:	08007d7f 	.word	0x08007d7f
 8007d58:	08007d8f 	.word	0x08007d8f
 8007d5c:	08007d8f 	.word	0x08007d8f
 8007d60:	08007d8f 	.word	0x08007d8f
 8007d64:	08007d87 	.word	0x08007d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d68:	f7fc ff22 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8007d6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d6e:	e014      	b.n	8007d9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d70:	f7fc ff34 	bl	8004bdc <HAL_RCC_GetPCLK2Freq>
 8007d74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d76:	e010      	b.n	8007d9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d78:	4b5a      	ldr	r3, [pc, #360]	@ (8007ee4 <UART_SetConfig+0x594>)
 8007d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d7c:	e00d      	b.n	8007d9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d7e:	f7fc fea9 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8007d82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d84:	e009      	b.n	8007d9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d8c:	e005      	b.n	8007d9a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 8089 	beq.w	8007eb4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da6:	4a4e      	ldr	r2, [pc, #312]	@ (8007ee0 <UART_SetConfig+0x590>)
 8007da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dac:	461a      	mov	r2, r3
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007db4:	005a      	lsls	r2, r3, #1
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	085b      	lsrs	r3, r3, #1
 8007dbc:	441a      	add	r2, r3
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	2b0f      	cmp	r3, #15
 8007dcc:	d916      	bls.n	8007dfc <UART_SetConfig+0x4ac>
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dd4:	d212      	bcs.n	8007dfc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	f023 030f 	bic.w	r3, r3, #15
 8007dde:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	8bfb      	ldrh	r3, [r7, #30]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	8bfa      	ldrh	r2, [r7, #30]
 8007df8:	60da      	str	r2, [r3, #12]
 8007dfa:	e05b      	b.n	8007eb4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e02:	e057      	b.n	8007eb4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d828      	bhi.n	8007e5e <UART_SetConfig+0x50e>
 8007e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <UART_SetConfig+0x4c4>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e41 	.word	0x08007e41
 8007e1c:	08007e49 	.word	0x08007e49
 8007e20:	08007e5f 	.word	0x08007e5f
 8007e24:	08007e4f 	.word	0x08007e4f
 8007e28:	08007e5f 	.word	0x08007e5f
 8007e2c:	08007e5f 	.word	0x08007e5f
 8007e30:	08007e5f 	.word	0x08007e5f
 8007e34:	08007e57 	.word	0x08007e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e38:	f7fc feba 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8007e3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e3e:	e014      	b.n	8007e6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e40:	f7fc fecc 	bl	8004bdc <HAL_RCC_GetPCLK2Freq>
 8007e44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e46:	e010      	b.n	8007e6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e48:	4b26      	ldr	r3, [pc, #152]	@ (8007ee4 <UART_SetConfig+0x594>)
 8007e4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e4c:	e00d      	b.n	8007e6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e4e:	f7fc fe41 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8007e52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e54:	e009      	b.n	8007e6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e5c:	e005      	b.n	8007e6a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e68:	bf00      	nop
    }

    if (pclk != 0U)
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d021      	beq.n	8007eb4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e74:	4a1a      	ldr	r2, [pc, #104]	@ (8007ee0 <UART_SetConfig+0x590>)
 8007e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	085b      	lsrs	r3, r3, #1
 8007e88:	441a      	add	r2, r3
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	2b0f      	cmp	r3, #15
 8007e98:	d909      	bls.n	8007eae <UART_SetConfig+0x55e>
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ea0:	d205      	bcs.n	8007eae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60da      	str	r2, [r3, #12]
 8007eac:	e002      	b.n	8007eb4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ed0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3730      	adds	r7, #48	@ 0x30
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ede:	bf00      	nop
 8007ee0:	0800e074 	.word	0x0800e074
 8007ee4:	00f42400 	.word	0x00f42400

08007ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef4:	f003 0308 	and.w	r3, r3, #8
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00a      	beq.n	8007f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5a:	f003 0304 	and.w	r3, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01a      	beq.n	8007ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fe6:	d10a      	bne.n	8007ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	605a      	str	r2, [r3, #4]
  }
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b098      	sub	sp, #96	@ 0x60
 8008030:	af02      	add	r7, sp, #8
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800803c:	f7fa fcbe 	bl	80029bc <HAL_GetTick>
 8008040:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0308 	and.w	r3, r3, #8
 800804c:	2b08      	cmp	r3, #8
 800804e:	d12f      	bne.n	80080b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008050:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008058:	2200      	movs	r2, #0
 800805a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f88e 	bl	8008180 <UART_WaitOnFlagUntilTimeout>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d022      	beq.n	80080b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800807a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800807e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	461a      	mov	r2, r3
 8008086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008088:	647b      	str	r3, [r7, #68]	@ 0x44
 800808a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800808e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008090:	e841 2300 	strex	r3, r2, [r1]
 8008094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e6      	bne.n	800806a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e063      	b.n	8008178 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d149      	bne.n	8008152 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080c6:	2200      	movs	r2, #0
 80080c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f857 	bl	8008180 <UART_WaitOnFlagUntilTimeout>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d03c      	beq.n	8008152 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	623b      	str	r3, [r7, #32]
   return(result);
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80080f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e6      	bne.n	80080d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3308      	adds	r3, #8
 8008110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	60fb      	str	r3, [r7, #12]
   return(result);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f023 0301 	bic.w	r3, r3, #1
 8008120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3308      	adds	r3, #8
 8008128:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800812a:	61fa      	str	r2, [r7, #28]
 800812c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	69b9      	ldr	r1, [r7, #24]
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	617b      	str	r3, [r7, #20]
   return(result);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e5      	bne.n	800810a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e012      	b.n	8008178 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3758      	adds	r7, #88	@ 0x58
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	4613      	mov	r3, r2
 800818e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008190:	e04f      	b.n	8008232 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008198:	d04b      	beq.n	8008232 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819a:	f7fa fc0f 	bl	80029bc <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d302      	bcc.n	80081b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e04e      	b.n	8008252 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d037      	beq.n	8008232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b80      	cmp	r3, #128	@ 0x80
 80081c6:	d034      	beq.n	8008232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b40      	cmp	r3, #64	@ 0x40
 80081cc:	d031      	beq.n	8008232 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f003 0308 	and.w	r3, r3, #8
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d110      	bne.n	80081fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2208      	movs	r2, #8
 80081e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 f95b 	bl	80084a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2208      	movs	r2, #8
 80081ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e029      	b.n	8008252 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800820c:	d111      	bne.n	8008232 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 f941 	bl	80084a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2220      	movs	r2, #32
 8008222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e00f      	b.n	8008252 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69da      	ldr	r2, [r3, #28]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	4013      	ands	r3, r2
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	429a      	cmp	r2, r3
 8008240:	bf0c      	ite	eq
 8008242:	2301      	moveq	r3, #1
 8008244:	2300      	movne	r3, #0
 8008246:	b2db      	uxtb	r3, r3
 8008248:	461a      	mov	r2, r3
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	429a      	cmp	r2, r3
 800824e:	d0a0      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800825c:	b480      	push	{r7}
 800825e:	b0a3      	sub	sp, #140	@ 0x8c
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	4613      	mov	r3, r2
 8008268:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	88fa      	ldrh	r2, [r7, #6]
 8008274:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	88fa      	ldrh	r2, [r7, #6]
 800827c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800828e:	d10e      	bne.n	80082ae <UART_Start_Receive_IT+0x52>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <UART_Start_Receive_IT+0x48>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800829e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80082a2:	e02d      	b.n	8008300 <UART_Start_Receive_IT+0xa4>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	22ff      	movs	r2, #255	@ 0xff
 80082a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80082ac:	e028      	b.n	8008300 <UART_Start_Receive_IT+0xa4>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10d      	bne.n	80082d2 <UART_Start_Receive_IT+0x76>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d104      	bne.n	80082c8 <UART_Start_Receive_IT+0x6c>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	22ff      	movs	r2, #255	@ 0xff
 80082c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80082c6:	e01b      	b.n	8008300 <UART_Start_Receive_IT+0xa4>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	227f      	movs	r2, #127	@ 0x7f
 80082cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80082d0:	e016      	b.n	8008300 <UART_Start_Receive_IT+0xa4>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082da:	d10d      	bne.n	80082f8 <UART_Start_Receive_IT+0x9c>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d104      	bne.n	80082ee <UART_Start_Receive_IT+0x92>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	227f      	movs	r2, #127	@ 0x7f
 80082e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80082ec:	e008      	b.n	8008300 <UART_Start_Receive_IT+0xa4>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	223f      	movs	r2, #63	@ 0x3f
 80082f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80082f6:	e003      	b.n	8008300 <UART_Start_Receive_IT+0xa4>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2222      	movs	r2, #34	@ 0x22
 800830c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3308      	adds	r3, #8
 8008316:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008320:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008322:	f043 0301 	orr.w	r3, r3, #1
 8008326:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3308      	adds	r3, #8
 8008330:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008334:	673a      	str	r2, [r7, #112]	@ 0x70
 8008336:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008338:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800833a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800833c:	e841 2300 	strex	r3, r2, [r1]
 8008340:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008342:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e3      	bne.n	8008310 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800834c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008350:	d14f      	bne.n	80083f2 <UART_Start_Receive_IT+0x196>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008358:	88fa      	ldrh	r2, [r7, #6]
 800835a:	429a      	cmp	r2, r3
 800835c:	d349      	bcc.n	80083f2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008366:	d107      	bne.n	8008378 <UART_Start_Receive_IT+0x11c>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d103      	bne.n	8008378 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4a47      	ldr	r2, [pc, #284]	@ (8008490 <UART_Start_Receive_IT+0x234>)
 8008374:	675a      	str	r2, [r3, #116]	@ 0x74
 8008376:	e002      	b.n	800837e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4a46      	ldr	r2, [pc, #280]	@ (8008494 <UART_Start_Receive_IT+0x238>)
 800837c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d01a      	beq.n	80083bc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800838e:	e853 3f00 	ldrex	r3, [r3]
 8008392:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800839a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083aa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80083ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80083b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e4      	bne.n	8008386 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3308      	adds	r3, #8
 80083c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3308      	adds	r3, #8
 80083da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80083dc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80083de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80083ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e5      	bne.n	80083bc <UART_Start_Receive_IT+0x160>
 80083f0:	e046      	b.n	8008480 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083fa:	d107      	bne.n	800840c <UART_Start_Receive_IT+0x1b0>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d103      	bne.n	800840c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4a24      	ldr	r2, [pc, #144]	@ (8008498 <UART_Start_Receive_IT+0x23c>)
 8008408:	675a      	str	r2, [r3, #116]	@ 0x74
 800840a:	e002      	b.n	8008412 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4a23      	ldr	r2, [pc, #140]	@ (800849c <UART_Start_Receive_IT+0x240>)
 8008410:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d019      	beq.n	800844e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800842e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008438:	637b      	str	r3, [r7, #52]	@ 0x34
 800843a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800843e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e6      	bne.n	800841a <UART_Start_Receive_IT+0x1be>
 800844c:	e018      	b.n	8008480 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	613b      	str	r3, [r7, #16]
   return(result);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f043 0320 	orr.w	r3, r3, #32
 8008462:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	461a      	mov	r2, r3
 800846a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800846c:	623b      	str	r3, [r7, #32]
 800846e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008470:	69f9      	ldr	r1, [r7, #28]
 8008472:	6a3a      	ldr	r2, [r7, #32]
 8008474:	e841 2300 	strex	r3, r2, [r1]
 8008478:	61bb      	str	r3, [r7, #24]
   return(result);
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e6      	bne.n	800844e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	378c      	adds	r7, #140	@ 0x8c
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	08008cc5 	.word	0x08008cc5
 8008494:	08008961 	.word	0x08008961
 8008498:	080087a9 	.word	0x080087a9
 800849c:	080085f1 	.word	0x080085f1

080084a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b095      	sub	sp, #84	@ 0x54
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80084c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e6      	bne.n	80084a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084f0:	f023 0301 	bic.w	r3, r3, #1
 80084f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3308      	adds	r3, #8
 80084fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008500:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008506:	e841 2300 	strex	r3, r2, [r1]
 800850a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800850c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1e3      	bne.n	80084da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008516:	2b01      	cmp	r3, #1
 8008518:	d118      	bne.n	800854c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	e853 3f00 	ldrex	r3, [r3]
 8008526:	60bb      	str	r3, [r7, #8]
   return(result);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f023 0310 	bic.w	r3, r3, #16
 800852e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	461a      	mov	r2, r3
 8008536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6979      	ldr	r1, [r7, #20]
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	613b      	str	r3, [r7, #16]
   return(result);
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e6      	bne.n	800851a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008560:	bf00      	nop
 8008562:	3754      	adds	r7, #84	@ 0x54
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7f8 fee4 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085b4:	61fb      	str	r3, [r7, #28]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	61bb      	str	r3, [r7, #24]
 80085c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	6979      	ldr	r1, [r7, #20]
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	613b      	str	r3, [r7, #16]
   return(result);
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e6      	bne.n	80085a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff f991 	bl	8007908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085e6:	bf00      	nop
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b09c      	sub	sp, #112	@ 0x70
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80085fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008608:	2b22      	cmp	r3, #34	@ 0x22
 800860a:	f040 80be 	bne.w	800878a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008614:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008618:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800861c:	b2d9      	uxtb	r1, r3
 800861e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008622:	b2da      	uxtb	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008628:	400a      	ands	r2, r1
 800862a:	b2d2      	uxtb	r2, r2
 800862c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800863e:	b29b      	uxth	r3, r3
 8008640:	3b01      	subs	r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	f040 80a1 	bne.w	800879a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800866c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008676:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008678:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800867c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e6      	bne.n	8008658 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800869a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800869c:	f023 0301 	bic.w	r3, r3, #1
 80086a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80086aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80086ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e5      	bne.n	800868a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a33      	ldr	r2, [pc, #204]	@ (80087a4 <UART_RxISR_8BIT+0x1b4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d01f      	beq.n	800871c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d018      	beq.n	800871c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	623b      	str	r3, [r7, #32]
   return(result);
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008708:	633b      	str	r3, [r7, #48]	@ 0x30
 800870a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800870e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e6      	bne.n	80086ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008720:	2b01      	cmp	r3, #1
 8008722:	d12e      	bne.n	8008782 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	60fb      	str	r3, [r7, #12]
   return(result);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0310 	bic.w	r3, r3, #16
 800873e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008748:	61fb      	str	r3, [r7, #28]
 800874a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	69b9      	ldr	r1, [r7, #24]
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	617b      	str	r3, [r7, #20]
   return(result);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e6      	bne.n	800872a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	f003 0310 	and.w	r3, r3, #16
 8008766:	2b10      	cmp	r3, #16
 8008768:	d103      	bne.n	8008772 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2210      	movs	r2, #16
 8008770:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff f8ce 	bl	800791c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008780:	e00b      	b.n	800879a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7f8 fdca 	bl	800131c <HAL_UART_RxCpltCallback>
}
 8008788:	e007      	b.n	800879a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	699a      	ldr	r2, [r3, #24]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f042 0208 	orr.w	r2, r2, #8
 8008798:	619a      	str	r2, [r3, #24]
}
 800879a:	bf00      	nop
 800879c:	3770      	adds	r7, #112	@ 0x70
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	40008000 	.word	0x40008000

080087a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b09c      	sub	sp, #112	@ 0x70
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80087b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087c0:	2b22      	cmp	r3, #34	@ 0x22
 80087c2:	f040 80be 	bne.w	8008942 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80087d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80087da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80087de:	4013      	ands	r3, r2
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ea:	1c9a      	adds	r2, r3, #2
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008808:	b29b      	uxth	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 80a1 	bne.w	8008952 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800881e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008824:	667b      	str	r3, [r7, #100]	@ 0x64
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800882e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008830:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008834:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800883c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e6      	bne.n	8008810 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008854:	f023 0301 	bic.w	r3, r3, #1
 8008858:	663b      	str	r3, [r7, #96]	@ 0x60
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3308      	adds	r3, #8
 8008860:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008862:	643a      	str	r2, [r7, #64]	@ 0x40
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008868:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e5      	bne.n	8008842 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a33      	ldr	r2, [pc, #204]	@ (800895c <UART_RxISR_16BIT+0x1b4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d01f      	beq.n	80088d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d018      	beq.n	80088d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	6a3b      	ldr	r3, [r7, #32]
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088c2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e6      	bne.n	80088a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d12e      	bne.n	800893a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f023 0310 	bic.w	r3, r3, #16
 80088f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008900:	61bb      	str	r3, [r7, #24]
 8008902:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6979      	ldr	r1, [r7, #20]
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	613b      	str	r3, [r7, #16]
   return(result);
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e6      	bne.n	80088e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2b10      	cmp	r3, #16
 8008920:	d103      	bne.n	800892a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2210      	movs	r2, #16
 8008928:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fe fff2 	bl	800791c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008938:	e00b      	b.n	8008952 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7f8 fcee 	bl	800131c <HAL_UART_RxCpltCallback>
}
 8008940:	e007      	b.n	8008952 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	699a      	ldr	r2, [r3, #24]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f042 0208 	orr.w	r2, r2, #8
 8008950:	619a      	str	r2, [r3, #24]
}
 8008952:	bf00      	nop
 8008954:	3770      	adds	r7, #112	@ 0x70
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	40008000 	.word	0x40008000

08008960 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b0ac      	sub	sp, #176	@ 0xb0
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800896e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	69db      	ldr	r3, [r3, #28]
 8008978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008996:	2b22      	cmp	r3, #34	@ 0x22
 8008998:	f040 8183 	bne.w	8008ca2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80089a2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089a6:	e126      	b.n	8008bf6 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ae:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80089b6:	b2d9      	uxtb	r1, r3
 80089b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c2:	400a      	ands	r2, r1
 80089c4:	b2d2      	uxtb	r2, r2
 80089c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089d8:	b29b      	uxth	r3, r3
 80089da:	3b01      	subs	r3, #1
 80089dc:	b29a      	uxth	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80089ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d053      	beq.n	8008aa2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d011      	beq.n	8008a2a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2201      	movs	r2, #1
 8008a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a20:	f043 0201 	orr.w	r2, r3, #1
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d011      	beq.n	8008a5a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00b      	beq.n	8008a5a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2202      	movs	r2, #2
 8008a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a50:	f043 0204 	orr.w	r2, r3, #4
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d011      	beq.n	8008a8a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00b      	beq.n	8008a8a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2204      	movs	r2, #4
 8008a78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a80:	f043 0202 	orr.w	r2, r3, #2
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d006      	beq.n	8008aa2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7f8 fc5f 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f040 80a3 	bne.w	8008bf6 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ad4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008ad8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e4      	bne.n	8008ab0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008af6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008af8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008afc:	f023 0301 	bic.w	r3, r3, #1
 8008b00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b0e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008b10:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008b14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008b1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e1      	bne.n	8008ae6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a60      	ldr	r2, [pc, #384]	@ (8008cbc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d021      	beq.n	8008b84 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d01a      	beq.n	8008b84 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b56:	e853 3f00 	ldrex	r3, [r3]
 8008b5a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b70:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b72:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e4      	bne.n	8008b4e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d130      	bne.n	8008bee <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	f023 0310 	bic.w	r3, r3, #16
 8008ba6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e4      	bne.n	8008b92 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	2b10      	cmp	r3, #16
 8008bd4:	d103      	bne.n	8008bde <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2210      	movs	r2, #16
 8008bdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fe fe98 	bl	800791c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008bec:	e00e      	b.n	8008c0c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7f8 fb94 	bl	800131c <HAL_UART_RxCpltCallback>
        break;
 8008bf4:	e00a      	b.n	8008c0c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bf6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d006      	beq.n	8008c0c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8008bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c02:	f003 0320 	and.w	r3, r3, #32
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f47f aece 	bne.w	80089a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c12:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d049      	beq.n	8008cb2 <UART_RxISR_8BIT_FIFOEN+0x352>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c24:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d242      	bcs.n	8008cb2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3308      	adds	r3, #8
 8008c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	e853 3f00 	ldrex	r3, [r3]
 8008c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008c50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c58:	e841 2300 	strex	r3, r2, [r1]
 8008c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e3      	bne.n	8008c2c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a16      	ldr	r2, [pc, #88]	@ (8008cc0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008c68:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	e853 3f00 	ldrex	r3, [r3]
 8008c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f043 0320 	orr.w	r3, r3, #32
 8008c7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c8c:	61bb      	str	r3, [r7, #24]
 8008c8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	6979      	ldr	r1, [r7, #20]
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	613b      	str	r3, [r7, #16]
   return(result);
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e4      	bne.n	8008c6a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ca0:	e007      	b.n	8008cb2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	699a      	ldr	r2, [r3, #24]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f042 0208 	orr.w	r2, r2, #8
 8008cb0:	619a      	str	r2, [r3, #24]
}
 8008cb2:	bf00      	nop
 8008cb4:	37b0      	adds	r7, #176	@ 0xb0
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	40008000 	.word	0x40008000
 8008cc0:	080085f1 	.word	0x080085f1

08008cc4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b0ae      	sub	sp, #184	@ 0xb8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008cd2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69db      	ldr	r3, [r3, #28]
 8008cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cfa:	2b22      	cmp	r3, #34	@ 0x22
 8008cfc:	f040 8187 	bne.w	800900e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008d06:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d0a:	e12a      	b.n	8008f62 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d12:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008d1e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008d22:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008d26:	4013      	ands	r3, r2
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d34:	1c9a      	adds	r2, r3, #2
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	3b01      	subs	r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d053      	beq.n	8008e0a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d011      	beq.n	8008d92 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d88:	f043 0201 	orr.w	r2, r3, #1
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d011      	beq.n	8008dc2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008d9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00b      	beq.n	8008dc2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2202      	movs	r2, #2
 8008db0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db8:	f043 0204 	orr.w	r2, r3, #4
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008dc6:	f003 0304 	and.w	r3, r3, #4
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d011      	beq.n	8008df2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00b      	beq.n	8008df2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2204      	movs	r2, #4
 8008de0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de8:	f043 0202 	orr.w	r2, r3, #2
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d006      	beq.n	8008e0a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7f8 faab 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f040 80a5 	bne.w	8008f62 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e2      	bne.n	8008e18 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3308      	adds	r3, #8
 8008e58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e5c:	e853 3f00 	ldrex	r3, [r3]
 8008e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3308      	adds	r3, #8
 8008e76:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008e7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e1      	bne.n	8008e52 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a60      	ldr	r2, [pc, #384]	@ (8009028 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d021      	beq.n	8008ef0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d01a      	beq.n	8008ef0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ec2:	e853 3f00 	ldrex	r3, [r3]
 8008ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ece:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008edc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ede:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ee2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ee4:	e841 2300 	strex	r3, r2, [r1]
 8008ee8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e4      	bne.n	8008eba <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d130      	bne.n	8008f5a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f0e:	f023 0310 	bic.w	r3, r3, #16
 8008f12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e4      	bne.n	8008efe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	f003 0310 	and.w	r3, r3, #16
 8008f3e:	2b10      	cmp	r3, #16
 8008f40:	d103      	bne.n	8008f4a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2210      	movs	r2, #16
 8008f48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7fe fce2 	bl	800791c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008f58:	e00e      	b.n	8008f78 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7f8 f9de 	bl	800131c <HAL_UART_RxCpltCallback>
        break;
 8008f60:	e00a      	b.n	8008f78 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f62:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d006      	beq.n	8008f78 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8008f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f6e:	f003 0320 	and.w	r3, r3, #32
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f47f aeca 	bne.w	8008d0c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f7e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d049      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0x35a>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f90:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d242      	bcs.n	800901e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	623b      	str	r3, [r7, #32]
   return(result);
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008fbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e3      	bne.n	8008f98 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a16      	ldr	r2, [pc, #88]	@ (800902c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008fd4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f043 0320 	orr.w	r3, r3, #32
 8008fea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ff8:	61fb      	str	r3, [r7, #28]
 8008ffa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	69b9      	ldr	r1, [r7, #24]
 8008ffe:	69fa      	ldr	r2, [r7, #28]
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	617b      	str	r3, [r7, #20]
   return(result);
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e4      	bne.n	8008fd6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800900c:	e007      	b.n	800901e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	699a      	ldr	r2, [r3, #24]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f042 0208 	orr.w	r2, r2, #8
 800901c:	619a      	str	r2, [r3, #24]
}
 800901e:	bf00      	nop
 8009020:	37b8      	adds	r7, #184	@ 0xb8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	40008000 	.word	0x40008000
 800902c:	080087a9 	.word	0x080087a9

08009030 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <HAL_UARTEx_DisableFifoMode+0x16>
 800907e:	2302      	movs	r3, #2
 8009080:	e027      	b.n	80090d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2224      	movs	r2, #36	@ 0x24
 800908e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 0201 	bic.w	r2, r2, #1
 80090a8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80090b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d101      	bne.n	80090f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80090f2:	2302      	movs	r3, #2
 80090f4:	e02d      	b.n	8009152 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2224      	movs	r2, #36	@ 0x24
 8009102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 0201 	bic.w	r2, r2, #1
 800911c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f850 	bl	80091d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800916e:	2302      	movs	r3, #2
 8009170:	e02d      	b.n	80091ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2224      	movs	r2, #36	@ 0x24
 800917e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 0201 	bic.w	r2, r2, #1
 8009198:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f812 	bl	80091d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d108      	bne.n	80091fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80091f8:	e031      	b.n	800925e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80091fa:	2308      	movs	r3, #8
 80091fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80091fe:	2308      	movs	r3, #8
 8009200:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	0e5b      	lsrs	r3, r3, #25
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	0f5b      	lsrs	r3, r3, #29
 800921a:	b2db      	uxtb	r3, r3
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	7b3a      	ldrb	r2, [r7, #12]
 8009226:	4911      	ldr	r1, [pc, #68]	@ (800926c <UARTEx_SetNbDataToProcess+0x94>)
 8009228:	5c8a      	ldrb	r2, [r1, r2]
 800922a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800922e:	7b3a      	ldrb	r2, [r7, #12]
 8009230:	490f      	ldr	r1, [pc, #60]	@ (8009270 <UARTEx_SetNbDataToProcess+0x98>)
 8009232:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009234:	fb93 f3f2 	sdiv	r3, r3, r2
 8009238:	b29a      	uxth	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	7b7a      	ldrb	r2, [r7, #13]
 8009244:	4909      	ldr	r1, [pc, #36]	@ (800926c <UARTEx_SetNbDataToProcess+0x94>)
 8009246:	5c8a      	ldrb	r2, [r1, r2]
 8009248:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800924c:	7b7a      	ldrb	r2, [r7, #13]
 800924e:	4908      	ldr	r1, [pc, #32]	@ (8009270 <UARTEx_SetNbDataToProcess+0x98>)
 8009250:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009252:	fb93 f3f2 	sdiv	r3, r3, r2
 8009256:	b29a      	uxth	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800925e:	bf00      	nop
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	0800e08c 	.word	0x0800e08c
 8009270:	0800e094 	.word	0x0800e094

08009274 <__cvt>:
 8009274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009278:	ec57 6b10 	vmov	r6, r7, d0
 800927c:	2f00      	cmp	r7, #0
 800927e:	460c      	mov	r4, r1
 8009280:	4619      	mov	r1, r3
 8009282:	463b      	mov	r3, r7
 8009284:	bfbb      	ittet	lt
 8009286:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800928a:	461f      	movlt	r7, r3
 800928c:	2300      	movge	r3, #0
 800928e:	232d      	movlt	r3, #45	@ 0x2d
 8009290:	700b      	strb	r3, [r1, #0]
 8009292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009294:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009298:	4691      	mov	r9, r2
 800929a:	f023 0820 	bic.w	r8, r3, #32
 800929e:	bfbc      	itt	lt
 80092a0:	4632      	movlt	r2, r6
 80092a2:	4616      	movlt	r6, r2
 80092a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80092a8:	d005      	beq.n	80092b6 <__cvt+0x42>
 80092aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80092ae:	d100      	bne.n	80092b2 <__cvt+0x3e>
 80092b0:	3401      	adds	r4, #1
 80092b2:	2102      	movs	r1, #2
 80092b4:	e000      	b.n	80092b8 <__cvt+0x44>
 80092b6:	2103      	movs	r1, #3
 80092b8:	ab03      	add	r3, sp, #12
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	ab02      	add	r3, sp, #8
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	ec47 6b10 	vmov	d0, r6, r7
 80092c4:	4653      	mov	r3, sl
 80092c6:	4622      	mov	r2, r4
 80092c8:	f001 f992 	bl	800a5f0 <_dtoa_r>
 80092cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80092d0:	4605      	mov	r5, r0
 80092d2:	d119      	bne.n	8009308 <__cvt+0x94>
 80092d4:	f019 0f01 	tst.w	r9, #1
 80092d8:	d00e      	beq.n	80092f8 <__cvt+0x84>
 80092da:	eb00 0904 	add.w	r9, r0, r4
 80092de:	2200      	movs	r2, #0
 80092e0:	2300      	movs	r3, #0
 80092e2:	4630      	mov	r0, r6
 80092e4:	4639      	mov	r1, r7
 80092e6:	f7f7 fc17 	bl	8000b18 <__aeabi_dcmpeq>
 80092ea:	b108      	cbz	r0, 80092f0 <__cvt+0x7c>
 80092ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80092f0:	2230      	movs	r2, #48	@ 0x30
 80092f2:	9b03      	ldr	r3, [sp, #12]
 80092f4:	454b      	cmp	r3, r9
 80092f6:	d31e      	bcc.n	8009336 <__cvt+0xc2>
 80092f8:	9b03      	ldr	r3, [sp, #12]
 80092fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092fc:	1b5b      	subs	r3, r3, r5
 80092fe:	4628      	mov	r0, r5
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	b004      	add	sp, #16
 8009304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800930c:	eb00 0904 	add.w	r9, r0, r4
 8009310:	d1e5      	bne.n	80092de <__cvt+0x6a>
 8009312:	7803      	ldrb	r3, [r0, #0]
 8009314:	2b30      	cmp	r3, #48	@ 0x30
 8009316:	d10a      	bne.n	800932e <__cvt+0xba>
 8009318:	2200      	movs	r2, #0
 800931a:	2300      	movs	r3, #0
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7f7 fbfa 	bl	8000b18 <__aeabi_dcmpeq>
 8009324:	b918      	cbnz	r0, 800932e <__cvt+0xba>
 8009326:	f1c4 0401 	rsb	r4, r4, #1
 800932a:	f8ca 4000 	str.w	r4, [sl]
 800932e:	f8da 3000 	ldr.w	r3, [sl]
 8009332:	4499      	add	r9, r3
 8009334:	e7d3      	b.n	80092de <__cvt+0x6a>
 8009336:	1c59      	adds	r1, r3, #1
 8009338:	9103      	str	r1, [sp, #12]
 800933a:	701a      	strb	r2, [r3, #0]
 800933c:	e7d9      	b.n	80092f2 <__cvt+0x7e>

0800933e <__exponent>:
 800933e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009340:	2900      	cmp	r1, #0
 8009342:	bfba      	itte	lt
 8009344:	4249      	neglt	r1, r1
 8009346:	232d      	movlt	r3, #45	@ 0x2d
 8009348:	232b      	movge	r3, #43	@ 0x2b
 800934a:	2909      	cmp	r1, #9
 800934c:	7002      	strb	r2, [r0, #0]
 800934e:	7043      	strb	r3, [r0, #1]
 8009350:	dd29      	ble.n	80093a6 <__exponent+0x68>
 8009352:	f10d 0307 	add.w	r3, sp, #7
 8009356:	461d      	mov	r5, r3
 8009358:	270a      	movs	r7, #10
 800935a:	461a      	mov	r2, r3
 800935c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009360:	fb07 1416 	mls	r4, r7, r6, r1
 8009364:	3430      	adds	r4, #48	@ 0x30
 8009366:	f802 4c01 	strb.w	r4, [r2, #-1]
 800936a:	460c      	mov	r4, r1
 800936c:	2c63      	cmp	r4, #99	@ 0x63
 800936e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009372:	4631      	mov	r1, r6
 8009374:	dcf1      	bgt.n	800935a <__exponent+0x1c>
 8009376:	3130      	adds	r1, #48	@ 0x30
 8009378:	1e94      	subs	r4, r2, #2
 800937a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800937e:	1c41      	adds	r1, r0, #1
 8009380:	4623      	mov	r3, r4
 8009382:	42ab      	cmp	r3, r5
 8009384:	d30a      	bcc.n	800939c <__exponent+0x5e>
 8009386:	f10d 0309 	add.w	r3, sp, #9
 800938a:	1a9b      	subs	r3, r3, r2
 800938c:	42ac      	cmp	r4, r5
 800938e:	bf88      	it	hi
 8009390:	2300      	movhi	r3, #0
 8009392:	3302      	adds	r3, #2
 8009394:	4403      	add	r3, r0
 8009396:	1a18      	subs	r0, r3, r0
 8009398:	b003      	add	sp, #12
 800939a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800939c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80093a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80093a4:	e7ed      	b.n	8009382 <__exponent+0x44>
 80093a6:	2330      	movs	r3, #48	@ 0x30
 80093a8:	3130      	adds	r1, #48	@ 0x30
 80093aa:	7083      	strb	r3, [r0, #2]
 80093ac:	70c1      	strb	r1, [r0, #3]
 80093ae:	1d03      	adds	r3, r0, #4
 80093b0:	e7f1      	b.n	8009396 <__exponent+0x58>
	...

080093b4 <_printf_float>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	b08d      	sub	sp, #52	@ 0x34
 80093ba:	460c      	mov	r4, r1
 80093bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80093c0:	4616      	mov	r6, r2
 80093c2:	461f      	mov	r7, r3
 80093c4:	4605      	mov	r5, r0
 80093c6:	f001 f80d 	bl	800a3e4 <_localeconv_r>
 80093ca:	6803      	ldr	r3, [r0, #0]
 80093cc:	9304      	str	r3, [sp, #16]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7f6 ff76 	bl	80002c0 <strlen>
 80093d4:	2300      	movs	r3, #0
 80093d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80093d8:	f8d8 3000 	ldr.w	r3, [r8]
 80093dc:	9005      	str	r0, [sp, #20]
 80093de:	3307      	adds	r3, #7
 80093e0:	f023 0307 	bic.w	r3, r3, #7
 80093e4:	f103 0208 	add.w	r2, r3, #8
 80093e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80093ec:	f8d4 b000 	ldr.w	fp, [r4]
 80093f0:	f8c8 2000 	str.w	r2, [r8]
 80093f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80093fc:	9307      	str	r3, [sp, #28]
 80093fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8009402:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800940a:	4b9c      	ldr	r3, [pc, #624]	@ (800967c <_printf_float+0x2c8>)
 800940c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009410:	f7f7 fbb4 	bl	8000b7c <__aeabi_dcmpun>
 8009414:	bb70      	cbnz	r0, 8009474 <_printf_float+0xc0>
 8009416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800941a:	4b98      	ldr	r3, [pc, #608]	@ (800967c <_printf_float+0x2c8>)
 800941c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009420:	f7f7 fb8e 	bl	8000b40 <__aeabi_dcmple>
 8009424:	bb30      	cbnz	r0, 8009474 <_printf_float+0xc0>
 8009426:	2200      	movs	r2, #0
 8009428:	2300      	movs	r3, #0
 800942a:	4640      	mov	r0, r8
 800942c:	4649      	mov	r1, r9
 800942e:	f7f7 fb7d 	bl	8000b2c <__aeabi_dcmplt>
 8009432:	b110      	cbz	r0, 800943a <_printf_float+0x86>
 8009434:	232d      	movs	r3, #45	@ 0x2d
 8009436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800943a:	4a91      	ldr	r2, [pc, #580]	@ (8009680 <_printf_float+0x2cc>)
 800943c:	4b91      	ldr	r3, [pc, #580]	@ (8009684 <_printf_float+0x2d0>)
 800943e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009442:	bf94      	ite	ls
 8009444:	4690      	movls	r8, r2
 8009446:	4698      	movhi	r8, r3
 8009448:	2303      	movs	r3, #3
 800944a:	6123      	str	r3, [r4, #16]
 800944c:	f02b 0304 	bic.w	r3, fp, #4
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	f04f 0900 	mov.w	r9, #0
 8009456:	9700      	str	r7, [sp, #0]
 8009458:	4633      	mov	r3, r6
 800945a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800945c:	4621      	mov	r1, r4
 800945e:	4628      	mov	r0, r5
 8009460:	f000 f9d2 	bl	8009808 <_printf_common>
 8009464:	3001      	adds	r0, #1
 8009466:	f040 808d 	bne.w	8009584 <_printf_float+0x1d0>
 800946a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800946e:	b00d      	add	sp, #52	@ 0x34
 8009470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009474:	4642      	mov	r2, r8
 8009476:	464b      	mov	r3, r9
 8009478:	4640      	mov	r0, r8
 800947a:	4649      	mov	r1, r9
 800947c:	f7f7 fb7e 	bl	8000b7c <__aeabi_dcmpun>
 8009480:	b140      	cbz	r0, 8009494 <_printf_float+0xe0>
 8009482:	464b      	mov	r3, r9
 8009484:	2b00      	cmp	r3, #0
 8009486:	bfbc      	itt	lt
 8009488:	232d      	movlt	r3, #45	@ 0x2d
 800948a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800948e:	4a7e      	ldr	r2, [pc, #504]	@ (8009688 <_printf_float+0x2d4>)
 8009490:	4b7e      	ldr	r3, [pc, #504]	@ (800968c <_printf_float+0x2d8>)
 8009492:	e7d4      	b.n	800943e <_printf_float+0x8a>
 8009494:	6863      	ldr	r3, [r4, #4]
 8009496:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800949a:	9206      	str	r2, [sp, #24]
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	d13b      	bne.n	8009518 <_printf_float+0x164>
 80094a0:	2306      	movs	r3, #6
 80094a2:	6063      	str	r3, [r4, #4]
 80094a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80094a8:	2300      	movs	r3, #0
 80094aa:	6022      	str	r2, [r4, #0]
 80094ac:	9303      	str	r3, [sp, #12]
 80094ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80094b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80094b4:	ab09      	add	r3, sp, #36	@ 0x24
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	6861      	ldr	r1, [r4, #4]
 80094ba:	ec49 8b10 	vmov	d0, r8, r9
 80094be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80094c2:	4628      	mov	r0, r5
 80094c4:	f7ff fed6 	bl	8009274 <__cvt>
 80094c8:	9b06      	ldr	r3, [sp, #24]
 80094ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094cc:	2b47      	cmp	r3, #71	@ 0x47
 80094ce:	4680      	mov	r8, r0
 80094d0:	d129      	bne.n	8009526 <_printf_float+0x172>
 80094d2:	1cc8      	adds	r0, r1, #3
 80094d4:	db02      	blt.n	80094dc <_printf_float+0x128>
 80094d6:	6863      	ldr	r3, [r4, #4]
 80094d8:	4299      	cmp	r1, r3
 80094da:	dd41      	ble.n	8009560 <_printf_float+0x1ac>
 80094dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80094e0:	fa5f fa8a 	uxtb.w	sl, sl
 80094e4:	3901      	subs	r1, #1
 80094e6:	4652      	mov	r2, sl
 80094e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80094ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80094ee:	f7ff ff26 	bl	800933e <__exponent>
 80094f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094f4:	1813      	adds	r3, r2, r0
 80094f6:	2a01      	cmp	r2, #1
 80094f8:	4681      	mov	r9, r0
 80094fa:	6123      	str	r3, [r4, #16]
 80094fc:	dc02      	bgt.n	8009504 <_printf_float+0x150>
 80094fe:	6822      	ldr	r2, [r4, #0]
 8009500:	07d2      	lsls	r2, r2, #31
 8009502:	d501      	bpl.n	8009508 <_printf_float+0x154>
 8009504:	3301      	adds	r3, #1
 8009506:	6123      	str	r3, [r4, #16]
 8009508:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0a2      	beq.n	8009456 <_printf_float+0xa2>
 8009510:	232d      	movs	r3, #45	@ 0x2d
 8009512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009516:	e79e      	b.n	8009456 <_printf_float+0xa2>
 8009518:	9a06      	ldr	r2, [sp, #24]
 800951a:	2a47      	cmp	r2, #71	@ 0x47
 800951c:	d1c2      	bne.n	80094a4 <_printf_float+0xf0>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1c0      	bne.n	80094a4 <_printf_float+0xf0>
 8009522:	2301      	movs	r3, #1
 8009524:	e7bd      	b.n	80094a2 <_printf_float+0xee>
 8009526:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800952a:	d9db      	bls.n	80094e4 <_printf_float+0x130>
 800952c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009530:	d118      	bne.n	8009564 <_printf_float+0x1b0>
 8009532:	2900      	cmp	r1, #0
 8009534:	6863      	ldr	r3, [r4, #4]
 8009536:	dd0b      	ble.n	8009550 <_printf_float+0x19c>
 8009538:	6121      	str	r1, [r4, #16]
 800953a:	b913      	cbnz	r3, 8009542 <_printf_float+0x18e>
 800953c:	6822      	ldr	r2, [r4, #0]
 800953e:	07d0      	lsls	r0, r2, #31
 8009540:	d502      	bpl.n	8009548 <_printf_float+0x194>
 8009542:	3301      	adds	r3, #1
 8009544:	440b      	add	r3, r1
 8009546:	6123      	str	r3, [r4, #16]
 8009548:	65a1      	str	r1, [r4, #88]	@ 0x58
 800954a:	f04f 0900 	mov.w	r9, #0
 800954e:	e7db      	b.n	8009508 <_printf_float+0x154>
 8009550:	b913      	cbnz	r3, 8009558 <_printf_float+0x1a4>
 8009552:	6822      	ldr	r2, [r4, #0]
 8009554:	07d2      	lsls	r2, r2, #31
 8009556:	d501      	bpl.n	800955c <_printf_float+0x1a8>
 8009558:	3302      	adds	r3, #2
 800955a:	e7f4      	b.n	8009546 <_printf_float+0x192>
 800955c:	2301      	movs	r3, #1
 800955e:	e7f2      	b.n	8009546 <_printf_float+0x192>
 8009560:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009566:	4299      	cmp	r1, r3
 8009568:	db05      	blt.n	8009576 <_printf_float+0x1c2>
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	6121      	str	r1, [r4, #16]
 800956e:	07d8      	lsls	r0, r3, #31
 8009570:	d5ea      	bpl.n	8009548 <_printf_float+0x194>
 8009572:	1c4b      	adds	r3, r1, #1
 8009574:	e7e7      	b.n	8009546 <_printf_float+0x192>
 8009576:	2900      	cmp	r1, #0
 8009578:	bfd4      	ite	le
 800957a:	f1c1 0202 	rsble	r2, r1, #2
 800957e:	2201      	movgt	r2, #1
 8009580:	4413      	add	r3, r2
 8009582:	e7e0      	b.n	8009546 <_printf_float+0x192>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	055a      	lsls	r2, r3, #21
 8009588:	d407      	bmi.n	800959a <_printf_float+0x1e6>
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	4642      	mov	r2, r8
 800958e:	4631      	mov	r1, r6
 8009590:	4628      	mov	r0, r5
 8009592:	47b8      	blx	r7
 8009594:	3001      	adds	r0, #1
 8009596:	d12b      	bne.n	80095f0 <_printf_float+0x23c>
 8009598:	e767      	b.n	800946a <_printf_float+0xb6>
 800959a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800959e:	f240 80dd 	bls.w	800975c <_printf_float+0x3a8>
 80095a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80095a6:	2200      	movs	r2, #0
 80095a8:	2300      	movs	r3, #0
 80095aa:	f7f7 fab5 	bl	8000b18 <__aeabi_dcmpeq>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d033      	beq.n	800961a <_printf_float+0x266>
 80095b2:	4a37      	ldr	r2, [pc, #220]	@ (8009690 <_printf_float+0x2dc>)
 80095b4:	2301      	movs	r3, #1
 80095b6:	4631      	mov	r1, r6
 80095b8:	4628      	mov	r0, r5
 80095ba:	47b8      	blx	r7
 80095bc:	3001      	adds	r0, #1
 80095be:	f43f af54 	beq.w	800946a <_printf_float+0xb6>
 80095c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80095c6:	4543      	cmp	r3, r8
 80095c8:	db02      	blt.n	80095d0 <_printf_float+0x21c>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	07d8      	lsls	r0, r3, #31
 80095ce:	d50f      	bpl.n	80095f0 <_printf_float+0x23c>
 80095d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095d4:	4631      	mov	r1, r6
 80095d6:	4628      	mov	r0, r5
 80095d8:	47b8      	blx	r7
 80095da:	3001      	adds	r0, #1
 80095dc:	f43f af45 	beq.w	800946a <_printf_float+0xb6>
 80095e0:	f04f 0900 	mov.w	r9, #0
 80095e4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80095e8:	f104 0a1a 	add.w	sl, r4, #26
 80095ec:	45c8      	cmp	r8, r9
 80095ee:	dc09      	bgt.n	8009604 <_printf_float+0x250>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	079b      	lsls	r3, r3, #30
 80095f4:	f100 8103 	bmi.w	80097fe <_printf_float+0x44a>
 80095f8:	68e0      	ldr	r0, [r4, #12]
 80095fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095fc:	4298      	cmp	r0, r3
 80095fe:	bfb8      	it	lt
 8009600:	4618      	movlt	r0, r3
 8009602:	e734      	b.n	800946e <_printf_float+0xba>
 8009604:	2301      	movs	r3, #1
 8009606:	4652      	mov	r2, sl
 8009608:	4631      	mov	r1, r6
 800960a:	4628      	mov	r0, r5
 800960c:	47b8      	blx	r7
 800960e:	3001      	adds	r0, #1
 8009610:	f43f af2b 	beq.w	800946a <_printf_float+0xb6>
 8009614:	f109 0901 	add.w	r9, r9, #1
 8009618:	e7e8      	b.n	80095ec <_printf_float+0x238>
 800961a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800961c:	2b00      	cmp	r3, #0
 800961e:	dc39      	bgt.n	8009694 <_printf_float+0x2e0>
 8009620:	4a1b      	ldr	r2, [pc, #108]	@ (8009690 <_printf_float+0x2dc>)
 8009622:	2301      	movs	r3, #1
 8009624:	4631      	mov	r1, r6
 8009626:	4628      	mov	r0, r5
 8009628:	47b8      	blx	r7
 800962a:	3001      	adds	r0, #1
 800962c:	f43f af1d 	beq.w	800946a <_printf_float+0xb6>
 8009630:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009634:	ea59 0303 	orrs.w	r3, r9, r3
 8009638:	d102      	bne.n	8009640 <_printf_float+0x28c>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	07d9      	lsls	r1, r3, #31
 800963e:	d5d7      	bpl.n	80095f0 <_printf_float+0x23c>
 8009640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009644:	4631      	mov	r1, r6
 8009646:	4628      	mov	r0, r5
 8009648:	47b8      	blx	r7
 800964a:	3001      	adds	r0, #1
 800964c:	f43f af0d 	beq.w	800946a <_printf_float+0xb6>
 8009650:	f04f 0a00 	mov.w	sl, #0
 8009654:	f104 0b1a 	add.w	fp, r4, #26
 8009658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800965a:	425b      	negs	r3, r3
 800965c:	4553      	cmp	r3, sl
 800965e:	dc01      	bgt.n	8009664 <_printf_float+0x2b0>
 8009660:	464b      	mov	r3, r9
 8009662:	e793      	b.n	800958c <_printf_float+0x1d8>
 8009664:	2301      	movs	r3, #1
 8009666:	465a      	mov	r2, fp
 8009668:	4631      	mov	r1, r6
 800966a:	4628      	mov	r0, r5
 800966c:	47b8      	blx	r7
 800966e:	3001      	adds	r0, #1
 8009670:	f43f aefb 	beq.w	800946a <_printf_float+0xb6>
 8009674:	f10a 0a01 	add.w	sl, sl, #1
 8009678:	e7ee      	b.n	8009658 <_printf_float+0x2a4>
 800967a:	bf00      	nop
 800967c:	7fefffff 	.word	0x7fefffff
 8009680:	0800e09c 	.word	0x0800e09c
 8009684:	0800e0a0 	.word	0x0800e0a0
 8009688:	0800e0a4 	.word	0x0800e0a4
 800968c:	0800e0a8 	.word	0x0800e0a8
 8009690:	0800e0ac 	.word	0x0800e0ac
 8009694:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009696:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800969a:	4553      	cmp	r3, sl
 800969c:	bfa8      	it	ge
 800969e:	4653      	movge	r3, sl
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	4699      	mov	r9, r3
 80096a4:	dc36      	bgt.n	8009714 <_printf_float+0x360>
 80096a6:	f04f 0b00 	mov.w	fp, #0
 80096aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096ae:	f104 021a 	add.w	r2, r4, #26
 80096b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80096b4:	9306      	str	r3, [sp, #24]
 80096b6:	eba3 0309 	sub.w	r3, r3, r9
 80096ba:	455b      	cmp	r3, fp
 80096bc:	dc31      	bgt.n	8009722 <_printf_float+0x36e>
 80096be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c0:	459a      	cmp	sl, r3
 80096c2:	dc3a      	bgt.n	800973a <_printf_float+0x386>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	07da      	lsls	r2, r3, #31
 80096c8:	d437      	bmi.n	800973a <_printf_float+0x386>
 80096ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096cc:	ebaa 0903 	sub.w	r9, sl, r3
 80096d0:	9b06      	ldr	r3, [sp, #24]
 80096d2:	ebaa 0303 	sub.w	r3, sl, r3
 80096d6:	4599      	cmp	r9, r3
 80096d8:	bfa8      	it	ge
 80096da:	4699      	movge	r9, r3
 80096dc:	f1b9 0f00 	cmp.w	r9, #0
 80096e0:	dc33      	bgt.n	800974a <_printf_float+0x396>
 80096e2:	f04f 0800 	mov.w	r8, #0
 80096e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096ea:	f104 0b1a 	add.w	fp, r4, #26
 80096ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f0:	ebaa 0303 	sub.w	r3, sl, r3
 80096f4:	eba3 0309 	sub.w	r3, r3, r9
 80096f8:	4543      	cmp	r3, r8
 80096fa:	f77f af79 	ble.w	80095f0 <_printf_float+0x23c>
 80096fe:	2301      	movs	r3, #1
 8009700:	465a      	mov	r2, fp
 8009702:	4631      	mov	r1, r6
 8009704:	4628      	mov	r0, r5
 8009706:	47b8      	blx	r7
 8009708:	3001      	adds	r0, #1
 800970a:	f43f aeae 	beq.w	800946a <_printf_float+0xb6>
 800970e:	f108 0801 	add.w	r8, r8, #1
 8009712:	e7ec      	b.n	80096ee <_printf_float+0x33a>
 8009714:	4642      	mov	r2, r8
 8009716:	4631      	mov	r1, r6
 8009718:	4628      	mov	r0, r5
 800971a:	47b8      	blx	r7
 800971c:	3001      	adds	r0, #1
 800971e:	d1c2      	bne.n	80096a6 <_printf_float+0x2f2>
 8009720:	e6a3      	b.n	800946a <_printf_float+0xb6>
 8009722:	2301      	movs	r3, #1
 8009724:	4631      	mov	r1, r6
 8009726:	4628      	mov	r0, r5
 8009728:	9206      	str	r2, [sp, #24]
 800972a:	47b8      	blx	r7
 800972c:	3001      	adds	r0, #1
 800972e:	f43f ae9c 	beq.w	800946a <_printf_float+0xb6>
 8009732:	9a06      	ldr	r2, [sp, #24]
 8009734:	f10b 0b01 	add.w	fp, fp, #1
 8009738:	e7bb      	b.n	80096b2 <_printf_float+0x2fe>
 800973a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800973e:	4631      	mov	r1, r6
 8009740:	4628      	mov	r0, r5
 8009742:	47b8      	blx	r7
 8009744:	3001      	adds	r0, #1
 8009746:	d1c0      	bne.n	80096ca <_printf_float+0x316>
 8009748:	e68f      	b.n	800946a <_printf_float+0xb6>
 800974a:	9a06      	ldr	r2, [sp, #24]
 800974c:	464b      	mov	r3, r9
 800974e:	4442      	add	r2, r8
 8009750:	4631      	mov	r1, r6
 8009752:	4628      	mov	r0, r5
 8009754:	47b8      	blx	r7
 8009756:	3001      	adds	r0, #1
 8009758:	d1c3      	bne.n	80096e2 <_printf_float+0x32e>
 800975a:	e686      	b.n	800946a <_printf_float+0xb6>
 800975c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009760:	f1ba 0f01 	cmp.w	sl, #1
 8009764:	dc01      	bgt.n	800976a <_printf_float+0x3b6>
 8009766:	07db      	lsls	r3, r3, #31
 8009768:	d536      	bpl.n	80097d8 <_printf_float+0x424>
 800976a:	2301      	movs	r3, #1
 800976c:	4642      	mov	r2, r8
 800976e:	4631      	mov	r1, r6
 8009770:	4628      	mov	r0, r5
 8009772:	47b8      	blx	r7
 8009774:	3001      	adds	r0, #1
 8009776:	f43f ae78 	beq.w	800946a <_printf_float+0xb6>
 800977a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800977e:	4631      	mov	r1, r6
 8009780:	4628      	mov	r0, r5
 8009782:	47b8      	blx	r7
 8009784:	3001      	adds	r0, #1
 8009786:	f43f ae70 	beq.w	800946a <_printf_float+0xb6>
 800978a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800978e:	2200      	movs	r2, #0
 8009790:	2300      	movs	r3, #0
 8009792:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009796:	f7f7 f9bf 	bl	8000b18 <__aeabi_dcmpeq>
 800979a:	b9c0      	cbnz	r0, 80097ce <_printf_float+0x41a>
 800979c:	4653      	mov	r3, sl
 800979e:	f108 0201 	add.w	r2, r8, #1
 80097a2:	4631      	mov	r1, r6
 80097a4:	4628      	mov	r0, r5
 80097a6:	47b8      	blx	r7
 80097a8:	3001      	adds	r0, #1
 80097aa:	d10c      	bne.n	80097c6 <_printf_float+0x412>
 80097ac:	e65d      	b.n	800946a <_printf_float+0xb6>
 80097ae:	2301      	movs	r3, #1
 80097b0:	465a      	mov	r2, fp
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	f43f ae56 	beq.w	800946a <_printf_float+0xb6>
 80097be:	f108 0801 	add.w	r8, r8, #1
 80097c2:	45d0      	cmp	r8, sl
 80097c4:	dbf3      	blt.n	80097ae <_printf_float+0x3fa>
 80097c6:	464b      	mov	r3, r9
 80097c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80097cc:	e6df      	b.n	800958e <_printf_float+0x1da>
 80097ce:	f04f 0800 	mov.w	r8, #0
 80097d2:	f104 0b1a 	add.w	fp, r4, #26
 80097d6:	e7f4      	b.n	80097c2 <_printf_float+0x40e>
 80097d8:	2301      	movs	r3, #1
 80097da:	4642      	mov	r2, r8
 80097dc:	e7e1      	b.n	80097a2 <_printf_float+0x3ee>
 80097de:	2301      	movs	r3, #1
 80097e0:	464a      	mov	r2, r9
 80097e2:	4631      	mov	r1, r6
 80097e4:	4628      	mov	r0, r5
 80097e6:	47b8      	blx	r7
 80097e8:	3001      	adds	r0, #1
 80097ea:	f43f ae3e 	beq.w	800946a <_printf_float+0xb6>
 80097ee:	f108 0801 	add.w	r8, r8, #1
 80097f2:	68e3      	ldr	r3, [r4, #12]
 80097f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80097f6:	1a5b      	subs	r3, r3, r1
 80097f8:	4543      	cmp	r3, r8
 80097fa:	dcf0      	bgt.n	80097de <_printf_float+0x42a>
 80097fc:	e6fc      	b.n	80095f8 <_printf_float+0x244>
 80097fe:	f04f 0800 	mov.w	r8, #0
 8009802:	f104 0919 	add.w	r9, r4, #25
 8009806:	e7f4      	b.n	80097f2 <_printf_float+0x43e>

08009808 <_printf_common>:
 8009808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800980c:	4616      	mov	r6, r2
 800980e:	4698      	mov	r8, r3
 8009810:	688a      	ldr	r2, [r1, #8]
 8009812:	690b      	ldr	r3, [r1, #16]
 8009814:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009818:	4293      	cmp	r3, r2
 800981a:	bfb8      	it	lt
 800981c:	4613      	movlt	r3, r2
 800981e:	6033      	str	r3, [r6, #0]
 8009820:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009824:	4607      	mov	r7, r0
 8009826:	460c      	mov	r4, r1
 8009828:	b10a      	cbz	r2, 800982e <_printf_common+0x26>
 800982a:	3301      	adds	r3, #1
 800982c:	6033      	str	r3, [r6, #0]
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	0699      	lsls	r1, r3, #26
 8009832:	bf42      	ittt	mi
 8009834:	6833      	ldrmi	r3, [r6, #0]
 8009836:	3302      	addmi	r3, #2
 8009838:	6033      	strmi	r3, [r6, #0]
 800983a:	6825      	ldr	r5, [r4, #0]
 800983c:	f015 0506 	ands.w	r5, r5, #6
 8009840:	d106      	bne.n	8009850 <_printf_common+0x48>
 8009842:	f104 0a19 	add.w	sl, r4, #25
 8009846:	68e3      	ldr	r3, [r4, #12]
 8009848:	6832      	ldr	r2, [r6, #0]
 800984a:	1a9b      	subs	r3, r3, r2
 800984c:	42ab      	cmp	r3, r5
 800984e:	dc26      	bgt.n	800989e <_printf_common+0x96>
 8009850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009854:	6822      	ldr	r2, [r4, #0]
 8009856:	3b00      	subs	r3, #0
 8009858:	bf18      	it	ne
 800985a:	2301      	movne	r3, #1
 800985c:	0692      	lsls	r2, r2, #26
 800985e:	d42b      	bmi.n	80098b8 <_printf_common+0xb0>
 8009860:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009864:	4641      	mov	r1, r8
 8009866:	4638      	mov	r0, r7
 8009868:	47c8      	blx	r9
 800986a:	3001      	adds	r0, #1
 800986c:	d01e      	beq.n	80098ac <_printf_common+0xa4>
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	6922      	ldr	r2, [r4, #16]
 8009872:	f003 0306 	and.w	r3, r3, #6
 8009876:	2b04      	cmp	r3, #4
 8009878:	bf02      	ittt	eq
 800987a:	68e5      	ldreq	r5, [r4, #12]
 800987c:	6833      	ldreq	r3, [r6, #0]
 800987e:	1aed      	subeq	r5, r5, r3
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	bf0c      	ite	eq
 8009884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009888:	2500      	movne	r5, #0
 800988a:	4293      	cmp	r3, r2
 800988c:	bfc4      	itt	gt
 800988e:	1a9b      	subgt	r3, r3, r2
 8009890:	18ed      	addgt	r5, r5, r3
 8009892:	2600      	movs	r6, #0
 8009894:	341a      	adds	r4, #26
 8009896:	42b5      	cmp	r5, r6
 8009898:	d11a      	bne.n	80098d0 <_printf_common+0xc8>
 800989a:	2000      	movs	r0, #0
 800989c:	e008      	b.n	80098b0 <_printf_common+0xa8>
 800989e:	2301      	movs	r3, #1
 80098a0:	4652      	mov	r2, sl
 80098a2:	4641      	mov	r1, r8
 80098a4:	4638      	mov	r0, r7
 80098a6:	47c8      	blx	r9
 80098a8:	3001      	adds	r0, #1
 80098aa:	d103      	bne.n	80098b4 <_printf_common+0xac>
 80098ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b4:	3501      	adds	r5, #1
 80098b6:	e7c6      	b.n	8009846 <_printf_common+0x3e>
 80098b8:	18e1      	adds	r1, r4, r3
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	2030      	movs	r0, #48	@ 0x30
 80098be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80098c2:	4422      	add	r2, r4
 80098c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80098c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80098cc:	3302      	adds	r3, #2
 80098ce:	e7c7      	b.n	8009860 <_printf_common+0x58>
 80098d0:	2301      	movs	r3, #1
 80098d2:	4622      	mov	r2, r4
 80098d4:	4641      	mov	r1, r8
 80098d6:	4638      	mov	r0, r7
 80098d8:	47c8      	blx	r9
 80098da:	3001      	adds	r0, #1
 80098dc:	d0e6      	beq.n	80098ac <_printf_common+0xa4>
 80098de:	3601      	adds	r6, #1
 80098e0:	e7d9      	b.n	8009896 <_printf_common+0x8e>
	...

080098e4 <_printf_i>:
 80098e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098e8:	7e0f      	ldrb	r7, [r1, #24]
 80098ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098ec:	2f78      	cmp	r7, #120	@ 0x78
 80098ee:	4691      	mov	r9, r2
 80098f0:	4680      	mov	r8, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	469a      	mov	sl, r3
 80098f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098fa:	d807      	bhi.n	800990c <_printf_i+0x28>
 80098fc:	2f62      	cmp	r7, #98	@ 0x62
 80098fe:	d80a      	bhi.n	8009916 <_printf_i+0x32>
 8009900:	2f00      	cmp	r7, #0
 8009902:	f000 80d2 	beq.w	8009aaa <_printf_i+0x1c6>
 8009906:	2f58      	cmp	r7, #88	@ 0x58
 8009908:	f000 80b9 	beq.w	8009a7e <_printf_i+0x19a>
 800990c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009910:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009914:	e03a      	b.n	800998c <_printf_i+0xa8>
 8009916:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800991a:	2b15      	cmp	r3, #21
 800991c:	d8f6      	bhi.n	800990c <_printf_i+0x28>
 800991e:	a101      	add	r1, pc, #4	@ (adr r1, 8009924 <_printf_i+0x40>)
 8009920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009924:	0800997d 	.word	0x0800997d
 8009928:	08009991 	.word	0x08009991
 800992c:	0800990d 	.word	0x0800990d
 8009930:	0800990d 	.word	0x0800990d
 8009934:	0800990d 	.word	0x0800990d
 8009938:	0800990d 	.word	0x0800990d
 800993c:	08009991 	.word	0x08009991
 8009940:	0800990d 	.word	0x0800990d
 8009944:	0800990d 	.word	0x0800990d
 8009948:	0800990d 	.word	0x0800990d
 800994c:	0800990d 	.word	0x0800990d
 8009950:	08009a91 	.word	0x08009a91
 8009954:	080099bb 	.word	0x080099bb
 8009958:	08009a4b 	.word	0x08009a4b
 800995c:	0800990d 	.word	0x0800990d
 8009960:	0800990d 	.word	0x0800990d
 8009964:	08009ab3 	.word	0x08009ab3
 8009968:	0800990d 	.word	0x0800990d
 800996c:	080099bb 	.word	0x080099bb
 8009970:	0800990d 	.word	0x0800990d
 8009974:	0800990d 	.word	0x0800990d
 8009978:	08009a53 	.word	0x08009a53
 800997c:	6833      	ldr	r3, [r6, #0]
 800997e:	1d1a      	adds	r2, r3, #4
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6032      	str	r2, [r6, #0]
 8009984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009988:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800998c:	2301      	movs	r3, #1
 800998e:	e09d      	b.n	8009acc <_printf_i+0x1e8>
 8009990:	6833      	ldr	r3, [r6, #0]
 8009992:	6820      	ldr	r0, [r4, #0]
 8009994:	1d19      	adds	r1, r3, #4
 8009996:	6031      	str	r1, [r6, #0]
 8009998:	0606      	lsls	r6, r0, #24
 800999a:	d501      	bpl.n	80099a0 <_printf_i+0xbc>
 800999c:	681d      	ldr	r5, [r3, #0]
 800999e:	e003      	b.n	80099a8 <_printf_i+0xc4>
 80099a0:	0645      	lsls	r5, r0, #25
 80099a2:	d5fb      	bpl.n	800999c <_printf_i+0xb8>
 80099a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	da03      	bge.n	80099b4 <_printf_i+0xd0>
 80099ac:	232d      	movs	r3, #45	@ 0x2d
 80099ae:	426d      	negs	r5, r5
 80099b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099b4:	4859      	ldr	r0, [pc, #356]	@ (8009b1c <_printf_i+0x238>)
 80099b6:	230a      	movs	r3, #10
 80099b8:	e011      	b.n	80099de <_printf_i+0xfa>
 80099ba:	6821      	ldr	r1, [r4, #0]
 80099bc:	6833      	ldr	r3, [r6, #0]
 80099be:	0608      	lsls	r0, r1, #24
 80099c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80099c4:	d402      	bmi.n	80099cc <_printf_i+0xe8>
 80099c6:	0649      	lsls	r1, r1, #25
 80099c8:	bf48      	it	mi
 80099ca:	b2ad      	uxthmi	r5, r5
 80099cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80099ce:	4853      	ldr	r0, [pc, #332]	@ (8009b1c <_printf_i+0x238>)
 80099d0:	6033      	str	r3, [r6, #0]
 80099d2:	bf14      	ite	ne
 80099d4:	230a      	movne	r3, #10
 80099d6:	2308      	moveq	r3, #8
 80099d8:	2100      	movs	r1, #0
 80099da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099de:	6866      	ldr	r6, [r4, #4]
 80099e0:	60a6      	str	r6, [r4, #8]
 80099e2:	2e00      	cmp	r6, #0
 80099e4:	bfa2      	ittt	ge
 80099e6:	6821      	ldrge	r1, [r4, #0]
 80099e8:	f021 0104 	bicge.w	r1, r1, #4
 80099ec:	6021      	strge	r1, [r4, #0]
 80099ee:	b90d      	cbnz	r5, 80099f4 <_printf_i+0x110>
 80099f0:	2e00      	cmp	r6, #0
 80099f2:	d04b      	beq.n	8009a8c <_printf_i+0x1a8>
 80099f4:	4616      	mov	r6, r2
 80099f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80099fa:	fb03 5711 	mls	r7, r3, r1, r5
 80099fe:	5dc7      	ldrb	r7, [r0, r7]
 8009a00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a04:	462f      	mov	r7, r5
 8009a06:	42bb      	cmp	r3, r7
 8009a08:	460d      	mov	r5, r1
 8009a0a:	d9f4      	bls.n	80099f6 <_printf_i+0x112>
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d10b      	bne.n	8009a28 <_printf_i+0x144>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	07df      	lsls	r7, r3, #31
 8009a14:	d508      	bpl.n	8009a28 <_printf_i+0x144>
 8009a16:	6923      	ldr	r3, [r4, #16]
 8009a18:	6861      	ldr	r1, [r4, #4]
 8009a1a:	4299      	cmp	r1, r3
 8009a1c:	bfde      	ittt	le
 8009a1e:	2330      	movle	r3, #48	@ 0x30
 8009a20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a24:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009a28:	1b92      	subs	r2, r2, r6
 8009a2a:	6122      	str	r2, [r4, #16]
 8009a2c:	f8cd a000 	str.w	sl, [sp]
 8009a30:	464b      	mov	r3, r9
 8009a32:	aa03      	add	r2, sp, #12
 8009a34:	4621      	mov	r1, r4
 8009a36:	4640      	mov	r0, r8
 8009a38:	f7ff fee6 	bl	8009808 <_printf_common>
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d14a      	bne.n	8009ad6 <_printf_i+0x1f2>
 8009a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a44:	b004      	add	sp, #16
 8009a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	f043 0320 	orr.w	r3, r3, #32
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	4833      	ldr	r0, [pc, #204]	@ (8009b20 <_printf_i+0x23c>)
 8009a54:	2778      	movs	r7, #120	@ 0x78
 8009a56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	6831      	ldr	r1, [r6, #0]
 8009a5e:	061f      	lsls	r7, r3, #24
 8009a60:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a64:	d402      	bmi.n	8009a6c <_printf_i+0x188>
 8009a66:	065f      	lsls	r7, r3, #25
 8009a68:	bf48      	it	mi
 8009a6a:	b2ad      	uxthmi	r5, r5
 8009a6c:	6031      	str	r1, [r6, #0]
 8009a6e:	07d9      	lsls	r1, r3, #31
 8009a70:	bf44      	itt	mi
 8009a72:	f043 0320 	orrmi.w	r3, r3, #32
 8009a76:	6023      	strmi	r3, [r4, #0]
 8009a78:	b11d      	cbz	r5, 8009a82 <_printf_i+0x19e>
 8009a7a:	2310      	movs	r3, #16
 8009a7c:	e7ac      	b.n	80099d8 <_printf_i+0xf4>
 8009a7e:	4827      	ldr	r0, [pc, #156]	@ (8009b1c <_printf_i+0x238>)
 8009a80:	e7e9      	b.n	8009a56 <_printf_i+0x172>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	f023 0320 	bic.w	r3, r3, #32
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	e7f6      	b.n	8009a7a <_printf_i+0x196>
 8009a8c:	4616      	mov	r6, r2
 8009a8e:	e7bd      	b.n	8009a0c <_printf_i+0x128>
 8009a90:	6833      	ldr	r3, [r6, #0]
 8009a92:	6825      	ldr	r5, [r4, #0]
 8009a94:	6961      	ldr	r1, [r4, #20]
 8009a96:	1d18      	adds	r0, r3, #4
 8009a98:	6030      	str	r0, [r6, #0]
 8009a9a:	062e      	lsls	r6, r5, #24
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	d501      	bpl.n	8009aa4 <_printf_i+0x1c0>
 8009aa0:	6019      	str	r1, [r3, #0]
 8009aa2:	e002      	b.n	8009aaa <_printf_i+0x1c6>
 8009aa4:	0668      	lsls	r0, r5, #25
 8009aa6:	d5fb      	bpl.n	8009aa0 <_printf_i+0x1bc>
 8009aa8:	8019      	strh	r1, [r3, #0]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	6123      	str	r3, [r4, #16]
 8009aae:	4616      	mov	r6, r2
 8009ab0:	e7bc      	b.n	8009a2c <_printf_i+0x148>
 8009ab2:	6833      	ldr	r3, [r6, #0]
 8009ab4:	1d1a      	adds	r2, r3, #4
 8009ab6:	6032      	str	r2, [r6, #0]
 8009ab8:	681e      	ldr	r6, [r3, #0]
 8009aba:	6862      	ldr	r2, [r4, #4]
 8009abc:	2100      	movs	r1, #0
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f7f6 fbae 	bl	8000220 <memchr>
 8009ac4:	b108      	cbz	r0, 8009aca <_printf_i+0x1e6>
 8009ac6:	1b80      	subs	r0, r0, r6
 8009ac8:	6060      	str	r0, [r4, #4]
 8009aca:	6863      	ldr	r3, [r4, #4]
 8009acc:	6123      	str	r3, [r4, #16]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ad4:	e7aa      	b.n	8009a2c <_printf_i+0x148>
 8009ad6:	6923      	ldr	r3, [r4, #16]
 8009ad8:	4632      	mov	r2, r6
 8009ada:	4649      	mov	r1, r9
 8009adc:	4640      	mov	r0, r8
 8009ade:	47d0      	blx	sl
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d0ad      	beq.n	8009a40 <_printf_i+0x15c>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	079b      	lsls	r3, r3, #30
 8009ae8:	d413      	bmi.n	8009b12 <_printf_i+0x22e>
 8009aea:	68e0      	ldr	r0, [r4, #12]
 8009aec:	9b03      	ldr	r3, [sp, #12]
 8009aee:	4298      	cmp	r0, r3
 8009af0:	bfb8      	it	lt
 8009af2:	4618      	movlt	r0, r3
 8009af4:	e7a6      	b.n	8009a44 <_printf_i+0x160>
 8009af6:	2301      	movs	r3, #1
 8009af8:	4632      	mov	r2, r6
 8009afa:	4649      	mov	r1, r9
 8009afc:	4640      	mov	r0, r8
 8009afe:	47d0      	blx	sl
 8009b00:	3001      	adds	r0, #1
 8009b02:	d09d      	beq.n	8009a40 <_printf_i+0x15c>
 8009b04:	3501      	adds	r5, #1
 8009b06:	68e3      	ldr	r3, [r4, #12]
 8009b08:	9903      	ldr	r1, [sp, #12]
 8009b0a:	1a5b      	subs	r3, r3, r1
 8009b0c:	42ab      	cmp	r3, r5
 8009b0e:	dcf2      	bgt.n	8009af6 <_printf_i+0x212>
 8009b10:	e7eb      	b.n	8009aea <_printf_i+0x206>
 8009b12:	2500      	movs	r5, #0
 8009b14:	f104 0619 	add.w	r6, r4, #25
 8009b18:	e7f5      	b.n	8009b06 <_printf_i+0x222>
 8009b1a:	bf00      	nop
 8009b1c:	0800e0ae 	.word	0x0800e0ae
 8009b20:	0800e0bf 	.word	0x0800e0bf

08009b24 <_scanf_float>:
 8009b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b28:	b087      	sub	sp, #28
 8009b2a:	4617      	mov	r7, r2
 8009b2c:	9303      	str	r3, [sp, #12]
 8009b2e:	688b      	ldr	r3, [r1, #8]
 8009b30:	1e5a      	subs	r2, r3, #1
 8009b32:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009b36:	bf81      	itttt	hi
 8009b38:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009b3c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009b40:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009b44:	608b      	strhi	r3, [r1, #8]
 8009b46:	680b      	ldr	r3, [r1, #0]
 8009b48:	460a      	mov	r2, r1
 8009b4a:	f04f 0500 	mov.w	r5, #0
 8009b4e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009b52:	f842 3b1c 	str.w	r3, [r2], #28
 8009b56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	bf98      	it	ls
 8009b60:	f04f 0b00 	movls.w	fp, #0
 8009b64:	9201      	str	r2, [sp, #4]
 8009b66:	4616      	mov	r6, r2
 8009b68:	46aa      	mov	sl, r5
 8009b6a:	46a9      	mov	r9, r5
 8009b6c:	9502      	str	r5, [sp, #8]
 8009b6e:	68a2      	ldr	r2, [r4, #8]
 8009b70:	b152      	cbz	r2, 8009b88 <_scanf_float+0x64>
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	2b4e      	cmp	r3, #78	@ 0x4e
 8009b78:	d864      	bhi.n	8009c44 <_scanf_float+0x120>
 8009b7a:	2b40      	cmp	r3, #64	@ 0x40
 8009b7c:	d83c      	bhi.n	8009bf8 <_scanf_float+0xd4>
 8009b7e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009b82:	b2c8      	uxtb	r0, r1
 8009b84:	280e      	cmp	r0, #14
 8009b86:	d93a      	bls.n	8009bfe <_scanf_float+0xda>
 8009b88:	f1b9 0f00 	cmp.w	r9, #0
 8009b8c:	d003      	beq.n	8009b96 <_scanf_float+0x72>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009b9a:	f1ba 0f01 	cmp.w	sl, #1
 8009b9e:	f200 8117 	bhi.w	8009dd0 <_scanf_float+0x2ac>
 8009ba2:	9b01      	ldr	r3, [sp, #4]
 8009ba4:	429e      	cmp	r6, r3
 8009ba6:	f200 8108 	bhi.w	8009dba <_scanf_float+0x296>
 8009baa:	2001      	movs	r0, #1
 8009bac:	b007      	add	sp, #28
 8009bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009bb6:	2a0d      	cmp	r2, #13
 8009bb8:	d8e6      	bhi.n	8009b88 <_scanf_float+0x64>
 8009bba:	a101      	add	r1, pc, #4	@ (adr r1, 8009bc0 <_scanf_float+0x9c>)
 8009bbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009bc0:	08009d07 	.word	0x08009d07
 8009bc4:	08009b89 	.word	0x08009b89
 8009bc8:	08009b89 	.word	0x08009b89
 8009bcc:	08009b89 	.word	0x08009b89
 8009bd0:	08009d67 	.word	0x08009d67
 8009bd4:	08009d3f 	.word	0x08009d3f
 8009bd8:	08009b89 	.word	0x08009b89
 8009bdc:	08009b89 	.word	0x08009b89
 8009be0:	08009d15 	.word	0x08009d15
 8009be4:	08009b89 	.word	0x08009b89
 8009be8:	08009b89 	.word	0x08009b89
 8009bec:	08009b89 	.word	0x08009b89
 8009bf0:	08009b89 	.word	0x08009b89
 8009bf4:	08009ccd 	.word	0x08009ccd
 8009bf8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009bfc:	e7db      	b.n	8009bb6 <_scanf_float+0x92>
 8009bfe:	290e      	cmp	r1, #14
 8009c00:	d8c2      	bhi.n	8009b88 <_scanf_float+0x64>
 8009c02:	a001      	add	r0, pc, #4	@ (adr r0, 8009c08 <_scanf_float+0xe4>)
 8009c04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009c08:	08009cbd 	.word	0x08009cbd
 8009c0c:	08009b89 	.word	0x08009b89
 8009c10:	08009cbd 	.word	0x08009cbd
 8009c14:	08009d53 	.word	0x08009d53
 8009c18:	08009b89 	.word	0x08009b89
 8009c1c:	08009c65 	.word	0x08009c65
 8009c20:	08009ca3 	.word	0x08009ca3
 8009c24:	08009ca3 	.word	0x08009ca3
 8009c28:	08009ca3 	.word	0x08009ca3
 8009c2c:	08009ca3 	.word	0x08009ca3
 8009c30:	08009ca3 	.word	0x08009ca3
 8009c34:	08009ca3 	.word	0x08009ca3
 8009c38:	08009ca3 	.word	0x08009ca3
 8009c3c:	08009ca3 	.word	0x08009ca3
 8009c40:	08009ca3 	.word	0x08009ca3
 8009c44:	2b6e      	cmp	r3, #110	@ 0x6e
 8009c46:	d809      	bhi.n	8009c5c <_scanf_float+0x138>
 8009c48:	2b60      	cmp	r3, #96	@ 0x60
 8009c4a:	d8b2      	bhi.n	8009bb2 <_scanf_float+0x8e>
 8009c4c:	2b54      	cmp	r3, #84	@ 0x54
 8009c4e:	d07b      	beq.n	8009d48 <_scanf_float+0x224>
 8009c50:	2b59      	cmp	r3, #89	@ 0x59
 8009c52:	d199      	bne.n	8009b88 <_scanf_float+0x64>
 8009c54:	2d07      	cmp	r5, #7
 8009c56:	d197      	bne.n	8009b88 <_scanf_float+0x64>
 8009c58:	2508      	movs	r5, #8
 8009c5a:	e02c      	b.n	8009cb6 <_scanf_float+0x192>
 8009c5c:	2b74      	cmp	r3, #116	@ 0x74
 8009c5e:	d073      	beq.n	8009d48 <_scanf_float+0x224>
 8009c60:	2b79      	cmp	r3, #121	@ 0x79
 8009c62:	e7f6      	b.n	8009c52 <_scanf_float+0x12e>
 8009c64:	6821      	ldr	r1, [r4, #0]
 8009c66:	05c8      	lsls	r0, r1, #23
 8009c68:	d51b      	bpl.n	8009ca2 <_scanf_float+0x17e>
 8009c6a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009c6e:	6021      	str	r1, [r4, #0]
 8009c70:	f109 0901 	add.w	r9, r9, #1
 8009c74:	f1bb 0f00 	cmp.w	fp, #0
 8009c78:	d003      	beq.n	8009c82 <_scanf_float+0x15e>
 8009c7a:	3201      	adds	r2, #1
 8009c7c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009c80:	60a2      	str	r2, [r4, #8]
 8009c82:	68a3      	ldr	r3, [r4, #8]
 8009c84:	3b01      	subs	r3, #1
 8009c86:	60a3      	str	r3, [r4, #8]
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	6123      	str	r3, [r4, #16]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	607b      	str	r3, [r7, #4]
 8009c96:	f340 8087 	ble.w	8009da8 <_scanf_float+0x284>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	603b      	str	r3, [r7, #0]
 8009ca0:	e765      	b.n	8009b6e <_scanf_float+0x4a>
 8009ca2:	eb1a 0105 	adds.w	r1, sl, r5
 8009ca6:	f47f af6f 	bne.w	8009b88 <_scanf_float+0x64>
 8009caa:	6822      	ldr	r2, [r4, #0]
 8009cac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009cb0:	6022      	str	r2, [r4, #0]
 8009cb2:	460d      	mov	r5, r1
 8009cb4:	468a      	mov	sl, r1
 8009cb6:	f806 3b01 	strb.w	r3, [r6], #1
 8009cba:	e7e2      	b.n	8009c82 <_scanf_float+0x15e>
 8009cbc:	6822      	ldr	r2, [r4, #0]
 8009cbe:	0610      	lsls	r0, r2, #24
 8009cc0:	f57f af62 	bpl.w	8009b88 <_scanf_float+0x64>
 8009cc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009cc8:	6022      	str	r2, [r4, #0]
 8009cca:	e7f4      	b.n	8009cb6 <_scanf_float+0x192>
 8009ccc:	f1ba 0f00 	cmp.w	sl, #0
 8009cd0:	d10e      	bne.n	8009cf0 <_scanf_float+0x1cc>
 8009cd2:	f1b9 0f00 	cmp.w	r9, #0
 8009cd6:	d10e      	bne.n	8009cf6 <_scanf_float+0x1d2>
 8009cd8:	6822      	ldr	r2, [r4, #0]
 8009cda:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009cde:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009ce2:	d108      	bne.n	8009cf6 <_scanf_float+0x1d2>
 8009ce4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ce8:	6022      	str	r2, [r4, #0]
 8009cea:	f04f 0a01 	mov.w	sl, #1
 8009cee:	e7e2      	b.n	8009cb6 <_scanf_float+0x192>
 8009cf0:	f1ba 0f02 	cmp.w	sl, #2
 8009cf4:	d055      	beq.n	8009da2 <_scanf_float+0x27e>
 8009cf6:	2d01      	cmp	r5, #1
 8009cf8:	d002      	beq.n	8009d00 <_scanf_float+0x1dc>
 8009cfa:	2d04      	cmp	r5, #4
 8009cfc:	f47f af44 	bne.w	8009b88 <_scanf_float+0x64>
 8009d00:	3501      	adds	r5, #1
 8009d02:	b2ed      	uxtb	r5, r5
 8009d04:	e7d7      	b.n	8009cb6 <_scanf_float+0x192>
 8009d06:	f1ba 0f01 	cmp.w	sl, #1
 8009d0a:	f47f af3d 	bne.w	8009b88 <_scanf_float+0x64>
 8009d0e:	f04f 0a02 	mov.w	sl, #2
 8009d12:	e7d0      	b.n	8009cb6 <_scanf_float+0x192>
 8009d14:	b97d      	cbnz	r5, 8009d36 <_scanf_float+0x212>
 8009d16:	f1b9 0f00 	cmp.w	r9, #0
 8009d1a:	f47f af38 	bne.w	8009b8e <_scanf_float+0x6a>
 8009d1e:	6822      	ldr	r2, [r4, #0]
 8009d20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009d24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009d28:	f040 8108 	bne.w	8009f3c <_scanf_float+0x418>
 8009d2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009d30:	6022      	str	r2, [r4, #0]
 8009d32:	2501      	movs	r5, #1
 8009d34:	e7bf      	b.n	8009cb6 <_scanf_float+0x192>
 8009d36:	2d03      	cmp	r5, #3
 8009d38:	d0e2      	beq.n	8009d00 <_scanf_float+0x1dc>
 8009d3a:	2d05      	cmp	r5, #5
 8009d3c:	e7de      	b.n	8009cfc <_scanf_float+0x1d8>
 8009d3e:	2d02      	cmp	r5, #2
 8009d40:	f47f af22 	bne.w	8009b88 <_scanf_float+0x64>
 8009d44:	2503      	movs	r5, #3
 8009d46:	e7b6      	b.n	8009cb6 <_scanf_float+0x192>
 8009d48:	2d06      	cmp	r5, #6
 8009d4a:	f47f af1d 	bne.w	8009b88 <_scanf_float+0x64>
 8009d4e:	2507      	movs	r5, #7
 8009d50:	e7b1      	b.n	8009cb6 <_scanf_float+0x192>
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	0591      	lsls	r1, r2, #22
 8009d56:	f57f af17 	bpl.w	8009b88 <_scanf_float+0x64>
 8009d5a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009d5e:	6022      	str	r2, [r4, #0]
 8009d60:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d64:	e7a7      	b.n	8009cb6 <_scanf_float+0x192>
 8009d66:	6822      	ldr	r2, [r4, #0]
 8009d68:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009d6c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009d70:	d006      	beq.n	8009d80 <_scanf_float+0x25c>
 8009d72:	0550      	lsls	r0, r2, #21
 8009d74:	f57f af08 	bpl.w	8009b88 <_scanf_float+0x64>
 8009d78:	f1b9 0f00 	cmp.w	r9, #0
 8009d7c:	f000 80de 	beq.w	8009f3c <_scanf_float+0x418>
 8009d80:	0591      	lsls	r1, r2, #22
 8009d82:	bf58      	it	pl
 8009d84:	9902      	ldrpl	r1, [sp, #8]
 8009d86:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009d8a:	bf58      	it	pl
 8009d8c:	eba9 0101 	subpl.w	r1, r9, r1
 8009d90:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009d94:	bf58      	it	pl
 8009d96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009d9a:	6022      	str	r2, [r4, #0]
 8009d9c:	f04f 0900 	mov.w	r9, #0
 8009da0:	e789      	b.n	8009cb6 <_scanf_float+0x192>
 8009da2:	f04f 0a03 	mov.w	sl, #3
 8009da6:	e786      	b.n	8009cb6 <_scanf_float+0x192>
 8009da8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009dac:	4639      	mov	r1, r7
 8009dae:	4640      	mov	r0, r8
 8009db0:	4798      	blx	r3
 8009db2:	2800      	cmp	r0, #0
 8009db4:	f43f aedb 	beq.w	8009b6e <_scanf_float+0x4a>
 8009db8:	e6e6      	b.n	8009b88 <_scanf_float+0x64>
 8009dba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009dbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009dc2:	463a      	mov	r2, r7
 8009dc4:	4640      	mov	r0, r8
 8009dc6:	4798      	blx	r3
 8009dc8:	6923      	ldr	r3, [r4, #16]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	6123      	str	r3, [r4, #16]
 8009dce:	e6e8      	b.n	8009ba2 <_scanf_float+0x7e>
 8009dd0:	1e6b      	subs	r3, r5, #1
 8009dd2:	2b06      	cmp	r3, #6
 8009dd4:	d824      	bhi.n	8009e20 <_scanf_float+0x2fc>
 8009dd6:	2d02      	cmp	r5, #2
 8009dd8:	d836      	bhi.n	8009e48 <_scanf_float+0x324>
 8009dda:	9b01      	ldr	r3, [sp, #4]
 8009ddc:	429e      	cmp	r6, r3
 8009dde:	f67f aee4 	bls.w	8009baa <_scanf_float+0x86>
 8009de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009de6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009dea:	463a      	mov	r2, r7
 8009dec:	4640      	mov	r0, r8
 8009dee:	4798      	blx	r3
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	6123      	str	r3, [r4, #16]
 8009df6:	e7f0      	b.n	8009dda <_scanf_float+0x2b6>
 8009df8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009dfc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009e00:	463a      	mov	r2, r7
 8009e02:	4640      	mov	r0, r8
 8009e04:	4798      	blx	r3
 8009e06:	6923      	ldr	r3, [r4, #16]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	6123      	str	r3, [r4, #16]
 8009e0c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009e10:	fa5f fa8a 	uxtb.w	sl, sl
 8009e14:	f1ba 0f02 	cmp.w	sl, #2
 8009e18:	d1ee      	bne.n	8009df8 <_scanf_float+0x2d4>
 8009e1a:	3d03      	subs	r5, #3
 8009e1c:	b2ed      	uxtb	r5, r5
 8009e1e:	1b76      	subs	r6, r6, r5
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	05da      	lsls	r2, r3, #23
 8009e24:	d530      	bpl.n	8009e88 <_scanf_float+0x364>
 8009e26:	055b      	lsls	r3, r3, #21
 8009e28:	d511      	bpl.n	8009e4e <_scanf_float+0x32a>
 8009e2a:	9b01      	ldr	r3, [sp, #4]
 8009e2c:	429e      	cmp	r6, r3
 8009e2e:	f67f aebc 	bls.w	8009baa <_scanf_float+0x86>
 8009e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e3a:	463a      	mov	r2, r7
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	4798      	blx	r3
 8009e40:	6923      	ldr	r3, [r4, #16]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	6123      	str	r3, [r4, #16]
 8009e46:	e7f0      	b.n	8009e2a <_scanf_float+0x306>
 8009e48:	46aa      	mov	sl, r5
 8009e4a:	46b3      	mov	fp, r6
 8009e4c:	e7de      	b.n	8009e0c <_scanf_float+0x2e8>
 8009e4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009e52:	6923      	ldr	r3, [r4, #16]
 8009e54:	2965      	cmp	r1, #101	@ 0x65
 8009e56:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009e5a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8009e5e:	6123      	str	r3, [r4, #16]
 8009e60:	d00c      	beq.n	8009e7c <_scanf_float+0x358>
 8009e62:	2945      	cmp	r1, #69	@ 0x45
 8009e64:	d00a      	beq.n	8009e7c <_scanf_float+0x358>
 8009e66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e6a:	463a      	mov	r2, r7
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	4798      	blx	r3
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	1eb5      	subs	r5, r6, #2
 8009e7a:	6123      	str	r3, [r4, #16]
 8009e7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e80:	463a      	mov	r2, r7
 8009e82:	4640      	mov	r0, r8
 8009e84:	4798      	blx	r3
 8009e86:	462e      	mov	r6, r5
 8009e88:	6822      	ldr	r2, [r4, #0]
 8009e8a:	f012 0210 	ands.w	r2, r2, #16
 8009e8e:	d001      	beq.n	8009e94 <_scanf_float+0x370>
 8009e90:	2000      	movs	r0, #0
 8009e92:	e68b      	b.n	8009bac <_scanf_float+0x88>
 8009e94:	7032      	strb	r2, [r6, #0]
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ea0:	d11c      	bne.n	8009edc <_scanf_float+0x3b8>
 8009ea2:	9b02      	ldr	r3, [sp, #8]
 8009ea4:	454b      	cmp	r3, r9
 8009ea6:	eba3 0209 	sub.w	r2, r3, r9
 8009eaa:	d123      	bne.n	8009ef4 <_scanf_float+0x3d0>
 8009eac:	9901      	ldr	r1, [sp, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	f002 fd15 	bl	800c8e0 <_strtod_r>
 8009eb6:	9b03      	ldr	r3, [sp, #12]
 8009eb8:	6821      	ldr	r1, [r4, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f011 0f02 	tst.w	r1, #2
 8009ec0:	ec57 6b10 	vmov	r6, r7, d0
 8009ec4:	f103 0204 	add.w	r2, r3, #4
 8009ec8:	d01f      	beq.n	8009f0a <_scanf_float+0x3e6>
 8009eca:	9903      	ldr	r1, [sp, #12]
 8009ecc:	600a      	str	r2, [r1, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	e9c3 6700 	strd	r6, r7, [r3]
 8009ed4:	68e3      	ldr	r3, [r4, #12]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	60e3      	str	r3, [r4, #12]
 8009eda:	e7d9      	b.n	8009e90 <_scanf_float+0x36c>
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0e4      	beq.n	8009eac <_scanf_float+0x388>
 8009ee2:	9905      	ldr	r1, [sp, #20]
 8009ee4:	230a      	movs	r3, #10
 8009ee6:	3101      	adds	r1, #1
 8009ee8:	4640      	mov	r0, r8
 8009eea:	f002 fd79 	bl	800c9e0 <_strtol_r>
 8009eee:	9b04      	ldr	r3, [sp, #16]
 8009ef0:	9e05      	ldr	r6, [sp, #20]
 8009ef2:	1ac2      	subs	r2, r0, r3
 8009ef4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009ef8:	429e      	cmp	r6, r3
 8009efa:	bf28      	it	cs
 8009efc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009f00:	4910      	ldr	r1, [pc, #64]	@ (8009f44 <_scanf_float+0x420>)
 8009f02:	4630      	mov	r0, r6
 8009f04:	f000 f954 	bl	800a1b0 <siprintf>
 8009f08:	e7d0      	b.n	8009eac <_scanf_float+0x388>
 8009f0a:	f011 0f04 	tst.w	r1, #4
 8009f0e:	9903      	ldr	r1, [sp, #12]
 8009f10:	600a      	str	r2, [r1, #0]
 8009f12:	d1dc      	bne.n	8009ece <_scanf_float+0x3aa>
 8009f14:	681d      	ldr	r5, [r3, #0]
 8009f16:	4632      	mov	r2, r6
 8009f18:	463b      	mov	r3, r7
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	4639      	mov	r1, r7
 8009f1e:	f7f6 fe2d 	bl	8000b7c <__aeabi_dcmpun>
 8009f22:	b128      	cbz	r0, 8009f30 <_scanf_float+0x40c>
 8009f24:	4808      	ldr	r0, [pc, #32]	@ (8009f48 <_scanf_float+0x424>)
 8009f26:	f000 fad5 	bl	800a4d4 <nanf>
 8009f2a:	ed85 0a00 	vstr	s0, [r5]
 8009f2e:	e7d1      	b.n	8009ed4 <_scanf_float+0x3b0>
 8009f30:	4630      	mov	r0, r6
 8009f32:	4639      	mov	r1, r7
 8009f34:	f7f6 fe80 	bl	8000c38 <__aeabi_d2f>
 8009f38:	6028      	str	r0, [r5, #0]
 8009f3a:	e7cb      	b.n	8009ed4 <_scanf_float+0x3b0>
 8009f3c:	f04f 0900 	mov.w	r9, #0
 8009f40:	e629      	b.n	8009b96 <_scanf_float+0x72>
 8009f42:	bf00      	nop
 8009f44:	0800e0d0 	.word	0x0800e0d0
 8009f48:	0800e465 	.word	0x0800e465

08009f4c <std>:
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	b510      	push	{r4, lr}
 8009f50:	4604      	mov	r4, r0
 8009f52:	e9c0 3300 	strd	r3, r3, [r0]
 8009f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f5a:	6083      	str	r3, [r0, #8]
 8009f5c:	8181      	strh	r1, [r0, #12]
 8009f5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009f60:	81c2      	strh	r2, [r0, #14]
 8009f62:	6183      	str	r3, [r0, #24]
 8009f64:	4619      	mov	r1, r3
 8009f66:	2208      	movs	r2, #8
 8009f68:	305c      	adds	r0, #92	@ 0x5c
 8009f6a:	f000 fa33 	bl	800a3d4 <memset>
 8009f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa4 <std+0x58>)
 8009f70:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f72:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa8 <std+0x5c>)
 8009f74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f76:	4b0d      	ldr	r3, [pc, #52]	@ (8009fac <std+0x60>)
 8009f78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb0 <std+0x64>)
 8009f7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb4 <std+0x68>)
 8009f80:	6224      	str	r4, [r4, #32]
 8009f82:	429c      	cmp	r4, r3
 8009f84:	d006      	beq.n	8009f94 <std+0x48>
 8009f86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009f8a:	4294      	cmp	r4, r2
 8009f8c:	d002      	beq.n	8009f94 <std+0x48>
 8009f8e:	33d0      	adds	r3, #208	@ 0xd0
 8009f90:	429c      	cmp	r4, r3
 8009f92:	d105      	bne.n	8009fa0 <std+0x54>
 8009f94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f9c:	f000 ba96 	b.w	800a4cc <__retarget_lock_init_recursive>
 8009fa0:	bd10      	pop	{r4, pc}
 8009fa2:	bf00      	nop
 8009fa4:	0800a1f1 	.word	0x0800a1f1
 8009fa8:	0800a213 	.word	0x0800a213
 8009fac:	0800a24b 	.word	0x0800a24b
 8009fb0:	0800a26f 	.word	0x0800a26f
 8009fb4:	20001848 	.word	0x20001848

08009fb8 <stdio_exit_handler>:
 8009fb8:	4a02      	ldr	r2, [pc, #8]	@ (8009fc4 <stdio_exit_handler+0xc>)
 8009fba:	4903      	ldr	r1, [pc, #12]	@ (8009fc8 <stdio_exit_handler+0x10>)
 8009fbc:	4803      	ldr	r0, [pc, #12]	@ (8009fcc <stdio_exit_handler+0x14>)
 8009fbe:	f000 b869 	b.w	800a094 <_fwalk_sglue>
 8009fc2:	bf00      	nop
 8009fc4:	20000f50 	.word	0x20000f50
 8009fc8:	0800d021 	.word	0x0800d021
 8009fcc:	20000f60 	.word	0x20000f60

08009fd0 <cleanup_stdio>:
 8009fd0:	6841      	ldr	r1, [r0, #4]
 8009fd2:	4b0c      	ldr	r3, [pc, #48]	@ (800a004 <cleanup_stdio+0x34>)
 8009fd4:	4299      	cmp	r1, r3
 8009fd6:	b510      	push	{r4, lr}
 8009fd8:	4604      	mov	r4, r0
 8009fda:	d001      	beq.n	8009fe0 <cleanup_stdio+0x10>
 8009fdc:	f003 f820 	bl	800d020 <_fflush_r>
 8009fe0:	68a1      	ldr	r1, [r4, #8]
 8009fe2:	4b09      	ldr	r3, [pc, #36]	@ (800a008 <cleanup_stdio+0x38>)
 8009fe4:	4299      	cmp	r1, r3
 8009fe6:	d002      	beq.n	8009fee <cleanup_stdio+0x1e>
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f003 f819 	bl	800d020 <_fflush_r>
 8009fee:	68e1      	ldr	r1, [r4, #12]
 8009ff0:	4b06      	ldr	r3, [pc, #24]	@ (800a00c <cleanup_stdio+0x3c>)
 8009ff2:	4299      	cmp	r1, r3
 8009ff4:	d004      	beq.n	800a000 <cleanup_stdio+0x30>
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ffc:	f003 b810 	b.w	800d020 <_fflush_r>
 800a000:	bd10      	pop	{r4, pc}
 800a002:	bf00      	nop
 800a004:	20001848 	.word	0x20001848
 800a008:	200018b0 	.word	0x200018b0
 800a00c:	20001918 	.word	0x20001918

0800a010 <global_stdio_init.part.0>:
 800a010:	b510      	push	{r4, lr}
 800a012:	4b0b      	ldr	r3, [pc, #44]	@ (800a040 <global_stdio_init.part.0+0x30>)
 800a014:	4c0b      	ldr	r4, [pc, #44]	@ (800a044 <global_stdio_init.part.0+0x34>)
 800a016:	4a0c      	ldr	r2, [pc, #48]	@ (800a048 <global_stdio_init.part.0+0x38>)
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	4620      	mov	r0, r4
 800a01c:	2200      	movs	r2, #0
 800a01e:	2104      	movs	r1, #4
 800a020:	f7ff ff94 	bl	8009f4c <std>
 800a024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a028:	2201      	movs	r2, #1
 800a02a:	2109      	movs	r1, #9
 800a02c:	f7ff ff8e 	bl	8009f4c <std>
 800a030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a034:	2202      	movs	r2, #2
 800a036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a03a:	2112      	movs	r1, #18
 800a03c:	f7ff bf86 	b.w	8009f4c <std>
 800a040:	20001980 	.word	0x20001980
 800a044:	20001848 	.word	0x20001848
 800a048:	08009fb9 	.word	0x08009fb9

0800a04c <__sfp_lock_acquire>:
 800a04c:	4801      	ldr	r0, [pc, #4]	@ (800a054 <__sfp_lock_acquire+0x8>)
 800a04e:	f000 ba3e 	b.w	800a4ce <__retarget_lock_acquire_recursive>
 800a052:	bf00      	nop
 800a054:	20001989 	.word	0x20001989

0800a058 <__sfp_lock_release>:
 800a058:	4801      	ldr	r0, [pc, #4]	@ (800a060 <__sfp_lock_release+0x8>)
 800a05a:	f000 ba39 	b.w	800a4d0 <__retarget_lock_release_recursive>
 800a05e:	bf00      	nop
 800a060:	20001989 	.word	0x20001989

0800a064 <__sinit>:
 800a064:	b510      	push	{r4, lr}
 800a066:	4604      	mov	r4, r0
 800a068:	f7ff fff0 	bl	800a04c <__sfp_lock_acquire>
 800a06c:	6a23      	ldr	r3, [r4, #32]
 800a06e:	b11b      	cbz	r3, 800a078 <__sinit+0x14>
 800a070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a074:	f7ff bff0 	b.w	800a058 <__sfp_lock_release>
 800a078:	4b04      	ldr	r3, [pc, #16]	@ (800a08c <__sinit+0x28>)
 800a07a:	6223      	str	r3, [r4, #32]
 800a07c:	4b04      	ldr	r3, [pc, #16]	@ (800a090 <__sinit+0x2c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1f5      	bne.n	800a070 <__sinit+0xc>
 800a084:	f7ff ffc4 	bl	800a010 <global_stdio_init.part.0>
 800a088:	e7f2      	b.n	800a070 <__sinit+0xc>
 800a08a:	bf00      	nop
 800a08c:	08009fd1 	.word	0x08009fd1
 800a090:	20001980 	.word	0x20001980

0800a094 <_fwalk_sglue>:
 800a094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a098:	4607      	mov	r7, r0
 800a09a:	4688      	mov	r8, r1
 800a09c:	4614      	mov	r4, r2
 800a09e:	2600      	movs	r6, #0
 800a0a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0a4:	f1b9 0901 	subs.w	r9, r9, #1
 800a0a8:	d505      	bpl.n	800a0b6 <_fwalk_sglue+0x22>
 800a0aa:	6824      	ldr	r4, [r4, #0]
 800a0ac:	2c00      	cmp	r4, #0
 800a0ae:	d1f7      	bne.n	800a0a0 <_fwalk_sglue+0xc>
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b6:	89ab      	ldrh	r3, [r5, #12]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d907      	bls.n	800a0cc <_fwalk_sglue+0x38>
 800a0bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	d003      	beq.n	800a0cc <_fwalk_sglue+0x38>
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	47c0      	blx	r8
 800a0ca:	4306      	orrs	r6, r0
 800a0cc:	3568      	adds	r5, #104	@ 0x68
 800a0ce:	e7e9      	b.n	800a0a4 <_fwalk_sglue+0x10>

0800a0d0 <iprintf>:
 800a0d0:	b40f      	push	{r0, r1, r2, r3}
 800a0d2:	b507      	push	{r0, r1, r2, lr}
 800a0d4:	4906      	ldr	r1, [pc, #24]	@ (800a0f0 <iprintf+0x20>)
 800a0d6:	ab04      	add	r3, sp, #16
 800a0d8:	6808      	ldr	r0, [r1, #0]
 800a0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0de:	6881      	ldr	r1, [r0, #8]
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	f002 fe01 	bl	800cce8 <_vfiprintf_r>
 800a0e6:	b003      	add	sp, #12
 800a0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0ec:	b004      	add	sp, #16
 800a0ee:	4770      	bx	lr
 800a0f0:	20000f5c 	.word	0x20000f5c

0800a0f4 <_puts_r>:
 800a0f4:	6a03      	ldr	r3, [r0, #32]
 800a0f6:	b570      	push	{r4, r5, r6, lr}
 800a0f8:	6884      	ldr	r4, [r0, #8]
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	460e      	mov	r6, r1
 800a0fe:	b90b      	cbnz	r3, 800a104 <_puts_r+0x10>
 800a100:	f7ff ffb0 	bl	800a064 <__sinit>
 800a104:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a106:	07db      	lsls	r3, r3, #31
 800a108:	d405      	bmi.n	800a116 <_puts_r+0x22>
 800a10a:	89a3      	ldrh	r3, [r4, #12]
 800a10c:	0598      	lsls	r0, r3, #22
 800a10e:	d402      	bmi.n	800a116 <_puts_r+0x22>
 800a110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a112:	f000 f9dc 	bl	800a4ce <__retarget_lock_acquire_recursive>
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	0719      	lsls	r1, r3, #28
 800a11a:	d502      	bpl.n	800a122 <_puts_r+0x2e>
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d135      	bne.n	800a18e <_puts_r+0x9a>
 800a122:	4621      	mov	r1, r4
 800a124:	4628      	mov	r0, r5
 800a126:	f000 f8e5 	bl	800a2f4 <__swsetup_r>
 800a12a:	b380      	cbz	r0, 800a18e <_puts_r+0x9a>
 800a12c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a132:	07da      	lsls	r2, r3, #31
 800a134:	d405      	bmi.n	800a142 <_puts_r+0x4e>
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	059b      	lsls	r3, r3, #22
 800a13a:	d402      	bmi.n	800a142 <_puts_r+0x4e>
 800a13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a13e:	f000 f9c7 	bl	800a4d0 <__retarget_lock_release_recursive>
 800a142:	4628      	mov	r0, r5
 800a144:	bd70      	pop	{r4, r5, r6, pc}
 800a146:	2b00      	cmp	r3, #0
 800a148:	da04      	bge.n	800a154 <_puts_r+0x60>
 800a14a:	69a2      	ldr	r2, [r4, #24]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	dc17      	bgt.n	800a180 <_puts_r+0x8c>
 800a150:	290a      	cmp	r1, #10
 800a152:	d015      	beq.n	800a180 <_puts_r+0x8c>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	6022      	str	r2, [r4, #0]
 800a15a:	7019      	strb	r1, [r3, #0]
 800a15c:	68a3      	ldr	r3, [r4, #8]
 800a15e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a162:	3b01      	subs	r3, #1
 800a164:	60a3      	str	r3, [r4, #8]
 800a166:	2900      	cmp	r1, #0
 800a168:	d1ed      	bne.n	800a146 <_puts_r+0x52>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	da11      	bge.n	800a192 <_puts_r+0x9e>
 800a16e:	4622      	mov	r2, r4
 800a170:	210a      	movs	r1, #10
 800a172:	4628      	mov	r0, r5
 800a174:	f000 f87f 	bl	800a276 <__swbuf_r>
 800a178:	3001      	adds	r0, #1
 800a17a:	d0d7      	beq.n	800a12c <_puts_r+0x38>
 800a17c:	250a      	movs	r5, #10
 800a17e:	e7d7      	b.n	800a130 <_puts_r+0x3c>
 800a180:	4622      	mov	r2, r4
 800a182:	4628      	mov	r0, r5
 800a184:	f000 f877 	bl	800a276 <__swbuf_r>
 800a188:	3001      	adds	r0, #1
 800a18a:	d1e7      	bne.n	800a15c <_puts_r+0x68>
 800a18c:	e7ce      	b.n	800a12c <_puts_r+0x38>
 800a18e:	3e01      	subs	r6, #1
 800a190:	e7e4      	b.n	800a15c <_puts_r+0x68>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	1c5a      	adds	r2, r3, #1
 800a196:	6022      	str	r2, [r4, #0]
 800a198:	220a      	movs	r2, #10
 800a19a:	701a      	strb	r2, [r3, #0]
 800a19c:	e7ee      	b.n	800a17c <_puts_r+0x88>
	...

0800a1a0 <puts>:
 800a1a0:	4b02      	ldr	r3, [pc, #8]	@ (800a1ac <puts+0xc>)
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	6818      	ldr	r0, [r3, #0]
 800a1a6:	f7ff bfa5 	b.w	800a0f4 <_puts_r>
 800a1aa:	bf00      	nop
 800a1ac:	20000f5c 	.word	0x20000f5c

0800a1b0 <siprintf>:
 800a1b0:	b40e      	push	{r1, r2, r3}
 800a1b2:	b500      	push	{lr}
 800a1b4:	b09c      	sub	sp, #112	@ 0x70
 800a1b6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a1b8:	9002      	str	r0, [sp, #8]
 800a1ba:	9006      	str	r0, [sp, #24]
 800a1bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a1c0:	4809      	ldr	r0, [pc, #36]	@ (800a1e8 <siprintf+0x38>)
 800a1c2:	9107      	str	r1, [sp, #28]
 800a1c4:	9104      	str	r1, [sp, #16]
 800a1c6:	4909      	ldr	r1, [pc, #36]	@ (800a1ec <siprintf+0x3c>)
 800a1c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1cc:	9105      	str	r1, [sp, #20]
 800a1ce:	6800      	ldr	r0, [r0, #0]
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	a902      	add	r1, sp, #8
 800a1d4:	f002 fc62 	bl	800ca9c <_svfiprintf_r>
 800a1d8:	9b02      	ldr	r3, [sp, #8]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	701a      	strb	r2, [r3, #0]
 800a1de:	b01c      	add	sp, #112	@ 0x70
 800a1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1e4:	b003      	add	sp, #12
 800a1e6:	4770      	bx	lr
 800a1e8:	20000f5c 	.word	0x20000f5c
 800a1ec:	ffff0208 	.word	0xffff0208

0800a1f0 <__sread>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f8:	f000 f91a 	bl	800a430 <_read_r>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	bfab      	itete	ge
 800a200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a202:	89a3      	ldrhlt	r3, [r4, #12]
 800a204:	181b      	addge	r3, r3, r0
 800a206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a20a:	bfac      	ite	ge
 800a20c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a20e:	81a3      	strhlt	r3, [r4, #12]
 800a210:	bd10      	pop	{r4, pc}

0800a212 <__swrite>:
 800a212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a216:	461f      	mov	r7, r3
 800a218:	898b      	ldrh	r3, [r1, #12]
 800a21a:	05db      	lsls	r3, r3, #23
 800a21c:	4605      	mov	r5, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	4616      	mov	r6, r2
 800a222:	d505      	bpl.n	800a230 <__swrite+0x1e>
 800a224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a228:	2302      	movs	r3, #2
 800a22a:	2200      	movs	r2, #0
 800a22c:	f000 f8ee 	bl	800a40c <_lseek_r>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	4632      	mov	r2, r6
 800a23e:	463b      	mov	r3, r7
 800a240:	4628      	mov	r0, r5
 800a242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a246:	f000 b905 	b.w	800a454 <_write_r>

0800a24a <__sseek>:
 800a24a:	b510      	push	{r4, lr}
 800a24c:	460c      	mov	r4, r1
 800a24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a252:	f000 f8db 	bl	800a40c <_lseek_r>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	bf15      	itete	ne
 800a25c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a25e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a266:	81a3      	strheq	r3, [r4, #12]
 800a268:	bf18      	it	ne
 800a26a:	81a3      	strhne	r3, [r4, #12]
 800a26c:	bd10      	pop	{r4, pc}

0800a26e <__sclose>:
 800a26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a272:	f000 b8bb 	b.w	800a3ec <_close_r>

0800a276 <__swbuf_r>:
 800a276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a278:	460e      	mov	r6, r1
 800a27a:	4614      	mov	r4, r2
 800a27c:	4605      	mov	r5, r0
 800a27e:	b118      	cbz	r0, 800a288 <__swbuf_r+0x12>
 800a280:	6a03      	ldr	r3, [r0, #32]
 800a282:	b90b      	cbnz	r3, 800a288 <__swbuf_r+0x12>
 800a284:	f7ff feee 	bl	800a064 <__sinit>
 800a288:	69a3      	ldr	r3, [r4, #24]
 800a28a:	60a3      	str	r3, [r4, #8]
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	071a      	lsls	r2, r3, #28
 800a290:	d501      	bpl.n	800a296 <__swbuf_r+0x20>
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	b943      	cbnz	r3, 800a2a8 <__swbuf_r+0x32>
 800a296:	4621      	mov	r1, r4
 800a298:	4628      	mov	r0, r5
 800a29a:	f000 f82b 	bl	800a2f4 <__swsetup_r>
 800a29e:	b118      	cbz	r0, 800a2a8 <__swbuf_r+0x32>
 800a2a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	6922      	ldr	r2, [r4, #16]
 800a2ac:	1a98      	subs	r0, r3, r2
 800a2ae:	6963      	ldr	r3, [r4, #20]
 800a2b0:	b2f6      	uxtb	r6, r6
 800a2b2:	4283      	cmp	r3, r0
 800a2b4:	4637      	mov	r7, r6
 800a2b6:	dc05      	bgt.n	800a2c4 <__swbuf_r+0x4e>
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f002 feb0 	bl	800d020 <_fflush_r>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d1ed      	bne.n	800a2a0 <__swbuf_r+0x2a>
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	60a3      	str	r3, [r4, #8]
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	701e      	strb	r6, [r3, #0]
 800a2d2:	6962      	ldr	r2, [r4, #20]
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d004      	beq.n	800a2e4 <__swbuf_r+0x6e>
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	07db      	lsls	r3, r3, #31
 800a2de:	d5e1      	bpl.n	800a2a4 <__swbuf_r+0x2e>
 800a2e0:	2e0a      	cmp	r6, #10
 800a2e2:	d1df      	bne.n	800a2a4 <__swbuf_r+0x2e>
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f002 fe9a 	bl	800d020 <_fflush_r>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d0d9      	beq.n	800a2a4 <__swbuf_r+0x2e>
 800a2f0:	e7d6      	b.n	800a2a0 <__swbuf_r+0x2a>
	...

0800a2f4 <__swsetup_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4b29      	ldr	r3, [pc, #164]	@ (800a39c <__swsetup_r+0xa8>)
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	6818      	ldr	r0, [r3, #0]
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	b118      	cbz	r0, 800a308 <__swsetup_r+0x14>
 800a300:	6a03      	ldr	r3, [r0, #32]
 800a302:	b90b      	cbnz	r3, 800a308 <__swsetup_r+0x14>
 800a304:	f7ff feae 	bl	800a064 <__sinit>
 800a308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a30c:	0719      	lsls	r1, r3, #28
 800a30e:	d422      	bmi.n	800a356 <__swsetup_r+0x62>
 800a310:	06da      	lsls	r2, r3, #27
 800a312:	d407      	bmi.n	800a324 <__swsetup_r+0x30>
 800a314:	2209      	movs	r2, #9
 800a316:	602a      	str	r2, [r5, #0]
 800a318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a31c:	81a3      	strh	r3, [r4, #12]
 800a31e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a322:	e033      	b.n	800a38c <__swsetup_r+0x98>
 800a324:	0758      	lsls	r0, r3, #29
 800a326:	d512      	bpl.n	800a34e <__swsetup_r+0x5a>
 800a328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a32a:	b141      	cbz	r1, 800a33e <__swsetup_r+0x4a>
 800a32c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a330:	4299      	cmp	r1, r3
 800a332:	d002      	beq.n	800a33a <__swsetup_r+0x46>
 800a334:	4628      	mov	r0, r5
 800a336:	f000 ff1f 	bl	800b178 <_free_r>
 800a33a:	2300      	movs	r3, #0
 800a33c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	2300      	movs	r3, #0
 800a348:	6063      	str	r3, [r4, #4]
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	f043 0308 	orr.w	r3, r3, #8
 800a354:	81a3      	strh	r3, [r4, #12]
 800a356:	6923      	ldr	r3, [r4, #16]
 800a358:	b94b      	cbnz	r3, 800a36e <__swsetup_r+0x7a>
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a364:	d003      	beq.n	800a36e <__swsetup_r+0x7a>
 800a366:	4621      	mov	r1, r4
 800a368:	4628      	mov	r0, r5
 800a36a:	f002 fea7 	bl	800d0bc <__smakebuf_r>
 800a36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a372:	f013 0201 	ands.w	r2, r3, #1
 800a376:	d00a      	beq.n	800a38e <__swsetup_r+0x9a>
 800a378:	2200      	movs	r2, #0
 800a37a:	60a2      	str	r2, [r4, #8]
 800a37c:	6962      	ldr	r2, [r4, #20]
 800a37e:	4252      	negs	r2, r2
 800a380:	61a2      	str	r2, [r4, #24]
 800a382:	6922      	ldr	r2, [r4, #16]
 800a384:	b942      	cbnz	r2, 800a398 <__swsetup_r+0xa4>
 800a386:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a38a:	d1c5      	bne.n	800a318 <__swsetup_r+0x24>
 800a38c:	bd38      	pop	{r3, r4, r5, pc}
 800a38e:	0799      	lsls	r1, r3, #30
 800a390:	bf58      	it	pl
 800a392:	6962      	ldrpl	r2, [r4, #20]
 800a394:	60a2      	str	r2, [r4, #8]
 800a396:	e7f4      	b.n	800a382 <__swsetup_r+0x8e>
 800a398:	2000      	movs	r0, #0
 800a39a:	e7f7      	b.n	800a38c <__swsetup_r+0x98>
 800a39c:	20000f5c 	.word	0x20000f5c

0800a3a0 <memmove>:
 800a3a0:	4288      	cmp	r0, r1
 800a3a2:	b510      	push	{r4, lr}
 800a3a4:	eb01 0402 	add.w	r4, r1, r2
 800a3a8:	d902      	bls.n	800a3b0 <memmove+0x10>
 800a3aa:	4284      	cmp	r4, r0
 800a3ac:	4623      	mov	r3, r4
 800a3ae:	d807      	bhi.n	800a3c0 <memmove+0x20>
 800a3b0:	1e43      	subs	r3, r0, #1
 800a3b2:	42a1      	cmp	r1, r4
 800a3b4:	d008      	beq.n	800a3c8 <memmove+0x28>
 800a3b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3be:	e7f8      	b.n	800a3b2 <memmove+0x12>
 800a3c0:	4402      	add	r2, r0
 800a3c2:	4601      	mov	r1, r0
 800a3c4:	428a      	cmp	r2, r1
 800a3c6:	d100      	bne.n	800a3ca <memmove+0x2a>
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3d2:	e7f7      	b.n	800a3c4 <memmove+0x24>

0800a3d4 <memset>:
 800a3d4:	4402      	add	r2, r0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d100      	bne.n	800a3de <memset+0xa>
 800a3dc:	4770      	bx	lr
 800a3de:	f803 1b01 	strb.w	r1, [r3], #1
 800a3e2:	e7f9      	b.n	800a3d8 <memset+0x4>

0800a3e4 <_localeconv_r>:
 800a3e4:	4800      	ldr	r0, [pc, #0]	@ (800a3e8 <_localeconv_r+0x4>)
 800a3e6:	4770      	bx	lr
 800a3e8:	2000109c 	.word	0x2000109c

0800a3ec <_close_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	4d06      	ldr	r5, [pc, #24]	@ (800a408 <_close_r+0x1c>)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	602b      	str	r3, [r5, #0]
 800a3f8:	f7f7 f9b2 	bl	8001760 <_close>
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	d102      	bne.n	800a406 <_close_r+0x1a>
 800a400:	682b      	ldr	r3, [r5, #0]
 800a402:	b103      	cbz	r3, 800a406 <_close_r+0x1a>
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	bd38      	pop	{r3, r4, r5, pc}
 800a408:	20001984 	.word	0x20001984

0800a40c <_lseek_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4d07      	ldr	r5, [pc, #28]	@ (800a42c <_lseek_r+0x20>)
 800a410:	4604      	mov	r4, r0
 800a412:	4608      	mov	r0, r1
 800a414:	4611      	mov	r1, r2
 800a416:	2200      	movs	r2, #0
 800a418:	602a      	str	r2, [r5, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	f7f7 f9c7 	bl	80017ae <_lseek>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d102      	bne.n	800a42a <_lseek_r+0x1e>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	b103      	cbz	r3, 800a42a <_lseek_r+0x1e>
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	20001984 	.word	0x20001984

0800a430 <_read_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4d07      	ldr	r5, [pc, #28]	@ (800a450 <_read_r+0x20>)
 800a434:	4604      	mov	r4, r0
 800a436:	4608      	mov	r0, r1
 800a438:	4611      	mov	r1, r2
 800a43a:	2200      	movs	r2, #0
 800a43c:	602a      	str	r2, [r5, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	f7f7 f955 	bl	80016ee <_read>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d102      	bne.n	800a44e <_read_r+0x1e>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	b103      	cbz	r3, 800a44e <_read_r+0x1e>
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	20001984 	.word	0x20001984

0800a454 <_write_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d07      	ldr	r5, [pc, #28]	@ (800a474 <_write_r+0x20>)
 800a458:	4604      	mov	r4, r0
 800a45a:	4608      	mov	r0, r1
 800a45c:	4611      	mov	r1, r2
 800a45e:	2200      	movs	r2, #0
 800a460:	602a      	str	r2, [r5, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	f7f7 f960 	bl	8001728 <_write>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_write_r+0x1e>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_write_r+0x1e>
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	20001984 	.word	0x20001984

0800a478 <__errno>:
 800a478:	4b01      	ldr	r3, [pc, #4]	@ (800a480 <__errno+0x8>)
 800a47a:	6818      	ldr	r0, [r3, #0]
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	20000f5c 	.word	0x20000f5c

0800a484 <__libc_init_array>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	4d0d      	ldr	r5, [pc, #52]	@ (800a4bc <__libc_init_array+0x38>)
 800a488:	4c0d      	ldr	r4, [pc, #52]	@ (800a4c0 <__libc_init_array+0x3c>)
 800a48a:	1b64      	subs	r4, r4, r5
 800a48c:	10a4      	asrs	r4, r4, #2
 800a48e:	2600      	movs	r6, #0
 800a490:	42a6      	cmp	r6, r4
 800a492:	d109      	bne.n	800a4a8 <__libc_init_array+0x24>
 800a494:	4d0b      	ldr	r5, [pc, #44]	@ (800a4c4 <__libc_init_array+0x40>)
 800a496:	4c0c      	ldr	r4, [pc, #48]	@ (800a4c8 <__libc_init_array+0x44>)
 800a498:	f003 fc66 	bl	800dd68 <_init>
 800a49c:	1b64      	subs	r4, r4, r5
 800a49e:	10a4      	asrs	r4, r4, #2
 800a4a0:	2600      	movs	r6, #0
 800a4a2:	42a6      	cmp	r6, r4
 800a4a4:	d105      	bne.n	800a4b2 <__libc_init_array+0x2e>
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ac:	4798      	blx	r3
 800a4ae:	3601      	adds	r6, #1
 800a4b0:	e7ee      	b.n	800a490 <__libc_init_array+0xc>
 800a4b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b6:	4798      	blx	r3
 800a4b8:	3601      	adds	r6, #1
 800a4ba:	e7f2      	b.n	800a4a2 <__libc_init_array+0x1e>
 800a4bc:	0800e510 	.word	0x0800e510
 800a4c0:	0800e510 	.word	0x0800e510
 800a4c4:	0800e510 	.word	0x0800e510
 800a4c8:	0800e514 	.word	0x0800e514

0800a4cc <__retarget_lock_init_recursive>:
 800a4cc:	4770      	bx	lr

0800a4ce <__retarget_lock_acquire_recursive>:
 800a4ce:	4770      	bx	lr

0800a4d0 <__retarget_lock_release_recursive>:
 800a4d0:	4770      	bx	lr
	...

0800a4d4 <nanf>:
 800a4d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a4dc <nanf+0x8>
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	7fc00000 	.word	0x7fc00000

0800a4e0 <quorem>:
 800a4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	6903      	ldr	r3, [r0, #16]
 800a4e6:	690c      	ldr	r4, [r1, #16]
 800a4e8:	42a3      	cmp	r3, r4
 800a4ea:	4607      	mov	r7, r0
 800a4ec:	db7e      	blt.n	800a5ec <quorem+0x10c>
 800a4ee:	3c01      	subs	r4, #1
 800a4f0:	f101 0814 	add.w	r8, r1, #20
 800a4f4:	00a3      	lsls	r3, r4, #2
 800a4f6:	f100 0514 	add.w	r5, r0, #20
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a50a:	3301      	adds	r3, #1
 800a50c:	429a      	cmp	r2, r3
 800a50e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a512:	fbb2 f6f3 	udiv	r6, r2, r3
 800a516:	d32e      	bcc.n	800a576 <quorem+0x96>
 800a518:	f04f 0a00 	mov.w	sl, #0
 800a51c:	46c4      	mov	ip, r8
 800a51e:	46ae      	mov	lr, r5
 800a520:	46d3      	mov	fp, sl
 800a522:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a526:	b298      	uxth	r0, r3
 800a528:	fb06 a000 	mla	r0, r6, r0, sl
 800a52c:	0c02      	lsrs	r2, r0, #16
 800a52e:	0c1b      	lsrs	r3, r3, #16
 800a530:	fb06 2303 	mla	r3, r6, r3, r2
 800a534:	f8de 2000 	ldr.w	r2, [lr]
 800a538:	b280      	uxth	r0, r0
 800a53a:	b292      	uxth	r2, r2
 800a53c:	1a12      	subs	r2, r2, r0
 800a53e:	445a      	add	r2, fp
 800a540:	f8de 0000 	ldr.w	r0, [lr]
 800a544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a548:	b29b      	uxth	r3, r3
 800a54a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a54e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a552:	b292      	uxth	r2, r2
 800a554:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a558:	45e1      	cmp	r9, ip
 800a55a:	f84e 2b04 	str.w	r2, [lr], #4
 800a55e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a562:	d2de      	bcs.n	800a522 <quorem+0x42>
 800a564:	9b00      	ldr	r3, [sp, #0]
 800a566:	58eb      	ldr	r3, [r5, r3]
 800a568:	b92b      	cbnz	r3, 800a576 <quorem+0x96>
 800a56a:	9b01      	ldr	r3, [sp, #4]
 800a56c:	3b04      	subs	r3, #4
 800a56e:	429d      	cmp	r5, r3
 800a570:	461a      	mov	r2, r3
 800a572:	d32f      	bcc.n	800a5d4 <quorem+0xf4>
 800a574:	613c      	str	r4, [r7, #16]
 800a576:	4638      	mov	r0, r7
 800a578:	f001 f9c2 	bl	800b900 <__mcmp>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	db25      	blt.n	800a5cc <quorem+0xec>
 800a580:	4629      	mov	r1, r5
 800a582:	2000      	movs	r0, #0
 800a584:	f858 2b04 	ldr.w	r2, [r8], #4
 800a588:	f8d1 c000 	ldr.w	ip, [r1]
 800a58c:	fa1f fe82 	uxth.w	lr, r2
 800a590:	fa1f f38c 	uxth.w	r3, ip
 800a594:	eba3 030e 	sub.w	r3, r3, lr
 800a598:	4403      	add	r3, r0
 800a59a:	0c12      	lsrs	r2, r2, #16
 800a59c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a5a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5aa:	45c1      	cmp	r9, r8
 800a5ac:	f841 3b04 	str.w	r3, [r1], #4
 800a5b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a5b4:	d2e6      	bcs.n	800a584 <quorem+0xa4>
 800a5b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5be:	b922      	cbnz	r2, 800a5ca <quorem+0xea>
 800a5c0:	3b04      	subs	r3, #4
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	d30b      	bcc.n	800a5e0 <quorem+0x100>
 800a5c8:	613c      	str	r4, [r7, #16]
 800a5ca:	3601      	adds	r6, #1
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	b003      	add	sp, #12
 800a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d4:	6812      	ldr	r2, [r2, #0]
 800a5d6:	3b04      	subs	r3, #4
 800a5d8:	2a00      	cmp	r2, #0
 800a5da:	d1cb      	bne.n	800a574 <quorem+0x94>
 800a5dc:	3c01      	subs	r4, #1
 800a5de:	e7c6      	b.n	800a56e <quorem+0x8e>
 800a5e0:	6812      	ldr	r2, [r2, #0]
 800a5e2:	3b04      	subs	r3, #4
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	d1ef      	bne.n	800a5c8 <quorem+0xe8>
 800a5e8:	3c01      	subs	r4, #1
 800a5ea:	e7ea      	b.n	800a5c2 <quorem+0xe2>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	e7ee      	b.n	800a5ce <quorem+0xee>

0800a5f0 <_dtoa_r>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	69c7      	ldr	r7, [r0, #28]
 800a5f6:	b099      	sub	sp, #100	@ 0x64
 800a5f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a5fc:	ec55 4b10 	vmov	r4, r5, d0
 800a600:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a602:	9109      	str	r1, [sp, #36]	@ 0x24
 800a604:	4683      	mov	fp, r0
 800a606:	920e      	str	r2, [sp, #56]	@ 0x38
 800a608:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a60a:	b97f      	cbnz	r7, 800a62c <_dtoa_r+0x3c>
 800a60c:	2010      	movs	r0, #16
 800a60e:	f000 fdfd 	bl	800b20c <malloc>
 800a612:	4602      	mov	r2, r0
 800a614:	f8cb 001c 	str.w	r0, [fp, #28]
 800a618:	b920      	cbnz	r0, 800a624 <_dtoa_r+0x34>
 800a61a:	4ba7      	ldr	r3, [pc, #668]	@ (800a8b8 <_dtoa_r+0x2c8>)
 800a61c:	21ef      	movs	r1, #239	@ 0xef
 800a61e:	48a7      	ldr	r0, [pc, #668]	@ (800a8bc <_dtoa_r+0x2cc>)
 800a620:	f002 fde2 	bl	800d1e8 <__assert_func>
 800a624:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a628:	6007      	str	r7, [r0, #0]
 800a62a:	60c7      	str	r7, [r0, #12]
 800a62c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a630:	6819      	ldr	r1, [r3, #0]
 800a632:	b159      	cbz	r1, 800a64c <_dtoa_r+0x5c>
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	604a      	str	r2, [r1, #4]
 800a638:	2301      	movs	r3, #1
 800a63a:	4093      	lsls	r3, r2
 800a63c:	608b      	str	r3, [r1, #8]
 800a63e:	4658      	mov	r0, fp
 800a640:	f000 feda 	bl	800b3f8 <_Bfree>
 800a644:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a648:	2200      	movs	r2, #0
 800a64a:	601a      	str	r2, [r3, #0]
 800a64c:	1e2b      	subs	r3, r5, #0
 800a64e:	bfb9      	ittee	lt
 800a650:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a654:	9303      	strlt	r3, [sp, #12]
 800a656:	2300      	movge	r3, #0
 800a658:	6033      	strge	r3, [r6, #0]
 800a65a:	9f03      	ldr	r7, [sp, #12]
 800a65c:	4b98      	ldr	r3, [pc, #608]	@ (800a8c0 <_dtoa_r+0x2d0>)
 800a65e:	bfbc      	itt	lt
 800a660:	2201      	movlt	r2, #1
 800a662:	6032      	strlt	r2, [r6, #0]
 800a664:	43bb      	bics	r3, r7
 800a666:	d112      	bne.n	800a68e <_dtoa_r+0x9e>
 800a668:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a66a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a674:	4323      	orrs	r3, r4
 800a676:	f000 854d 	beq.w	800b114 <_dtoa_r+0xb24>
 800a67a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a67c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a8d4 <_dtoa_r+0x2e4>
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 854f 	beq.w	800b124 <_dtoa_r+0xb34>
 800a686:	f10a 0303 	add.w	r3, sl, #3
 800a68a:	f000 bd49 	b.w	800b120 <_dtoa_r+0xb30>
 800a68e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a692:	2200      	movs	r2, #0
 800a694:	ec51 0b17 	vmov	r0, r1, d7
 800a698:	2300      	movs	r3, #0
 800a69a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a69e:	f7f6 fa3b 	bl	8000b18 <__aeabi_dcmpeq>
 800a6a2:	4680      	mov	r8, r0
 800a6a4:	b158      	cbz	r0, 800a6be <_dtoa_r+0xce>
 800a6a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6ae:	b113      	cbz	r3, 800a6b6 <_dtoa_r+0xc6>
 800a6b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a6b2:	4b84      	ldr	r3, [pc, #528]	@ (800a8c4 <_dtoa_r+0x2d4>)
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a8d8 <_dtoa_r+0x2e8>
 800a6ba:	f000 bd33 	b.w	800b124 <_dtoa_r+0xb34>
 800a6be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a6c2:	aa16      	add	r2, sp, #88	@ 0x58
 800a6c4:	a917      	add	r1, sp, #92	@ 0x5c
 800a6c6:	4658      	mov	r0, fp
 800a6c8:	f001 fa3a 	bl	800bb40 <__d2b>
 800a6cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a6d0:	4681      	mov	r9, r0
 800a6d2:	2e00      	cmp	r6, #0
 800a6d4:	d077      	beq.n	800a7c6 <_dtoa_r+0x1d6>
 800a6d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a6dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a6e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a6ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4b74      	ldr	r3, [pc, #464]	@ (800a8c8 <_dtoa_r+0x2d8>)
 800a6f6:	f7f5 fdef 	bl	80002d8 <__aeabi_dsub>
 800a6fa:	a369      	add	r3, pc, #420	@ (adr r3, 800a8a0 <_dtoa_r+0x2b0>)
 800a6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a700:	f7f5 ffa2 	bl	8000648 <__aeabi_dmul>
 800a704:	a368      	add	r3, pc, #416	@ (adr r3, 800a8a8 <_dtoa_r+0x2b8>)
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	f7f5 fde7 	bl	80002dc <__adddf3>
 800a70e:	4604      	mov	r4, r0
 800a710:	4630      	mov	r0, r6
 800a712:	460d      	mov	r5, r1
 800a714:	f7f5 ff2e 	bl	8000574 <__aeabi_i2d>
 800a718:	a365      	add	r3, pc, #404	@ (adr r3, 800a8b0 <_dtoa_r+0x2c0>)
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	f7f5 ff93 	bl	8000648 <__aeabi_dmul>
 800a722:	4602      	mov	r2, r0
 800a724:	460b      	mov	r3, r1
 800a726:	4620      	mov	r0, r4
 800a728:	4629      	mov	r1, r5
 800a72a:	f7f5 fdd7 	bl	80002dc <__adddf3>
 800a72e:	4604      	mov	r4, r0
 800a730:	460d      	mov	r5, r1
 800a732:	f7f6 fa39 	bl	8000ba8 <__aeabi_d2iz>
 800a736:	2200      	movs	r2, #0
 800a738:	4607      	mov	r7, r0
 800a73a:	2300      	movs	r3, #0
 800a73c:	4620      	mov	r0, r4
 800a73e:	4629      	mov	r1, r5
 800a740:	f7f6 f9f4 	bl	8000b2c <__aeabi_dcmplt>
 800a744:	b140      	cbz	r0, 800a758 <_dtoa_r+0x168>
 800a746:	4638      	mov	r0, r7
 800a748:	f7f5 ff14 	bl	8000574 <__aeabi_i2d>
 800a74c:	4622      	mov	r2, r4
 800a74e:	462b      	mov	r3, r5
 800a750:	f7f6 f9e2 	bl	8000b18 <__aeabi_dcmpeq>
 800a754:	b900      	cbnz	r0, 800a758 <_dtoa_r+0x168>
 800a756:	3f01      	subs	r7, #1
 800a758:	2f16      	cmp	r7, #22
 800a75a:	d851      	bhi.n	800a800 <_dtoa_r+0x210>
 800a75c:	4b5b      	ldr	r3, [pc, #364]	@ (800a8cc <_dtoa_r+0x2dc>)
 800a75e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a76a:	f7f6 f9df 	bl	8000b2c <__aeabi_dcmplt>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d048      	beq.n	800a804 <_dtoa_r+0x214>
 800a772:	3f01      	subs	r7, #1
 800a774:	2300      	movs	r3, #0
 800a776:	9312      	str	r3, [sp, #72]	@ 0x48
 800a778:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a77a:	1b9b      	subs	r3, r3, r6
 800a77c:	1e5a      	subs	r2, r3, #1
 800a77e:	bf44      	itt	mi
 800a780:	f1c3 0801 	rsbmi	r8, r3, #1
 800a784:	2300      	movmi	r3, #0
 800a786:	9208      	str	r2, [sp, #32]
 800a788:	bf54      	ite	pl
 800a78a:	f04f 0800 	movpl.w	r8, #0
 800a78e:	9308      	strmi	r3, [sp, #32]
 800a790:	2f00      	cmp	r7, #0
 800a792:	db39      	blt.n	800a808 <_dtoa_r+0x218>
 800a794:	9b08      	ldr	r3, [sp, #32]
 800a796:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a798:	443b      	add	r3, r7
 800a79a:	9308      	str	r3, [sp, #32]
 800a79c:	2300      	movs	r3, #0
 800a79e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7a2:	2b09      	cmp	r3, #9
 800a7a4:	d864      	bhi.n	800a870 <_dtoa_r+0x280>
 800a7a6:	2b05      	cmp	r3, #5
 800a7a8:	bfc4      	itt	gt
 800a7aa:	3b04      	subgt	r3, #4
 800a7ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7b0:	f1a3 0302 	sub.w	r3, r3, #2
 800a7b4:	bfcc      	ite	gt
 800a7b6:	2400      	movgt	r4, #0
 800a7b8:	2401      	movle	r4, #1
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d863      	bhi.n	800a886 <_dtoa_r+0x296>
 800a7be:	e8df f003 	tbb	[pc, r3]
 800a7c2:	372a      	.short	0x372a
 800a7c4:	5535      	.short	0x5535
 800a7c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a7ca:	441e      	add	r6, r3
 800a7cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a7d0:	2b20      	cmp	r3, #32
 800a7d2:	bfc1      	itttt	gt
 800a7d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a7d8:	409f      	lslgt	r7, r3
 800a7da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a7de:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a7e2:	bfd6      	itet	le
 800a7e4:	f1c3 0320 	rsble	r3, r3, #32
 800a7e8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a7ec:	fa04 f003 	lslle.w	r0, r4, r3
 800a7f0:	f7f5 feb0 	bl	8000554 <__aeabi_ui2d>
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a7fa:	3e01      	subs	r6, #1
 800a7fc:	9214      	str	r2, [sp, #80]	@ 0x50
 800a7fe:	e777      	b.n	800a6f0 <_dtoa_r+0x100>
 800a800:	2301      	movs	r3, #1
 800a802:	e7b8      	b.n	800a776 <_dtoa_r+0x186>
 800a804:	9012      	str	r0, [sp, #72]	@ 0x48
 800a806:	e7b7      	b.n	800a778 <_dtoa_r+0x188>
 800a808:	427b      	negs	r3, r7
 800a80a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a80c:	2300      	movs	r3, #0
 800a80e:	eba8 0807 	sub.w	r8, r8, r7
 800a812:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a814:	e7c4      	b.n	800a7a0 <_dtoa_r+0x1b0>
 800a816:	2300      	movs	r3, #0
 800a818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a81a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dc35      	bgt.n	800a88c <_dtoa_r+0x29c>
 800a820:	2301      	movs	r3, #1
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	9307      	str	r3, [sp, #28]
 800a826:	461a      	mov	r2, r3
 800a828:	920e      	str	r2, [sp, #56]	@ 0x38
 800a82a:	e00b      	b.n	800a844 <_dtoa_r+0x254>
 800a82c:	2301      	movs	r3, #1
 800a82e:	e7f3      	b.n	800a818 <_dtoa_r+0x228>
 800a830:	2300      	movs	r3, #0
 800a832:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a834:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a836:	18fb      	adds	r3, r7, r3
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	3301      	adds	r3, #1
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	9307      	str	r3, [sp, #28]
 800a840:	bfb8      	it	lt
 800a842:	2301      	movlt	r3, #1
 800a844:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a848:	2100      	movs	r1, #0
 800a84a:	2204      	movs	r2, #4
 800a84c:	f102 0514 	add.w	r5, r2, #20
 800a850:	429d      	cmp	r5, r3
 800a852:	d91f      	bls.n	800a894 <_dtoa_r+0x2a4>
 800a854:	6041      	str	r1, [r0, #4]
 800a856:	4658      	mov	r0, fp
 800a858:	f000 fd8e 	bl	800b378 <_Balloc>
 800a85c:	4682      	mov	sl, r0
 800a85e:	2800      	cmp	r0, #0
 800a860:	d13c      	bne.n	800a8dc <_dtoa_r+0x2ec>
 800a862:	4b1b      	ldr	r3, [pc, #108]	@ (800a8d0 <_dtoa_r+0x2e0>)
 800a864:	4602      	mov	r2, r0
 800a866:	f240 11af 	movw	r1, #431	@ 0x1af
 800a86a:	e6d8      	b.n	800a61e <_dtoa_r+0x2e>
 800a86c:	2301      	movs	r3, #1
 800a86e:	e7e0      	b.n	800a832 <_dtoa_r+0x242>
 800a870:	2401      	movs	r4, #1
 800a872:	2300      	movs	r3, #0
 800a874:	9309      	str	r3, [sp, #36]	@ 0x24
 800a876:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a878:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	9307      	str	r3, [sp, #28]
 800a880:	2200      	movs	r2, #0
 800a882:	2312      	movs	r3, #18
 800a884:	e7d0      	b.n	800a828 <_dtoa_r+0x238>
 800a886:	2301      	movs	r3, #1
 800a888:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a88a:	e7f5      	b.n	800a878 <_dtoa_r+0x288>
 800a88c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	9307      	str	r3, [sp, #28]
 800a892:	e7d7      	b.n	800a844 <_dtoa_r+0x254>
 800a894:	3101      	adds	r1, #1
 800a896:	0052      	lsls	r2, r2, #1
 800a898:	e7d8      	b.n	800a84c <_dtoa_r+0x25c>
 800a89a:	bf00      	nop
 800a89c:	f3af 8000 	nop.w
 800a8a0:	636f4361 	.word	0x636f4361
 800a8a4:	3fd287a7 	.word	0x3fd287a7
 800a8a8:	8b60c8b3 	.word	0x8b60c8b3
 800a8ac:	3fc68a28 	.word	0x3fc68a28
 800a8b0:	509f79fb 	.word	0x509f79fb
 800a8b4:	3fd34413 	.word	0x3fd34413
 800a8b8:	0800e0e2 	.word	0x0800e0e2
 800a8bc:	0800e0f9 	.word	0x0800e0f9
 800a8c0:	7ff00000 	.word	0x7ff00000
 800a8c4:	0800e0ad 	.word	0x0800e0ad
 800a8c8:	3ff80000 	.word	0x3ff80000
 800a8cc:	0800e1f0 	.word	0x0800e1f0
 800a8d0:	0800e151 	.word	0x0800e151
 800a8d4:	0800e0de 	.word	0x0800e0de
 800a8d8:	0800e0ac 	.word	0x0800e0ac
 800a8dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8e0:	6018      	str	r0, [r3, #0]
 800a8e2:	9b07      	ldr	r3, [sp, #28]
 800a8e4:	2b0e      	cmp	r3, #14
 800a8e6:	f200 80a4 	bhi.w	800aa32 <_dtoa_r+0x442>
 800a8ea:	2c00      	cmp	r4, #0
 800a8ec:	f000 80a1 	beq.w	800aa32 <_dtoa_r+0x442>
 800a8f0:	2f00      	cmp	r7, #0
 800a8f2:	dd33      	ble.n	800a95c <_dtoa_r+0x36c>
 800a8f4:	4bad      	ldr	r3, [pc, #692]	@ (800abac <_dtoa_r+0x5bc>)
 800a8f6:	f007 020f 	and.w	r2, r7, #15
 800a8fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8fe:	ed93 7b00 	vldr	d7, [r3]
 800a902:	05f8      	lsls	r0, r7, #23
 800a904:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a908:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a90c:	d516      	bpl.n	800a93c <_dtoa_r+0x34c>
 800a90e:	4ba8      	ldr	r3, [pc, #672]	@ (800abb0 <_dtoa_r+0x5c0>)
 800a910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a918:	f7f5 ffc0 	bl	800089c <__aeabi_ddiv>
 800a91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a920:	f004 040f 	and.w	r4, r4, #15
 800a924:	2603      	movs	r6, #3
 800a926:	4da2      	ldr	r5, [pc, #648]	@ (800abb0 <_dtoa_r+0x5c0>)
 800a928:	b954      	cbnz	r4, 800a940 <_dtoa_r+0x350>
 800a92a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a92e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a932:	f7f5 ffb3 	bl	800089c <__aeabi_ddiv>
 800a936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a93a:	e028      	b.n	800a98e <_dtoa_r+0x39e>
 800a93c:	2602      	movs	r6, #2
 800a93e:	e7f2      	b.n	800a926 <_dtoa_r+0x336>
 800a940:	07e1      	lsls	r1, r4, #31
 800a942:	d508      	bpl.n	800a956 <_dtoa_r+0x366>
 800a944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a948:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a94c:	f7f5 fe7c 	bl	8000648 <__aeabi_dmul>
 800a950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a954:	3601      	adds	r6, #1
 800a956:	1064      	asrs	r4, r4, #1
 800a958:	3508      	adds	r5, #8
 800a95a:	e7e5      	b.n	800a928 <_dtoa_r+0x338>
 800a95c:	f000 80d2 	beq.w	800ab04 <_dtoa_r+0x514>
 800a960:	427c      	negs	r4, r7
 800a962:	4b92      	ldr	r3, [pc, #584]	@ (800abac <_dtoa_r+0x5bc>)
 800a964:	4d92      	ldr	r5, [pc, #584]	@ (800abb0 <_dtoa_r+0x5c0>)
 800a966:	f004 020f 	and.w	r2, r4, #15
 800a96a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a976:	f7f5 fe67 	bl	8000648 <__aeabi_dmul>
 800a97a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a97e:	1124      	asrs	r4, r4, #4
 800a980:	2300      	movs	r3, #0
 800a982:	2602      	movs	r6, #2
 800a984:	2c00      	cmp	r4, #0
 800a986:	f040 80b2 	bne.w	800aaee <_dtoa_r+0x4fe>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1d3      	bne.n	800a936 <_dtoa_r+0x346>
 800a98e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a990:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 80b7 	beq.w	800ab08 <_dtoa_r+0x518>
 800a99a:	4b86      	ldr	r3, [pc, #536]	@ (800abb4 <_dtoa_r+0x5c4>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	4620      	mov	r0, r4
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	f7f6 f8c3 	bl	8000b2c <__aeabi_dcmplt>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	f000 80ae 	beq.w	800ab08 <_dtoa_r+0x518>
 800a9ac:	9b07      	ldr	r3, [sp, #28]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f000 80aa 	beq.w	800ab08 <_dtoa_r+0x518>
 800a9b4:	9b00      	ldr	r3, [sp, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	dd37      	ble.n	800aa2a <_dtoa_r+0x43a>
 800a9ba:	1e7b      	subs	r3, r7, #1
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	4b7d      	ldr	r3, [pc, #500]	@ (800abb8 <_dtoa_r+0x5c8>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	f7f5 fe3f 	bl	8000648 <__aeabi_dmul>
 800a9ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ce:	9c00      	ldr	r4, [sp, #0]
 800a9d0:	3601      	adds	r6, #1
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7f5 fdce 	bl	8000574 <__aeabi_i2d>
 800a9d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9dc:	f7f5 fe34 	bl	8000648 <__aeabi_dmul>
 800a9e0:	4b76      	ldr	r3, [pc, #472]	@ (800abbc <_dtoa_r+0x5cc>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f7f5 fc7a 	bl	80002dc <__adddf3>
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a9ee:	2c00      	cmp	r4, #0
 800a9f0:	f040 808d 	bne.w	800ab0e <_dtoa_r+0x51e>
 800a9f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9f8:	4b71      	ldr	r3, [pc, #452]	@ (800abc0 <_dtoa_r+0x5d0>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f7f5 fc6c 	bl	80002d8 <__aeabi_dsub>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa08:	462a      	mov	r2, r5
 800aa0a:	4633      	mov	r3, r6
 800aa0c:	f7f6 f8ac 	bl	8000b68 <__aeabi_dcmpgt>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f040 828b 	bne.w	800af2c <_dtoa_r+0x93c>
 800aa16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa1a:	462a      	mov	r2, r5
 800aa1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aa20:	f7f6 f884 	bl	8000b2c <__aeabi_dcmplt>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	f040 8128 	bne.w	800ac7a <_dtoa_r+0x68a>
 800aa2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aa2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aa32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f2c0 815a 	blt.w	800acee <_dtoa_r+0x6fe>
 800aa3a:	2f0e      	cmp	r7, #14
 800aa3c:	f300 8157 	bgt.w	800acee <_dtoa_r+0x6fe>
 800aa40:	4b5a      	ldr	r3, [pc, #360]	@ (800abac <_dtoa_r+0x5bc>)
 800aa42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa46:	ed93 7b00 	vldr	d7, [r3]
 800aa4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	ed8d 7b00 	vstr	d7, [sp]
 800aa52:	da03      	bge.n	800aa5c <_dtoa_r+0x46c>
 800aa54:	9b07      	ldr	r3, [sp, #28]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f340 8101 	ble.w	800ac5e <_dtoa_r+0x66e>
 800aa5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa60:	4656      	mov	r6, sl
 800aa62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa66:	4620      	mov	r0, r4
 800aa68:	4629      	mov	r1, r5
 800aa6a:	f7f5 ff17 	bl	800089c <__aeabi_ddiv>
 800aa6e:	f7f6 f89b 	bl	8000ba8 <__aeabi_d2iz>
 800aa72:	4680      	mov	r8, r0
 800aa74:	f7f5 fd7e 	bl	8000574 <__aeabi_i2d>
 800aa78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa7c:	f7f5 fde4 	bl	8000648 <__aeabi_dmul>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4620      	mov	r0, r4
 800aa86:	4629      	mov	r1, r5
 800aa88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aa8c:	f7f5 fc24 	bl	80002d8 <__aeabi_dsub>
 800aa90:	f806 4b01 	strb.w	r4, [r6], #1
 800aa94:	9d07      	ldr	r5, [sp, #28]
 800aa96:	eba6 040a 	sub.w	r4, r6, sl
 800aa9a:	42a5      	cmp	r5, r4
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	f040 8117 	bne.w	800acd2 <_dtoa_r+0x6e2>
 800aaa4:	f7f5 fc1a 	bl	80002dc <__adddf3>
 800aaa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aaac:	4604      	mov	r4, r0
 800aaae:	460d      	mov	r5, r1
 800aab0:	f7f6 f85a 	bl	8000b68 <__aeabi_dcmpgt>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f040 80f9 	bne.w	800acac <_dtoa_r+0x6bc>
 800aaba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aabe:	4620      	mov	r0, r4
 800aac0:	4629      	mov	r1, r5
 800aac2:	f7f6 f829 	bl	8000b18 <__aeabi_dcmpeq>
 800aac6:	b118      	cbz	r0, 800aad0 <_dtoa_r+0x4e0>
 800aac8:	f018 0f01 	tst.w	r8, #1
 800aacc:	f040 80ee 	bne.w	800acac <_dtoa_r+0x6bc>
 800aad0:	4649      	mov	r1, r9
 800aad2:	4658      	mov	r0, fp
 800aad4:	f000 fc90 	bl	800b3f8 <_Bfree>
 800aad8:	2300      	movs	r3, #0
 800aada:	7033      	strb	r3, [r6, #0]
 800aadc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aade:	3701      	adds	r7, #1
 800aae0:	601f      	str	r7, [r3, #0]
 800aae2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 831d 	beq.w	800b124 <_dtoa_r+0xb34>
 800aaea:	601e      	str	r6, [r3, #0]
 800aaec:	e31a      	b.n	800b124 <_dtoa_r+0xb34>
 800aaee:	07e2      	lsls	r2, r4, #31
 800aaf0:	d505      	bpl.n	800aafe <_dtoa_r+0x50e>
 800aaf2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aaf6:	f7f5 fda7 	bl	8000648 <__aeabi_dmul>
 800aafa:	3601      	adds	r6, #1
 800aafc:	2301      	movs	r3, #1
 800aafe:	1064      	asrs	r4, r4, #1
 800ab00:	3508      	adds	r5, #8
 800ab02:	e73f      	b.n	800a984 <_dtoa_r+0x394>
 800ab04:	2602      	movs	r6, #2
 800ab06:	e742      	b.n	800a98e <_dtoa_r+0x39e>
 800ab08:	9c07      	ldr	r4, [sp, #28]
 800ab0a:	9704      	str	r7, [sp, #16]
 800ab0c:	e761      	b.n	800a9d2 <_dtoa_r+0x3e2>
 800ab0e:	4b27      	ldr	r3, [pc, #156]	@ (800abac <_dtoa_r+0x5bc>)
 800ab10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab1a:	4454      	add	r4, sl
 800ab1c:	2900      	cmp	r1, #0
 800ab1e:	d053      	beq.n	800abc8 <_dtoa_r+0x5d8>
 800ab20:	4928      	ldr	r1, [pc, #160]	@ (800abc4 <_dtoa_r+0x5d4>)
 800ab22:	2000      	movs	r0, #0
 800ab24:	f7f5 feba 	bl	800089c <__aeabi_ddiv>
 800ab28:	4633      	mov	r3, r6
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	f7f5 fbd4 	bl	80002d8 <__aeabi_dsub>
 800ab30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab34:	4656      	mov	r6, sl
 800ab36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab3a:	f7f6 f835 	bl	8000ba8 <__aeabi_d2iz>
 800ab3e:	4605      	mov	r5, r0
 800ab40:	f7f5 fd18 	bl	8000574 <__aeabi_i2d>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab4c:	f7f5 fbc4 	bl	80002d8 <__aeabi_dsub>
 800ab50:	3530      	adds	r5, #48	@ 0x30
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab5a:	f806 5b01 	strb.w	r5, [r6], #1
 800ab5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab62:	f7f5 ffe3 	bl	8000b2c <__aeabi_dcmplt>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d171      	bne.n	800ac4e <_dtoa_r+0x65e>
 800ab6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab6e:	4911      	ldr	r1, [pc, #68]	@ (800abb4 <_dtoa_r+0x5c4>)
 800ab70:	2000      	movs	r0, #0
 800ab72:	f7f5 fbb1 	bl	80002d8 <__aeabi_dsub>
 800ab76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab7a:	f7f5 ffd7 	bl	8000b2c <__aeabi_dcmplt>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f040 8095 	bne.w	800acae <_dtoa_r+0x6be>
 800ab84:	42a6      	cmp	r6, r4
 800ab86:	f43f af50 	beq.w	800aa2a <_dtoa_r+0x43a>
 800ab8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ab8e:	4b0a      	ldr	r3, [pc, #40]	@ (800abb8 <_dtoa_r+0x5c8>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	f7f5 fd59 	bl	8000648 <__aeabi_dmul>
 800ab96:	4b08      	ldr	r3, [pc, #32]	@ (800abb8 <_dtoa_r+0x5c8>)
 800ab98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aba2:	f7f5 fd51 	bl	8000648 <__aeabi_dmul>
 800aba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abaa:	e7c4      	b.n	800ab36 <_dtoa_r+0x546>
 800abac:	0800e1f0 	.word	0x0800e1f0
 800abb0:	0800e1c8 	.word	0x0800e1c8
 800abb4:	3ff00000 	.word	0x3ff00000
 800abb8:	40240000 	.word	0x40240000
 800abbc:	401c0000 	.word	0x401c0000
 800abc0:	40140000 	.word	0x40140000
 800abc4:	3fe00000 	.word	0x3fe00000
 800abc8:	4631      	mov	r1, r6
 800abca:	4628      	mov	r0, r5
 800abcc:	f7f5 fd3c 	bl	8000648 <__aeabi_dmul>
 800abd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abd4:	9415      	str	r4, [sp, #84]	@ 0x54
 800abd6:	4656      	mov	r6, sl
 800abd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abdc:	f7f5 ffe4 	bl	8000ba8 <__aeabi_d2iz>
 800abe0:	4605      	mov	r5, r0
 800abe2:	f7f5 fcc7 	bl	8000574 <__aeabi_i2d>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abee:	f7f5 fb73 	bl	80002d8 <__aeabi_dsub>
 800abf2:	3530      	adds	r5, #48	@ 0x30
 800abf4:	f806 5b01 	strb.w	r5, [r6], #1
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	42a6      	cmp	r6, r4
 800abfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac02:	f04f 0200 	mov.w	r2, #0
 800ac06:	d124      	bne.n	800ac52 <_dtoa_r+0x662>
 800ac08:	4bac      	ldr	r3, [pc, #688]	@ (800aebc <_dtoa_r+0x8cc>)
 800ac0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac0e:	f7f5 fb65 	bl	80002dc <__adddf3>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac1a:	f7f5 ffa5 	bl	8000b68 <__aeabi_dcmpgt>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d145      	bne.n	800acae <_dtoa_r+0x6be>
 800ac22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac26:	49a5      	ldr	r1, [pc, #660]	@ (800aebc <_dtoa_r+0x8cc>)
 800ac28:	2000      	movs	r0, #0
 800ac2a:	f7f5 fb55 	bl	80002d8 <__aeabi_dsub>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac36:	f7f5 ff79 	bl	8000b2c <__aeabi_dcmplt>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	f43f aef5 	beq.w	800aa2a <_dtoa_r+0x43a>
 800ac40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ac42:	1e73      	subs	r3, r6, #1
 800ac44:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac4a:	2b30      	cmp	r3, #48	@ 0x30
 800ac4c:	d0f8      	beq.n	800ac40 <_dtoa_r+0x650>
 800ac4e:	9f04      	ldr	r7, [sp, #16]
 800ac50:	e73e      	b.n	800aad0 <_dtoa_r+0x4e0>
 800ac52:	4b9b      	ldr	r3, [pc, #620]	@ (800aec0 <_dtoa_r+0x8d0>)
 800ac54:	f7f5 fcf8 	bl	8000648 <__aeabi_dmul>
 800ac58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac5c:	e7bc      	b.n	800abd8 <_dtoa_r+0x5e8>
 800ac5e:	d10c      	bne.n	800ac7a <_dtoa_r+0x68a>
 800ac60:	4b98      	ldr	r3, [pc, #608]	@ (800aec4 <_dtoa_r+0x8d4>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac68:	f7f5 fcee 	bl	8000648 <__aeabi_dmul>
 800ac6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac70:	f7f5 ff70 	bl	8000b54 <__aeabi_dcmpge>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	f000 8157 	beq.w	800af28 <_dtoa_r+0x938>
 800ac7a:	2400      	movs	r4, #0
 800ac7c:	4625      	mov	r5, r4
 800ac7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac80:	43db      	mvns	r3, r3
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	4656      	mov	r6, sl
 800ac86:	2700      	movs	r7, #0
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4658      	mov	r0, fp
 800ac8c:	f000 fbb4 	bl	800b3f8 <_Bfree>
 800ac90:	2d00      	cmp	r5, #0
 800ac92:	d0dc      	beq.n	800ac4e <_dtoa_r+0x65e>
 800ac94:	b12f      	cbz	r7, 800aca2 <_dtoa_r+0x6b2>
 800ac96:	42af      	cmp	r7, r5
 800ac98:	d003      	beq.n	800aca2 <_dtoa_r+0x6b2>
 800ac9a:	4639      	mov	r1, r7
 800ac9c:	4658      	mov	r0, fp
 800ac9e:	f000 fbab 	bl	800b3f8 <_Bfree>
 800aca2:	4629      	mov	r1, r5
 800aca4:	4658      	mov	r0, fp
 800aca6:	f000 fba7 	bl	800b3f8 <_Bfree>
 800acaa:	e7d0      	b.n	800ac4e <_dtoa_r+0x65e>
 800acac:	9704      	str	r7, [sp, #16]
 800acae:	4633      	mov	r3, r6
 800acb0:	461e      	mov	r6, r3
 800acb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acb6:	2a39      	cmp	r2, #57	@ 0x39
 800acb8:	d107      	bne.n	800acca <_dtoa_r+0x6da>
 800acba:	459a      	cmp	sl, r3
 800acbc:	d1f8      	bne.n	800acb0 <_dtoa_r+0x6c0>
 800acbe:	9a04      	ldr	r2, [sp, #16]
 800acc0:	3201      	adds	r2, #1
 800acc2:	9204      	str	r2, [sp, #16]
 800acc4:	2230      	movs	r2, #48	@ 0x30
 800acc6:	f88a 2000 	strb.w	r2, [sl]
 800acca:	781a      	ldrb	r2, [r3, #0]
 800accc:	3201      	adds	r2, #1
 800acce:	701a      	strb	r2, [r3, #0]
 800acd0:	e7bd      	b.n	800ac4e <_dtoa_r+0x65e>
 800acd2:	4b7b      	ldr	r3, [pc, #492]	@ (800aec0 <_dtoa_r+0x8d0>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	f7f5 fcb7 	bl	8000648 <__aeabi_dmul>
 800acda:	2200      	movs	r2, #0
 800acdc:	2300      	movs	r3, #0
 800acde:	4604      	mov	r4, r0
 800ace0:	460d      	mov	r5, r1
 800ace2:	f7f5 ff19 	bl	8000b18 <__aeabi_dcmpeq>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f43f aebb 	beq.w	800aa62 <_dtoa_r+0x472>
 800acec:	e6f0      	b.n	800aad0 <_dtoa_r+0x4e0>
 800acee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800acf0:	2a00      	cmp	r2, #0
 800acf2:	f000 80db 	beq.w	800aeac <_dtoa_r+0x8bc>
 800acf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acf8:	2a01      	cmp	r2, #1
 800acfa:	f300 80bf 	bgt.w	800ae7c <_dtoa_r+0x88c>
 800acfe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad00:	2a00      	cmp	r2, #0
 800ad02:	f000 80b7 	beq.w	800ae74 <_dtoa_r+0x884>
 800ad06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ad0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad0c:	4646      	mov	r6, r8
 800ad0e:	9a08      	ldr	r2, [sp, #32]
 800ad10:	2101      	movs	r1, #1
 800ad12:	441a      	add	r2, r3
 800ad14:	4658      	mov	r0, fp
 800ad16:	4498      	add	r8, r3
 800ad18:	9208      	str	r2, [sp, #32]
 800ad1a:	f000 fc6b 	bl	800b5f4 <__i2b>
 800ad1e:	4605      	mov	r5, r0
 800ad20:	b15e      	cbz	r6, 800ad3a <_dtoa_r+0x74a>
 800ad22:	9b08      	ldr	r3, [sp, #32]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dd08      	ble.n	800ad3a <_dtoa_r+0x74a>
 800ad28:	42b3      	cmp	r3, r6
 800ad2a:	9a08      	ldr	r2, [sp, #32]
 800ad2c:	bfa8      	it	ge
 800ad2e:	4633      	movge	r3, r6
 800ad30:	eba8 0803 	sub.w	r8, r8, r3
 800ad34:	1af6      	subs	r6, r6, r3
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	9308      	str	r3, [sp, #32]
 800ad3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad3c:	b1f3      	cbz	r3, 800ad7c <_dtoa_r+0x78c>
 800ad3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f000 80b7 	beq.w	800aeb4 <_dtoa_r+0x8c4>
 800ad46:	b18c      	cbz	r4, 800ad6c <_dtoa_r+0x77c>
 800ad48:	4629      	mov	r1, r5
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	4658      	mov	r0, fp
 800ad4e:	f000 fd11 	bl	800b774 <__pow5mult>
 800ad52:	464a      	mov	r2, r9
 800ad54:	4601      	mov	r1, r0
 800ad56:	4605      	mov	r5, r0
 800ad58:	4658      	mov	r0, fp
 800ad5a:	f000 fc61 	bl	800b620 <__multiply>
 800ad5e:	4649      	mov	r1, r9
 800ad60:	9004      	str	r0, [sp, #16]
 800ad62:	4658      	mov	r0, fp
 800ad64:	f000 fb48 	bl	800b3f8 <_Bfree>
 800ad68:	9b04      	ldr	r3, [sp, #16]
 800ad6a:	4699      	mov	r9, r3
 800ad6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad6e:	1b1a      	subs	r2, r3, r4
 800ad70:	d004      	beq.n	800ad7c <_dtoa_r+0x78c>
 800ad72:	4649      	mov	r1, r9
 800ad74:	4658      	mov	r0, fp
 800ad76:	f000 fcfd 	bl	800b774 <__pow5mult>
 800ad7a:	4681      	mov	r9, r0
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	4658      	mov	r0, fp
 800ad80:	f000 fc38 	bl	800b5f4 <__i2b>
 800ad84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad86:	4604      	mov	r4, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 81cf 	beq.w	800b12c <_dtoa_r+0xb3c>
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4601      	mov	r1, r0
 800ad92:	4658      	mov	r0, fp
 800ad94:	f000 fcee 	bl	800b774 <__pow5mult>
 800ad98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	f300 8095 	bgt.w	800aecc <_dtoa_r+0x8dc>
 800ada2:	9b02      	ldr	r3, [sp, #8]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f040 8087 	bne.w	800aeb8 <_dtoa_r+0x8c8>
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f040 8089 	bne.w	800aec8 <_dtoa_r+0x8d8>
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800adbc:	0d1b      	lsrs	r3, r3, #20
 800adbe:	051b      	lsls	r3, r3, #20
 800adc0:	b12b      	cbz	r3, 800adce <_dtoa_r+0x7de>
 800adc2:	9b08      	ldr	r3, [sp, #32]
 800adc4:	3301      	adds	r3, #1
 800adc6:	9308      	str	r3, [sp, #32]
 800adc8:	f108 0801 	add.w	r8, r8, #1
 800adcc:	2301      	movs	r3, #1
 800adce:	930a      	str	r3, [sp, #40]	@ 0x28
 800add0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 81b0 	beq.w	800b138 <_dtoa_r+0xb48>
 800add8:	6923      	ldr	r3, [r4, #16]
 800adda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adde:	6918      	ldr	r0, [r3, #16]
 800ade0:	f000 fbbc 	bl	800b55c <__hi0bits>
 800ade4:	f1c0 0020 	rsb	r0, r0, #32
 800ade8:	9b08      	ldr	r3, [sp, #32]
 800adea:	4418      	add	r0, r3
 800adec:	f010 001f 	ands.w	r0, r0, #31
 800adf0:	d077      	beq.n	800aee2 <_dtoa_r+0x8f2>
 800adf2:	f1c0 0320 	rsb	r3, r0, #32
 800adf6:	2b04      	cmp	r3, #4
 800adf8:	dd6b      	ble.n	800aed2 <_dtoa_r+0x8e2>
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	f1c0 001c 	rsb	r0, r0, #28
 800ae00:	4403      	add	r3, r0
 800ae02:	4480      	add	r8, r0
 800ae04:	4406      	add	r6, r0
 800ae06:	9308      	str	r3, [sp, #32]
 800ae08:	f1b8 0f00 	cmp.w	r8, #0
 800ae0c:	dd05      	ble.n	800ae1a <_dtoa_r+0x82a>
 800ae0e:	4649      	mov	r1, r9
 800ae10:	4642      	mov	r2, r8
 800ae12:	4658      	mov	r0, fp
 800ae14:	f000 fd08 	bl	800b828 <__lshift>
 800ae18:	4681      	mov	r9, r0
 800ae1a:	9b08      	ldr	r3, [sp, #32]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	dd05      	ble.n	800ae2c <_dtoa_r+0x83c>
 800ae20:	4621      	mov	r1, r4
 800ae22:	461a      	mov	r2, r3
 800ae24:	4658      	mov	r0, fp
 800ae26:	f000 fcff 	bl	800b828 <__lshift>
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d059      	beq.n	800aee6 <_dtoa_r+0x8f6>
 800ae32:	4621      	mov	r1, r4
 800ae34:	4648      	mov	r0, r9
 800ae36:	f000 fd63 	bl	800b900 <__mcmp>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	da53      	bge.n	800aee6 <_dtoa_r+0x8f6>
 800ae3e:	1e7b      	subs	r3, r7, #1
 800ae40:	9304      	str	r3, [sp, #16]
 800ae42:	4649      	mov	r1, r9
 800ae44:	2300      	movs	r3, #0
 800ae46:	220a      	movs	r2, #10
 800ae48:	4658      	mov	r0, fp
 800ae4a:	f000 faf7 	bl	800b43c <__multadd>
 800ae4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae50:	4681      	mov	r9, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 8172 	beq.w	800b13c <_dtoa_r+0xb4c>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	220a      	movs	r2, #10
 800ae5e:	4658      	mov	r0, fp
 800ae60:	f000 faec 	bl	800b43c <__multadd>
 800ae64:	9b00      	ldr	r3, [sp, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	4605      	mov	r5, r0
 800ae6a:	dc67      	bgt.n	800af3c <_dtoa_r+0x94c>
 800ae6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	dc41      	bgt.n	800aef6 <_dtoa_r+0x906>
 800ae72:	e063      	b.n	800af3c <_dtoa_r+0x94c>
 800ae74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ae7a:	e746      	b.n	800ad0a <_dtoa_r+0x71a>
 800ae7c:	9b07      	ldr	r3, [sp, #28]
 800ae7e:	1e5c      	subs	r4, r3, #1
 800ae80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae82:	42a3      	cmp	r3, r4
 800ae84:	bfbf      	itttt	lt
 800ae86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ae88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ae8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ae8c:	1ae3      	sublt	r3, r4, r3
 800ae8e:	bfb4      	ite	lt
 800ae90:	18d2      	addlt	r2, r2, r3
 800ae92:	1b1c      	subge	r4, r3, r4
 800ae94:	9b07      	ldr	r3, [sp, #28]
 800ae96:	bfbc      	itt	lt
 800ae98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ae9a:	2400      	movlt	r4, #0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	bfb5      	itete	lt
 800aea0:	eba8 0603 	sublt.w	r6, r8, r3
 800aea4:	9b07      	ldrge	r3, [sp, #28]
 800aea6:	2300      	movlt	r3, #0
 800aea8:	4646      	movge	r6, r8
 800aeaa:	e730      	b.n	800ad0e <_dtoa_r+0x71e>
 800aeac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aeae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aeb0:	4646      	mov	r6, r8
 800aeb2:	e735      	b.n	800ad20 <_dtoa_r+0x730>
 800aeb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aeb6:	e75c      	b.n	800ad72 <_dtoa_r+0x782>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	e788      	b.n	800adce <_dtoa_r+0x7de>
 800aebc:	3fe00000 	.word	0x3fe00000
 800aec0:	40240000 	.word	0x40240000
 800aec4:	40140000 	.word	0x40140000
 800aec8:	9b02      	ldr	r3, [sp, #8]
 800aeca:	e780      	b.n	800adce <_dtoa_r+0x7de>
 800aecc:	2300      	movs	r3, #0
 800aece:	930a      	str	r3, [sp, #40]	@ 0x28
 800aed0:	e782      	b.n	800add8 <_dtoa_r+0x7e8>
 800aed2:	d099      	beq.n	800ae08 <_dtoa_r+0x818>
 800aed4:	9a08      	ldr	r2, [sp, #32]
 800aed6:	331c      	adds	r3, #28
 800aed8:	441a      	add	r2, r3
 800aeda:	4498      	add	r8, r3
 800aedc:	441e      	add	r6, r3
 800aede:	9208      	str	r2, [sp, #32]
 800aee0:	e792      	b.n	800ae08 <_dtoa_r+0x818>
 800aee2:	4603      	mov	r3, r0
 800aee4:	e7f6      	b.n	800aed4 <_dtoa_r+0x8e4>
 800aee6:	9b07      	ldr	r3, [sp, #28]
 800aee8:	9704      	str	r7, [sp, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	dc20      	bgt.n	800af30 <_dtoa_r+0x940>
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	dd1e      	ble.n	800af34 <_dtoa_r+0x944>
 800aef6:	9b00      	ldr	r3, [sp, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f47f aec0 	bne.w	800ac7e <_dtoa_r+0x68e>
 800aefe:	4621      	mov	r1, r4
 800af00:	2205      	movs	r2, #5
 800af02:	4658      	mov	r0, fp
 800af04:	f000 fa9a 	bl	800b43c <__multadd>
 800af08:	4601      	mov	r1, r0
 800af0a:	4604      	mov	r4, r0
 800af0c:	4648      	mov	r0, r9
 800af0e:	f000 fcf7 	bl	800b900 <__mcmp>
 800af12:	2800      	cmp	r0, #0
 800af14:	f77f aeb3 	ble.w	800ac7e <_dtoa_r+0x68e>
 800af18:	4656      	mov	r6, sl
 800af1a:	2331      	movs	r3, #49	@ 0x31
 800af1c:	f806 3b01 	strb.w	r3, [r6], #1
 800af20:	9b04      	ldr	r3, [sp, #16]
 800af22:	3301      	adds	r3, #1
 800af24:	9304      	str	r3, [sp, #16]
 800af26:	e6ae      	b.n	800ac86 <_dtoa_r+0x696>
 800af28:	9c07      	ldr	r4, [sp, #28]
 800af2a:	9704      	str	r7, [sp, #16]
 800af2c:	4625      	mov	r5, r4
 800af2e:	e7f3      	b.n	800af18 <_dtoa_r+0x928>
 800af30:	9b07      	ldr	r3, [sp, #28]
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af36:	2b00      	cmp	r3, #0
 800af38:	f000 8104 	beq.w	800b144 <_dtoa_r+0xb54>
 800af3c:	2e00      	cmp	r6, #0
 800af3e:	dd05      	ble.n	800af4c <_dtoa_r+0x95c>
 800af40:	4629      	mov	r1, r5
 800af42:	4632      	mov	r2, r6
 800af44:	4658      	mov	r0, fp
 800af46:	f000 fc6f 	bl	800b828 <__lshift>
 800af4a:	4605      	mov	r5, r0
 800af4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d05a      	beq.n	800b008 <_dtoa_r+0xa18>
 800af52:	6869      	ldr	r1, [r5, #4]
 800af54:	4658      	mov	r0, fp
 800af56:	f000 fa0f 	bl	800b378 <_Balloc>
 800af5a:	4606      	mov	r6, r0
 800af5c:	b928      	cbnz	r0, 800af6a <_dtoa_r+0x97a>
 800af5e:	4b84      	ldr	r3, [pc, #528]	@ (800b170 <_dtoa_r+0xb80>)
 800af60:	4602      	mov	r2, r0
 800af62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af66:	f7ff bb5a 	b.w	800a61e <_dtoa_r+0x2e>
 800af6a:	692a      	ldr	r2, [r5, #16]
 800af6c:	3202      	adds	r2, #2
 800af6e:	0092      	lsls	r2, r2, #2
 800af70:	f105 010c 	add.w	r1, r5, #12
 800af74:	300c      	adds	r0, #12
 800af76:	f002 f921 	bl	800d1bc <memcpy>
 800af7a:	2201      	movs	r2, #1
 800af7c:	4631      	mov	r1, r6
 800af7e:	4658      	mov	r0, fp
 800af80:	f000 fc52 	bl	800b828 <__lshift>
 800af84:	f10a 0301 	add.w	r3, sl, #1
 800af88:	9307      	str	r3, [sp, #28]
 800af8a:	9b00      	ldr	r3, [sp, #0]
 800af8c:	4453      	add	r3, sl
 800af8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af90:	9b02      	ldr	r3, [sp, #8]
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	462f      	mov	r7, r5
 800af98:	930a      	str	r3, [sp, #40]	@ 0x28
 800af9a:	4605      	mov	r5, r0
 800af9c:	9b07      	ldr	r3, [sp, #28]
 800af9e:	4621      	mov	r1, r4
 800afa0:	3b01      	subs	r3, #1
 800afa2:	4648      	mov	r0, r9
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	f7ff fa9b 	bl	800a4e0 <quorem>
 800afaa:	4639      	mov	r1, r7
 800afac:	9002      	str	r0, [sp, #8]
 800afae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800afb2:	4648      	mov	r0, r9
 800afb4:	f000 fca4 	bl	800b900 <__mcmp>
 800afb8:	462a      	mov	r2, r5
 800afba:	9008      	str	r0, [sp, #32]
 800afbc:	4621      	mov	r1, r4
 800afbe:	4658      	mov	r0, fp
 800afc0:	f000 fcba 	bl	800b938 <__mdiff>
 800afc4:	68c2      	ldr	r2, [r0, #12]
 800afc6:	4606      	mov	r6, r0
 800afc8:	bb02      	cbnz	r2, 800b00c <_dtoa_r+0xa1c>
 800afca:	4601      	mov	r1, r0
 800afcc:	4648      	mov	r0, r9
 800afce:	f000 fc97 	bl	800b900 <__mcmp>
 800afd2:	4602      	mov	r2, r0
 800afd4:	4631      	mov	r1, r6
 800afd6:	4658      	mov	r0, fp
 800afd8:	920e      	str	r2, [sp, #56]	@ 0x38
 800afda:	f000 fa0d 	bl	800b3f8 <_Bfree>
 800afde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afe2:	9e07      	ldr	r6, [sp, #28]
 800afe4:	ea43 0102 	orr.w	r1, r3, r2
 800afe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afea:	4319      	orrs	r1, r3
 800afec:	d110      	bne.n	800b010 <_dtoa_r+0xa20>
 800afee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aff2:	d029      	beq.n	800b048 <_dtoa_r+0xa58>
 800aff4:	9b08      	ldr	r3, [sp, #32]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dd02      	ble.n	800b000 <_dtoa_r+0xa10>
 800affa:	9b02      	ldr	r3, [sp, #8]
 800affc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b000:	9b00      	ldr	r3, [sp, #0]
 800b002:	f883 8000 	strb.w	r8, [r3]
 800b006:	e63f      	b.n	800ac88 <_dtoa_r+0x698>
 800b008:	4628      	mov	r0, r5
 800b00a:	e7bb      	b.n	800af84 <_dtoa_r+0x994>
 800b00c:	2201      	movs	r2, #1
 800b00e:	e7e1      	b.n	800afd4 <_dtoa_r+0x9e4>
 800b010:	9b08      	ldr	r3, [sp, #32]
 800b012:	2b00      	cmp	r3, #0
 800b014:	db04      	blt.n	800b020 <_dtoa_r+0xa30>
 800b016:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b018:	430b      	orrs	r3, r1
 800b01a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b01c:	430b      	orrs	r3, r1
 800b01e:	d120      	bne.n	800b062 <_dtoa_r+0xa72>
 800b020:	2a00      	cmp	r2, #0
 800b022:	dded      	ble.n	800b000 <_dtoa_r+0xa10>
 800b024:	4649      	mov	r1, r9
 800b026:	2201      	movs	r2, #1
 800b028:	4658      	mov	r0, fp
 800b02a:	f000 fbfd 	bl	800b828 <__lshift>
 800b02e:	4621      	mov	r1, r4
 800b030:	4681      	mov	r9, r0
 800b032:	f000 fc65 	bl	800b900 <__mcmp>
 800b036:	2800      	cmp	r0, #0
 800b038:	dc03      	bgt.n	800b042 <_dtoa_r+0xa52>
 800b03a:	d1e1      	bne.n	800b000 <_dtoa_r+0xa10>
 800b03c:	f018 0f01 	tst.w	r8, #1
 800b040:	d0de      	beq.n	800b000 <_dtoa_r+0xa10>
 800b042:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b046:	d1d8      	bne.n	800affa <_dtoa_r+0xa0a>
 800b048:	9a00      	ldr	r2, [sp, #0]
 800b04a:	2339      	movs	r3, #57	@ 0x39
 800b04c:	7013      	strb	r3, [r2, #0]
 800b04e:	4633      	mov	r3, r6
 800b050:	461e      	mov	r6, r3
 800b052:	3b01      	subs	r3, #1
 800b054:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b058:	2a39      	cmp	r2, #57	@ 0x39
 800b05a:	d052      	beq.n	800b102 <_dtoa_r+0xb12>
 800b05c:	3201      	adds	r2, #1
 800b05e:	701a      	strb	r2, [r3, #0]
 800b060:	e612      	b.n	800ac88 <_dtoa_r+0x698>
 800b062:	2a00      	cmp	r2, #0
 800b064:	dd07      	ble.n	800b076 <_dtoa_r+0xa86>
 800b066:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b06a:	d0ed      	beq.n	800b048 <_dtoa_r+0xa58>
 800b06c:	9a00      	ldr	r2, [sp, #0]
 800b06e:	f108 0301 	add.w	r3, r8, #1
 800b072:	7013      	strb	r3, [r2, #0]
 800b074:	e608      	b.n	800ac88 <_dtoa_r+0x698>
 800b076:	9b07      	ldr	r3, [sp, #28]
 800b078:	9a07      	ldr	r2, [sp, #28]
 800b07a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b07e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b080:	4293      	cmp	r3, r2
 800b082:	d028      	beq.n	800b0d6 <_dtoa_r+0xae6>
 800b084:	4649      	mov	r1, r9
 800b086:	2300      	movs	r3, #0
 800b088:	220a      	movs	r2, #10
 800b08a:	4658      	mov	r0, fp
 800b08c:	f000 f9d6 	bl	800b43c <__multadd>
 800b090:	42af      	cmp	r7, r5
 800b092:	4681      	mov	r9, r0
 800b094:	f04f 0300 	mov.w	r3, #0
 800b098:	f04f 020a 	mov.w	r2, #10
 800b09c:	4639      	mov	r1, r7
 800b09e:	4658      	mov	r0, fp
 800b0a0:	d107      	bne.n	800b0b2 <_dtoa_r+0xac2>
 800b0a2:	f000 f9cb 	bl	800b43c <__multadd>
 800b0a6:	4607      	mov	r7, r0
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	9b07      	ldr	r3, [sp, #28]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	9307      	str	r3, [sp, #28]
 800b0b0:	e774      	b.n	800af9c <_dtoa_r+0x9ac>
 800b0b2:	f000 f9c3 	bl	800b43c <__multadd>
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	220a      	movs	r2, #10
 800b0be:	4658      	mov	r0, fp
 800b0c0:	f000 f9bc 	bl	800b43c <__multadd>
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	e7f0      	b.n	800b0aa <_dtoa_r+0xaba>
 800b0c8:	9b00      	ldr	r3, [sp, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	bfcc      	ite	gt
 800b0ce:	461e      	movgt	r6, r3
 800b0d0:	2601      	movle	r6, #1
 800b0d2:	4456      	add	r6, sl
 800b0d4:	2700      	movs	r7, #0
 800b0d6:	4649      	mov	r1, r9
 800b0d8:	2201      	movs	r2, #1
 800b0da:	4658      	mov	r0, fp
 800b0dc:	f000 fba4 	bl	800b828 <__lshift>
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	4681      	mov	r9, r0
 800b0e4:	f000 fc0c 	bl	800b900 <__mcmp>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	dcb0      	bgt.n	800b04e <_dtoa_r+0xa5e>
 800b0ec:	d102      	bne.n	800b0f4 <_dtoa_r+0xb04>
 800b0ee:	f018 0f01 	tst.w	r8, #1
 800b0f2:	d1ac      	bne.n	800b04e <_dtoa_r+0xa5e>
 800b0f4:	4633      	mov	r3, r6
 800b0f6:	461e      	mov	r6, r3
 800b0f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0fc:	2a30      	cmp	r2, #48	@ 0x30
 800b0fe:	d0fa      	beq.n	800b0f6 <_dtoa_r+0xb06>
 800b100:	e5c2      	b.n	800ac88 <_dtoa_r+0x698>
 800b102:	459a      	cmp	sl, r3
 800b104:	d1a4      	bne.n	800b050 <_dtoa_r+0xa60>
 800b106:	9b04      	ldr	r3, [sp, #16]
 800b108:	3301      	adds	r3, #1
 800b10a:	9304      	str	r3, [sp, #16]
 800b10c:	2331      	movs	r3, #49	@ 0x31
 800b10e:	f88a 3000 	strb.w	r3, [sl]
 800b112:	e5b9      	b.n	800ac88 <_dtoa_r+0x698>
 800b114:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b116:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b174 <_dtoa_r+0xb84>
 800b11a:	b11b      	cbz	r3, 800b124 <_dtoa_r+0xb34>
 800b11c:	f10a 0308 	add.w	r3, sl, #8
 800b120:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	4650      	mov	r0, sl
 800b126:	b019      	add	sp, #100	@ 0x64
 800b128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b12e:	2b01      	cmp	r3, #1
 800b130:	f77f ae37 	ble.w	800ada2 <_dtoa_r+0x7b2>
 800b134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b136:	930a      	str	r3, [sp, #40]	@ 0x28
 800b138:	2001      	movs	r0, #1
 800b13a:	e655      	b.n	800ade8 <_dtoa_r+0x7f8>
 800b13c:	9b00      	ldr	r3, [sp, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f77f aed6 	ble.w	800aef0 <_dtoa_r+0x900>
 800b144:	4656      	mov	r6, sl
 800b146:	4621      	mov	r1, r4
 800b148:	4648      	mov	r0, r9
 800b14a:	f7ff f9c9 	bl	800a4e0 <quorem>
 800b14e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b152:	f806 8b01 	strb.w	r8, [r6], #1
 800b156:	9b00      	ldr	r3, [sp, #0]
 800b158:	eba6 020a 	sub.w	r2, r6, sl
 800b15c:	4293      	cmp	r3, r2
 800b15e:	ddb3      	ble.n	800b0c8 <_dtoa_r+0xad8>
 800b160:	4649      	mov	r1, r9
 800b162:	2300      	movs	r3, #0
 800b164:	220a      	movs	r2, #10
 800b166:	4658      	mov	r0, fp
 800b168:	f000 f968 	bl	800b43c <__multadd>
 800b16c:	4681      	mov	r9, r0
 800b16e:	e7ea      	b.n	800b146 <_dtoa_r+0xb56>
 800b170:	0800e151 	.word	0x0800e151
 800b174:	0800e0d5 	.word	0x0800e0d5

0800b178 <_free_r>:
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	4605      	mov	r5, r0
 800b17c:	2900      	cmp	r1, #0
 800b17e:	d041      	beq.n	800b204 <_free_r+0x8c>
 800b180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b184:	1f0c      	subs	r4, r1, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	bfb8      	it	lt
 800b18a:	18e4      	addlt	r4, r4, r3
 800b18c:	f000 f8e8 	bl	800b360 <__malloc_lock>
 800b190:	4a1d      	ldr	r2, [pc, #116]	@ (800b208 <_free_r+0x90>)
 800b192:	6813      	ldr	r3, [r2, #0]
 800b194:	b933      	cbnz	r3, 800b1a4 <_free_r+0x2c>
 800b196:	6063      	str	r3, [r4, #4]
 800b198:	6014      	str	r4, [r2, #0]
 800b19a:	4628      	mov	r0, r5
 800b19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1a0:	f000 b8e4 	b.w	800b36c <__malloc_unlock>
 800b1a4:	42a3      	cmp	r3, r4
 800b1a6:	d908      	bls.n	800b1ba <_free_r+0x42>
 800b1a8:	6820      	ldr	r0, [r4, #0]
 800b1aa:	1821      	adds	r1, r4, r0
 800b1ac:	428b      	cmp	r3, r1
 800b1ae:	bf01      	itttt	eq
 800b1b0:	6819      	ldreq	r1, [r3, #0]
 800b1b2:	685b      	ldreq	r3, [r3, #4]
 800b1b4:	1809      	addeq	r1, r1, r0
 800b1b6:	6021      	streq	r1, [r4, #0]
 800b1b8:	e7ed      	b.n	800b196 <_free_r+0x1e>
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	b10b      	cbz	r3, 800b1c4 <_free_r+0x4c>
 800b1c0:	42a3      	cmp	r3, r4
 800b1c2:	d9fa      	bls.n	800b1ba <_free_r+0x42>
 800b1c4:	6811      	ldr	r1, [r2, #0]
 800b1c6:	1850      	adds	r0, r2, r1
 800b1c8:	42a0      	cmp	r0, r4
 800b1ca:	d10b      	bne.n	800b1e4 <_free_r+0x6c>
 800b1cc:	6820      	ldr	r0, [r4, #0]
 800b1ce:	4401      	add	r1, r0
 800b1d0:	1850      	adds	r0, r2, r1
 800b1d2:	4283      	cmp	r3, r0
 800b1d4:	6011      	str	r1, [r2, #0]
 800b1d6:	d1e0      	bne.n	800b19a <_free_r+0x22>
 800b1d8:	6818      	ldr	r0, [r3, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	6053      	str	r3, [r2, #4]
 800b1de:	4408      	add	r0, r1
 800b1e0:	6010      	str	r0, [r2, #0]
 800b1e2:	e7da      	b.n	800b19a <_free_r+0x22>
 800b1e4:	d902      	bls.n	800b1ec <_free_r+0x74>
 800b1e6:	230c      	movs	r3, #12
 800b1e8:	602b      	str	r3, [r5, #0]
 800b1ea:	e7d6      	b.n	800b19a <_free_r+0x22>
 800b1ec:	6820      	ldr	r0, [r4, #0]
 800b1ee:	1821      	adds	r1, r4, r0
 800b1f0:	428b      	cmp	r3, r1
 800b1f2:	bf04      	itt	eq
 800b1f4:	6819      	ldreq	r1, [r3, #0]
 800b1f6:	685b      	ldreq	r3, [r3, #4]
 800b1f8:	6063      	str	r3, [r4, #4]
 800b1fa:	bf04      	itt	eq
 800b1fc:	1809      	addeq	r1, r1, r0
 800b1fe:	6021      	streq	r1, [r4, #0]
 800b200:	6054      	str	r4, [r2, #4]
 800b202:	e7ca      	b.n	800b19a <_free_r+0x22>
 800b204:	bd38      	pop	{r3, r4, r5, pc}
 800b206:	bf00      	nop
 800b208:	20001990 	.word	0x20001990

0800b20c <malloc>:
 800b20c:	4b02      	ldr	r3, [pc, #8]	@ (800b218 <malloc+0xc>)
 800b20e:	4601      	mov	r1, r0
 800b210:	6818      	ldr	r0, [r3, #0]
 800b212:	f000 b825 	b.w	800b260 <_malloc_r>
 800b216:	bf00      	nop
 800b218:	20000f5c 	.word	0x20000f5c

0800b21c <sbrk_aligned>:
 800b21c:	b570      	push	{r4, r5, r6, lr}
 800b21e:	4e0f      	ldr	r6, [pc, #60]	@ (800b25c <sbrk_aligned+0x40>)
 800b220:	460c      	mov	r4, r1
 800b222:	6831      	ldr	r1, [r6, #0]
 800b224:	4605      	mov	r5, r0
 800b226:	b911      	cbnz	r1, 800b22e <sbrk_aligned+0x12>
 800b228:	f001 ffb8 	bl	800d19c <_sbrk_r>
 800b22c:	6030      	str	r0, [r6, #0]
 800b22e:	4621      	mov	r1, r4
 800b230:	4628      	mov	r0, r5
 800b232:	f001 ffb3 	bl	800d19c <_sbrk_r>
 800b236:	1c43      	adds	r3, r0, #1
 800b238:	d103      	bne.n	800b242 <sbrk_aligned+0x26>
 800b23a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b23e:	4620      	mov	r0, r4
 800b240:	bd70      	pop	{r4, r5, r6, pc}
 800b242:	1cc4      	adds	r4, r0, #3
 800b244:	f024 0403 	bic.w	r4, r4, #3
 800b248:	42a0      	cmp	r0, r4
 800b24a:	d0f8      	beq.n	800b23e <sbrk_aligned+0x22>
 800b24c:	1a21      	subs	r1, r4, r0
 800b24e:	4628      	mov	r0, r5
 800b250:	f001 ffa4 	bl	800d19c <_sbrk_r>
 800b254:	3001      	adds	r0, #1
 800b256:	d1f2      	bne.n	800b23e <sbrk_aligned+0x22>
 800b258:	e7ef      	b.n	800b23a <sbrk_aligned+0x1e>
 800b25a:	bf00      	nop
 800b25c:	2000198c 	.word	0x2000198c

0800b260 <_malloc_r>:
 800b260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b264:	1ccd      	adds	r5, r1, #3
 800b266:	f025 0503 	bic.w	r5, r5, #3
 800b26a:	3508      	adds	r5, #8
 800b26c:	2d0c      	cmp	r5, #12
 800b26e:	bf38      	it	cc
 800b270:	250c      	movcc	r5, #12
 800b272:	2d00      	cmp	r5, #0
 800b274:	4606      	mov	r6, r0
 800b276:	db01      	blt.n	800b27c <_malloc_r+0x1c>
 800b278:	42a9      	cmp	r1, r5
 800b27a:	d904      	bls.n	800b286 <_malloc_r+0x26>
 800b27c:	230c      	movs	r3, #12
 800b27e:	6033      	str	r3, [r6, #0]
 800b280:	2000      	movs	r0, #0
 800b282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b35c <_malloc_r+0xfc>
 800b28a:	f000 f869 	bl	800b360 <__malloc_lock>
 800b28e:	f8d8 3000 	ldr.w	r3, [r8]
 800b292:	461c      	mov	r4, r3
 800b294:	bb44      	cbnz	r4, 800b2e8 <_malloc_r+0x88>
 800b296:	4629      	mov	r1, r5
 800b298:	4630      	mov	r0, r6
 800b29a:	f7ff ffbf 	bl	800b21c <sbrk_aligned>
 800b29e:	1c43      	adds	r3, r0, #1
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	d158      	bne.n	800b356 <_malloc_r+0xf6>
 800b2a4:	f8d8 4000 	ldr.w	r4, [r8]
 800b2a8:	4627      	mov	r7, r4
 800b2aa:	2f00      	cmp	r7, #0
 800b2ac:	d143      	bne.n	800b336 <_malloc_r+0xd6>
 800b2ae:	2c00      	cmp	r4, #0
 800b2b0:	d04b      	beq.n	800b34a <_malloc_r+0xea>
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	eb04 0903 	add.w	r9, r4, r3
 800b2bc:	f001 ff6e 	bl	800d19c <_sbrk_r>
 800b2c0:	4581      	cmp	r9, r0
 800b2c2:	d142      	bne.n	800b34a <_malloc_r+0xea>
 800b2c4:	6821      	ldr	r1, [r4, #0]
 800b2c6:	1a6d      	subs	r5, r5, r1
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f7ff ffa6 	bl	800b21c <sbrk_aligned>
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	d03a      	beq.n	800b34a <_malloc_r+0xea>
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	442b      	add	r3, r5
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	f8d8 3000 	ldr.w	r3, [r8]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	bb62      	cbnz	r2, 800b33c <_malloc_r+0xdc>
 800b2e2:	f8c8 7000 	str.w	r7, [r8]
 800b2e6:	e00f      	b.n	800b308 <_malloc_r+0xa8>
 800b2e8:	6822      	ldr	r2, [r4, #0]
 800b2ea:	1b52      	subs	r2, r2, r5
 800b2ec:	d420      	bmi.n	800b330 <_malloc_r+0xd0>
 800b2ee:	2a0b      	cmp	r2, #11
 800b2f0:	d917      	bls.n	800b322 <_malloc_r+0xc2>
 800b2f2:	1961      	adds	r1, r4, r5
 800b2f4:	42a3      	cmp	r3, r4
 800b2f6:	6025      	str	r5, [r4, #0]
 800b2f8:	bf18      	it	ne
 800b2fa:	6059      	strne	r1, [r3, #4]
 800b2fc:	6863      	ldr	r3, [r4, #4]
 800b2fe:	bf08      	it	eq
 800b300:	f8c8 1000 	streq.w	r1, [r8]
 800b304:	5162      	str	r2, [r4, r5]
 800b306:	604b      	str	r3, [r1, #4]
 800b308:	4630      	mov	r0, r6
 800b30a:	f000 f82f 	bl	800b36c <__malloc_unlock>
 800b30e:	f104 000b 	add.w	r0, r4, #11
 800b312:	1d23      	adds	r3, r4, #4
 800b314:	f020 0007 	bic.w	r0, r0, #7
 800b318:	1ac2      	subs	r2, r0, r3
 800b31a:	bf1c      	itt	ne
 800b31c:	1a1b      	subne	r3, r3, r0
 800b31e:	50a3      	strne	r3, [r4, r2]
 800b320:	e7af      	b.n	800b282 <_malloc_r+0x22>
 800b322:	6862      	ldr	r2, [r4, #4]
 800b324:	42a3      	cmp	r3, r4
 800b326:	bf0c      	ite	eq
 800b328:	f8c8 2000 	streq.w	r2, [r8]
 800b32c:	605a      	strne	r2, [r3, #4]
 800b32e:	e7eb      	b.n	800b308 <_malloc_r+0xa8>
 800b330:	4623      	mov	r3, r4
 800b332:	6864      	ldr	r4, [r4, #4]
 800b334:	e7ae      	b.n	800b294 <_malloc_r+0x34>
 800b336:	463c      	mov	r4, r7
 800b338:	687f      	ldr	r7, [r7, #4]
 800b33a:	e7b6      	b.n	800b2aa <_malloc_r+0x4a>
 800b33c:	461a      	mov	r2, r3
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	42a3      	cmp	r3, r4
 800b342:	d1fb      	bne.n	800b33c <_malloc_r+0xdc>
 800b344:	2300      	movs	r3, #0
 800b346:	6053      	str	r3, [r2, #4]
 800b348:	e7de      	b.n	800b308 <_malloc_r+0xa8>
 800b34a:	230c      	movs	r3, #12
 800b34c:	6033      	str	r3, [r6, #0]
 800b34e:	4630      	mov	r0, r6
 800b350:	f000 f80c 	bl	800b36c <__malloc_unlock>
 800b354:	e794      	b.n	800b280 <_malloc_r+0x20>
 800b356:	6005      	str	r5, [r0, #0]
 800b358:	e7d6      	b.n	800b308 <_malloc_r+0xa8>
 800b35a:	bf00      	nop
 800b35c:	20001990 	.word	0x20001990

0800b360 <__malloc_lock>:
 800b360:	4801      	ldr	r0, [pc, #4]	@ (800b368 <__malloc_lock+0x8>)
 800b362:	f7ff b8b4 	b.w	800a4ce <__retarget_lock_acquire_recursive>
 800b366:	bf00      	nop
 800b368:	20001988 	.word	0x20001988

0800b36c <__malloc_unlock>:
 800b36c:	4801      	ldr	r0, [pc, #4]	@ (800b374 <__malloc_unlock+0x8>)
 800b36e:	f7ff b8af 	b.w	800a4d0 <__retarget_lock_release_recursive>
 800b372:	bf00      	nop
 800b374:	20001988 	.word	0x20001988

0800b378 <_Balloc>:
 800b378:	b570      	push	{r4, r5, r6, lr}
 800b37a:	69c6      	ldr	r6, [r0, #28]
 800b37c:	4604      	mov	r4, r0
 800b37e:	460d      	mov	r5, r1
 800b380:	b976      	cbnz	r6, 800b3a0 <_Balloc+0x28>
 800b382:	2010      	movs	r0, #16
 800b384:	f7ff ff42 	bl	800b20c <malloc>
 800b388:	4602      	mov	r2, r0
 800b38a:	61e0      	str	r0, [r4, #28]
 800b38c:	b920      	cbnz	r0, 800b398 <_Balloc+0x20>
 800b38e:	4b18      	ldr	r3, [pc, #96]	@ (800b3f0 <_Balloc+0x78>)
 800b390:	4818      	ldr	r0, [pc, #96]	@ (800b3f4 <_Balloc+0x7c>)
 800b392:	216b      	movs	r1, #107	@ 0x6b
 800b394:	f001 ff28 	bl	800d1e8 <__assert_func>
 800b398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b39c:	6006      	str	r6, [r0, #0]
 800b39e:	60c6      	str	r6, [r0, #12]
 800b3a0:	69e6      	ldr	r6, [r4, #28]
 800b3a2:	68f3      	ldr	r3, [r6, #12]
 800b3a4:	b183      	cbz	r3, 800b3c8 <_Balloc+0x50>
 800b3a6:	69e3      	ldr	r3, [r4, #28]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3ae:	b9b8      	cbnz	r0, 800b3e0 <_Balloc+0x68>
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	fa01 f605 	lsl.w	r6, r1, r5
 800b3b6:	1d72      	adds	r2, r6, #5
 800b3b8:	0092      	lsls	r2, r2, #2
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f001 ff32 	bl	800d224 <_calloc_r>
 800b3c0:	b160      	cbz	r0, 800b3dc <_Balloc+0x64>
 800b3c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3c6:	e00e      	b.n	800b3e6 <_Balloc+0x6e>
 800b3c8:	2221      	movs	r2, #33	@ 0x21
 800b3ca:	2104      	movs	r1, #4
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f001 ff29 	bl	800d224 <_calloc_r>
 800b3d2:	69e3      	ldr	r3, [r4, #28]
 800b3d4:	60f0      	str	r0, [r6, #12]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1e4      	bne.n	800b3a6 <_Balloc+0x2e>
 800b3dc:	2000      	movs	r0, #0
 800b3de:	bd70      	pop	{r4, r5, r6, pc}
 800b3e0:	6802      	ldr	r2, [r0, #0]
 800b3e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3ec:	e7f7      	b.n	800b3de <_Balloc+0x66>
 800b3ee:	bf00      	nop
 800b3f0:	0800e0e2 	.word	0x0800e0e2
 800b3f4:	0800e162 	.word	0x0800e162

0800b3f8 <_Bfree>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	69c6      	ldr	r6, [r0, #28]
 800b3fc:	4605      	mov	r5, r0
 800b3fe:	460c      	mov	r4, r1
 800b400:	b976      	cbnz	r6, 800b420 <_Bfree+0x28>
 800b402:	2010      	movs	r0, #16
 800b404:	f7ff ff02 	bl	800b20c <malloc>
 800b408:	4602      	mov	r2, r0
 800b40a:	61e8      	str	r0, [r5, #28]
 800b40c:	b920      	cbnz	r0, 800b418 <_Bfree+0x20>
 800b40e:	4b09      	ldr	r3, [pc, #36]	@ (800b434 <_Bfree+0x3c>)
 800b410:	4809      	ldr	r0, [pc, #36]	@ (800b438 <_Bfree+0x40>)
 800b412:	218f      	movs	r1, #143	@ 0x8f
 800b414:	f001 fee8 	bl	800d1e8 <__assert_func>
 800b418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b41c:	6006      	str	r6, [r0, #0]
 800b41e:	60c6      	str	r6, [r0, #12]
 800b420:	b13c      	cbz	r4, 800b432 <_Bfree+0x3a>
 800b422:	69eb      	ldr	r3, [r5, #28]
 800b424:	6862      	ldr	r2, [r4, #4]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b42c:	6021      	str	r1, [r4, #0]
 800b42e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b432:	bd70      	pop	{r4, r5, r6, pc}
 800b434:	0800e0e2 	.word	0x0800e0e2
 800b438:	0800e162 	.word	0x0800e162

0800b43c <__multadd>:
 800b43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b440:	690d      	ldr	r5, [r1, #16]
 800b442:	4607      	mov	r7, r0
 800b444:	460c      	mov	r4, r1
 800b446:	461e      	mov	r6, r3
 800b448:	f101 0c14 	add.w	ip, r1, #20
 800b44c:	2000      	movs	r0, #0
 800b44e:	f8dc 3000 	ldr.w	r3, [ip]
 800b452:	b299      	uxth	r1, r3
 800b454:	fb02 6101 	mla	r1, r2, r1, r6
 800b458:	0c1e      	lsrs	r6, r3, #16
 800b45a:	0c0b      	lsrs	r3, r1, #16
 800b45c:	fb02 3306 	mla	r3, r2, r6, r3
 800b460:	b289      	uxth	r1, r1
 800b462:	3001      	adds	r0, #1
 800b464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b468:	4285      	cmp	r5, r0
 800b46a:	f84c 1b04 	str.w	r1, [ip], #4
 800b46e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b472:	dcec      	bgt.n	800b44e <__multadd+0x12>
 800b474:	b30e      	cbz	r6, 800b4ba <__multadd+0x7e>
 800b476:	68a3      	ldr	r3, [r4, #8]
 800b478:	42ab      	cmp	r3, r5
 800b47a:	dc19      	bgt.n	800b4b0 <__multadd+0x74>
 800b47c:	6861      	ldr	r1, [r4, #4]
 800b47e:	4638      	mov	r0, r7
 800b480:	3101      	adds	r1, #1
 800b482:	f7ff ff79 	bl	800b378 <_Balloc>
 800b486:	4680      	mov	r8, r0
 800b488:	b928      	cbnz	r0, 800b496 <__multadd+0x5a>
 800b48a:	4602      	mov	r2, r0
 800b48c:	4b0c      	ldr	r3, [pc, #48]	@ (800b4c0 <__multadd+0x84>)
 800b48e:	480d      	ldr	r0, [pc, #52]	@ (800b4c4 <__multadd+0x88>)
 800b490:	21ba      	movs	r1, #186	@ 0xba
 800b492:	f001 fea9 	bl	800d1e8 <__assert_func>
 800b496:	6922      	ldr	r2, [r4, #16]
 800b498:	3202      	adds	r2, #2
 800b49a:	f104 010c 	add.w	r1, r4, #12
 800b49e:	0092      	lsls	r2, r2, #2
 800b4a0:	300c      	adds	r0, #12
 800b4a2:	f001 fe8b 	bl	800d1bc <memcpy>
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7ff ffa5 	bl	800b3f8 <_Bfree>
 800b4ae:	4644      	mov	r4, r8
 800b4b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4b4:	3501      	adds	r5, #1
 800b4b6:	615e      	str	r6, [r3, #20]
 800b4b8:	6125      	str	r5, [r4, #16]
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c0:	0800e151 	.word	0x0800e151
 800b4c4:	0800e162 	.word	0x0800e162

0800b4c8 <__s2b>:
 800b4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	4615      	mov	r5, r2
 800b4d0:	461f      	mov	r7, r3
 800b4d2:	2209      	movs	r2, #9
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4dc:	2100      	movs	r1, #0
 800b4de:	2201      	movs	r2, #1
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	db09      	blt.n	800b4f8 <__s2b+0x30>
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f7ff ff47 	bl	800b378 <_Balloc>
 800b4ea:	b940      	cbnz	r0, 800b4fe <__s2b+0x36>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	4b19      	ldr	r3, [pc, #100]	@ (800b554 <__s2b+0x8c>)
 800b4f0:	4819      	ldr	r0, [pc, #100]	@ (800b558 <__s2b+0x90>)
 800b4f2:	21d3      	movs	r1, #211	@ 0xd3
 800b4f4:	f001 fe78 	bl	800d1e8 <__assert_func>
 800b4f8:	0052      	lsls	r2, r2, #1
 800b4fa:	3101      	adds	r1, #1
 800b4fc:	e7f0      	b.n	800b4e0 <__s2b+0x18>
 800b4fe:	9b08      	ldr	r3, [sp, #32]
 800b500:	6143      	str	r3, [r0, #20]
 800b502:	2d09      	cmp	r5, #9
 800b504:	f04f 0301 	mov.w	r3, #1
 800b508:	6103      	str	r3, [r0, #16]
 800b50a:	dd16      	ble.n	800b53a <__s2b+0x72>
 800b50c:	f104 0909 	add.w	r9, r4, #9
 800b510:	46c8      	mov	r8, r9
 800b512:	442c      	add	r4, r5
 800b514:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b518:	4601      	mov	r1, r0
 800b51a:	3b30      	subs	r3, #48	@ 0x30
 800b51c:	220a      	movs	r2, #10
 800b51e:	4630      	mov	r0, r6
 800b520:	f7ff ff8c 	bl	800b43c <__multadd>
 800b524:	45a0      	cmp	r8, r4
 800b526:	d1f5      	bne.n	800b514 <__s2b+0x4c>
 800b528:	f1a5 0408 	sub.w	r4, r5, #8
 800b52c:	444c      	add	r4, r9
 800b52e:	1b2d      	subs	r5, r5, r4
 800b530:	1963      	adds	r3, r4, r5
 800b532:	42bb      	cmp	r3, r7
 800b534:	db04      	blt.n	800b540 <__s2b+0x78>
 800b536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53a:	340a      	adds	r4, #10
 800b53c:	2509      	movs	r5, #9
 800b53e:	e7f6      	b.n	800b52e <__s2b+0x66>
 800b540:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b544:	4601      	mov	r1, r0
 800b546:	3b30      	subs	r3, #48	@ 0x30
 800b548:	220a      	movs	r2, #10
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7ff ff76 	bl	800b43c <__multadd>
 800b550:	e7ee      	b.n	800b530 <__s2b+0x68>
 800b552:	bf00      	nop
 800b554:	0800e151 	.word	0x0800e151
 800b558:	0800e162 	.word	0x0800e162

0800b55c <__hi0bits>:
 800b55c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b560:	4603      	mov	r3, r0
 800b562:	bf36      	itet	cc
 800b564:	0403      	lslcc	r3, r0, #16
 800b566:	2000      	movcs	r0, #0
 800b568:	2010      	movcc	r0, #16
 800b56a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b56e:	bf3c      	itt	cc
 800b570:	021b      	lslcc	r3, r3, #8
 800b572:	3008      	addcc	r0, #8
 800b574:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b578:	bf3c      	itt	cc
 800b57a:	011b      	lslcc	r3, r3, #4
 800b57c:	3004      	addcc	r0, #4
 800b57e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b582:	bf3c      	itt	cc
 800b584:	009b      	lslcc	r3, r3, #2
 800b586:	3002      	addcc	r0, #2
 800b588:	2b00      	cmp	r3, #0
 800b58a:	db05      	blt.n	800b598 <__hi0bits+0x3c>
 800b58c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b590:	f100 0001 	add.w	r0, r0, #1
 800b594:	bf08      	it	eq
 800b596:	2020      	moveq	r0, #32
 800b598:	4770      	bx	lr

0800b59a <__lo0bits>:
 800b59a:	6803      	ldr	r3, [r0, #0]
 800b59c:	4602      	mov	r2, r0
 800b59e:	f013 0007 	ands.w	r0, r3, #7
 800b5a2:	d00b      	beq.n	800b5bc <__lo0bits+0x22>
 800b5a4:	07d9      	lsls	r1, r3, #31
 800b5a6:	d421      	bmi.n	800b5ec <__lo0bits+0x52>
 800b5a8:	0798      	lsls	r0, r3, #30
 800b5aa:	bf49      	itett	mi
 800b5ac:	085b      	lsrmi	r3, r3, #1
 800b5ae:	089b      	lsrpl	r3, r3, #2
 800b5b0:	2001      	movmi	r0, #1
 800b5b2:	6013      	strmi	r3, [r2, #0]
 800b5b4:	bf5c      	itt	pl
 800b5b6:	6013      	strpl	r3, [r2, #0]
 800b5b8:	2002      	movpl	r0, #2
 800b5ba:	4770      	bx	lr
 800b5bc:	b299      	uxth	r1, r3
 800b5be:	b909      	cbnz	r1, 800b5c4 <__lo0bits+0x2a>
 800b5c0:	0c1b      	lsrs	r3, r3, #16
 800b5c2:	2010      	movs	r0, #16
 800b5c4:	b2d9      	uxtb	r1, r3
 800b5c6:	b909      	cbnz	r1, 800b5cc <__lo0bits+0x32>
 800b5c8:	3008      	adds	r0, #8
 800b5ca:	0a1b      	lsrs	r3, r3, #8
 800b5cc:	0719      	lsls	r1, r3, #28
 800b5ce:	bf04      	itt	eq
 800b5d0:	091b      	lsreq	r3, r3, #4
 800b5d2:	3004      	addeq	r0, #4
 800b5d4:	0799      	lsls	r1, r3, #30
 800b5d6:	bf04      	itt	eq
 800b5d8:	089b      	lsreq	r3, r3, #2
 800b5da:	3002      	addeq	r0, #2
 800b5dc:	07d9      	lsls	r1, r3, #31
 800b5de:	d403      	bmi.n	800b5e8 <__lo0bits+0x4e>
 800b5e0:	085b      	lsrs	r3, r3, #1
 800b5e2:	f100 0001 	add.w	r0, r0, #1
 800b5e6:	d003      	beq.n	800b5f0 <__lo0bits+0x56>
 800b5e8:	6013      	str	r3, [r2, #0]
 800b5ea:	4770      	bx	lr
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	4770      	bx	lr
 800b5f0:	2020      	movs	r0, #32
 800b5f2:	4770      	bx	lr

0800b5f4 <__i2b>:
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	f7ff febd 	bl	800b378 <_Balloc>
 800b5fe:	4602      	mov	r2, r0
 800b600:	b928      	cbnz	r0, 800b60e <__i2b+0x1a>
 800b602:	4b05      	ldr	r3, [pc, #20]	@ (800b618 <__i2b+0x24>)
 800b604:	4805      	ldr	r0, [pc, #20]	@ (800b61c <__i2b+0x28>)
 800b606:	f240 1145 	movw	r1, #325	@ 0x145
 800b60a:	f001 fded 	bl	800d1e8 <__assert_func>
 800b60e:	2301      	movs	r3, #1
 800b610:	6144      	str	r4, [r0, #20]
 800b612:	6103      	str	r3, [r0, #16]
 800b614:	bd10      	pop	{r4, pc}
 800b616:	bf00      	nop
 800b618:	0800e151 	.word	0x0800e151
 800b61c:	0800e162 	.word	0x0800e162

0800b620 <__multiply>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	4614      	mov	r4, r2
 800b626:	690a      	ldr	r2, [r1, #16]
 800b628:	6923      	ldr	r3, [r4, #16]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	bfa8      	it	ge
 800b62e:	4623      	movge	r3, r4
 800b630:	460f      	mov	r7, r1
 800b632:	bfa4      	itt	ge
 800b634:	460c      	movge	r4, r1
 800b636:	461f      	movge	r7, r3
 800b638:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b63c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b640:	68a3      	ldr	r3, [r4, #8]
 800b642:	6861      	ldr	r1, [r4, #4]
 800b644:	eb0a 0609 	add.w	r6, sl, r9
 800b648:	42b3      	cmp	r3, r6
 800b64a:	b085      	sub	sp, #20
 800b64c:	bfb8      	it	lt
 800b64e:	3101      	addlt	r1, #1
 800b650:	f7ff fe92 	bl	800b378 <_Balloc>
 800b654:	b930      	cbnz	r0, 800b664 <__multiply+0x44>
 800b656:	4602      	mov	r2, r0
 800b658:	4b44      	ldr	r3, [pc, #272]	@ (800b76c <__multiply+0x14c>)
 800b65a:	4845      	ldr	r0, [pc, #276]	@ (800b770 <__multiply+0x150>)
 800b65c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b660:	f001 fdc2 	bl	800d1e8 <__assert_func>
 800b664:	f100 0514 	add.w	r5, r0, #20
 800b668:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b66c:	462b      	mov	r3, r5
 800b66e:	2200      	movs	r2, #0
 800b670:	4543      	cmp	r3, r8
 800b672:	d321      	bcc.n	800b6b8 <__multiply+0x98>
 800b674:	f107 0114 	add.w	r1, r7, #20
 800b678:	f104 0214 	add.w	r2, r4, #20
 800b67c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b680:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b684:	9302      	str	r3, [sp, #8]
 800b686:	1b13      	subs	r3, r2, r4
 800b688:	3b15      	subs	r3, #21
 800b68a:	f023 0303 	bic.w	r3, r3, #3
 800b68e:	3304      	adds	r3, #4
 800b690:	f104 0715 	add.w	r7, r4, #21
 800b694:	42ba      	cmp	r2, r7
 800b696:	bf38      	it	cc
 800b698:	2304      	movcc	r3, #4
 800b69a:	9301      	str	r3, [sp, #4]
 800b69c:	9b02      	ldr	r3, [sp, #8]
 800b69e:	9103      	str	r1, [sp, #12]
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	d80c      	bhi.n	800b6be <__multiply+0x9e>
 800b6a4:	2e00      	cmp	r6, #0
 800b6a6:	dd03      	ble.n	800b6b0 <__multiply+0x90>
 800b6a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d05b      	beq.n	800b768 <__multiply+0x148>
 800b6b0:	6106      	str	r6, [r0, #16]
 800b6b2:	b005      	add	sp, #20
 800b6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b8:	f843 2b04 	str.w	r2, [r3], #4
 800b6bc:	e7d8      	b.n	800b670 <__multiply+0x50>
 800b6be:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6c2:	f1ba 0f00 	cmp.w	sl, #0
 800b6c6:	d024      	beq.n	800b712 <__multiply+0xf2>
 800b6c8:	f104 0e14 	add.w	lr, r4, #20
 800b6cc:	46a9      	mov	r9, r5
 800b6ce:	f04f 0c00 	mov.w	ip, #0
 800b6d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6d6:	f8d9 3000 	ldr.w	r3, [r9]
 800b6da:	fa1f fb87 	uxth.w	fp, r7
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	fb0a 330b 	mla	r3, sl, fp, r3
 800b6e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b6e8:	f8d9 7000 	ldr.w	r7, [r9]
 800b6ec:	4463      	add	r3, ip
 800b6ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b6f2:	fb0a c70b 	mla	r7, sl, fp, ip
 800b6f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b700:	4572      	cmp	r2, lr
 800b702:	f849 3b04 	str.w	r3, [r9], #4
 800b706:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b70a:	d8e2      	bhi.n	800b6d2 <__multiply+0xb2>
 800b70c:	9b01      	ldr	r3, [sp, #4]
 800b70e:	f845 c003 	str.w	ip, [r5, r3]
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b718:	3104      	adds	r1, #4
 800b71a:	f1b9 0f00 	cmp.w	r9, #0
 800b71e:	d021      	beq.n	800b764 <__multiply+0x144>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	f104 0c14 	add.w	ip, r4, #20
 800b726:	46ae      	mov	lr, r5
 800b728:	f04f 0a00 	mov.w	sl, #0
 800b72c:	f8bc b000 	ldrh.w	fp, [ip]
 800b730:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b734:	fb09 770b 	mla	r7, r9, fp, r7
 800b738:	4457      	add	r7, sl
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b740:	f84e 3b04 	str.w	r3, [lr], #4
 800b744:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b748:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b74c:	f8be 3000 	ldrh.w	r3, [lr]
 800b750:	fb09 330a 	mla	r3, r9, sl, r3
 800b754:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b758:	4562      	cmp	r2, ip
 800b75a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b75e:	d8e5      	bhi.n	800b72c <__multiply+0x10c>
 800b760:	9f01      	ldr	r7, [sp, #4]
 800b762:	51eb      	str	r3, [r5, r7]
 800b764:	3504      	adds	r5, #4
 800b766:	e799      	b.n	800b69c <__multiply+0x7c>
 800b768:	3e01      	subs	r6, #1
 800b76a:	e79b      	b.n	800b6a4 <__multiply+0x84>
 800b76c:	0800e151 	.word	0x0800e151
 800b770:	0800e162 	.word	0x0800e162

0800b774 <__pow5mult>:
 800b774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b778:	4615      	mov	r5, r2
 800b77a:	f012 0203 	ands.w	r2, r2, #3
 800b77e:	4607      	mov	r7, r0
 800b780:	460e      	mov	r6, r1
 800b782:	d007      	beq.n	800b794 <__pow5mult+0x20>
 800b784:	4c25      	ldr	r4, [pc, #148]	@ (800b81c <__pow5mult+0xa8>)
 800b786:	3a01      	subs	r2, #1
 800b788:	2300      	movs	r3, #0
 800b78a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b78e:	f7ff fe55 	bl	800b43c <__multadd>
 800b792:	4606      	mov	r6, r0
 800b794:	10ad      	asrs	r5, r5, #2
 800b796:	d03d      	beq.n	800b814 <__pow5mult+0xa0>
 800b798:	69fc      	ldr	r4, [r7, #28]
 800b79a:	b97c      	cbnz	r4, 800b7bc <__pow5mult+0x48>
 800b79c:	2010      	movs	r0, #16
 800b79e:	f7ff fd35 	bl	800b20c <malloc>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	61f8      	str	r0, [r7, #28]
 800b7a6:	b928      	cbnz	r0, 800b7b4 <__pow5mult+0x40>
 800b7a8:	4b1d      	ldr	r3, [pc, #116]	@ (800b820 <__pow5mult+0xac>)
 800b7aa:	481e      	ldr	r0, [pc, #120]	@ (800b824 <__pow5mult+0xb0>)
 800b7ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7b0:	f001 fd1a 	bl	800d1e8 <__assert_func>
 800b7b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7b8:	6004      	str	r4, [r0, #0]
 800b7ba:	60c4      	str	r4, [r0, #12]
 800b7bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7c4:	b94c      	cbnz	r4, 800b7da <__pow5mult+0x66>
 800b7c6:	f240 2171 	movw	r1, #625	@ 0x271
 800b7ca:	4638      	mov	r0, r7
 800b7cc:	f7ff ff12 	bl	800b5f4 <__i2b>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	f04f 0900 	mov.w	r9, #0
 800b7de:	07eb      	lsls	r3, r5, #31
 800b7e0:	d50a      	bpl.n	800b7f8 <__pow5mult+0x84>
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	f7ff ff1a 	bl	800b620 <__multiply>
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	4680      	mov	r8, r0
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f7ff fe01 	bl	800b3f8 <_Bfree>
 800b7f6:	4646      	mov	r6, r8
 800b7f8:	106d      	asrs	r5, r5, #1
 800b7fa:	d00b      	beq.n	800b814 <__pow5mult+0xa0>
 800b7fc:	6820      	ldr	r0, [r4, #0]
 800b7fe:	b938      	cbnz	r0, 800b810 <__pow5mult+0x9c>
 800b800:	4622      	mov	r2, r4
 800b802:	4621      	mov	r1, r4
 800b804:	4638      	mov	r0, r7
 800b806:	f7ff ff0b 	bl	800b620 <__multiply>
 800b80a:	6020      	str	r0, [r4, #0]
 800b80c:	f8c0 9000 	str.w	r9, [r0]
 800b810:	4604      	mov	r4, r0
 800b812:	e7e4      	b.n	800b7de <__pow5mult+0x6a>
 800b814:	4630      	mov	r0, r6
 800b816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b81a:	bf00      	nop
 800b81c:	0800e1bc 	.word	0x0800e1bc
 800b820:	0800e0e2 	.word	0x0800e0e2
 800b824:	0800e162 	.word	0x0800e162

0800b828 <__lshift>:
 800b828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b82c:	460c      	mov	r4, r1
 800b82e:	6849      	ldr	r1, [r1, #4]
 800b830:	6923      	ldr	r3, [r4, #16]
 800b832:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b836:	68a3      	ldr	r3, [r4, #8]
 800b838:	4607      	mov	r7, r0
 800b83a:	4691      	mov	r9, r2
 800b83c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b840:	f108 0601 	add.w	r6, r8, #1
 800b844:	42b3      	cmp	r3, r6
 800b846:	db0b      	blt.n	800b860 <__lshift+0x38>
 800b848:	4638      	mov	r0, r7
 800b84a:	f7ff fd95 	bl	800b378 <_Balloc>
 800b84e:	4605      	mov	r5, r0
 800b850:	b948      	cbnz	r0, 800b866 <__lshift+0x3e>
 800b852:	4602      	mov	r2, r0
 800b854:	4b28      	ldr	r3, [pc, #160]	@ (800b8f8 <__lshift+0xd0>)
 800b856:	4829      	ldr	r0, [pc, #164]	@ (800b8fc <__lshift+0xd4>)
 800b858:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b85c:	f001 fcc4 	bl	800d1e8 <__assert_func>
 800b860:	3101      	adds	r1, #1
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	e7ee      	b.n	800b844 <__lshift+0x1c>
 800b866:	2300      	movs	r3, #0
 800b868:	f100 0114 	add.w	r1, r0, #20
 800b86c:	f100 0210 	add.w	r2, r0, #16
 800b870:	4618      	mov	r0, r3
 800b872:	4553      	cmp	r3, sl
 800b874:	db33      	blt.n	800b8de <__lshift+0xb6>
 800b876:	6920      	ldr	r0, [r4, #16]
 800b878:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b87c:	f104 0314 	add.w	r3, r4, #20
 800b880:	f019 091f 	ands.w	r9, r9, #31
 800b884:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b888:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b88c:	d02b      	beq.n	800b8e6 <__lshift+0xbe>
 800b88e:	f1c9 0e20 	rsb	lr, r9, #32
 800b892:	468a      	mov	sl, r1
 800b894:	2200      	movs	r2, #0
 800b896:	6818      	ldr	r0, [r3, #0]
 800b898:	fa00 f009 	lsl.w	r0, r0, r9
 800b89c:	4310      	orrs	r0, r2
 800b89e:	f84a 0b04 	str.w	r0, [sl], #4
 800b8a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8a6:	459c      	cmp	ip, r3
 800b8a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8ac:	d8f3      	bhi.n	800b896 <__lshift+0x6e>
 800b8ae:	ebac 0304 	sub.w	r3, ip, r4
 800b8b2:	3b15      	subs	r3, #21
 800b8b4:	f023 0303 	bic.w	r3, r3, #3
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	f104 0015 	add.w	r0, r4, #21
 800b8be:	4584      	cmp	ip, r0
 800b8c0:	bf38      	it	cc
 800b8c2:	2304      	movcc	r3, #4
 800b8c4:	50ca      	str	r2, [r1, r3]
 800b8c6:	b10a      	cbz	r2, 800b8cc <__lshift+0xa4>
 800b8c8:	f108 0602 	add.w	r6, r8, #2
 800b8cc:	3e01      	subs	r6, #1
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	612e      	str	r6, [r5, #16]
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	f7ff fd90 	bl	800b3f8 <_Bfree>
 800b8d8:	4628      	mov	r0, r5
 800b8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8de:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	e7c5      	b.n	800b872 <__lshift+0x4a>
 800b8e6:	3904      	subs	r1, #4
 800b8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8f0:	459c      	cmp	ip, r3
 800b8f2:	d8f9      	bhi.n	800b8e8 <__lshift+0xc0>
 800b8f4:	e7ea      	b.n	800b8cc <__lshift+0xa4>
 800b8f6:	bf00      	nop
 800b8f8:	0800e151 	.word	0x0800e151
 800b8fc:	0800e162 	.word	0x0800e162

0800b900 <__mcmp>:
 800b900:	690a      	ldr	r2, [r1, #16]
 800b902:	4603      	mov	r3, r0
 800b904:	6900      	ldr	r0, [r0, #16]
 800b906:	1a80      	subs	r0, r0, r2
 800b908:	b530      	push	{r4, r5, lr}
 800b90a:	d10e      	bne.n	800b92a <__mcmp+0x2a>
 800b90c:	3314      	adds	r3, #20
 800b90e:	3114      	adds	r1, #20
 800b910:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b914:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b918:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b91c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b920:	4295      	cmp	r5, r2
 800b922:	d003      	beq.n	800b92c <__mcmp+0x2c>
 800b924:	d205      	bcs.n	800b932 <__mcmp+0x32>
 800b926:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b92a:	bd30      	pop	{r4, r5, pc}
 800b92c:	42a3      	cmp	r3, r4
 800b92e:	d3f3      	bcc.n	800b918 <__mcmp+0x18>
 800b930:	e7fb      	b.n	800b92a <__mcmp+0x2a>
 800b932:	2001      	movs	r0, #1
 800b934:	e7f9      	b.n	800b92a <__mcmp+0x2a>
	...

0800b938 <__mdiff>:
 800b938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93c:	4689      	mov	r9, r1
 800b93e:	4606      	mov	r6, r0
 800b940:	4611      	mov	r1, r2
 800b942:	4648      	mov	r0, r9
 800b944:	4614      	mov	r4, r2
 800b946:	f7ff ffdb 	bl	800b900 <__mcmp>
 800b94a:	1e05      	subs	r5, r0, #0
 800b94c:	d112      	bne.n	800b974 <__mdiff+0x3c>
 800b94e:	4629      	mov	r1, r5
 800b950:	4630      	mov	r0, r6
 800b952:	f7ff fd11 	bl	800b378 <_Balloc>
 800b956:	4602      	mov	r2, r0
 800b958:	b928      	cbnz	r0, 800b966 <__mdiff+0x2e>
 800b95a:	4b3f      	ldr	r3, [pc, #252]	@ (800ba58 <__mdiff+0x120>)
 800b95c:	f240 2137 	movw	r1, #567	@ 0x237
 800b960:	483e      	ldr	r0, [pc, #248]	@ (800ba5c <__mdiff+0x124>)
 800b962:	f001 fc41 	bl	800d1e8 <__assert_func>
 800b966:	2301      	movs	r3, #1
 800b968:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b96c:	4610      	mov	r0, r2
 800b96e:	b003      	add	sp, #12
 800b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b974:	bfbc      	itt	lt
 800b976:	464b      	movlt	r3, r9
 800b978:	46a1      	movlt	r9, r4
 800b97a:	4630      	mov	r0, r6
 800b97c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b980:	bfba      	itte	lt
 800b982:	461c      	movlt	r4, r3
 800b984:	2501      	movlt	r5, #1
 800b986:	2500      	movge	r5, #0
 800b988:	f7ff fcf6 	bl	800b378 <_Balloc>
 800b98c:	4602      	mov	r2, r0
 800b98e:	b918      	cbnz	r0, 800b998 <__mdiff+0x60>
 800b990:	4b31      	ldr	r3, [pc, #196]	@ (800ba58 <__mdiff+0x120>)
 800b992:	f240 2145 	movw	r1, #581	@ 0x245
 800b996:	e7e3      	b.n	800b960 <__mdiff+0x28>
 800b998:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b99c:	6926      	ldr	r6, [r4, #16]
 800b99e:	60c5      	str	r5, [r0, #12]
 800b9a0:	f109 0310 	add.w	r3, r9, #16
 800b9a4:	f109 0514 	add.w	r5, r9, #20
 800b9a8:	f104 0e14 	add.w	lr, r4, #20
 800b9ac:	f100 0b14 	add.w	fp, r0, #20
 800b9b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	46d9      	mov	r9, fp
 800b9bc:	f04f 0c00 	mov.w	ip, #0
 800b9c0:	9b01      	ldr	r3, [sp, #4]
 800b9c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9ca:	9301      	str	r3, [sp, #4]
 800b9cc:	fa1f f38a 	uxth.w	r3, sl
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	b283      	uxth	r3, r0
 800b9d4:	1acb      	subs	r3, r1, r3
 800b9d6:	0c00      	lsrs	r0, r0, #16
 800b9d8:	4463      	add	r3, ip
 800b9da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b9de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b9e8:	4576      	cmp	r6, lr
 800b9ea:	f849 3b04 	str.w	r3, [r9], #4
 800b9ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9f2:	d8e5      	bhi.n	800b9c0 <__mdiff+0x88>
 800b9f4:	1b33      	subs	r3, r6, r4
 800b9f6:	3b15      	subs	r3, #21
 800b9f8:	f023 0303 	bic.w	r3, r3, #3
 800b9fc:	3415      	adds	r4, #21
 800b9fe:	3304      	adds	r3, #4
 800ba00:	42a6      	cmp	r6, r4
 800ba02:	bf38      	it	cc
 800ba04:	2304      	movcc	r3, #4
 800ba06:	441d      	add	r5, r3
 800ba08:	445b      	add	r3, fp
 800ba0a:	461e      	mov	r6, r3
 800ba0c:	462c      	mov	r4, r5
 800ba0e:	4544      	cmp	r4, r8
 800ba10:	d30e      	bcc.n	800ba30 <__mdiff+0xf8>
 800ba12:	f108 0103 	add.w	r1, r8, #3
 800ba16:	1b49      	subs	r1, r1, r5
 800ba18:	f021 0103 	bic.w	r1, r1, #3
 800ba1c:	3d03      	subs	r5, #3
 800ba1e:	45a8      	cmp	r8, r5
 800ba20:	bf38      	it	cc
 800ba22:	2100      	movcc	r1, #0
 800ba24:	440b      	add	r3, r1
 800ba26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba2a:	b191      	cbz	r1, 800ba52 <__mdiff+0x11a>
 800ba2c:	6117      	str	r7, [r2, #16]
 800ba2e:	e79d      	b.n	800b96c <__mdiff+0x34>
 800ba30:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba34:	46e6      	mov	lr, ip
 800ba36:	0c08      	lsrs	r0, r1, #16
 800ba38:	fa1c fc81 	uxtah	ip, ip, r1
 800ba3c:	4471      	add	r1, lr
 800ba3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba42:	b289      	uxth	r1, r1
 800ba44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba48:	f846 1b04 	str.w	r1, [r6], #4
 800ba4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba50:	e7dd      	b.n	800ba0e <__mdiff+0xd6>
 800ba52:	3f01      	subs	r7, #1
 800ba54:	e7e7      	b.n	800ba26 <__mdiff+0xee>
 800ba56:	bf00      	nop
 800ba58:	0800e151 	.word	0x0800e151
 800ba5c:	0800e162 	.word	0x0800e162

0800ba60 <__ulp>:
 800ba60:	b082      	sub	sp, #8
 800ba62:	ed8d 0b00 	vstr	d0, [sp]
 800ba66:	9a01      	ldr	r2, [sp, #4]
 800ba68:	4b0f      	ldr	r3, [pc, #60]	@ (800baa8 <__ulp+0x48>)
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	dc08      	bgt.n	800ba86 <__ulp+0x26>
 800ba74:	425b      	negs	r3, r3
 800ba76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ba7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba7e:	da04      	bge.n	800ba8a <__ulp+0x2a>
 800ba80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ba84:	4113      	asrs	r3, r2
 800ba86:	2200      	movs	r2, #0
 800ba88:	e008      	b.n	800ba9c <__ulp+0x3c>
 800ba8a:	f1a2 0314 	sub.w	r3, r2, #20
 800ba8e:	2b1e      	cmp	r3, #30
 800ba90:	bfda      	itte	le
 800ba92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ba96:	40da      	lsrle	r2, r3
 800ba98:	2201      	movgt	r2, #1
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	ec41 0b10 	vmov	d0, r0, r1
 800baa4:	b002      	add	sp, #8
 800baa6:	4770      	bx	lr
 800baa8:	7ff00000 	.word	0x7ff00000

0800baac <__b2d>:
 800baac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab0:	6906      	ldr	r6, [r0, #16]
 800bab2:	f100 0814 	add.w	r8, r0, #20
 800bab6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800baba:	1f37      	subs	r7, r6, #4
 800babc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bac0:	4610      	mov	r0, r2
 800bac2:	f7ff fd4b 	bl	800b55c <__hi0bits>
 800bac6:	f1c0 0320 	rsb	r3, r0, #32
 800baca:	280a      	cmp	r0, #10
 800bacc:	600b      	str	r3, [r1, #0]
 800bace:	491b      	ldr	r1, [pc, #108]	@ (800bb3c <__b2d+0x90>)
 800bad0:	dc15      	bgt.n	800bafe <__b2d+0x52>
 800bad2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bad6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bada:	45b8      	cmp	r8, r7
 800badc:	ea43 0501 	orr.w	r5, r3, r1
 800bae0:	bf34      	ite	cc
 800bae2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bae6:	2300      	movcs	r3, #0
 800bae8:	3015      	adds	r0, #21
 800baea:	fa02 f000 	lsl.w	r0, r2, r0
 800baee:	fa23 f30c 	lsr.w	r3, r3, ip
 800baf2:	4303      	orrs	r3, r0
 800baf4:	461c      	mov	r4, r3
 800baf6:	ec45 4b10 	vmov	d0, r4, r5
 800bafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bafe:	45b8      	cmp	r8, r7
 800bb00:	bf3a      	itte	cc
 800bb02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb06:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb0a:	2300      	movcs	r3, #0
 800bb0c:	380b      	subs	r0, #11
 800bb0e:	d012      	beq.n	800bb36 <__b2d+0x8a>
 800bb10:	f1c0 0120 	rsb	r1, r0, #32
 800bb14:	fa23 f401 	lsr.w	r4, r3, r1
 800bb18:	4082      	lsls	r2, r0
 800bb1a:	4322      	orrs	r2, r4
 800bb1c:	4547      	cmp	r7, r8
 800bb1e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bb22:	bf8c      	ite	hi
 800bb24:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb28:	2200      	movls	r2, #0
 800bb2a:	4083      	lsls	r3, r0
 800bb2c:	40ca      	lsrs	r2, r1
 800bb2e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb32:	4313      	orrs	r3, r2
 800bb34:	e7de      	b.n	800baf4 <__b2d+0x48>
 800bb36:	ea42 0501 	orr.w	r5, r2, r1
 800bb3a:	e7db      	b.n	800baf4 <__b2d+0x48>
 800bb3c:	3ff00000 	.word	0x3ff00000

0800bb40 <__d2b>:
 800bb40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb44:	460f      	mov	r7, r1
 800bb46:	2101      	movs	r1, #1
 800bb48:	ec59 8b10 	vmov	r8, r9, d0
 800bb4c:	4616      	mov	r6, r2
 800bb4e:	f7ff fc13 	bl	800b378 <_Balloc>
 800bb52:	4604      	mov	r4, r0
 800bb54:	b930      	cbnz	r0, 800bb64 <__d2b+0x24>
 800bb56:	4602      	mov	r2, r0
 800bb58:	4b23      	ldr	r3, [pc, #140]	@ (800bbe8 <__d2b+0xa8>)
 800bb5a:	4824      	ldr	r0, [pc, #144]	@ (800bbec <__d2b+0xac>)
 800bb5c:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb60:	f001 fb42 	bl	800d1e8 <__assert_func>
 800bb64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb6c:	b10d      	cbz	r5, 800bb72 <__d2b+0x32>
 800bb6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb72:	9301      	str	r3, [sp, #4]
 800bb74:	f1b8 0300 	subs.w	r3, r8, #0
 800bb78:	d023      	beq.n	800bbc2 <__d2b+0x82>
 800bb7a:	4668      	mov	r0, sp
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	f7ff fd0c 	bl	800b59a <__lo0bits>
 800bb82:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb86:	b1d0      	cbz	r0, 800bbbe <__d2b+0x7e>
 800bb88:	f1c0 0320 	rsb	r3, r0, #32
 800bb8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb90:	430b      	orrs	r3, r1
 800bb92:	40c2      	lsrs	r2, r0
 800bb94:	6163      	str	r3, [r4, #20]
 800bb96:	9201      	str	r2, [sp, #4]
 800bb98:	9b01      	ldr	r3, [sp, #4]
 800bb9a:	61a3      	str	r3, [r4, #24]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bf0c      	ite	eq
 800bba0:	2201      	moveq	r2, #1
 800bba2:	2202      	movne	r2, #2
 800bba4:	6122      	str	r2, [r4, #16]
 800bba6:	b1a5      	cbz	r5, 800bbd2 <__d2b+0x92>
 800bba8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bbac:	4405      	add	r5, r0
 800bbae:	603d      	str	r5, [r7, #0]
 800bbb0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bbb4:	6030      	str	r0, [r6, #0]
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	b003      	add	sp, #12
 800bbba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbbe:	6161      	str	r1, [r4, #20]
 800bbc0:	e7ea      	b.n	800bb98 <__d2b+0x58>
 800bbc2:	a801      	add	r0, sp, #4
 800bbc4:	f7ff fce9 	bl	800b59a <__lo0bits>
 800bbc8:	9b01      	ldr	r3, [sp, #4]
 800bbca:	6163      	str	r3, [r4, #20]
 800bbcc:	3020      	adds	r0, #32
 800bbce:	2201      	movs	r2, #1
 800bbd0:	e7e8      	b.n	800bba4 <__d2b+0x64>
 800bbd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bbda:	6038      	str	r0, [r7, #0]
 800bbdc:	6918      	ldr	r0, [r3, #16]
 800bbde:	f7ff fcbd 	bl	800b55c <__hi0bits>
 800bbe2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbe6:	e7e5      	b.n	800bbb4 <__d2b+0x74>
 800bbe8:	0800e151 	.word	0x0800e151
 800bbec:	0800e162 	.word	0x0800e162

0800bbf0 <__ratio>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	e9cd 1000 	strd	r1, r0, [sp]
 800bbfa:	a902      	add	r1, sp, #8
 800bbfc:	f7ff ff56 	bl	800baac <__b2d>
 800bc00:	9800      	ldr	r0, [sp, #0]
 800bc02:	a903      	add	r1, sp, #12
 800bc04:	ec55 4b10 	vmov	r4, r5, d0
 800bc08:	f7ff ff50 	bl	800baac <__b2d>
 800bc0c:	9b01      	ldr	r3, [sp, #4]
 800bc0e:	6919      	ldr	r1, [r3, #16]
 800bc10:	9b00      	ldr	r3, [sp, #0]
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	1ac9      	subs	r1, r1, r3
 800bc16:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bc1a:	1a9b      	subs	r3, r3, r2
 800bc1c:	ec5b ab10 	vmov	sl, fp, d0
 800bc20:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	bfce      	itee	gt
 800bc28:	462a      	movgt	r2, r5
 800bc2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc2e:	465a      	movle	r2, fp
 800bc30:	462f      	mov	r7, r5
 800bc32:	46d9      	mov	r9, fp
 800bc34:	bfcc      	ite	gt
 800bc36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bc3a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bc3e:	464b      	mov	r3, r9
 800bc40:	4652      	mov	r2, sl
 800bc42:	4620      	mov	r0, r4
 800bc44:	4639      	mov	r1, r7
 800bc46:	f7f4 fe29 	bl	800089c <__aeabi_ddiv>
 800bc4a:	ec41 0b10 	vmov	d0, r0, r1
 800bc4e:	b005      	add	sp, #20
 800bc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc54 <__copybits>:
 800bc54:	3901      	subs	r1, #1
 800bc56:	b570      	push	{r4, r5, r6, lr}
 800bc58:	1149      	asrs	r1, r1, #5
 800bc5a:	6914      	ldr	r4, [r2, #16]
 800bc5c:	3101      	adds	r1, #1
 800bc5e:	f102 0314 	add.w	r3, r2, #20
 800bc62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc6a:	1f05      	subs	r5, r0, #4
 800bc6c:	42a3      	cmp	r3, r4
 800bc6e:	d30c      	bcc.n	800bc8a <__copybits+0x36>
 800bc70:	1aa3      	subs	r3, r4, r2
 800bc72:	3b11      	subs	r3, #17
 800bc74:	f023 0303 	bic.w	r3, r3, #3
 800bc78:	3211      	adds	r2, #17
 800bc7a:	42a2      	cmp	r2, r4
 800bc7c:	bf88      	it	hi
 800bc7e:	2300      	movhi	r3, #0
 800bc80:	4418      	add	r0, r3
 800bc82:	2300      	movs	r3, #0
 800bc84:	4288      	cmp	r0, r1
 800bc86:	d305      	bcc.n	800bc94 <__copybits+0x40>
 800bc88:	bd70      	pop	{r4, r5, r6, pc}
 800bc8a:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc8e:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc92:	e7eb      	b.n	800bc6c <__copybits+0x18>
 800bc94:	f840 3b04 	str.w	r3, [r0], #4
 800bc98:	e7f4      	b.n	800bc84 <__copybits+0x30>

0800bc9a <__any_on>:
 800bc9a:	f100 0214 	add.w	r2, r0, #20
 800bc9e:	6900      	ldr	r0, [r0, #16]
 800bca0:	114b      	asrs	r3, r1, #5
 800bca2:	4298      	cmp	r0, r3
 800bca4:	b510      	push	{r4, lr}
 800bca6:	db11      	blt.n	800bccc <__any_on+0x32>
 800bca8:	dd0a      	ble.n	800bcc0 <__any_on+0x26>
 800bcaa:	f011 011f 	ands.w	r1, r1, #31
 800bcae:	d007      	beq.n	800bcc0 <__any_on+0x26>
 800bcb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bcb4:	fa24 f001 	lsr.w	r0, r4, r1
 800bcb8:	fa00 f101 	lsl.w	r1, r0, r1
 800bcbc:	428c      	cmp	r4, r1
 800bcbe:	d10b      	bne.n	800bcd8 <__any_on+0x3e>
 800bcc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d803      	bhi.n	800bcd0 <__any_on+0x36>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	bd10      	pop	{r4, pc}
 800bccc:	4603      	mov	r3, r0
 800bcce:	e7f7      	b.n	800bcc0 <__any_on+0x26>
 800bcd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcd4:	2900      	cmp	r1, #0
 800bcd6:	d0f5      	beq.n	800bcc4 <__any_on+0x2a>
 800bcd8:	2001      	movs	r0, #1
 800bcda:	e7f6      	b.n	800bcca <__any_on+0x30>

0800bcdc <sulp>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	4604      	mov	r4, r0
 800bce0:	460d      	mov	r5, r1
 800bce2:	ec45 4b10 	vmov	d0, r4, r5
 800bce6:	4616      	mov	r6, r2
 800bce8:	f7ff feba 	bl	800ba60 <__ulp>
 800bcec:	ec51 0b10 	vmov	r0, r1, d0
 800bcf0:	b17e      	cbz	r6, 800bd12 <sulp+0x36>
 800bcf2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bcf6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	dd09      	ble.n	800bd12 <sulp+0x36>
 800bcfe:	051b      	lsls	r3, r3, #20
 800bd00:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bd04:	2400      	movs	r4, #0
 800bd06:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bd0a:	4622      	mov	r2, r4
 800bd0c:	462b      	mov	r3, r5
 800bd0e:	f7f4 fc9b 	bl	8000648 <__aeabi_dmul>
 800bd12:	ec41 0b10 	vmov	d0, r0, r1
 800bd16:	bd70      	pop	{r4, r5, r6, pc}

0800bd18 <_strtod_l>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	b09f      	sub	sp, #124	@ 0x7c
 800bd1e:	460c      	mov	r4, r1
 800bd20:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bd22:	2200      	movs	r2, #0
 800bd24:	921a      	str	r2, [sp, #104]	@ 0x68
 800bd26:	9005      	str	r0, [sp, #20]
 800bd28:	f04f 0a00 	mov.w	sl, #0
 800bd2c:	f04f 0b00 	mov.w	fp, #0
 800bd30:	460a      	mov	r2, r1
 800bd32:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd34:	7811      	ldrb	r1, [r2, #0]
 800bd36:	292b      	cmp	r1, #43	@ 0x2b
 800bd38:	d04a      	beq.n	800bdd0 <_strtod_l+0xb8>
 800bd3a:	d838      	bhi.n	800bdae <_strtod_l+0x96>
 800bd3c:	290d      	cmp	r1, #13
 800bd3e:	d832      	bhi.n	800bda6 <_strtod_l+0x8e>
 800bd40:	2908      	cmp	r1, #8
 800bd42:	d832      	bhi.n	800bdaa <_strtod_l+0x92>
 800bd44:	2900      	cmp	r1, #0
 800bd46:	d03b      	beq.n	800bdc0 <_strtod_l+0xa8>
 800bd48:	2200      	movs	r2, #0
 800bd4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bd4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bd4e:	782a      	ldrb	r2, [r5, #0]
 800bd50:	2a30      	cmp	r2, #48	@ 0x30
 800bd52:	f040 80b3 	bne.w	800bebc <_strtod_l+0x1a4>
 800bd56:	786a      	ldrb	r2, [r5, #1]
 800bd58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd5c:	2a58      	cmp	r2, #88	@ 0x58
 800bd5e:	d16e      	bne.n	800be3e <_strtod_l+0x126>
 800bd60:	9302      	str	r3, [sp, #8]
 800bd62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd64:	9301      	str	r3, [sp, #4]
 800bd66:	ab1a      	add	r3, sp, #104	@ 0x68
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	4a8e      	ldr	r2, [pc, #568]	@ (800bfa4 <_strtod_l+0x28c>)
 800bd6c:	9805      	ldr	r0, [sp, #20]
 800bd6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bd70:	a919      	add	r1, sp, #100	@ 0x64
 800bd72:	f001 fad3 	bl	800d31c <__gethex>
 800bd76:	f010 060f 	ands.w	r6, r0, #15
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	d005      	beq.n	800bd8a <_strtod_l+0x72>
 800bd7e:	2e06      	cmp	r6, #6
 800bd80:	d128      	bne.n	800bdd4 <_strtod_l+0xbc>
 800bd82:	3501      	adds	r5, #1
 800bd84:	2300      	movs	r3, #0
 800bd86:	9519      	str	r5, [sp, #100]	@ 0x64
 800bd88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f040 858e 	bne.w	800c8ae <_strtod_l+0xb96>
 800bd92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd94:	b1cb      	cbz	r3, 800bdca <_strtod_l+0xb2>
 800bd96:	4652      	mov	r2, sl
 800bd98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bd9c:	ec43 2b10 	vmov	d0, r2, r3
 800bda0:	b01f      	add	sp, #124	@ 0x7c
 800bda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda6:	2920      	cmp	r1, #32
 800bda8:	d1ce      	bne.n	800bd48 <_strtod_l+0x30>
 800bdaa:	3201      	adds	r2, #1
 800bdac:	e7c1      	b.n	800bd32 <_strtod_l+0x1a>
 800bdae:	292d      	cmp	r1, #45	@ 0x2d
 800bdb0:	d1ca      	bne.n	800bd48 <_strtod_l+0x30>
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bdb6:	1c51      	adds	r1, r2, #1
 800bdb8:	9119      	str	r1, [sp, #100]	@ 0x64
 800bdba:	7852      	ldrb	r2, [r2, #1]
 800bdbc:	2a00      	cmp	r2, #0
 800bdbe:	d1c5      	bne.n	800bd4c <_strtod_l+0x34>
 800bdc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bdc2:	9419      	str	r4, [sp, #100]	@ 0x64
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f040 8570 	bne.w	800c8aa <_strtod_l+0xb92>
 800bdca:	4652      	mov	r2, sl
 800bdcc:	465b      	mov	r3, fp
 800bdce:	e7e5      	b.n	800bd9c <_strtod_l+0x84>
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	e7ef      	b.n	800bdb4 <_strtod_l+0x9c>
 800bdd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bdd6:	b13a      	cbz	r2, 800bde8 <_strtod_l+0xd0>
 800bdd8:	2135      	movs	r1, #53	@ 0x35
 800bdda:	a81c      	add	r0, sp, #112	@ 0x70
 800bddc:	f7ff ff3a 	bl	800bc54 <__copybits>
 800bde0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bde2:	9805      	ldr	r0, [sp, #20]
 800bde4:	f7ff fb08 	bl	800b3f8 <_Bfree>
 800bde8:	3e01      	subs	r6, #1
 800bdea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bdec:	2e04      	cmp	r6, #4
 800bdee:	d806      	bhi.n	800bdfe <_strtod_l+0xe6>
 800bdf0:	e8df f006 	tbb	[pc, r6]
 800bdf4:	201d0314 	.word	0x201d0314
 800bdf8:	14          	.byte	0x14
 800bdf9:	00          	.byte	0x00
 800bdfa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bdfe:	05e1      	lsls	r1, r4, #23
 800be00:	bf48      	it	mi
 800be02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800be06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be0a:	0d1b      	lsrs	r3, r3, #20
 800be0c:	051b      	lsls	r3, r3, #20
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1bb      	bne.n	800bd8a <_strtod_l+0x72>
 800be12:	f7fe fb31 	bl	800a478 <__errno>
 800be16:	2322      	movs	r3, #34	@ 0x22
 800be18:	6003      	str	r3, [r0, #0]
 800be1a:	e7b6      	b.n	800bd8a <_strtod_l+0x72>
 800be1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800be20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800be24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800be28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be2c:	e7e7      	b.n	800bdfe <_strtod_l+0xe6>
 800be2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bfac <_strtod_l+0x294>
 800be32:	e7e4      	b.n	800bdfe <_strtod_l+0xe6>
 800be34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800be38:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800be3c:	e7df      	b.n	800bdfe <_strtod_l+0xe6>
 800be3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	9219      	str	r2, [sp, #100]	@ 0x64
 800be44:	785b      	ldrb	r3, [r3, #1]
 800be46:	2b30      	cmp	r3, #48	@ 0x30
 800be48:	d0f9      	beq.n	800be3e <_strtod_l+0x126>
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d09d      	beq.n	800bd8a <_strtod_l+0x72>
 800be4e:	2301      	movs	r3, #1
 800be50:	9309      	str	r3, [sp, #36]	@ 0x24
 800be52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be54:	930c      	str	r3, [sp, #48]	@ 0x30
 800be56:	2300      	movs	r3, #0
 800be58:	9308      	str	r3, [sp, #32]
 800be5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800be5c:	461f      	mov	r7, r3
 800be5e:	220a      	movs	r2, #10
 800be60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800be62:	7805      	ldrb	r5, [r0, #0]
 800be64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800be68:	b2d9      	uxtb	r1, r3
 800be6a:	2909      	cmp	r1, #9
 800be6c:	d928      	bls.n	800bec0 <_strtod_l+0x1a8>
 800be6e:	494e      	ldr	r1, [pc, #312]	@ (800bfa8 <_strtod_l+0x290>)
 800be70:	2201      	movs	r2, #1
 800be72:	f001 f95f 	bl	800d134 <strncmp>
 800be76:	2800      	cmp	r0, #0
 800be78:	d032      	beq.n	800bee0 <_strtod_l+0x1c8>
 800be7a:	2000      	movs	r0, #0
 800be7c:	462a      	mov	r2, r5
 800be7e:	4681      	mov	r9, r0
 800be80:	463d      	mov	r5, r7
 800be82:	4603      	mov	r3, r0
 800be84:	2a65      	cmp	r2, #101	@ 0x65
 800be86:	d001      	beq.n	800be8c <_strtod_l+0x174>
 800be88:	2a45      	cmp	r2, #69	@ 0x45
 800be8a:	d114      	bne.n	800beb6 <_strtod_l+0x19e>
 800be8c:	b91d      	cbnz	r5, 800be96 <_strtod_l+0x17e>
 800be8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be90:	4302      	orrs	r2, r0
 800be92:	d095      	beq.n	800bdc0 <_strtod_l+0xa8>
 800be94:	2500      	movs	r5, #0
 800be96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800be98:	1c62      	adds	r2, r4, #1
 800be9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800be9c:	7862      	ldrb	r2, [r4, #1]
 800be9e:	2a2b      	cmp	r2, #43	@ 0x2b
 800bea0:	d077      	beq.n	800bf92 <_strtod_l+0x27a>
 800bea2:	2a2d      	cmp	r2, #45	@ 0x2d
 800bea4:	d07b      	beq.n	800bf9e <_strtod_l+0x286>
 800bea6:	f04f 0c00 	mov.w	ip, #0
 800beaa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800beae:	2909      	cmp	r1, #9
 800beb0:	f240 8082 	bls.w	800bfb8 <_strtod_l+0x2a0>
 800beb4:	9419      	str	r4, [sp, #100]	@ 0x64
 800beb6:	f04f 0800 	mov.w	r8, #0
 800beba:	e0a2      	b.n	800c002 <_strtod_l+0x2ea>
 800bebc:	2300      	movs	r3, #0
 800bebe:	e7c7      	b.n	800be50 <_strtod_l+0x138>
 800bec0:	2f08      	cmp	r7, #8
 800bec2:	bfd5      	itete	le
 800bec4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bec6:	9908      	ldrgt	r1, [sp, #32]
 800bec8:	fb02 3301 	mlale	r3, r2, r1, r3
 800becc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bed0:	f100 0001 	add.w	r0, r0, #1
 800bed4:	bfd4      	ite	le
 800bed6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bed8:	9308      	strgt	r3, [sp, #32]
 800beda:	3701      	adds	r7, #1
 800bedc:	9019      	str	r0, [sp, #100]	@ 0x64
 800bede:	e7bf      	b.n	800be60 <_strtod_l+0x148>
 800bee0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	9219      	str	r2, [sp, #100]	@ 0x64
 800bee6:	785a      	ldrb	r2, [r3, #1]
 800bee8:	b37f      	cbz	r7, 800bf4a <_strtod_l+0x232>
 800beea:	4681      	mov	r9, r0
 800beec:	463d      	mov	r5, r7
 800beee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bef2:	2b09      	cmp	r3, #9
 800bef4:	d912      	bls.n	800bf1c <_strtod_l+0x204>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e7c4      	b.n	800be84 <_strtod_l+0x16c>
 800befa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800befc:	1c5a      	adds	r2, r3, #1
 800befe:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf00:	785a      	ldrb	r2, [r3, #1]
 800bf02:	3001      	adds	r0, #1
 800bf04:	2a30      	cmp	r2, #48	@ 0x30
 800bf06:	d0f8      	beq.n	800befa <_strtod_l+0x1e2>
 800bf08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bf0c:	2b08      	cmp	r3, #8
 800bf0e:	f200 84d3 	bhi.w	800c8b8 <_strtod_l+0xba0>
 800bf12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf14:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf16:	4681      	mov	r9, r0
 800bf18:	2000      	movs	r0, #0
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	3a30      	subs	r2, #48	@ 0x30
 800bf1e:	f100 0301 	add.w	r3, r0, #1
 800bf22:	d02a      	beq.n	800bf7a <_strtod_l+0x262>
 800bf24:	4499      	add	r9, r3
 800bf26:	eb00 0c05 	add.w	ip, r0, r5
 800bf2a:	462b      	mov	r3, r5
 800bf2c:	210a      	movs	r1, #10
 800bf2e:	4563      	cmp	r3, ip
 800bf30:	d10d      	bne.n	800bf4e <_strtod_l+0x236>
 800bf32:	1c69      	adds	r1, r5, #1
 800bf34:	4401      	add	r1, r0
 800bf36:	4428      	add	r0, r5
 800bf38:	2808      	cmp	r0, #8
 800bf3a:	dc16      	bgt.n	800bf6a <_strtod_l+0x252>
 800bf3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf3e:	230a      	movs	r3, #10
 800bf40:	fb03 2300 	mla	r3, r3, r0, r2
 800bf44:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf46:	2300      	movs	r3, #0
 800bf48:	e018      	b.n	800bf7c <_strtod_l+0x264>
 800bf4a:	4638      	mov	r0, r7
 800bf4c:	e7da      	b.n	800bf04 <_strtod_l+0x1ec>
 800bf4e:	2b08      	cmp	r3, #8
 800bf50:	f103 0301 	add.w	r3, r3, #1
 800bf54:	dc03      	bgt.n	800bf5e <_strtod_l+0x246>
 800bf56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bf58:	434e      	muls	r6, r1
 800bf5a:	960a      	str	r6, [sp, #40]	@ 0x28
 800bf5c:	e7e7      	b.n	800bf2e <_strtod_l+0x216>
 800bf5e:	2b10      	cmp	r3, #16
 800bf60:	bfde      	ittt	le
 800bf62:	9e08      	ldrle	r6, [sp, #32]
 800bf64:	434e      	mulle	r6, r1
 800bf66:	9608      	strle	r6, [sp, #32]
 800bf68:	e7e1      	b.n	800bf2e <_strtod_l+0x216>
 800bf6a:	280f      	cmp	r0, #15
 800bf6c:	dceb      	bgt.n	800bf46 <_strtod_l+0x22e>
 800bf6e:	9808      	ldr	r0, [sp, #32]
 800bf70:	230a      	movs	r3, #10
 800bf72:	fb03 2300 	mla	r3, r3, r0, r2
 800bf76:	9308      	str	r3, [sp, #32]
 800bf78:	e7e5      	b.n	800bf46 <_strtod_l+0x22e>
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bf7e:	1c50      	adds	r0, r2, #1
 800bf80:	9019      	str	r0, [sp, #100]	@ 0x64
 800bf82:	7852      	ldrb	r2, [r2, #1]
 800bf84:	4618      	mov	r0, r3
 800bf86:	460d      	mov	r5, r1
 800bf88:	e7b1      	b.n	800beee <_strtod_l+0x1d6>
 800bf8a:	f04f 0900 	mov.w	r9, #0
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e77d      	b.n	800be8e <_strtod_l+0x176>
 800bf92:	f04f 0c00 	mov.w	ip, #0
 800bf96:	1ca2      	adds	r2, r4, #2
 800bf98:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf9a:	78a2      	ldrb	r2, [r4, #2]
 800bf9c:	e785      	b.n	800beaa <_strtod_l+0x192>
 800bf9e:	f04f 0c01 	mov.w	ip, #1
 800bfa2:	e7f8      	b.n	800bf96 <_strtod_l+0x27e>
 800bfa4:	0800e2d0 	.word	0x0800e2d0
 800bfa8:	0800e2b8 	.word	0x0800e2b8
 800bfac:	7ff00000 	.word	0x7ff00000
 800bfb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bfb2:	1c51      	adds	r1, r2, #1
 800bfb4:	9119      	str	r1, [sp, #100]	@ 0x64
 800bfb6:	7852      	ldrb	r2, [r2, #1]
 800bfb8:	2a30      	cmp	r2, #48	@ 0x30
 800bfba:	d0f9      	beq.n	800bfb0 <_strtod_l+0x298>
 800bfbc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bfc0:	2908      	cmp	r1, #8
 800bfc2:	f63f af78 	bhi.w	800beb6 <_strtod_l+0x19e>
 800bfc6:	3a30      	subs	r2, #48	@ 0x30
 800bfc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bfca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bfcc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bfce:	f04f 080a 	mov.w	r8, #10
 800bfd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bfd4:	1c56      	adds	r6, r2, #1
 800bfd6:	9619      	str	r6, [sp, #100]	@ 0x64
 800bfd8:	7852      	ldrb	r2, [r2, #1]
 800bfda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bfde:	f1be 0f09 	cmp.w	lr, #9
 800bfe2:	d939      	bls.n	800c058 <_strtod_l+0x340>
 800bfe4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bfe6:	1a76      	subs	r6, r6, r1
 800bfe8:	2e08      	cmp	r6, #8
 800bfea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bfee:	dc03      	bgt.n	800bff8 <_strtod_l+0x2e0>
 800bff0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bff2:	4588      	cmp	r8, r1
 800bff4:	bfa8      	it	ge
 800bff6:	4688      	movge	r8, r1
 800bff8:	f1bc 0f00 	cmp.w	ip, #0
 800bffc:	d001      	beq.n	800c002 <_strtod_l+0x2ea>
 800bffe:	f1c8 0800 	rsb	r8, r8, #0
 800c002:	2d00      	cmp	r5, #0
 800c004:	d14e      	bne.n	800c0a4 <_strtod_l+0x38c>
 800c006:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c008:	4308      	orrs	r0, r1
 800c00a:	f47f aebe 	bne.w	800bd8a <_strtod_l+0x72>
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f47f aed6 	bne.w	800bdc0 <_strtod_l+0xa8>
 800c014:	2a69      	cmp	r2, #105	@ 0x69
 800c016:	d028      	beq.n	800c06a <_strtod_l+0x352>
 800c018:	dc25      	bgt.n	800c066 <_strtod_l+0x34e>
 800c01a:	2a49      	cmp	r2, #73	@ 0x49
 800c01c:	d025      	beq.n	800c06a <_strtod_l+0x352>
 800c01e:	2a4e      	cmp	r2, #78	@ 0x4e
 800c020:	f47f aece 	bne.w	800bdc0 <_strtod_l+0xa8>
 800c024:	499b      	ldr	r1, [pc, #620]	@ (800c294 <_strtod_l+0x57c>)
 800c026:	a819      	add	r0, sp, #100	@ 0x64
 800c028:	f001 fb9a 	bl	800d760 <__match>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	f43f aec7 	beq.w	800bdc0 <_strtod_l+0xa8>
 800c032:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	2b28      	cmp	r3, #40	@ 0x28
 800c038:	d12e      	bne.n	800c098 <_strtod_l+0x380>
 800c03a:	4997      	ldr	r1, [pc, #604]	@ (800c298 <_strtod_l+0x580>)
 800c03c:	aa1c      	add	r2, sp, #112	@ 0x70
 800c03e:	a819      	add	r0, sp, #100	@ 0x64
 800c040:	f001 fba2 	bl	800d788 <__hexnan>
 800c044:	2805      	cmp	r0, #5
 800c046:	d127      	bne.n	800c098 <_strtod_l+0x380>
 800c048:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c04a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c04e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c052:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c056:	e698      	b.n	800bd8a <_strtod_l+0x72>
 800c058:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c05a:	fb08 2101 	mla	r1, r8, r1, r2
 800c05e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c062:	920e      	str	r2, [sp, #56]	@ 0x38
 800c064:	e7b5      	b.n	800bfd2 <_strtod_l+0x2ba>
 800c066:	2a6e      	cmp	r2, #110	@ 0x6e
 800c068:	e7da      	b.n	800c020 <_strtod_l+0x308>
 800c06a:	498c      	ldr	r1, [pc, #560]	@ (800c29c <_strtod_l+0x584>)
 800c06c:	a819      	add	r0, sp, #100	@ 0x64
 800c06e:	f001 fb77 	bl	800d760 <__match>
 800c072:	2800      	cmp	r0, #0
 800c074:	f43f aea4 	beq.w	800bdc0 <_strtod_l+0xa8>
 800c078:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c07a:	4989      	ldr	r1, [pc, #548]	@ (800c2a0 <_strtod_l+0x588>)
 800c07c:	3b01      	subs	r3, #1
 800c07e:	a819      	add	r0, sp, #100	@ 0x64
 800c080:	9319      	str	r3, [sp, #100]	@ 0x64
 800c082:	f001 fb6d 	bl	800d760 <__match>
 800c086:	b910      	cbnz	r0, 800c08e <_strtod_l+0x376>
 800c088:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c08a:	3301      	adds	r3, #1
 800c08c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c08e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c2b0 <_strtod_l+0x598>
 800c092:	f04f 0a00 	mov.w	sl, #0
 800c096:	e678      	b.n	800bd8a <_strtod_l+0x72>
 800c098:	4882      	ldr	r0, [pc, #520]	@ (800c2a4 <_strtod_l+0x58c>)
 800c09a:	f001 f89d 	bl	800d1d8 <nan>
 800c09e:	ec5b ab10 	vmov	sl, fp, d0
 800c0a2:	e672      	b.n	800bd8a <_strtod_l+0x72>
 800c0a4:	eba8 0309 	sub.w	r3, r8, r9
 800c0a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c0aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0ac:	2f00      	cmp	r7, #0
 800c0ae:	bf08      	it	eq
 800c0b0:	462f      	moveq	r7, r5
 800c0b2:	2d10      	cmp	r5, #16
 800c0b4:	462c      	mov	r4, r5
 800c0b6:	bfa8      	it	ge
 800c0b8:	2410      	movge	r4, #16
 800c0ba:	f7f4 fa4b 	bl	8000554 <__aeabi_ui2d>
 800c0be:	2d09      	cmp	r5, #9
 800c0c0:	4682      	mov	sl, r0
 800c0c2:	468b      	mov	fp, r1
 800c0c4:	dc13      	bgt.n	800c0ee <_strtod_l+0x3d6>
 800c0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f43f ae5e 	beq.w	800bd8a <_strtod_l+0x72>
 800c0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d0:	dd78      	ble.n	800c1c4 <_strtod_l+0x4ac>
 800c0d2:	2b16      	cmp	r3, #22
 800c0d4:	dc5f      	bgt.n	800c196 <_strtod_l+0x47e>
 800c0d6:	4974      	ldr	r1, [pc, #464]	@ (800c2a8 <_strtod_l+0x590>)
 800c0d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c0dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0e0:	4652      	mov	r2, sl
 800c0e2:	465b      	mov	r3, fp
 800c0e4:	f7f4 fab0 	bl	8000648 <__aeabi_dmul>
 800c0e8:	4682      	mov	sl, r0
 800c0ea:	468b      	mov	fp, r1
 800c0ec:	e64d      	b.n	800bd8a <_strtod_l+0x72>
 800c0ee:	4b6e      	ldr	r3, [pc, #440]	@ (800c2a8 <_strtod_l+0x590>)
 800c0f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c0f8:	f7f4 faa6 	bl	8000648 <__aeabi_dmul>
 800c0fc:	4682      	mov	sl, r0
 800c0fe:	9808      	ldr	r0, [sp, #32]
 800c100:	468b      	mov	fp, r1
 800c102:	f7f4 fa27 	bl	8000554 <__aeabi_ui2d>
 800c106:	4602      	mov	r2, r0
 800c108:	460b      	mov	r3, r1
 800c10a:	4650      	mov	r0, sl
 800c10c:	4659      	mov	r1, fp
 800c10e:	f7f4 f8e5 	bl	80002dc <__adddf3>
 800c112:	2d0f      	cmp	r5, #15
 800c114:	4682      	mov	sl, r0
 800c116:	468b      	mov	fp, r1
 800c118:	ddd5      	ble.n	800c0c6 <_strtod_l+0x3ae>
 800c11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c11c:	1b2c      	subs	r4, r5, r4
 800c11e:	441c      	add	r4, r3
 800c120:	2c00      	cmp	r4, #0
 800c122:	f340 8096 	ble.w	800c252 <_strtod_l+0x53a>
 800c126:	f014 030f 	ands.w	r3, r4, #15
 800c12a:	d00a      	beq.n	800c142 <_strtod_l+0x42a>
 800c12c:	495e      	ldr	r1, [pc, #376]	@ (800c2a8 <_strtod_l+0x590>)
 800c12e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c132:	4652      	mov	r2, sl
 800c134:	465b      	mov	r3, fp
 800c136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c13a:	f7f4 fa85 	bl	8000648 <__aeabi_dmul>
 800c13e:	4682      	mov	sl, r0
 800c140:	468b      	mov	fp, r1
 800c142:	f034 040f 	bics.w	r4, r4, #15
 800c146:	d073      	beq.n	800c230 <_strtod_l+0x518>
 800c148:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c14c:	dd48      	ble.n	800c1e0 <_strtod_l+0x4c8>
 800c14e:	2400      	movs	r4, #0
 800c150:	46a0      	mov	r8, r4
 800c152:	940a      	str	r4, [sp, #40]	@ 0x28
 800c154:	46a1      	mov	r9, r4
 800c156:	9a05      	ldr	r2, [sp, #20]
 800c158:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c2b0 <_strtod_l+0x598>
 800c15c:	2322      	movs	r3, #34	@ 0x22
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	f04f 0a00 	mov.w	sl, #0
 800c164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c166:	2b00      	cmp	r3, #0
 800c168:	f43f ae0f 	beq.w	800bd8a <_strtod_l+0x72>
 800c16c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c16e:	9805      	ldr	r0, [sp, #20]
 800c170:	f7ff f942 	bl	800b3f8 <_Bfree>
 800c174:	9805      	ldr	r0, [sp, #20]
 800c176:	4649      	mov	r1, r9
 800c178:	f7ff f93e 	bl	800b3f8 <_Bfree>
 800c17c:	9805      	ldr	r0, [sp, #20]
 800c17e:	4641      	mov	r1, r8
 800c180:	f7ff f93a 	bl	800b3f8 <_Bfree>
 800c184:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c186:	9805      	ldr	r0, [sp, #20]
 800c188:	f7ff f936 	bl	800b3f8 <_Bfree>
 800c18c:	9805      	ldr	r0, [sp, #20]
 800c18e:	4621      	mov	r1, r4
 800c190:	f7ff f932 	bl	800b3f8 <_Bfree>
 800c194:	e5f9      	b.n	800bd8a <_strtod_l+0x72>
 800c196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c198:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c19c:	4293      	cmp	r3, r2
 800c19e:	dbbc      	blt.n	800c11a <_strtod_l+0x402>
 800c1a0:	4c41      	ldr	r4, [pc, #260]	@ (800c2a8 <_strtod_l+0x590>)
 800c1a2:	f1c5 050f 	rsb	r5, r5, #15
 800c1a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c1aa:	4652      	mov	r2, sl
 800c1ac:	465b      	mov	r3, fp
 800c1ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1b2:	f7f4 fa49 	bl	8000648 <__aeabi_dmul>
 800c1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b8:	1b5d      	subs	r5, r3, r5
 800c1ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c1be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c1c2:	e78f      	b.n	800c0e4 <_strtod_l+0x3cc>
 800c1c4:	3316      	adds	r3, #22
 800c1c6:	dba8      	blt.n	800c11a <_strtod_l+0x402>
 800c1c8:	4b37      	ldr	r3, [pc, #220]	@ (800c2a8 <_strtod_l+0x590>)
 800c1ca:	eba9 0808 	sub.w	r8, r9, r8
 800c1ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c1d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c1d6:	4650      	mov	r0, sl
 800c1d8:	4659      	mov	r1, fp
 800c1da:	f7f4 fb5f 	bl	800089c <__aeabi_ddiv>
 800c1de:	e783      	b.n	800c0e8 <_strtod_l+0x3d0>
 800c1e0:	4b32      	ldr	r3, [pc, #200]	@ (800c2ac <_strtod_l+0x594>)
 800c1e2:	9308      	str	r3, [sp, #32]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	1124      	asrs	r4, r4, #4
 800c1e8:	4650      	mov	r0, sl
 800c1ea:	4659      	mov	r1, fp
 800c1ec:	461e      	mov	r6, r3
 800c1ee:	2c01      	cmp	r4, #1
 800c1f0:	dc21      	bgt.n	800c236 <_strtod_l+0x51e>
 800c1f2:	b10b      	cbz	r3, 800c1f8 <_strtod_l+0x4e0>
 800c1f4:	4682      	mov	sl, r0
 800c1f6:	468b      	mov	fp, r1
 800c1f8:	492c      	ldr	r1, [pc, #176]	@ (800c2ac <_strtod_l+0x594>)
 800c1fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c1fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c202:	4652      	mov	r2, sl
 800c204:	465b      	mov	r3, fp
 800c206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c20a:	f7f4 fa1d 	bl	8000648 <__aeabi_dmul>
 800c20e:	4b28      	ldr	r3, [pc, #160]	@ (800c2b0 <_strtod_l+0x598>)
 800c210:	460a      	mov	r2, r1
 800c212:	400b      	ands	r3, r1
 800c214:	4927      	ldr	r1, [pc, #156]	@ (800c2b4 <_strtod_l+0x59c>)
 800c216:	428b      	cmp	r3, r1
 800c218:	4682      	mov	sl, r0
 800c21a:	d898      	bhi.n	800c14e <_strtod_l+0x436>
 800c21c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c220:	428b      	cmp	r3, r1
 800c222:	bf86      	itte	hi
 800c224:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c2b8 <_strtod_l+0x5a0>
 800c228:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800c22c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c230:	2300      	movs	r3, #0
 800c232:	9308      	str	r3, [sp, #32]
 800c234:	e07a      	b.n	800c32c <_strtod_l+0x614>
 800c236:	07e2      	lsls	r2, r4, #31
 800c238:	d505      	bpl.n	800c246 <_strtod_l+0x52e>
 800c23a:	9b08      	ldr	r3, [sp, #32]
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	f7f4 fa02 	bl	8000648 <__aeabi_dmul>
 800c244:	2301      	movs	r3, #1
 800c246:	9a08      	ldr	r2, [sp, #32]
 800c248:	3208      	adds	r2, #8
 800c24a:	3601      	adds	r6, #1
 800c24c:	1064      	asrs	r4, r4, #1
 800c24e:	9208      	str	r2, [sp, #32]
 800c250:	e7cd      	b.n	800c1ee <_strtod_l+0x4d6>
 800c252:	d0ed      	beq.n	800c230 <_strtod_l+0x518>
 800c254:	4264      	negs	r4, r4
 800c256:	f014 020f 	ands.w	r2, r4, #15
 800c25a:	d00a      	beq.n	800c272 <_strtod_l+0x55a>
 800c25c:	4b12      	ldr	r3, [pc, #72]	@ (800c2a8 <_strtod_l+0x590>)
 800c25e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c262:	4650      	mov	r0, sl
 800c264:	4659      	mov	r1, fp
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	f7f4 fb17 	bl	800089c <__aeabi_ddiv>
 800c26e:	4682      	mov	sl, r0
 800c270:	468b      	mov	fp, r1
 800c272:	1124      	asrs	r4, r4, #4
 800c274:	d0dc      	beq.n	800c230 <_strtod_l+0x518>
 800c276:	2c1f      	cmp	r4, #31
 800c278:	dd20      	ble.n	800c2bc <_strtod_l+0x5a4>
 800c27a:	2400      	movs	r4, #0
 800c27c:	46a0      	mov	r8, r4
 800c27e:	940a      	str	r4, [sp, #40]	@ 0x28
 800c280:	46a1      	mov	r9, r4
 800c282:	9a05      	ldr	r2, [sp, #20]
 800c284:	2322      	movs	r3, #34	@ 0x22
 800c286:	f04f 0a00 	mov.w	sl, #0
 800c28a:	f04f 0b00 	mov.w	fp, #0
 800c28e:	6013      	str	r3, [r2, #0]
 800c290:	e768      	b.n	800c164 <_strtod_l+0x44c>
 800c292:	bf00      	nop
 800c294:	0800e0a9 	.word	0x0800e0a9
 800c298:	0800e2bc 	.word	0x0800e2bc
 800c29c:	0800e0a1 	.word	0x0800e0a1
 800c2a0:	0800e0d8 	.word	0x0800e0d8
 800c2a4:	0800e465 	.word	0x0800e465
 800c2a8:	0800e1f0 	.word	0x0800e1f0
 800c2ac:	0800e1c8 	.word	0x0800e1c8
 800c2b0:	7ff00000 	.word	0x7ff00000
 800c2b4:	7ca00000 	.word	0x7ca00000
 800c2b8:	7fefffff 	.word	0x7fefffff
 800c2bc:	f014 0310 	ands.w	r3, r4, #16
 800c2c0:	bf18      	it	ne
 800c2c2:	236a      	movne	r3, #106	@ 0x6a
 800c2c4:	4ea9      	ldr	r6, [pc, #676]	@ (800c56c <_strtod_l+0x854>)
 800c2c6:	9308      	str	r3, [sp, #32]
 800c2c8:	4650      	mov	r0, sl
 800c2ca:	4659      	mov	r1, fp
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	07e2      	lsls	r2, r4, #31
 800c2d0:	d504      	bpl.n	800c2dc <_strtod_l+0x5c4>
 800c2d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c2d6:	f7f4 f9b7 	bl	8000648 <__aeabi_dmul>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	1064      	asrs	r4, r4, #1
 800c2de:	f106 0608 	add.w	r6, r6, #8
 800c2e2:	d1f4      	bne.n	800c2ce <_strtod_l+0x5b6>
 800c2e4:	b10b      	cbz	r3, 800c2ea <_strtod_l+0x5d2>
 800c2e6:	4682      	mov	sl, r0
 800c2e8:	468b      	mov	fp, r1
 800c2ea:	9b08      	ldr	r3, [sp, #32]
 800c2ec:	b1b3      	cbz	r3, 800c31c <_strtod_l+0x604>
 800c2ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c2f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	4659      	mov	r1, fp
 800c2fa:	dd0f      	ble.n	800c31c <_strtod_l+0x604>
 800c2fc:	2b1f      	cmp	r3, #31
 800c2fe:	dd55      	ble.n	800c3ac <_strtod_l+0x694>
 800c300:	2b34      	cmp	r3, #52	@ 0x34
 800c302:	bfde      	ittt	le
 800c304:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800c308:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c30c:	4093      	lslle	r3, r2
 800c30e:	f04f 0a00 	mov.w	sl, #0
 800c312:	bfcc      	ite	gt
 800c314:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c318:	ea03 0b01 	andle.w	fp, r3, r1
 800c31c:	2200      	movs	r2, #0
 800c31e:	2300      	movs	r3, #0
 800c320:	4650      	mov	r0, sl
 800c322:	4659      	mov	r1, fp
 800c324:	f7f4 fbf8 	bl	8000b18 <__aeabi_dcmpeq>
 800c328:	2800      	cmp	r0, #0
 800c32a:	d1a6      	bne.n	800c27a <_strtod_l+0x562>
 800c32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c332:	9805      	ldr	r0, [sp, #20]
 800c334:	462b      	mov	r3, r5
 800c336:	463a      	mov	r2, r7
 800c338:	f7ff f8c6 	bl	800b4c8 <__s2b>
 800c33c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c33e:	2800      	cmp	r0, #0
 800c340:	f43f af05 	beq.w	800c14e <_strtod_l+0x436>
 800c344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c346:	2a00      	cmp	r2, #0
 800c348:	eba9 0308 	sub.w	r3, r9, r8
 800c34c:	bfa8      	it	ge
 800c34e:	2300      	movge	r3, #0
 800c350:	9312      	str	r3, [sp, #72]	@ 0x48
 800c352:	2400      	movs	r4, #0
 800c354:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c358:	9316      	str	r3, [sp, #88]	@ 0x58
 800c35a:	46a0      	mov	r8, r4
 800c35c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c35e:	9805      	ldr	r0, [sp, #20]
 800c360:	6859      	ldr	r1, [r3, #4]
 800c362:	f7ff f809 	bl	800b378 <_Balloc>
 800c366:	4681      	mov	r9, r0
 800c368:	2800      	cmp	r0, #0
 800c36a:	f43f aef4 	beq.w	800c156 <_strtod_l+0x43e>
 800c36e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c370:	691a      	ldr	r2, [r3, #16]
 800c372:	3202      	adds	r2, #2
 800c374:	f103 010c 	add.w	r1, r3, #12
 800c378:	0092      	lsls	r2, r2, #2
 800c37a:	300c      	adds	r0, #12
 800c37c:	f000 ff1e 	bl	800d1bc <memcpy>
 800c380:	ec4b ab10 	vmov	d0, sl, fp
 800c384:	9805      	ldr	r0, [sp, #20]
 800c386:	aa1c      	add	r2, sp, #112	@ 0x70
 800c388:	a91b      	add	r1, sp, #108	@ 0x6c
 800c38a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c38e:	f7ff fbd7 	bl	800bb40 <__d2b>
 800c392:	901a      	str	r0, [sp, #104]	@ 0x68
 800c394:	2800      	cmp	r0, #0
 800c396:	f43f aede 	beq.w	800c156 <_strtod_l+0x43e>
 800c39a:	9805      	ldr	r0, [sp, #20]
 800c39c:	2101      	movs	r1, #1
 800c39e:	f7ff f929 	bl	800b5f4 <__i2b>
 800c3a2:	4680      	mov	r8, r0
 800c3a4:	b948      	cbnz	r0, 800c3ba <_strtod_l+0x6a2>
 800c3a6:	f04f 0800 	mov.w	r8, #0
 800c3aa:	e6d4      	b.n	800c156 <_strtod_l+0x43e>
 800c3ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b4:	ea03 0a0a 	and.w	sl, r3, sl
 800c3b8:	e7b0      	b.n	800c31c <_strtod_l+0x604>
 800c3ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c3bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c3be:	2d00      	cmp	r5, #0
 800c3c0:	bfab      	itete	ge
 800c3c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c3c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c3c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c3c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c3ca:	bfac      	ite	ge
 800c3cc:	18ef      	addge	r7, r5, r3
 800c3ce:	1b5e      	sublt	r6, r3, r5
 800c3d0:	9b08      	ldr	r3, [sp, #32]
 800c3d2:	1aed      	subs	r5, r5, r3
 800c3d4:	4415      	add	r5, r2
 800c3d6:	4b66      	ldr	r3, [pc, #408]	@ (800c570 <_strtod_l+0x858>)
 800c3d8:	3d01      	subs	r5, #1
 800c3da:	429d      	cmp	r5, r3
 800c3dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c3e0:	da50      	bge.n	800c484 <_strtod_l+0x76c>
 800c3e2:	1b5b      	subs	r3, r3, r5
 800c3e4:	2b1f      	cmp	r3, #31
 800c3e6:	eba2 0203 	sub.w	r2, r2, r3
 800c3ea:	f04f 0101 	mov.w	r1, #1
 800c3ee:	dc3d      	bgt.n	800c46c <_strtod_l+0x754>
 800c3f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c3f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c3fa:	18bd      	adds	r5, r7, r2
 800c3fc:	9b08      	ldr	r3, [sp, #32]
 800c3fe:	42af      	cmp	r7, r5
 800c400:	4416      	add	r6, r2
 800c402:	441e      	add	r6, r3
 800c404:	463b      	mov	r3, r7
 800c406:	bfa8      	it	ge
 800c408:	462b      	movge	r3, r5
 800c40a:	42b3      	cmp	r3, r6
 800c40c:	bfa8      	it	ge
 800c40e:	4633      	movge	r3, r6
 800c410:	2b00      	cmp	r3, #0
 800c412:	bfc2      	ittt	gt
 800c414:	1aed      	subgt	r5, r5, r3
 800c416:	1af6      	subgt	r6, r6, r3
 800c418:	1aff      	subgt	r7, r7, r3
 800c41a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	dd16      	ble.n	800c44e <_strtod_l+0x736>
 800c420:	4641      	mov	r1, r8
 800c422:	9805      	ldr	r0, [sp, #20]
 800c424:	461a      	mov	r2, r3
 800c426:	f7ff f9a5 	bl	800b774 <__pow5mult>
 800c42a:	4680      	mov	r8, r0
 800c42c:	2800      	cmp	r0, #0
 800c42e:	d0ba      	beq.n	800c3a6 <_strtod_l+0x68e>
 800c430:	4601      	mov	r1, r0
 800c432:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c434:	9805      	ldr	r0, [sp, #20]
 800c436:	f7ff f8f3 	bl	800b620 <__multiply>
 800c43a:	900e      	str	r0, [sp, #56]	@ 0x38
 800c43c:	2800      	cmp	r0, #0
 800c43e:	f43f ae8a 	beq.w	800c156 <_strtod_l+0x43e>
 800c442:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c444:	9805      	ldr	r0, [sp, #20]
 800c446:	f7fe ffd7 	bl	800b3f8 <_Bfree>
 800c44a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c44c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c44e:	2d00      	cmp	r5, #0
 800c450:	dc1d      	bgt.n	800c48e <_strtod_l+0x776>
 800c452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	dd23      	ble.n	800c4a0 <_strtod_l+0x788>
 800c458:	4649      	mov	r1, r9
 800c45a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c45c:	9805      	ldr	r0, [sp, #20]
 800c45e:	f7ff f989 	bl	800b774 <__pow5mult>
 800c462:	4681      	mov	r9, r0
 800c464:	b9e0      	cbnz	r0, 800c4a0 <_strtod_l+0x788>
 800c466:	f04f 0900 	mov.w	r9, #0
 800c46a:	e674      	b.n	800c156 <_strtod_l+0x43e>
 800c46c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c470:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c474:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c478:	35e2      	adds	r5, #226	@ 0xe2
 800c47a:	fa01 f305 	lsl.w	r3, r1, r5
 800c47e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c480:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c482:	e7ba      	b.n	800c3fa <_strtod_l+0x6e2>
 800c484:	2300      	movs	r3, #0
 800c486:	9310      	str	r3, [sp, #64]	@ 0x40
 800c488:	2301      	movs	r3, #1
 800c48a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c48c:	e7b5      	b.n	800c3fa <_strtod_l+0x6e2>
 800c48e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c490:	9805      	ldr	r0, [sp, #20]
 800c492:	462a      	mov	r2, r5
 800c494:	f7ff f9c8 	bl	800b828 <__lshift>
 800c498:	901a      	str	r0, [sp, #104]	@ 0x68
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d1d9      	bne.n	800c452 <_strtod_l+0x73a>
 800c49e:	e65a      	b.n	800c156 <_strtod_l+0x43e>
 800c4a0:	2e00      	cmp	r6, #0
 800c4a2:	dd07      	ble.n	800c4b4 <_strtod_l+0x79c>
 800c4a4:	4649      	mov	r1, r9
 800c4a6:	9805      	ldr	r0, [sp, #20]
 800c4a8:	4632      	mov	r2, r6
 800c4aa:	f7ff f9bd 	bl	800b828 <__lshift>
 800c4ae:	4681      	mov	r9, r0
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d0d8      	beq.n	800c466 <_strtod_l+0x74e>
 800c4b4:	2f00      	cmp	r7, #0
 800c4b6:	dd08      	ble.n	800c4ca <_strtod_l+0x7b2>
 800c4b8:	4641      	mov	r1, r8
 800c4ba:	9805      	ldr	r0, [sp, #20]
 800c4bc:	463a      	mov	r2, r7
 800c4be:	f7ff f9b3 	bl	800b828 <__lshift>
 800c4c2:	4680      	mov	r8, r0
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	f43f ae46 	beq.w	800c156 <_strtod_l+0x43e>
 800c4ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4cc:	9805      	ldr	r0, [sp, #20]
 800c4ce:	464a      	mov	r2, r9
 800c4d0:	f7ff fa32 	bl	800b938 <__mdiff>
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f43f ae3d 	beq.w	800c156 <_strtod_l+0x43e>
 800c4dc:	68c3      	ldr	r3, [r0, #12]
 800c4de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	60c3      	str	r3, [r0, #12]
 800c4e4:	4641      	mov	r1, r8
 800c4e6:	f7ff fa0b 	bl	800b900 <__mcmp>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	da46      	bge.n	800c57c <_strtod_l+0x864>
 800c4ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4f0:	ea53 030a 	orrs.w	r3, r3, sl
 800c4f4:	d16c      	bne.n	800c5d0 <_strtod_l+0x8b8>
 800c4f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d168      	bne.n	800c5d0 <_strtod_l+0x8b8>
 800c4fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c502:	0d1b      	lsrs	r3, r3, #20
 800c504:	051b      	lsls	r3, r3, #20
 800c506:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c50a:	d961      	bls.n	800c5d0 <_strtod_l+0x8b8>
 800c50c:	6963      	ldr	r3, [r4, #20]
 800c50e:	b913      	cbnz	r3, 800c516 <_strtod_l+0x7fe>
 800c510:	6923      	ldr	r3, [r4, #16]
 800c512:	2b01      	cmp	r3, #1
 800c514:	dd5c      	ble.n	800c5d0 <_strtod_l+0x8b8>
 800c516:	4621      	mov	r1, r4
 800c518:	2201      	movs	r2, #1
 800c51a:	9805      	ldr	r0, [sp, #20]
 800c51c:	f7ff f984 	bl	800b828 <__lshift>
 800c520:	4641      	mov	r1, r8
 800c522:	4604      	mov	r4, r0
 800c524:	f7ff f9ec 	bl	800b900 <__mcmp>
 800c528:	2800      	cmp	r0, #0
 800c52a:	dd51      	ble.n	800c5d0 <_strtod_l+0x8b8>
 800c52c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c530:	9a08      	ldr	r2, [sp, #32]
 800c532:	0d1b      	lsrs	r3, r3, #20
 800c534:	051b      	lsls	r3, r3, #20
 800c536:	2a00      	cmp	r2, #0
 800c538:	d06b      	beq.n	800c612 <_strtod_l+0x8fa>
 800c53a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c53e:	d868      	bhi.n	800c612 <_strtod_l+0x8fa>
 800c540:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c544:	f67f ae9d 	bls.w	800c282 <_strtod_l+0x56a>
 800c548:	4b0a      	ldr	r3, [pc, #40]	@ (800c574 <_strtod_l+0x85c>)
 800c54a:	4650      	mov	r0, sl
 800c54c:	4659      	mov	r1, fp
 800c54e:	2200      	movs	r2, #0
 800c550:	f7f4 f87a 	bl	8000648 <__aeabi_dmul>
 800c554:	4b08      	ldr	r3, [pc, #32]	@ (800c578 <_strtod_l+0x860>)
 800c556:	400b      	ands	r3, r1
 800c558:	4682      	mov	sl, r0
 800c55a:	468b      	mov	fp, r1
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f47f ae05 	bne.w	800c16c <_strtod_l+0x454>
 800c562:	9a05      	ldr	r2, [sp, #20]
 800c564:	2322      	movs	r3, #34	@ 0x22
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	e600      	b.n	800c16c <_strtod_l+0x454>
 800c56a:	bf00      	nop
 800c56c:	0800e2e8 	.word	0x0800e2e8
 800c570:	fffffc02 	.word	0xfffffc02
 800c574:	39500000 	.word	0x39500000
 800c578:	7ff00000 	.word	0x7ff00000
 800c57c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c580:	d165      	bne.n	800c64e <_strtod_l+0x936>
 800c582:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c584:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c588:	b35a      	cbz	r2, 800c5e2 <_strtod_l+0x8ca>
 800c58a:	4a9f      	ldr	r2, [pc, #636]	@ (800c808 <_strtod_l+0xaf0>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d12b      	bne.n	800c5e8 <_strtod_l+0x8d0>
 800c590:	9b08      	ldr	r3, [sp, #32]
 800c592:	4651      	mov	r1, sl
 800c594:	b303      	cbz	r3, 800c5d8 <_strtod_l+0x8c0>
 800c596:	4b9d      	ldr	r3, [pc, #628]	@ (800c80c <_strtod_l+0xaf4>)
 800c598:	465a      	mov	r2, fp
 800c59a:	4013      	ands	r3, r2
 800c59c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c5a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c5a4:	d81b      	bhi.n	800c5de <_strtod_l+0x8c6>
 800c5a6:	0d1b      	lsrs	r3, r3, #20
 800c5a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b0:	4299      	cmp	r1, r3
 800c5b2:	d119      	bne.n	800c5e8 <_strtod_l+0x8d0>
 800c5b4:	4b96      	ldr	r3, [pc, #600]	@ (800c810 <_strtod_l+0xaf8>)
 800c5b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d102      	bne.n	800c5c2 <_strtod_l+0x8aa>
 800c5bc:	3101      	adds	r1, #1
 800c5be:	f43f adca 	beq.w	800c156 <_strtod_l+0x43e>
 800c5c2:	4b92      	ldr	r3, [pc, #584]	@ (800c80c <_strtod_l+0xaf4>)
 800c5c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5c6:	401a      	ands	r2, r3
 800c5c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c5cc:	f04f 0a00 	mov.w	sl, #0
 800c5d0:	9b08      	ldr	r3, [sp, #32]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1b8      	bne.n	800c548 <_strtod_l+0x830>
 800c5d6:	e5c9      	b.n	800c16c <_strtod_l+0x454>
 800c5d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5dc:	e7e8      	b.n	800c5b0 <_strtod_l+0x898>
 800c5de:	4613      	mov	r3, r2
 800c5e0:	e7e6      	b.n	800c5b0 <_strtod_l+0x898>
 800c5e2:	ea53 030a 	orrs.w	r3, r3, sl
 800c5e6:	d0a1      	beq.n	800c52c <_strtod_l+0x814>
 800c5e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c5ea:	b1db      	cbz	r3, 800c624 <_strtod_l+0x90c>
 800c5ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5ee:	4213      	tst	r3, r2
 800c5f0:	d0ee      	beq.n	800c5d0 <_strtod_l+0x8b8>
 800c5f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5f4:	9a08      	ldr	r2, [sp, #32]
 800c5f6:	4650      	mov	r0, sl
 800c5f8:	4659      	mov	r1, fp
 800c5fa:	b1bb      	cbz	r3, 800c62c <_strtod_l+0x914>
 800c5fc:	f7ff fb6e 	bl	800bcdc <sulp>
 800c600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c604:	ec53 2b10 	vmov	r2, r3, d0
 800c608:	f7f3 fe68 	bl	80002dc <__adddf3>
 800c60c:	4682      	mov	sl, r0
 800c60e:	468b      	mov	fp, r1
 800c610:	e7de      	b.n	800c5d0 <_strtod_l+0x8b8>
 800c612:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c616:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c61a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c61e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c622:	e7d5      	b.n	800c5d0 <_strtod_l+0x8b8>
 800c624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c626:	ea13 0f0a 	tst.w	r3, sl
 800c62a:	e7e1      	b.n	800c5f0 <_strtod_l+0x8d8>
 800c62c:	f7ff fb56 	bl	800bcdc <sulp>
 800c630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c634:	ec53 2b10 	vmov	r2, r3, d0
 800c638:	f7f3 fe4e 	bl	80002d8 <__aeabi_dsub>
 800c63c:	2200      	movs	r2, #0
 800c63e:	2300      	movs	r3, #0
 800c640:	4682      	mov	sl, r0
 800c642:	468b      	mov	fp, r1
 800c644:	f7f4 fa68 	bl	8000b18 <__aeabi_dcmpeq>
 800c648:	2800      	cmp	r0, #0
 800c64a:	d0c1      	beq.n	800c5d0 <_strtod_l+0x8b8>
 800c64c:	e619      	b.n	800c282 <_strtod_l+0x56a>
 800c64e:	4641      	mov	r1, r8
 800c650:	4620      	mov	r0, r4
 800c652:	f7ff facd 	bl	800bbf0 <__ratio>
 800c656:	ec57 6b10 	vmov	r6, r7, d0
 800c65a:	2200      	movs	r2, #0
 800c65c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c660:	4630      	mov	r0, r6
 800c662:	4639      	mov	r1, r7
 800c664:	f7f4 fa6c 	bl	8000b40 <__aeabi_dcmple>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d06f      	beq.n	800c74c <_strtod_l+0xa34>
 800c66c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d17a      	bne.n	800c768 <_strtod_l+0xa50>
 800c672:	f1ba 0f00 	cmp.w	sl, #0
 800c676:	d158      	bne.n	800c72a <_strtod_l+0xa12>
 800c678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c67a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d15a      	bne.n	800c738 <_strtod_l+0xa20>
 800c682:	4b64      	ldr	r3, [pc, #400]	@ (800c814 <_strtod_l+0xafc>)
 800c684:	2200      	movs	r2, #0
 800c686:	4630      	mov	r0, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	f7f4 fa4f 	bl	8000b2c <__aeabi_dcmplt>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d159      	bne.n	800c746 <_strtod_l+0xa2e>
 800c692:	4630      	mov	r0, r6
 800c694:	4639      	mov	r1, r7
 800c696:	4b60      	ldr	r3, [pc, #384]	@ (800c818 <_strtod_l+0xb00>)
 800c698:	2200      	movs	r2, #0
 800c69a:	f7f3 ffd5 	bl	8000648 <__aeabi_dmul>
 800c69e:	4606      	mov	r6, r0
 800c6a0:	460f      	mov	r7, r1
 800c6a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c6a6:	9606      	str	r6, [sp, #24]
 800c6a8:	9307      	str	r3, [sp, #28]
 800c6aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6ae:	4d57      	ldr	r5, [pc, #348]	@ (800c80c <_strtod_l+0xaf4>)
 800c6b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6b6:	401d      	ands	r5, r3
 800c6b8:	4b58      	ldr	r3, [pc, #352]	@ (800c81c <_strtod_l+0xb04>)
 800c6ba:	429d      	cmp	r5, r3
 800c6bc:	f040 80b2 	bne.w	800c824 <_strtod_l+0xb0c>
 800c6c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c6c6:	ec4b ab10 	vmov	d0, sl, fp
 800c6ca:	f7ff f9c9 	bl	800ba60 <__ulp>
 800c6ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6d2:	ec51 0b10 	vmov	r0, r1, d0
 800c6d6:	f7f3 ffb7 	bl	8000648 <__aeabi_dmul>
 800c6da:	4652      	mov	r2, sl
 800c6dc:	465b      	mov	r3, fp
 800c6de:	f7f3 fdfd 	bl	80002dc <__adddf3>
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	4949      	ldr	r1, [pc, #292]	@ (800c80c <_strtod_l+0xaf4>)
 800c6e6:	4a4e      	ldr	r2, [pc, #312]	@ (800c820 <_strtod_l+0xb08>)
 800c6e8:	4019      	ands	r1, r3
 800c6ea:	4291      	cmp	r1, r2
 800c6ec:	4682      	mov	sl, r0
 800c6ee:	d942      	bls.n	800c776 <_strtod_l+0xa5e>
 800c6f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c6f2:	4b47      	ldr	r3, [pc, #284]	@ (800c810 <_strtod_l+0xaf8>)
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d103      	bne.n	800c700 <_strtod_l+0x9e8>
 800c6f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	f43f ad2b 	beq.w	800c156 <_strtod_l+0x43e>
 800c700:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c810 <_strtod_l+0xaf8>
 800c704:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c708:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c70a:	9805      	ldr	r0, [sp, #20]
 800c70c:	f7fe fe74 	bl	800b3f8 <_Bfree>
 800c710:	9805      	ldr	r0, [sp, #20]
 800c712:	4649      	mov	r1, r9
 800c714:	f7fe fe70 	bl	800b3f8 <_Bfree>
 800c718:	9805      	ldr	r0, [sp, #20]
 800c71a:	4641      	mov	r1, r8
 800c71c:	f7fe fe6c 	bl	800b3f8 <_Bfree>
 800c720:	9805      	ldr	r0, [sp, #20]
 800c722:	4621      	mov	r1, r4
 800c724:	f7fe fe68 	bl	800b3f8 <_Bfree>
 800c728:	e618      	b.n	800c35c <_strtod_l+0x644>
 800c72a:	f1ba 0f01 	cmp.w	sl, #1
 800c72e:	d103      	bne.n	800c738 <_strtod_l+0xa20>
 800c730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c732:	2b00      	cmp	r3, #0
 800c734:	f43f ada5 	beq.w	800c282 <_strtod_l+0x56a>
 800c738:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c7e8 <_strtod_l+0xad0>
 800c73c:	4f35      	ldr	r7, [pc, #212]	@ (800c814 <_strtod_l+0xafc>)
 800c73e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c742:	2600      	movs	r6, #0
 800c744:	e7b1      	b.n	800c6aa <_strtod_l+0x992>
 800c746:	4f34      	ldr	r7, [pc, #208]	@ (800c818 <_strtod_l+0xb00>)
 800c748:	2600      	movs	r6, #0
 800c74a:	e7aa      	b.n	800c6a2 <_strtod_l+0x98a>
 800c74c:	4b32      	ldr	r3, [pc, #200]	@ (800c818 <_strtod_l+0xb00>)
 800c74e:	4630      	mov	r0, r6
 800c750:	4639      	mov	r1, r7
 800c752:	2200      	movs	r2, #0
 800c754:	f7f3 ff78 	bl	8000648 <__aeabi_dmul>
 800c758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c75a:	4606      	mov	r6, r0
 800c75c:	460f      	mov	r7, r1
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d09f      	beq.n	800c6a2 <_strtod_l+0x98a>
 800c762:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c766:	e7a0      	b.n	800c6aa <_strtod_l+0x992>
 800c768:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c7f0 <_strtod_l+0xad8>
 800c76c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c770:	ec57 6b17 	vmov	r6, r7, d7
 800c774:	e799      	b.n	800c6aa <_strtod_l+0x992>
 800c776:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c77a:	9b08      	ldr	r3, [sp, #32]
 800c77c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1c1      	bne.n	800c708 <_strtod_l+0x9f0>
 800c784:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c788:	0d1b      	lsrs	r3, r3, #20
 800c78a:	051b      	lsls	r3, r3, #20
 800c78c:	429d      	cmp	r5, r3
 800c78e:	d1bb      	bne.n	800c708 <_strtod_l+0x9f0>
 800c790:	4630      	mov	r0, r6
 800c792:	4639      	mov	r1, r7
 800c794:	f7f4 fab8 	bl	8000d08 <__aeabi_d2lz>
 800c798:	f7f3 ff28 	bl	80005ec <__aeabi_l2d>
 800c79c:	4602      	mov	r2, r0
 800c79e:	460b      	mov	r3, r1
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	4639      	mov	r1, r7
 800c7a4:	f7f3 fd98 	bl	80002d8 <__aeabi_dsub>
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c7b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7b6:	ea46 060a 	orr.w	r6, r6, sl
 800c7ba:	431e      	orrs	r6, r3
 800c7bc:	d06f      	beq.n	800c89e <_strtod_l+0xb86>
 800c7be:	a30e      	add	r3, pc, #56	@ (adr r3, 800c7f8 <_strtod_l+0xae0>)
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	f7f4 f9b2 	bl	8000b2c <__aeabi_dcmplt>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	f47f accf 	bne.w	800c16c <_strtod_l+0x454>
 800c7ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800c800 <_strtod_l+0xae8>)
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7d8:	f7f4 f9c6 	bl	8000b68 <__aeabi_dcmpgt>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d093      	beq.n	800c708 <_strtod_l+0x9f0>
 800c7e0:	e4c4      	b.n	800c16c <_strtod_l+0x454>
 800c7e2:	bf00      	nop
 800c7e4:	f3af 8000 	nop.w
 800c7e8:	00000000 	.word	0x00000000
 800c7ec:	bff00000 	.word	0xbff00000
 800c7f0:	00000000 	.word	0x00000000
 800c7f4:	3ff00000 	.word	0x3ff00000
 800c7f8:	94a03595 	.word	0x94a03595
 800c7fc:	3fdfffff 	.word	0x3fdfffff
 800c800:	35afe535 	.word	0x35afe535
 800c804:	3fe00000 	.word	0x3fe00000
 800c808:	000fffff 	.word	0x000fffff
 800c80c:	7ff00000 	.word	0x7ff00000
 800c810:	7fefffff 	.word	0x7fefffff
 800c814:	3ff00000 	.word	0x3ff00000
 800c818:	3fe00000 	.word	0x3fe00000
 800c81c:	7fe00000 	.word	0x7fe00000
 800c820:	7c9fffff 	.word	0x7c9fffff
 800c824:	9b08      	ldr	r3, [sp, #32]
 800c826:	b323      	cbz	r3, 800c872 <_strtod_l+0xb5a>
 800c828:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c82c:	d821      	bhi.n	800c872 <_strtod_l+0xb5a>
 800c82e:	a328      	add	r3, pc, #160	@ (adr r3, 800c8d0 <_strtod_l+0xbb8>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	4630      	mov	r0, r6
 800c836:	4639      	mov	r1, r7
 800c838:	f7f4 f982 	bl	8000b40 <__aeabi_dcmple>
 800c83c:	b1a0      	cbz	r0, 800c868 <_strtod_l+0xb50>
 800c83e:	4639      	mov	r1, r7
 800c840:	4630      	mov	r0, r6
 800c842:	f7f4 f9d9 	bl	8000bf8 <__aeabi_d2uiz>
 800c846:	2801      	cmp	r0, #1
 800c848:	bf38      	it	cc
 800c84a:	2001      	movcc	r0, #1
 800c84c:	f7f3 fe82 	bl	8000554 <__aeabi_ui2d>
 800c850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c852:	4606      	mov	r6, r0
 800c854:	460f      	mov	r7, r1
 800c856:	b9fb      	cbnz	r3, 800c898 <_strtod_l+0xb80>
 800c858:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c85c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c85e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c860:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c864:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c868:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c86a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c86e:	1b5b      	subs	r3, r3, r5
 800c870:	9311      	str	r3, [sp, #68]	@ 0x44
 800c872:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c876:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c87a:	f7ff f8f1 	bl	800ba60 <__ulp>
 800c87e:	4650      	mov	r0, sl
 800c880:	ec53 2b10 	vmov	r2, r3, d0
 800c884:	4659      	mov	r1, fp
 800c886:	f7f3 fedf 	bl	8000648 <__aeabi_dmul>
 800c88a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c88e:	f7f3 fd25 	bl	80002dc <__adddf3>
 800c892:	4682      	mov	sl, r0
 800c894:	468b      	mov	fp, r1
 800c896:	e770      	b.n	800c77a <_strtod_l+0xa62>
 800c898:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c89c:	e7e0      	b.n	800c860 <_strtod_l+0xb48>
 800c89e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c8d8 <_strtod_l+0xbc0>)
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	f7f4 f942 	bl	8000b2c <__aeabi_dcmplt>
 800c8a8:	e798      	b.n	800c7dc <_strtod_l+0xac4>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c8b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8b2:	6013      	str	r3, [r2, #0]
 800c8b4:	f7ff ba6d 	b.w	800bd92 <_strtod_l+0x7a>
 800c8b8:	2a65      	cmp	r2, #101	@ 0x65
 800c8ba:	f43f ab66 	beq.w	800bf8a <_strtod_l+0x272>
 800c8be:	2a45      	cmp	r2, #69	@ 0x45
 800c8c0:	f43f ab63 	beq.w	800bf8a <_strtod_l+0x272>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	f7ff bb9e 	b.w	800c006 <_strtod_l+0x2ee>
 800c8ca:	bf00      	nop
 800c8cc:	f3af 8000 	nop.w
 800c8d0:	ffc00000 	.word	0xffc00000
 800c8d4:	41dfffff 	.word	0x41dfffff
 800c8d8:	94a03595 	.word	0x94a03595
 800c8dc:	3fcfffff 	.word	0x3fcfffff

0800c8e0 <_strtod_r>:
 800c8e0:	4b01      	ldr	r3, [pc, #4]	@ (800c8e8 <_strtod_r+0x8>)
 800c8e2:	f7ff ba19 	b.w	800bd18 <_strtod_l>
 800c8e6:	bf00      	nop
 800c8e8:	20000fac 	.word	0x20000fac

0800c8ec <_strtol_l.constprop.0>:
 800c8ec:	2b24      	cmp	r3, #36	@ 0x24
 800c8ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f2:	4686      	mov	lr, r0
 800c8f4:	4690      	mov	r8, r2
 800c8f6:	d801      	bhi.n	800c8fc <_strtol_l.constprop.0+0x10>
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d106      	bne.n	800c90a <_strtol_l.constprop.0+0x1e>
 800c8fc:	f7fd fdbc 	bl	800a478 <__errno>
 800c900:	2316      	movs	r3, #22
 800c902:	6003      	str	r3, [r0, #0]
 800c904:	2000      	movs	r0, #0
 800c906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c90a:	4834      	ldr	r0, [pc, #208]	@ (800c9dc <_strtol_l.constprop.0+0xf0>)
 800c90c:	460d      	mov	r5, r1
 800c90e:	462a      	mov	r2, r5
 800c910:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c914:	5d06      	ldrb	r6, [r0, r4]
 800c916:	f016 0608 	ands.w	r6, r6, #8
 800c91a:	d1f8      	bne.n	800c90e <_strtol_l.constprop.0+0x22>
 800c91c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c91e:	d12d      	bne.n	800c97c <_strtol_l.constprop.0+0x90>
 800c920:	782c      	ldrb	r4, [r5, #0]
 800c922:	2601      	movs	r6, #1
 800c924:	1c95      	adds	r5, r2, #2
 800c926:	f033 0210 	bics.w	r2, r3, #16
 800c92a:	d109      	bne.n	800c940 <_strtol_l.constprop.0+0x54>
 800c92c:	2c30      	cmp	r4, #48	@ 0x30
 800c92e:	d12a      	bne.n	800c986 <_strtol_l.constprop.0+0x9a>
 800c930:	782a      	ldrb	r2, [r5, #0]
 800c932:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c936:	2a58      	cmp	r2, #88	@ 0x58
 800c938:	d125      	bne.n	800c986 <_strtol_l.constprop.0+0x9a>
 800c93a:	786c      	ldrb	r4, [r5, #1]
 800c93c:	2310      	movs	r3, #16
 800c93e:	3502      	adds	r5, #2
 800c940:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c944:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c948:	2200      	movs	r2, #0
 800c94a:	fbbc f9f3 	udiv	r9, ip, r3
 800c94e:	4610      	mov	r0, r2
 800c950:	fb03 ca19 	mls	sl, r3, r9, ip
 800c954:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c958:	2f09      	cmp	r7, #9
 800c95a:	d81b      	bhi.n	800c994 <_strtol_l.constprop.0+0xa8>
 800c95c:	463c      	mov	r4, r7
 800c95e:	42a3      	cmp	r3, r4
 800c960:	dd27      	ble.n	800c9b2 <_strtol_l.constprop.0+0xc6>
 800c962:	1c57      	adds	r7, r2, #1
 800c964:	d007      	beq.n	800c976 <_strtol_l.constprop.0+0x8a>
 800c966:	4581      	cmp	r9, r0
 800c968:	d320      	bcc.n	800c9ac <_strtol_l.constprop.0+0xc0>
 800c96a:	d101      	bne.n	800c970 <_strtol_l.constprop.0+0x84>
 800c96c:	45a2      	cmp	sl, r4
 800c96e:	db1d      	blt.n	800c9ac <_strtol_l.constprop.0+0xc0>
 800c970:	fb00 4003 	mla	r0, r0, r3, r4
 800c974:	2201      	movs	r2, #1
 800c976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c97a:	e7eb      	b.n	800c954 <_strtol_l.constprop.0+0x68>
 800c97c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c97e:	bf04      	itt	eq
 800c980:	782c      	ldrbeq	r4, [r5, #0]
 800c982:	1c95      	addeq	r5, r2, #2
 800c984:	e7cf      	b.n	800c926 <_strtol_l.constprop.0+0x3a>
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1da      	bne.n	800c940 <_strtol_l.constprop.0+0x54>
 800c98a:	2c30      	cmp	r4, #48	@ 0x30
 800c98c:	bf0c      	ite	eq
 800c98e:	2308      	moveq	r3, #8
 800c990:	230a      	movne	r3, #10
 800c992:	e7d5      	b.n	800c940 <_strtol_l.constprop.0+0x54>
 800c994:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c998:	2f19      	cmp	r7, #25
 800c99a:	d801      	bhi.n	800c9a0 <_strtol_l.constprop.0+0xb4>
 800c99c:	3c37      	subs	r4, #55	@ 0x37
 800c99e:	e7de      	b.n	800c95e <_strtol_l.constprop.0+0x72>
 800c9a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c9a4:	2f19      	cmp	r7, #25
 800c9a6:	d804      	bhi.n	800c9b2 <_strtol_l.constprop.0+0xc6>
 800c9a8:	3c57      	subs	r4, #87	@ 0x57
 800c9aa:	e7d8      	b.n	800c95e <_strtol_l.constprop.0+0x72>
 800c9ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c9b0:	e7e1      	b.n	800c976 <_strtol_l.constprop.0+0x8a>
 800c9b2:	1c53      	adds	r3, r2, #1
 800c9b4:	d108      	bne.n	800c9c8 <_strtol_l.constprop.0+0xdc>
 800c9b6:	2322      	movs	r3, #34	@ 0x22
 800c9b8:	f8ce 3000 	str.w	r3, [lr]
 800c9bc:	4660      	mov	r0, ip
 800c9be:	f1b8 0f00 	cmp.w	r8, #0
 800c9c2:	d0a0      	beq.n	800c906 <_strtol_l.constprop.0+0x1a>
 800c9c4:	1e69      	subs	r1, r5, #1
 800c9c6:	e006      	b.n	800c9d6 <_strtol_l.constprop.0+0xea>
 800c9c8:	b106      	cbz	r6, 800c9cc <_strtol_l.constprop.0+0xe0>
 800c9ca:	4240      	negs	r0, r0
 800c9cc:	f1b8 0f00 	cmp.w	r8, #0
 800c9d0:	d099      	beq.n	800c906 <_strtol_l.constprop.0+0x1a>
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	d1f6      	bne.n	800c9c4 <_strtol_l.constprop.0+0xd8>
 800c9d6:	f8c8 1000 	str.w	r1, [r8]
 800c9da:	e794      	b.n	800c906 <_strtol_l.constprop.0+0x1a>
 800c9dc:	0800e311 	.word	0x0800e311

0800c9e0 <_strtol_r>:
 800c9e0:	f7ff bf84 	b.w	800c8ec <_strtol_l.constprop.0>

0800c9e4 <__ssputs_r>:
 800c9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e8:	688e      	ldr	r6, [r1, #8]
 800c9ea:	461f      	mov	r7, r3
 800c9ec:	42be      	cmp	r6, r7
 800c9ee:	680b      	ldr	r3, [r1, #0]
 800c9f0:	4682      	mov	sl, r0
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	4690      	mov	r8, r2
 800c9f6:	d82d      	bhi.n	800ca54 <__ssputs_r+0x70>
 800c9f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca00:	d026      	beq.n	800ca50 <__ssputs_r+0x6c>
 800ca02:	6965      	ldr	r5, [r4, #20]
 800ca04:	6909      	ldr	r1, [r1, #16]
 800ca06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca0a:	eba3 0901 	sub.w	r9, r3, r1
 800ca0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca12:	1c7b      	adds	r3, r7, #1
 800ca14:	444b      	add	r3, r9
 800ca16:	106d      	asrs	r5, r5, #1
 800ca18:	429d      	cmp	r5, r3
 800ca1a:	bf38      	it	cc
 800ca1c:	461d      	movcc	r5, r3
 800ca1e:	0553      	lsls	r3, r2, #21
 800ca20:	d527      	bpl.n	800ca72 <__ssputs_r+0x8e>
 800ca22:	4629      	mov	r1, r5
 800ca24:	f7fe fc1c 	bl	800b260 <_malloc_r>
 800ca28:	4606      	mov	r6, r0
 800ca2a:	b360      	cbz	r0, 800ca86 <__ssputs_r+0xa2>
 800ca2c:	6921      	ldr	r1, [r4, #16]
 800ca2e:	464a      	mov	r2, r9
 800ca30:	f000 fbc4 	bl	800d1bc <memcpy>
 800ca34:	89a3      	ldrh	r3, [r4, #12]
 800ca36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ca3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca3e:	81a3      	strh	r3, [r4, #12]
 800ca40:	6126      	str	r6, [r4, #16]
 800ca42:	6165      	str	r5, [r4, #20]
 800ca44:	444e      	add	r6, r9
 800ca46:	eba5 0509 	sub.w	r5, r5, r9
 800ca4a:	6026      	str	r6, [r4, #0]
 800ca4c:	60a5      	str	r5, [r4, #8]
 800ca4e:	463e      	mov	r6, r7
 800ca50:	42be      	cmp	r6, r7
 800ca52:	d900      	bls.n	800ca56 <__ssputs_r+0x72>
 800ca54:	463e      	mov	r6, r7
 800ca56:	6820      	ldr	r0, [r4, #0]
 800ca58:	4632      	mov	r2, r6
 800ca5a:	4641      	mov	r1, r8
 800ca5c:	f7fd fca0 	bl	800a3a0 <memmove>
 800ca60:	68a3      	ldr	r3, [r4, #8]
 800ca62:	1b9b      	subs	r3, r3, r6
 800ca64:	60a3      	str	r3, [r4, #8]
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	4433      	add	r3, r6
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca72:	462a      	mov	r2, r5
 800ca74:	f000 ff35 	bl	800d8e2 <_realloc_r>
 800ca78:	4606      	mov	r6, r0
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d1e0      	bne.n	800ca40 <__ssputs_r+0x5c>
 800ca7e:	6921      	ldr	r1, [r4, #16]
 800ca80:	4650      	mov	r0, sl
 800ca82:	f7fe fb79 	bl	800b178 <_free_r>
 800ca86:	230c      	movs	r3, #12
 800ca88:	f8ca 3000 	str.w	r3, [sl]
 800ca8c:	89a3      	ldrh	r3, [r4, #12]
 800ca8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca92:	81a3      	strh	r3, [r4, #12]
 800ca94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca98:	e7e9      	b.n	800ca6e <__ssputs_r+0x8a>
	...

0800ca9c <_svfiprintf_r>:
 800ca9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa0:	4698      	mov	r8, r3
 800caa2:	898b      	ldrh	r3, [r1, #12]
 800caa4:	061b      	lsls	r3, r3, #24
 800caa6:	b09d      	sub	sp, #116	@ 0x74
 800caa8:	4607      	mov	r7, r0
 800caaa:	460d      	mov	r5, r1
 800caac:	4614      	mov	r4, r2
 800caae:	d510      	bpl.n	800cad2 <_svfiprintf_r+0x36>
 800cab0:	690b      	ldr	r3, [r1, #16]
 800cab2:	b973      	cbnz	r3, 800cad2 <_svfiprintf_r+0x36>
 800cab4:	2140      	movs	r1, #64	@ 0x40
 800cab6:	f7fe fbd3 	bl	800b260 <_malloc_r>
 800caba:	6028      	str	r0, [r5, #0]
 800cabc:	6128      	str	r0, [r5, #16]
 800cabe:	b930      	cbnz	r0, 800cace <_svfiprintf_r+0x32>
 800cac0:	230c      	movs	r3, #12
 800cac2:	603b      	str	r3, [r7, #0]
 800cac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cac8:	b01d      	add	sp, #116	@ 0x74
 800caca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cace:	2340      	movs	r3, #64	@ 0x40
 800cad0:	616b      	str	r3, [r5, #20]
 800cad2:	2300      	movs	r3, #0
 800cad4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cad6:	2320      	movs	r3, #32
 800cad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cadc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cae0:	2330      	movs	r3, #48	@ 0x30
 800cae2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cc80 <_svfiprintf_r+0x1e4>
 800cae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800caea:	f04f 0901 	mov.w	r9, #1
 800caee:	4623      	mov	r3, r4
 800caf0:	469a      	mov	sl, r3
 800caf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caf6:	b10a      	cbz	r2, 800cafc <_svfiprintf_r+0x60>
 800caf8:	2a25      	cmp	r2, #37	@ 0x25
 800cafa:	d1f9      	bne.n	800caf0 <_svfiprintf_r+0x54>
 800cafc:	ebba 0b04 	subs.w	fp, sl, r4
 800cb00:	d00b      	beq.n	800cb1a <_svfiprintf_r+0x7e>
 800cb02:	465b      	mov	r3, fp
 800cb04:	4622      	mov	r2, r4
 800cb06:	4629      	mov	r1, r5
 800cb08:	4638      	mov	r0, r7
 800cb0a:	f7ff ff6b 	bl	800c9e4 <__ssputs_r>
 800cb0e:	3001      	adds	r0, #1
 800cb10:	f000 80a7 	beq.w	800cc62 <_svfiprintf_r+0x1c6>
 800cb14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb16:	445a      	add	r2, fp
 800cb18:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f000 809f 	beq.w	800cc62 <_svfiprintf_r+0x1c6>
 800cb24:	2300      	movs	r3, #0
 800cb26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb2e:	f10a 0a01 	add.w	sl, sl, #1
 800cb32:	9304      	str	r3, [sp, #16]
 800cb34:	9307      	str	r3, [sp, #28]
 800cb36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb3c:	4654      	mov	r4, sl
 800cb3e:	2205      	movs	r2, #5
 800cb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb44:	484e      	ldr	r0, [pc, #312]	@ (800cc80 <_svfiprintf_r+0x1e4>)
 800cb46:	f7f3 fb6b 	bl	8000220 <memchr>
 800cb4a:	9a04      	ldr	r2, [sp, #16]
 800cb4c:	b9d8      	cbnz	r0, 800cb86 <_svfiprintf_r+0xea>
 800cb4e:	06d0      	lsls	r0, r2, #27
 800cb50:	bf44      	itt	mi
 800cb52:	2320      	movmi	r3, #32
 800cb54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb58:	0711      	lsls	r1, r2, #28
 800cb5a:	bf44      	itt	mi
 800cb5c:	232b      	movmi	r3, #43	@ 0x2b
 800cb5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb62:	f89a 3000 	ldrb.w	r3, [sl]
 800cb66:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb68:	d015      	beq.n	800cb96 <_svfiprintf_r+0xfa>
 800cb6a:	9a07      	ldr	r2, [sp, #28]
 800cb6c:	4654      	mov	r4, sl
 800cb6e:	2000      	movs	r0, #0
 800cb70:	f04f 0c0a 	mov.w	ip, #10
 800cb74:	4621      	mov	r1, r4
 800cb76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb7a:	3b30      	subs	r3, #48	@ 0x30
 800cb7c:	2b09      	cmp	r3, #9
 800cb7e:	d94b      	bls.n	800cc18 <_svfiprintf_r+0x17c>
 800cb80:	b1b0      	cbz	r0, 800cbb0 <_svfiprintf_r+0x114>
 800cb82:	9207      	str	r2, [sp, #28]
 800cb84:	e014      	b.n	800cbb0 <_svfiprintf_r+0x114>
 800cb86:	eba0 0308 	sub.w	r3, r0, r8
 800cb8a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	9304      	str	r3, [sp, #16]
 800cb92:	46a2      	mov	sl, r4
 800cb94:	e7d2      	b.n	800cb3c <_svfiprintf_r+0xa0>
 800cb96:	9b03      	ldr	r3, [sp, #12]
 800cb98:	1d19      	adds	r1, r3, #4
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	9103      	str	r1, [sp, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	bfbb      	ittet	lt
 800cba2:	425b      	neglt	r3, r3
 800cba4:	f042 0202 	orrlt.w	r2, r2, #2
 800cba8:	9307      	strge	r3, [sp, #28]
 800cbaa:	9307      	strlt	r3, [sp, #28]
 800cbac:	bfb8      	it	lt
 800cbae:	9204      	strlt	r2, [sp, #16]
 800cbb0:	7823      	ldrb	r3, [r4, #0]
 800cbb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbb4:	d10a      	bne.n	800cbcc <_svfiprintf_r+0x130>
 800cbb6:	7863      	ldrb	r3, [r4, #1]
 800cbb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbba:	d132      	bne.n	800cc22 <_svfiprintf_r+0x186>
 800cbbc:	9b03      	ldr	r3, [sp, #12]
 800cbbe:	1d1a      	adds	r2, r3, #4
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	9203      	str	r2, [sp, #12]
 800cbc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbc8:	3402      	adds	r4, #2
 800cbca:	9305      	str	r3, [sp, #20]
 800cbcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cc90 <_svfiprintf_r+0x1f4>
 800cbd0:	7821      	ldrb	r1, [r4, #0]
 800cbd2:	2203      	movs	r2, #3
 800cbd4:	4650      	mov	r0, sl
 800cbd6:	f7f3 fb23 	bl	8000220 <memchr>
 800cbda:	b138      	cbz	r0, 800cbec <_svfiprintf_r+0x150>
 800cbdc:	9b04      	ldr	r3, [sp, #16]
 800cbde:	eba0 000a 	sub.w	r0, r0, sl
 800cbe2:	2240      	movs	r2, #64	@ 0x40
 800cbe4:	4082      	lsls	r2, r0
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	3401      	adds	r4, #1
 800cbea:	9304      	str	r3, [sp, #16]
 800cbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf0:	4824      	ldr	r0, [pc, #144]	@ (800cc84 <_svfiprintf_r+0x1e8>)
 800cbf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbf6:	2206      	movs	r2, #6
 800cbf8:	f7f3 fb12 	bl	8000220 <memchr>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d036      	beq.n	800cc6e <_svfiprintf_r+0x1d2>
 800cc00:	4b21      	ldr	r3, [pc, #132]	@ (800cc88 <_svfiprintf_r+0x1ec>)
 800cc02:	bb1b      	cbnz	r3, 800cc4c <_svfiprintf_r+0x1b0>
 800cc04:	9b03      	ldr	r3, [sp, #12]
 800cc06:	3307      	adds	r3, #7
 800cc08:	f023 0307 	bic.w	r3, r3, #7
 800cc0c:	3308      	adds	r3, #8
 800cc0e:	9303      	str	r3, [sp, #12]
 800cc10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc12:	4433      	add	r3, r6
 800cc14:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc16:	e76a      	b.n	800caee <_svfiprintf_r+0x52>
 800cc18:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	2001      	movs	r0, #1
 800cc20:	e7a8      	b.n	800cb74 <_svfiprintf_r+0xd8>
 800cc22:	2300      	movs	r3, #0
 800cc24:	3401      	adds	r4, #1
 800cc26:	9305      	str	r3, [sp, #20]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	f04f 0c0a 	mov.w	ip, #10
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc34:	3a30      	subs	r2, #48	@ 0x30
 800cc36:	2a09      	cmp	r2, #9
 800cc38:	d903      	bls.n	800cc42 <_svfiprintf_r+0x1a6>
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d0c6      	beq.n	800cbcc <_svfiprintf_r+0x130>
 800cc3e:	9105      	str	r1, [sp, #20]
 800cc40:	e7c4      	b.n	800cbcc <_svfiprintf_r+0x130>
 800cc42:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc46:	4604      	mov	r4, r0
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e7f0      	b.n	800cc2e <_svfiprintf_r+0x192>
 800cc4c:	ab03      	add	r3, sp, #12
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	462a      	mov	r2, r5
 800cc52:	4b0e      	ldr	r3, [pc, #56]	@ (800cc8c <_svfiprintf_r+0x1f0>)
 800cc54:	a904      	add	r1, sp, #16
 800cc56:	4638      	mov	r0, r7
 800cc58:	f7fc fbac 	bl	80093b4 <_printf_float>
 800cc5c:	1c42      	adds	r2, r0, #1
 800cc5e:	4606      	mov	r6, r0
 800cc60:	d1d6      	bne.n	800cc10 <_svfiprintf_r+0x174>
 800cc62:	89ab      	ldrh	r3, [r5, #12]
 800cc64:	065b      	lsls	r3, r3, #25
 800cc66:	f53f af2d 	bmi.w	800cac4 <_svfiprintf_r+0x28>
 800cc6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc6c:	e72c      	b.n	800cac8 <_svfiprintf_r+0x2c>
 800cc6e:	ab03      	add	r3, sp, #12
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	462a      	mov	r2, r5
 800cc74:	4b05      	ldr	r3, [pc, #20]	@ (800cc8c <_svfiprintf_r+0x1f0>)
 800cc76:	a904      	add	r1, sp, #16
 800cc78:	4638      	mov	r0, r7
 800cc7a:	f7fc fe33 	bl	80098e4 <_printf_i>
 800cc7e:	e7ed      	b.n	800cc5c <_svfiprintf_r+0x1c0>
 800cc80:	0800e411 	.word	0x0800e411
 800cc84:	0800e41b 	.word	0x0800e41b
 800cc88:	080093b5 	.word	0x080093b5
 800cc8c:	0800c9e5 	.word	0x0800c9e5
 800cc90:	0800e417 	.word	0x0800e417

0800cc94 <__sfputc_r>:
 800cc94:	6893      	ldr	r3, [r2, #8]
 800cc96:	3b01      	subs	r3, #1
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	b410      	push	{r4}
 800cc9c:	6093      	str	r3, [r2, #8]
 800cc9e:	da08      	bge.n	800ccb2 <__sfputc_r+0x1e>
 800cca0:	6994      	ldr	r4, [r2, #24]
 800cca2:	42a3      	cmp	r3, r4
 800cca4:	db01      	blt.n	800ccaa <__sfputc_r+0x16>
 800cca6:	290a      	cmp	r1, #10
 800cca8:	d103      	bne.n	800ccb2 <__sfputc_r+0x1e>
 800ccaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccae:	f7fd bae2 	b.w	800a276 <__swbuf_r>
 800ccb2:	6813      	ldr	r3, [r2, #0]
 800ccb4:	1c58      	adds	r0, r3, #1
 800ccb6:	6010      	str	r0, [r2, #0]
 800ccb8:	7019      	strb	r1, [r3, #0]
 800ccba:	4608      	mov	r0, r1
 800ccbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <__sfputs_r>:
 800ccc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	460f      	mov	r7, r1
 800ccc8:	4614      	mov	r4, r2
 800ccca:	18d5      	adds	r5, r2, r3
 800cccc:	42ac      	cmp	r4, r5
 800ccce:	d101      	bne.n	800ccd4 <__sfputs_r+0x12>
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	e007      	b.n	800cce4 <__sfputs_r+0x22>
 800ccd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccd8:	463a      	mov	r2, r7
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f7ff ffda 	bl	800cc94 <__sfputc_r>
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	d1f3      	bne.n	800cccc <__sfputs_r+0xa>
 800cce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cce8 <_vfiprintf_r>:
 800cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	460d      	mov	r5, r1
 800ccee:	b09d      	sub	sp, #116	@ 0x74
 800ccf0:	4614      	mov	r4, r2
 800ccf2:	4698      	mov	r8, r3
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	b118      	cbz	r0, 800cd00 <_vfiprintf_r+0x18>
 800ccf8:	6a03      	ldr	r3, [r0, #32]
 800ccfa:	b90b      	cbnz	r3, 800cd00 <_vfiprintf_r+0x18>
 800ccfc:	f7fd f9b2 	bl	800a064 <__sinit>
 800cd00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd02:	07d9      	lsls	r1, r3, #31
 800cd04:	d405      	bmi.n	800cd12 <_vfiprintf_r+0x2a>
 800cd06:	89ab      	ldrh	r3, [r5, #12]
 800cd08:	059a      	lsls	r2, r3, #22
 800cd0a:	d402      	bmi.n	800cd12 <_vfiprintf_r+0x2a>
 800cd0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd0e:	f7fd fbde 	bl	800a4ce <__retarget_lock_acquire_recursive>
 800cd12:	89ab      	ldrh	r3, [r5, #12]
 800cd14:	071b      	lsls	r3, r3, #28
 800cd16:	d501      	bpl.n	800cd1c <_vfiprintf_r+0x34>
 800cd18:	692b      	ldr	r3, [r5, #16]
 800cd1a:	b99b      	cbnz	r3, 800cd44 <_vfiprintf_r+0x5c>
 800cd1c:	4629      	mov	r1, r5
 800cd1e:	4630      	mov	r0, r6
 800cd20:	f7fd fae8 	bl	800a2f4 <__swsetup_r>
 800cd24:	b170      	cbz	r0, 800cd44 <_vfiprintf_r+0x5c>
 800cd26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd28:	07dc      	lsls	r4, r3, #31
 800cd2a:	d504      	bpl.n	800cd36 <_vfiprintf_r+0x4e>
 800cd2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd30:	b01d      	add	sp, #116	@ 0x74
 800cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd36:	89ab      	ldrh	r3, [r5, #12]
 800cd38:	0598      	lsls	r0, r3, #22
 800cd3a:	d4f7      	bmi.n	800cd2c <_vfiprintf_r+0x44>
 800cd3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd3e:	f7fd fbc7 	bl	800a4d0 <__retarget_lock_release_recursive>
 800cd42:	e7f3      	b.n	800cd2c <_vfiprintf_r+0x44>
 800cd44:	2300      	movs	r3, #0
 800cd46:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd48:	2320      	movs	r3, #32
 800cd4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd52:	2330      	movs	r3, #48	@ 0x30
 800cd54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf04 <_vfiprintf_r+0x21c>
 800cd58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd5c:	f04f 0901 	mov.w	r9, #1
 800cd60:	4623      	mov	r3, r4
 800cd62:	469a      	mov	sl, r3
 800cd64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd68:	b10a      	cbz	r2, 800cd6e <_vfiprintf_r+0x86>
 800cd6a:	2a25      	cmp	r2, #37	@ 0x25
 800cd6c:	d1f9      	bne.n	800cd62 <_vfiprintf_r+0x7a>
 800cd6e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd72:	d00b      	beq.n	800cd8c <_vfiprintf_r+0xa4>
 800cd74:	465b      	mov	r3, fp
 800cd76:	4622      	mov	r2, r4
 800cd78:	4629      	mov	r1, r5
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f7ff ffa1 	bl	800ccc2 <__sfputs_r>
 800cd80:	3001      	adds	r0, #1
 800cd82:	f000 80a7 	beq.w	800ced4 <_vfiprintf_r+0x1ec>
 800cd86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd88:	445a      	add	r2, fp
 800cd8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd8c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f000 809f 	beq.w	800ced4 <_vfiprintf_r+0x1ec>
 800cd96:	2300      	movs	r3, #0
 800cd98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cd9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cda0:	f10a 0a01 	add.w	sl, sl, #1
 800cda4:	9304      	str	r3, [sp, #16]
 800cda6:	9307      	str	r3, [sp, #28]
 800cda8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdac:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdae:	4654      	mov	r4, sl
 800cdb0:	2205      	movs	r2, #5
 800cdb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb6:	4853      	ldr	r0, [pc, #332]	@ (800cf04 <_vfiprintf_r+0x21c>)
 800cdb8:	f7f3 fa32 	bl	8000220 <memchr>
 800cdbc:	9a04      	ldr	r2, [sp, #16]
 800cdbe:	b9d8      	cbnz	r0, 800cdf8 <_vfiprintf_r+0x110>
 800cdc0:	06d1      	lsls	r1, r2, #27
 800cdc2:	bf44      	itt	mi
 800cdc4:	2320      	movmi	r3, #32
 800cdc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdca:	0713      	lsls	r3, r2, #28
 800cdcc:	bf44      	itt	mi
 800cdce:	232b      	movmi	r3, #43	@ 0x2b
 800cdd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdd4:	f89a 3000 	ldrb.w	r3, [sl]
 800cdd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdda:	d015      	beq.n	800ce08 <_vfiprintf_r+0x120>
 800cddc:	9a07      	ldr	r2, [sp, #28]
 800cdde:	4654      	mov	r4, sl
 800cde0:	2000      	movs	r0, #0
 800cde2:	f04f 0c0a 	mov.w	ip, #10
 800cde6:	4621      	mov	r1, r4
 800cde8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdec:	3b30      	subs	r3, #48	@ 0x30
 800cdee:	2b09      	cmp	r3, #9
 800cdf0:	d94b      	bls.n	800ce8a <_vfiprintf_r+0x1a2>
 800cdf2:	b1b0      	cbz	r0, 800ce22 <_vfiprintf_r+0x13a>
 800cdf4:	9207      	str	r2, [sp, #28]
 800cdf6:	e014      	b.n	800ce22 <_vfiprintf_r+0x13a>
 800cdf8:	eba0 0308 	sub.w	r3, r0, r8
 800cdfc:	fa09 f303 	lsl.w	r3, r9, r3
 800ce00:	4313      	orrs	r3, r2
 800ce02:	9304      	str	r3, [sp, #16]
 800ce04:	46a2      	mov	sl, r4
 800ce06:	e7d2      	b.n	800cdae <_vfiprintf_r+0xc6>
 800ce08:	9b03      	ldr	r3, [sp, #12]
 800ce0a:	1d19      	adds	r1, r3, #4
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	9103      	str	r1, [sp, #12]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	bfbb      	ittet	lt
 800ce14:	425b      	neglt	r3, r3
 800ce16:	f042 0202 	orrlt.w	r2, r2, #2
 800ce1a:	9307      	strge	r3, [sp, #28]
 800ce1c:	9307      	strlt	r3, [sp, #28]
 800ce1e:	bfb8      	it	lt
 800ce20:	9204      	strlt	r2, [sp, #16]
 800ce22:	7823      	ldrb	r3, [r4, #0]
 800ce24:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce26:	d10a      	bne.n	800ce3e <_vfiprintf_r+0x156>
 800ce28:	7863      	ldrb	r3, [r4, #1]
 800ce2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce2c:	d132      	bne.n	800ce94 <_vfiprintf_r+0x1ac>
 800ce2e:	9b03      	ldr	r3, [sp, #12]
 800ce30:	1d1a      	adds	r2, r3, #4
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	9203      	str	r2, [sp, #12]
 800ce36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce3a:	3402      	adds	r4, #2
 800ce3c:	9305      	str	r3, [sp, #20]
 800ce3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf14 <_vfiprintf_r+0x22c>
 800ce42:	7821      	ldrb	r1, [r4, #0]
 800ce44:	2203      	movs	r2, #3
 800ce46:	4650      	mov	r0, sl
 800ce48:	f7f3 f9ea 	bl	8000220 <memchr>
 800ce4c:	b138      	cbz	r0, 800ce5e <_vfiprintf_r+0x176>
 800ce4e:	9b04      	ldr	r3, [sp, #16]
 800ce50:	eba0 000a 	sub.w	r0, r0, sl
 800ce54:	2240      	movs	r2, #64	@ 0x40
 800ce56:	4082      	lsls	r2, r0
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	3401      	adds	r4, #1
 800ce5c:	9304      	str	r3, [sp, #16]
 800ce5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce62:	4829      	ldr	r0, [pc, #164]	@ (800cf08 <_vfiprintf_r+0x220>)
 800ce64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce68:	2206      	movs	r2, #6
 800ce6a:	f7f3 f9d9 	bl	8000220 <memchr>
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d03f      	beq.n	800cef2 <_vfiprintf_r+0x20a>
 800ce72:	4b26      	ldr	r3, [pc, #152]	@ (800cf0c <_vfiprintf_r+0x224>)
 800ce74:	bb1b      	cbnz	r3, 800cebe <_vfiprintf_r+0x1d6>
 800ce76:	9b03      	ldr	r3, [sp, #12]
 800ce78:	3307      	adds	r3, #7
 800ce7a:	f023 0307 	bic.w	r3, r3, #7
 800ce7e:	3308      	adds	r3, #8
 800ce80:	9303      	str	r3, [sp, #12]
 800ce82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce84:	443b      	add	r3, r7
 800ce86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce88:	e76a      	b.n	800cd60 <_vfiprintf_r+0x78>
 800ce8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce8e:	460c      	mov	r4, r1
 800ce90:	2001      	movs	r0, #1
 800ce92:	e7a8      	b.n	800cde6 <_vfiprintf_r+0xfe>
 800ce94:	2300      	movs	r3, #0
 800ce96:	3401      	adds	r4, #1
 800ce98:	9305      	str	r3, [sp, #20]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	f04f 0c0a 	mov.w	ip, #10
 800cea0:	4620      	mov	r0, r4
 800cea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cea6:	3a30      	subs	r2, #48	@ 0x30
 800cea8:	2a09      	cmp	r2, #9
 800ceaa:	d903      	bls.n	800ceb4 <_vfiprintf_r+0x1cc>
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d0c6      	beq.n	800ce3e <_vfiprintf_r+0x156>
 800ceb0:	9105      	str	r1, [sp, #20]
 800ceb2:	e7c4      	b.n	800ce3e <_vfiprintf_r+0x156>
 800ceb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceb8:	4604      	mov	r4, r0
 800ceba:	2301      	movs	r3, #1
 800cebc:	e7f0      	b.n	800cea0 <_vfiprintf_r+0x1b8>
 800cebe:	ab03      	add	r3, sp, #12
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	462a      	mov	r2, r5
 800cec4:	4b12      	ldr	r3, [pc, #72]	@ (800cf10 <_vfiprintf_r+0x228>)
 800cec6:	a904      	add	r1, sp, #16
 800cec8:	4630      	mov	r0, r6
 800ceca:	f7fc fa73 	bl	80093b4 <_printf_float>
 800cece:	4607      	mov	r7, r0
 800ced0:	1c78      	adds	r0, r7, #1
 800ced2:	d1d6      	bne.n	800ce82 <_vfiprintf_r+0x19a>
 800ced4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ced6:	07d9      	lsls	r1, r3, #31
 800ced8:	d405      	bmi.n	800cee6 <_vfiprintf_r+0x1fe>
 800ceda:	89ab      	ldrh	r3, [r5, #12]
 800cedc:	059a      	lsls	r2, r3, #22
 800cede:	d402      	bmi.n	800cee6 <_vfiprintf_r+0x1fe>
 800cee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cee2:	f7fd faf5 	bl	800a4d0 <__retarget_lock_release_recursive>
 800cee6:	89ab      	ldrh	r3, [r5, #12]
 800cee8:	065b      	lsls	r3, r3, #25
 800ceea:	f53f af1f 	bmi.w	800cd2c <_vfiprintf_r+0x44>
 800ceee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cef0:	e71e      	b.n	800cd30 <_vfiprintf_r+0x48>
 800cef2:	ab03      	add	r3, sp, #12
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	462a      	mov	r2, r5
 800cef8:	4b05      	ldr	r3, [pc, #20]	@ (800cf10 <_vfiprintf_r+0x228>)
 800cefa:	a904      	add	r1, sp, #16
 800cefc:	4630      	mov	r0, r6
 800cefe:	f7fc fcf1 	bl	80098e4 <_printf_i>
 800cf02:	e7e4      	b.n	800cece <_vfiprintf_r+0x1e6>
 800cf04:	0800e411 	.word	0x0800e411
 800cf08:	0800e41b 	.word	0x0800e41b
 800cf0c:	080093b5 	.word	0x080093b5
 800cf10:	0800ccc3 	.word	0x0800ccc3
 800cf14:	0800e417 	.word	0x0800e417

0800cf18 <__sflush_r>:
 800cf18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf20:	0716      	lsls	r6, r2, #28
 800cf22:	4605      	mov	r5, r0
 800cf24:	460c      	mov	r4, r1
 800cf26:	d454      	bmi.n	800cfd2 <__sflush_r+0xba>
 800cf28:	684b      	ldr	r3, [r1, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	dc02      	bgt.n	800cf34 <__sflush_r+0x1c>
 800cf2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	dd48      	ble.n	800cfc6 <__sflush_r+0xae>
 800cf34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf36:	2e00      	cmp	r6, #0
 800cf38:	d045      	beq.n	800cfc6 <__sflush_r+0xae>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf40:	682f      	ldr	r7, [r5, #0]
 800cf42:	6a21      	ldr	r1, [r4, #32]
 800cf44:	602b      	str	r3, [r5, #0]
 800cf46:	d030      	beq.n	800cfaa <__sflush_r+0x92>
 800cf48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf4a:	89a3      	ldrh	r3, [r4, #12]
 800cf4c:	0759      	lsls	r1, r3, #29
 800cf4e:	d505      	bpl.n	800cf5c <__sflush_r+0x44>
 800cf50:	6863      	ldr	r3, [r4, #4]
 800cf52:	1ad2      	subs	r2, r2, r3
 800cf54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf56:	b10b      	cbz	r3, 800cf5c <__sflush_r+0x44>
 800cf58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf5a:	1ad2      	subs	r2, r2, r3
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf60:	6a21      	ldr	r1, [r4, #32]
 800cf62:	4628      	mov	r0, r5
 800cf64:	47b0      	blx	r6
 800cf66:	1c43      	adds	r3, r0, #1
 800cf68:	89a3      	ldrh	r3, [r4, #12]
 800cf6a:	d106      	bne.n	800cf7a <__sflush_r+0x62>
 800cf6c:	6829      	ldr	r1, [r5, #0]
 800cf6e:	291d      	cmp	r1, #29
 800cf70:	d82b      	bhi.n	800cfca <__sflush_r+0xb2>
 800cf72:	4a2a      	ldr	r2, [pc, #168]	@ (800d01c <__sflush_r+0x104>)
 800cf74:	410a      	asrs	r2, r1
 800cf76:	07d6      	lsls	r6, r2, #31
 800cf78:	d427      	bmi.n	800cfca <__sflush_r+0xb2>
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	6062      	str	r2, [r4, #4]
 800cf7e:	04d9      	lsls	r1, r3, #19
 800cf80:	6922      	ldr	r2, [r4, #16]
 800cf82:	6022      	str	r2, [r4, #0]
 800cf84:	d504      	bpl.n	800cf90 <__sflush_r+0x78>
 800cf86:	1c42      	adds	r2, r0, #1
 800cf88:	d101      	bne.n	800cf8e <__sflush_r+0x76>
 800cf8a:	682b      	ldr	r3, [r5, #0]
 800cf8c:	b903      	cbnz	r3, 800cf90 <__sflush_r+0x78>
 800cf8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf92:	602f      	str	r7, [r5, #0]
 800cf94:	b1b9      	cbz	r1, 800cfc6 <__sflush_r+0xae>
 800cf96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf9a:	4299      	cmp	r1, r3
 800cf9c:	d002      	beq.n	800cfa4 <__sflush_r+0x8c>
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f7fe f8ea 	bl	800b178 <_free_r>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfa8:	e00d      	b.n	800cfc6 <__sflush_r+0xae>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	4628      	mov	r0, r5
 800cfae:	47b0      	blx	r6
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	1c50      	adds	r0, r2, #1
 800cfb4:	d1c9      	bne.n	800cf4a <__sflush_r+0x32>
 800cfb6:	682b      	ldr	r3, [r5, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d0c6      	beq.n	800cf4a <__sflush_r+0x32>
 800cfbc:	2b1d      	cmp	r3, #29
 800cfbe:	d001      	beq.n	800cfc4 <__sflush_r+0xac>
 800cfc0:	2b16      	cmp	r3, #22
 800cfc2:	d11e      	bne.n	800d002 <__sflush_r+0xea>
 800cfc4:	602f      	str	r7, [r5, #0]
 800cfc6:	2000      	movs	r0, #0
 800cfc8:	e022      	b.n	800d010 <__sflush_r+0xf8>
 800cfca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfce:	b21b      	sxth	r3, r3
 800cfd0:	e01b      	b.n	800d00a <__sflush_r+0xf2>
 800cfd2:	690f      	ldr	r7, [r1, #16]
 800cfd4:	2f00      	cmp	r7, #0
 800cfd6:	d0f6      	beq.n	800cfc6 <__sflush_r+0xae>
 800cfd8:	0793      	lsls	r3, r2, #30
 800cfda:	680e      	ldr	r6, [r1, #0]
 800cfdc:	bf08      	it	eq
 800cfde:	694b      	ldreq	r3, [r1, #20]
 800cfe0:	600f      	str	r7, [r1, #0]
 800cfe2:	bf18      	it	ne
 800cfe4:	2300      	movne	r3, #0
 800cfe6:	eba6 0807 	sub.w	r8, r6, r7
 800cfea:	608b      	str	r3, [r1, #8]
 800cfec:	f1b8 0f00 	cmp.w	r8, #0
 800cff0:	dde9      	ble.n	800cfc6 <__sflush_r+0xae>
 800cff2:	6a21      	ldr	r1, [r4, #32]
 800cff4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cff6:	4643      	mov	r3, r8
 800cff8:	463a      	mov	r2, r7
 800cffa:	4628      	mov	r0, r5
 800cffc:	47b0      	blx	r6
 800cffe:	2800      	cmp	r0, #0
 800d000:	dc08      	bgt.n	800d014 <__sflush_r+0xfc>
 800d002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d014:	4407      	add	r7, r0
 800d016:	eba8 0800 	sub.w	r8, r8, r0
 800d01a:	e7e7      	b.n	800cfec <__sflush_r+0xd4>
 800d01c:	dfbffffe 	.word	0xdfbffffe

0800d020 <_fflush_r>:
 800d020:	b538      	push	{r3, r4, r5, lr}
 800d022:	690b      	ldr	r3, [r1, #16]
 800d024:	4605      	mov	r5, r0
 800d026:	460c      	mov	r4, r1
 800d028:	b913      	cbnz	r3, 800d030 <_fflush_r+0x10>
 800d02a:	2500      	movs	r5, #0
 800d02c:	4628      	mov	r0, r5
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
 800d030:	b118      	cbz	r0, 800d03a <_fflush_r+0x1a>
 800d032:	6a03      	ldr	r3, [r0, #32]
 800d034:	b90b      	cbnz	r3, 800d03a <_fflush_r+0x1a>
 800d036:	f7fd f815 	bl	800a064 <__sinit>
 800d03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0f3      	beq.n	800d02a <_fflush_r+0xa>
 800d042:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d044:	07d0      	lsls	r0, r2, #31
 800d046:	d404      	bmi.n	800d052 <_fflush_r+0x32>
 800d048:	0599      	lsls	r1, r3, #22
 800d04a:	d402      	bmi.n	800d052 <_fflush_r+0x32>
 800d04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d04e:	f7fd fa3e 	bl	800a4ce <__retarget_lock_acquire_recursive>
 800d052:	4628      	mov	r0, r5
 800d054:	4621      	mov	r1, r4
 800d056:	f7ff ff5f 	bl	800cf18 <__sflush_r>
 800d05a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d05c:	07da      	lsls	r2, r3, #31
 800d05e:	4605      	mov	r5, r0
 800d060:	d4e4      	bmi.n	800d02c <_fflush_r+0xc>
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	059b      	lsls	r3, r3, #22
 800d066:	d4e1      	bmi.n	800d02c <_fflush_r+0xc>
 800d068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d06a:	f7fd fa31 	bl	800a4d0 <__retarget_lock_release_recursive>
 800d06e:	e7dd      	b.n	800d02c <_fflush_r+0xc>

0800d070 <__swhatbuf_r>:
 800d070:	b570      	push	{r4, r5, r6, lr}
 800d072:	460c      	mov	r4, r1
 800d074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d078:	2900      	cmp	r1, #0
 800d07a:	b096      	sub	sp, #88	@ 0x58
 800d07c:	4615      	mov	r5, r2
 800d07e:	461e      	mov	r6, r3
 800d080:	da0d      	bge.n	800d09e <__swhatbuf_r+0x2e>
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d088:	f04f 0100 	mov.w	r1, #0
 800d08c:	bf14      	ite	ne
 800d08e:	2340      	movne	r3, #64	@ 0x40
 800d090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d094:	2000      	movs	r0, #0
 800d096:	6031      	str	r1, [r6, #0]
 800d098:	602b      	str	r3, [r5, #0]
 800d09a:	b016      	add	sp, #88	@ 0x58
 800d09c:	bd70      	pop	{r4, r5, r6, pc}
 800d09e:	466a      	mov	r2, sp
 800d0a0:	f000 f85a 	bl	800d158 <_fstat_r>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	dbec      	blt.n	800d082 <__swhatbuf_r+0x12>
 800d0a8:	9901      	ldr	r1, [sp, #4]
 800d0aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d0b2:	4259      	negs	r1, r3
 800d0b4:	4159      	adcs	r1, r3
 800d0b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0ba:	e7eb      	b.n	800d094 <__swhatbuf_r+0x24>

0800d0bc <__smakebuf_r>:
 800d0bc:	898b      	ldrh	r3, [r1, #12]
 800d0be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0c0:	079d      	lsls	r5, r3, #30
 800d0c2:	4606      	mov	r6, r0
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	d507      	bpl.n	800d0d8 <__smakebuf_r+0x1c>
 800d0c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	6123      	str	r3, [r4, #16]
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	6163      	str	r3, [r4, #20]
 800d0d4:	b003      	add	sp, #12
 800d0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0d8:	ab01      	add	r3, sp, #4
 800d0da:	466a      	mov	r2, sp
 800d0dc:	f7ff ffc8 	bl	800d070 <__swhatbuf_r>
 800d0e0:	9f00      	ldr	r7, [sp, #0]
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	4639      	mov	r1, r7
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	f7fe f8ba 	bl	800b260 <_malloc_r>
 800d0ec:	b948      	cbnz	r0, 800d102 <__smakebuf_r+0x46>
 800d0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0f2:	059a      	lsls	r2, r3, #22
 800d0f4:	d4ee      	bmi.n	800d0d4 <__smakebuf_r+0x18>
 800d0f6:	f023 0303 	bic.w	r3, r3, #3
 800d0fa:	f043 0302 	orr.w	r3, r3, #2
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	e7e2      	b.n	800d0c8 <__smakebuf_r+0xc>
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	6020      	str	r0, [r4, #0]
 800d106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d10a:	81a3      	strh	r3, [r4, #12]
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d112:	b15b      	cbz	r3, 800d12c <__smakebuf_r+0x70>
 800d114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d118:	4630      	mov	r0, r6
 800d11a:	f000 f82f 	bl	800d17c <_isatty_r>
 800d11e:	b128      	cbz	r0, 800d12c <__smakebuf_r+0x70>
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	f023 0303 	bic.w	r3, r3, #3
 800d126:	f043 0301 	orr.w	r3, r3, #1
 800d12a:	81a3      	strh	r3, [r4, #12]
 800d12c:	89a3      	ldrh	r3, [r4, #12]
 800d12e:	431d      	orrs	r5, r3
 800d130:	81a5      	strh	r5, [r4, #12]
 800d132:	e7cf      	b.n	800d0d4 <__smakebuf_r+0x18>

0800d134 <strncmp>:
 800d134:	b510      	push	{r4, lr}
 800d136:	b16a      	cbz	r2, 800d154 <strncmp+0x20>
 800d138:	3901      	subs	r1, #1
 800d13a:	1884      	adds	r4, r0, r2
 800d13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d140:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d144:	429a      	cmp	r2, r3
 800d146:	d103      	bne.n	800d150 <strncmp+0x1c>
 800d148:	42a0      	cmp	r0, r4
 800d14a:	d001      	beq.n	800d150 <strncmp+0x1c>
 800d14c:	2a00      	cmp	r2, #0
 800d14e:	d1f5      	bne.n	800d13c <strncmp+0x8>
 800d150:	1ad0      	subs	r0, r2, r3
 800d152:	bd10      	pop	{r4, pc}
 800d154:	4610      	mov	r0, r2
 800d156:	e7fc      	b.n	800d152 <strncmp+0x1e>

0800d158 <_fstat_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4d07      	ldr	r5, [pc, #28]	@ (800d178 <_fstat_r+0x20>)
 800d15c:	2300      	movs	r3, #0
 800d15e:	4604      	mov	r4, r0
 800d160:	4608      	mov	r0, r1
 800d162:	4611      	mov	r1, r2
 800d164:	602b      	str	r3, [r5, #0]
 800d166:	f7f4 fb07 	bl	8001778 <_fstat>
 800d16a:	1c43      	adds	r3, r0, #1
 800d16c:	d102      	bne.n	800d174 <_fstat_r+0x1c>
 800d16e:	682b      	ldr	r3, [r5, #0]
 800d170:	b103      	cbz	r3, 800d174 <_fstat_r+0x1c>
 800d172:	6023      	str	r3, [r4, #0]
 800d174:	bd38      	pop	{r3, r4, r5, pc}
 800d176:	bf00      	nop
 800d178:	20001984 	.word	0x20001984

0800d17c <_isatty_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	4d06      	ldr	r5, [pc, #24]	@ (800d198 <_isatty_r+0x1c>)
 800d180:	2300      	movs	r3, #0
 800d182:	4604      	mov	r4, r0
 800d184:	4608      	mov	r0, r1
 800d186:	602b      	str	r3, [r5, #0]
 800d188:	f7f4 fb06 	bl	8001798 <_isatty>
 800d18c:	1c43      	adds	r3, r0, #1
 800d18e:	d102      	bne.n	800d196 <_isatty_r+0x1a>
 800d190:	682b      	ldr	r3, [r5, #0]
 800d192:	b103      	cbz	r3, 800d196 <_isatty_r+0x1a>
 800d194:	6023      	str	r3, [r4, #0]
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	20001984 	.word	0x20001984

0800d19c <_sbrk_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d06      	ldr	r5, [pc, #24]	@ (800d1b8 <_sbrk_r+0x1c>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7f4 fb0e 	bl	80017c8 <_sbrk>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_sbrk_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_sbrk_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	20001984 	.word	0x20001984

0800d1bc <memcpy>:
 800d1bc:	440a      	add	r2, r1
 800d1be:	4291      	cmp	r1, r2
 800d1c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d1c4:	d100      	bne.n	800d1c8 <memcpy+0xc>
 800d1c6:	4770      	bx	lr
 800d1c8:	b510      	push	{r4, lr}
 800d1ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1d2:	4291      	cmp	r1, r2
 800d1d4:	d1f9      	bne.n	800d1ca <memcpy+0xe>
 800d1d6:	bd10      	pop	{r4, pc}

0800d1d8 <nan>:
 800d1d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d1e0 <nan+0x8>
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	00000000 	.word	0x00000000
 800d1e4:	7ff80000 	.word	0x7ff80000

0800d1e8 <__assert_func>:
 800d1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1ea:	4614      	mov	r4, r2
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	4b09      	ldr	r3, [pc, #36]	@ (800d214 <__assert_func+0x2c>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	68d8      	ldr	r0, [r3, #12]
 800d1f6:	b954      	cbnz	r4, 800d20e <__assert_func+0x26>
 800d1f8:	4b07      	ldr	r3, [pc, #28]	@ (800d218 <__assert_func+0x30>)
 800d1fa:	461c      	mov	r4, r3
 800d1fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d200:	9100      	str	r1, [sp, #0]
 800d202:	462b      	mov	r3, r5
 800d204:	4905      	ldr	r1, [pc, #20]	@ (800d21c <__assert_func+0x34>)
 800d206:	f000 fba7 	bl	800d958 <fiprintf>
 800d20a:	f000 fbb7 	bl	800d97c <abort>
 800d20e:	4b04      	ldr	r3, [pc, #16]	@ (800d220 <__assert_func+0x38>)
 800d210:	e7f4      	b.n	800d1fc <__assert_func+0x14>
 800d212:	bf00      	nop
 800d214:	20000f5c 	.word	0x20000f5c
 800d218:	0800e465 	.word	0x0800e465
 800d21c:	0800e437 	.word	0x0800e437
 800d220:	0800e42a 	.word	0x0800e42a

0800d224 <_calloc_r>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	fba1 5402 	umull	r5, r4, r1, r2
 800d22a:	b93c      	cbnz	r4, 800d23c <_calloc_r+0x18>
 800d22c:	4629      	mov	r1, r5
 800d22e:	f7fe f817 	bl	800b260 <_malloc_r>
 800d232:	4606      	mov	r6, r0
 800d234:	b928      	cbnz	r0, 800d242 <_calloc_r+0x1e>
 800d236:	2600      	movs	r6, #0
 800d238:	4630      	mov	r0, r6
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	220c      	movs	r2, #12
 800d23e:	6002      	str	r2, [r0, #0]
 800d240:	e7f9      	b.n	800d236 <_calloc_r+0x12>
 800d242:	462a      	mov	r2, r5
 800d244:	4621      	mov	r1, r4
 800d246:	f7fd f8c5 	bl	800a3d4 <memset>
 800d24a:	e7f5      	b.n	800d238 <_calloc_r+0x14>

0800d24c <rshift>:
 800d24c:	6903      	ldr	r3, [r0, #16]
 800d24e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d252:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d256:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d25a:	f100 0414 	add.w	r4, r0, #20
 800d25e:	dd45      	ble.n	800d2ec <rshift+0xa0>
 800d260:	f011 011f 	ands.w	r1, r1, #31
 800d264:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d268:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d26c:	d10c      	bne.n	800d288 <rshift+0x3c>
 800d26e:	f100 0710 	add.w	r7, r0, #16
 800d272:	4629      	mov	r1, r5
 800d274:	42b1      	cmp	r1, r6
 800d276:	d334      	bcc.n	800d2e2 <rshift+0x96>
 800d278:	1a9b      	subs	r3, r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	1eea      	subs	r2, r5, #3
 800d27e:	4296      	cmp	r6, r2
 800d280:	bf38      	it	cc
 800d282:	2300      	movcc	r3, #0
 800d284:	4423      	add	r3, r4
 800d286:	e015      	b.n	800d2b4 <rshift+0x68>
 800d288:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d28c:	f1c1 0820 	rsb	r8, r1, #32
 800d290:	40cf      	lsrs	r7, r1
 800d292:	f105 0e04 	add.w	lr, r5, #4
 800d296:	46a1      	mov	r9, r4
 800d298:	4576      	cmp	r6, lr
 800d29a:	46f4      	mov	ip, lr
 800d29c:	d815      	bhi.n	800d2ca <rshift+0x7e>
 800d29e:	1a9a      	subs	r2, r3, r2
 800d2a0:	0092      	lsls	r2, r2, #2
 800d2a2:	3a04      	subs	r2, #4
 800d2a4:	3501      	adds	r5, #1
 800d2a6:	42ae      	cmp	r6, r5
 800d2a8:	bf38      	it	cc
 800d2aa:	2200      	movcc	r2, #0
 800d2ac:	18a3      	adds	r3, r4, r2
 800d2ae:	50a7      	str	r7, [r4, r2]
 800d2b0:	b107      	cbz	r7, 800d2b4 <rshift+0x68>
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	1b1a      	subs	r2, r3, r4
 800d2b6:	42a3      	cmp	r3, r4
 800d2b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d2bc:	bf08      	it	eq
 800d2be:	2300      	moveq	r3, #0
 800d2c0:	6102      	str	r2, [r0, #16]
 800d2c2:	bf08      	it	eq
 800d2c4:	6143      	streq	r3, [r0, #20]
 800d2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2ca:	f8dc c000 	ldr.w	ip, [ip]
 800d2ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800d2d2:	ea4c 0707 	orr.w	r7, ip, r7
 800d2d6:	f849 7b04 	str.w	r7, [r9], #4
 800d2da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2de:	40cf      	lsrs	r7, r1
 800d2e0:	e7da      	b.n	800d298 <rshift+0x4c>
 800d2e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d2e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d2ea:	e7c3      	b.n	800d274 <rshift+0x28>
 800d2ec:	4623      	mov	r3, r4
 800d2ee:	e7e1      	b.n	800d2b4 <rshift+0x68>

0800d2f0 <__hexdig_fun>:
 800d2f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d2f4:	2b09      	cmp	r3, #9
 800d2f6:	d802      	bhi.n	800d2fe <__hexdig_fun+0xe>
 800d2f8:	3820      	subs	r0, #32
 800d2fa:	b2c0      	uxtb	r0, r0
 800d2fc:	4770      	bx	lr
 800d2fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d302:	2b05      	cmp	r3, #5
 800d304:	d801      	bhi.n	800d30a <__hexdig_fun+0x1a>
 800d306:	3847      	subs	r0, #71	@ 0x47
 800d308:	e7f7      	b.n	800d2fa <__hexdig_fun+0xa>
 800d30a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d30e:	2b05      	cmp	r3, #5
 800d310:	d801      	bhi.n	800d316 <__hexdig_fun+0x26>
 800d312:	3827      	subs	r0, #39	@ 0x27
 800d314:	e7f1      	b.n	800d2fa <__hexdig_fun+0xa>
 800d316:	2000      	movs	r0, #0
 800d318:	4770      	bx	lr
	...

0800d31c <__gethex>:
 800d31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d320:	b085      	sub	sp, #20
 800d322:	468a      	mov	sl, r1
 800d324:	9302      	str	r3, [sp, #8]
 800d326:	680b      	ldr	r3, [r1, #0]
 800d328:	9001      	str	r0, [sp, #4]
 800d32a:	4690      	mov	r8, r2
 800d32c:	1c9c      	adds	r4, r3, #2
 800d32e:	46a1      	mov	r9, r4
 800d330:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d334:	2830      	cmp	r0, #48	@ 0x30
 800d336:	d0fa      	beq.n	800d32e <__gethex+0x12>
 800d338:	eba9 0303 	sub.w	r3, r9, r3
 800d33c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d340:	f7ff ffd6 	bl	800d2f0 <__hexdig_fun>
 800d344:	4605      	mov	r5, r0
 800d346:	2800      	cmp	r0, #0
 800d348:	d168      	bne.n	800d41c <__gethex+0x100>
 800d34a:	49a0      	ldr	r1, [pc, #640]	@ (800d5cc <__gethex+0x2b0>)
 800d34c:	2201      	movs	r2, #1
 800d34e:	4648      	mov	r0, r9
 800d350:	f7ff fef0 	bl	800d134 <strncmp>
 800d354:	4607      	mov	r7, r0
 800d356:	2800      	cmp	r0, #0
 800d358:	d167      	bne.n	800d42a <__gethex+0x10e>
 800d35a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d35e:	4626      	mov	r6, r4
 800d360:	f7ff ffc6 	bl	800d2f0 <__hexdig_fun>
 800d364:	2800      	cmp	r0, #0
 800d366:	d062      	beq.n	800d42e <__gethex+0x112>
 800d368:	4623      	mov	r3, r4
 800d36a:	7818      	ldrb	r0, [r3, #0]
 800d36c:	2830      	cmp	r0, #48	@ 0x30
 800d36e:	4699      	mov	r9, r3
 800d370:	f103 0301 	add.w	r3, r3, #1
 800d374:	d0f9      	beq.n	800d36a <__gethex+0x4e>
 800d376:	f7ff ffbb 	bl	800d2f0 <__hexdig_fun>
 800d37a:	fab0 f580 	clz	r5, r0
 800d37e:	096d      	lsrs	r5, r5, #5
 800d380:	f04f 0b01 	mov.w	fp, #1
 800d384:	464a      	mov	r2, r9
 800d386:	4616      	mov	r6, r2
 800d388:	3201      	adds	r2, #1
 800d38a:	7830      	ldrb	r0, [r6, #0]
 800d38c:	f7ff ffb0 	bl	800d2f0 <__hexdig_fun>
 800d390:	2800      	cmp	r0, #0
 800d392:	d1f8      	bne.n	800d386 <__gethex+0x6a>
 800d394:	498d      	ldr	r1, [pc, #564]	@ (800d5cc <__gethex+0x2b0>)
 800d396:	2201      	movs	r2, #1
 800d398:	4630      	mov	r0, r6
 800d39a:	f7ff fecb 	bl	800d134 <strncmp>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d13f      	bne.n	800d422 <__gethex+0x106>
 800d3a2:	b944      	cbnz	r4, 800d3b6 <__gethex+0x9a>
 800d3a4:	1c74      	adds	r4, r6, #1
 800d3a6:	4622      	mov	r2, r4
 800d3a8:	4616      	mov	r6, r2
 800d3aa:	3201      	adds	r2, #1
 800d3ac:	7830      	ldrb	r0, [r6, #0]
 800d3ae:	f7ff ff9f 	bl	800d2f0 <__hexdig_fun>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d1f8      	bne.n	800d3a8 <__gethex+0x8c>
 800d3b6:	1ba4      	subs	r4, r4, r6
 800d3b8:	00a7      	lsls	r7, r4, #2
 800d3ba:	7833      	ldrb	r3, [r6, #0]
 800d3bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d3c0:	2b50      	cmp	r3, #80	@ 0x50
 800d3c2:	d13e      	bne.n	800d442 <__gethex+0x126>
 800d3c4:	7873      	ldrb	r3, [r6, #1]
 800d3c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d3c8:	d033      	beq.n	800d432 <__gethex+0x116>
 800d3ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800d3cc:	d034      	beq.n	800d438 <__gethex+0x11c>
 800d3ce:	1c71      	adds	r1, r6, #1
 800d3d0:	2400      	movs	r4, #0
 800d3d2:	7808      	ldrb	r0, [r1, #0]
 800d3d4:	f7ff ff8c 	bl	800d2f0 <__hexdig_fun>
 800d3d8:	1e43      	subs	r3, r0, #1
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	2b18      	cmp	r3, #24
 800d3de:	d830      	bhi.n	800d442 <__gethex+0x126>
 800d3e0:	f1a0 0210 	sub.w	r2, r0, #16
 800d3e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d3e8:	f7ff ff82 	bl	800d2f0 <__hexdig_fun>
 800d3ec:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d3f0:	fa5f fc8c 	uxtb.w	ip, ip
 800d3f4:	f1bc 0f18 	cmp.w	ip, #24
 800d3f8:	f04f 030a 	mov.w	r3, #10
 800d3fc:	d91e      	bls.n	800d43c <__gethex+0x120>
 800d3fe:	b104      	cbz	r4, 800d402 <__gethex+0xe6>
 800d400:	4252      	negs	r2, r2
 800d402:	4417      	add	r7, r2
 800d404:	f8ca 1000 	str.w	r1, [sl]
 800d408:	b1ed      	cbz	r5, 800d446 <__gethex+0x12a>
 800d40a:	f1bb 0f00 	cmp.w	fp, #0
 800d40e:	bf0c      	ite	eq
 800d410:	2506      	moveq	r5, #6
 800d412:	2500      	movne	r5, #0
 800d414:	4628      	mov	r0, r5
 800d416:	b005      	add	sp, #20
 800d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41c:	2500      	movs	r5, #0
 800d41e:	462c      	mov	r4, r5
 800d420:	e7b0      	b.n	800d384 <__gethex+0x68>
 800d422:	2c00      	cmp	r4, #0
 800d424:	d1c7      	bne.n	800d3b6 <__gethex+0x9a>
 800d426:	4627      	mov	r7, r4
 800d428:	e7c7      	b.n	800d3ba <__gethex+0x9e>
 800d42a:	464e      	mov	r6, r9
 800d42c:	462f      	mov	r7, r5
 800d42e:	2501      	movs	r5, #1
 800d430:	e7c3      	b.n	800d3ba <__gethex+0x9e>
 800d432:	2400      	movs	r4, #0
 800d434:	1cb1      	adds	r1, r6, #2
 800d436:	e7cc      	b.n	800d3d2 <__gethex+0xb6>
 800d438:	2401      	movs	r4, #1
 800d43a:	e7fb      	b.n	800d434 <__gethex+0x118>
 800d43c:	fb03 0002 	mla	r0, r3, r2, r0
 800d440:	e7ce      	b.n	800d3e0 <__gethex+0xc4>
 800d442:	4631      	mov	r1, r6
 800d444:	e7de      	b.n	800d404 <__gethex+0xe8>
 800d446:	eba6 0309 	sub.w	r3, r6, r9
 800d44a:	3b01      	subs	r3, #1
 800d44c:	4629      	mov	r1, r5
 800d44e:	2b07      	cmp	r3, #7
 800d450:	dc0a      	bgt.n	800d468 <__gethex+0x14c>
 800d452:	9801      	ldr	r0, [sp, #4]
 800d454:	f7fd ff90 	bl	800b378 <_Balloc>
 800d458:	4604      	mov	r4, r0
 800d45a:	b940      	cbnz	r0, 800d46e <__gethex+0x152>
 800d45c:	4b5c      	ldr	r3, [pc, #368]	@ (800d5d0 <__gethex+0x2b4>)
 800d45e:	4602      	mov	r2, r0
 800d460:	21e4      	movs	r1, #228	@ 0xe4
 800d462:	485c      	ldr	r0, [pc, #368]	@ (800d5d4 <__gethex+0x2b8>)
 800d464:	f7ff fec0 	bl	800d1e8 <__assert_func>
 800d468:	3101      	adds	r1, #1
 800d46a:	105b      	asrs	r3, r3, #1
 800d46c:	e7ef      	b.n	800d44e <__gethex+0x132>
 800d46e:	f100 0a14 	add.w	sl, r0, #20
 800d472:	2300      	movs	r3, #0
 800d474:	4655      	mov	r5, sl
 800d476:	469b      	mov	fp, r3
 800d478:	45b1      	cmp	r9, r6
 800d47a:	d337      	bcc.n	800d4ec <__gethex+0x1d0>
 800d47c:	f845 bb04 	str.w	fp, [r5], #4
 800d480:	eba5 050a 	sub.w	r5, r5, sl
 800d484:	10ad      	asrs	r5, r5, #2
 800d486:	6125      	str	r5, [r4, #16]
 800d488:	4658      	mov	r0, fp
 800d48a:	f7fe f867 	bl	800b55c <__hi0bits>
 800d48e:	016d      	lsls	r5, r5, #5
 800d490:	f8d8 6000 	ldr.w	r6, [r8]
 800d494:	1a2d      	subs	r5, r5, r0
 800d496:	42b5      	cmp	r5, r6
 800d498:	dd54      	ble.n	800d544 <__gethex+0x228>
 800d49a:	1bad      	subs	r5, r5, r6
 800d49c:	4629      	mov	r1, r5
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f7fe fbfb 	bl	800bc9a <__any_on>
 800d4a4:	4681      	mov	r9, r0
 800d4a6:	b178      	cbz	r0, 800d4c8 <__gethex+0x1ac>
 800d4a8:	1e6b      	subs	r3, r5, #1
 800d4aa:	1159      	asrs	r1, r3, #5
 800d4ac:	f003 021f 	and.w	r2, r3, #31
 800d4b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d4b4:	f04f 0901 	mov.w	r9, #1
 800d4b8:	fa09 f202 	lsl.w	r2, r9, r2
 800d4bc:	420a      	tst	r2, r1
 800d4be:	d003      	beq.n	800d4c8 <__gethex+0x1ac>
 800d4c0:	454b      	cmp	r3, r9
 800d4c2:	dc36      	bgt.n	800d532 <__gethex+0x216>
 800d4c4:	f04f 0902 	mov.w	r9, #2
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f7ff febe 	bl	800d24c <rshift>
 800d4d0:	442f      	add	r7, r5
 800d4d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4d6:	42bb      	cmp	r3, r7
 800d4d8:	da42      	bge.n	800d560 <__gethex+0x244>
 800d4da:	9801      	ldr	r0, [sp, #4]
 800d4dc:	4621      	mov	r1, r4
 800d4de:	f7fd ff8b 	bl	800b3f8 <_Bfree>
 800d4e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	6013      	str	r3, [r2, #0]
 800d4e8:	25a3      	movs	r5, #163	@ 0xa3
 800d4ea:	e793      	b.n	800d414 <__gethex+0xf8>
 800d4ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d4f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d4f2:	d012      	beq.n	800d51a <__gethex+0x1fe>
 800d4f4:	2b20      	cmp	r3, #32
 800d4f6:	d104      	bne.n	800d502 <__gethex+0x1e6>
 800d4f8:	f845 bb04 	str.w	fp, [r5], #4
 800d4fc:	f04f 0b00 	mov.w	fp, #0
 800d500:	465b      	mov	r3, fp
 800d502:	7830      	ldrb	r0, [r6, #0]
 800d504:	9303      	str	r3, [sp, #12]
 800d506:	f7ff fef3 	bl	800d2f0 <__hexdig_fun>
 800d50a:	9b03      	ldr	r3, [sp, #12]
 800d50c:	f000 000f 	and.w	r0, r0, #15
 800d510:	4098      	lsls	r0, r3
 800d512:	ea4b 0b00 	orr.w	fp, fp, r0
 800d516:	3304      	adds	r3, #4
 800d518:	e7ae      	b.n	800d478 <__gethex+0x15c>
 800d51a:	45b1      	cmp	r9, r6
 800d51c:	d8ea      	bhi.n	800d4f4 <__gethex+0x1d8>
 800d51e:	492b      	ldr	r1, [pc, #172]	@ (800d5cc <__gethex+0x2b0>)
 800d520:	9303      	str	r3, [sp, #12]
 800d522:	2201      	movs	r2, #1
 800d524:	4630      	mov	r0, r6
 800d526:	f7ff fe05 	bl	800d134 <strncmp>
 800d52a:	9b03      	ldr	r3, [sp, #12]
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d1e1      	bne.n	800d4f4 <__gethex+0x1d8>
 800d530:	e7a2      	b.n	800d478 <__gethex+0x15c>
 800d532:	1ea9      	subs	r1, r5, #2
 800d534:	4620      	mov	r0, r4
 800d536:	f7fe fbb0 	bl	800bc9a <__any_on>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d0c2      	beq.n	800d4c4 <__gethex+0x1a8>
 800d53e:	f04f 0903 	mov.w	r9, #3
 800d542:	e7c1      	b.n	800d4c8 <__gethex+0x1ac>
 800d544:	da09      	bge.n	800d55a <__gethex+0x23e>
 800d546:	1b75      	subs	r5, r6, r5
 800d548:	4621      	mov	r1, r4
 800d54a:	9801      	ldr	r0, [sp, #4]
 800d54c:	462a      	mov	r2, r5
 800d54e:	f7fe f96b 	bl	800b828 <__lshift>
 800d552:	1b7f      	subs	r7, r7, r5
 800d554:	4604      	mov	r4, r0
 800d556:	f100 0a14 	add.w	sl, r0, #20
 800d55a:	f04f 0900 	mov.w	r9, #0
 800d55e:	e7b8      	b.n	800d4d2 <__gethex+0x1b6>
 800d560:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d564:	42bd      	cmp	r5, r7
 800d566:	dd6f      	ble.n	800d648 <__gethex+0x32c>
 800d568:	1bed      	subs	r5, r5, r7
 800d56a:	42ae      	cmp	r6, r5
 800d56c:	dc34      	bgt.n	800d5d8 <__gethex+0x2bc>
 800d56e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d572:	2b02      	cmp	r3, #2
 800d574:	d022      	beq.n	800d5bc <__gethex+0x2a0>
 800d576:	2b03      	cmp	r3, #3
 800d578:	d024      	beq.n	800d5c4 <__gethex+0x2a8>
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d115      	bne.n	800d5aa <__gethex+0x28e>
 800d57e:	42ae      	cmp	r6, r5
 800d580:	d113      	bne.n	800d5aa <__gethex+0x28e>
 800d582:	2e01      	cmp	r6, #1
 800d584:	d10b      	bne.n	800d59e <__gethex+0x282>
 800d586:	9a02      	ldr	r2, [sp, #8]
 800d588:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d58c:	6013      	str	r3, [r2, #0]
 800d58e:	2301      	movs	r3, #1
 800d590:	6123      	str	r3, [r4, #16]
 800d592:	f8ca 3000 	str.w	r3, [sl]
 800d596:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d598:	2562      	movs	r5, #98	@ 0x62
 800d59a:	601c      	str	r4, [r3, #0]
 800d59c:	e73a      	b.n	800d414 <__gethex+0xf8>
 800d59e:	1e71      	subs	r1, r6, #1
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f7fe fb7a 	bl	800bc9a <__any_on>
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d1ed      	bne.n	800d586 <__gethex+0x26a>
 800d5aa:	9801      	ldr	r0, [sp, #4]
 800d5ac:	4621      	mov	r1, r4
 800d5ae:	f7fd ff23 	bl	800b3f8 <_Bfree>
 800d5b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	2550      	movs	r5, #80	@ 0x50
 800d5ba:	e72b      	b.n	800d414 <__gethex+0xf8>
 800d5bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1f3      	bne.n	800d5aa <__gethex+0x28e>
 800d5c2:	e7e0      	b.n	800d586 <__gethex+0x26a>
 800d5c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1dd      	bne.n	800d586 <__gethex+0x26a>
 800d5ca:	e7ee      	b.n	800d5aa <__gethex+0x28e>
 800d5cc:	0800e2b8 	.word	0x0800e2b8
 800d5d0:	0800e151 	.word	0x0800e151
 800d5d4:	0800e466 	.word	0x0800e466
 800d5d8:	1e6f      	subs	r7, r5, #1
 800d5da:	f1b9 0f00 	cmp.w	r9, #0
 800d5de:	d130      	bne.n	800d642 <__gethex+0x326>
 800d5e0:	b127      	cbz	r7, 800d5ec <__gethex+0x2d0>
 800d5e2:	4639      	mov	r1, r7
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f7fe fb58 	bl	800bc9a <__any_on>
 800d5ea:	4681      	mov	r9, r0
 800d5ec:	117a      	asrs	r2, r7, #5
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d5f4:	f007 071f 	and.w	r7, r7, #31
 800d5f8:	40bb      	lsls	r3, r7
 800d5fa:	4213      	tst	r3, r2
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	4620      	mov	r0, r4
 800d600:	bf18      	it	ne
 800d602:	f049 0902 	orrne.w	r9, r9, #2
 800d606:	f7ff fe21 	bl	800d24c <rshift>
 800d60a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d60e:	1b76      	subs	r6, r6, r5
 800d610:	2502      	movs	r5, #2
 800d612:	f1b9 0f00 	cmp.w	r9, #0
 800d616:	d047      	beq.n	800d6a8 <__gethex+0x38c>
 800d618:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d015      	beq.n	800d64c <__gethex+0x330>
 800d620:	2b03      	cmp	r3, #3
 800d622:	d017      	beq.n	800d654 <__gethex+0x338>
 800d624:	2b01      	cmp	r3, #1
 800d626:	d109      	bne.n	800d63c <__gethex+0x320>
 800d628:	f019 0f02 	tst.w	r9, #2
 800d62c:	d006      	beq.n	800d63c <__gethex+0x320>
 800d62e:	f8da 3000 	ldr.w	r3, [sl]
 800d632:	ea49 0903 	orr.w	r9, r9, r3
 800d636:	f019 0f01 	tst.w	r9, #1
 800d63a:	d10e      	bne.n	800d65a <__gethex+0x33e>
 800d63c:	f045 0510 	orr.w	r5, r5, #16
 800d640:	e032      	b.n	800d6a8 <__gethex+0x38c>
 800d642:	f04f 0901 	mov.w	r9, #1
 800d646:	e7d1      	b.n	800d5ec <__gethex+0x2d0>
 800d648:	2501      	movs	r5, #1
 800d64a:	e7e2      	b.n	800d612 <__gethex+0x2f6>
 800d64c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d64e:	f1c3 0301 	rsb	r3, r3, #1
 800d652:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d656:	2b00      	cmp	r3, #0
 800d658:	d0f0      	beq.n	800d63c <__gethex+0x320>
 800d65a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d65e:	f104 0314 	add.w	r3, r4, #20
 800d662:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d666:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d66a:	f04f 0c00 	mov.w	ip, #0
 800d66e:	4618      	mov	r0, r3
 800d670:	f853 2b04 	ldr.w	r2, [r3], #4
 800d674:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d678:	d01b      	beq.n	800d6b2 <__gethex+0x396>
 800d67a:	3201      	adds	r2, #1
 800d67c:	6002      	str	r2, [r0, #0]
 800d67e:	2d02      	cmp	r5, #2
 800d680:	f104 0314 	add.w	r3, r4, #20
 800d684:	d13c      	bne.n	800d700 <__gethex+0x3e4>
 800d686:	f8d8 2000 	ldr.w	r2, [r8]
 800d68a:	3a01      	subs	r2, #1
 800d68c:	42b2      	cmp	r2, r6
 800d68e:	d109      	bne.n	800d6a4 <__gethex+0x388>
 800d690:	1171      	asrs	r1, r6, #5
 800d692:	2201      	movs	r2, #1
 800d694:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d698:	f006 061f 	and.w	r6, r6, #31
 800d69c:	fa02 f606 	lsl.w	r6, r2, r6
 800d6a0:	421e      	tst	r6, r3
 800d6a2:	d13a      	bne.n	800d71a <__gethex+0x3fe>
 800d6a4:	f045 0520 	orr.w	r5, r5, #32
 800d6a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6aa:	601c      	str	r4, [r3, #0]
 800d6ac:	9b02      	ldr	r3, [sp, #8]
 800d6ae:	601f      	str	r7, [r3, #0]
 800d6b0:	e6b0      	b.n	800d414 <__gethex+0xf8>
 800d6b2:	4299      	cmp	r1, r3
 800d6b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d6b8:	d8d9      	bhi.n	800d66e <__gethex+0x352>
 800d6ba:	68a3      	ldr	r3, [r4, #8]
 800d6bc:	459b      	cmp	fp, r3
 800d6be:	db17      	blt.n	800d6f0 <__gethex+0x3d4>
 800d6c0:	6861      	ldr	r1, [r4, #4]
 800d6c2:	9801      	ldr	r0, [sp, #4]
 800d6c4:	3101      	adds	r1, #1
 800d6c6:	f7fd fe57 	bl	800b378 <_Balloc>
 800d6ca:	4681      	mov	r9, r0
 800d6cc:	b918      	cbnz	r0, 800d6d6 <__gethex+0x3ba>
 800d6ce:	4b1a      	ldr	r3, [pc, #104]	@ (800d738 <__gethex+0x41c>)
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	2184      	movs	r1, #132	@ 0x84
 800d6d4:	e6c5      	b.n	800d462 <__gethex+0x146>
 800d6d6:	6922      	ldr	r2, [r4, #16]
 800d6d8:	3202      	adds	r2, #2
 800d6da:	f104 010c 	add.w	r1, r4, #12
 800d6de:	0092      	lsls	r2, r2, #2
 800d6e0:	300c      	adds	r0, #12
 800d6e2:	f7ff fd6b 	bl	800d1bc <memcpy>
 800d6e6:	4621      	mov	r1, r4
 800d6e8:	9801      	ldr	r0, [sp, #4]
 800d6ea:	f7fd fe85 	bl	800b3f8 <_Bfree>
 800d6ee:	464c      	mov	r4, r9
 800d6f0:	6923      	ldr	r3, [r4, #16]
 800d6f2:	1c5a      	adds	r2, r3, #1
 800d6f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d6f8:	6122      	str	r2, [r4, #16]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	615a      	str	r2, [r3, #20]
 800d6fe:	e7be      	b.n	800d67e <__gethex+0x362>
 800d700:	6922      	ldr	r2, [r4, #16]
 800d702:	455a      	cmp	r2, fp
 800d704:	dd0b      	ble.n	800d71e <__gethex+0x402>
 800d706:	2101      	movs	r1, #1
 800d708:	4620      	mov	r0, r4
 800d70a:	f7ff fd9f 	bl	800d24c <rshift>
 800d70e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d712:	3701      	adds	r7, #1
 800d714:	42bb      	cmp	r3, r7
 800d716:	f6ff aee0 	blt.w	800d4da <__gethex+0x1be>
 800d71a:	2501      	movs	r5, #1
 800d71c:	e7c2      	b.n	800d6a4 <__gethex+0x388>
 800d71e:	f016 061f 	ands.w	r6, r6, #31
 800d722:	d0fa      	beq.n	800d71a <__gethex+0x3fe>
 800d724:	4453      	add	r3, sl
 800d726:	f1c6 0620 	rsb	r6, r6, #32
 800d72a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d72e:	f7fd ff15 	bl	800b55c <__hi0bits>
 800d732:	42b0      	cmp	r0, r6
 800d734:	dbe7      	blt.n	800d706 <__gethex+0x3ea>
 800d736:	e7f0      	b.n	800d71a <__gethex+0x3fe>
 800d738:	0800e151 	.word	0x0800e151

0800d73c <L_shift>:
 800d73c:	f1c2 0208 	rsb	r2, r2, #8
 800d740:	0092      	lsls	r2, r2, #2
 800d742:	b570      	push	{r4, r5, r6, lr}
 800d744:	f1c2 0620 	rsb	r6, r2, #32
 800d748:	6843      	ldr	r3, [r0, #4]
 800d74a:	6804      	ldr	r4, [r0, #0]
 800d74c:	fa03 f506 	lsl.w	r5, r3, r6
 800d750:	432c      	orrs	r4, r5
 800d752:	40d3      	lsrs	r3, r2
 800d754:	6004      	str	r4, [r0, #0]
 800d756:	f840 3f04 	str.w	r3, [r0, #4]!
 800d75a:	4288      	cmp	r0, r1
 800d75c:	d3f4      	bcc.n	800d748 <L_shift+0xc>
 800d75e:	bd70      	pop	{r4, r5, r6, pc}

0800d760 <__match>:
 800d760:	b530      	push	{r4, r5, lr}
 800d762:	6803      	ldr	r3, [r0, #0]
 800d764:	3301      	adds	r3, #1
 800d766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d76a:	b914      	cbnz	r4, 800d772 <__match+0x12>
 800d76c:	6003      	str	r3, [r0, #0]
 800d76e:	2001      	movs	r0, #1
 800d770:	bd30      	pop	{r4, r5, pc}
 800d772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d776:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d77a:	2d19      	cmp	r5, #25
 800d77c:	bf98      	it	ls
 800d77e:	3220      	addls	r2, #32
 800d780:	42a2      	cmp	r2, r4
 800d782:	d0f0      	beq.n	800d766 <__match+0x6>
 800d784:	2000      	movs	r0, #0
 800d786:	e7f3      	b.n	800d770 <__match+0x10>

0800d788 <__hexnan>:
 800d788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78c:	680b      	ldr	r3, [r1, #0]
 800d78e:	6801      	ldr	r1, [r0, #0]
 800d790:	115e      	asrs	r6, r3, #5
 800d792:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d796:	f013 031f 	ands.w	r3, r3, #31
 800d79a:	b087      	sub	sp, #28
 800d79c:	bf18      	it	ne
 800d79e:	3604      	addne	r6, #4
 800d7a0:	2500      	movs	r5, #0
 800d7a2:	1f37      	subs	r7, r6, #4
 800d7a4:	4682      	mov	sl, r0
 800d7a6:	4690      	mov	r8, r2
 800d7a8:	9301      	str	r3, [sp, #4]
 800d7aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800d7ae:	46b9      	mov	r9, r7
 800d7b0:	463c      	mov	r4, r7
 800d7b2:	9502      	str	r5, [sp, #8]
 800d7b4:	46ab      	mov	fp, r5
 800d7b6:	784a      	ldrb	r2, [r1, #1]
 800d7b8:	1c4b      	adds	r3, r1, #1
 800d7ba:	9303      	str	r3, [sp, #12]
 800d7bc:	b342      	cbz	r2, 800d810 <__hexnan+0x88>
 800d7be:	4610      	mov	r0, r2
 800d7c0:	9105      	str	r1, [sp, #20]
 800d7c2:	9204      	str	r2, [sp, #16]
 800d7c4:	f7ff fd94 	bl	800d2f0 <__hexdig_fun>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d151      	bne.n	800d870 <__hexnan+0xe8>
 800d7cc:	9a04      	ldr	r2, [sp, #16]
 800d7ce:	9905      	ldr	r1, [sp, #20]
 800d7d0:	2a20      	cmp	r2, #32
 800d7d2:	d818      	bhi.n	800d806 <__hexnan+0x7e>
 800d7d4:	9b02      	ldr	r3, [sp, #8]
 800d7d6:	459b      	cmp	fp, r3
 800d7d8:	dd13      	ble.n	800d802 <__hexnan+0x7a>
 800d7da:	454c      	cmp	r4, r9
 800d7dc:	d206      	bcs.n	800d7ec <__hexnan+0x64>
 800d7de:	2d07      	cmp	r5, #7
 800d7e0:	dc04      	bgt.n	800d7ec <__hexnan+0x64>
 800d7e2:	462a      	mov	r2, r5
 800d7e4:	4649      	mov	r1, r9
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f7ff ffa8 	bl	800d73c <L_shift>
 800d7ec:	4544      	cmp	r4, r8
 800d7ee:	d952      	bls.n	800d896 <__hexnan+0x10e>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	f1a4 0904 	sub.w	r9, r4, #4
 800d7f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7fa:	f8cd b008 	str.w	fp, [sp, #8]
 800d7fe:	464c      	mov	r4, r9
 800d800:	461d      	mov	r5, r3
 800d802:	9903      	ldr	r1, [sp, #12]
 800d804:	e7d7      	b.n	800d7b6 <__hexnan+0x2e>
 800d806:	2a29      	cmp	r2, #41	@ 0x29
 800d808:	d157      	bne.n	800d8ba <__hexnan+0x132>
 800d80a:	3102      	adds	r1, #2
 800d80c:	f8ca 1000 	str.w	r1, [sl]
 800d810:	f1bb 0f00 	cmp.w	fp, #0
 800d814:	d051      	beq.n	800d8ba <__hexnan+0x132>
 800d816:	454c      	cmp	r4, r9
 800d818:	d206      	bcs.n	800d828 <__hexnan+0xa0>
 800d81a:	2d07      	cmp	r5, #7
 800d81c:	dc04      	bgt.n	800d828 <__hexnan+0xa0>
 800d81e:	462a      	mov	r2, r5
 800d820:	4649      	mov	r1, r9
 800d822:	4620      	mov	r0, r4
 800d824:	f7ff ff8a 	bl	800d73c <L_shift>
 800d828:	4544      	cmp	r4, r8
 800d82a:	d936      	bls.n	800d89a <__hexnan+0x112>
 800d82c:	f1a8 0204 	sub.w	r2, r8, #4
 800d830:	4623      	mov	r3, r4
 800d832:	f853 1b04 	ldr.w	r1, [r3], #4
 800d836:	f842 1f04 	str.w	r1, [r2, #4]!
 800d83a:	429f      	cmp	r7, r3
 800d83c:	d2f9      	bcs.n	800d832 <__hexnan+0xaa>
 800d83e:	1b3b      	subs	r3, r7, r4
 800d840:	f023 0303 	bic.w	r3, r3, #3
 800d844:	3304      	adds	r3, #4
 800d846:	3401      	adds	r4, #1
 800d848:	3e03      	subs	r6, #3
 800d84a:	42b4      	cmp	r4, r6
 800d84c:	bf88      	it	hi
 800d84e:	2304      	movhi	r3, #4
 800d850:	4443      	add	r3, r8
 800d852:	2200      	movs	r2, #0
 800d854:	f843 2b04 	str.w	r2, [r3], #4
 800d858:	429f      	cmp	r7, r3
 800d85a:	d2fb      	bcs.n	800d854 <__hexnan+0xcc>
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	b91b      	cbnz	r3, 800d868 <__hexnan+0xe0>
 800d860:	4547      	cmp	r7, r8
 800d862:	d128      	bne.n	800d8b6 <__hexnan+0x12e>
 800d864:	2301      	movs	r3, #1
 800d866:	603b      	str	r3, [r7, #0]
 800d868:	2005      	movs	r0, #5
 800d86a:	b007      	add	sp, #28
 800d86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d870:	3501      	adds	r5, #1
 800d872:	2d08      	cmp	r5, #8
 800d874:	f10b 0b01 	add.w	fp, fp, #1
 800d878:	dd06      	ble.n	800d888 <__hexnan+0x100>
 800d87a:	4544      	cmp	r4, r8
 800d87c:	d9c1      	bls.n	800d802 <__hexnan+0x7a>
 800d87e:	2300      	movs	r3, #0
 800d880:	f844 3c04 	str.w	r3, [r4, #-4]
 800d884:	2501      	movs	r5, #1
 800d886:	3c04      	subs	r4, #4
 800d888:	6822      	ldr	r2, [r4, #0]
 800d88a:	f000 000f 	and.w	r0, r0, #15
 800d88e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d892:	6020      	str	r0, [r4, #0]
 800d894:	e7b5      	b.n	800d802 <__hexnan+0x7a>
 800d896:	2508      	movs	r5, #8
 800d898:	e7b3      	b.n	800d802 <__hexnan+0x7a>
 800d89a:	9b01      	ldr	r3, [sp, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d0dd      	beq.n	800d85c <__hexnan+0xd4>
 800d8a0:	f1c3 0320 	rsb	r3, r3, #32
 800d8a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d8a8:	40da      	lsrs	r2, r3
 800d8aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d8ae:	4013      	ands	r3, r2
 800d8b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d8b4:	e7d2      	b.n	800d85c <__hexnan+0xd4>
 800d8b6:	3f04      	subs	r7, #4
 800d8b8:	e7d0      	b.n	800d85c <__hexnan+0xd4>
 800d8ba:	2004      	movs	r0, #4
 800d8bc:	e7d5      	b.n	800d86a <__hexnan+0xe2>

0800d8be <__ascii_mbtowc>:
 800d8be:	b082      	sub	sp, #8
 800d8c0:	b901      	cbnz	r1, 800d8c4 <__ascii_mbtowc+0x6>
 800d8c2:	a901      	add	r1, sp, #4
 800d8c4:	b142      	cbz	r2, 800d8d8 <__ascii_mbtowc+0x1a>
 800d8c6:	b14b      	cbz	r3, 800d8dc <__ascii_mbtowc+0x1e>
 800d8c8:	7813      	ldrb	r3, [r2, #0]
 800d8ca:	600b      	str	r3, [r1, #0]
 800d8cc:	7812      	ldrb	r2, [r2, #0]
 800d8ce:	1e10      	subs	r0, r2, #0
 800d8d0:	bf18      	it	ne
 800d8d2:	2001      	movne	r0, #1
 800d8d4:	b002      	add	sp, #8
 800d8d6:	4770      	bx	lr
 800d8d8:	4610      	mov	r0, r2
 800d8da:	e7fb      	b.n	800d8d4 <__ascii_mbtowc+0x16>
 800d8dc:	f06f 0001 	mvn.w	r0, #1
 800d8e0:	e7f8      	b.n	800d8d4 <__ascii_mbtowc+0x16>

0800d8e2 <_realloc_r>:
 800d8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e6:	4680      	mov	r8, r0
 800d8e8:	4615      	mov	r5, r2
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	b921      	cbnz	r1, 800d8f8 <_realloc_r+0x16>
 800d8ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	f7fd bcb4 	b.w	800b260 <_malloc_r>
 800d8f8:	b92a      	cbnz	r2, 800d906 <_realloc_r+0x24>
 800d8fa:	f7fd fc3d 	bl	800b178 <_free_r>
 800d8fe:	2400      	movs	r4, #0
 800d900:	4620      	mov	r0, r4
 800d902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d906:	f000 f840 	bl	800d98a <_malloc_usable_size_r>
 800d90a:	4285      	cmp	r5, r0
 800d90c:	4606      	mov	r6, r0
 800d90e:	d802      	bhi.n	800d916 <_realloc_r+0x34>
 800d910:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d914:	d8f4      	bhi.n	800d900 <_realloc_r+0x1e>
 800d916:	4629      	mov	r1, r5
 800d918:	4640      	mov	r0, r8
 800d91a:	f7fd fca1 	bl	800b260 <_malloc_r>
 800d91e:	4607      	mov	r7, r0
 800d920:	2800      	cmp	r0, #0
 800d922:	d0ec      	beq.n	800d8fe <_realloc_r+0x1c>
 800d924:	42b5      	cmp	r5, r6
 800d926:	462a      	mov	r2, r5
 800d928:	4621      	mov	r1, r4
 800d92a:	bf28      	it	cs
 800d92c:	4632      	movcs	r2, r6
 800d92e:	f7ff fc45 	bl	800d1bc <memcpy>
 800d932:	4621      	mov	r1, r4
 800d934:	4640      	mov	r0, r8
 800d936:	f7fd fc1f 	bl	800b178 <_free_r>
 800d93a:	463c      	mov	r4, r7
 800d93c:	e7e0      	b.n	800d900 <_realloc_r+0x1e>

0800d93e <__ascii_wctomb>:
 800d93e:	4603      	mov	r3, r0
 800d940:	4608      	mov	r0, r1
 800d942:	b141      	cbz	r1, 800d956 <__ascii_wctomb+0x18>
 800d944:	2aff      	cmp	r2, #255	@ 0xff
 800d946:	d904      	bls.n	800d952 <__ascii_wctomb+0x14>
 800d948:	228a      	movs	r2, #138	@ 0x8a
 800d94a:	601a      	str	r2, [r3, #0]
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d950:	4770      	bx	lr
 800d952:	700a      	strb	r2, [r1, #0]
 800d954:	2001      	movs	r0, #1
 800d956:	4770      	bx	lr

0800d958 <fiprintf>:
 800d958:	b40e      	push	{r1, r2, r3}
 800d95a:	b503      	push	{r0, r1, lr}
 800d95c:	4601      	mov	r1, r0
 800d95e:	ab03      	add	r3, sp, #12
 800d960:	4805      	ldr	r0, [pc, #20]	@ (800d978 <fiprintf+0x20>)
 800d962:	f853 2b04 	ldr.w	r2, [r3], #4
 800d966:	6800      	ldr	r0, [r0, #0]
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	f7ff f9bd 	bl	800cce8 <_vfiprintf_r>
 800d96e:	b002      	add	sp, #8
 800d970:	f85d eb04 	ldr.w	lr, [sp], #4
 800d974:	b003      	add	sp, #12
 800d976:	4770      	bx	lr
 800d978:	20000f5c 	.word	0x20000f5c

0800d97c <abort>:
 800d97c:	b508      	push	{r3, lr}
 800d97e:	2006      	movs	r0, #6
 800d980:	f000 f834 	bl	800d9ec <raise>
 800d984:	2001      	movs	r0, #1
 800d986:	f7f3 fea7 	bl	80016d8 <_exit>

0800d98a <_malloc_usable_size_r>:
 800d98a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d98e:	1f18      	subs	r0, r3, #4
 800d990:	2b00      	cmp	r3, #0
 800d992:	bfbc      	itt	lt
 800d994:	580b      	ldrlt	r3, [r1, r0]
 800d996:	18c0      	addlt	r0, r0, r3
 800d998:	4770      	bx	lr

0800d99a <_raise_r>:
 800d99a:	291f      	cmp	r1, #31
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	4605      	mov	r5, r0
 800d9a0:	460c      	mov	r4, r1
 800d9a2:	d904      	bls.n	800d9ae <_raise_r+0x14>
 800d9a4:	2316      	movs	r3, #22
 800d9a6:	6003      	str	r3, [r0, #0]
 800d9a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9ac:	bd38      	pop	{r3, r4, r5, pc}
 800d9ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9b0:	b112      	cbz	r2, 800d9b8 <_raise_r+0x1e>
 800d9b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9b6:	b94b      	cbnz	r3, 800d9cc <_raise_r+0x32>
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	f000 f831 	bl	800da20 <_getpid_r>
 800d9be:	4622      	mov	r2, r4
 800d9c0:	4601      	mov	r1, r0
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9c8:	f000 b818 	b.w	800d9fc <_kill_r>
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d00a      	beq.n	800d9e6 <_raise_r+0x4c>
 800d9d0:	1c59      	adds	r1, r3, #1
 800d9d2:	d103      	bne.n	800d9dc <_raise_r+0x42>
 800d9d4:	2316      	movs	r3, #22
 800d9d6:	6003      	str	r3, [r0, #0]
 800d9d8:	2001      	movs	r0, #1
 800d9da:	e7e7      	b.n	800d9ac <_raise_r+0x12>
 800d9dc:	2100      	movs	r1, #0
 800d9de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	4798      	blx	r3
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	e7e0      	b.n	800d9ac <_raise_r+0x12>
	...

0800d9ec <raise>:
 800d9ec:	4b02      	ldr	r3, [pc, #8]	@ (800d9f8 <raise+0xc>)
 800d9ee:	4601      	mov	r1, r0
 800d9f0:	6818      	ldr	r0, [r3, #0]
 800d9f2:	f7ff bfd2 	b.w	800d99a <_raise_r>
 800d9f6:	bf00      	nop
 800d9f8:	20000f5c 	.word	0x20000f5c

0800d9fc <_kill_r>:
 800d9fc:	b538      	push	{r3, r4, r5, lr}
 800d9fe:	4d07      	ldr	r5, [pc, #28]	@ (800da1c <_kill_r+0x20>)
 800da00:	2300      	movs	r3, #0
 800da02:	4604      	mov	r4, r0
 800da04:	4608      	mov	r0, r1
 800da06:	4611      	mov	r1, r2
 800da08:	602b      	str	r3, [r5, #0]
 800da0a:	f7f3 fe55 	bl	80016b8 <_kill>
 800da0e:	1c43      	adds	r3, r0, #1
 800da10:	d102      	bne.n	800da18 <_kill_r+0x1c>
 800da12:	682b      	ldr	r3, [r5, #0]
 800da14:	b103      	cbz	r3, 800da18 <_kill_r+0x1c>
 800da16:	6023      	str	r3, [r4, #0]
 800da18:	bd38      	pop	{r3, r4, r5, pc}
 800da1a:	bf00      	nop
 800da1c:	20001984 	.word	0x20001984

0800da20 <_getpid_r>:
 800da20:	f7f3 be42 	b.w	80016a8 <_getpid>
 800da24:	0000      	movs	r0, r0
	...

0800da28 <atan>:
 800da28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2c:	ec55 4b10 	vmov	r4, r5, d0
 800da30:	4bbf      	ldr	r3, [pc, #764]	@ (800dd30 <atan+0x308>)
 800da32:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800da36:	429e      	cmp	r6, r3
 800da38:	46ab      	mov	fp, r5
 800da3a:	d918      	bls.n	800da6e <atan+0x46>
 800da3c:	4bbd      	ldr	r3, [pc, #756]	@ (800dd34 <atan+0x30c>)
 800da3e:	429e      	cmp	r6, r3
 800da40:	d801      	bhi.n	800da46 <atan+0x1e>
 800da42:	d109      	bne.n	800da58 <atan+0x30>
 800da44:	b144      	cbz	r4, 800da58 <atan+0x30>
 800da46:	4622      	mov	r2, r4
 800da48:	462b      	mov	r3, r5
 800da4a:	4620      	mov	r0, r4
 800da4c:	4629      	mov	r1, r5
 800da4e:	f7f2 fc45 	bl	80002dc <__adddf3>
 800da52:	4604      	mov	r4, r0
 800da54:	460d      	mov	r5, r1
 800da56:	e006      	b.n	800da66 <atan+0x3e>
 800da58:	f1bb 0f00 	cmp.w	fp, #0
 800da5c:	f340 812b 	ble.w	800dcb6 <atan+0x28e>
 800da60:	a597      	add	r5, pc, #604	@ (adr r5, 800dcc0 <atan+0x298>)
 800da62:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da66:	ec45 4b10 	vmov	d0, r4, r5
 800da6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6e:	4bb2      	ldr	r3, [pc, #712]	@ (800dd38 <atan+0x310>)
 800da70:	429e      	cmp	r6, r3
 800da72:	d813      	bhi.n	800da9c <atan+0x74>
 800da74:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800da78:	429e      	cmp	r6, r3
 800da7a:	d80c      	bhi.n	800da96 <atan+0x6e>
 800da7c:	a392      	add	r3, pc, #584	@ (adr r3, 800dcc8 <atan+0x2a0>)
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	4620      	mov	r0, r4
 800da84:	4629      	mov	r1, r5
 800da86:	f7f2 fc29 	bl	80002dc <__adddf3>
 800da8a:	4bac      	ldr	r3, [pc, #688]	@ (800dd3c <atan+0x314>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	f7f3 f86b 	bl	8000b68 <__aeabi_dcmpgt>
 800da92:	2800      	cmp	r0, #0
 800da94:	d1e7      	bne.n	800da66 <atan+0x3e>
 800da96:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800da9a:	e029      	b.n	800daf0 <atan+0xc8>
 800da9c:	f000 f95c 	bl	800dd58 <fabs>
 800daa0:	4ba7      	ldr	r3, [pc, #668]	@ (800dd40 <atan+0x318>)
 800daa2:	429e      	cmp	r6, r3
 800daa4:	ec55 4b10 	vmov	r4, r5, d0
 800daa8:	f200 80bc 	bhi.w	800dc24 <atan+0x1fc>
 800daac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800dab0:	429e      	cmp	r6, r3
 800dab2:	f200 809e 	bhi.w	800dbf2 <atan+0x1ca>
 800dab6:	4622      	mov	r2, r4
 800dab8:	462b      	mov	r3, r5
 800daba:	4620      	mov	r0, r4
 800dabc:	4629      	mov	r1, r5
 800dabe:	f7f2 fc0d 	bl	80002dc <__adddf3>
 800dac2:	4b9e      	ldr	r3, [pc, #632]	@ (800dd3c <atan+0x314>)
 800dac4:	2200      	movs	r2, #0
 800dac6:	f7f2 fc07 	bl	80002d8 <__aeabi_dsub>
 800daca:	2200      	movs	r2, #0
 800dacc:	4606      	mov	r6, r0
 800dace:	460f      	mov	r7, r1
 800dad0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dad4:	4620      	mov	r0, r4
 800dad6:	4629      	mov	r1, r5
 800dad8:	f7f2 fc00 	bl	80002dc <__adddf3>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	4630      	mov	r0, r6
 800dae2:	4639      	mov	r1, r7
 800dae4:	f7f2 feda 	bl	800089c <__aeabi_ddiv>
 800dae8:	f04f 0a00 	mov.w	sl, #0
 800daec:	4604      	mov	r4, r0
 800daee:	460d      	mov	r5, r1
 800daf0:	4622      	mov	r2, r4
 800daf2:	462b      	mov	r3, r5
 800daf4:	4620      	mov	r0, r4
 800daf6:	4629      	mov	r1, r5
 800daf8:	f7f2 fda6 	bl	8000648 <__aeabi_dmul>
 800dafc:	4602      	mov	r2, r0
 800dafe:	460b      	mov	r3, r1
 800db00:	4680      	mov	r8, r0
 800db02:	4689      	mov	r9, r1
 800db04:	f7f2 fda0 	bl	8000648 <__aeabi_dmul>
 800db08:	a371      	add	r3, pc, #452	@ (adr r3, 800dcd0 <atan+0x2a8>)
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	4606      	mov	r6, r0
 800db10:	460f      	mov	r7, r1
 800db12:	f7f2 fd99 	bl	8000648 <__aeabi_dmul>
 800db16:	a370      	add	r3, pc, #448	@ (adr r3, 800dcd8 <atan+0x2b0>)
 800db18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1c:	f7f2 fbde 	bl	80002dc <__adddf3>
 800db20:	4632      	mov	r2, r6
 800db22:	463b      	mov	r3, r7
 800db24:	f7f2 fd90 	bl	8000648 <__aeabi_dmul>
 800db28:	a36d      	add	r3, pc, #436	@ (adr r3, 800dce0 <atan+0x2b8>)
 800db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2e:	f7f2 fbd5 	bl	80002dc <__adddf3>
 800db32:	4632      	mov	r2, r6
 800db34:	463b      	mov	r3, r7
 800db36:	f7f2 fd87 	bl	8000648 <__aeabi_dmul>
 800db3a:	a36b      	add	r3, pc, #428	@ (adr r3, 800dce8 <atan+0x2c0>)
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	f7f2 fbcc 	bl	80002dc <__adddf3>
 800db44:	4632      	mov	r2, r6
 800db46:	463b      	mov	r3, r7
 800db48:	f7f2 fd7e 	bl	8000648 <__aeabi_dmul>
 800db4c:	a368      	add	r3, pc, #416	@ (adr r3, 800dcf0 <atan+0x2c8>)
 800db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db52:	f7f2 fbc3 	bl	80002dc <__adddf3>
 800db56:	4632      	mov	r2, r6
 800db58:	463b      	mov	r3, r7
 800db5a:	f7f2 fd75 	bl	8000648 <__aeabi_dmul>
 800db5e:	a366      	add	r3, pc, #408	@ (adr r3, 800dcf8 <atan+0x2d0>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	f7f2 fbba 	bl	80002dc <__adddf3>
 800db68:	4642      	mov	r2, r8
 800db6a:	464b      	mov	r3, r9
 800db6c:	f7f2 fd6c 	bl	8000648 <__aeabi_dmul>
 800db70:	a363      	add	r3, pc, #396	@ (adr r3, 800dd00 <atan+0x2d8>)
 800db72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db76:	4680      	mov	r8, r0
 800db78:	4689      	mov	r9, r1
 800db7a:	4630      	mov	r0, r6
 800db7c:	4639      	mov	r1, r7
 800db7e:	f7f2 fd63 	bl	8000648 <__aeabi_dmul>
 800db82:	a361      	add	r3, pc, #388	@ (adr r3, 800dd08 <atan+0x2e0>)
 800db84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db88:	f7f2 fba6 	bl	80002d8 <__aeabi_dsub>
 800db8c:	4632      	mov	r2, r6
 800db8e:	463b      	mov	r3, r7
 800db90:	f7f2 fd5a 	bl	8000648 <__aeabi_dmul>
 800db94:	a35e      	add	r3, pc, #376	@ (adr r3, 800dd10 <atan+0x2e8>)
 800db96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9a:	f7f2 fb9d 	bl	80002d8 <__aeabi_dsub>
 800db9e:	4632      	mov	r2, r6
 800dba0:	463b      	mov	r3, r7
 800dba2:	f7f2 fd51 	bl	8000648 <__aeabi_dmul>
 800dba6:	a35c      	add	r3, pc, #368	@ (adr r3, 800dd18 <atan+0x2f0>)
 800dba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbac:	f7f2 fb94 	bl	80002d8 <__aeabi_dsub>
 800dbb0:	4632      	mov	r2, r6
 800dbb2:	463b      	mov	r3, r7
 800dbb4:	f7f2 fd48 	bl	8000648 <__aeabi_dmul>
 800dbb8:	a359      	add	r3, pc, #356	@ (adr r3, 800dd20 <atan+0x2f8>)
 800dbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbe:	f7f2 fb8b 	bl	80002d8 <__aeabi_dsub>
 800dbc2:	4632      	mov	r2, r6
 800dbc4:	463b      	mov	r3, r7
 800dbc6:	f7f2 fd3f 	bl	8000648 <__aeabi_dmul>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	460b      	mov	r3, r1
 800dbce:	4640      	mov	r0, r8
 800dbd0:	4649      	mov	r1, r9
 800dbd2:	f7f2 fb83 	bl	80002dc <__adddf3>
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	462b      	mov	r3, r5
 800dbda:	f7f2 fd35 	bl	8000648 <__aeabi_dmul>
 800dbde:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	d148      	bne.n	800dc7a <atan+0x252>
 800dbe8:	4620      	mov	r0, r4
 800dbea:	4629      	mov	r1, r5
 800dbec:	f7f2 fb74 	bl	80002d8 <__aeabi_dsub>
 800dbf0:	e72f      	b.n	800da52 <atan+0x2a>
 800dbf2:	4b52      	ldr	r3, [pc, #328]	@ (800dd3c <atan+0x314>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	4629      	mov	r1, r5
 800dbfa:	f7f2 fb6d 	bl	80002d8 <__aeabi_dsub>
 800dbfe:	4b4f      	ldr	r3, [pc, #316]	@ (800dd3c <atan+0x314>)
 800dc00:	4606      	mov	r6, r0
 800dc02:	460f      	mov	r7, r1
 800dc04:	2200      	movs	r2, #0
 800dc06:	4620      	mov	r0, r4
 800dc08:	4629      	mov	r1, r5
 800dc0a:	f7f2 fb67 	bl	80002dc <__adddf3>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	460b      	mov	r3, r1
 800dc12:	4630      	mov	r0, r6
 800dc14:	4639      	mov	r1, r7
 800dc16:	f7f2 fe41 	bl	800089c <__aeabi_ddiv>
 800dc1a:	f04f 0a01 	mov.w	sl, #1
 800dc1e:	4604      	mov	r4, r0
 800dc20:	460d      	mov	r5, r1
 800dc22:	e765      	b.n	800daf0 <atan+0xc8>
 800dc24:	4b47      	ldr	r3, [pc, #284]	@ (800dd44 <atan+0x31c>)
 800dc26:	429e      	cmp	r6, r3
 800dc28:	d21c      	bcs.n	800dc64 <atan+0x23c>
 800dc2a:	4b47      	ldr	r3, [pc, #284]	@ (800dd48 <atan+0x320>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4620      	mov	r0, r4
 800dc30:	4629      	mov	r1, r5
 800dc32:	f7f2 fb51 	bl	80002d8 <__aeabi_dsub>
 800dc36:	4b44      	ldr	r3, [pc, #272]	@ (800dd48 <atan+0x320>)
 800dc38:	4606      	mov	r6, r0
 800dc3a:	460f      	mov	r7, r1
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	4620      	mov	r0, r4
 800dc40:	4629      	mov	r1, r5
 800dc42:	f7f2 fd01 	bl	8000648 <__aeabi_dmul>
 800dc46:	4b3d      	ldr	r3, [pc, #244]	@ (800dd3c <atan+0x314>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f7f2 fb47 	bl	80002dc <__adddf3>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	460b      	mov	r3, r1
 800dc52:	4630      	mov	r0, r6
 800dc54:	4639      	mov	r1, r7
 800dc56:	f7f2 fe21 	bl	800089c <__aeabi_ddiv>
 800dc5a:	f04f 0a02 	mov.w	sl, #2
 800dc5e:	4604      	mov	r4, r0
 800dc60:	460d      	mov	r5, r1
 800dc62:	e745      	b.n	800daf0 <atan+0xc8>
 800dc64:	4622      	mov	r2, r4
 800dc66:	462b      	mov	r3, r5
 800dc68:	4938      	ldr	r1, [pc, #224]	@ (800dd4c <atan+0x324>)
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	f7f2 fe16 	bl	800089c <__aeabi_ddiv>
 800dc70:	f04f 0a03 	mov.w	sl, #3
 800dc74:	4604      	mov	r4, r0
 800dc76:	460d      	mov	r5, r1
 800dc78:	e73a      	b.n	800daf0 <atan+0xc8>
 800dc7a:	4b35      	ldr	r3, [pc, #212]	@ (800dd50 <atan+0x328>)
 800dc7c:	4e35      	ldr	r6, [pc, #212]	@ (800dd54 <atan+0x32c>)
 800dc7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc86:	f7f2 fb27 	bl	80002d8 <__aeabi_dsub>
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	462b      	mov	r3, r5
 800dc8e:	f7f2 fb23 	bl	80002d8 <__aeabi_dsub>
 800dc92:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dc96:	4602      	mov	r2, r0
 800dc98:	460b      	mov	r3, r1
 800dc9a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dc9e:	f7f2 fb1b 	bl	80002d8 <__aeabi_dsub>
 800dca2:	f1bb 0f00 	cmp.w	fp, #0
 800dca6:	4604      	mov	r4, r0
 800dca8:	460d      	mov	r5, r1
 800dcaa:	f6bf aedc 	bge.w	800da66 <atan+0x3e>
 800dcae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dcb2:	461d      	mov	r5, r3
 800dcb4:	e6d7      	b.n	800da66 <atan+0x3e>
 800dcb6:	a51c      	add	r5, pc, #112	@ (adr r5, 800dd28 <atan+0x300>)
 800dcb8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dcbc:	e6d3      	b.n	800da66 <atan+0x3e>
 800dcbe:	bf00      	nop
 800dcc0:	54442d18 	.word	0x54442d18
 800dcc4:	3ff921fb 	.word	0x3ff921fb
 800dcc8:	8800759c 	.word	0x8800759c
 800dccc:	7e37e43c 	.word	0x7e37e43c
 800dcd0:	e322da11 	.word	0xe322da11
 800dcd4:	3f90ad3a 	.word	0x3f90ad3a
 800dcd8:	24760deb 	.word	0x24760deb
 800dcdc:	3fa97b4b 	.word	0x3fa97b4b
 800dce0:	a0d03d51 	.word	0xa0d03d51
 800dce4:	3fb10d66 	.word	0x3fb10d66
 800dce8:	c54c206e 	.word	0xc54c206e
 800dcec:	3fb745cd 	.word	0x3fb745cd
 800dcf0:	920083ff 	.word	0x920083ff
 800dcf4:	3fc24924 	.word	0x3fc24924
 800dcf8:	5555550d 	.word	0x5555550d
 800dcfc:	3fd55555 	.word	0x3fd55555
 800dd00:	2c6a6c2f 	.word	0x2c6a6c2f
 800dd04:	bfa2b444 	.word	0xbfa2b444
 800dd08:	52defd9a 	.word	0x52defd9a
 800dd0c:	3fadde2d 	.word	0x3fadde2d
 800dd10:	af749a6d 	.word	0xaf749a6d
 800dd14:	3fb3b0f2 	.word	0x3fb3b0f2
 800dd18:	fe231671 	.word	0xfe231671
 800dd1c:	3fbc71c6 	.word	0x3fbc71c6
 800dd20:	9998ebc4 	.word	0x9998ebc4
 800dd24:	3fc99999 	.word	0x3fc99999
 800dd28:	54442d18 	.word	0x54442d18
 800dd2c:	bff921fb 	.word	0xbff921fb
 800dd30:	440fffff 	.word	0x440fffff
 800dd34:	7ff00000 	.word	0x7ff00000
 800dd38:	3fdbffff 	.word	0x3fdbffff
 800dd3c:	3ff00000 	.word	0x3ff00000
 800dd40:	3ff2ffff 	.word	0x3ff2ffff
 800dd44:	40038000 	.word	0x40038000
 800dd48:	3ff80000 	.word	0x3ff80000
 800dd4c:	bff00000 	.word	0xbff00000
 800dd50:	0800e4c8 	.word	0x0800e4c8
 800dd54:	0800e4e8 	.word	0x0800e4e8

0800dd58 <fabs>:
 800dd58:	ec51 0b10 	vmov	r0, r1, d0
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dd62:	ec43 2b10 	vmov	d0, r2, r3
 800dd66:	4770      	bx	lr

0800dd68 <_init>:
 800dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6a:	bf00      	nop
 800dd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6e:	bc08      	pop	{r3}
 800dd70:	469e      	mov	lr, r3
 800dd72:	4770      	bx	lr

0800dd74 <_fini>:
 800dd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd76:	bf00      	nop
 800dd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd7a:	bc08      	pop	{r3}
 800dd7c:	469e      	mov	lr, r3
 800dd7e:	4770      	bx	lr
