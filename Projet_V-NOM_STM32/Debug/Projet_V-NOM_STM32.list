
Projet_V-NOM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005794  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005974  08005974  00006974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059dc  080059dc  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  080059dc  080059dc  000069dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059e4  080059e4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059e4  080059e4  000069e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059e8  080059e8  000069e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080059ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe8  20000010  080059fc  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff8  080059fc  00007ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001771d  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003680  00000000  00000000  0001e75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00021de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ba  00000000  00000000  000234b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004413  00000000  00000000  0002466a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a37f  00000000  00000000  00028a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d00ce  00000000  00000000  00042dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112eca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f80  00000000  00000000  00112f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00118e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800595c 	.word	0x0800595c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800595c 	.word	0x0800595c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000516:	4b09      	ldr	r3, [pc, #36]	@ (800053c <MX_FREERTOS_Init+0x2c>)
 8000518:	1d3c      	adds	r4, r7, #4
 800051a:	461d      	mov	r5, r3
 800051c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	682b      	ldr	r3, [r5, #0]
 8000522:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f004 f84e 	bl	80045ca <osThreadCreate>
 800052e:	4603      	mov	r3, r0
 8000530:	4a03      	ldr	r2, [pc, #12]	@ (8000540 <MX_FREERTOS_Init+0x30>)
 8000532:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bdb0      	pop	{r4, r5, r7, pc}
 800053c:	08005980 	.word	0x08005980
 8000540:	2000002c 	.word	0x2000002c

08000544 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f004 f863 	bl	8004618 <osDelay>
 8000552:	e7fb      	b.n	800054c <StartDefaultTask+0x8>

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b4f      	ldr	r3, [pc, #316]	@ (80006a8 <MX_GPIO_Init+0x154>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a4e      	ldr	r2, [pc, #312]	@ (80006a8 <MX_GPIO_Init+0x154>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b4c      	ldr	r3, [pc, #304]	@ (80006a8 <MX_GPIO_Init+0x154>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	4b49      	ldr	r3, [pc, #292]	@ (80006a8 <MX_GPIO_Init+0x154>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a48      	ldr	r2, [pc, #288]	@ (80006a8 <MX_GPIO_Init+0x154>)
 8000588:	f043 0320 	orr.w	r3, r3, #32
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b46      	ldr	r3, [pc, #280]	@ (80006a8 <MX_GPIO_Init+0x154>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0320 	and.w	r3, r3, #32
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b43      	ldr	r3, [pc, #268]	@ (80006a8 <MX_GPIO_Init+0x154>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a42      	ldr	r2, [pc, #264]	@ (80006a8 <MX_GPIO_Init+0x154>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b40      	ldr	r3, [pc, #256]	@ (80006a8 <MX_GPIO_Init+0x154>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b3d      	ldr	r3, [pc, #244]	@ (80006a8 <MX_GPIO_Init+0x154>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a3c      	ldr	r2, [pc, #240]	@ (80006a8 <MX_GPIO_Init+0x154>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b3a      	ldr	r3, [pc, #232]	@ (80006a8 <MX_GPIO_Init+0x154>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 80005d0:	4836      	ldr	r0, [pc, #216]	@ (80006ac <MX_GPIO_Init+0x158>)
 80005d2:	f001 f85f 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2103      	movs	r1, #3
 80005da:	4835      	ldr	r0, [pc, #212]	@ (80006b0 <MX_GPIO_Init+0x15c>)
 80005dc:	f001 f85a 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 80005e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	482d      	ldr	r0, [pc, #180]	@ (80006ac <MX_GPIO_Init+0x158>)
 80005f6:	f000 fecb 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ToF1_Pin;
 80005fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000600:	2303      	movs	r3, #3
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ToF1_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4827      	ldr	r0, [pc, #156]	@ (80006ac <MX_GPIO_Init+0x158>)
 8000610:	f000 febe 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ToF2_Pin;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000618:	2303      	movs	r3, #3
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ToF2_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062a:	f000 feb1 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AG_INT1_Pin|AG_INT2_Pin;
 800062e:	2318      	movs	r3, #24
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000632:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000646:	f000 fea3 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin;
 800064a:	f44f 6341 	mov.w	r3, #3088	@ 0xc10
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4812      	ldr	r0, [pc, #72]	@ (80006ac <MX_GPIO_Init+0x158>)
 8000664:	f000 fe94 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8000668:	2303      	movs	r3, #3
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <MX_GPIO_Init+0x15c>)
 8000680:	f000 fe86 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin;
 8000684:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_MODE_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_GPIO_Init+0x15c>)
 800069a:	f000 fe79 	bl	8001390 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	@ 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000800 	.word	0x48000800
 80006b0:	48000400 	.word	0x48000400

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fd15 	bl	80010e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f814 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f7ff ff48 	bl	8000554 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006c4:	f000 f856 	bl	8000774 <MX_SPI1_Init>
  MX_TIM1_Init();
 80006c8:	f000 f938 	bl	800093c <MX_TIM1_Init>
  MX_TIM3_Init();
 80006cc:	f000 f9fe 	bl	8000acc <MX_TIM3_Init>
  MX_TIM4_Init();
 80006d0:	f000 fa52 	bl	8000b78 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 fbde 	bl	8000e94 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80006d8:	f000 fb90 	bl	8000dfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80006dc:	f7ff ff18 	bl	8000510 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006e0:	f003 ff6c 	bl	80045bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <main+0x30>

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	@ 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0318 	add.w	r3, r7, #24
 80006f2:	2238      	movs	r2, #56	@ 0x38
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 f904 	bl	8005904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800070e:	f000 ffd9 	bl	80016c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000716:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2340      	movs	r3, #64	@ 0x40
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0318 	add.w	r3, r7, #24
 8000728:	4618      	mov	r0, r3
 800072a:	f001 f87f 	bl	800182c <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000734:	f000 f818 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2301      	movs	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fb7d 	bl	8001e50 <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800075c:	f000 f804 	bl	8000768 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	@ 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_SPI1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <MX_SPI1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_SPI1_Init+0x74>)
 8000780:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_SPI1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_SPI1_Init+0x74>)
 800078e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000792:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_SPI1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_SPI1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007c2:	2207      	movs	r2, #7
 80007c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007ce:	2208      	movs	r2, #8
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_SPI1_Init+0x74>)
 80007d4:	f001 ff48 	bl	8002668 <HAL_SPI_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f7ff ffc3 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000030 	.word	0x20000030
 80007ec:	40013000 	.word	0x40013000

080007f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a17      	ldr	r2, [pc, #92]	@ (800086c <HAL_SPI_MspInit+0x7c>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d128      	bne.n	8000864 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <HAL_SPI_MspInit+0x80>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000816:	4a16      	ldr	r2, [pc, #88]	@ (8000870 <HAL_SPI_MspInit+0x80>)
 8000818:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800081c:	6613      	str	r3, [r2, #96]	@ 0x60
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <HAL_SPI_MspInit+0x80>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000822:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <HAL_SPI_MspInit+0x80>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <HAL_SPI_MspInit+0x80>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <HAL_SPI_MspInit+0x80>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000842:	23e0      	movs	r3, #224	@ 0xe0
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000852:	2305      	movs	r3, #5
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000860:	f000 fd96 	bl	8001390 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	@ 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40013000 	.word	0x40013000
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_MspInit+0x50>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	4a11      	ldr	r2, [pc, #68]	@ (80008c4 <HAL_MspInit+0x50>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6613      	str	r3, [r2, #96]	@ 0x60
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <HAL_MspInit+0x50>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <HAL_MspInit+0x50>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	4a0b      	ldr	r2, [pc, #44]	@ (80008c4 <HAL_MspInit+0x50>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089c:	6593      	str	r3, [r2, #88]	@ 0x58
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_MspInit+0x50>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	210f      	movs	r1, #15
 80008ae:	f06f 0001 	mvn.w	r0, #1
 80008b2:	f000 fd46 	bl	8001342 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008b6:	f000 ffa9 	bl	800180c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <NMI_Handler+0x4>

080008d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <MemManage_Handler+0x4>

080008e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <UsageFault_Handler+0x4>

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000902:	f000 fc43 	bl	800118c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000906:	f004 fb79 	bl	8004ffc <xTaskGetSchedulerState>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d001      	beq.n	8000914 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000910:	f004 fdba 	bl	8005488 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	@ (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b09c      	sub	sp, #112	@ 0x70
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2234      	movs	r2, #52	@ 0x34
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f004 ffc4 	bl	8005904 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800097c:	4b51      	ldr	r3, [pc, #324]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 800097e:	4a52      	ldr	r2, [pc, #328]	@ (8000ac8 <MX_TIM1_Init+0x18c>)
 8000980:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000982:	4b50      	ldr	r3, [pc, #320]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b4e      	ldr	r3, [pc, #312]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800098e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 8000990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000994:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000996:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800099c:	4b49      	ldr	r3, [pc, #292]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b48      	ldr	r3, [pc, #288]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a8:	4846      	ldr	r0, [pc, #280]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 80009aa:	f001 ff08 	bl	80027be <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009b4:	f7ff fed8 	bl	8000768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009c2:	4619      	mov	r1, r3
 80009c4:	483f      	ldr	r0, [pc, #252]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 80009c6:	f002 f96d 	bl	8002ca4 <HAL_TIM_ConfigClockSource>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009d0:	f7ff feca 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009d4:	483b      	ldr	r0, [pc, #236]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 80009d6:	f001 ff49 	bl	800286c <HAL_TIM_PWM_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009e0:	f7ff fec2 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009f4:	4619      	mov	r1, r3
 80009f6:	4833      	ldr	r0, [pc, #204]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 80009f8:	f002 fe7c 	bl	80036f4 <HAL_TIMEx_MasterConfigSynchronization>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a02:	f7ff feb1 	bl	8000768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a06:	2360      	movs	r3, #96	@ 0x60
 8000a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a26:	2200      	movs	r2, #0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4826      	ldr	r0, [pc, #152]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 8000a2c:	f002 f826 	bl	8002a7c <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a36:	f7ff fe97 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a3e:	2204      	movs	r2, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4820      	ldr	r0, [pc, #128]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 8000a44:	f002 f81a 	bl	8002a7c <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a4e:	f7ff fe8b 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a56:	2208      	movs	r2, #8
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481a      	ldr	r0, [pc, #104]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 8000a5c:	f002 f80e 	bl	8002a7c <HAL_TIM_PWM_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000a66:	f7ff fe7f 	bl	8000768 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 8000aa8:	f002 fea6 	bl	80037f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000ab2:	f7ff fe59 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ab6:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <MX_TIM1_Init+0x188>)
 8000ab8:	f000 f94a 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 8000abc:	bf00      	nop
 8000abe:	3770      	adds	r7, #112	@ 0x70
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000094 	.word	0x20000094
 8000ac8:	40012c00 	.word	0x40012c00

08000acc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	@ 0x30
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	2224      	movs	r2, #36	@ 0x24
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 ff12 	bl	8005904 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000aec:	4a21      	ldr	r2, [pc, #132]	@ (8000b74 <MX_TIM3_Init+0xa8>)
 8000aee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000afe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000b3c:	f001 fef7 	bl	800292e <HAL_TIM_Encoder_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b46:	f7ff fe0f 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <MX_TIM3_Init+0xa4>)
 8000b58:	f002 fdcc 	bl	80036f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b62:	f7ff fe01 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	3730      	adds	r7, #48	@ 0x30
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000e0 	.word	0x200000e0
 8000b74:	40000400 	.word	0x40000400

08000b78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	@ 0x30
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2224      	movs	r2, #36	@ 0x24
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f004 febc 	bl	8005904 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000b98:	4a21      	ldr	r2, [pc, #132]	@ (8000c20 <MX_TIM4_Init+0xa8>)
 8000b9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000be8:	f001 fea1 	bl	800292e <HAL_TIM_Encoder_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000bf2:	f7ff fdb9 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <MX_TIM4_Init+0xa4>)
 8000c04:	f002 fd76 	bl	80036f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c0e:	f7ff fdab 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3730      	adds	r7, #48	@ 0x30
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000012c 	.word	0x2000012c
 8000c20:	40000800 	.word	0x40000800

08000c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_TIM_Base_MspInit+0x38>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10b      	bne.n	8000c4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_TIM_Base_MspInit+0x3c>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c3a:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <HAL_TIM_Base_MspInit+0x3c>)
 8000c3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <HAL_TIM_Base_MspInit+0x3c>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40012c00 	.word	0x40012c00
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	@ 0x30
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2f      	ldr	r2, [pc, #188]	@ (8000d40 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d128      	bne.n	8000cd8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c86:	4b2f      	ldr	r3, [pc, #188]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c92:	4b2c      	ldr	r3, [pc, #176]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b29      	ldr	r3, [pc, #164]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	4a28      	ldr	r2, [pc, #160]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000caa:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cb6:	2330      	movs	r3, #48	@ 0x30
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481d      	ldr	r0, [pc, #116]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000cd2:	f000 fb5d 	bl	8001390 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000cd6:	e02e      	b.n	8000d36 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d4c <HAL_TIM_Encoder_MspInit+0xe8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d129      	bne.n	8000d36 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce6:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a11      	ldr	r2, [pc, #68]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000d24:	230a      	movs	r3, #10
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d32:	f000 fb2d 	bl	8001390 <HAL_GPIO_Init>
}
 8000d36:	bf00      	nop
 8000d38:	3730      	adds	r7, #48	@ 0x30
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40000400 	.word	0x40000400
 8000d44:	40021000 	.word	0x40021000
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	40000800 	.word	0x40000800

08000d50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a20      	ldr	r2, [pc, #128]	@ (8000df0 <HAL_TIM_MspPostInit+0xa0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d13a      	bne.n	8000de8 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <HAL_TIM_MspPostInit+0xa4>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	4a1f      	ldr	r2, [pc, #124]	@ (8000df4 <HAL_TIM_MspPostInit+0xa4>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <HAL_TIM_MspPostInit+0xa4>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_TIM_MspPostInit+0xa4>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a19      	ldr	r2, [pc, #100]	@ (8000df4 <HAL_TIM_MspPostInit+0xa4>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <HAL_TIM_MspPostInit+0xa4>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000da2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000db4:	2306      	movs	r3, #6
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480e      	ldr	r0, [pc, #56]	@ (8000df8 <HAL_TIM_MspPostInit+0xa8>)
 8000dc0:	f000 fae6 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000dc4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f000 fad4 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	@ 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40012c00 	.word	0x40012c00
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000400 	.word	0x48000400

08000dfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e00:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e02:	4a23      	ldr	r2, [pc, #140]	@ (8000e90 <MX_USART1_UART_Init+0x94>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e38:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e44:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e46:	f002 fd63 	bl	8003910 <HAL_UART_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e50:	f7ff fc8a 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e54:	2100      	movs	r1, #0
 8000e56:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e58:	f003 face 	bl	80043f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e62:	f7ff fc81 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e6a:	f003 fb03 	bl	8004474 <HAL_UARTEx_SetRxFifoThreshold>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e74:	f7ff fc78 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_USART1_UART_Init+0x90>)
 8000e7a:	f003 fa84 	bl	8004386 <HAL_UARTEx_DisableFifoMode>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e84:	f7ff fc70 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000178 	.word	0x20000178
 8000e90:	40013800 	.word	0x40013800

08000e94 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e98:	4b22      	ldr	r3, [pc, #136]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000e9a:	4a23      	ldr	r2, [pc, #140]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000edc:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ede:	f002 fd17 	bl	8003910 <HAL_UART_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ee8:	f7ff fc3e 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ef0:	f003 fa82 	bl	80043f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000efa:	f7ff fc35 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4808      	ldr	r0, [pc, #32]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000f02:	f003 fab7 	bl	8004474 <HAL_UARTEx_SetRxFifoThreshold>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f0c:	f7ff fc2c 	bl	8000768 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000f12:	f003 fa38 	bl	8004386 <HAL_UARTEx_DisableFifoMode>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f7ff fc24 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000020c 	.word	0x2000020c
 8000f28:	40004400 	.word	0x40004400

08000f2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b09e      	sub	sp, #120	@ 0x78
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	2244      	movs	r2, #68	@ 0x44
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fcd9 	bl	8005904 <memset>
  if(uartHandle->Instance==USART1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a4b      	ldr	r2, [pc, #300]	@ (8001084 <HAL_UART_MspInit+0x158>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d136      	bne.n	8000fca <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f64:	f107 0320 	add.w	r3, r7, #32
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 f98d 	bl	8002288 <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f74:	f7ff fbf8 	bl	8000768 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f78:	4b43      	ldr	r3, [pc, #268]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8000f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7c:	4a42      	ldr	r2, [pc, #264]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f82:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f84:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8000f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	4a3c      	ldr	r2, [pc, #240]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000fa8:	23c0      	movs	r3, #192	@ 0xc0
 8000faa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4832      	ldr	r0, [pc, #200]	@ (800108c <HAL_UART_MspInit+0x160>)
 8000fc4:	f000 f9e4 	bl	8001390 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fc8:	e058      	b.n	800107c <HAL_UART_MspInit+0x150>
  else if(uartHandle->Instance==USART2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a30      	ldr	r2, [pc, #192]	@ (8001090 <HAL_UART_MspInit+0x164>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d153      	bne.n	800107c <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f951 	bl	8002288 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8000fec:	f7ff fbbc 	bl	8000768 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff0:	4b25      	ldr	r3, [pc, #148]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff4:	4a24      	ldr	r2, [pc, #144]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8000ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	4a1e      	ldr	r2, [pc, #120]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001014:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001024:	4a18      	ldr	r2, [pc, #96]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <HAL_UART_MspInit+0x15c>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8001038:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800103c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104a:	2307      	movs	r3, #7
 800104c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001058:	f000 f99a 	bl	8001390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 800105c:	2308      	movs	r3, #8
 800105e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106c:	2307      	movs	r3, #7
 800106e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <HAL_UART_MspInit+0x160>)
 8001078:	f000 f98a 	bl	8001390 <HAL_GPIO_Init>
}
 800107c:	bf00      	nop
 800107e:	3778      	adds	r7, #120	@ 0x78
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40013800 	.word	0x40013800
 8001088:	40021000 	.word	0x40021000
 800108c:	48000400 	.word	0x48000400
 8001090:	40004400 	.word	0x40004400

08001094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001094:	480d      	ldr	r0, [pc, #52]	@ (80010cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001096:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001098:	f7ff fc3e 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	@ (80010d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <LoopForever+0xe>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	@ (80010e0 <LoopForever+0x16>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f004 fc27 	bl	8005914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c6:	f7ff faf5 	bl	80006b4 <main>

080010ca <LoopForever>:

LoopForever:
    b LoopForever
 80010ca:	e7fe      	b.n	80010ca <LoopForever>
  ldr   r0, =_estack
 80010cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010d8:	080059ec 	.word	0x080059ec
  ldr r2, =_sbss
 80010dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010e0:	20000ff8 	.word	0x20000ff8

080010e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_2_IRQHandler>

080010e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f91b 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f80e 	bl	8001118 <HAL_InitTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e001      	b.n	800110c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001108:	f7ff fbb4 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800110c:	79fb      	ldrb	r3, [r7, #7]

}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_InitTick+0x68>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d022      	beq.n	8001172 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_InitTick+0x6c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_InitTick+0x68>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001138:	fbb1 f3f3 	udiv	r3, r1, r3
 800113c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f918 	bl	8001376 <HAL_SYSTICK_Config>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10f      	bne.n	800116c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	d809      	bhi.n	8001166 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001152:	2200      	movs	r2, #0
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800115a:	f000 f8f2 	bl	8001342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <HAL_InitTick+0x70>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	e007      	b.n	8001176 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e004      	b.n	8001176 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e001      	b.n	8001176 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000008 	.word	0x20000008
 8001184:	20000000 	.word	0x20000000
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <HAL_IncTick+0x1c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_IncTick+0x20>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4413      	add	r3, r2
 800119a:	4a03      	ldr	r2, [pc, #12]	@ (80011a8 <HAL_IncTick+0x1c>)
 800119c:	6013      	str	r3, [r2, #0]
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	200002a0 	.word	0x200002a0
 80011ac:	20000008 	.word	0x20000008

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200002a0 	.word	0x200002a0

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	@ (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	@ (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	@ 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff47 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff5e 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffb2 	bl	80012e8 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800139e:	e15a      	b.n	8001656 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2101      	movs	r1, #1
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 814c 	beq.w	8001650 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d005      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d130      	bne.n	8001432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001406:	2201      	movs	r2, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 0201 	and.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b03      	cmp	r3, #3
 800143c:	d017      	beq.n	800146e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d123      	bne.n	80014c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	6939      	ldr	r1, [r7, #16]
 80014be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0203 	and.w	r2, r3, #3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80a6 	beq.w	8001650 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001504:	4b5b      	ldr	r3, [pc, #364]	@ (8001674 <HAL_GPIO_Init+0x2e4>)
 8001506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001508:	4a5a      	ldr	r2, [pc, #360]	@ (8001674 <HAL_GPIO_Init+0x2e4>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001510:	4b58      	ldr	r3, [pc, #352]	@ (8001674 <HAL_GPIO_Init+0x2e4>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151c:	4a56      	ldr	r2, [pc, #344]	@ (8001678 <HAL_GPIO_Init+0x2e8>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	220f      	movs	r2, #15
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001546:	d01f      	beq.n	8001588 <HAL_GPIO_Init+0x1f8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4c      	ldr	r2, [pc, #304]	@ (800167c <HAL_GPIO_Init+0x2ec>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d019      	beq.n	8001584 <HAL_GPIO_Init+0x1f4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4b      	ldr	r2, [pc, #300]	@ (8001680 <HAL_GPIO_Init+0x2f0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d013      	beq.n	8001580 <HAL_GPIO_Init+0x1f0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a4a      	ldr	r2, [pc, #296]	@ (8001684 <HAL_GPIO_Init+0x2f4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d00d      	beq.n	800157c <HAL_GPIO_Init+0x1ec>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a49      	ldr	r2, [pc, #292]	@ (8001688 <HAL_GPIO_Init+0x2f8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d007      	beq.n	8001578 <HAL_GPIO_Init+0x1e8>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a48      	ldr	r2, [pc, #288]	@ (800168c <HAL_GPIO_Init+0x2fc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d101      	bne.n	8001574 <HAL_GPIO_Init+0x1e4>
 8001570:	2305      	movs	r3, #5
 8001572:	e00a      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 8001574:	2306      	movs	r3, #6
 8001576:	e008      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 8001578:	2304      	movs	r3, #4
 800157a:	e006      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 800157c:	2303      	movs	r3, #3
 800157e:	e004      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 8001580:	2302      	movs	r3, #2
 8001582:	e002      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 8001588:	2300      	movs	r3, #0
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	f002 0203 	and.w	r2, r2, #3
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	4093      	lsls	r3, r2
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159a:	4937      	ldr	r1, [pc, #220]	@ (8001678 <HAL_GPIO_Init+0x2e8>)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a8:	4b39      	ldr	r3, [pc, #228]	@ (8001690 <HAL_GPIO_Init+0x300>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015cc:	4a30      	ldr	r2, [pc, #192]	@ (8001690 <HAL_GPIO_Init+0x300>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <HAL_GPIO_Init+0x300>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f6:	4a26      	ldr	r2, [pc, #152]	@ (8001690 <HAL_GPIO_Init+0x300>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <HAL_GPIO_Init+0x300>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001620:	4a1b      	ldr	r2, [pc, #108]	@ (8001690 <HAL_GPIO_Init+0x300>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <HAL_GPIO_Init+0x300>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800164a:	4a11      	ldr	r2, [pc, #68]	@ (8001690 <HAL_GPIO_Init+0x300>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa22 f303 	lsr.w	r3, r2, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	f47f ae9d 	bne.w	80013a0 <HAL_GPIO_Init+0x10>
  }
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000
 800167c:	48000400 	.word	0x48000400
 8001680:	48000800 	.word	0x48000800
 8001684:	48000c00 	.word	0x48000c00
 8001688:	48001000 	.word	0x48001000
 800168c:	48001400 	.word	0x48001400
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
 80016a0:	4613      	mov	r3, r2
 80016a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a4:	787b      	ldrb	r3, [r7, #1]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d141      	bne.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016de:	d131      	bne.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016e0:	4b47      	ldr	r3, [pc, #284]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016e6:	4a46      	ldr	r2, [pc, #280]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f0:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016f8:	4a41      	ldr	r2, [pc, #260]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001700:	4b40      	ldr	r3, [pc, #256]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2232      	movs	r2, #50	@ 0x32
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	4a3f      	ldr	r2, [pc, #252]	@ (8001808 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800170c:	fba2 2303 	umull	r2, r3, r2, r3
 8001710:	0c9b      	lsrs	r3, r3, #18
 8001712:	3301      	adds	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001716:	e002      	b.n	800171e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3b01      	subs	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800171e:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800172a:	d102      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f2      	bne.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001732:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800173e:	d158      	bne.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e057      	b.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001744:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800174a:	4a2d      	ldr	r2, [pc, #180]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001750:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001754:	e04d      	b.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800175c:	d141      	bne.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800175e:	4b28      	ldr	r3, [pc, #160]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800176a:	d131      	bne.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800176c:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001772:	4a23      	ldr	r2, [pc, #140]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001778:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001784:	4a1e      	ldr	r2, [pc, #120]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800178a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800178c:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2232      	movs	r2, #50	@ 0x32
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	4a1c      	ldr	r2, [pc, #112]	@ (8001808 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	0c9b      	lsrs	r3, r3, #18
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a2:	e002      	b.n	80017aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017b6:	d102      	bne.n	80017be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f2      	bne.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ca:	d112      	bne.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e011      	b.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80017e0:	e007      	b.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017ea:	4a05      	ldr	r2, [pc, #20]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40007000 	.word	0x40007000
 8001804:	20000000 	.word	0x20000000
 8001808:	431bde83 	.word	0x431bde83

0800180c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800181a:	6093      	str	r3, [r2, #8]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40007000 	.word	0x40007000

0800182c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e2fe      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d075      	beq.n	8001936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184a:	4b97      	ldr	r3, [pc, #604]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001854:	4b94      	ldr	r3, [pc, #592]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d102      	bne.n	800186a <HAL_RCC_OscConfig+0x3e>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d002      	beq.n	8001870 <HAL_RCC_OscConfig+0x44>
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d10b      	bne.n	8001888 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d05b      	beq.n	8001934 <HAL_RCC_OscConfig+0x108>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d157      	bne.n	8001934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e2d9      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001890:	d106      	bne.n	80018a0 <HAL_RCC_OscConfig+0x74>
 8001892:	4b85      	ldr	r3, [pc, #532]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a84      	ldr	r2, [pc, #528]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e01d      	b.n	80018dc <HAL_RCC_OscConfig+0xb0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x98>
 80018aa:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7e      	ldr	r2, [pc, #504]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a7b      	ldr	r2, [pc, #492]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0xb0>
 80018c4:	4b78      	ldr	r3, [pc, #480]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a77      	ldr	r2, [pc, #476]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b75      	ldr	r3, [pc, #468]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a74      	ldr	r2, [pc, #464]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80018d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d013      	beq.n	800190c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fc64 	bl	80011b0 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fc60 	bl	80011b0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	@ 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e29e      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fe:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0xc0>
 800190a:	e014      	b.n	8001936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fc50 	bl	80011b0 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fc4c 	bl	80011b0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	@ 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e28a      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001926:	4b60      	ldr	r3, [pc, #384]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0xe8>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d075      	beq.n	8001a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001942:	4b59      	ldr	r3, [pc, #356]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800194c:	4b56      	ldr	r3, [pc, #344]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b0c      	cmp	r3, #12
 800195a:	d102      	bne.n	8001962 <HAL_RCC_OscConfig+0x136>
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d002      	beq.n	8001968 <HAL_RCC_OscConfig+0x13c>
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d11f      	bne.n	80019a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001968:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_OscConfig+0x154>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e25d      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b49      	ldr	r3, [pc, #292]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	4946      	ldr	r1, [pc, #280]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001994:	4b45      	ldr	r3, [pc, #276]	@ (8001aac <HAL_RCC_OscConfig+0x280>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fbbd 	bl	8001118 <HAL_InitTick>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d043      	beq.n	8001a2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e249      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d023      	beq.n	80019f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b0:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3c      	ldr	r2, [pc, #240]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fbf8 	bl	80011b0 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c4:	f7ff fbf4 	bl	80011b0 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e232      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d6:	4b34      	ldr	r3, [pc, #208]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	061b      	lsls	r3, r3, #24
 80019f0:	492d      	ldr	r1, [pc, #180]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
 80019f6:	e01a      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f8:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 80019fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fbd4 	bl	80011b0 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fbd0 	bl	80011b0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e20e      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a1e:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1e0>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d041      	beq.n	8001abe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d01c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a48:	4a17      	ldr	r2, [pc, #92]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7ff fbad 	bl	80011b0 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fba9 	bl	80011b0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1e7      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0ef      	beq.n	8001a5a <HAL_RCC_OscConfig+0x22e>
 8001a7a:	e020      	b.n	8001abe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a82:	4a09      	ldr	r2, [pc, #36]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fb90 	bl	80011b0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a92:	e00d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff fb8c 	bl	80011b0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d906      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1ca      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ea      	bne.n	8001a94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80a6 	beq.w	8001c18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ad0:	4b84      	ldr	r3, [pc, #528]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2b4>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b6>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	4a7e      	ldr	r2, [pc, #504]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001af2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001afe:	2301      	movs	r3, #1
 8001b00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b02:	4b79      	ldr	r3, [pc, #484]	@ (8001ce8 <HAL_RCC_OscConfig+0x4bc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d118      	bne.n	8001b40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b0e:	4b76      	ldr	r3, [pc, #472]	@ (8001ce8 <HAL_RCC_OscConfig+0x4bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a75      	ldr	r2, [pc, #468]	@ (8001ce8 <HAL_RCC_OscConfig+0x4bc>)
 8001b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fb49 	bl	80011b0 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b22:	f7ff fb45 	bl	80011b0 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e183      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b34:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce8 <HAL_RCC_OscConfig+0x4bc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d108      	bne.n	8001b5a <HAL_RCC_OscConfig+0x32e>
 8001b48:	4b66      	ldr	r3, [pc, #408]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4e:	4a65      	ldr	r2, [pc, #404]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b58:	e024      	b.n	8001ba4 <HAL_RCC_OscConfig+0x378>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d110      	bne.n	8001b84 <HAL_RCC_OscConfig+0x358>
 8001b62:	4b60      	ldr	r3, [pc, #384]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b68:	4a5e      	ldr	r2, [pc, #376]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b72:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b78:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b82:	e00f      	b.n	8001ba4 <HAL_RCC_OscConfig+0x378>
 8001b84:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b8a:	4a56      	ldr	r2, [pc, #344]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b94:	4b53      	ldr	r3, [pc, #332]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9a:	4a52      	ldr	r2, [pc, #328]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d016      	beq.n	8001bda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fb00 	bl	80011b0 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fafc 	bl	80011b0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e138      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bca:	4b46      	ldr	r3, [pc, #280]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0ed      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x388>
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bda:	f7ff fae9 	bl	80011b0 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7ff fae5 	bl	80011b0 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e121      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ed      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c06:	7ffb      	ldrb	r3, [r7, #31]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c10:	4a34      	ldr	r2, [pc, #208]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001c12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d03c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c32:	4a2c      	ldr	r2, [pc, #176]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fab8 	bl	80011b0 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c44:	f7ff fab4 	bl	80011b0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0f2      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c56:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ef      	beq.n	8001c44 <HAL_RCC_OscConfig+0x418>
 8001c64:	e01b      	b.n	8001c9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff fa9b 	bl	80011b0 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c7e:	f7ff fa97 	bl	80011b0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e0d5      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ef      	bne.n	8001c7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80c9 	beq.w	8001e3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b0c      	cmp	r3, #12
 8001cb2:	f000 8083 	beq.w	8001dbc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d15e      	bne.n	8001d7c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_RCC_OscConfig+0x4b8>)
 8001cc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff fa71 	bl	80011b0 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	e00c      	b.n	8001cec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff fa6d 	bl	80011b0 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d905      	bls.n	8001cec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0ab      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cec:	4b55      	ldr	r3, [pc, #340]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ec      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf8:	4b52      	ldr	r3, [pc, #328]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	4b52      	ldr	r3, [pc, #328]	@ (8001e48 <HAL_RCC_OscConfig+0x61c>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6a11      	ldr	r1, [r2, #32]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d08:	3a01      	subs	r2, #1
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	4311      	orrs	r1, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d12:	0212      	lsls	r2, r2, #8
 8001d14:	4311      	orrs	r1, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d1a:	0852      	lsrs	r2, r2, #1
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	0552      	lsls	r2, r2, #21
 8001d20:	4311      	orrs	r1, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d26:	0852      	lsrs	r2, r2, #1
 8001d28:	3a01      	subs	r2, #1
 8001d2a:	0652      	lsls	r2, r2, #25
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d32:	06d2      	lsls	r2, r2, #27
 8001d34:	430a      	orrs	r2, r1
 8001d36:	4943      	ldr	r1, [pc, #268]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b41      	ldr	r3, [pc, #260]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a40      	ldr	r2, [pc, #256]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d48:	4b3e      	ldr	r3, [pc, #248]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fa2c 	bl	80011b0 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff fa28 	bl	80011b0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e066      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x530>
 8001d7a:	e05e      	b.n	8001e3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b31      	ldr	r3, [pc, #196]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a30      	ldr	r2, [pc, #192]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff fa12 	bl	80011b0 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff fa0e 	bl	80011b0 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e04c      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da2:	4b28      	ldr	r3, [pc, #160]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001dae:	4b25      	ldr	r3, [pc, #148]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	4924      	ldr	r1, [pc, #144]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <HAL_RCC_OscConfig+0x620>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	60cb      	str	r3, [r1, #12]
 8001dba:	e03e      	b.n	8001e3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e039      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <HAL_RCC_OscConfig+0x618>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d12c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	3b01      	subs	r3, #1
 8001de8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d123      	bne.n	8001e36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d11b      	bne.n	8001e36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d113      	bne.n	8001e36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	019f800c 	.word	0x019f800c
 8001e4c:	feeefffc 	.word	0xfeeefffc

08001e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e11e      	b.n	80020a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b91      	ldr	r3, [pc, #580]	@ (80020b0 <HAL_RCC_ClockConfig+0x260>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d910      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b8e      	ldr	r3, [pc, #568]	@ (80020b0 <HAL_RCC_ClockConfig+0x260>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 020f 	bic.w	r2, r3, #15
 8001e7e:	498c      	ldr	r1, [pc, #560]	@ (80020b0 <HAL_RCC_ClockConfig+0x260>)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b8a      	ldr	r3, [pc, #552]	@ (80020b0 <HAL_RCC_ClockConfig+0x260>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e106      	b.n	80020a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d073      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d129      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eac:	4b81      	ldr	r3, [pc, #516]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0f4      	b.n	80020a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ebc:	f000 f99e 	bl	80021fc <RCC_GetSysClockFreqFromPLLSource>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4a7c      	ldr	r2, [pc, #496]	@ (80020b8 <HAL_RCC_ClockConfig+0x268>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d93f      	bls.n	8001f4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001eca:	4b7a      	ldr	r3, [pc, #488]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d033      	beq.n	8001f4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d12f      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eea:	4b72      	ldr	r3, [pc, #456]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ef2:	4a70      	ldr	r2, [pc, #448]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e024      	b.n	8001f4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f08:	4b6a      	ldr	r3, [pc, #424]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0c6      	b.n	80020a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f18:	4b66      	ldr	r3, [pc, #408]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0be      	b.n	80020a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f28:	f000 f8ce 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4a61      	ldr	r2, [pc, #388]	@ (80020b8 <HAL_RCC_ClockConfig+0x268>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d909      	bls.n	8001f4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f36:	4b5f      	ldr	r3, [pc, #380]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f3e:	4a5d      	ldr	r2, [pc, #372]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4957      	ldr	r1, [pc, #348]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f5c:	f7ff f928 	bl	80011b0 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7ff f924 	bl	80011b0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e095      	b.n	80020a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d023      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa4:	4b43      	ldr	r3, [pc, #268]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a42      	ldr	r2, [pc, #264]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001faa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001fc4:	4a3b      	ldr	r2, [pc, #236]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001fc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b39      	ldr	r3, [pc, #228]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4936      	ldr	r1, [pc, #216]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b80      	cmp	r3, #128	@ 0x80
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fe6:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4a32      	ldr	r2, [pc, #200]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8001fec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ff0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80020b0 <HAL_RCC_ClockConfig+0x260>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d21d      	bcs.n	800203c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002000:	4b2b      	ldr	r3, [pc, #172]	@ (80020b0 <HAL_RCC_ClockConfig+0x260>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 020f 	bic.w	r2, r3, #15
 8002008:	4929      	ldr	r1, [pc, #164]	@ (80020b0 <HAL_RCC_ClockConfig+0x260>)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002010:	f7ff f8ce 	bl	80011b0 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7ff f8ca 	bl	80011b0 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e03b      	b.n	80020a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <HAL_RCC_ClockConfig+0x260>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d1ed      	bne.n	8002018 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4917      	ldr	r1, [pc, #92]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002066:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	490f      	ldr	r1, [pc, #60]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800207a:	f000 f825 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 800207e:	4602      	mov	r2, r0
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <HAL_RCC_ClockConfig+0x264>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	490c      	ldr	r1, [pc, #48]	@ (80020bc <HAL_RCC_ClockConfig+0x26c>)
 800208c:	5ccb      	ldrb	r3, [r1, r3]
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_RCC_ClockConfig+0x270>)
 8002098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_RCC_ClockConfig+0x274>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f83a 	bl	8001118 <HAL_InitTick>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	04c4b400 	.word	0x04c4b400
 80020bc:	0800599c 	.word	0x0800599c
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020da:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	e047      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020e0:	4b27      	ldr	r3, [pc, #156]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020ec:	4b26      	ldr	r3, [pc, #152]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	e03e      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020f2:	4b23      	ldr	r3, [pc, #140]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d136      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020fe:	4b20      	ldr	r3, [pc, #128]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002108:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3301      	adds	r3, #1
 8002114:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d10c      	bne.n	8002136 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800211c:	4a1a      	ldr	r2, [pc, #104]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xc0>)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	4a16      	ldr	r2, [pc, #88]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002126:	68d2      	ldr	r2, [r2, #12]
 8002128:	0a12      	lsrs	r2, r2, #8
 800212a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	617b      	str	r3, [r7, #20]
      break;
 8002134:	e00c      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002136:	4a13      	ldr	r2, [pc, #76]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4a10      	ldr	r2, [pc, #64]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002140:	68d2      	ldr	r2, [r2, #12]
 8002142:	0a12      	lsrs	r2, r2, #8
 8002144:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
      break;
 800214e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0e5b      	lsrs	r3, r3, #25
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	3301      	adds	r3, #1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	e001      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002170:	693b      	ldr	r3, [r7, #16]
}
 8002172:	4618      	mov	r0, r3
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	00f42400 	.word	0x00f42400
 8002188:	007a1200 	.word	0x007a1200

0800218c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002190:	4b03      	ldr	r3, [pc, #12]	@ (80021a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000000 	.word	0x20000000

080021a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021a8:	f7ff fff0 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4904      	ldr	r1, [pc, #16]	@ (80021cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	080059ac 	.word	0x080059ac

080021d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021d4:	f7ff ffda 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	0adb      	lsrs	r3, r3, #11
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	4904      	ldr	r1, [pc, #16]	@ (80021f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	080059ac 	.word	0x080059ac

080021fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002202:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800220c:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3301      	adds	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d10c      	bne.n	800223a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002220:	4a17      	ldr	r2, [pc, #92]	@ (8002280 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	4a14      	ldr	r2, [pc, #80]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800222a:	68d2      	ldr	r2, [r2, #12]
 800222c:	0a12      	lsrs	r2, r2, #8
 800222e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
    break;
 8002238:	e00c      	b.n	8002254 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800223a:	4a12      	ldr	r2, [pc, #72]	@ (8002284 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4a0e      	ldr	r2, [pc, #56]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002244:	68d2      	ldr	r2, [r2, #12]
 8002246:	0a12      	lsrs	r2, r2, #8
 8002248:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    break;
 8002252:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002254:	4b09      	ldr	r3, [pc, #36]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0e5b      	lsrs	r3, r3, #25
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	3301      	adds	r3, #1
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800226e:	687b      	ldr	r3, [r7, #4]
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	007a1200 	.word	0x007a1200
 8002284:	00f42400 	.word	0x00f42400

08002288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002290:	2300      	movs	r3, #0
 8002292:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002294:	2300      	movs	r3, #0
 8002296:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 8098 	beq.w	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022aa:	4b43      	ldr	r3, [pc, #268]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b40      	ldr	r3, [pc, #256]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	4a3f      	ldr	r2, [pc, #252]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c2:	4b3d      	ldr	r3, [pc, #244]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ce:	2301      	movs	r3, #1
 80022d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d2:	4b3a      	ldr	r3, [pc, #232]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a39      	ldr	r2, [pc, #228]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022de:	f7fe ff67 	bl	80011b0 <HAL_GetTick>
 80022e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022e4:	e009      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7fe ff63 	bl	80011b0 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d902      	bls.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	74fb      	strb	r3, [r7, #19]
        break;
 80022f8:	e005      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022fa:	4b30      	ldr	r3, [pc, #192]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0ef      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d159      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800230c:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002316:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d01e      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	d019      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002328:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002332:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002334:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233a:	4a1f      	ldr	r2, [pc, #124]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002344:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234a:	4a1b      	ldr	r2, [pc, #108]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002354:	4a18      	ldr	r2, [pc, #96]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d016      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7fe ff23 	bl	80011b0 <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236c:	e00b      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe ff1f 	bl	80011b0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d902      	bls.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	74fb      	strb	r3, [r7, #19]
            break;
 8002384:	e006      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ec      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10b      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239a:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	4903      	ldr	r1, [pc, #12]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023b0:	e008      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	74bb      	strb	r3, [r7, #18]
 80023b6:	e005      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c4:	7c7b      	ldrb	r3, [r7, #17]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4ba6      	ldr	r3, [pc, #664]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ce:	4aa5      	ldr	r2, [pc, #660]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e2:	4ba0      	ldr	r3, [pc, #640]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e8:	f023 0203 	bic.w	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	499c      	ldr	r1, [pc, #624]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002404:	4b97      	ldr	r3, [pc, #604]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f023 020c 	bic.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4994      	ldr	r1, [pc, #592]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002426:	4b8f      	ldr	r3, [pc, #572]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	498b      	ldr	r1, [pc, #556]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002448:	4b86      	ldr	r3, [pc, #536]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	4983      	ldr	r1, [pc, #524]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800246a:	4b7e      	ldr	r3, [pc, #504]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002470:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	497a      	ldr	r1, [pc, #488]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800248c:	4b75      	ldr	r3, [pc, #468]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002492:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	4972      	ldr	r1, [pc, #456]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4969      	ldr	r1, [pc, #420]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024d0:	4b64      	ldr	r3, [pc, #400]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4961      	ldr	r1, [pc, #388]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	4958      	ldr	r1, [pc, #352]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d015      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002514:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	4950      	ldr	r1, [pc, #320]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002532:	d105      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002534:	4b4b      	ldr	r3, [pc, #300]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a4a      	ldr	r2, [pc, #296]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800253e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002548:	2b00      	cmp	r3, #0
 800254a:	d015      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800254c:	4b45      	ldr	r3, [pc, #276]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002552:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	4942      	ldr	r1, [pc, #264]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800256a:	d105      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800256c:	4b3d      	ldr	r3, [pc, #244]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a3c      	ldr	r2, [pc, #240]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002576:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002584:	4b37      	ldr	r3, [pc, #220]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4934      	ldr	r1, [pc, #208]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a2:	d105      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025bc:	4b29      	ldr	r3, [pc, #164]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ca:	4926      	ldr	r1, [pc, #152]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025da:	d105      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025dc:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a20      	ldr	r2, [pc, #128]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d015      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002602:	4918      	ldr	r1, [pc, #96]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002612:	d105      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a12      	ldr	r2, [pc, #72]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800261e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800262c:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002632:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263a:	490a      	ldr	r1, [pc, #40]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800264a:	d105      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4a04      	ldr	r2, [pc, #16]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002656:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002658:	7cbb      	ldrb	r3, [r7, #18]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e09d      	b.n	80027b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800268a:	d009      	beq.n	80026a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
 8002692:	e005      	b.n	80026a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe f898 	bl	80007f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026e0:	d902      	bls.n	80026e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e002      	b.n	80026ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80026f6:	d007      	beq.n	8002708 <HAL_SPI_Init+0xa0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002700:	d002      	beq.n	8002708 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274a:	ea42 0103 	orr.w	r1, r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	f003 0204 	and.w	r2, r3, #4
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002784:	ea42 0103 	orr.w	r1, r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e049      	b.n	8002864 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe fa1d 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3304      	adds	r3, #4
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f000 fb4b 	bl	8002e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e049      	b.n	8002912 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f841 	bl	800291a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f000 faf4 	bl	8002e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e097      	b.n	8002a72 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe f984 	bl	8000c64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002972:	f023 0307 	bic.w	r3, r3, #7
 8002976:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	4619      	mov	r1, r3
 8002982:	4610      	mov	r0, r2
 8002984:	f000 fa88 	bl	8002e98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b0:	f023 0303 	bic.w	r3, r3, #3
 80029b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	4313      	orrs	r3, r2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80029ce:	f023 030c 	bic.w	r3, r3, #12
 80029d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	4313      	orrs	r3, r2
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	011a      	lsls	r2, r3, #4
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	031b      	lsls	r3, r3, #12
 80029fe:	4313      	orrs	r3, r2
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002a0c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002a14:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	4313      	orrs	r3, r2
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e0ff      	b.n	8002c9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b14      	cmp	r3, #20
 8002aa6:	f200 80f0 	bhi.w	8002c8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002b05 	.word	0x08002b05
 8002ab4:	08002c8b 	.word	0x08002c8b
 8002ab8:	08002c8b 	.word	0x08002c8b
 8002abc:	08002c8b 	.word	0x08002c8b
 8002ac0:	08002b45 	.word	0x08002b45
 8002ac4:	08002c8b 	.word	0x08002c8b
 8002ac8:	08002c8b 	.word	0x08002c8b
 8002acc:	08002c8b 	.word	0x08002c8b
 8002ad0:	08002b87 	.word	0x08002b87
 8002ad4:	08002c8b 	.word	0x08002c8b
 8002ad8:	08002c8b 	.word	0x08002c8b
 8002adc:	08002c8b 	.word	0x08002c8b
 8002ae0:	08002bc7 	.word	0x08002bc7
 8002ae4:	08002c8b 	.word	0x08002c8b
 8002ae8:	08002c8b 	.word	0x08002c8b
 8002aec:	08002c8b 	.word	0x08002c8b
 8002af0:	08002c09 	.word	0x08002c09
 8002af4:	08002c8b 	.word	0x08002c8b
 8002af8:	08002c8b 	.word	0x08002c8b
 8002afc:	08002c8b 	.word	0x08002c8b
 8002b00:	08002c49 	.word	0x08002c49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fa60 	bl	8002fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0208 	orr.w	r2, r2, #8
 8002b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0204 	bic.w	r2, r2, #4
 8002b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6999      	ldr	r1, [r3, #24]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	619a      	str	r2, [r3, #24]
      break;
 8002b42:	e0a5      	b.n	8002c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fad0 	bl	80030f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6999      	ldr	r1, [r3, #24]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	021a      	lsls	r2, r3, #8
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	619a      	str	r2, [r3, #24]
      break;
 8002b84:	e084      	b.n	8002c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fb39 	bl	8003204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0208 	orr.w	r2, r2, #8
 8002ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0204 	bic.w	r2, r2, #4
 8002bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69d9      	ldr	r1, [r3, #28]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	61da      	str	r2, [r3, #28]
      break;
 8002bc4:	e064      	b.n	8002c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fba1 	bl	8003314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69d9      	ldr	r1, [r3, #28]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	021a      	lsls	r2, r3, #8
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	61da      	str	r2, [r3, #28]
      break;
 8002c06:	e043      	b.n	8002c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fc0a 	bl	8003428 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0208 	orr.w	r2, r2, #8
 8002c22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002c46:	e023      	b.n	8002c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fc4e 	bl	80034f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	021a      	lsls	r2, r3, #8
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002c88:	e002      	b.n	8002c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop

08002ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0de      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x1da>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002cde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a63      	ldr	r2, [pc, #396]	@ (8002e88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	f000 80a9 	beq.w	8002e52 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d00:	4a61      	ldr	r2, [pc, #388]	@ (8002e88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	f200 80ae 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d08:	4a60      	ldr	r2, [pc, #384]	@ (8002e8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	f000 80a1 	beq.w	8002e52 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d10:	4a5e      	ldr	r2, [pc, #376]	@ (8002e8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	f200 80a6 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d18:	4a5d      	ldr	r2, [pc, #372]	@ (8002e90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	f000 8099 	beq.w	8002e52 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d20:	4a5b      	ldr	r2, [pc, #364]	@ (8002e90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	f200 809e 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d28:	4a5a      	ldr	r2, [pc, #360]	@ (8002e94 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f000 8091 	beq.w	8002e52 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d30:	4a58      	ldr	r2, [pc, #352]	@ (8002e94 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	f200 8096 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d3c:	f000 8089 	beq.w	8002e52 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d44:	f200 808e 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d4c:	d03e      	beq.n	8002dcc <HAL_TIM_ConfigClockSource+0x128>
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d52:	f200 8087 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5a:	f000 8086 	beq.w	8002e6a <HAL_TIM_ConfigClockSource+0x1c6>
 8002d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d62:	d87f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d64:	2b70      	cmp	r3, #112	@ 0x70
 8002d66:	d01a      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0xfa>
 8002d68:	2b70      	cmp	r3, #112	@ 0x70
 8002d6a:	d87b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d6c:	2b60      	cmp	r3, #96	@ 0x60
 8002d6e:	d050      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x16e>
 8002d70:	2b60      	cmp	r3, #96	@ 0x60
 8002d72:	d877      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d74:	2b50      	cmp	r3, #80	@ 0x50
 8002d76:	d03c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x14e>
 8002d78:	2b50      	cmp	r3, #80	@ 0x50
 8002d7a:	d873      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d7c:	2b40      	cmp	r3, #64	@ 0x40
 8002d7e:	d058      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x18e>
 8002d80:	2b40      	cmp	r3, #64	@ 0x40
 8002d82:	d86f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d84:	2b30      	cmp	r3, #48	@ 0x30
 8002d86:	d064      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d88:	2b30      	cmp	r3, #48	@ 0x30
 8002d8a:	d86b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d060      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d867      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05c      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d05a      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d9c:	e062      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dae:	f000 fc81 	bl	80036b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002dc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	609a      	str	r2, [r3, #8]
      break;
 8002dca:	e04f      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ddc:	f000 fc6a 	bl	80036b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dee:	609a      	str	r2, [r3, #8]
      break;
 8002df0:	e03c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 fbdc 	bl	80035bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2150      	movs	r1, #80	@ 0x50
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fc35 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 8002e10:	e02c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 fbfb 	bl	800361a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2160      	movs	r1, #96	@ 0x60
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fc25 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 8002e30:	e01c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 fbbc 	bl	80035bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2140      	movs	r1, #64	@ 0x40
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fc15 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 8002e50:	e00c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f000 fc0c 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 8002e62:	e003      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      break;
 8002e68:	e000      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	00100070 	.word	0x00100070
 8002e8c:	00100040 	.word	0x00100040
 8002e90:	00100030 	.word	0x00100030
 8002e94:	00100020 	.word	0x00100020

08002e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a42      	ldr	r2, [pc, #264]	@ (8002fb4 <TIM_Base_SetConfig+0x11c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00f      	beq.n	8002ed0 <TIM_Base_SetConfig+0x38>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb6:	d00b      	beq.n	8002ed0 <TIM_Base_SetConfig+0x38>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3f      	ldr	r2, [pc, #252]	@ (8002fb8 <TIM_Base_SetConfig+0x120>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d007      	beq.n	8002ed0 <TIM_Base_SetConfig+0x38>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8002fbc <TIM_Base_SetConfig+0x124>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_Base_SetConfig+0x38>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a3d      	ldr	r2, [pc, #244]	@ (8002fc0 <TIM_Base_SetConfig+0x128>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d108      	bne.n	8002ee2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a33      	ldr	r2, [pc, #204]	@ (8002fb4 <TIM_Base_SetConfig+0x11c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01b      	beq.n	8002f22 <TIM_Base_SetConfig+0x8a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef0:	d017      	beq.n	8002f22 <TIM_Base_SetConfig+0x8a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a30      	ldr	r2, [pc, #192]	@ (8002fb8 <TIM_Base_SetConfig+0x120>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <TIM_Base_SetConfig+0x8a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a2f      	ldr	r2, [pc, #188]	@ (8002fbc <TIM_Base_SetConfig+0x124>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00f      	beq.n	8002f22 <TIM_Base_SetConfig+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc0 <TIM_Base_SetConfig+0x128>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <TIM_Base_SetConfig+0x12c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc8 <TIM_Base_SetConfig+0x130>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fcc <TIM_Base_SetConfig+0x134>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d108      	bne.n	8002f34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a16      	ldr	r2, [pc, #88]	@ (8002fb4 <TIM_Base_SetConfig+0x11c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00f      	beq.n	8002f80 <TIM_Base_SetConfig+0xe8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a17      	ldr	r2, [pc, #92]	@ (8002fc0 <TIM_Base_SetConfig+0x128>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00b      	beq.n	8002f80 <TIM_Base_SetConfig+0xe8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a16      	ldr	r2, [pc, #88]	@ (8002fc4 <TIM_Base_SetConfig+0x12c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d007      	beq.n	8002f80 <TIM_Base_SetConfig+0xe8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a15      	ldr	r2, [pc, #84]	@ (8002fc8 <TIM_Base_SetConfig+0x130>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d003      	beq.n	8002f80 <TIM_Base_SetConfig+0xe8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <TIM_Base_SetConfig+0x134>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d105      	bne.n	8002fa6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f023 0201 	bic.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40012c00 	.word	0x40012c00
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40000800 	.word	0x40000800
 8002fc0:	40013400 	.word	0x40013400
 8002fc4:	40014000 	.word	0x40014000
 8002fc8:	40014400 	.word	0x40014400
 8002fcc:	40014800 	.word	0x40014800

08002fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f023 0201 	bic.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f023 0302 	bic.w	r3, r3, #2
 800301c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a2c      	ldr	r2, [pc, #176]	@ (80030dc <TIM_OC1_SetConfig+0x10c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00f      	beq.n	8003050 <TIM_OC1_SetConfig+0x80>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a2b      	ldr	r2, [pc, #172]	@ (80030e0 <TIM_OC1_SetConfig+0x110>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00b      	beq.n	8003050 <TIM_OC1_SetConfig+0x80>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a2a      	ldr	r2, [pc, #168]	@ (80030e4 <TIM_OC1_SetConfig+0x114>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <TIM_OC1_SetConfig+0x80>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a29      	ldr	r2, [pc, #164]	@ (80030e8 <TIM_OC1_SetConfig+0x118>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_OC1_SetConfig+0x80>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a28      	ldr	r2, [pc, #160]	@ (80030ec <TIM_OC1_SetConfig+0x11c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d10c      	bne.n	800306a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f023 0308 	bic.w	r3, r3, #8
 8003056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <TIM_OC1_SetConfig+0x10c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00f      	beq.n	8003092 <TIM_OC1_SetConfig+0xc2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1a      	ldr	r2, [pc, #104]	@ (80030e0 <TIM_OC1_SetConfig+0x110>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00b      	beq.n	8003092 <TIM_OC1_SetConfig+0xc2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <TIM_OC1_SetConfig+0x114>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <TIM_OC1_SetConfig+0xc2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a18      	ldr	r2, [pc, #96]	@ (80030e8 <TIM_OC1_SetConfig+0x118>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <TIM_OC1_SetConfig+0xc2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <TIM_OC1_SetConfig+0x11c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d111      	bne.n	80030b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	621a      	str	r2, [r3, #32]
}
 80030d0:	bf00      	nop
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40013400 	.word	0x40013400
 80030e4:	40014000 	.word	0x40014000
 80030e8:	40014400 	.word	0x40014400
 80030ec:	40014800 	.word	0x40014800

080030f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f023 0210 	bic.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800311e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800312a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f023 0320 	bic.w	r3, r3, #32
 800313e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a28      	ldr	r2, [pc, #160]	@ (80031f0 <TIM_OC2_SetConfig+0x100>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_OC2_SetConfig+0x6c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a27      	ldr	r2, [pc, #156]	@ (80031f4 <TIM_OC2_SetConfig+0x104>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d10d      	bne.n	8003178 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003176:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a1d      	ldr	r2, [pc, #116]	@ (80031f0 <TIM_OC2_SetConfig+0x100>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00f      	beq.n	80031a0 <TIM_OC2_SetConfig+0xb0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a1c      	ldr	r2, [pc, #112]	@ (80031f4 <TIM_OC2_SetConfig+0x104>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00b      	beq.n	80031a0 <TIM_OC2_SetConfig+0xb0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a1b      	ldr	r2, [pc, #108]	@ (80031f8 <TIM_OC2_SetConfig+0x108>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d007      	beq.n	80031a0 <TIM_OC2_SetConfig+0xb0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a1a      	ldr	r2, [pc, #104]	@ (80031fc <TIM_OC2_SetConfig+0x10c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d003      	beq.n	80031a0 <TIM_OC2_SetConfig+0xb0>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a19      	ldr	r2, [pc, #100]	@ (8003200 <TIM_OC2_SetConfig+0x110>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d113      	bne.n	80031c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	621a      	str	r2, [r3, #32]
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40013400 	.word	0x40013400
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400
 8003200:	40014800 	.word	0x40014800

08003204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a27      	ldr	r2, [pc, #156]	@ (8003300 <TIM_OC3_SetConfig+0xfc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <TIM_OC3_SetConfig+0x6a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a26      	ldr	r2, [pc, #152]	@ (8003304 <TIM_OC3_SetConfig+0x100>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10d      	bne.n	800328a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <TIM_OC3_SetConfig+0xfc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00f      	beq.n	80032b2 <TIM_OC3_SetConfig+0xae>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1b      	ldr	r2, [pc, #108]	@ (8003304 <TIM_OC3_SetConfig+0x100>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00b      	beq.n	80032b2 <TIM_OC3_SetConfig+0xae>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a1a      	ldr	r2, [pc, #104]	@ (8003308 <TIM_OC3_SetConfig+0x104>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <TIM_OC3_SetConfig+0xae>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a19      	ldr	r2, [pc, #100]	@ (800330c <TIM_OC3_SetConfig+0x108>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <TIM_OC3_SetConfig+0xae>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a18      	ldr	r2, [pc, #96]	@ (8003310 <TIM_OC3_SetConfig+0x10c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d113      	bne.n	80032da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	621a      	str	r2, [r3, #32]
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40013400 	.word	0x40013400
 8003308:	40014000 	.word	0x40014000
 800330c:	40014400 	.word	0x40014400
 8003310:	40014800 	.word	0x40014800

08003314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	031b      	lsls	r3, r3, #12
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a28      	ldr	r2, [pc, #160]	@ (8003414 <TIM_OC4_SetConfig+0x100>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_OC4_SetConfig+0x6c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a27      	ldr	r2, [pc, #156]	@ (8003418 <TIM_OC4_SetConfig+0x104>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10d      	bne.n	800339c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	031b      	lsls	r3, r3, #12
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800339a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1d      	ldr	r2, [pc, #116]	@ (8003414 <TIM_OC4_SetConfig+0x100>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00f      	beq.n	80033c4 <TIM_OC4_SetConfig+0xb0>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003418 <TIM_OC4_SetConfig+0x104>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <TIM_OC4_SetConfig+0xb0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a1b      	ldr	r2, [pc, #108]	@ (800341c <TIM_OC4_SetConfig+0x108>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_OC4_SetConfig+0xb0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003420 <TIM_OC4_SetConfig+0x10c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_OC4_SetConfig+0xb0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a19      	ldr	r2, [pc, #100]	@ (8003424 <TIM_OC4_SetConfig+0x110>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d113      	bne.n	80033ec <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80033d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40013400 	.word	0x40013400
 800341c:	40014000 	.word	0x40014000
 8003420:	40014400 	.word	0x40014400
 8003424:	40014800 	.word	0x40014800

08003428 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800346c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	041b      	lsls	r3, r3, #16
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a17      	ldr	r2, [pc, #92]	@ (80034dc <TIM_OC5_SetConfig+0xb4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00f      	beq.n	80034a2 <TIM_OC5_SetConfig+0x7a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a16      	ldr	r2, [pc, #88]	@ (80034e0 <TIM_OC5_SetConfig+0xb8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00b      	beq.n	80034a2 <TIM_OC5_SetConfig+0x7a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a15      	ldr	r2, [pc, #84]	@ (80034e4 <TIM_OC5_SetConfig+0xbc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d007      	beq.n	80034a2 <TIM_OC5_SetConfig+0x7a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a14      	ldr	r2, [pc, #80]	@ (80034e8 <TIM_OC5_SetConfig+0xc0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d003      	beq.n	80034a2 <TIM_OC5_SetConfig+0x7a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a13      	ldr	r2, [pc, #76]	@ (80034ec <TIM_OC5_SetConfig+0xc4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d109      	bne.n	80034b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	621a      	str	r2, [r3, #32]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40013400 	.word	0x40013400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800

080034f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800351e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	051b      	lsls	r3, r3, #20
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <TIM_OC6_SetConfig+0xb8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00f      	beq.n	800356c <TIM_OC6_SetConfig+0x7c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a17      	ldr	r2, [pc, #92]	@ (80035ac <TIM_OC6_SetConfig+0xbc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00b      	beq.n	800356c <TIM_OC6_SetConfig+0x7c>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a16      	ldr	r2, [pc, #88]	@ (80035b0 <TIM_OC6_SetConfig+0xc0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <TIM_OC6_SetConfig+0x7c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a15      	ldr	r2, [pc, #84]	@ (80035b4 <TIM_OC6_SetConfig+0xc4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_OC6_SetConfig+0x7c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a14      	ldr	r2, [pc, #80]	@ (80035b8 <TIM_OC6_SetConfig+0xc8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d109      	bne.n	8003580 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003572:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	029b      	lsls	r3, r3, #10
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40013400 	.word	0x40013400
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800

080035bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f023 0201 	bic.w	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f023 030a 	bic.w	r3, r3, #10
 80035f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361a:	b480      	push	{r7}
 800361c:	b087      	sub	sp, #28
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f023 0210 	bic.w	r2, r3, #16
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	031b      	lsls	r3, r3, #12
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003656:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	f043 0307 	orr.w	r3, r3, #7
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	609a      	str	r2, [r3, #8]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	021a      	lsls	r2, r3, #8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	609a      	str	r2, [r3, #8]
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003708:	2302      	movs	r3, #2
 800370a:	e065      	b.n	80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2c      	ldr	r2, [pc, #176]	@ (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2b      	ldr	r2, [pc, #172]	@ (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d108      	bne.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003746:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d018      	beq.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003782:	d013      	beq.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a18      	ldr	r2, [pc, #96]	@ (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00e      	beq.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a17      	ldr	r2, [pc, #92]	@ (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a12      	ldr	r2, [pc, #72]	@ (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a13      	ldr	r2, [pc, #76]	@ (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d10c      	bne.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40013400 	.word	0x40013400
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800
 80037f4:	40014000 	.word	0x40014000

080037f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003810:	2302      	movs	r3, #2
 8003812:	e073      	b.n	80038fc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	041b      	lsls	r3, r3, #16
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a19      	ldr	r2, [pc, #100]	@ (8003908 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a18      	ldr	r2, [pc, #96]	@ (800390c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d11c      	bne.n	80038ea <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ba:	051b      	lsls	r3, r3, #20
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40013400 	.word	0x40013400

08003910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e042      	b.n	80039a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003928:	2b00      	cmp	r3, #0
 800392a:	d106      	bne.n	800393a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fd faf9 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2224      	movs	r2, #36	@ 0x24
 800393e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 faf4 	bl	8003f48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f825 	bl	80039b0 <UART_SetConfig>
 8003966:	4603      	mov	r3, r0
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e01b      	b.n	80039a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800397e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800398e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fb73 	bl	800408c <UART_CheckIdleState>
 80039a6:	4603      	mov	r3, r0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b4:	b08c      	sub	sp, #48	@ 0x30
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4bab      	ldr	r3, [pc, #684]	@ (8003c8c <UART_SetConfig+0x2dc>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4aa0      	ldr	r2, [pc, #640]	@ (8003c90 <UART_SetConfig+0x2e0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003a26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	f023 010f 	bic.w	r1, r3, #15
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a91      	ldr	r2, [pc, #580]	@ (8003c94 <UART_SetConfig+0x2e4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d125      	bne.n	8003aa0 <UART_SetConfig+0xf0>
 8003a54:	4b90      	ldr	r3, [pc, #576]	@ (8003c98 <UART_SetConfig+0x2e8>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d81a      	bhi.n	8003a98 <UART_SetConfig+0xe8>
 8003a62:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <UART_SetConfig+0xb8>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003a89 	.word	0x08003a89
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a91 	.word	0x08003a91
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a7e:	e0d6      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003a80:	2302      	movs	r3, #2
 8003a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a86:	e0d2      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a8e:	e0ce      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003a90:	2308      	movs	r3, #8
 8003a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a96:	e0ca      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a9e:	e0c6      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a7d      	ldr	r2, [pc, #500]	@ (8003c9c <UART_SetConfig+0x2ec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d138      	bne.n	8003b1c <UART_SetConfig+0x16c>
 8003aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8003c98 <UART_SetConfig+0x2e8>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d82d      	bhi.n	8003b14 <UART_SetConfig+0x164>
 8003ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac0 <UART_SetConfig+0x110>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003af5 	.word	0x08003af5
 8003ac4:	08003b15 	.word	0x08003b15
 8003ac8:	08003b15 	.word	0x08003b15
 8003acc:	08003b15 	.word	0x08003b15
 8003ad0:	08003b05 	.word	0x08003b05
 8003ad4:	08003b15 	.word	0x08003b15
 8003ad8:	08003b15 	.word	0x08003b15
 8003adc:	08003b15 	.word	0x08003b15
 8003ae0:	08003afd 	.word	0x08003afd
 8003ae4:	08003b15 	.word	0x08003b15
 8003ae8:	08003b15 	.word	0x08003b15
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b0d 	.word	0x08003b0d
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003afa:	e098      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	e094      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003b04:	2304      	movs	r3, #4
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b0a:	e090      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b12:	e08c      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003b14:	2310      	movs	r3, #16
 8003b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1a:	e088      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5f      	ldr	r2, [pc, #380]	@ (8003ca0 <UART_SetConfig+0x2f0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d125      	bne.n	8003b72 <UART_SetConfig+0x1c2>
 8003b26:	4b5c      	ldr	r3, [pc, #368]	@ (8003c98 <UART_SetConfig+0x2e8>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b30:	2b30      	cmp	r3, #48	@ 0x30
 8003b32:	d016      	beq.n	8003b62 <UART_SetConfig+0x1b2>
 8003b34:	2b30      	cmp	r3, #48	@ 0x30
 8003b36:	d818      	bhi.n	8003b6a <UART_SetConfig+0x1ba>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d00a      	beq.n	8003b52 <UART_SetConfig+0x1a2>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d814      	bhi.n	8003b6a <UART_SetConfig+0x1ba>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <UART_SetConfig+0x19a>
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d008      	beq.n	8003b5a <UART_SetConfig+0x1aa>
 8003b48:	e00f      	b.n	8003b6a <UART_SetConfig+0x1ba>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b50:	e06d      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003b52:	2302      	movs	r3, #2
 8003b54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b58:	e069      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b60:	e065      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003b62:	2308      	movs	r3, #8
 8003b64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b68:	e061      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b70:	e05d      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca4 <UART_SetConfig+0x2f4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d125      	bne.n	8003bc8 <UART_SetConfig+0x218>
 8003b7c:	4b46      	ldr	r3, [pc, #280]	@ (8003c98 <UART_SetConfig+0x2e8>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b86:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b88:	d016      	beq.n	8003bb8 <UART_SetConfig+0x208>
 8003b8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b8c:	d818      	bhi.n	8003bc0 <UART_SetConfig+0x210>
 8003b8e:	2b80      	cmp	r3, #128	@ 0x80
 8003b90:	d00a      	beq.n	8003ba8 <UART_SetConfig+0x1f8>
 8003b92:	2b80      	cmp	r3, #128	@ 0x80
 8003b94:	d814      	bhi.n	8003bc0 <UART_SetConfig+0x210>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <UART_SetConfig+0x1f0>
 8003b9a:	2b40      	cmp	r3, #64	@ 0x40
 8003b9c:	d008      	beq.n	8003bb0 <UART_SetConfig+0x200>
 8003b9e:	e00f      	b.n	8003bc0 <UART_SetConfig+0x210>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ba6:	e042      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bae:	e03e      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bb6:	e03a      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bbe:	e036      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc6:	e032      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a30      	ldr	r2, [pc, #192]	@ (8003c90 <UART_SetConfig+0x2e0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d12a      	bne.n	8003c28 <UART_SetConfig+0x278>
 8003bd2:	4b31      	ldr	r3, [pc, #196]	@ (8003c98 <UART_SetConfig+0x2e8>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003be0:	d01a      	beq.n	8003c18 <UART_SetConfig+0x268>
 8003be2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003be6:	d81b      	bhi.n	8003c20 <UART_SetConfig+0x270>
 8003be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bec:	d00c      	beq.n	8003c08 <UART_SetConfig+0x258>
 8003bee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf2:	d815      	bhi.n	8003c20 <UART_SetConfig+0x270>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <UART_SetConfig+0x250>
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfc:	d008      	beq.n	8003c10 <UART_SetConfig+0x260>
 8003bfe:	e00f      	b.n	8003c20 <UART_SetConfig+0x270>
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c06:	e012      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c0e:	e00e      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c16:	e00a      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c1e:	e006      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c26:	e002      	b.n	8003c2e <UART_SetConfig+0x27e>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a17      	ldr	r2, [pc, #92]	@ (8003c90 <UART_SetConfig+0x2e0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	f040 80a8 	bne.w	8003d8a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d834      	bhi.n	8003cac <UART_SetConfig+0x2fc>
 8003c42:	a201      	add	r2, pc, #4	@ (adr r2, 8003c48 <UART_SetConfig+0x298>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003cad 	.word	0x08003cad
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003cad 	.word	0x08003cad
 8003c58:	08003c7b 	.word	0x08003c7b
 8003c5c:	08003cad 	.word	0x08003cad
 8003c60:	08003cad 	.word	0x08003cad
 8003c64:	08003cad 	.word	0x08003cad
 8003c68:	08003c83 	.word	0x08003c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f7fe fa9a 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8003c70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c72:	e021      	b.n	8003cb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca8 <UART_SetConfig+0x2f8>)
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c78:	e01e      	b.n	8003cb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7a:	f7fe fa25 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8003c7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c80:	e01a      	b.n	8003cb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c88:	e016      	b.n	8003cb8 <UART_SetConfig+0x308>
 8003c8a:	bf00      	nop
 8003c8c:	cfff69f3 	.word	0xcfff69f3
 8003c90:	40008000 	.word	0x40008000
 8003c94:	40013800 	.word	0x40013800
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40004400 	.word	0x40004400
 8003ca0:	40004800 	.word	0x40004800
 8003ca4:	40004c00 	.word	0x40004c00
 8003ca8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003cb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 812a 	beq.w	8003f14 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	4a9e      	ldr	r2, [pc, #632]	@ (8003f40 <UART_SetConfig+0x590>)
 8003cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d305      	bcc.n	8003cf0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d903      	bls.n	8003cf8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003cf6:	e10d      	b.n	8003f14 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	60fa      	str	r2, [r7, #12]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	4a8e      	ldr	r2, [pc, #568]	@ (8003f40 <UART_SetConfig+0x590>)
 8003d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d1a:	f7fc fa81 	bl	8000220 <__aeabi_uldivmod>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	020b      	lsls	r3, r1, #8
 8003d30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d34:	0202      	lsls	r2, r0, #8
 8003d36:	6979      	ldr	r1, [r7, #20]
 8003d38:	6849      	ldr	r1, [r1, #4]
 8003d3a:	0849      	lsrs	r1, r1, #1
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	4605      	mov	r5, r0
 8003d42:	eb12 0804 	adds.w	r8, r2, r4
 8003d46:	eb43 0905 	adc.w	r9, r3, r5
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	469a      	mov	sl, r3
 8003d52:	4693      	mov	fp, r2
 8003d54:	4652      	mov	r2, sl
 8003d56:	465b      	mov	r3, fp
 8003d58:	4640      	mov	r0, r8
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	f7fc fa60 	bl	8000220 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4613      	mov	r3, r2
 8003d66:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d6e:	d308      	bcc.n	8003d82 <UART_SetConfig+0x3d2>
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d76:	d204      	bcs.n	8003d82 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	60da      	str	r2, [r3, #12]
 8003d80:	e0c8      	b.n	8003f14 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d88:	e0c4      	b.n	8003f14 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d92:	d167      	bne.n	8003e64 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003d94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d828      	bhi.n	8003dee <UART_SetConfig+0x43e>
 8003d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003da4 <UART_SetConfig+0x3f4>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003dc9 	.word	0x08003dc9
 8003da8:	08003dd1 	.word	0x08003dd1
 8003dac:	08003dd9 	.word	0x08003dd9
 8003db0:	08003def 	.word	0x08003def
 8003db4:	08003ddf 	.word	0x08003ddf
 8003db8:	08003def 	.word	0x08003def
 8003dbc:	08003def 	.word	0x08003def
 8003dc0:	08003def 	.word	0x08003def
 8003dc4:	08003de7 	.word	0x08003de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f7fe f9ec 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dce:	e014      	b.n	8003dfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd0:	f7fe f9fe 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
 8003dd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dd6:	e010      	b.n	8003dfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8003f44 <UART_SetConfig+0x594>)
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ddc:	e00d      	b.n	8003dfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dde:	f7fe f973 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8003de2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003de4:	e009      	b.n	8003dfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dec:	e005      	b.n	8003dfa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003df8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8089 	beq.w	8003f14 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	4a4e      	ldr	r2, [pc, #312]	@ (8003f40 <UART_SetConfig+0x590>)
 8003e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e14:	005a      	lsls	r2, r3, #1
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	441a      	add	r2, r3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	2b0f      	cmp	r3, #15
 8003e2c:	d916      	bls.n	8003e5c <UART_SetConfig+0x4ac>
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e34:	d212      	bcs.n	8003e5c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f023 030f 	bic.w	r3, r3, #15
 8003e3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	8bfb      	ldrh	r3, [r7, #30]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	8bfa      	ldrh	r2, [r7, #30]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	e05b      	b.n	8003f14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e62:	e057      	b.n	8003f14 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d828      	bhi.n	8003ebe <UART_SetConfig+0x50e>
 8003e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e74 <UART_SetConfig+0x4c4>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003ea1 	.word	0x08003ea1
 8003e7c:	08003ea9 	.word	0x08003ea9
 8003e80:	08003ebf 	.word	0x08003ebf
 8003e84:	08003eaf 	.word	0x08003eaf
 8003e88:	08003ebf 	.word	0x08003ebf
 8003e8c:	08003ebf 	.word	0x08003ebf
 8003e90:	08003ebf 	.word	0x08003ebf
 8003e94:	08003eb7 	.word	0x08003eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e98:	f7fe f984 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e9e:	e014      	b.n	8003eca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7fe f996 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ea6:	e010      	b.n	8003eca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea8:	4b26      	ldr	r3, [pc, #152]	@ (8003f44 <UART_SetConfig+0x594>)
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003eac:	e00d      	b.n	8003eca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eae:	f7fe f90b 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8003eb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eb4:	e009      	b.n	8003eca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ebc:	e005      	b.n	8003eca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ec8:	bf00      	nop
    }

    if (pclk != 0U)
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d021      	beq.n	8003f14 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8003f40 <UART_SetConfig+0x590>)
 8003ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eda:	461a      	mov	r2, r3
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	441a      	add	r2, r3
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2b0f      	cmp	r3, #15
 8003ef8:	d909      	bls.n	8003f0e <UART_SetConfig+0x55e>
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f00:	d205      	bcs.n	8003f0e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	e002      	b.n	8003f14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2200      	movs	r2, #0
 8003f28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3730      	adds	r7, #48	@ 0x30
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3e:	bf00      	nop
 8003f40:	080059b4 	.word	0x080059b4
 8003f44:	00f42400 	.word	0x00f42400

08003f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004046:	d10a      	bne.n	800405e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b098      	sub	sp, #96	@ 0x60
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800409c:	f7fd f888 	bl	80011b0 <HAL_GetTick>
 80040a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d12f      	bne.n	8004110 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f88e 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d022      	beq.n	8004110 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040de:	653b      	str	r3, [r7, #80]	@ 0x50
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e063      	b.n	80041d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b04      	cmp	r3, #4
 800411c:	d149      	bne.n	80041b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004126:	2200      	movs	r2, #0
 8004128:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f857 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d03c      	beq.n	80041b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	623b      	str	r3, [r7, #32]
   return(result);
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800414c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004156:	633b      	str	r3, [r7, #48]	@ 0x30
 8004158:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800415c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e6      	bne.n	8004138 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3308      	adds	r3, #8
 8004170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	60fb      	str	r3, [r7, #12]
   return(result);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3308      	adds	r3, #8
 8004188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800418a:	61fa      	str	r2, [r7, #28]
 800418c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	69b9      	ldr	r1, [r7, #24]
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	617b      	str	r3, [r7, #20]
   return(result);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e5      	bne.n	800416a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e012      	b.n	80041d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3758      	adds	r7, #88	@ 0x58
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f0:	e04f      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041f8:	d04b      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fc ffd9 	bl	80011b0 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <UART_WaitOnFlagUntilTimeout+0x30>
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e04e      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d037      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b80      	cmp	r3, #128	@ 0x80
 8004226:	d034      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b40      	cmp	r3, #64	@ 0x40
 800422c:	d031      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b08      	cmp	r3, #8
 800423a:	d110      	bne.n	800425e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2208      	movs	r2, #8
 8004242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f838 	bl	80042ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2208      	movs	r2, #8
 800424e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e029      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800426c:	d111      	bne.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f81e 	bl	80042ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e00f      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	429a      	cmp	r2, r3
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d0a0      	beq.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b095      	sub	sp, #84	@ 0x54
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e6      	bne.n	80042c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3308      	adds	r3, #8
 80042fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	61fb      	str	r3, [r7, #28]
   return(result);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800431e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e3      	bne.n	80042f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d118      	bne.n	8004366 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	60bb      	str	r3, [r7, #8]
   return(result);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f023 0310 	bic.w	r3, r3, #16
 8004348:	647b      	str	r3, [r7, #68]	@ 0x44
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6979      	ldr	r1, [r7, #20]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	613b      	str	r3, [r7, #16]
   return(result);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e6      	bne.n	8004334 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800437a:	bf00      	nop
 800437c:	3754      	adds	r7, #84	@ 0x54
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_UARTEx_DisableFifoMode+0x16>
 8004398:	2302      	movs	r3, #2
 800439a:	e027      	b.n	80043ec <HAL_UARTEx_DisableFifoMode+0x66>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	@ 0x24
 80043a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80043ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800440c:	2302      	movs	r3, #2
 800440e:	e02d      	b.n	800446c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	@ 0x24
 800441c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f84f 	bl	80044f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004488:	2302      	movs	r3, #2
 800448a:	e02d      	b.n	80044e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	@ 0x24
 8004498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f811 	bl	80044f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d108      	bne.n	8004512 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004510:	e031      	b.n	8004576 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004512:	2308      	movs	r3, #8
 8004514:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004516:	2308      	movs	r3, #8
 8004518:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	0e5b      	lsrs	r3, r3, #25
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	0f5b      	lsrs	r3, r3, #29
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800453a:	7bbb      	ldrb	r3, [r7, #14]
 800453c:	7b3a      	ldrb	r2, [r7, #12]
 800453e:	4911      	ldr	r1, [pc, #68]	@ (8004584 <UARTEx_SetNbDataToProcess+0x94>)
 8004540:	5c8a      	ldrb	r2, [r1, r2]
 8004542:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004546:	7b3a      	ldrb	r2, [r7, #12]
 8004548:	490f      	ldr	r1, [pc, #60]	@ (8004588 <UARTEx_SetNbDataToProcess+0x98>)
 800454a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800454c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	7b7a      	ldrb	r2, [r7, #13]
 800455c:	4909      	ldr	r1, [pc, #36]	@ (8004584 <UARTEx_SetNbDataToProcess+0x94>)
 800455e:	5c8a      	ldrb	r2, [r1, r2]
 8004560:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004564:	7b7a      	ldrb	r2, [r7, #13]
 8004566:	4908      	ldr	r1, [pc, #32]	@ (8004588 <UARTEx_SetNbDataToProcess+0x98>)
 8004568:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800456a:	fb93 f3f2 	sdiv	r3, r3, r2
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	080059cc 	.word	0x080059cc
 8004588:	080059d4 	.word	0x080059d4

0800458c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800459a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800459e:	2b84      	cmp	r3, #132	@ 0x84
 80045a0:	d005      	beq.n	80045ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	3303      	adds	r3, #3
 80045ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045ae:	68fb      	ldr	r3, [r7, #12]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045c0:	f000 fa5c 	bl	8004a7c <vTaskStartScheduler>
  
  return osOK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	bd80      	pop	{r7, pc}

080045ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045cc:	b087      	sub	sp, #28
 80045ce:	af02      	add	r7, sp, #8
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685c      	ldr	r4, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045e0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ffcf 	bl	800458c <makeFreeRtosPriority>
 80045ee:	4602      	mov	r2, r0
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	9200      	str	r2, [sp, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4632      	mov	r2, r6
 80045fc:	4629      	mov	r1, r5
 80045fe:	4620      	mov	r0, r4
 8004600:	f000 f8d2 	bl	80047a8 <xTaskCreate>
 8004604:	4603      	mov	r3, r0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d001      	beq.n	800460e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	e000      	b.n	8004610 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800460e:	68fb      	ldr	r3, [r7, #12]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004618 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <osDelay+0x16>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	e000      	b.n	8004630 <osDelay+0x18>
 800462e:	2301      	movs	r3, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f000 f9ed 	bl	8004a10 <vTaskDelay>
  
  return osOK;
 8004636:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f103 0208 	add.w	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f103 0208 	add.w	r2, r3, #8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f103 0208 	add.w	r2, r3, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046f8:	d103      	bne.n	8004702 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e00c      	b.n	800471c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3308      	adds	r3, #8
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e002      	b.n	8004710 <vListInsert+0x2e>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d2f6      	bcs.n	800470a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	601a      	str	r2, [r3, #0]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6892      	ldr	r2, [r2, #8]
 800476a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6852      	ldr	r2, [r2, #4]
 8004774:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	d103      	bne.n	8004788 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	1e5a      	subs	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08c      	sub	sp, #48	@ 0x30
 80047ac:	af04      	add	r7, sp, #16
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 feb3 	bl	8005528 <pvPortMalloc>
 80047c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047ca:	2054      	movs	r0, #84	@ 0x54
 80047cc:	f000 feac 	bl	8005528 <pvPortMalloc>
 80047d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80047de:	e005      	b.n	80047ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047e0:	6978      	ldr	r0, [r7, #20]
 80047e2:	f000 ff6f 	bl	80056c4 <vPortFree>
 80047e6:	e001      	b.n	80047ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d013      	beq.n	800481a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047f2:	88fa      	ldrh	r2, [r7, #6]
 80047f4:	2300      	movs	r3, #0
 80047f6:	9303      	str	r3, [sp, #12]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	9302      	str	r3, [sp, #8]
 80047fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f80e 	bl	800482a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800480e:	69f8      	ldr	r0, [r7, #28]
 8004810:	f000 f894 	bl	800493c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004814:	2301      	movs	r3, #1
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	e002      	b.n	8004820 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800481a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800481e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004820:	69bb      	ldr	r3, [r7, #24]
	}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b088      	sub	sp, #32
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004842:	3b01      	subs	r3, #1
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f023 0307 	bic.w	r3, r3, #7
 8004850:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01f      	beq.n	80048ba <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	e012      	b.n	80048a6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4413      	add	r3, r2
 8004886:	7819      	ldrb	r1, [r3, #0]
 8004888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	3334      	adds	r3, #52	@ 0x34
 8004890:	460a      	mov	r2, r1
 8004892:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d006      	beq.n	80048ae <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	3301      	adds	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2b0f      	cmp	r3, #15
 80048aa:	d9e9      	bls.n	8004880 <prvInitialiseNewTask+0x56>
 80048ac:	e000      	b.n	80048b0 <prvInitialiseNewTask+0x86>
			{
				break;
 80048ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048b8:	e003      	b.n	80048c2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d901      	bls.n	80048cc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048c8:	2306      	movs	r3, #6
 80048ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048d6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	2200      	movs	r2, #0
 80048dc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	3304      	adds	r3, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fecc 	bl	8004680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ea:	3318      	adds	r3, #24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fec7 	bl	8004680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	f1c3 0207 	rsb	r2, r3, #7
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004906:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	2200      	movs	r2, #0
 800490c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	69b8      	ldr	r0, [r7, #24]
 800491c:	f000 fbf2 	bl	8005104 <pxPortInitialiseStack>
 8004920:	4602      	mov	r2, r0
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800492c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004932:	bf00      	nop
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004944:	f000 fd10 	bl	8005368 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004948:	4b2a      	ldr	r3, [pc, #168]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	4a29      	ldr	r2, [pc, #164]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 8004950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004952:	4b29      	ldr	r3, [pc, #164]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800495a:	4a27      	ldr	r2, [pc, #156]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004960:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d110      	bne.n	800498a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004968:	f000 faaa 	bl	8004ec0 <prvInitialiseTaskLists>
 800496c:	e00d      	b.n	800498a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800496e:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <prvAddNewTaskToReadyList+0xc0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004976:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	429a      	cmp	r2, r3
 8004982:	d802      	bhi.n	800498a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004984:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800498a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <prvAddNewTaskToReadyList+0xc4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	4a1b      	ldr	r2, [pc, #108]	@ (8004a00 <prvAddNewTaskToReadyList+0xc4>)
 8004992:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	2201      	movs	r2, #1
 800499a:	409a      	lsls	r2, r3
 800499c:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <prvAddNewTaskToReadyList+0xc8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <prvAddNewTaskToReadyList+0xc8>)
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <prvAddNewTaskToReadyList+0xcc>)
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7ff fe6c 	bl	800469a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049c2:	f000 fd03 	bl	80053cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049c6:	4b0d      	ldr	r3, [pc, #52]	@ (80049fc <prvAddNewTaskToReadyList+0xc0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049ce:	4b0a      	ldr	r3, [pc, #40]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	429a      	cmp	r2, r3
 80049da:	d207      	bcs.n	80049ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <prvAddNewTaskToReadyList+0xd0>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	200003a4 	.word	0x200003a4
 80049f8:	200002a4 	.word	0x200002a4
 80049fc:	200003b0 	.word	0x200003b0
 8004a00:	200003c0 	.word	0x200003c0
 8004a04:	200003ac 	.word	0x200003ac
 8004a08:	200002a8 	.word	0x200002a8
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a22:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <vTaskDelay+0x64>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <vTaskDelay+0x32>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	60bb      	str	r3, [r7, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	e7fd      	b.n	8004a3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a42:	f000 f863 	bl	8004b0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a46:	2100      	movs	r1, #0
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 faf5 	bl	8005038 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a4e:	f000 f86b 	bl	8004b28 <xTaskResumeAll>
 8004a52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d107      	bne.n	8004a6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a5a:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <vTaskDelay+0x68>)
 8004a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	200003cc 	.word	0x200003cc
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004a82:	4b1c      	ldr	r3, [pc, #112]	@ (8004af4 <vTaskStartScheduler+0x78>)
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	2300      	movs	r3, #0
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2280      	movs	r2, #128	@ 0x80
 8004a8e:	491a      	ldr	r1, [pc, #104]	@ (8004af8 <vTaskStartScheduler+0x7c>)
 8004a90:	481a      	ldr	r0, [pc, #104]	@ (8004afc <vTaskStartScheduler+0x80>)
 8004a92:	f7ff fe89 	bl	80047a8 <xTaskCreate>
 8004a96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d116      	bne.n	8004acc <vTaskStartScheduler+0x50>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	60bb      	str	r3, [r7, #8]
}
 8004ab0:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ab2:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <vTaskStartScheduler+0x84>)
 8004ab4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ab8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004aba:	4b12      	ldr	r3, [pc, #72]	@ (8004b04 <vTaskStartScheduler+0x88>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ac0:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <vTaskStartScheduler+0x8c>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ac6:	f000 fbab 	bl	8005220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004aca:	e00f      	b.n	8004aec <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ad2:	d10b      	bne.n	8004aec <vTaskStartScheduler+0x70>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	607b      	str	r3, [r7, #4]
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	e7fd      	b.n	8004ae8 <vTaskStartScheduler+0x6c>
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	200003c8 	.word	0x200003c8
 8004af8:	08005994 	.word	0x08005994
 8004afc:	08004e91 	.word	0x08004e91
 8004b00:	200003c4 	.word	0x200003c4
 8004b04:	200003b0 	.word	0x200003b0
 8004b08:	200003a8 	.word	0x200003a8

08004b0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b10:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <vTaskSuspendAll+0x18>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3301      	adds	r3, #1
 8004b16:	4a03      	ldr	r2, [pc, #12]	@ (8004b24 <vTaskSuspendAll+0x18>)
 8004b18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b1a:	bf00      	nop
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	200003cc 	.word	0x200003cc

08004b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b36:	4b42      	ldr	r3, [pc, #264]	@ (8004c40 <xTaskResumeAll+0x118>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <xTaskResumeAll+0x2e>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	603b      	str	r3, [r7, #0]
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b56:	f000 fc07 	bl	8005368 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b5a:	4b39      	ldr	r3, [pc, #228]	@ (8004c40 <xTaskResumeAll+0x118>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	4a37      	ldr	r2, [pc, #220]	@ (8004c40 <xTaskResumeAll+0x118>)
 8004b62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b64:	4b36      	ldr	r3, [pc, #216]	@ (8004c40 <xTaskResumeAll+0x118>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d161      	bne.n	8004c30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b6c:	4b35      	ldr	r3, [pc, #212]	@ (8004c44 <xTaskResumeAll+0x11c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d05d      	beq.n	8004c30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b74:	e02e      	b.n	8004bd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b76:	4b34      	ldr	r3, [pc, #208]	@ (8004c48 <xTaskResumeAll+0x120>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3318      	adds	r3, #24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fde6 	bl	8004754 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fde1 	bl	8004754 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	2201      	movs	r2, #1
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c4c <xTaskResumeAll+0x124>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c4c <xTaskResumeAll+0x124>)
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4a27      	ldr	r2, [pc, #156]	@ (8004c50 <xTaskResumeAll+0x128>)
 8004bb2:	441a      	add	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f7ff fd6d 	bl	800469a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc4:	4b23      	ldr	r3, [pc, #140]	@ (8004c54 <xTaskResumeAll+0x12c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004bce:	4b22      	ldr	r3, [pc, #136]	@ (8004c58 <xTaskResumeAll+0x130>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c48 <xTaskResumeAll+0x120>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1cc      	bne.n	8004b76 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004be2:	f000 f9eb 	bl	8004fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004be6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c5c <xTaskResumeAll+0x134>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d010      	beq.n	8004c14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bf2:	f000 f837 	bl	8004c64 <xTaskIncrementTick>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004bfc:	4b16      	ldr	r3, [pc, #88]	@ (8004c58 <xTaskResumeAll+0x130>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f1      	bne.n	8004bf2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c0e:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <xTaskResumeAll+0x134>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c14:	4b10      	ldr	r3, [pc, #64]	@ (8004c58 <xTaskResumeAll+0x130>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c20:	4b0f      	ldr	r3, [pc, #60]	@ (8004c60 <xTaskResumeAll+0x138>)
 8004c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c30:	f000 fbcc 	bl	80053cc <vPortExitCritical>

	return xAlreadyYielded;
 8004c34:	68bb      	ldr	r3, [r7, #8]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	200003cc 	.word	0x200003cc
 8004c44:	200003a4 	.word	0x200003a4
 8004c48:	20000364 	.word	0x20000364
 8004c4c:	200003ac 	.word	0x200003ac
 8004c50:	200002a8 	.word	0x200002a8
 8004c54:	200002a4 	.word	0x200002a4
 8004c58:	200003b8 	.word	0x200003b8
 8004c5c:	200003b4 	.word	0x200003b4
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004dac <xTaskIncrementTick+0x148>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 808f 	bne.w	8004d96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c78:	4b4d      	ldr	r3, [pc, #308]	@ (8004db0 <xTaskIncrementTick+0x14c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c80:	4a4b      	ldr	r2, [pc, #300]	@ (8004db0 <xTaskIncrementTick+0x14c>)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d121      	bne.n	8004cd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c8c:	4b49      	ldr	r3, [pc, #292]	@ (8004db4 <xTaskIncrementTick+0x150>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	603b      	str	r3, [r7, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	e7fd      	b.n	8004caa <xTaskIncrementTick+0x46>
 8004cae:	4b41      	ldr	r3, [pc, #260]	@ (8004db4 <xTaskIncrementTick+0x150>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	4b40      	ldr	r3, [pc, #256]	@ (8004db8 <xTaskIncrementTick+0x154>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a3e      	ldr	r2, [pc, #248]	@ (8004db4 <xTaskIncrementTick+0x150>)
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8004db8 <xTaskIncrementTick+0x154>)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dbc <xTaskIncrementTick+0x158>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8004dbc <xTaskIncrementTick+0x158>)
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	f000 f976 	bl	8004fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc0 <xTaskIncrementTick+0x15c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d348      	bcc.n	8004d6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cda:	4b36      	ldr	r3, [pc, #216]	@ (8004db4 <xTaskIncrementTick+0x150>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce4:	4b36      	ldr	r3, [pc, #216]	@ (8004dc0 <xTaskIncrementTick+0x15c>)
 8004ce6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cea:	601a      	str	r2, [r3, #0]
					break;
 8004cec:	e03e      	b.n	8004d6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cee:	4b31      	ldr	r3, [pc, #196]	@ (8004db4 <xTaskIncrementTick+0x150>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d203      	bcs.n	8004d0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d06:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc0 <xTaskIncrementTick+0x15c>)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d0c:	e02e      	b.n	8004d6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fd1e 	bl	8004754 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	3318      	adds	r3, #24
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff fd15 	bl	8004754 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	2201      	movs	r2, #1
 8004d30:	409a      	lsls	r2, r3
 8004d32:	4b24      	ldr	r3, [pc, #144]	@ (8004dc4 <xTaskIncrementTick+0x160>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	4a22      	ldr	r2, [pc, #136]	@ (8004dc4 <xTaskIncrementTick+0x160>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc8 <xTaskIncrementTick+0x164>)
 8004d4a:	441a      	add	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f7ff fca1 	bl	800469a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dcc <xTaskIncrementTick+0x168>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d3b9      	bcc.n	8004cda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d66:	2301      	movs	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d6a:	e7b6      	b.n	8004cda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d6c:	4b17      	ldr	r3, [pc, #92]	@ (8004dcc <xTaskIncrementTick+0x168>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d72:	4915      	ldr	r1, [pc, #84]	@ (8004dc8 <xTaskIncrementTick+0x164>)
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d901      	bls.n	8004d88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d84:	2301      	movs	r3, #1
 8004d86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d88:	4b11      	ldr	r3, [pc, #68]	@ (8004dd0 <xTaskIncrementTick+0x16c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	e004      	b.n	8004da0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d96:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <xTaskIncrementTick+0x170>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004dd4 <xTaskIncrementTick+0x170>)
 8004d9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004da0:	697b      	ldr	r3, [r7, #20]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	200003cc 	.word	0x200003cc
 8004db0:	200003a8 	.word	0x200003a8
 8004db4:	2000035c 	.word	0x2000035c
 8004db8:	20000360 	.word	0x20000360
 8004dbc:	200003bc 	.word	0x200003bc
 8004dc0:	200003c4 	.word	0x200003c4
 8004dc4:	200003ac 	.word	0x200003ac
 8004dc8:	200002a8 	.word	0x200002a8
 8004dcc:	200002a4 	.word	0x200002a4
 8004dd0:	200003b8 	.word	0x200003b8
 8004dd4:	200003b4 	.word	0x200003b4

08004dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dde:	4b27      	ldr	r3, [pc, #156]	@ (8004e7c <vTaskSwitchContext+0xa4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004de6:	4b26      	ldr	r3, [pc, #152]	@ (8004e80 <vTaskSwitchContext+0xa8>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004dec:	e040      	b.n	8004e70 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004dee:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <vTaskSwitchContext+0xa8>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df4:	4b23      	ldr	r3, [pc, #140]	@ (8004e84 <vTaskSwitchContext+0xac>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e02:	7afb      	ldrb	r3, [r7, #11]
 8004e04:	f1c3 031f 	rsb	r3, r3, #31
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	491f      	ldr	r1, [pc, #124]	@ (8004e88 <vTaskSwitchContext+0xb0>)
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10b      	bne.n	8004e36 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	607b      	str	r3, [r7, #4]
}
 8004e30:	bf00      	nop
 8004e32:	bf00      	nop
 8004e34:	e7fd      	b.n	8004e32 <vTaskSwitchContext+0x5a>
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4a11      	ldr	r2, [pc, #68]	@ (8004e88 <vTaskSwitchContext+0xb0>)
 8004e42:	4413      	add	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	3308      	adds	r3, #8
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d104      	bne.n	8004e66 <vTaskSwitchContext+0x8e>
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4a07      	ldr	r2, [pc, #28]	@ (8004e8c <vTaskSwitchContext+0xb4>)
 8004e6e:	6013      	str	r3, [r2, #0]
}
 8004e70:	bf00      	nop
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	200003cc 	.word	0x200003cc
 8004e80:	200003b8 	.word	0x200003b8
 8004e84:	200003ac 	.word	0x200003ac
 8004e88:	200002a8 	.word	0x200002a8
 8004e8c:	200002a4 	.word	0x200002a4

08004e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e98:	f000 f852 	bl	8004f40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e9c:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <prvIdleTask+0x28>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d9f9      	bls.n	8004e98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ea4:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <prvIdleTask+0x2c>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004eb4:	e7f0      	b.n	8004e98 <prvIdleTask+0x8>
 8004eb6:	bf00      	nop
 8004eb8:	200002a8 	.word	0x200002a8
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
 8004eca:	e00c      	b.n	8004ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4a12      	ldr	r2, [pc, #72]	@ (8004f20 <prvInitialiseTaskLists+0x60>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fbb0 	bl	8004640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d9ef      	bls.n	8004ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004eec:	480d      	ldr	r0, [pc, #52]	@ (8004f24 <prvInitialiseTaskLists+0x64>)
 8004eee:	f7ff fba7 	bl	8004640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ef2:	480d      	ldr	r0, [pc, #52]	@ (8004f28 <prvInitialiseTaskLists+0x68>)
 8004ef4:	f7ff fba4 	bl	8004640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ef8:	480c      	ldr	r0, [pc, #48]	@ (8004f2c <prvInitialiseTaskLists+0x6c>)
 8004efa:	f7ff fba1 	bl	8004640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004efe:	480c      	ldr	r0, [pc, #48]	@ (8004f30 <prvInitialiseTaskLists+0x70>)
 8004f00:	f7ff fb9e 	bl	8004640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f04:	480b      	ldr	r0, [pc, #44]	@ (8004f34 <prvInitialiseTaskLists+0x74>)
 8004f06:	f7ff fb9b 	bl	8004640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <prvInitialiseTaskLists+0x78>)
 8004f0c:	4a05      	ldr	r2, [pc, #20]	@ (8004f24 <prvInitialiseTaskLists+0x64>)
 8004f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f10:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <prvInitialiseTaskLists+0x7c>)
 8004f12:	4a05      	ldr	r2, [pc, #20]	@ (8004f28 <prvInitialiseTaskLists+0x68>)
 8004f14:	601a      	str	r2, [r3, #0]
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200002a8 	.word	0x200002a8
 8004f24:	20000334 	.word	0x20000334
 8004f28:	20000348 	.word	0x20000348
 8004f2c:	20000364 	.word	0x20000364
 8004f30:	20000378 	.word	0x20000378
 8004f34:	20000390 	.word	0x20000390
 8004f38:	2000035c 	.word	0x2000035c
 8004f3c:	20000360 	.word	0x20000360

08004f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f46:	e019      	b.n	8004f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f48:	f000 fa0e 	bl	8005368 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f4c:	4b10      	ldr	r3, [pc, #64]	@ (8004f90 <prvCheckTasksWaitingTermination+0x50>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fbfb 	bl	8004754 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <prvCheckTasksWaitingTermination+0x54>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	4a0b      	ldr	r2, [pc, #44]	@ (8004f94 <prvCheckTasksWaitingTermination+0x54>)
 8004f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f68:	4b0b      	ldr	r3, [pc, #44]	@ (8004f98 <prvCheckTasksWaitingTermination+0x58>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f98 <prvCheckTasksWaitingTermination+0x58>)
 8004f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f72:	f000 fa2b 	bl	80053cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f810 	bl	8004f9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f7c:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <prvCheckTasksWaitingTermination+0x58>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e1      	bne.n	8004f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000378 	.word	0x20000378
 8004f94:	200003a4 	.word	0x200003a4
 8004f98:	2000038c 	.word	0x2000038c

08004f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fb8b 	bl	80056c4 <vPortFree>
			vPortFree( pxTCB );
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fb88 	bl	80056c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <prvResetNextTaskUnblockTime+0x38>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8004fce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fd4:	e008      	b.n	8004fe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd6:	4b07      	ldr	r3, [pc, #28]	@ (8004ff4 <prvResetNextTaskUnblockTime+0x38>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	2000035c 	.word	0x2000035c
 8004ff8:	200003c4 	.word	0x200003c4

08004ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005002:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <xTaskGetSchedulerState+0x34>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d102      	bne.n	8005010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800500a:	2301      	movs	r3, #1
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	e008      	b.n	8005022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005010:	4b08      	ldr	r3, [pc, #32]	@ (8005034 <xTaskGetSchedulerState+0x38>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005018:	2302      	movs	r3, #2
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	e001      	b.n	8005022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800501e:	2300      	movs	r3, #0
 8005020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005022:	687b      	ldr	r3, [r7, #4]
	}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	200003b0 	.word	0x200003b0
 8005034:	200003cc 	.word	0x200003cc

08005038 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005042:	4b29      	ldr	r3, [pc, #164]	@ (80050e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005048:	4b28      	ldr	r3, [pc, #160]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3304      	adds	r3, #4
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fb80 	bl	8004754 <uxListRemove>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800505a:	4b24      	ldr	r3, [pc, #144]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	2201      	movs	r2, #1
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43da      	mvns	r2, r3
 8005068:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4013      	ands	r3, r2
 800506e:	4a20      	ldr	r2, [pc, #128]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005070:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005078:	d10a      	bne.n	8005090 <prvAddCurrentTaskToDelayedList+0x58>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005080:	4b1a      	ldr	r3, [pc, #104]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3304      	adds	r3, #4
 8005086:	4619      	mov	r1, r3
 8005088:	481a      	ldr	r0, [pc, #104]	@ (80050f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800508a:	f7ff fb06 	bl	800469a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800508e:	e026      	b.n	80050de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005098:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d209      	bcs.n	80050bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050a8:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4b0f      	ldr	r3, [pc, #60]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4619      	mov	r1, r3
 80050b4:	4610      	mov	r0, r2
 80050b6:	f7ff fb14 	bl	80046e2 <vListInsert>
}
 80050ba:	e010      	b.n	80050de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050bc:	4b0f      	ldr	r3, [pc, #60]	@ (80050fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3304      	adds	r3, #4
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f7ff fb0a 	bl	80046e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d202      	bcs.n	80050de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80050d8:	4a09      	ldr	r2, [pc, #36]	@ (8005100 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	6013      	str	r3, [r2, #0]
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	200003a8 	.word	0x200003a8
 80050ec:	200002a4 	.word	0x200002a4
 80050f0:	200003ac 	.word	0x200003ac
 80050f4:	20000390 	.word	0x20000390
 80050f8:	20000360 	.word	0x20000360
 80050fc:	2000035c 	.word	0x2000035c
 8005100:	200003c4 	.word	0x200003c4

08005104 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3b04      	subs	r3, #4
 8005114:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800511c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3b04      	subs	r3, #4
 8005122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f023 0201 	bic.w	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3b04      	subs	r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005134:	4a0c      	ldr	r2, [pc, #48]	@ (8005168 <pxPortInitialiseStack+0x64>)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3b14      	subs	r3, #20
 800513e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3b04      	subs	r3, #4
 800514a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f06f 0202 	mvn.w	r2, #2
 8005152:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3b20      	subs	r3, #32
 8005158:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800515a:	68fb      	ldr	r3, [r7, #12]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	0800516d 	.word	0x0800516d

0800516c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005176:	4b13      	ldr	r3, [pc, #76]	@ (80051c4 <prvTaskExitError+0x58>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800517e:	d00b      	beq.n	8005198 <prvTaskExitError+0x2c>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	60fb      	str	r3, [r7, #12]
}
 8005192:	bf00      	nop
 8005194:	bf00      	nop
 8005196:	e7fd      	b.n	8005194 <prvTaskExitError+0x28>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	60bb      	str	r3, [r7, #8]
}
 80051aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051ac:	bf00      	nop
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0fc      	beq.n	80051ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	2000000c 	.word	0x2000000c
	...

080051d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051d0:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <pxCurrentTCBConst2>)
 80051d2:	6819      	ldr	r1, [r3, #0]
 80051d4:	6808      	ldr	r0, [r1, #0]
 80051d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051da:	f380 8809 	msr	PSP, r0
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f380 8811 	msr	BASEPRI, r0
 80051ea:	4770      	bx	lr
 80051ec:	f3af 8000 	nop.w

080051f0 <pxCurrentTCBConst2>:
 80051f0:	200002a4 	.word	0x200002a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051f8:	4808      	ldr	r0, [pc, #32]	@ (800521c <prvPortStartFirstTask+0x24>)
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	6800      	ldr	r0, [r0, #0]
 80051fe:	f380 8808 	msr	MSP, r0
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f380 8814 	msr	CONTROL, r0
 800520a:	b662      	cpsie	i
 800520c:	b661      	cpsie	f
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	df00      	svc	0
 8005218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800521a:	bf00      	nop
 800521c:	e000ed08 	.word	0xe000ed08

08005220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005226:	4b47      	ldr	r3, [pc, #284]	@ (8005344 <xPortStartScheduler+0x124>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a47      	ldr	r2, [pc, #284]	@ (8005348 <xPortStartScheduler+0x128>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10b      	bne.n	8005248 <xPortStartScheduler+0x28>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	613b      	str	r3, [r7, #16]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005248:	4b3e      	ldr	r3, [pc, #248]	@ (8005344 <xPortStartScheduler+0x124>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3f      	ldr	r2, [pc, #252]	@ (800534c <xPortStartScheduler+0x12c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10b      	bne.n	800526a <xPortStartScheduler+0x4a>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	60fb      	str	r3, [r7, #12]
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	e7fd      	b.n	8005266 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800526a:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <xPortStartScheduler+0x130>)
 800526c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	22ff      	movs	r2, #255	@ 0xff
 800527a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800528c:	b2da      	uxtb	r2, r3
 800528e:	4b31      	ldr	r3, [pc, #196]	@ (8005354 <xPortStartScheduler+0x134>)
 8005290:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005292:	4b31      	ldr	r3, [pc, #196]	@ (8005358 <xPortStartScheduler+0x138>)
 8005294:	2207      	movs	r2, #7
 8005296:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005298:	e009      	b.n	80052ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800529a:	4b2f      	ldr	r3, [pc, #188]	@ (8005358 <xPortStartScheduler+0x138>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3b01      	subs	r3, #1
 80052a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005358 <xPortStartScheduler+0x138>)
 80052a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b6:	2b80      	cmp	r3, #128	@ 0x80
 80052b8:	d0ef      	beq.n	800529a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052ba:	4b27      	ldr	r3, [pc, #156]	@ (8005358 <xPortStartScheduler+0x138>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f1c3 0307 	rsb	r3, r3, #7
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d00b      	beq.n	80052de <xPortStartScheduler+0xbe>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60bb      	str	r3, [r7, #8]
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	e7fd      	b.n	80052da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052de:	4b1e      	ldr	r3, [pc, #120]	@ (8005358 <xPortStartScheduler+0x138>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005358 <xPortStartScheduler+0x138>)
 80052e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005358 <xPortStartScheduler+0x138>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052f0:	4a19      	ldr	r2, [pc, #100]	@ (8005358 <xPortStartScheduler+0x138>)
 80052f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052fc:	4b17      	ldr	r3, [pc, #92]	@ (800535c <xPortStartScheduler+0x13c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a16      	ldr	r2, [pc, #88]	@ (800535c <xPortStartScheduler+0x13c>)
 8005302:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005308:	4b14      	ldr	r3, [pc, #80]	@ (800535c <xPortStartScheduler+0x13c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a13      	ldr	r2, [pc, #76]	@ (800535c <xPortStartScheduler+0x13c>)
 800530e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005314:	f000 f8da 	bl	80054cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005318:	4b11      	ldr	r3, [pc, #68]	@ (8005360 <xPortStartScheduler+0x140>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800531e:	f000 f8f9 	bl	8005514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005322:	4b10      	ldr	r3, [pc, #64]	@ (8005364 <xPortStartScheduler+0x144>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a0f      	ldr	r2, [pc, #60]	@ (8005364 <xPortStartScheduler+0x144>)
 8005328:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800532c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800532e:	f7ff ff63 	bl	80051f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005332:	f7ff fd51 	bl	8004dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8005336:	f7ff ff19 	bl	800516c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	e000ed00 	.word	0xe000ed00
 8005348:	410fc271 	.word	0x410fc271
 800534c:	410fc270 	.word	0x410fc270
 8005350:	e000e400 	.word	0xe000e400
 8005354:	200003d0 	.word	0x200003d0
 8005358:	200003d4 	.word	0x200003d4
 800535c:	e000ed20 	.word	0xe000ed20
 8005360:	2000000c 	.word	0x2000000c
 8005364:	e000ef34 	.word	0xe000ef34

08005368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	607b      	str	r3, [r7, #4]
}
 8005380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005382:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <vPortEnterCritical+0x5c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3301      	adds	r3, #1
 8005388:	4a0e      	ldr	r2, [pc, #56]	@ (80053c4 <vPortEnterCritical+0x5c>)
 800538a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800538c:	4b0d      	ldr	r3, [pc, #52]	@ (80053c4 <vPortEnterCritical+0x5c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d110      	bne.n	80053b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005394:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <vPortEnterCritical+0x60>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00b      	beq.n	80053b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	603b      	str	r3, [r7, #0]
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	e7fd      	b.n	80053b2 <vPortEnterCritical+0x4a>
	}
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	2000000c 	.word	0x2000000c
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053d2:	4b12      	ldr	r3, [pc, #72]	@ (800541c <vPortExitCritical+0x50>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10b      	bne.n	80053f2 <vPortExitCritical+0x26>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	607b      	str	r3, [r7, #4]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053f2:	4b0a      	ldr	r3, [pc, #40]	@ (800541c <vPortExitCritical+0x50>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	4a08      	ldr	r2, [pc, #32]	@ (800541c <vPortExitCritical+0x50>)
 80053fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053fc:	4b07      	ldr	r3, [pc, #28]	@ (800541c <vPortExitCritical+0x50>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <vPortExitCritical+0x44>
 8005404:	2300      	movs	r3, #0
 8005406:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800540e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	2000000c 	.word	0x2000000c

08005420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005420:	f3ef 8009 	mrs	r0, PSP
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	4b15      	ldr	r3, [pc, #84]	@ (8005480 <pxCurrentTCBConst>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	f01e 0f10 	tst.w	lr, #16
 8005430:	bf08      	it	eq
 8005432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	6010      	str	r0, [r2, #0]
 800543c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005444:	f380 8811 	msr	BASEPRI, r0
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f7ff fcc2 	bl	8004dd8 <vTaskSwitchContext>
 8005454:	f04f 0000 	mov.w	r0, #0
 8005458:	f380 8811 	msr	BASEPRI, r0
 800545c:	bc09      	pop	{r0, r3}
 800545e:	6819      	ldr	r1, [r3, #0]
 8005460:	6808      	ldr	r0, [r1, #0]
 8005462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005466:	f01e 0f10 	tst.w	lr, #16
 800546a:	bf08      	it	eq
 800546c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005470:	f380 8809 	msr	PSP, r0
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	f3af 8000 	nop.w

08005480 <pxCurrentTCBConst>:
 8005480:	200002a4 	.word	0x200002a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop

08005488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	607b      	str	r3, [r7, #4]
}
 80054a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054a2:	f7ff fbdf 	bl	8004c64 <xTaskIncrementTick>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054ac:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <xPortSysTickHandler+0x40>)
 80054ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	2300      	movs	r3, #0
 80054b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f383 8811 	msr	BASEPRI, r3
}
 80054be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005500 <vPortSetupTimerInterrupt+0x34>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005504 <vPortSetupTimerInterrupt+0x38>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005508 <vPortSetupTimerInterrupt+0x3c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a0a      	ldr	r2, [pc, #40]	@ (800550c <vPortSetupTimerInterrupt+0x40>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	099b      	lsrs	r3, r3, #6
 80054e8:	4a09      	ldr	r2, [pc, #36]	@ (8005510 <vPortSetupTimerInterrupt+0x44>)
 80054ea:	3b01      	subs	r3, #1
 80054ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ee:	4b04      	ldr	r3, [pc, #16]	@ (8005500 <vPortSetupTimerInterrupt+0x34>)
 80054f0:	2207      	movs	r2, #7
 80054f2:	601a      	str	r2, [r3, #0]
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	e000e010 	.word	0xe000e010
 8005504:	e000e018 	.word	0xe000e018
 8005508:	20000000 	.word	0x20000000
 800550c:	10624dd3 	.word	0x10624dd3
 8005510:	e000e014 	.word	0xe000e014

08005514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005514:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005524 <vPortEnableVFP+0x10>
 8005518:	6801      	ldr	r1, [r0, #0]
 800551a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800551e:	6001      	str	r1, [r0, #0]
 8005520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005522:	bf00      	nop
 8005524:	e000ed88 	.word	0xe000ed88

08005528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	@ 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005534:	f7ff faea 	bl	8004b0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005538:	4b5c      	ldr	r3, [pc, #368]	@ (80056ac <pvPortMalloc+0x184>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005540:	f000 f924 	bl	800578c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005544:	4b5a      	ldr	r3, [pc, #360]	@ (80056b0 <pvPortMalloc+0x188>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4013      	ands	r3, r2
 800554c:	2b00      	cmp	r3, #0
 800554e:	f040 8095 	bne.w	800567c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01e      	beq.n	8005596 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005558:	2208      	movs	r2, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b00      	cmp	r3, #0
 8005568:	d015      	beq.n	8005596 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f023 0307 	bic.w	r3, r3, #7
 8005570:	3308      	adds	r3, #8
 8005572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <pvPortMalloc+0x6e>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	617b      	str	r3, [r7, #20]
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	e7fd      	b.n	8005592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d06f      	beq.n	800567c <pvPortMalloc+0x154>
 800559c:	4b45      	ldr	r3, [pc, #276]	@ (80056b4 <pvPortMalloc+0x18c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d86a      	bhi.n	800567c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055a6:	4b44      	ldr	r3, [pc, #272]	@ (80056b8 <pvPortMalloc+0x190>)
 80055a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055aa:	4b43      	ldr	r3, [pc, #268]	@ (80056b8 <pvPortMalloc+0x190>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055b0:	e004      	b.n	80055bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d903      	bls.n	80055ce <pvPortMalloc+0xa6>
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f1      	bne.n	80055b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055ce:	4b37      	ldr	r3, [pc, #220]	@ (80056ac <pvPortMalloc+0x184>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d051      	beq.n	800567c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2208      	movs	r2, #8
 80055de:	4413      	add	r3, r2
 80055e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	1ad2      	subs	r2, r2, r3
 80055f2:	2308      	movs	r3, #8
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d920      	bls.n	800563c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4413      	add	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00b      	beq.n	8005624 <pvPortMalloc+0xfc>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	613b      	str	r3, [r7, #16]
}
 800561e:	bf00      	nop
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	1ad2      	subs	r2, r2, r3
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005636:	69b8      	ldr	r0, [r7, #24]
 8005638:	f000 f90a 	bl	8005850 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800563c:	4b1d      	ldr	r3, [pc, #116]	@ (80056b4 <pvPortMalloc+0x18c>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	4a1b      	ldr	r2, [pc, #108]	@ (80056b4 <pvPortMalloc+0x18c>)
 8005648:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800564a:	4b1a      	ldr	r3, [pc, #104]	@ (80056b4 <pvPortMalloc+0x18c>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b1b      	ldr	r3, [pc, #108]	@ (80056bc <pvPortMalloc+0x194>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d203      	bcs.n	800565e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005656:	4b17      	ldr	r3, [pc, #92]	@ (80056b4 <pvPortMalloc+0x18c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a18      	ldr	r2, [pc, #96]	@ (80056bc <pvPortMalloc+0x194>)
 800565c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	4b13      	ldr	r3, [pc, #76]	@ (80056b0 <pvPortMalloc+0x188>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	431a      	orrs	r2, r3
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005672:	4b13      	ldr	r3, [pc, #76]	@ (80056c0 <pvPortMalloc+0x198>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	4a11      	ldr	r2, [pc, #68]	@ (80056c0 <pvPortMalloc+0x198>)
 800567a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800567c:	f7ff fa54 	bl	8004b28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00b      	beq.n	80056a2 <pvPortMalloc+0x17a>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	60fb      	str	r3, [r7, #12]
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	e7fd      	b.n	800569e <pvPortMalloc+0x176>
	return pvReturn;
 80056a2:	69fb      	ldr	r3, [r7, #28]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3728      	adds	r7, #40	@ 0x28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20000fe0 	.word	0x20000fe0
 80056b0:	20000ff4 	.word	0x20000ff4
 80056b4:	20000fe4 	.word	0x20000fe4
 80056b8:	20000fd8 	.word	0x20000fd8
 80056bc:	20000fe8 	.word	0x20000fe8
 80056c0:	20000fec 	.word	0x20000fec

080056c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d04f      	beq.n	8005776 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056d6:	2308      	movs	r3, #8
 80056d8:	425b      	negs	r3, r3
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4413      	add	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	4b25      	ldr	r3, [pc, #148]	@ (8005780 <vPortFree+0xbc>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10b      	bne.n	800570a <vPortFree+0x46>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	60fb      	str	r3, [r7, #12]
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <vPortFree+0x66>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	60bb      	str	r3, [r7, #8]
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	e7fd      	b.n	8005726 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4b14      	ldr	r3, [pc, #80]	@ (8005780 <vPortFree+0xbc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4013      	ands	r3, r2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01e      	beq.n	8005776 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11a      	bne.n	8005776 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	4b0e      	ldr	r3, [pc, #56]	@ (8005780 <vPortFree+0xbc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	43db      	mvns	r3, r3
 800574a:	401a      	ands	r2, r3
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005750:	f7ff f9dc 	bl	8004b0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	4b0a      	ldr	r3, [pc, #40]	@ (8005784 <vPortFree+0xc0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4413      	add	r3, r2
 800575e:	4a09      	ldr	r2, [pc, #36]	@ (8005784 <vPortFree+0xc0>)
 8005760:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005762:	6938      	ldr	r0, [r7, #16]
 8005764:	f000 f874 	bl	8005850 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005768:	4b07      	ldr	r3, [pc, #28]	@ (8005788 <vPortFree+0xc4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3301      	adds	r3, #1
 800576e:	4a06      	ldr	r2, [pc, #24]	@ (8005788 <vPortFree+0xc4>)
 8005770:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005772:	f7ff f9d9 	bl	8004b28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005776:	bf00      	nop
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000ff4 	.word	0x20000ff4
 8005784:	20000fe4 	.word	0x20000fe4
 8005788:	20000ff0 	.word	0x20000ff0

0800578c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005792:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005796:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005798:	4b27      	ldr	r3, [pc, #156]	@ (8005838 <prvHeapInit+0xac>)
 800579a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00c      	beq.n	80057c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3307      	adds	r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0307 	bic.w	r3, r3, #7
 80057b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005838 <prvHeapInit+0xac>)
 80057bc:	4413      	add	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057c4:	4a1d      	ldr	r2, [pc, #116]	@ (800583c <prvHeapInit+0xb0>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057ca:	4b1c      	ldr	r3, [pc, #112]	@ (800583c <prvHeapInit+0xb0>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	4413      	add	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057d8:	2208      	movs	r2, #8
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0307 	bic.w	r3, r3, #7
 80057e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4a15      	ldr	r2, [pc, #84]	@ (8005840 <prvHeapInit+0xb4>)
 80057ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057ee:	4b14      	ldr	r3, [pc, #80]	@ (8005840 <prvHeapInit+0xb4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2200      	movs	r2, #0
 80057f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057f6:	4b12      	ldr	r3, [pc, #72]	@ (8005840 <prvHeapInit+0xb4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800580c:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <prvHeapInit+0xb4>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4a0a      	ldr	r2, [pc, #40]	@ (8005844 <prvHeapInit+0xb8>)
 800581a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4a09      	ldr	r2, [pc, #36]	@ (8005848 <prvHeapInit+0xbc>)
 8005822:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005824:	4b09      	ldr	r3, [pc, #36]	@ (800584c <prvHeapInit+0xc0>)
 8005826:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	200003d8 	.word	0x200003d8
 800583c:	20000fd8 	.word	0x20000fd8
 8005840:	20000fe0 	.word	0x20000fe0
 8005844:	20000fe8 	.word	0x20000fe8
 8005848:	20000fe4 	.word	0x20000fe4
 800584c:	20000ff4 	.word	0x20000ff4

08005850 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005858:	4b28      	ldr	r3, [pc, #160]	@ (80058fc <prvInsertBlockIntoFreeList+0xac>)
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	e002      	b.n	8005864 <prvInsertBlockIntoFreeList+0x14>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	d8f7      	bhi.n	800585e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	4413      	add	r3, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d108      	bne.n	8005892 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	441a      	add	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	441a      	add	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d118      	bne.n	80058d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b15      	ldr	r3, [pc, #84]	@ (8005900 <prvInsertBlockIntoFreeList+0xb0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d00d      	beq.n	80058ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	441a      	add	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e008      	b.n	80058e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005900 <prvInsertBlockIntoFreeList+0xb0>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	e003      	b.n	80058e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d002      	beq.n	80058ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000fd8 	.word	0x20000fd8
 8005900:	20000fe0 	.word	0x20000fe0

08005904 <memset>:
 8005904:	4402      	add	r2, r0
 8005906:	4603      	mov	r3, r0
 8005908:	4293      	cmp	r3, r2
 800590a:	d100      	bne.n	800590e <memset+0xa>
 800590c:	4770      	bx	lr
 800590e:	f803 1b01 	strb.w	r1, [r3], #1
 8005912:	e7f9      	b.n	8005908 <memset+0x4>

08005914 <__libc_init_array>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	4d0d      	ldr	r5, [pc, #52]	@ (800594c <__libc_init_array+0x38>)
 8005918:	4c0d      	ldr	r4, [pc, #52]	@ (8005950 <__libc_init_array+0x3c>)
 800591a:	1b64      	subs	r4, r4, r5
 800591c:	10a4      	asrs	r4, r4, #2
 800591e:	2600      	movs	r6, #0
 8005920:	42a6      	cmp	r6, r4
 8005922:	d109      	bne.n	8005938 <__libc_init_array+0x24>
 8005924:	4d0b      	ldr	r5, [pc, #44]	@ (8005954 <__libc_init_array+0x40>)
 8005926:	4c0c      	ldr	r4, [pc, #48]	@ (8005958 <__libc_init_array+0x44>)
 8005928:	f000 f818 	bl	800595c <_init>
 800592c:	1b64      	subs	r4, r4, r5
 800592e:	10a4      	asrs	r4, r4, #2
 8005930:	2600      	movs	r6, #0
 8005932:	42a6      	cmp	r6, r4
 8005934:	d105      	bne.n	8005942 <__libc_init_array+0x2e>
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	f855 3b04 	ldr.w	r3, [r5], #4
 800593c:	4798      	blx	r3
 800593e:	3601      	adds	r6, #1
 8005940:	e7ee      	b.n	8005920 <__libc_init_array+0xc>
 8005942:	f855 3b04 	ldr.w	r3, [r5], #4
 8005946:	4798      	blx	r3
 8005948:	3601      	adds	r6, #1
 800594a:	e7f2      	b.n	8005932 <__libc_init_array+0x1e>
 800594c:	080059e4 	.word	0x080059e4
 8005950:	080059e4 	.word	0x080059e4
 8005954:	080059e4 	.word	0x080059e4
 8005958:	080059e8 	.word	0x080059e8

0800595c <_init>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr

08005968 <_fini>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr
