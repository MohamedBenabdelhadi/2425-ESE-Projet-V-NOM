
Projet_V-NOM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9dc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800ebc0  0800ebc0  0000fbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1e8  0800f1e8  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1e8  0800f1e8  000101e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1f0  0800f1f0  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1f0  0800f1f0  000101f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f1f4  0800f1f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800f1f8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ecc  200001d8  0800f3d0  000111d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200030a4  0800f3d0  000120a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231c3  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d8a  00000000  00000000  000343cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  00039158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016cc  00000000  00000000  0003aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253f5  00000000  00000000  0003c5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c55  00000000  00000000  000619a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e94d2  00000000  00000000  000845fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016dad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000919c  00000000  00000000  0016db14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00176cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eba4 	.word	0x0800eba4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800eba4 	.word	0x0800eba4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00a fa0f 	bl	800b470 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2201      	movs	r2, #1
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 feb7 	bl	8002e30 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fb33 	bl	8001732 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 ffbc 	bl	8004054 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fb26 	bl	8001732 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f002 f9ee 	bl	80034e4 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 fb10 	bl	8001732 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f4 	.word	0x200001f4
 8001120:	0c900008 	.word	0x0c900008

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00a f993 	bl	800b470 <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d134      	bne.n	80011be <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f004 fb1d 	bl	80057a4 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 fadf 	bl	8001732 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ToF2_Pin|GPIO_PIN_2;
 80011a4:	2305      	movs	r3, #5
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ba:	f003 fb49 	bl	8004850 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3768      	adds	r7, #104	@ 0x68
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_FREERTOS_Init+0x2c>)
 80011d4:	1d3c      	adds	r4, r7, #4
 80011d6:	461d      	mov	r5, r3
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f007 ff02 	bl	8008fee <osThreadCreate>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a03      	ldr	r2, [pc, #12]	@ (80011fc <MX_FREERTOS_Init+0x30>)
 80011ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}
 80011f8:	0800ebcc 	.word	0x0800ebcc
 80011fc:	20000260 	.word	0x20000260

08001200 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f007 ff17 	bl	800903c <osDelay>
 800120e:	e7fb      	b.n	8001208 <StartDefaultTask+0x8>

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_DMA_Init+0x50>)
 8001218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800121a:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <MX_DMA_Init+0x50>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6493      	str	r3, [r2, #72]	@ 0x48
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_DMA_Init+0x50>)
 8001224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_DMA_Init+0x50>)
 8001230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001232:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <MX_DMA_Init+0x50>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6493      	str	r3, [r2, #72]	@ 0x48
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_DMA_Init+0x50>)
 800123c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2105      	movs	r1, #5
 800124a:	200b      	movs	r0, #11
 800124c:	f003 f85e 	bl	800430c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001250:	200b      	movs	r0, #11
 8001252:	f003 f875 	bl	8004340 <HAL_NVIC_EnableIRQ>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000

08001264 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA0   ------> SharedAnalog_PA0
*/
void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b48      	ldr	r3, [pc, #288]	@ (800139c <MX_GPIO_Init+0x138>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	4a47      	ldr	r2, [pc, #284]	@ (800139c <MX_GPIO_Init+0x138>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001286:	4b45      	ldr	r3, [pc, #276]	@ (800139c <MX_GPIO_Init+0x138>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	4b42      	ldr	r3, [pc, #264]	@ (800139c <MX_GPIO_Init+0x138>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	4a41      	ldr	r2, [pc, #260]	@ (800139c <MX_GPIO_Init+0x138>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129e:	4b3f      	ldr	r3, [pc, #252]	@ (800139c <MX_GPIO_Init+0x138>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b3c      	ldr	r3, [pc, #240]	@ (800139c <MX_GPIO_Init+0x138>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	4a3b      	ldr	r2, [pc, #236]	@ (800139c <MX_GPIO_Init+0x138>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b6:	4b39      	ldr	r3, [pc, #228]	@ (800139c <MX_GPIO_Init+0x138>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4b36      	ldr	r3, [pc, #216]	@ (800139c <MX_GPIO_Init+0x138>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a35      	ldr	r2, [pc, #212]	@ (800139c <MX_GPIO_Init+0x138>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b33      	ldr	r3, [pc, #204]	@ (800139c <MX_GPIO_Init+0x138>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 80012e0:	482f      	ldr	r0, [pc, #188]	@ (80013a0 <MX_GPIO_Init+0x13c>)
 80012e2:	f003 fc37 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2103      	movs	r1, #3
 80012ea:	482e      	ldr	r0, [pc, #184]	@ (80013a4 <MX_GPIO_Init+0x140>)
 80012ec:	f003 fc32 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 80012f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4826      	ldr	r0, [pc, #152]	@ (80013a0 <MX_GPIO_Init+0x13c>)
 8001306:	f003 faa3 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ToF2_Pin;
 800130a:	2301      	movs	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130e:	2303      	movs	r3, #3
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ToF2_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001320:	f003 fa96 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AG_INT1_Pin|AG_INT2_Pin;
 8001324:	2318      	movs	r3, #24
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001328:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133c:	f003 fa88 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin;
 8001340:	f44f 6341 	mov.w	r3, #3088	@ 0xc10
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4811      	ldr	r0, [pc, #68]	@ (80013a0 <MX_GPIO_Init+0x13c>)
 800135a:	f003 fa79 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 800135e:	2303      	movs	r3, #3
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	480b      	ldr	r0, [pc, #44]	@ (80013a4 <MX_GPIO_Init+0x140>)
 8001376:	f003 fa6b 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin;
 800137a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_MODE_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <MX_GPIO_Init+0x140>)
 8001390:	f003 fa5e 	bl	8004850 <HAL_GPIO_Init>

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	@ 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000400 	.word	0x48000400

080013a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013ac:	f3bf 8f4f 	dsb	sy
}
 80013b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <__NVIC_SystemReset+0x24>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013ba:	4904      	ldr	r1, [pc, #16]	@ (80013cc <__NVIC_SystemReset+0x24>)
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <__NVIC_SystemReset+0x28>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013c2:	f3bf 8f4f 	dsb	sy
}
 80013c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <__NVIC_SystemReset+0x20>
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	05fa0004 	.word	0x05fa0004

080013d4 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80013dc:	1d39      	adds	r1, r7, #4
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e2:	2201      	movs	r2, #1
 80013e4:	4803      	ldr	r0, [pc, #12]	@ (80013f4 <__io_putchar+0x20>)
 80013e6:	f006 fba0 	bl	8007b2a <HAL_UART_Transmit>

	return ch;
 80013ea:	687b      	ldr	r3, [r7, #4]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000478 	.word	0x20000478

080013f8 <task_Motors>:
 * @param unsused: Unused parameter.
 * @retval None
 * @details This FreeRTOS task continuously updates the motor speed based on current settings.
 */
void task_Motors(void * unsused)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("task_Motors\r\n");
 8001400:	4806      	ldr	r0, [pc, #24]	@ (800141c <task_Motors+0x24>)
 8001402:	f009 ff35 	bl	800b270 <puts>

	while (1)
	{
		GP2Y0A41SK0F_get_distance(&hTof);
 8001406:	4806      	ldr	r0, [pc, #24]	@ (8001420 <task_Motors+0x28>)
 8001408:	f001 f876 	bl	80024f8 <GP2Y0A41SK0F_get_distance>
		Motor_UpdateSpeed(&hMotors);
 800140c:	4805      	ldr	r0, [pc, #20]	@ (8001424 <task_Motors+0x2c>)
 800140e:	f001 fa15 	bl	800283c <Motor_UpdateSpeed>
		vTaskDelay(1);
 8001412:	2001      	movs	r0, #1
 8001414:	f008 f826 	bl	8009464 <vTaskDelay>
		GP2Y0A41SK0F_get_distance(&hTof);
 8001418:	bf00      	nop
 800141a:	e7f4      	b.n	8001406 <task_Motors+0xe>
 800141c:	0800ec14 	.word	0x0800ec14
 8001420:	20000284 	.word	0x20000284
 8001424:	20000264 	.word	0x20000264

08001428 <task_Control>:
 * @retval None
 * @details This FreeRTOS task controls motor behavior based on ToF sensor readings.
 * It evaluates distances from ToF sensors and adjusts motor directions accordingly.
 */
void task_Control(void * unsused)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("task_Control\r\n");
 8001430:	4829      	ldr	r0, [pc, #164]	@ (80014d8 <task_Control+0xb0>)
 8001432:	f009 ff1d 	bl	800b270 <puts>

	while (1)
	{
		DEBUG_PRINT("ToF1 distance: %d mm, ToF2 distance: %d mm\r\n", hTof.distance_tof1, hTof.distance_tof2);
 8001436:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <task_Control+0xb4>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a28      	ldr	r2, [pc, #160]	@ (80014dc <task_Control+0xb4>)
 800143c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800143e:	4619      	mov	r1, r3
 8001440:	4827      	ldr	r0, [pc, #156]	@ (80014e0 <task_Control+0xb8>)
 8001442:	f009 fead 	bl	800b1a0 <iprintf>

		/* Motors test */
		if (hTof.distance_tof2 > TOF_TRESHHOLD && hTof.distance_tof1 > TOF_TRESHHOLD)
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <task_Control+0xb4>)
 8001448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800144a:	2b28      	cmp	r3, #40	@ 0x28
 800144c:	dd0a      	ble.n	8001464 <task_Control+0x3c>
 800144e:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <task_Control+0xb4>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	2b28      	cmp	r3, #40	@ 0x28
 8001454:	dd06      	ble.n	8001464 <task_Control+0x3c>
		{
			hMotors.mode_mot1 = FORWARD_MODE;
 8001456:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <task_Control+0xbc>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = FORWARD_MODE;
 800145c:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <task_Control+0xbc>)
 800145e:	2201      	movs	r2, #1
 8001460:	705a      	strb	r2, [r3, #1]
 8001462:	e023      	b.n	80014ac <task_Control+0x84>
		}
		else if (hTof.distance_tof2 > TOF_TRESHHOLD && hTof.distance_tof1 <= TOF_TRESHHOLD)
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <task_Control+0xb4>)
 8001466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001468:	2b28      	cmp	r3, #40	@ 0x28
 800146a:	dd0a      	ble.n	8001482 <task_Control+0x5a>
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <task_Control+0xb4>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001470:	2b28      	cmp	r3, #40	@ 0x28
 8001472:	dc06      	bgt.n	8001482 <task_Control+0x5a>
		{
			hMotors.mode_mot1 = FORWARD_MODE;
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <task_Control+0xbc>)
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = REVERSE_MODE;
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <task_Control+0xbc>)
 800147c:	2202      	movs	r2, #2
 800147e:	705a      	strb	r2, [r3, #1]
 8001480:	e014      	b.n	80014ac <task_Control+0x84>
		}
		else if (hTof.distance_tof2 <= TOF_TRESHHOLD && hTof.distance_tof1 > TOF_TRESHHOLD)
 8001482:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <task_Control+0xb4>)
 8001484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001486:	2b28      	cmp	r3, #40	@ 0x28
 8001488:	dc0a      	bgt.n	80014a0 <task_Control+0x78>
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <task_Control+0xb4>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	2b28      	cmp	r3, #40	@ 0x28
 8001490:	dd06      	ble.n	80014a0 <task_Control+0x78>
		{
			hMotors.mode_mot1 = REVERSE_MODE;
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <task_Control+0xbc>)
 8001494:	2202      	movs	r2, #2
 8001496:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = FORWARD_MODE;
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <task_Control+0xbc>)
 800149a:	2201      	movs	r2, #1
 800149c:	705a      	strb	r2, [r3, #1]
 800149e:	e005      	b.n	80014ac <task_Control+0x84>
		}
		else //if (hTof.distance_tof2 <= TOF_TRESHHOLD && hTof.distance_tof1 <= TOF_TRESHHOLD)
		{
			hMotors.mode_mot1 = REVERSE_MODE;
 80014a0:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <task_Control+0xbc>)
 80014a2:	2202      	movs	r2, #2
 80014a4:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = REVERSE_MODE;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <task_Control+0xbc>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	705a      	strb	r2, [r3, #1]
		}

		Motor_SetMode(&hMotors);
 80014ac:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <task_Control+0xbc>)
 80014ae:	f001 f8fd 	bl	80026ac <Motor_SetMode>
		Motor_SetSpeed_percent(&hMotors, 40, 40);
 80014b2:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80014e8 <task_Control+0xc0>
 80014b6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80014e8 <task_Control+0xc0>
 80014ba:	480a      	ldr	r0, [pc, #40]	@ (80014e4 <task_Control+0xbc>)
 80014bc:	f001 f964 	bl	8002788 <Motor_SetSpeed_percent>
		DEBUG_PRINT("Mot1 speed: %d, Mot2 speed: %d\r\n", hMotors.current_speed1, hMotors.current_speed2);
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <task_Control+0xbc>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4a07      	ldr	r2, [pc, #28]	@ (80014e4 <task_Control+0xbc>)
 80014c6:	6912      	ldr	r2, [r2, #16]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4808      	ldr	r0, [pc, #32]	@ (80014ec <task_Control+0xc4>)
 80014cc:	f009 fe68 	bl	800b1a0 <iprintf>

		vTaskDelay(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f007 ffc7 	bl	8009464 <vTaskDelay>
		DEBUG_PRINT("ToF1 distance: %d mm, ToF2 distance: %d mm\r\n", hTof.distance_tof1, hTof.distance_tof2);
 80014d6:	e7ae      	b.n	8001436 <task_Control+0xe>
 80014d8:	0800ec24 	.word	0x0800ec24
 80014dc:	20000284 	.word	0x20000284
 80014e0:	0800ec34 	.word	0x0800ec34
 80014e4:	20000264 	.word	0x20000264
 80014e8:	42200000 	.word	0x42200000
 80014ec:	0800ec64 	.word	0x0800ec64

080014f0 <errHandler_xTaskCreate>:
 * @retval None
 * @details This function checks the return value of `xTaskCreate` to determine
 * if a task was created successfully. In case of failure, it performs error handling.
 */
void errHandler_xTaskCreate(BaseType_t r)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d103      	bne.n	8001506 <errHandler_xTaskCreate+0x16>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
		DEBUG_PRINT("Tâche crée avec succès\r\n");
 80014fe:	480c      	ldr	r0, [pc, #48]	@ (8001530 <errHandler_xTaskCreate+0x40>)
 8001500:	f009 feb6 	bl	800b270 <puts>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		DEBUG_PRINT("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 8001504:	e010      	b.n	8001528 <errHandler_xTaskCreate+0x38>
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800150c:	d105      	bne.n	800151a <errHandler_xTaskCreate+0x2a>
		DEBUG_PRINT("Erreur: Mémoire insuffisante\r\n");
 800150e:	4809      	ldr	r0, [pc, #36]	@ (8001534 <errHandler_xTaskCreate+0x44>)
 8001510:	f009 feae 	bl	800b270 <puts>
		Error_Handler();
 8001514:	f000 f90d 	bl	8001732 <Error_Handler>
}
 8001518:	e006      	b.n	8001528 <errHandler_xTaskCreate+0x38>
		DEBUG_PRINT("Erreur inconnue lors de la création de la tâche\r\n");
 800151a:	4807      	ldr	r0, [pc, #28]	@ (8001538 <errHandler_xTaskCreate+0x48>)
 800151c:	f009 fea8 	bl	800b270 <puts>
		Error_Handler();  	// Gestion d'erreur générique
 8001520:	f000 f907 	bl	8001732 <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 8001524:	f7ff ff40 	bl	80013a8 <__NVIC_SystemReset>
}
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	0800ec88 	.word	0x0800ec88
 8001534:	0800eca4 	.word	0x0800eca4
 8001538:	0800ecc4 	.word	0x0800ecc4

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f001 f9c5 	bl	80028d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f855 	bl	80015f4 <SystemClock_Config>
	 * @details Contains initialization code for GPIO, ADC, SPI, TIM, etc.
	 */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f7ff fe8b 	bl	8001264 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f7ff fe5f 	bl	8001210 <MX_DMA_Init>
  MX_SPI1_Init();
 8001552:	f000 f8f5 	bl	8001740 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001556:	f000 fb2d 	bl	8001bb4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800155a:	f000 fbf3 	bl	8001d44 <MX_TIM3_Init>
  MX_TIM4_Init();
 800155e:	f000 fc47 	bl	8001df0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001562:	f000 fdd3 	bl	800210c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001566:	f000 fd85 	bl	8002074 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800156a:	f7ff fd63 	bl	8001034 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	DEBUG_PRINT("\r\n*** Waking up V-NOM ***\r\n");
 800156e:	4817      	ldr	r0, [pc, #92]	@ (80015cc <main+0x90>)
 8001570:	f009 fe7e 	bl	800b270 <puts>
	//DEBUG_PRINT("%s", jumbo_logo_msg);

	/* ToF sensors Initialization */
	GP2Y0A41SK0F_Init(&hTof);
 8001574:	4816      	ldr	r0, [pc, #88]	@ (80015d0 <main+0x94>)
 8001576:	f000 ff2b 	bl	80023d0 <GP2Y0A41SK0F_Init>

	/* ADXL343 Initialization *
	ADXL343_Init(&hADXL);*/

	/* Motors Initialization */
	Motor_Init(&hMotors, &htim1);
 800157a:	4916      	ldr	r1, [pc, #88]	@ (80015d4 <main+0x98>)
 800157c:	4816      	ldr	r0, [pc, #88]	@ (80015d8 <main+0x9c>)
 800157e:	f001 f845 	bl	800260c <Motor_Init>
	/* YLIDAR X2 Initialization with DMA *
	LIDAR_RX_GPIO_Port->PUPDR = GPIO_PULLUP;
	YLIDARX2_InitDMA(&hlidar, &huart2);*/

	/* Motors task */
	xReturned = xTaskCreate(
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <main+0xa0>)
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	230a      	movs	r3, #10
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2300      	movs	r3, #0
 800158c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001590:	4913      	ldr	r1, [pc, #76]	@ (80015e0 <main+0xa4>)
 8001592:	4814      	ldr	r0, [pc, #80]	@ (80015e4 <main+0xa8>)
 8001594:	f007 fe1a 	bl	80091cc <xTaskCreate>
 8001598:	6078      	str	r0, [r7, #4]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) 0, // Parameter passed into the task.
			TASK_PRIORITY_MOTOR,// Priority at which the task is created.
			&xMotors); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffa8 	bl	80014f0 <errHandler_xTaskCreate>

	/* Control task */
	xReturned = xTaskCreate(
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <main+0xac>)
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	2302      	movs	r3, #2
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2300      	movs	r3, #0
 80015aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015ae:	490f      	ldr	r1, [pc, #60]	@ (80015ec <main+0xb0>)
 80015b0:	480f      	ldr	r0, [pc, #60]	@ (80015f0 <main+0xb4>)
 80015b2:	f007 fe0b 	bl	80091cc <xTaskCreate>
 80015b6:	6078      	str	r0, [r7, #4]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) 0, // Parameter passed into the task.
			TASK_PRIORITY_CONTROL,// Priority at which the task is created.
			&xControl); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff99 	bl	80014f0 <errHandler_xTaskCreate>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015be:	f7ff fe05 	bl	80011cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015c2:	f007 fd0d 	bl	8008fe0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80015c6:	bf00      	nop
 80015c8:	e7fd      	b.n	80015c6 <main+0x8a>
 80015ca:	bf00      	nop
 80015cc:	0800ecf8 	.word	0x0800ecf8
 80015d0:	20000284 	.word	0x20000284
 80015d4:	20000394 	.word	0x20000394
 80015d8:	20000264 	.word	0x20000264
 80015dc:	200002d8 	.word	0x200002d8
 80015e0:	0800ed14 	.word	0x0800ed14
 80015e4:	080013f9 	.word	0x080013f9
 80015e8:	200002dc 	.word	0x200002dc
 80015ec:	0800ed20 	.word	0x0800ed20
 80015f0:	08001429 	.word	0x08001429

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b094      	sub	sp, #80	@ 0x50
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	2238      	movs	r2, #56	@ 0x38
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f009 ff34 	bl	800b470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001616:	2000      	movs	r0, #0
 8001618:	f003 fab4 	bl	8004b84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001626:	2340      	movs	r3, #64	@ 0x40
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	2302      	movs	r3, #2
 800162c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800162e:	2302      	movs	r3, #2
 8001630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001632:	2304      	movs	r3, #4
 8001634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001636:	2355      	movs	r3, #85	@ 0x55
 8001638:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800163e:	2302      	movs	r3, #2
 8001640:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	4618      	mov	r0, r3
 800164c:	f003 fb4e 	bl	8004cec <HAL_RCC_OscConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001656:	f000 f86c 	bl	8001732 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165e:	2303      	movs	r3, #3
 8001660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2104      	movs	r1, #4
 8001672:	4618      	mov	r0, r3
 8001674:	f003 fe4c 	bl	8005310 <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800167e:	f000 f858 	bl	8001732 <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3750      	adds	r7, #80	@ 0x50
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_UART_ErrorCallback>:
 * @retval None
 * @details This function handles UART errors such as parity, noise, framing,
 * or overrun errors. It restarts the LIDAR's DMA in case of errors.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	@ (8001700 <HAL_UART_ErrorCallback+0x74>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12b      	bne.n	80016f6 <HAL_UART_ErrorCallback+0x6a>
	{
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f006 fe2a 	bl	80082f8 <HAL_UART_GetError>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <HAL_UART_ErrorCallback+0x28>
			DEBUG_PRINT("Parity Error!\r\n");
 80016ae:	4815      	ldr	r0, [pc, #84]	@ (8001704 <HAL_UART_ErrorCallback+0x78>)
 80016b0:	f009 fdde 	bl	800b270 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f006 fe1f 	bl	80082f8 <HAL_UART_GetError>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <HAL_UART_ErrorCallback+0x3e>
			DEBUG_PRINT("Noise Error!\r\n");
 80016c4:	4810      	ldr	r0, [pc, #64]	@ (8001708 <HAL_UART_ErrorCallback+0x7c>)
 80016c6:	f009 fdd3 	bl	800b270 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f006 fe14 	bl	80082f8 <HAL_UART_GetError>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_UART_ErrorCallback+0x54>
			DEBUG_PRINT("Framing Error!\r\n");
 80016da:	480c      	ldr	r0, [pc, #48]	@ (800170c <HAL_UART_ErrorCallback+0x80>)
 80016dc:	f009 fdc8 	bl	800b270 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f006 fe09 	bl	80082f8 <HAL_UART_GetError>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_UART_ErrorCallback+0x6a>
			DEBUG_PRINT("Overrun Error!\r\n");
 80016f0:	4807      	ldr	r0, [pc, #28]	@ (8001710 <HAL_UART_ErrorCallback+0x84>)
 80016f2:	f009 fdbd 	bl	800b270 <puts>

		//YLIDARX2_RestartDMA(&hlidar);
	}
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40004400 	.word	0x40004400
 8001704:	0800ed30 	.word	0x0800ed30
 8001708:	0800ed40 	.word	0x0800ed40
 800170c:	0800ed50 	.word	0x0800ed50
 8001710:	0800ed60 	.word	0x0800ed60

08001714 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001724:	d101      	bne.n	800172a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001726:	f001 f8eb 	bl	8002900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001736:	b672      	cpsid	i
}
 8001738:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800173a:	bf00      	nop
 800173c:	e7fd      	b.n	800173a <Error_Handler+0x8>
	...

08001740 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001744:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <MX_SPI1_Init+0x74>)
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <MX_SPI1_Init+0x78>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <MX_SPI1_Init+0x74>)
 800174c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001752:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <MX_SPI1_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001758:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <MX_SPI1_Init+0x74>)
 800175a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800175e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_SPI1_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <MX_SPI1_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <MX_SPI1_Init+0x74>)
 800176e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001772:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <MX_SPI1_Init+0x74>)
 8001776:	2228      	movs	r2, #40	@ 0x28
 8001778:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <MX_SPI1_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_SPI1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <MX_SPI1_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <MX_SPI1_Init+0x74>)
 800178e:	2207      	movs	r2, #7
 8001790:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <MX_SPI1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <MX_SPI1_Init+0x74>)
 800179a:	2208      	movs	r2, #8
 800179c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_SPI1_Init+0x74>)
 80017a0:	f004 f9f0 	bl	8005b84 <HAL_SPI_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f7ff ffc2 	bl	8001732 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200002e0 	.word	0x200002e0
 80017b8:	40013000 	.word	0x40013000

080017bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001848 <HAL_SPI_MspInit+0x8c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d130      	bne.n	8001840 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017de:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <HAL_SPI_MspInit+0x90>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e2:	4a1a      	ldr	r2, [pc, #104]	@ (800184c <HAL_SPI_MspInit+0x90>)
 80017e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ea:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_SPI_MspInit+0x90>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_SPI_MspInit+0x90>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	4a14      	ldr	r2, [pc, #80]	@ (800184c <HAL_SPI_MspInit+0x90>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001802:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_SPI_MspInit+0x90>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23e0      	movs	r3, #224	@ 0xe0
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181e:	2305      	movs	r3, #5
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182c:	f003 f810 	bl	8004850 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2105      	movs	r1, #5
 8001834:	2023      	movs	r0, #35	@ 0x23
 8001836:	f002 fd69 	bl	800430c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800183a:	2023      	movs	r0, #35	@ 0x23
 800183c:	f002 fd80 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	@ 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013000 	.word	0x40013000
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_MspInit+0x50>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185a:	4a11      	ldr	r2, [pc, #68]	@ (80018a0 <HAL_MspInit+0x50>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6613      	str	r3, [r2, #96]	@ 0x60
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <HAL_MspInit+0x50>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <HAL_MspInit+0x50>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001872:	4a0b      	ldr	r2, [pc, #44]	@ (80018a0 <HAL_MspInit+0x50>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	6593      	str	r3, [r2, #88]	@ 0x58
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_MspInit+0x50>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	210f      	movs	r1, #15
 800188a:	f06f 0001 	mvn.w	r0, #1
 800188e:	f002 fd3d 	bl	800430c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001892:	f003 fa1b 	bl	8004ccc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	@ 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_InitTick+0xc8>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b8:	4a2c      	ldr	r2, [pc, #176]	@ (800196c <HAL_InitTick+0xc8>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c0:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <HAL_InitTick+0xc8>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018cc:	f107 020c 	add.w	r2, r7, #12
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 feee 	bl	80056b8 <HAL_RCC_GetClockConfig>
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018dc:	f003 fec0 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 80018e0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e4:	4a22      	ldr	r2, [pc, #136]	@ (8001970 <HAL_InitTick+0xcc>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0c9b      	lsrs	r3, r3, #18
 80018ec:	3b01      	subs	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_InitTick+0xd0>)
 80018f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80018f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <HAL_InitTick+0xd0>)
 80018fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018fe:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001900:	4a1c      	ldr	r2, [pc, #112]	@ (8001974 <HAL_InitTick+0xd0>)
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001906:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <HAL_InitTick+0xd0>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_InitTick+0xd0>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8001912:	4818      	ldr	r0, [pc, #96]	@ (8001974 <HAL_InitTick+0xd0>)
 8001914:	f004 faf5 	bl	8005f02 <HAL_TIM_Base_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800191e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001922:	2b00      	cmp	r3, #0
 8001924:	d11b      	bne.n	800195e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001926:	4813      	ldr	r0, [pc, #76]	@ (8001974 <HAL_InitTick+0xd0>)
 8001928:	f004 fb42 	bl	8005fb0 <HAL_TIM_Base_Start_IT>
 800192c:	4603      	mov	r3, r0
 800192e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001936:	2b00      	cmp	r3, #0
 8001938:	d111      	bne.n	800195e <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193a:	201c      	movs	r0, #28
 800193c:	f002 fd00 	bl	8004340 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b0f      	cmp	r3, #15
 8001944:	d808      	bhi.n	8001958 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001946:	2200      	movs	r2, #0
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	201c      	movs	r0, #28
 800194c:	f002 fcde 	bl	800430c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001950:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <HAL_InitTick+0xd4>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e002      	b.n	800195e <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800195e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001962:	4618      	mov	r0, r3
 8001964:	3730      	adds	r7, #48	@ 0x30
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	431bde83 	.word	0x431bde83
 8001974:	20000344 	.word	0x20000344
 8001978:	20000004 	.word	0x20000004

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <NMI_Handler+0x4>

08001984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <MemManage_Handler+0x4>

08001994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <DMA1_Channel1_IRQHandler+0x10>)
 80019ba:	f002 fe37 	bl	800462c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200005a0 	.word	0x200005a0

080019c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <TIM2_IRQHandler+0x10>)
 80019ce:	f004 fdf7 	bl	80065c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000344 	.word	0x20000344

080019dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <SPI1_IRQHandler+0x10>)
 80019e2:	f004 f97b 	bl	8005cdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200002e0 	.word	0x200002e0

080019f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <USART2_IRQHandler+0x10>)
 80019f6:	f006 f927 	bl	8007c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000050c 	.word	0x2000050c

08001a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return 1;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_kill>:

int _kill(int pid, int sig)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a1e:	f009 fdcf 	bl	800b5c0 <__errno>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2216      	movs	r2, #22
 8001a26:	601a      	str	r2, [r3, #0]
  return -1;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_exit>:

void _exit (int status)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffe7 	bl	8001a14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a46:	bf00      	nop
 8001a48:	e7fd      	b.n	8001a46 <_exit+0x12>

08001a4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e00a      	b.n	8001a72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a5c:	f3af 8000 	nop.w
 8001a60:	4601      	mov	r1, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	60ba      	str	r2, [r7, #8]
 8001a68:	b2ca      	uxtb	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbf0      	blt.n	8001a5c <_read+0x12>
  }

  return len;
 8001a7a:	687b      	ldr	r3, [r7, #4]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e009      	b.n	8001aaa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60ba      	str	r2, [r7, #8]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fc98 	bl	80013d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbf1      	blt.n	8001a96 <_write+0x12>
  }
  return len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_close>:

int _close(int file)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_isatty>:

int _isatty(int file)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001afc:	2301      	movs	r3, #1
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b40:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d207      	bcs.n	8001b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b54:	f009 fd34 	bl	800b5c0 <__errno>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <_sbrk+0x64>)
 8001b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20008000 	.word	0x20008000
 8001b84:	00000400 	.word	0x00000400
 8001b88:	20000390 	.word	0x20000390
 8001b8c:	200030a8 	.word	0x200030a8

08001b90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <SystemInit+0x20>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9a:	4a05      	ldr	r2, [pc, #20]	@ (8001bb0 <SystemInit+0x20>)
 8001b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b09c      	sub	sp, #112	@ 0x70
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	2234      	movs	r2, #52	@ 0x34
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f009 fc3e 	bl	800b470 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bf4:	4b51      	ldr	r3, [pc, #324]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001bf6:	4a52      	ldr	r2, [pc, #328]	@ (8001d40 <MX_TIM1_Init+0x18c>)
 8001bf8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bfa:	4b50      	ldr	r3, [pc, #320]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b4e      	ldr	r3, [pc, #312]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c06:	4b4d      	ldr	r3, [pc, #308]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001c08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c14:	4b49      	ldr	r3, [pc, #292]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1a:	4b48      	ldr	r3, [pc, #288]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c20:	4846      	ldr	r0, [pc, #280]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001c22:	f004 f96e 	bl	8005f02 <HAL_TIM_Base_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c2c:	f7ff fd81 	bl	8001732 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c34:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	483f      	ldr	r0, [pc, #252]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001c3e:	f004 ff23 	bl	8006a88 <HAL_TIM_ConfigClockSource>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c48:	f7ff fd73 	bl	8001732 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c4c:	483b      	ldr	r0, [pc, #236]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001c4e:	f004 fa19 	bl	8006084 <HAL_TIM_PWM_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c58:	f7ff fd6b 	bl	8001732 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4833      	ldr	r0, [pc, #204]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001c70:	f005 fd92 	bl	8007798 <HAL_TIMEx_MasterConfigSynchronization>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c7a:	f7ff fd5a 	bl	8001732 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7e:	2360      	movs	r3, #96	@ 0x60
 8001c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c86:	2300      	movs	r3, #0
 8001c88:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4826      	ldr	r0, [pc, #152]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001ca4:	f004 fddc 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001cae:	f7ff fd40 	bl	8001732 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4820      	ldr	r0, [pc, #128]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001cbc:	f004 fdd0 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001cc6:	f7ff fd34 	bl	8001732 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cce:	2208      	movs	r2, #8
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481a      	ldr	r0, [pc, #104]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001cd4:	f004 fdc4 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001cde:	f7ff fd28 	bl	8001732 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cfa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d12:	2300      	movs	r3, #0
 8001d14:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4807      	ldr	r0, [pc, #28]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001d20:	f005 fdbc 	bl	800789c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001d2a:	f7ff fd02 	bl	8001732 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d2e:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <MX_TIM1_Init+0x188>)
 8001d30:	f000 f94a 	bl	8001fc8 <HAL_TIM_MspPostInit>

}
 8001d34:	bf00      	nop
 8001d36:	3770      	adds	r7, #112	@ 0x70
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000394 	.word	0x20000394
 8001d40:	40012c00 	.word	0x40012c00

08001d44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	@ 0x30
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2224      	movs	r2, #36	@ 0x24
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f009 fb8c 	bl	800b470 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	463b      	mov	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <MX_TIM3_Init+0xa4>)
 8001d64:	4a21      	ldr	r2, [pc, #132]	@ (8001dec <MX_TIM3_Init+0xa8>)
 8001d66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	@ (8001de8 <MX_TIM3_Init+0xa4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_TIM3_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <MX_TIM3_Init+0xa4>)
 8001d76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <MX_TIM3_Init+0xa4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d82:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <MX_TIM3_Init+0xa4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d90:	2301      	movs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001da0:	2301      	movs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4619      	mov	r1, r3
 8001db2:	480d      	ldr	r0, [pc, #52]	@ (8001de8 <MX_TIM3_Init+0xa4>)
 8001db4:	f004 fb5e 	bl	8006474 <HAL_TIM_Encoder_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001dbe:	f7ff fcb8 	bl	8001732 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dca:	463b      	mov	r3, r7
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <MX_TIM3_Init+0xa4>)
 8001dd0:	f005 fce2 	bl	8007798 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001dda:	f7ff fcaa 	bl	8001732 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3730      	adds	r7, #48	@ 0x30
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200003e0 	.word	0x200003e0
 8001dec:	40000400 	.word	0x40000400

08001df0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	@ 0x30
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	2224      	movs	r2, #36	@ 0x24
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f009 fb36 	bl	800b470 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e04:	463b      	mov	r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <MX_TIM4_Init+0xa4>)
 8001e10:	4a21      	ldr	r2, [pc, #132]	@ (8001e98 <MX_TIM4_Init+0xa8>)
 8001e12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <MX_TIM4_Init+0xa4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <MX_TIM4_Init+0xa4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e20:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <MX_TIM4_Init+0xa4>)
 8001e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <MX_TIM4_Init+0xa4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <MX_TIM4_Init+0xa4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480d      	ldr	r0, [pc, #52]	@ (8001e94 <MX_TIM4_Init+0xa4>)
 8001e60:	f004 fb08 	bl	8006474 <HAL_TIM_Encoder_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001e6a:	f7ff fc62 	bl	8001732 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e76:	463b      	mov	r3, r7
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4806      	ldr	r0, [pc, #24]	@ (8001e94 <MX_TIM4_Init+0xa4>)
 8001e7c:	f005 fc8c 	bl	8007798 <HAL_TIMEx_MasterConfigSynchronization>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e86:	f7ff fc54 	bl	8001732 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	3730      	adds	r7, #48	@ 0x30
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000042c 	.word	0x2000042c
 8001e98:	40000800 	.word	0x40000800

08001e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <HAL_TIM_Base_MspInit+0x38>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d10b      	bne.n	8001ec6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x3c>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb2:	4a09      	ldr	r2, [pc, #36]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x3c>)
 8001eb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001eb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40012c00 	.word	0x40012c00
 8001ed8:	40021000 	.word	0x40021000

08001edc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	@ 0x30
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d128      	bne.n	8001f50 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001efe:	4b2f      	ldr	r3, [pc, #188]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f02:	4a2e      	ldr	r2, [pc, #184]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b29      	ldr	r3, [pc, #164]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	4a28      	ldr	r2, [pc, #160]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f22:	4b26      	ldr	r3, [pc, #152]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f2e:	2330      	movs	r3, #48	@ 0x30
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	481d      	ldr	r0, [pc, #116]	@ (8001fc0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001f4a:	f002 fc81 	bl	8004850 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f4e:	e02e      	b.n	8001fae <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d129      	bne.n	8001fae <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f5a:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	4a17      	ldr	r2, [pc, #92]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f66:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	4a11      	ldr	r2, [pc, #68]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001f9c:	230a      	movs	r3, #10
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001faa:	f002 fc51 	bl	8004850 <HAL_GPIO_Init>
}
 8001fae:	bf00      	nop
 8001fb0:	3730      	adds	r7, #48	@ 0x30
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	48000400 	.word	0x48000400
 8001fc4:	40000800 	.word	0x40000800

08001fc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a20      	ldr	r2, [pc, #128]	@ (8002068 <HAL_TIM_MspPostInit+0xa0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d13a      	bne.n	8002060 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <HAL_TIM_MspPostInit+0xa4>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <HAL_TIM_MspPostInit+0xa4>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <HAL_TIM_MspPostInit+0xa4>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HAL_TIM_MspPostInit+0xa4>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_TIM_MspPostInit+0xa4>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200e:	4b17      	ldr	r3, [pc, #92]	@ (800206c <HAL_TIM_MspPostInit+0xa4>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800201a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800202c:	2306      	movs	r3, #6
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	480e      	ldr	r0, [pc, #56]	@ (8002070 <HAL_TIM_MspPostInit+0xa8>)
 8002038:	f002 fc0a 	bl	8004850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800203c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800204e:	2306      	movs	r3, #6
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800205c:	f002 fbf8 	bl	8004850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002060:	bf00      	nop
 8002062:	3728      	adds	r7, #40	@ 0x28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40021000 	.word	0x40021000
 8002070:	48000400 	.word	0x48000400

08002074 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002078:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 800207a:	4a23      	ldr	r2, [pc, #140]	@ (8002108 <MX_USART1_UART_Init+0x94>)
 800207c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800207e:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 8002080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002084:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002086:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800208c:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002092:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002098:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 800209a:	220c      	movs	r2, #12
 800209c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a4:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020aa:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b0:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b6:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020bc:	4811      	ldr	r0, [pc, #68]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 80020be:	f005 fce4 	bl	8007a8a <HAL_UART_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80020c8:	f7ff fb33 	bl	8001732 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020cc:	2100      	movs	r1, #0
 80020ce:	480d      	ldr	r0, [pc, #52]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 80020d0:	f006 fea3 	bl	8008e1a <HAL_UARTEx_SetTxFifoThreshold>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020da:	f7ff fb2a 	bl	8001732 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020de:	2100      	movs	r1, #0
 80020e0:	4808      	ldr	r0, [pc, #32]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 80020e2:	f006 fed8 	bl	8008e96 <HAL_UARTEx_SetRxFifoThreshold>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020ec:	f7ff fb21 	bl	8001732 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020f0:	4804      	ldr	r0, [pc, #16]	@ (8002104 <MX_USART1_UART_Init+0x90>)
 80020f2:	f006 fe59 	bl	8008da8 <HAL_UARTEx_DisableFifoMode>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020fc:	f7ff fb19 	bl	8001732 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000478 	.word	0x20000478
 8002108:	40013800 	.word	0x40013800

0800210c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002110:	4b22      	ldr	r3, [pc, #136]	@ (800219c <MX_USART2_UART_Init+0x90>)
 8002112:	4a23      	ldr	r2, [pc, #140]	@ (80021a0 <MX_USART2_UART_Init+0x94>)
 8002114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002116:	4b21      	ldr	r3, [pc, #132]	@ (800219c <MX_USART2_UART_Init+0x90>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <MX_USART2_UART_Init+0x90>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <MX_USART2_UART_Init+0x90>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800212a:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <MX_USART2_UART_Init+0x90>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8002130:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <MX_USART2_UART_Init+0x90>)
 8002132:	2204      	movs	r2, #4
 8002134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b19      	ldr	r3, [pc, #100]	@ (800219c <MX_USART2_UART_Init+0x90>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b17      	ldr	r3, [pc, #92]	@ (800219c <MX_USART2_UART_Init+0x90>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002142:	4b16      	ldr	r3, [pc, #88]	@ (800219c <MX_USART2_UART_Init+0x90>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <MX_USART2_UART_Init+0x90>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214e:	4b13      	ldr	r3, [pc, #76]	@ (800219c <MX_USART2_UART_Init+0x90>)
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002154:	4811      	ldr	r0, [pc, #68]	@ (800219c <MX_USART2_UART_Init+0x90>)
 8002156:	f005 fc98 	bl	8007a8a <HAL_UART_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002160:	f7ff fae7 	bl	8001732 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002164:	2100      	movs	r1, #0
 8002166:	480d      	ldr	r0, [pc, #52]	@ (800219c <MX_USART2_UART_Init+0x90>)
 8002168:	f006 fe57 	bl	8008e1a <HAL_UARTEx_SetTxFifoThreshold>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002172:	f7ff fade 	bl	8001732 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002176:	2100      	movs	r1, #0
 8002178:	4808      	ldr	r0, [pc, #32]	@ (800219c <MX_USART2_UART_Init+0x90>)
 800217a:	f006 fe8c 	bl	8008e96 <HAL_UARTEx_SetRxFifoThreshold>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002184:	f7ff fad5 	bl	8001732 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002188:	4804      	ldr	r0, [pc, #16]	@ (800219c <MX_USART2_UART_Init+0x90>)
 800218a:	f006 fe0d 	bl	8008da8 <HAL_UARTEx_DisableFifoMode>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002194:	f7ff facd 	bl	8001732 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000050c 	.word	0x2000050c
 80021a0:	40004400 	.word	0x40004400

080021a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b09e      	sub	sp, #120	@ 0x78
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021bc:	f107 0320 	add.w	r3, r7, #32
 80021c0:	2244      	movs	r2, #68	@ 0x44
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f009 f953 	bl	800b470 <memset>
  if(uartHandle->Instance==USART1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a65      	ldr	r2, [pc, #404]	@ (8002364 <HAL_UART_MspInit+0x1c0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d136      	bne.n	8002242 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d4:	2301      	movs	r3, #1
 80021d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021dc:	f107 0320 	add.w	r3, r7, #32
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fadf 	bl	80057a4 <HAL_RCCEx_PeriphCLKConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021ec:	f7ff faa1 	bl	8001732 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 80021f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f4:	4a5c      	ldr	r2, [pc, #368]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 80021f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80021fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 80021fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002208:	4b57      	ldr	r3, [pc, #348]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220c:	4a56      	ldr	r2, [pc, #344]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002214:	4b54      	ldr	r3, [pc, #336]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 8002216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002220:	23c0      	movs	r3, #192	@ 0xc0
 8002222:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002230:	2307      	movs	r3, #7
 8002232:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002238:	4619      	mov	r1, r3
 800223a:	484c      	ldr	r0, [pc, #304]	@ (800236c <HAL_UART_MspInit+0x1c8>)
 800223c:	f002 fb08 	bl	8004850 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002240:	e08c      	b.n	800235c <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a4a      	ldr	r2, [pc, #296]	@ (8002370 <HAL_UART_MspInit+0x1cc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	f040 8087 	bne.w	800235c <HAL_UART_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800224e:	2302      	movs	r3, #2
 8002250:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002252:	2300      	movs	r3, #0
 8002254:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002256:	f107 0320 	add.w	r3, r7, #32
 800225a:	4618      	mov	r0, r3
 800225c:	f003 faa2 	bl	80057a4 <HAL_RCCEx_PeriphCLKConfig>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002266:	f7ff fa64 	bl	8001732 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800226a:	4b3f      	ldr	r3, [pc, #252]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	4a3e      	ldr	r2, [pc, #248]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 8002270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002274:	6593      	str	r3, [r2, #88]	@ 0x58
 8002276:	4b3c      	ldr	r3, [pc, #240]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	4b39      	ldr	r3, [pc, #228]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	4a38      	ldr	r2, [pc, #224]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800228e:	4b36      	ldr	r3, [pc, #216]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	4b33      	ldr	r3, [pc, #204]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	4a32      	ldr	r2, [pc, #200]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a6:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_UART_MspInit+0x1c4>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 80022b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c4:	2307      	movs	r3, #7
 80022c6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022cc:	4619      	mov	r1, r3
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022d2:	f002 fabd 	bl	8004850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 80022d6:	2308      	movs	r3, #8
 80022d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e6:	2307      	movs	r3, #7
 80022e8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022ee:	4619      	mov	r1, r3
 80022f0:	481e      	ldr	r0, [pc, #120]	@ (800236c <HAL_UART_MspInit+0x1c8>)
 80022f2:	f002 faad 	bl	8004850 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80022f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 80022f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <HAL_UART_MspInit+0x1d4>)
 80022fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 80022fe:	221a      	movs	r2, #26
 8002300:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002302:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002308:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800230e:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002314:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 8002316:	2200      	movs	r2, #0
 8002318:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800231a:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002320:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 8002322:	2220      	movs	r2, #32
 8002324:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002326:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 8002328:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800232c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800232e:	4811      	ldr	r0, [pc, #68]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 8002330:	f002 f814 	bl	800435c <HAL_DMA_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_UART_MspInit+0x19a>
      Error_Handler();
 800233a:	f7ff f9fa 	bl	8001732 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0c      	ldr	r2, [pc, #48]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 8002342:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002346:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <HAL_UART_MspInit+0x1d0>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2105      	movs	r1, #5
 8002350:	2026      	movs	r0, #38	@ 0x26
 8002352:	f001 ffdb 	bl	800430c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002356:	2026      	movs	r0, #38	@ 0x26
 8002358:	f001 fff2 	bl	8004340 <HAL_NVIC_EnableIRQ>
}
 800235c:	bf00      	nop
 800235e:	3778      	adds	r7, #120	@ 0x78
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40013800 	.word	0x40013800
 8002368:	40021000 	.word	0x40021000
 800236c:	48000400 	.word	0x48000400
 8002370:	40004400 	.word	0x40004400
 8002374:	200005a0 	.word	0x200005a0
 8002378:	40020008 	.word	0x40020008

0800237c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800237c:	480d      	ldr	r0, [pc, #52]	@ (80023b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800237e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002380:	f7ff fc06 	bl	8001b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002384:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002386:	490d      	ldr	r1, [pc, #52]	@ (80023bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002388:	4a0d      	ldr	r2, [pc, #52]	@ (80023c0 <LoopForever+0xe>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800239c:	4c0a      	ldr	r4, [pc, #40]	@ (80023c8 <LoopForever+0x16>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80023aa:	f009 f90f 	bl	800b5cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ae:	f7ff f8c5 	bl	800153c <main>

080023b2 <LoopForever>:

LoopForever:
    b LoopForever
 80023b2:	e7fe      	b.n	80023b2 <LoopForever>
  ldr   r0, =_estack
 80023b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023bc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80023c0:	0800f1f8 	.word	0x0800f1f8
  ldr r2, =_sbss
 80023c4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80023c8:	200030a4 	.word	0x200030a4

080023cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC1_2_IRQHandler>
	...

080023d0 <GP2Y0A41SK0F_Init>:

/**
 * @brief Initialize the GP2Y0A41SK0F sensors.
 * @param htof Pointer to the GP2Y0A41SK0F handle structure.
 */
void GP2Y0A41SK0F_Init(h_GP2Y0A41SK0F_t * htof) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	// The ADC used is wired on the board so it's ADC1
	htof->hadc = &hadc1;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a11      	ldr	r2, [pc, #68]	@ (8002420 <GP2Y0A41SK0F_Init+0x50>)
 80023dc:	601a      	str	r2, [r3, #0]

	if (HAL_ADC_Init(htof->hadc) != HAL_OK) {
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fd24 	bl	8002e30 <HAL_ADC_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <GP2Y0A41SK0F_Init+0x22>
		Error_Handler();
 80023ee:	f7ff f9a0 	bl	8001732 <Error_Handler>
	}

	// Channel Config ADC ToF1
	htof->cConfig_tof1.Channel = ADC_CHANNEL_3;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002424 <GP2Y0A41SK0F_Init+0x54>)
 80023f6:	605a      	str	r2, [r3, #4]
	htof->cConfig_tof1.Rank = ADC_REGULAR_RANK_1;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2206      	movs	r2, #6
 80023fc:	609a      	str	r2, [r3, #8]
	htof->cConfig_tof1.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2204      	movs	r2, #4
 8002402:	60da      	str	r2, [r3, #12]

	// Channel Config ADC ToF2
	htof->cConfig_tof2.Channel = ADC_CHANNEL_1;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <GP2Y0A41SK0F_Init+0x58>)
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24
	htof->cConfig_tof2.Rank = ADC_REGULAR_RANK_1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2206      	movs	r2, #6
 800240e:	629a      	str	r2, [r3, #40]	@ 0x28
	htof->cConfig_tof2.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2204      	movs	r2, #4
 8002414:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200001f4 	.word	0x200001f4
 8002424:	0c900008 	.word	0x0c900008
 8002428:	04300002 	.word	0x04300002

0800242c <GP2Y0A41SK0F_Read_ToF1>:
/**
 * @brief Read raw ADC value from ToF sensor 1.
 * @param htof Pointer to the GP2Y0A41SK0F handle structure.
 */
void GP2Y0A41SK0F_Read_ToF1(h_GP2Y0A41SK0F_t * htof)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_ConfigChannel(htof->hadc, &htof->cConfig_tof1) != HAL_OK) {
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f001 f850 	bl	80034e4 <HAL_ADC_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <GP2Y0A41SK0F_Read_ToF1+0x22>
		Error_Handler();
 800244a:	f7ff f972 	bl	8001732 <Error_Handler>
	}

	HAL_ADC_Start(htof->hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fe70 	bl	8003138 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(htof->hadc, HAL_MAX_DELAY) != HAL_OK) {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002460:	4618      	mov	r0, r3
 8002462:	f000 ff59 	bl	8003318 <HAL_ADC_PollForConversion>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <GP2Y0A41SK0F_Read_ToF1+0x44>
		Error_Handler();
 800246c:	f7ff f961 	bl	8001732 <Error_Handler>
	}

	htof->adc_val_tof1 = HAL_ADC_GetValue(htof->hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f001 f827 	bl	80034c8 <HAL_ADC_GetValue>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	645a      	str	r2, [r3, #68]	@ 0x44
	HAL_ADC_Stop(htof->hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 ff13 	bl	80032b0 <HAL_ADC_Stop>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <GP2Y0A41SK0F_Read_ToF2>:

/**
 * @brief Read raw ADC value from ToF sensor 2.
 * @param htof Pointer to the GP2Y0A41SK0F handle structure.
 */
void GP2Y0A41SK0F_Read_ToF2(h_GP2Y0A41SK0F_t * htof) {
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_ConfigChannel(htof->hadc, &htof->cConfig_tof2) != HAL_OK) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3324      	adds	r3, #36	@ 0x24
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f001 f81d 	bl	80034e4 <HAL_ADC_ConfigChannel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <GP2Y0A41SK0F_Read_ToF2+0x22>
		Error_Handler();
 80024b0:	f7ff f93f 	bl	8001732 <Error_Handler>
	}
	HAL_ADC_Start(htof->hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fe3d 	bl	8003138 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(htof->hadc, HAL_MAX_DELAY) != HAL_OK) {
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 ff26 	bl	8003318 <HAL_ADC_PollForConversion>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <GP2Y0A41SK0F_Read_ToF2+0x44>
		Error_Handler();
 80024d2:	f7ff f92e 	bl	8001732 <Error_Handler>
	}

	htof->adc_val_tof2 = HAL_ADC_GetValue(htof->hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fff4 	bl	80034c8 <HAL_ADC_GetValue>
 80024e0:	4602      	mov	r2, r0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	649a      	str	r2, [r3, #72]	@ 0x48
	HAL_ADC_Stop(htof->hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fee0 	bl	80032b0 <HAL_ADC_Stop>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <GP2Y0A41SK0F_get_distance>:
 * 	- it ranges from 35 mm to 400 mm
 * @wource:
 * 	- https://github.com/sharpsensoruser/sharp-sensor-demos/blob/master/sharp_gp2y0a41sk0f_demo/sharp_gp2y0a41sk0f_demo.ino
 */
void GP2Y0A41SK0F_get_distance(h_GP2Y0A41SK0F_t * htof)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	// Convert to Distance in units of mm
	// by approximating datasheet graph
	// using equation of form: y = a/x + b
	// and two (x,y) points on the graph:
	// (35mm, 3V) and (400mm, 0.3V)
	const float a = 120;
 8002500:	4b3f      	ldr	r3, [pc, #252]	@ (8002600 <GP2Y0A41SK0F_get_distance+0x108>)
 8002502:	617b      	str	r3, [r7, #20]
	const float b = 0.03;
 8002504:	4b3f      	ldr	r3, [pc, #252]	@ (8002604 <GP2Y0A41SK0F_get_distance+0x10c>)
 8002506:	613b      	str	r3, [r7, #16]
	float Vo = 0;
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]

	GP2Y0A41SK0F_Read_ToF1(htof);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff8c 	bl	800242c <GP2Y0A41SK0F_Read_ToF1>
	GP2Y0A41SK0F_Read_ToF2(htof);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ffbc 	bl	8002492 <GP2Y0A41SK0F_Read_ToF2>

	Vo = (GP2Y0A41SK0F_ADC_VCC * htof->adc_val_tof1) / GP2Y0A41SK0F_ADC_MAX_VALUE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f818 	bl	8000554 <__aeabi_ui2d>
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	4b37      	ldr	r3, [pc, #220]	@ (8002608 <GP2Y0A41SK0F_get_distance+0x110>)
 800252a:	f7fe f88d 	bl	8000648 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	a330      	add	r3, pc, #192	@ (adr r3, 80025f8 <GP2Y0A41SK0F_get_distance+0x100>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f9ae 	bl	800089c <__aeabi_ddiv>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fb76 	bl	8000c38 <__aeabi_d2f>
 800254c:	4603      	mov	r3, r0
 800254e:	60fb      	str	r3, [r7, #12]

	if ( Vo > b ) {
 8002550:	ed97 7a03 	vldr	s14, [r7, #12]
 8002554:	edd7 7a04 	vldr	s15, [r7, #16]
 8002558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002560:	dd0f      	ble.n	8002582 <GP2Y0A41SK0F_get_distance+0x8a>
		// Distance measured by ToF1 in mm
		htof->distance_tof1 = (int)( a / (Vo - b) );
 8002562:	ed97 7a03 	vldr	s14, [r7, #12]
 8002566:	edd7 7a04 	vldr	s15, [r7, #16]
 800256a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800256e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800257a:	ee17 2a90 	vmov	r2, s15
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	64da      	str	r2, [r3, #76]	@ 0x4c
	}

	Vo = (5.0 * htof->adc_val_tof2) / GP2Y0A41SK0F_ADC_MAX_VALUE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ffe4 	bl	8000554 <__aeabi_ui2d>
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <GP2Y0A41SK0F_get_distance+0x110>)
 8002592:	f7fe f859 	bl	8000648 <__aeabi_dmul>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	a316      	add	r3, pc, #88	@ (adr r3, 80025f8 <GP2Y0A41SK0F_get_distance+0x100>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe f97a 	bl	800089c <__aeabi_ddiv>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe fb42 	bl	8000c38 <__aeabi_d2f>
 80025b4:	4603      	mov	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]

	if ( Vo > b ) {
 80025b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80025bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	dc00      	bgt.n	80025cc <GP2Y0A41SK0F_get_distance+0xd4>
		// Distance measured by ToF2 in mm
		htof->distance_tof2 = (int)( a / (Vo - b) );
	}
}
 80025ca:	e00f      	b.n	80025ec <GP2Y0A41SK0F_get_distance+0xf4>
		htof->distance_tof2 = (int)( a / (Vo - b) );
 80025cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80025d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80025dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e4:	ee17 2a90 	vmov	r2, s15
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80025ec:	bf00      	nop
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	f3af 8000 	nop.w
 80025f8:	00000000 	.word	0x00000000
 80025fc:	40affe00 	.word	0x40affe00
 8002600:	42f00000 	.word	0x42f00000
 8002604:	3cf5c28f 	.word	0x3cf5c28f
 8002608:	40140000 	.word	0x40140000

0800260c <Motor_Init>:
/**
 * @brief Initialize the motors.
 * @param hMotors Pointer to the motor handle structure.
 * @param htim Pointer to the timer handle used for PWM control.
 */
void Motor_Init(h_Motor_t * hMotors, TIM_HandleTypeDef * htim) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
	// Allows to get direct parameters from the timer used
	hMotors->htim = htim;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	61da      	str	r2, [r3, #28]
	hMotors->speed_increase_rate1 = 50;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2232      	movs	r2, #50	@ 0x32
 8002620:	615a      	str	r2, [r3, #20]
	hMotors->speed_increase_rate2 = 50;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2232      	movs	r2, #50	@ 0x32
 8002626:	619a      	str	r2, [r3, #24]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002628:	4b1f      	ldr	r3, [pc, #124]	@ (80026a8 <Motor_Init+0x9c>)
 800262a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262c:	4a1e      	ldr	r2, [pc, #120]	@ (80026a8 <Motor_Init+0x9c>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002634:	4b1c      	ldr	r3, [pc, #112]	@ (80026a8 <Motor_Init+0x9c>)
 8002636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <Motor_Init+0x9c>)
 8002642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002644:	4a18      	ldr	r2, [pc, #96]	@ (80026a8 <Motor_Init+0x9c>)
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800264c:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <Motor_Init+0x9c>)
 800264e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]

	MX_TIM1_Init();
 8002658:	f7ff faac 	bl	8001bb4 <MX_TIM1_Init>
	//MX_TIM2_Init();

	HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f003 fd70 	bl	8006148 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2104      	movs	r1, #4
 800266e:	4618      	mov	r0, r3
 8002670:	f003 fd6a 	bl	8006148 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f004 ff7a 	bl	8007574 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_2);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2104      	movs	r1, #4
 8002686:	4618      	mov	r0, r3
 8002688:	f004 ff74 	bl	8007574 <HAL_TIMEx_PWMN_Start>

	hMotors->mode_mot1 = STANDBY_MODE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
	hMotors->mode_mot2 = STANDBY_MODE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	705a      	strb	r2, [r3, #1]
	Motor_SetMode(hMotors);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f807 	bl	80026ac <Motor_SetMode>
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000

080026ac <Motor_SetMode>:
/**
 * @brief Set the operating mode of the motors.
 * @param hMotors Pointer to the motor handle structure.
 */
void Motor_SetMode(h_Motor_t * hMotors)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	switch (hMotors->mode_mot1) {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d002      	beq.n	80026c2 <Motor_SetMode+0x16>
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d00d      	beq.n	80026dc <Motor_SetMode+0x30>
 80026c0:	e019      	b.n	80026f6 <Motor_SetMode+0x4a>
	case FORWARD_MODE:
		DEBUG_PRINT("Mot1: FORWARD_MODE\r\n");
		HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 fd3d 	bl	8006148 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f005 f801 	bl	80076dc <HAL_TIMEx_PWMN_Stop>
		break;
 80026da:	e01e      	b.n	800271a <Motor_SetMode+0x6e>

	case REVERSE_MODE:
		DEBUG_PRINT("Mot1: REVERSE_MODE\r\n");
		HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 ff46 	bl	8007574 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_1);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 fe2a 	bl	8006348 <HAL_TIM_PWM_Stop>
		break;
 80026f4:	e011      	b.n	800271a <Motor_SetMode+0x6e>

	case STANDBY_MODE:
	default:
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_1);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 ffed 	bl	80076dc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f003 fe1d 	bl	8006348 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_1, 0);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2200      	movs	r2, #0
 8002716:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8002718:	bf00      	nop
	}

	switch (hMotors->mode_mot2) {
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d002      	beq.n	8002728 <Motor_SetMode+0x7c>
 8002722:	2b02      	cmp	r3, #2
 8002724:	d00d      	beq.n	8002742 <Motor_SetMode+0x96>
 8002726:	e019      	b.n	800275c <Motor_SetMode+0xb0>
	case FORWARD_MODE:
		DEBUG_PRINT("Mot2: FORWARD_MODE\r\n");
		HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2104      	movs	r1, #4
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fd0a 	bl	8006148 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2104      	movs	r1, #4
 800273a:	4618      	mov	r0, r3
 800273c:	f004 ffce 	bl	80076dc <HAL_TIMEx_PWMN_Stop>
		break;
 8002740:	e01e      	b.n	8002780 <Motor_SetMode+0xd4>

	case REVERSE_MODE:
		DEBUG_PRINT("Mot2: REVERSE_MODE\r\n");
		HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_2);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	2104      	movs	r1, #4
 8002748:	4618      	mov	r0, r3
 800274a:	f004 ff13 	bl	8007574 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_2);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	2104      	movs	r1, #4
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fdf7 	bl	8006348 <HAL_TIM_PWM_Stop>
		break;
 800275a:	e011      	b.n	8002780 <Motor_SetMode+0xd4>

	case STANDBY_MODE:
	default:
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_2);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2104      	movs	r1, #4
 8002762:	4618      	mov	r0, r3
 8002764:	f004 ffba 	bl	80076dc <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2104      	movs	r1, #4
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fdea 	bl	8006348 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_2, 0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 800277e:	bf00      	nop
	}
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <Motor_SetSpeed_percent>:
 * @brief Set the speed of the motors as a percentage of maximum speed.
 * @param hMotor Pointer to the motor handle structure.
 * @param percent1 Speed percentage for motor 1 (0.0 to 100.0).
 * @param percent2 Speed percentage for motor 2 (0.0 to 100.0).
 */
void Motor_SetSpeed_percent(h_Motor_t * hMotor, float percent1, float percent2) {
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	ed87 0a02 	vstr	s0, [r7, #8]
 8002794:	edc7 0a01 	vstr	s1, [r7, #4]
	hMotor->speed1 = (int)(MOTOR1_REV_DIFF * hMotor->htim->Init.Period * percent1/100.0);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fed8 	bl	8000554 <__aeabi_ui2d>
 80027a4:	a323      	add	r3, pc, #140	@ (adr r3, 8002834 <Motor_SetSpeed_percent+0xac>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fd ff4d 	bl	8000648 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4614      	mov	r4, r2
 80027b4:	461d      	mov	r5, r3
 80027b6:	68b8      	ldr	r0, [r7, #8]
 80027b8:	f7fd feee 	bl	8000598 <__aeabi_f2d>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4620      	mov	r0, r4
 80027c2:	4629      	mov	r1, r5
 80027c4:	f7fd ff40 	bl	8000648 <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <Motor_SetSpeed_percent+0xa8>)
 80027d6:	f7fe f861 	bl	800089c <__aeabi_ddiv>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7fe f9e1 	bl	8000ba8 <__aeabi_d2iz>
 80027e6:	4602      	mov	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
	hMotor->speed2 = (int)(hMotor->htim->Init.Period * percent2/100.0);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80027fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002802:	ee17 0a90 	vmov	r0, s15
 8002806:	f7fd fec7 	bl	8000598 <__aeabi_f2d>
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <Motor_SetSpeed_percent+0xa8>)
 8002810:	f7fe f844 	bl	800089c <__aeabi_ddiv>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f7fe f9c4 	bl	8000ba8 <__aeabi_d2iz>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	609a      	str	r2, [r3, #8]
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bdb0      	pop	{r4, r5, r7, pc}
 800282e:	bf00      	nop
 8002830:	40590000 	.word	0x40590000
 8002834:	33333333 	.word	0x33333333
 8002838:	3feb3333 	.word	0x3feb3333

0800283c <Motor_UpdateSpeed>:

/**
 * @brief Update motor speeds gradually to achieve smoother transitions.
 * @param hMotor Pointer to the motor handle structure.
 */
void Motor_UpdateSpeed(h_Motor_t * hMotors) {
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	// Increase speed progressively
	if (hMotors->speed1 > hMotors->current_speed1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	dd06      	ble.n	800285e <Motor_UpdateSpeed+0x22>
		hMotors->current_speed1 += hMotors->speed_increase_rate1;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	441a      	add	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60da      	str	r2, [r3, #12]
	if (hMotors->speed2 > hMotors->current_speed2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	429a      	cmp	r2, r3
 8002868:	dd06      	ble.n	8002878 <Motor_UpdateSpeed+0x3c>
		hMotors->current_speed2 += hMotors->speed_increase_rate2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	441a      	add	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	611a      	str	r2, [r3, #16]

	// Decrease speed progressively
	if (hMotors->speed1 < hMotors->current_speed1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	da06      	bge.n	8002892 <Motor_UpdateSpeed+0x56>
		hMotors->current_speed1 -= hMotors->speed_increase_rate1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	1ad2      	subs	r2, r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60da      	str	r2, [r3, #12]
	if (hMotors->speed2 < hMotors->current_speed2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	429a      	cmp	r2, r3
 800289c:	da06      	bge.n	80028ac <Motor_UpdateSpeed+0x70>
		hMotors->current_speed2 -= hMotors->speed_increase_rate2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	1ad2      	subs	r2, r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	611a      	str	r2, [r3, #16]

	__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_1, hMotors->current_speed1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_2, hMotors->current_speed2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028da:	2003      	movs	r0, #3
 80028dc:	f001 fd0b 	bl	80042f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e0:	200f      	movs	r0, #15
 80028e2:	f7fe ffdf 	bl	80018a4 <HAL_InitTick>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	71fb      	strb	r3, [r7, #7]
 80028f0:	e001      	b.n	80028f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028f2:	f7fe ffad 	bl	8001850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028f6:	79fb      	ldrb	r3, [r7, #7]

}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_IncTick+0x1c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_IncTick+0x20>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4413      	add	r3, r2
 800290e:	4a03      	ldr	r2, [pc, #12]	@ (800291c <HAL_IncTick+0x1c>)
 8002910:	6013      	str	r3, [r2, #0]
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	20000600 	.word	0x20000600
 8002920:	20000008 	.word	0x20000008

08002924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return uwTick;
 8002928:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <HAL_GetTick+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000600 	.word	0x20000600

0800293c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	609a      	str	r2, [r3, #8]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3360      	adds	r3, #96	@ 0x60
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <LL_ADC_SetOffset+0x44>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	03fff000 	.word	0x03fff000

080029ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3360      	adds	r3, #96	@ 0x60
 80029fa:	461a      	mov	r2, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3360      	adds	r3, #96	@ 0x60
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b087      	sub	sp, #28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3360      	adds	r3, #96	@ 0x60
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3360      	adds	r3, #96	@ 0x60
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	615a      	str	r2, [r3, #20]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b087      	sub	sp, #28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3330      	adds	r3, #48	@ 0x30
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	4413      	add	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	211f      	movs	r1, #31
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	401a      	ands	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0e9b      	lsrs	r3, r3, #26
 8002b3e:	f003 011f 	and.w	r1, r3, #31
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3314      	adds	r3, #20
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	0e5b      	lsrs	r3, r3, #25
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	4413      	add	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	0d1b      	lsrs	r3, r3, #20
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2107      	movs	r1, #7
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	401a      	ands	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	0d1b      	lsrs	r3, r3, #20
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	401a      	ands	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 0318 	and.w	r3, r3, #24
 8002bd6:	4908      	ldr	r1, [pc, #32]	@ (8002bf8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bd8:	40d9      	lsrs	r1, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	400b      	ands	r3, r1
 8002bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be2:	431a      	orrs	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	0007ffff 	.word	0x0007ffff

08002bfc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 031f 	and.w	r3, r3, #31
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6093      	str	r3, [r2, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c6c:	d101      	bne.n	8002c72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cbc:	d101      	bne.n	8002cc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ce0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d0c:	f043 0202 	orr.w	r2, r3, #2
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <LL_ADC_IsEnabled+0x18>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <LL_ADC_IsEnabled+0x1a>
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d101      	bne.n	8002d5e <LL_ADC_IsDisableOngoing+0x18>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <LL_ADC_IsDisableOngoing+0x1a>
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002da4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002da8:	f043 0210 	orr.w	r2, r3, #16
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d101      	bne.n	8002dd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002df2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d101      	bne.n	8002e22 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	b089      	sub	sp, #36	@ 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e167      	b.n	800311a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fe f963 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fef1 	bl	8002c58 <LL_ADC_IsDeepPowerDownEnabled>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fed7 	bl	8002c34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff0c 	bl	8002ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d115      	bne.n	8002ec2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fef0 	bl	8002c80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea0:	4ba0      	ldr	r3, [pc, #640]	@ (8003124 <HAL_ADC_Init+0x2f4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	099b      	lsrs	r3, r3, #6
 8002ea6:	4aa0      	ldr	r2, [pc, #640]	@ (8003128 <HAL_ADC_Init+0x2f8>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	3301      	adds	r3, #1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002eb4:	e002      	b.n	8002ebc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f9      	bne.n	8002eb6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff feee 	bl	8002ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10d      	bne.n	8002eee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed6:	f043 0210 	orr.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff62 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8002ef8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 8100 	bne.w	8003108 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f040 80fc 	bne.w	8003108 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f18:	f043 0202 	orr.w	r2, r3, #2
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fefb 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d111      	bne.n	8002f54 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f34:	f7ff fef4 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f38:	4604      	mov	r4, r0
 8002f3a:	487c      	ldr	r0, [pc, #496]	@ (800312c <HAL_ADC_Init+0x2fc>)
 8002f3c:	f7ff fef0 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4323      	orrs	r3, r4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4878      	ldr	r0, [pc, #480]	@ (8003130 <HAL_ADC_Init+0x300>)
 8002f50:	f7ff fcf4 	bl	800293c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7f5b      	ldrb	r3, [r3, #29]
 8002f58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d106      	bne.n	8002f90 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	045b      	lsls	r3, r3, #17
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	4b60      	ldr	r3, [pc, #384]	@ (8003134 <HAL_ADC_Init+0x304>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	69b9      	ldr	r1, [r7, #24]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff15 	bl	8002e0a <LL_ADC_INJ_IsConversionOngoing>
 8002fe0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d16d      	bne.n	80030c4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d16a      	bne.n	80030c4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ff2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ffa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800300a:	f023 0302 	bic.w	r3, r3, #2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	69b9      	ldr	r1, [r7, #24]
 8003014:	430b      	orrs	r3, r1
 8003016:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d017      	beq.n	8003050 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800302e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003038:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800303c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6911      	ldr	r1, [r2, #16]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	430b      	orrs	r3, r1
 800304a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800304e:	e013      	b.n	8003078 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800305e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003070:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003074:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800307e:	2b01      	cmp	r3, #1
 8003080:	d118      	bne.n	80030b4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003098:	4311      	orrs	r1, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030a4:	430a      	orrs	r2, r1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	611a      	str	r2, [r3, #16]
 80030b2:	e007      	b.n	80030c4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d10c      	bne.n	80030e6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f023 010f 	bic.w	r1, r3, #15
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	1e5a      	subs	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80030e4:	e007      	b.n	80030f6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 020f 	bic.w	r2, r2, #15
 80030f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003106:	e007      	b.n	8003118 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	f043 0210 	orr.w	r2, r3, #16
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003118:	7ffb      	ldrb	r3, [r7, #31]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3724      	adds	r7, #36	@ 0x24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd90      	pop	{r4, r7, pc}
 8003122:	bf00      	nop
 8003124:	20000000 	.word	0x20000000
 8003128:	053e2d63 	.word	0x053e2d63
 800312c:	50000100 	.word	0x50000100
 8003130:	50000300 	.word	0x50000300
 8003134:	fff04007 	.word	0xfff04007

08003138 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003140:	4859      	ldr	r0, [pc, #356]	@ (80032a8 <HAL_ADC_Start+0x170>)
 8003142:	f7ff fd5b 	bl	8002bfc <LL_ADC_GetMultimode>
 8003146:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe35 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 809f 	bne.w	8003298 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_ADC_Start+0x30>
 8003164:	2302      	movs	r3, #2
 8003166:	e09a      	b.n	800329e <HAL_ADC_Start+0x166>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fe63 	bl	8003e3c <ADC_Enable>
 8003176:	4603      	mov	r3, r0
 8003178:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f040 8086 	bne.w	800328e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003186:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a44      	ldr	r2, [pc, #272]	@ (80032ac <HAL_ADC_Start+0x174>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d002      	beq.n	80031a6 <HAL_ADC_Start+0x6e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	e001      	b.n	80031aa <HAL_ADC_Start+0x72>
 80031a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d002      	beq.n	80031b8 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d0:	d106      	bne.n	80031e0 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	f023 0206 	bic.w	r2, r3, #6
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80031de:	e002      	b.n	80031e6 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	221c      	movs	r2, #28
 80031ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2c      	ldr	r2, [pc, #176]	@ (80032ac <HAL_ADC_Start+0x174>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d002      	beq.n	8003206 <HAL_ADC_Start+0xce>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	e001      	b.n	800320a <HAL_ADC_Start+0xd2>
 8003206:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	4293      	cmp	r3, r2
 8003210:	d008      	beq.n	8003224 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d002      	beq.n	8003224 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b09      	cmp	r3, #9
 8003222:	d114      	bne.n	800324e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003236:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800323a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fd90 	bl	8002d6c <LL_ADC_REG_StartConversion>
 800324c:	e026      	b.n	800329c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003252:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a13      	ldr	r2, [pc, #76]	@ (80032ac <HAL_ADC_Start+0x174>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d002      	beq.n	800326a <HAL_ADC_Start+0x132>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	e001      	b.n	800326e <HAL_ADC_Start+0x136>
 800326a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800326e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00f      	beq.n	800329c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003284:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800328c:	e006      	b.n	800329c <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003296:	e001      	b.n	800329c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003298:	2302      	movs	r3, #2
 800329a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800329c:	7dfb      	ldrb	r3, [r7, #23]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	50000300 	.word	0x50000300
 80032ac:	50000100 	.word	0x50000100

080032b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_Stop+0x16>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e023      	b.n	800330e <HAL_ADC_Stop+0x5e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80032ce:	2103      	movs	r1, #3
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fcf7 	bl	8003cc4 <ADC_ConversionStop>
 80032d6:	4603      	mov	r3, r0
 80032d8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d111      	bne.n	8003304 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fe31 	bl	8003f48 <ADC_Disable>
 80032e6:	4603      	mov	r3, r0
 80032e8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003322:	4867      	ldr	r0, [pc, #412]	@ (80034c0 <HAL_ADC_PollForConversion+0x1a8>)
 8003324:	f7ff fc6a 	bl	8002bfc <LL_ADC_GetMultimode>
 8003328:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b08      	cmp	r3, #8
 8003330:	d102      	bne.n	8003338 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003332:	2308      	movs	r3, #8
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e02a      	b.n	800338e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b05      	cmp	r3, #5
 8003342:	d002      	beq.n	800334a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b09      	cmp	r3, #9
 8003348:	d111      	bne.n	800336e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0a6      	b.n	80034b6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003368:	2304      	movs	r3, #4
 800336a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800336c:	e00f      	b.n	800338e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800336e:	4854      	ldr	r0, [pc, #336]	@ (80034c0 <HAL_ADC_PollForConversion+0x1a8>)
 8003370:	f7ff fc52 	bl	8002c18 <LL_ADC_GetMultiDMATransfer>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337e:	f043 0220 	orr.w	r2, r3, #32
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e095      	b.n	80034b6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800338a:	2304      	movs	r3, #4
 800338c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800338e:	f7ff fac9 	bl	8002924 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003394:	e021      	b.n	80033da <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800339c:	d01d      	beq.n	80033da <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800339e:	f7ff fac1 	bl	8002924 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <HAL_ADC_PollForConversion+0x9c>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d112      	bne.n	80033da <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10b      	bne.n	80033da <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	f043 0204 	orr.w	r2, r3, #4
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e06d      	b.n	80034b6 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0d6      	beq.n	8003396 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fb71 	bl	8002ae0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01c      	beq.n	800343e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7f5b      	ldrb	r3, [r3, #29]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d118      	bne.n	800343e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b08      	cmp	r3, #8
 8003418:	d111      	bne.n	800343e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a20      	ldr	r2, [pc, #128]	@ (80034c4 <HAL_ADC_PollForConversion+0x1ac>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d002      	beq.n	800344e <HAL_ADC_PollForConversion+0x136>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	e001      	b.n	8003452 <HAL_ADC_PollForConversion+0x13a>
 800344e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	4293      	cmp	r3, r2
 8003458:	d008      	beq.n	800346c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b05      	cmp	r3, #5
 8003464:	d002      	beq.n	800346c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b09      	cmp	r3, #9
 800346a:	d104      	bne.n	8003476 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	e00d      	b.n	8003492 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a12      	ldr	r2, [pc, #72]	@ (80034c4 <HAL_ADC_PollForConversion+0x1ac>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d002      	beq.n	8003486 <HAL_ADC_PollForConversion+0x16e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	e001      	b.n	800348a <HAL_ADC_PollForConversion+0x172>
 8003486:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800348a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d104      	bne.n	80034a2 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2208      	movs	r2, #8
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e008      	b.n	80034b4 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d103      	bne.n	80034b4 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	220c      	movs	r2, #12
 80034b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	50000300 	.word	0x50000300
 80034c4:	50000100 	.word	0x50000100

080034c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b0b6      	sub	sp, #216	@ 0xd8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x22>
 8003502:	2302      	movs	r3, #2
 8003504:	e3c8      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x7b4>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fc52 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 83ad 	bne.w	8003c7a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	f7ff faea 	bl	8002b06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fc40 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 800353c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fc60 	bl	8002e0a <LL_ADC_INJ_IsConversionOngoing>
 800354a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800354e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 81d9 	bne.w	800390a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800355c:	2b00      	cmp	r3, #0
 800355e:	f040 81d4 	bne.w	800390a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800356a:	d10f      	bne.n	800358c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2200      	movs	r2, #0
 8003576:	4619      	mov	r1, r3
 8003578:	f7ff faf1 	bl	8002b5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fa98 	bl	8002aba <LL_ADC_SetSamplingTimeCommonConfig>
 800358a:	e00e      	b.n	80035aa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	461a      	mov	r2, r3
 800359a:	f7ff fae0 	bl	8002b5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fa88 	bl	8002aba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	08db      	lsrs	r3, r3, #3
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d022      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6919      	ldr	r1, [r3, #16]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035dc:	f7ff f9e2 	bl	80029a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6919      	ldr	r1, [r3, #16]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	461a      	mov	r2, r3
 80035ee:	f7ff fa2e 	bl	8002a4e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d102      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x124>
 8003602:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003606:	e000      	b.n	800360a <HAL_ADC_ConfigChannel+0x126>
 8003608:	2300      	movs	r3, #0
 800360a:	461a      	mov	r2, r3
 800360c:	f7ff fa3a 	bl	8002a84 <LL_ADC_SetOffsetSaturation>
 8003610:	e17b      	b.n	800390a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff f9e7 	bl	80029ec <LL_ADC_GetOffsetChannel>
 800361e:	4603      	mov	r3, r0
 8003620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <HAL_ADC_ConfigChannel+0x15a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff f9dc 	bl	80029ec <LL_ADC_GetOffsetChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	0e9b      	lsrs	r3, r3, #26
 8003638:	f003 021f 	and.w	r2, r3, #31
 800363c:	e01e      	b.n	800367c <HAL_ADC_ConfigChannel+0x198>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2100      	movs	r1, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff f9d1 	bl	80029ec <LL_ADC_GetOffsetChannel>
 800364a:	4603      	mov	r3, r0
 800364c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800365c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003660:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003664:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800366c:	2320      	movs	r3, #32
 800366e:	e004      	b.n	800367a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003670:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003674:	fab3 f383 	clz	r3, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x1b0>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	0e9b      	lsrs	r3, r3, #26
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	e018      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x1e2>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80036a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80036b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e004      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80036bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036c0:	fab3 f383 	clz	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d106      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff f9a0 	bl	8002a18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff f984 	bl	80029ec <LL_ADC_GetOffsetChannel>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x220>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f979 	bl	80029ec <LL_ADC_GetOffsetChannel>
 80036fa:	4603      	mov	r3, r0
 80036fc:	0e9b      	lsrs	r3, r3, #26
 80036fe:	f003 021f 	and.w	r2, r3, #31
 8003702:	e01e      	b.n	8003742 <HAL_ADC_ConfigChannel+0x25e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff f96e 	bl	80029ec <LL_ADC_GetOffsetChannel>
 8003710:	4603      	mov	r3, r0
 8003712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003726:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800372a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003732:	2320      	movs	r3, #32
 8003734:	e004      	b.n	8003740 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <HAL_ADC_ConfigChannel+0x276>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	0e9b      	lsrs	r3, r3, #26
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	e018      	b.n	800378c <HAL_ADC_ConfigChannel+0x2a8>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800376e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003772:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003776:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800377e:	2320      	movs	r3, #32
 8003780:	e004      	b.n	800378c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003782:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800378c:	429a      	cmp	r2, r3
 800378e:	d106      	bne.n	800379e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2200      	movs	r2, #0
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff f93d 	bl	8002a18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2102      	movs	r1, #2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff f921 	bl	80029ec <LL_ADC_GetOffsetChannel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x2e6>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2102      	movs	r1, #2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff f916 	bl	80029ec <LL_ADC_GetOffsetChannel>
 80037c0:	4603      	mov	r3, r0
 80037c2:	0e9b      	lsrs	r3, r3, #26
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	e01e      	b.n	8003808 <HAL_ADC_ConfigChannel+0x324>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2102      	movs	r1, #2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff f90b 	bl	80029ec <LL_ADC_GetOffsetChannel>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80037e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80037f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80037f8:	2320      	movs	r3, #32
 80037fa:	e004      	b.n	8003806 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80037fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x33c>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	0e9b      	lsrs	r3, r3, #26
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	e016      	b.n	800384e <HAL_ADC_ConfigChannel+0x36a>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003832:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003838:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003840:	2320      	movs	r3, #32
 8003842:	e004      	b.n	800384e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003844:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800384e:	429a      	cmp	r2, r3
 8003850:	d106      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff f8dc 	bl	8002a18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2103      	movs	r1, #3
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff f8c0 	bl	80029ec <LL_ADC_GetOffsetChannel>
 800386c:	4603      	mov	r3, r0
 800386e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <HAL_ADC_ConfigChannel+0x3a8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2103      	movs	r1, #3
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff f8b5 	bl	80029ec <LL_ADC_GetOffsetChannel>
 8003882:	4603      	mov	r3, r0
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	f003 021f 	and.w	r2, r3, #31
 800388a:	e017      	b.n	80038bc <HAL_ADC_ConfigChannel+0x3d8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2103      	movs	r1, #3
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff f8aa 	bl	80029ec <LL_ADC_GetOffsetChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80038a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038a6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80038a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80038ae:	2320      	movs	r3, #32
 80038b0:	e003      	b.n	80038ba <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80038b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x3f0>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0e9b      	lsrs	r3, r3, #26
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	e011      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x414>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80038e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80038e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80038ec:	2320      	movs	r3, #32
 80038ee:	e003      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80038f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d106      	bne.n	800390a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2200      	movs	r2, #0
 8003902:	2103      	movs	r1, #3
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff f887 	bl	8002a18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fa06 	bl	8002d20 <LL_ADC_IsEnabled>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 8140 	bne.w	8003b9c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	461a      	mov	r2, r3
 800392a:	f7ff f943 	bl	8002bb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a8f      	ldr	r2, [pc, #572]	@ (8003b70 <HAL_ADC_ConfigChannel+0x68c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	f040 8131 	bne.w	8003b9c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x47e>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0e9b      	lsrs	r3, r3, #26
 8003950:	3301      	adds	r3, #1
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2b09      	cmp	r3, #9
 8003958:	bf94      	ite	ls
 800395a:	2301      	movls	r3, #1
 800395c:	2300      	movhi	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	e019      	b.n	8003996 <HAL_ADC_ConfigChannel+0x4b2>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003970:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003972:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800397a:	2320      	movs	r3, #32
 800397c:	e003      	b.n	8003986 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800397e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	3301      	adds	r3, #1
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2b09      	cmp	r3, #9
 800398e:	bf94      	ite	ls
 8003990:	2301      	movls	r3, #1
 8003992:	2300      	movhi	r3, #0
 8003994:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003996:	2b00      	cmp	r3, #0
 8003998:	d079      	beq.n	8003a8e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d107      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x4d2>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	0e9b      	lsrs	r3, r3, #26
 80039ac:	3301      	adds	r3, #1
 80039ae:	069b      	lsls	r3, r3, #26
 80039b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039b4:	e015      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x4fe>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80039c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80039c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e003      	b.n	80039da <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80039d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	069b      	lsls	r3, r3, #26
 80039de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x51e>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	0e9b      	lsrs	r3, r3, #26
 80039f4:	3301      	adds	r3, #1
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	e017      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x54e>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a12:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	e003      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	ea42 0103 	orr.w	r1, r2, r3
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x574>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0e9b      	lsrs	r3, r3, #26
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f003 021f 	and.w	r2, r3, #31
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	051b      	lsls	r3, r3, #20
 8003a56:	e018      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x5a6>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e003      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f003 021f 	and.w	r2, r3, #31
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	e081      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d107      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x5c6>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	0e9b      	lsrs	r3, r3, #26
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	069b      	lsls	r3, r3, #26
 8003aa4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003aa8:	e015      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x5f2>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	e003      	b.n	8003ace <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	069b      	lsls	r3, r3, #26
 8003ad2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x612>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	0e9b      	lsrs	r3, r3, #26
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	2101      	movs	r1, #1
 8003af0:	fa01 f303 	lsl.w	r3, r1, r3
 8003af4:	e017      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x642>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	61fb      	str	r3, [r7, #28]
  return result;
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003b0e:	2320      	movs	r3, #32
 8003b10:	e003      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	ea42 0103 	orr.w	r1, r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10d      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x66e>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	0e9b      	lsrs	r3, r3, #26
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f003 021f 	and.w	r2, r3, #31
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	3b1e      	subs	r3, #30
 8003b4a:	051b      	lsls	r3, r3, #20
 8003b4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b50:	e01e      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x6ac>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	613b      	str	r3, [r7, #16]
  return result;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	e006      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x698>
 8003b6e:	bf00      	nop
 8003b70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f003 021f 	and.w	r2, r3, #31
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	3b1e      	subs	r3, #30
 8003b8a:	051b      	lsls	r3, r3, #20
 8003b8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b96:	4619      	mov	r1, r3
 8003b98:	f7fe ffe1 	bl	8002b5e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d071      	beq.n	8003c8c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ba8:	483e      	ldr	r0, [pc, #248]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003baa:	f7fe feed 	bl	8002988 <LL_ADC_GetCommonPathInternalCh>
 8003bae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_ADC_ConfigChannel+0x6e2>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8003cac <HAL_ADC_ConfigChannel+0x7c8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d127      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d121      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bda:	d157      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003be0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003be4:	4619      	mov	r1, r3
 8003be6:	482f      	ldr	r0, [pc, #188]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003be8:	f7fe febb 	bl	8002962 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bec:	4b30      	ldr	r3, [pc, #192]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	099b      	lsrs	r3, r3, #6
 8003bf2:	4a30      	ldr	r2, [pc, #192]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c06:	e002      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f9      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c14:	e03a      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a27      	ldr	r2, [pc, #156]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d113      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10d      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a22      	ldr	r2, [pc, #136]	@ (8003cbc <HAL_ADC_ConfigChannel+0x7d8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02a      	beq.n	8003c8c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4818      	ldr	r0, [pc, #96]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c42:	f7fe fe8e 	bl	8002962 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c46:	e021      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d11c      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a16      	ldr	r2, [pc, #88]	@ (8003cbc <HAL_ADC_ConfigChannel+0x7d8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d011      	beq.n	8003c8c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c70:	4619      	mov	r1, r3
 8003c72:	480c      	ldr	r0, [pc, #48]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c74:	f7fe fe75 	bl	8002962 <LL_ADC_SetCommonPathInternalCh>
 8003c78:	e008      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c94:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	37d8      	adds	r7, #216	@ 0xd8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	80080000 	.word	0x80080000
 8003ca4:	50000300 	.word	0x50000300
 8003ca8:	c3210000 	.word	0xc3210000
 8003cac:	90c00010 	.word	0x90c00010
 8003cb0:	20000000 	.word	0x20000000
 8003cb4:	053e2d63 	.word	0x053e2d63
 8003cb8:	c7520000 	.word	0xc7520000
 8003cbc:	50000100 	.word	0x50000100
 8003cc0:	cb840000 	.word	0xcb840000

08003cc4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff f86e 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8003ce0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff f88f 	bl	8002e0a <LL_ADC_INJ_IsConversionOngoing>
 8003cec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d103      	bne.n	8003cfc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8098 	beq.w	8003e2c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02a      	beq.n	8003d60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	7f5b      	ldrb	r3, [r3, #29]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d126      	bne.n	8003d60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	7f1b      	ldrb	r3, [r3, #28]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d122      	bne.n	8003d60 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d1e:	e014      	b.n	8003d4a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4a45      	ldr	r2, [pc, #276]	@ (8003e38 <ADC_ConversionStop+0x174>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d90d      	bls.n	8003d44 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2c:	f043 0210 	orr.w	r2, r3, #16
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d38:	f043 0201 	orr.w	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e074      	b.n	8003e2e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	3301      	adds	r3, #1
 8003d48:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d54:	2b40      	cmp	r3, #64	@ 0x40
 8003d56:	d1e3      	bne.n	8003d20 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2240      	movs	r2, #64	@ 0x40
 8003d5e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d014      	beq.n	8003d90 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff f826 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00c      	beq.n	8003d90 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe ffe3 	bl	8002d46 <LL_ADC_IsDisableOngoing>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d104      	bne.n	8003d90 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff f802 	bl	8002d94 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d014      	beq.n	8003dc0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff f835 	bl	8002e0a <LL_ADC_INJ_IsConversionOngoing>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00c      	beq.n	8003dc0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe ffcb 	bl	8002d46 <LL_ADC_IsDisableOngoing>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f811 	bl	8002de2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d005      	beq.n	8003dd2 <ADC_ConversionStop+0x10e>
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d105      	bne.n	8003dd8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003dcc:	230c      	movs	r3, #12
 8003dce:	617b      	str	r3, [r7, #20]
        break;
 8003dd0:	e005      	b.n	8003dde <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	617b      	str	r3, [r7, #20]
        break;
 8003dd6:	e002      	b.n	8003dde <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003dd8:	2304      	movs	r3, #4
 8003dda:	617b      	str	r3, [r7, #20]
        break;
 8003ddc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003dde:	f7fe fda1 	bl	8002924 <HAL_GetTick>
 8003de2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003de4:	e01b      	b.n	8003e1e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003de6:	f7fe fd9d 	bl	8002924 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b05      	cmp	r3, #5
 8003df2:	d914      	bls.n	8003e1e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e06:	f043 0210 	orr.w	r2, r3, #16
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e12:	f043 0201 	orr.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e007      	b.n	8003e2e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1dc      	bne.n	8003de6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	a33fffff 	.word	0xa33fffff

08003e3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe ff67 	bl	8002d20 <LL_ADC_IsEnabled>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d169      	bne.n	8003f2c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	4b36      	ldr	r3, [pc, #216]	@ (8003f38 <ADC_Enable+0xfc>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00d      	beq.n	8003e82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6a:	f043 0210 	orr.w	r2, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e055      	b.n	8003f2e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe ff22 	bl	8002cd0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e8c:	482b      	ldr	r0, [pc, #172]	@ (8003f3c <ADC_Enable+0x100>)
 8003e8e:	f7fe fd7b 	bl	8002988 <LL_ADC_GetCommonPathInternalCh>
 8003e92:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e9c:	4b28      	ldr	r3, [pc, #160]	@ (8003f40 <ADC_Enable+0x104>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	4a28      	ldr	r2, [pc, #160]	@ (8003f44 <ADC_Enable+0x108>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	099b      	lsrs	r3, r3, #6
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	4613      	mov	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003eb6:	e002      	b.n	8003ebe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f9      	bne.n	8003eb8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ec4:	f7fe fd2e 	bl	8002924 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eca:	e028      	b.n	8003f1e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe ff25 	bl	8002d20 <LL_ADC_IsEnabled>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fef5 	bl	8002cd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ee6:	f7fe fd1d 	bl	8002924 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d914      	bls.n	8003f1e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d00d      	beq.n	8003f1e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	f043 0210 	orr.w	r2, r3, #16
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f12:	f043 0201 	orr.w	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e007      	b.n	8003f2e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d1cf      	bne.n	8003ecc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	8000003f 	.word	0x8000003f
 8003f3c:	50000300 	.word	0x50000300
 8003f40:	20000000 	.word	0x20000000
 8003f44:	053e2d63 	.word	0x053e2d63

08003f48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fef6 	bl	8002d46 <LL_ADC_IsDisableOngoing>
 8003f5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fedd 	bl	8002d20 <LL_ADC_IsEnabled>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d047      	beq.n	8003ffc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d144      	bne.n	8003ffc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030d 	and.w	r3, r3, #13
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10c      	bne.n	8003f9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe feb7 	bl	8002cf8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2203      	movs	r2, #3
 8003f90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f92:	f7fe fcc7 	bl	8002924 <HAL_GetTick>
 8003f96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f98:	e029      	b.n	8003fee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9e:	f043 0210 	orr.w	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e023      	b.n	8003ffe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fb6:	f7fe fcb5 	bl	8002924 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d914      	bls.n	8003fee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd6:	f043 0210 	orr.w	r2, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe2:	f043 0201 	orr.w	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e007      	b.n	8003ffe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1dc      	bne.n	8003fb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <LL_ADC_IsEnabled>:
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <LL_ADC_IsEnabled+0x18>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <LL_ADC_IsEnabled+0x1a>
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_ADC_REG_IsConversionOngoing>:
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b04      	cmp	r3, #4
 800403e:	d101      	bne.n	8004044 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b0a1      	sub	sp, #132	@ 0x84
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800406e:	2302      	movs	r3, #2
 8004070:	e08b      	b.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800407a:	2300      	movs	r3, #0
 800407c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800407e:	2300      	movs	r3, #0
 8004080:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800408a:	d102      	bne.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800408c:	4b41      	ldr	r3, [pc, #260]	@ (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	e001      	b.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e06a      	b.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ffb8 	bl	800402c <LL_ADC_REG_IsConversionOngoing>
 80040bc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ffb2 	bl	800402c <LL_ADC_REG_IsConversionOngoing>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d14c      	bne.n	8004168 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80040ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d149      	bne.n	8004168 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040d4:	4b30      	ldr	r3, [pc, #192]	@ (8004198 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80040d6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d028      	beq.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040f2:	035b      	lsls	r3, r3, #13
 80040f4:	430b      	orrs	r3, r1
 80040f6:	431a      	orrs	r2, r3
 80040f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004100:	f7ff ff81 	bl	8004006 <LL_ADC_IsEnabled>
 8004104:	4604      	mov	r4, r0
 8004106:	4823      	ldr	r0, [pc, #140]	@ (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004108:	f7ff ff7d 	bl	8004006 <LL_ADC_IsEnabled>
 800410c:	4603      	mov	r3, r0
 800410e:	4323      	orrs	r3, r4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d133      	bne.n	800417c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004114:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800411c:	f023 030f 	bic.w	r3, r3, #15
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	6811      	ldr	r1, [r2, #0]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	6892      	ldr	r2, [r2, #8]
 8004128:	430a      	orrs	r2, r1
 800412a:	431a      	orrs	r2, r3
 800412c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800412e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004130:	e024      	b.n	800417c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800413a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800413c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800413e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004142:	f7ff ff60 	bl	8004006 <LL_ADC_IsEnabled>
 8004146:	4604      	mov	r4, r0
 8004148:	4812      	ldr	r0, [pc, #72]	@ (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800414a:	f7ff ff5c 	bl	8004006 <LL_ADC_IsEnabled>
 800414e:	4603      	mov	r3, r0
 8004150:	4323      	orrs	r3, r4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d112      	bne.n	800417c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004156:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800415e:	f023 030f 	bic.w	r3, r3, #15
 8004162:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004164:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004166:	e009      	b.n	800417c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800417a:	e000      	b.n	800417e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800417c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004186:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800418a:	4618      	mov	r0, r3
 800418c:	3784      	adds	r7, #132	@ 0x84
 800418e:	46bd      	mov	sp, r7
 8004190:	bd90      	pop	{r4, r7, pc}
 8004192:	bf00      	nop
 8004194:	50000100 	.word	0x50000100
 8004198:	50000300 	.word	0x50000300

0800419c <__NVIC_SetPriorityGrouping>:
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041ac:	4b0c      	ldr	r3, [pc, #48]	@ (80041e0 <__NVIC_SetPriorityGrouping+0x44>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041b8:	4013      	ands	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ce:	4a04      	ldr	r2, [pc, #16]	@ (80041e0 <__NVIC_SetPriorityGrouping+0x44>)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	60d3      	str	r3, [r2, #12]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	e000ed00 	.word	0xe000ed00

080041e4 <__NVIC_GetPriorityGrouping>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041e8:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <__NVIC_GetPriorityGrouping+0x18>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	f003 0307 	and.w	r3, r3, #7
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <__NVIC_EnableIRQ>:
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420e:	2b00      	cmp	r3, #0
 8004210:	db0b      	blt.n	800422a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	f003 021f 	and.w	r2, r3, #31
 8004218:	4907      	ldr	r1, [pc, #28]	@ (8004238 <__NVIC_EnableIRQ+0x38>)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2001      	movs	r0, #1
 8004222:	fa00 f202 	lsl.w	r2, r0, r2
 8004226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	e000e100 	.word	0xe000e100

0800423c <__NVIC_SetPriority>:
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	6039      	str	r1, [r7, #0]
 8004246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424c:	2b00      	cmp	r3, #0
 800424e:	db0a      	blt.n	8004266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	b2da      	uxtb	r2, r3
 8004254:	490c      	ldr	r1, [pc, #48]	@ (8004288 <__NVIC_SetPriority+0x4c>)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	0112      	lsls	r2, r2, #4
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	440b      	add	r3, r1
 8004260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004264:	e00a      	b.n	800427c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4908      	ldr	r1, [pc, #32]	@ (800428c <__NVIC_SetPriority+0x50>)
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	3b04      	subs	r3, #4
 8004274:	0112      	lsls	r2, r2, #4
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	440b      	add	r3, r1
 800427a:	761a      	strb	r2, [r3, #24]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	e000e100 	.word	0xe000e100
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <NVIC_EncodePriority>:
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	@ 0x24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f1c3 0307 	rsb	r3, r3, #7
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	bf28      	it	cs
 80042ae:	2304      	movcs	r3, #4
 80042b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3304      	adds	r3, #4
 80042b6:	2b06      	cmp	r3, #6
 80042b8:	d902      	bls.n	80042c0 <NVIC_EncodePriority+0x30>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3b03      	subs	r3, #3
 80042be:	e000      	b.n	80042c2 <NVIC_EncodePriority+0x32>
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	401a      	ands	r2, r3
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	43d9      	mvns	r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e8:	4313      	orrs	r3, r2
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3724      	adds	r7, #36	@ 0x24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff ff4c 	bl	800419c <__NVIC_SetPriorityGrouping>
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800431a:	f7ff ff63 	bl	80041e4 <__NVIC_GetPriorityGrouping>
 800431e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	6978      	ldr	r0, [r7, #20]
 8004326:	f7ff ffb3 	bl	8004290 <NVIC_EncodePriority>
 800432a:	4602      	mov	r2, r0
 800432c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff82 	bl	800423c <__NVIC_SetPriority>
}
 8004338:	bf00      	nop
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff56 	bl	8004200 <__NVIC_EnableIRQ>
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e08d      	b.n	800448a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4b47      	ldr	r3, [pc, #284]	@ (8004494 <HAL_DMA_Init+0x138>)
 8004376:	429a      	cmp	r2, r3
 8004378:	d80f      	bhi.n	800439a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	4b45      	ldr	r3, [pc, #276]	@ (8004498 <HAL_DMA_Init+0x13c>)
 8004382:	4413      	add	r3, r2
 8004384:	4a45      	ldr	r2, [pc, #276]	@ (800449c <HAL_DMA_Init+0x140>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	009a      	lsls	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a42      	ldr	r2, [pc, #264]	@ (80044a0 <HAL_DMA_Init+0x144>)
 8004396:	641a      	str	r2, [r3, #64]	@ 0x40
 8004398:	e00e      	b.n	80043b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	4b40      	ldr	r3, [pc, #256]	@ (80044a4 <HAL_DMA_Init+0x148>)
 80043a2:	4413      	add	r3, r2
 80043a4:	4a3d      	ldr	r2, [pc, #244]	@ (800449c <HAL_DMA_Init+0x140>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	009a      	lsls	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a3c      	ldr	r2, [pc, #240]	@ (80044a8 <HAL_DMA_Init+0x14c>)
 80043b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80043ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f9be 	bl	800478c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004418:	d102      	bne.n	8004420 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004434:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d010      	beq.n	8004460 <HAL_DMA_Init+0x104>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b04      	cmp	r3, #4
 8004444:	d80c      	bhi.n	8004460 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f9de 	bl	8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	e008      	b.n	8004472 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40020407 	.word	0x40020407
 8004498:	bffdfff8 	.word	0xbffdfff8
 800449c:	cccccccd 	.word	0xcccccccd
 80044a0:	40020000 	.word	0x40020000
 80044a4:	bffdfbf8 	.word	0xbffdfbf8
 80044a8:	40020400 	.word	0x40020400

080044ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d005      	beq.n	80044d0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2204      	movs	r2, #4
 80044c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
 80044ce:	e037      	b.n	8004540 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 020e 	bic.w	r2, r2, #14
 80044de:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044ee:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f202 	lsl.w	r2, r1, r2
 8004512:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800451c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00c      	beq.n	8004540 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004534:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800453e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d00d      	beq.n	8004592 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2204      	movs	r2, #4
 800457a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e047      	b.n	8004622 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 020e 	bic.w	r2, r2, #14
 80045a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	f003 021f 	and.w	r2, r3, #31
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f202 	lsl.w	r2, r1, r2
 80045d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00c      	beq.n	8004602 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004600:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	4798      	blx	r3
    }
  }
  return status;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2204      	movs	r2, #4
 800464e:	409a      	lsls	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d026      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x7a>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d021      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d107      	bne.n	8004680 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0204 	bic.w	r2, r2, #4
 800467e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	2104      	movs	r1, #4
 800468e:	fa01 f202 	lsl.w	r2, r1, r2
 8004692:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004698:	2b00      	cmp	r3, #0
 800469a:	d071      	beq.n	8004780 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80046a4:	e06c      	b.n	8004780 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2202      	movs	r2, #2
 80046b0:	409a      	lsls	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d02e      	beq.n	8004718 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d029      	beq.n	8004718 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 020a 	bic.w	r2, r2, #10
 80046e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	f003 021f 	and.w	r2, r3, #31
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	2102      	movs	r1, #2
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d038      	beq.n	8004780 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004716:	e033      	b.n	8004780 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2208      	movs	r2, #8
 8004722:	409a      	lsls	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d02a      	beq.n	8004782 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d025      	beq.n	8004782 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 020e 	bic.w	r2, r2, #14
 8004744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f003 021f 	and.w	r2, r3, #31
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	2101      	movs	r1, #1
 8004754:	fa01 f202 	lsl.w	r2, r1, r2
 8004758:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004780:	bf00      	nop
 8004782:	bf00      	nop
}
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	4b16      	ldr	r3, [pc, #88]	@ (80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800479c:	429a      	cmp	r2, r3
 800479e:	d802      	bhi.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80047a0:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e001      	b.n	80047aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80047a6:	4b15      	ldr	r3, [pc, #84]	@ (80047fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80047a8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	3b08      	subs	r3, #8
 80047b6:	4a12      	ldr	r2, [pc, #72]	@ (8004800 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c4:	089b      	lsrs	r3, r3, #2
 80047c6:	009a      	lsls	r2, r3, #2
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	461a      	mov	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004804 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80047d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2201      	movs	r2, #1
 80047e0:	409a      	lsls	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40020407 	.word	0x40020407
 80047f8:	40020800 	.word	0x40020800
 80047fc:	40020820 	.word	0x40020820
 8004800:	cccccccd 	.word	0xcccccccd
 8004804:	40020880 	.word	0x40020880

08004808 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	461a      	mov	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a08      	ldr	r2, [pc, #32]	@ (800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800482a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3b01      	subs	r3, #1
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2201      	movs	r2, #1
 8004836:	409a      	lsls	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	1000823f 	.word	0x1000823f
 800484c:	40020940 	.word	0x40020940

08004850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800485e:	e15a      	b.n	8004b16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	2101      	movs	r1, #1
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	fa01 f303 	lsl.w	r3, r1, r3
 800486c:	4013      	ands	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 814c 	beq.w	8004b10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d005      	beq.n	8004890 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800488c:	2b02      	cmp	r3, #2
 800488e:	d130      	bne.n	80048f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	2203      	movs	r2, #3
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4013      	ands	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048c6:	2201      	movs	r2, #1
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	f003 0201 	and.w	r2, r3, #1
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d017      	beq.n	800492e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	2203      	movs	r2, #3
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d123      	bne.n	8004982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	08da      	lsrs	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3208      	adds	r2, #8
 8004942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	220f      	movs	r2, #15
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4013      	ands	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	08da      	lsrs	r2, r3, #3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3208      	adds	r2, #8
 800497c:	6939      	ldr	r1, [r7, #16]
 800497e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	2203      	movs	r2, #3
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 0203 	and.w	r2, r3, #3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80a6 	beq.w	8004b10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b34 <HAL_GPIO_Init+0x2e4>)
 80049c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b34 <HAL_GPIO_Init+0x2e4>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80049d0:	4b58      	ldr	r3, [pc, #352]	@ (8004b34 <HAL_GPIO_Init+0x2e4>)
 80049d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049dc:	4a56      	ldr	r2, [pc, #344]	@ (8004b38 <HAL_GPIO_Init+0x2e8>)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	3302      	adds	r3, #2
 80049e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	220f      	movs	r2, #15
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4013      	ands	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a06:	d01f      	beq.n	8004a48 <HAL_GPIO_Init+0x1f8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8004b3c <HAL_GPIO_Init+0x2ec>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d019      	beq.n	8004a44 <HAL_GPIO_Init+0x1f4>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a4b      	ldr	r2, [pc, #300]	@ (8004b40 <HAL_GPIO_Init+0x2f0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_GPIO_Init+0x1f0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8004b44 <HAL_GPIO_Init+0x2f4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00d      	beq.n	8004a3c <HAL_GPIO_Init+0x1ec>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a49      	ldr	r2, [pc, #292]	@ (8004b48 <HAL_GPIO_Init+0x2f8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <HAL_GPIO_Init+0x1e8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a48      	ldr	r2, [pc, #288]	@ (8004b4c <HAL_GPIO_Init+0x2fc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <HAL_GPIO_Init+0x1e4>
 8004a30:	2305      	movs	r3, #5
 8004a32:	e00a      	b.n	8004a4a <HAL_GPIO_Init+0x1fa>
 8004a34:	2306      	movs	r3, #6
 8004a36:	e008      	b.n	8004a4a <HAL_GPIO_Init+0x1fa>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	e006      	b.n	8004a4a <HAL_GPIO_Init+0x1fa>
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e004      	b.n	8004a4a <HAL_GPIO_Init+0x1fa>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e002      	b.n	8004a4a <HAL_GPIO_Init+0x1fa>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_GPIO_Init+0x1fa>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	f002 0203 	and.w	r2, r2, #3
 8004a50:	0092      	lsls	r2, r2, #2
 8004a52:	4093      	lsls	r3, r2
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a5a:	4937      	ldr	r1, [pc, #220]	@ (8004b38 <HAL_GPIO_Init+0x2e8>)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	3302      	adds	r3, #2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a68:	4b39      	ldr	r3, [pc, #228]	@ (8004b50 <HAL_GPIO_Init+0x300>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a8c:	4a30      	ldr	r2, [pc, #192]	@ (8004b50 <HAL_GPIO_Init+0x300>)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a92:	4b2f      	ldr	r3, [pc, #188]	@ (8004b50 <HAL_GPIO_Init+0x300>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ab6:	4a26      	ldr	r2, [pc, #152]	@ (8004b50 <HAL_GPIO_Init+0x300>)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004abc:	4b24      	ldr	r3, [pc, #144]	@ (8004b50 <HAL_GPIO_Init+0x300>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b50 <HAL_GPIO_Init+0x300>)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b50 <HAL_GPIO_Init+0x300>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4013      	ands	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b0a:	4a11      	ldr	r2, [pc, #68]	@ (8004b50 <HAL_GPIO_Init+0x300>)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3301      	adds	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f47f ae9d 	bne.w	8004860 <HAL_GPIO_Init+0x10>
  }
}
 8004b26:	bf00      	nop
 8004b28:	bf00      	nop
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	40021000 	.word	0x40021000
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	48000400 	.word	0x48000400
 8004b40:	48000800 	.word	0x48000800
 8004b44:	48000c00 	.word	0x48000c00
 8004b48:	48001000 	.word	0x48001000
 8004b4c:	48001400 	.word	0x48001400
 8004b50:	40010400 	.word	0x40010400

08004b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
 8004b60:	4613      	mov	r3, r2
 8004b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b64:	787b      	ldrb	r3, [r7, #1]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b6a:	887a      	ldrh	r2, [r7, #2]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b70:	e002      	b.n	8004b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b72:	887a      	ldrh	r2, [r7, #2]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d141      	bne.n	8004c16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b92:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9e:	d131      	bne.n	8004c04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ba0:	4b47      	ldr	r3, [pc, #284]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ba6:	4a46      	ldr	r2, [pc, #280]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bb0:	4b43      	ldr	r3, [pc, #268]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bb8:	4a41      	ldr	r2, [pc, #260]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bc0:	4b40      	ldr	r3, [pc, #256]	@ (8004cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2232      	movs	r2, #50	@ 0x32
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	4a3f      	ldr	r2, [pc, #252]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	0c9b      	lsrs	r3, r3, #18
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bd6:	e002      	b.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bde:	4b38      	ldr	r3, [pc, #224]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bea:	d102      	bne.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f2      	bne.n	8004bd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bf2:	4b33      	ldr	r3, [pc, #204]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bfe:	d158      	bne.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e057      	b.n	8004cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c04:	4b2e      	ldr	r3, [pc, #184]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c14:	e04d      	b.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1c:	d141      	bne.n	8004ca2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c1e:	4b28      	ldr	r3, [pc, #160]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c2a:	d131      	bne.n	8004c90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c2c:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c32:	4a23      	ldr	r2, [pc, #140]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c3c:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c44:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2232      	movs	r2, #50	@ 0x32
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	0c9b      	lsrs	r3, r3, #18
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c62:	e002      	b.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c6a:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c76:	d102      	bne.n	8004c7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f2      	bne.n	8004c64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c7e:	4b10      	ldr	r3, [pc, #64]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c8a:	d112      	bne.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e011      	b.n	8004cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c96:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ca0:	e007      	b.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ca2:	4b07      	ldr	r3, [pc, #28]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004caa:	4a05      	ldr	r2, [pc, #20]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cb0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	40007000 	.word	0x40007000
 8004cc4:	20000000 	.word	0x20000000
 8004cc8:	431bde83 	.word	0x431bde83

08004ccc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cd0:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	4a04      	ldr	r2, [pc, #16]	@ (8004ce8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cda:	6093      	str	r3, [r2, #8]
}
 8004cdc:	bf00      	nop
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40007000 	.word	0x40007000

08004cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e2fe      	b.n	80052fc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d075      	beq.n	8004df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d0a:	4b97      	ldr	r3, [pc, #604]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d14:	4b94      	ldr	r3, [pc, #592]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	d102      	bne.n	8004d2a <HAL_RCC_OscConfig+0x3e>
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d002      	beq.n	8004d30 <HAL_RCC_OscConfig+0x44>
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d10b      	bne.n	8004d48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d30:	4b8d      	ldr	r3, [pc, #564]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d05b      	beq.n	8004df4 <HAL_RCC_OscConfig+0x108>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d157      	bne.n	8004df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e2d9      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d50:	d106      	bne.n	8004d60 <HAL_RCC_OscConfig+0x74>
 8004d52:	4b85      	ldr	r3, [pc, #532]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a84      	ldr	r2, [pc, #528]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e01d      	b.n	8004d9c <HAL_RCC_OscConfig+0xb0>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d68:	d10c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x98>
 8004d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4b7c      	ldr	r3, [pc, #496]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a7b      	ldr	r2, [pc, #492]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e00b      	b.n	8004d9c <HAL_RCC_OscConfig+0xb0>
 8004d84:	4b78      	ldr	r3, [pc, #480]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a77      	ldr	r2, [pc, #476]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	4b75      	ldr	r3, [pc, #468]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a74      	ldr	r2, [pc, #464]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d013      	beq.n	8004dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7fd fdbe 	bl	8002924 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dac:	f7fd fdba 	bl	8002924 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b64      	cmp	r3, #100	@ 0x64
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e29e      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0xc0>
 8004dca:	e014      	b.n	8004df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fd fdaa 	bl	8002924 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd4:	f7fd fda6 	bl	8002924 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b64      	cmp	r3, #100	@ 0x64
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e28a      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004de6:	4b60      	ldr	r3, [pc, #384]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0xe8>
 8004df2:	e000      	b.n	8004df6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d075      	beq.n	8004eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e02:	4b59      	ldr	r3, [pc, #356]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e0c:	4b56      	ldr	r3, [pc, #344]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d102      	bne.n	8004e22 <HAL_RCC_OscConfig+0x136>
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d002      	beq.n	8004e28 <HAL_RCC_OscConfig+0x13c>
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d11f      	bne.n	8004e68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e28:	4b4f      	ldr	r3, [pc, #316]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_OscConfig+0x154>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e25d      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e40:	4b49      	ldr	r3, [pc, #292]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	4946      	ldr	r1, [pc, #280]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e54:	4b45      	ldr	r3, [pc, #276]	@ (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fc fd23 	bl	80018a4 <HAL_InitTick>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d043      	beq.n	8004eec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e249      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d023      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e70:	4b3d      	ldr	r3, [pc, #244]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a3c      	ldr	r2, [pc, #240]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fd fd52 	bl	8002924 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e84:	f7fd fd4e 	bl	8002924 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e232      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e96:	4b34      	ldr	r3, [pc, #208]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea2:	4b31      	ldr	r3, [pc, #196]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	061b      	lsls	r3, r3, #24
 8004eb0:	492d      	ldr	r1, [pc, #180]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	604b      	str	r3, [r1, #4]
 8004eb6:	e01a      	b.n	8004eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004ebe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fd2e 	bl	8002924 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ecc:	f7fd fd2a 	bl	8002924 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e20e      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ede:	4b22      	ldr	r3, [pc, #136]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x1e0>
 8004eea:	e000      	b.n	8004eee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d041      	beq.n	8004f7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01c      	beq.n	8004f3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f02:	4b19      	ldr	r3, [pc, #100]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f08:	4a17      	ldr	r2, [pc, #92]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f12:	f7fd fd07 	bl	8002924 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f1a:	f7fd fd03 	bl	8002924 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e1e7      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ef      	beq.n	8004f1a <HAL_RCC_OscConfig+0x22e>
 8004f3a:	e020      	b.n	8004f7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fd fcea 	bl	8002924 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f52:	e00d      	b.n	8004f70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f54:	f7fd fce6 	bl	8002924 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d906      	bls.n	8004f70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e1ca      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f70:	4b8c      	ldr	r3, [pc, #560]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1ea      	bne.n	8004f54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 80a6 	beq.w	80050d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f90:	4b84      	ldr	r3, [pc, #528]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x2b4>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x2b6>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8004fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004faa:	4a7e      	ldr	r2, [pc, #504]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8004fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fb2:	4b7c      	ldr	r3, [pc, #496]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc2:	4b79      	ldr	r3, [pc, #484]	@ (80051a8 <HAL_RCC_OscConfig+0x4bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d118      	bne.n	8005000 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fce:	4b76      	ldr	r3, [pc, #472]	@ (80051a8 <HAL_RCC_OscConfig+0x4bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a75      	ldr	r2, [pc, #468]	@ (80051a8 <HAL_RCC_OscConfig+0x4bc>)
 8004fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fda:	f7fd fca3 	bl	8002924 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe2:	f7fd fc9f 	bl	8002924 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e183      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80051a8 <HAL_RCC_OscConfig+0x4bc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d108      	bne.n	800501a <HAL_RCC_OscConfig+0x32e>
 8005008:	4b66      	ldr	r3, [pc, #408]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500e:	4a65      	ldr	r2, [pc, #404]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005018:	e024      	b.n	8005064 <HAL_RCC_OscConfig+0x378>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b05      	cmp	r3, #5
 8005020:	d110      	bne.n	8005044 <HAL_RCC_OscConfig+0x358>
 8005022:	4b60      	ldr	r3, [pc, #384]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005028:	4a5e      	ldr	r2, [pc, #376]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 800502a:	f043 0304 	orr.w	r3, r3, #4
 800502e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005032:	4b5c      	ldr	r3, [pc, #368]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005038:	4a5a      	ldr	r2, [pc, #360]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005042:	e00f      	b.n	8005064 <HAL_RCC_OscConfig+0x378>
 8005044:	4b57      	ldr	r3, [pc, #348]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504a:	4a56      	ldr	r2, [pc, #344]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 800504c:	f023 0301 	bic.w	r3, r3, #1
 8005050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005054:	4b53      	ldr	r3, [pc, #332]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505a:	4a52      	ldr	r2, [pc, #328]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 800505c:	f023 0304 	bic.w	r3, r3, #4
 8005060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d016      	beq.n	800509a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fd fc5a 	bl	8002924 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005072:	e00a      	b.n	800508a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005074:	f7fd fc56 	bl	8002924 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e138      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508a:	4b46      	ldr	r3, [pc, #280]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0ed      	beq.n	8005074 <HAL_RCC_OscConfig+0x388>
 8005098:	e015      	b.n	80050c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509a:	f7fd fc43 	bl	8002924 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050a0:	e00a      	b.n	80050b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a2:	f7fd fc3f 	bl	8002924 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e121      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b8:	4b3a      	ldr	r3, [pc, #232]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1ed      	bne.n	80050a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050c6:	7ffb      	ldrb	r3, [r7, #31]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d105      	bne.n	80050d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050cc:	4b35      	ldr	r3, [pc, #212]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 80050ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d0:	4a34      	ldr	r2, [pc, #208]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 80050d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d03c      	beq.n	800515e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01c      	beq.n	8005126 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050ec:	4b2d      	ldr	r3, [pc, #180]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 80050ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050f2:	4a2c      	ldr	r2, [pc, #176]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fc:	f7fd fc12 	bl	8002924 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005104:	f7fd fc0e 	bl	8002924 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e0f2      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005116:	4b23      	ldr	r3, [pc, #140]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8005118:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0ef      	beq.n	8005104 <HAL_RCC_OscConfig+0x418>
 8005124:	e01b      	b.n	800515e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005126:	4b1f      	ldr	r3, [pc, #124]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8005128:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800512c:	4a1d      	ldr	r2, [pc, #116]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fd fbf5 	bl	8002924 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800513e:	f7fd fbf1 	bl	8002924 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e0d5      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005150:	4b14      	ldr	r3, [pc, #80]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8005152:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1ef      	bne.n	800513e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80c9 	beq.w	80052fa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005168:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 030c 	and.w	r3, r3, #12
 8005170:	2b0c      	cmp	r3, #12
 8005172:	f000 8083 	beq.w	800527c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d15e      	bne.n	800523c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517e:	4b09      	ldr	r3, [pc, #36]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a08      	ldr	r2, [pc, #32]	@ (80051a4 <HAL_RCC_OscConfig+0x4b8>)
 8005184:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7fd fbcb 	bl	8002924 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005190:	e00c      	b.n	80051ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005192:	f7fd fbc7 	bl	8002924 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d905      	bls.n	80051ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e0ab      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
 80051a4:	40021000 	.word	0x40021000
 80051a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ac:	4b55      	ldr	r3, [pc, #340]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ec      	bne.n	8005192 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051b8:	4b52      	ldr	r3, [pc, #328]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	4b52      	ldr	r3, [pc, #328]	@ (8005308 <HAL_RCC_OscConfig+0x61c>)
 80051be:	4013      	ands	r3, r2
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6a11      	ldr	r1, [r2, #32]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051c8:	3a01      	subs	r2, #1
 80051ca:	0112      	lsls	r2, r2, #4
 80051cc:	4311      	orrs	r1, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80051d2:	0212      	lsls	r2, r2, #8
 80051d4:	4311      	orrs	r1, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051da:	0852      	lsrs	r2, r2, #1
 80051dc:	3a01      	subs	r2, #1
 80051de:	0552      	lsls	r2, r2, #21
 80051e0:	4311      	orrs	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051e6:	0852      	lsrs	r2, r2, #1
 80051e8:	3a01      	subs	r2, #1
 80051ea:	0652      	lsls	r2, r2, #25
 80051ec:	4311      	orrs	r1, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051f2:	06d2      	lsls	r2, r2, #27
 80051f4:	430a      	orrs	r2, r1
 80051f6:	4943      	ldr	r1, [pc, #268]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051fc:	4b41      	ldr	r3, [pc, #260]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a40      	ldr	r2, [pc, #256]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 8005202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005206:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005208:	4b3e      	ldr	r3, [pc, #248]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a3d      	ldr	r2, [pc, #244]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 800520e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005212:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fd fb86 	bl	8002924 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521c:	f7fd fb82 	bl	8002924 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e066      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522e:	4b35      	ldr	r3, [pc, #212]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x530>
 800523a:	e05e      	b.n	80052fa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523c:	4b31      	ldr	r3, [pc, #196]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a30      	ldr	r2, [pc, #192]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 8005242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fd fb6c 	bl	8002924 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005250:	f7fd fb68 	bl	8002924 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e04c      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005262:	4b28      	ldr	r3, [pc, #160]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800526e:	4b25      	ldr	r3, [pc, #148]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	4924      	ldr	r1, [pc, #144]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 8005274:	4b25      	ldr	r3, [pc, #148]	@ (800530c <HAL_RCC_OscConfig+0x620>)
 8005276:	4013      	ands	r3, r2
 8005278:	60cb      	str	r3, [r1, #12]
 800527a:	e03e      	b.n	80052fa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e039      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005288:	4b1e      	ldr	r3, [pc, #120]	@ (8005304 <HAL_RCC_OscConfig+0x618>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f003 0203 	and.w	r2, r3, #3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	429a      	cmp	r2, r3
 800529a:	d12c      	bne.n	80052f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	3b01      	subs	r3, #1
 80052a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d123      	bne.n	80052f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d11b      	bne.n	80052f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d113      	bne.n	80052f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	3b01      	subs	r3, #1
 80052dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d109      	bne.n	80052f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	3b01      	subs	r3, #1
 80052f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d001      	beq.n	80052fa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3720      	adds	r7, #32
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000
 8005308:	019f800c 	.word	0x019f800c
 800530c:	feeefffc 	.word	0xfeeefffc

08005310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e11e      	b.n	8005566 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	4b91      	ldr	r3, [pc, #580]	@ (8005570 <HAL_RCC_ClockConfig+0x260>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d910      	bls.n	8005358 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b8e      	ldr	r3, [pc, #568]	@ (8005570 <HAL_RCC_ClockConfig+0x260>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	498c      	ldr	r1, [pc, #560]	@ (8005570 <HAL_RCC_ClockConfig+0x260>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b8a      	ldr	r3, [pc, #552]	@ (8005570 <HAL_RCC_ClockConfig+0x260>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e106      	b.n	8005566 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d073      	beq.n	800544c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d129      	bne.n	80053c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536c:	4b81      	ldr	r3, [pc, #516]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0f4      	b.n	8005566 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800537c:	f000 f9ce 	bl	800571c <RCC_GetSysClockFreqFromPLLSource>
 8005380:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4a7c      	ldr	r2, [pc, #496]	@ (8005578 <HAL_RCC_ClockConfig+0x268>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d93f      	bls.n	800540a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800538a:	4b7a      	ldr	r3, [pc, #488]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d033      	beq.n	800540a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d12f      	bne.n	800540a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053aa:	4b72      	ldr	r3, [pc, #456]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053b2:	4a70      	ldr	r2, [pc, #448]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 80053b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053ba:	2380      	movs	r3, #128	@ 0x80
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e024      	b.n	800540a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d107      	bne.n	80053d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e0c6      	b.n	8005566 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d8:	4b66      	ldr	r3, [pc, #408]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0be      	b.n	8005566 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053e8:	f000 f8ce 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 80053ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	4a61      	ldr	r2, [pc, #388]	@ (8005578 <HAL_RCC_ClockConfig+0x268>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d909      	bls.n	800540a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053f6:	4b5f      	ldr	r3, [pc, #380]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053fe:	4a5d      	ldr	r2, [pc, #372]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 8005400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005404:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800540a:	4b5a      	ldr	r3, [pc, #360]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f023 0203 	bic.w	r2, r3, #3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	4957      	ldr	r1, [pc, #348]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 8005418:	4313      	orrs	r3, r2
 800541a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800541c:	f7fd fa82 	bl	8002924 <HAL_GetTick>
 8005420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005422:	e00a      	b.n	800543a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005424:	f7fd fa7e 	bl	8002924 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005432:	4293      	cmp	r3, r2
 8005434:	d901      	bls.n	800543a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e095      	b.n	8005566 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	4b4e      	ldr	r3, [pc, #312]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 020c 	and.w	r2, r3, #12
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	429a      	cmp	r2, r3
 800544a:	d1eb      	bne.n	8005424 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d023      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005464:	4b43      	ldr	r3, [pc, #268]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4a42      	ldr	r2, [pc, #264]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 800546a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800546e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800547c:	4b3d      	ldr	r3, [pc, #244]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005484:	4a3b      	ldr	r2, [pc, #236]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 8005486:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800548a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800548c:	4b39      	ldr	r3, [pc, #228]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4936      	ldr	r1, [pc, #216]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
 800549e:	e008      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b80      	cmp	r3, #128	@ 0x80
 80054a4:	d105      	bne.n	80054b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054a6:	4b33      	ldr	r3, [pc, #204]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	4a32      	ldr	r2, [pc, #200]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 80054ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005570 <HAL_RCC_ClockConfig+0x260>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d21d      	bcs.n	80054fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005570 <HAL_RCC_ClockConfig+0x260>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f023 020f 	bic.w	r2, r3, #15
 80054c8:	4929      	ldr	r1, [pc, #164]	@ (8005570 <HAL_RCC_ClockConfig+0x260>)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054d0:	f7fd fa28 	bl	8002924 <HAL_GetTick>
 80054d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d6:	e00a      	b.n	80054ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d8:	f7fd fa24 	bl	8002924 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e03b      	b.n	8005566 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ee:	4b20      	ldr	r3, [pc, #128]	@ (8005570 <HAL_RCC_ClockConfig+0x260>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d1ed      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005508:	4b1a      	ldr	r3, [pc, #104]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4917      	ldr	r1, [pc, #92]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 8005516:	4313      	orrs	r3, r2
 8005518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005526:	4b13      	ldr	r3, [pc, #76]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	490f      	ldr	r1, [pc, #60]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 8005536:	4313      	orrs	r3, r2
 8005538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800553a:	f000 f825 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 800553e:	4602      	mov	r2, r0
 8005540:	4b0c      	ldr	r3, [pc, #48]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	490c      	ldr	r1, [pc, #48]	@ (800557c <HAL_RCC_ClockConfig+0x26c>)
 800554c:	5ccb      	ldrb	r3, [r1, r3]
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	fa22 f303 	lsr.w	r3, r2, r3
 8005556:	4a0a      	ldr	r2, [pc, #40]	@ (8005580 <HAL_RCC_ClockConfig+0x270>)
 8005558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800555a:	4b0a      	ldr	r3, [pc, #40]	@ (8005584 <HAL_RCC_ClockConfig+0x274>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f7fc f9a0 	bl	80018a4 <HAL_InitTick>
 8005564:	4603      	mov	r3, r0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40022000 	.word	0x40022000
 8005574:	40021000 	.word	0x40021000
 8005578:	04c4b400 	.word	0x04c4b400
 800557c:	0800ed78 	.word	0x0800ed78
 8005580:	20000000 	.word	0x20000000
 8005584:	20000004 	.word	0x20000004

08005588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800558e:	4b2c      	ldr	r3, [pc, #176]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	2b04      	cmp	r3, #4
 8005598:	d102      	bne.n	80055a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800559a:	4b2a      	ldr	r3, [pc, #168]	@ (8005644 <HAL_RCC_GetSysClockFreq+0xbc>)
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	e047      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055a0:	4b27      	ldr	r3, [pc, #156]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 030c 	and.w	r3, r3, #12
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d102      	bne.n	80055b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055ac:	4b25      	ldr	r3, [pc, #148]	@ (8005644 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	e03e      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055b2:	4b23      	ldr	r3, [pc, #140]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 030c 	and.w	r3, r3, #12
 80055ba:	2b0c      	cmp	r3, #12
 80055bc:	d136      	bne.n	800562c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055be:	4b20      	ldr	r3, [pc, #128]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	3301      	adds	r3, #1
 80055d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d10c      	bne.n	80055f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055dc:	4a19      	ldr	r2, [pc, #100]	@ (8005644 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e4:	4a16      	ldr	r2, [pc, #88]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e6:	68d2      	ldr	r2, [r2, #12]
 80055e8:	0a12      	lsrs	r2, r2, #8
 80055ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055ee:	fb02 f303 	mul.w	r3, r2, r3
 80055f2:	617b      	str	r3, [r7, #20]
      break;
 80055f4:	e00c      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055f6:	4a13      	ldr	r2, [pc, #76]	@ (8005644 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fe:	4a10      	ldr	r2, [pc, #64]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005600:	68d2      	ldr	r2, [r2, #12]
 8005602:	0a12      	lsrs	r2, r2, #8
 8005604:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005608:	fb02 f303 	mul.w	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
      break;
 800560e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005610:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	0e5b      	lsrs	r3, r3, #25
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	3301      	adds	r3, #1
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	fbb2 f3f3 	udiv	r3, r2, r3
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	e001      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005630:	693b      	ldr	r3, [r7, #16]
}
 8005632:	4618      	mov	r0, r3
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40021000 	.word	0x40021000
 8005644:	00f42400 	.word	0x00f42400

08005648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800564c:	4b03      	ldr	r3, [pc, #12]	@ (800565c <HAL_RCC_GetHCLKFreq+0x14>)
 800564e:	681b      	ldr	r3, [r3, #0]
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000000 	.word	0x20000000

08005660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005664:	f7ff fff0 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	4b06      	ldr	r3, [pc, #24]	@ (8005684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	4904      	ldr	r1, [pc, #16]	@ (8005688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005676:	5ccb      	ldrb	r3, [r1, r3]
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40021000 	.word	0x40021000
 8005688:	0800ed88 	.word	0x0800ed88

0800568c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005690:	f7ff ffda 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	0adb      	lsrs	r3, r3, #11
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	4904      	ldr	r1, [pc, #16]	@ (80056b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40021000 	.word	0x40021000
 80056b4:	0800ed88 	.word	0x0800ed88

080056b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	220f      	movs	r2, #15
 80056c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80056c8:	4b12      	ldr	r3, [pc, #72]	@ (8005714 <HAL_RCC_GetClockConfig+0x5c>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0203 	and.w	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80056d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005714 <HAL_RCC_GetClockConfig+0x5c>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80056e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005714 <HAL_RCC_GetClockConfig+0x5c>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80056ec:	4b09      	ldr	r3, [pc, #36]	@ (8005714 <HAL_RCC_GetClockConfig+0x5c>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	08db      	lsrs	r3, r3, #3
 80056f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80056fa:	4b07      	ldr	r3, [pc, #28]	@ (8005718 <HAL_RCC_GetClockConfig+0x60>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	601a      	str	r2, [r3, #0]
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40021000 	.word	0x40021000
 8005718:	40022000 	.word	0x40022000

0800571c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005722:	4b1e      	ldr	r3, [pc, #120]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800572c:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	091b      	lsrs	r3, r3, #4
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	3301      	adds	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d10c      	bne.n	800575a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005740:	4a17      	ldr	r2, [pc, #92]	@ (80057a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	4a14      	ldr	r2, [pc, #80]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800574a:	68d2      	ldr	r2, [r2, #12]
 800574c:	0a12      	lsrs	r2, r2, #8
 800574e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	617b      	str	r3, [r7, #20]
    break;
 8005758:	e00c      	b.n	8005774 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800575a:	4a11      	ldr	r2, [pc, #68]	@ (80057a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	4a0e      	ldr	r2, [pc, #56]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005764:	68d2      	ldr	r2, [r2, #12]
 8005766:	0a12      	lsrs	r2, r2, #8
 8005768:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800576c:	fb02 f303 	mul.w	r3, r2, r3
 8005770:	617b      	str	r3, [r7, #20]
    break;
 8005772:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005774:	4b09      	ldr	r3, [pc, #36]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	0e5b      	lsrs	r3, r3, #25
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	3301      	adds	r3, #1
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800578e:	687b      	ldr	r3, [r7, #4]
}
 8005790:	4618      	mov	r0, r3
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	40021000 	.word	0x40021000
 80057a0:	00f42400 	.word	0x00f42400

080057a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057ac:	2300      	movs	r3, #0
 80057ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057b0:	2300      	movs	r3, #0
 80057b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8098 	beq.w	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c2:	2300      	movs	r3, #0
 80057c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057c6:	4b43      	ldr	r3, [pc, #268]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	4b40      	ldr	r3, [pc, #256]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d6:	4a3f      	ldr	r2, [pc, #252]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80057de:	4b3d      	ldr	r3, [pc, #244]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057e6:	60bb      	str	r3, [r7, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ea:	2301      	movs	r3, #1
 80057ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ee:	4b3a      	ldr	r3, [pc, #232]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a39      	ldr	r2, [pc, #228]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057fa:	f7fd f893 	bl	8002924 <HAL_GetTick>
 80057fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005800:	e009      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005802:	f7fd f88f 	bl	8002924 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d902      	bls.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	74fb      	strb	r3, [r7, #19]
        break;
 8005814:	e005      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005816:	4b30      	ldr	r3, [pc, #192]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0ef      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005822:	7cfb      	ldrb	r3, [r7, #19]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d159      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005828:	4b2a      	ldr	r3, [pc, #168]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005832:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d01e      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	429a      	cmp	r2, r3
 8005842:	d019      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005844:	4b23      	ldr	r3, [pc, #140]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800584e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005850:	4b20      	ldr	r3, [pc, #128]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005856:	4a1f      	ldr	r2, [pc, #124]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800585c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005860:	4b1c      	ldr	r3, [pc, #112]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005866:	4a1b      	ldr	r2, [pc, #108]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800586c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005870:	4a18      	ldr	r2, [pc, #96]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d016      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005882:	f7fd f84f 	bl	8002924 <HAL_GetTick>
 8005886:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005888:	e00b      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588a:	f7fd f84b 	bl	8002924 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005898:	4293      	cmp	r3, r2
 800589a:	d902      	bls.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	74fb      	strb	r3, [r7, #19]
            break;
 80058a0:	e006      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a2:	4b0c      	ldr	r3, [pc, #48]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0ec      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058b0:	7cfb      	ldrb	r3, [r7, #19]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058b6:	4b07      	ldr	r3, [pc, #28]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c4:	4903      	ldr	r1, [pc, #12]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80058cc:	e008      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ce:	7cfb      	ldrb	r3, [r7, #19]
 80058d0:	74bb      	strb	r3, [r7, #18]
 80058d2:	e005      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	7cfb      	ldrb	r3, [r7, #19]
 80058de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058e0:	7c7b      	ldrb	r3, [r7, #17]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d105      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e6:	4ba6      	ldr	r3, [pc, #664]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ea:	4aa5      	ldr	r2, [pc, #660]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058fe:	4ba0      	ldr	r3, [pc, #640]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005904:	f023 0203 	bic.w	r2, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	499c      	ldr	r1, [pc, #624]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005920:	4b97      	ldr	r3, [pc, #604]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005926:	f023 020c 	bic.w	r2, r3, #12
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	4994      	ldr	r1, [pc, #592]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005942:	4b8f      	ldr	r3, [pc, #572]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005948:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	498b      	ldr	r1, [pc, #556]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005964:	4b86      	ldr	r3, [pc, #536]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	4983      	ldr	r1, [pc, #524]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005986:	4b7e      	ldr	r3, [pc, #504]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	497a      	ldr	r1, [pc, #488]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059a8:	4b75      	ldr	r3, [pc, #468]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	4972      	ldr	r1, [pc, #456]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	4969      	ldr	r1, [pc, #420]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059ec:	4b64      	ldr	r3, [pc, #400]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	4961      	ldr	r1, [pc, #388]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	4958      	ldr	r1, [pc, #352]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d015      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a30:	4b53      	ldr	r3, [pc, #332]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3e:	4950      	ldr	r1, [pc, #320]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a4e:	d105      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a50:	4b4b      	ldr	r3, [pc, #300]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4a4a      	ldr	r2, [pc, #296]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a5a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d015      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a68:	4b45      	ldr	r3, [pc, #276]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	4942      	ldr	r1, [pc, #264]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a86:	d105      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a88:	4b3d      	ldr	r3, [pc, #244]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a92:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d015      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005aa0:	4b37      	ldr	r3, [pc, #220]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aae:	4934      	ldr	r1, [pc, #208]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005abe:	d105      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d015      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ad8:	4b29      	ldr	r3, [pc, #164]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ade:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae6:	4926      	ldr	r1, [pc, #152]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005af6:	d105      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af8:	4b21      	ldr	r3, [pc, #132]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4a20      	ldr	r2, [pc, #128]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005afe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d015      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b10:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1e:	4918      	ldr	r1, [pc, #96]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b2e:	d105      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b30:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4a12      	ldr	r2, [pc, #72]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d015      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b48:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b56:	490a      	ldr	r1, [pc, #40]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b66:	d105      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b68:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a04      	ldr	r2, [pc, #16]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b74:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000

08005b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e09d      	b.n	8005cd2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d108      	bne.n	8005bb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba6:	d009      	beq.n	8005bbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	61da      	str	r2, [r3, #28]
 8005bae:	e005      	b.n	8005bbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fb fdf0 	bl	80017bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bfc:	d902      	bls.n	8005c04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e002      	b.n	8005c0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c12:	d007      	beq.n	8005c24 <HAL_SPI_Init+0xa0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c66:	ea42 0103 	orr.w	r1, r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	f003 0204 	and.w	r2, r3, #4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ca0:	ea42 0103 	orr.w	r1, r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10e      	bne.n	8005d1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d009      	beq.n	8005d1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d004      	beq.n	8005d1c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
    return;
 8005d1a:	e0ce      	b.n	8005eba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_SPI_IRQHandler+0x5e>
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	4798      	blx	r3
    return;
 8005d38:	e0bf      	b.n	8005eba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <HAL_SPI_IRQHandler+0x7e>
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d105      	bne.n	8005d5a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 80b0 	beq.w	8005eba <HAL_SPI_IRQHandler+0x1de>
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80aa 	beq.w	8005eba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d023      	beq.n	8005db8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d011      	beq.n	8005da0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d80:	f043 0204 	orr.w	r2, r3, #4
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	e00b      	b.n	8005db8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	693b      	ldr	r3, [r7, #16]
        return;
 8005db6:	e080      	b.n	8005eba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d014      	beq.n	8005dec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc6:	f043 0201 	orr.w	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00c      	beq.n	8005e10 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dfa:	f043 0208 	orr.w	r2, r3, #8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d04f      	beq.n	8005eb8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d104      	bne.n	8005e44 <HAL_SPI_IRQHandler+0x168>
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d034      	beq.n	8005eae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0203 	bic.w	r2, r2, #3
 8005e52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d011      	beq.n	8005e80 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e60:	4a17      	ldr	r2, [pc, #92]	@ (8005ec0 <HAL_SPI_IRQHandler+0x1e4>)
 8005e62:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fe fb78 	bl	800455e <HAL_DMA_Abort_IT>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d016      	beq.n	8005eb6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ec0 <HAL_SPI_IRQHandler+0x1e4>)
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fe fb62 	bl	800455e <HAL_DMA_Abort_IT>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ea4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005eac:	e003      	b.n	8005eb6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f808 	bl	8005ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005eb4:	e000      	b.n	8005eb8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005eb6:	bf00      	nop
    return;
 8005eb8:	bf00      	nop
  }
}
 8005eba:	3720      	adds	r7, #32
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	08005ed9 	.word	0x08005ed9

08005ec4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f7ff ffe5 	bl	8005ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e049      	b.n	8005fa8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7fb ffb7 	bl	8001e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f000 fec3 	bl	8006ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d001      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e04a      	b.n	800605e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a21      	ldr	r2, [pc, #132]	@ (800606c <HAL_TIM_Base_Start_IT+0xbc>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d018      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x6c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff2:	d013      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x6c>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <HAL_TIM_Base_Start_IT+0xc0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00e      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x6c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1c      	ldr	r2, [pc, #112]	@ (8006074 <HAL_TIM_Base_Start_IT+0xc4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d009      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x6c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1a      	ldr	r2, [pc, #104]	@ (8006078 <HAL_TIM_Base_Start_IT+0xc8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x6c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a19      	ldr	r2, [pc, #100]	@ (800607c <HAL_TIM_Base_Start_IT+0xcc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d115      	bne.n	8006048 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	4b17      	ldr	r3, [pc, #92]	@ (8006080 <HAL_TIM_Base_Start_IT+0xd0>)
 8006024:	4013      	ands	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b06      	cmp	r3, #6
 800602c:	d015      	beq.n	800605a <HAL_TIM_Base_Start_IT+0xaa>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006034:	d011      	beq.n	800605a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0201 	orr.w	r2, r2, #1
 8006044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	e008      	b.n	800605a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e000      	b.n	800605c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	00010007 	.word	0x00010007

08006084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e049      	b.n	800612a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f841 	bl	8006132 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f000 fe02 	bl	8006ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
	...

08006148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <HAL_TIM_PWM_Start+0x24>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	bf14      	ite	ne
 8006164:	2301      	movne	r3, #1
 8006166:	2300      	moveq	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	e03c      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b04      	cmp	r3, #4
 8006170:	d109      	bne.n	8006186 <HAL_TIM_PWM_Start+0x3e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b01      	cmp	r3, #1
 800617c:	bf14      	ite	ne
 800617e:	2301      	movne	r3, #1
 8006180:	2300      	moveq	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	e02f      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d109      	bne.n	80061a0 <HAL_TIM_PWM_Start+0x58>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e022      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b0c      	cmp	r3, #12
 80061a4:	d109      	bne.n	80061ba <HAL_TIM_PWM_Start+0x72>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	bf14      	ite	ne
 80061b2:	2301      	movne	r3, #1
 80061b4:	2300      	moveq	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	e015      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d109      	bne.n	80061d4 <HAL_TIM_PWM_Start+0x8c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e008      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	bf14      	ite	ne
 80061e0:	2301      	movne	r3, #1
 80061e2:	2300      	moveq	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e097      	b.n	800631e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Start+0xb6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061fc:	e023      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b04      	cmp	r3, #4
 8006202:	d104      	bne.n	800620e <HAL_TIM_PWM_Start+0xc6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800620c:	e01b      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d104      	bne.n	800621e <HAL_TIM_PWM_Start+0xd6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800621c:	e013      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b0c      	cmp	r3, #12
 8006222:	d104      	bne.n	800622e <HAL_TIM_PWM_Start+0xe6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800622c:	e00b      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b10      	cmp	r3, #16
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Start+0xf6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800623c:	e003      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2201      	movs	r2, #1
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f001 f96a 	bl	8007528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a33      	ldr	r2, [pc, #204]	@ (8006328 <HAL_TIM_PWM_Start+0x1e0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_TIM_PWM_Start+0x13e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a32      	ldr	r2, [pc, #200]	@ (800632c <HAL_TIM_PWM_Start+0x1e4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <HAL_TIM_PWM_Start+0x13e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a30      	ldr	r2, [pc, #192]	@ (8006330 <HAL_TIM_PWM_Start+0x1e8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_TIM_PWM_Start+0x13e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2f      	ldr	r2, [pc, #188]	@ (8006334 <HAL_TIM_PWM_Start+0x1ec>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_TIM_PWM_Start+0x13e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a2d      	ldr	r2, [pc, #180]	@ (8006338 <HAL_TIM_PWM_Start+0x1f0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d101      	bne.n	800628a <HAL_TIM_PWM_Start+0x142>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <HAL_TIM_PWM_Start+0x144>
 800628a:	2300      	movs	r3, #0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d007      	beq.n	80062a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800629e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a20      	ldr	r2, [pc, #128]	@ (8006328 <HAL_TIM_PWM_Start+0x1e0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d018      	beq.n	80062dc <HAL_TIM_PWM_Start+0x194>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b2:	d013      	beq.n	80062dc <HAL_TIM_PWM_Start+0x194>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a20      	ldr	r2, [pc, #128]	@ (800633c <HAL_TIM_PWM_Start+0x1f4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00e      	beq.n	80062dc <HAL_TIM_PWM_Start+0x194>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006340 <HAL_TIM_PWM_Start+0x1f8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d009      	beq.n	80062dc <HAL_TIM_PWM_Start+0x194>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a17      	ldr	r2, [pc, #92]	@ (800632c <HAL_TIM_PWM_Start+0x1e4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_TIM_PWM_Start+0x194>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a16      	ldr	r2, [pc, #88]	@ (8006330 <HAL_TIM_PWM_Start+0x1e8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d115      	bne.n	8006308 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	4b18      	ldr	r3, [pc, #96]	@ (8006344 <HAL_TIM_PWM_Start+0x1fc>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d015      	beq.n	800631a <HAL_TIM_PWM_Start+0x1d2>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f4:	d011      	beq.n	800631a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006306:	e008      	b.n	800631a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	e000      	b.n	800631c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40013400 	.word	0x40013400
 8006330:	40014000 	.word	0x40014000
 8006334:	40014400 	.word	0x40014400
 8006338:	40014800 	.word	0x40014800
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	00010007 	.word	0x00010007

08006348 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2200      	movs	r2, #0
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f001 f8e4 	bl	8007528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a3e      	ldr	r2, [pc, #248]	@ (8006460 <HAL_TIM_PWM_Stop+0x118>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d013      	beq.n	8006392 <HAL_TIM_PWM_Stop+0x4a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a3d      	ldr	r2, [pc, #244]	@ (8006464 <HAL_TIM_PWM_Stop+0x11c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00e      	beq.n	8006392 <HAL_TIM_PWM_Stop+0x4a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a3b      	ldr	r2, [pc, #236]	@ (8006468 <HAL_TIM_PWM_Stop+0x120>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d009      	beq.n	8006392 <HAL_TIM_PWM_Stop+0x4a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a3a      	ldr	r2, [pc, #232]	@ (800646c <HAL_TIM_PWM_Stop+0x124>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d004      	beq.n	8006392 <HAL_TIM_PWM_Stop+0x4a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a38      	ldr	r2, [pc, #224]	@ (8006470 <HAL_TIM_PWM_Stop+0x128>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d101      	bne.n	8006396 <HAL_TIM_PWM_Stop+0x4e>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <HAL_TIM_PWM_Stop+0x50>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d017      	beq.n	80063cc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a1a      	ldr	r2, [r3, #32]
 80063a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10f      	bne.n	80063cc <HAL_TIM_PWM_Stop+0x84>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6a1a      	ldr	r2, [r3, #32]
 80063b2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d107      	bne.n	80063cc <HAL_TIM_PWM_Stop+0x84>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6a1a      	ldr	r2, [r3, #32]
 80063d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10f      	bne.n	80063fc <HAL_TIM_PWM_Stop+0xb4>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6a1a      	ldr	r2, [r3, #32]
 80063e2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d107      	bne.n	80063fc <HAL_TIM_PWM_Stop+0xb4>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0201 	bic.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d104      	bne.n	800640c <HAL_TIM_PWM_Stop+0xc4>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800640a:	e023      	b.n	8006454 <HAL_TIM_PWM_Stop+0x10c>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b04      	cmp	r3, #4
 8006410:	d104      	bne.n	800641c <HAL_TIM_PWM_Stop+0xd4>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800641a:	e01b      	b.n	8006454 <HAL_TIM_PWM_Stop+0x10c>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b08      	cmp	r3, #8
 8006420:	d104      	bne.n	800642c <HAL_TIM_PWM_Stop+0xe4>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800642a:	e013      	b.n	8006454 <HAL_TIM_PWM_Stop+0x10c>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b0c      	cmp	r3, #12
 8006430:	d104      	bne.n	800643c <HAL_TIM_PWM_Stop+0xf4>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800643a:	e00b      	b.n	8006454 <HAL_TIM_PWM_Stop+0x10c>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b10      	cmp	r3, #16
 8006440:	d104      	bne.n	800644c <HAL_TIM_PWM_Stop+0x104>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800644a:	e003      	b.n	8006454 <HAL_TIM_PWM_Stop+0x10c>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40012c00 	.word	0x40012c00
 8006464:	40013400 	.word	0x40013400
 8006468:	40014000 	.word	0x40014000
 800646c:	40014400 	.word	0x40014400
 8006470:	40014800 	.word	0x40014800

08006474 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e097      	b.n	80065b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fb fd1d 	bl	8001edc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2202      	movs	r2, #2
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80064b8:	f023 0307 	bic.w	r3, r3, #7
 80064bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3304      	adds	r3, #4
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f000 fbff 	bl	8006ccc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	4313      	orrs	r3, r2
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006514:	f023 030c 	bic.w	r3, r3, #12
 8006518:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006520:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	4313      	orrs	r3, r2
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	011a      	lsls	r2, r3, #4
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	031b      	lsls	r3, r3, #12
 8006544:	4313      	orrs	r3, r2
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006552:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800655a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	4313      	orrs	r3, r2
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d020      	beq.n	8006624 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01b      	beq.n	8006624 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0202 	mvn.w	r2, #2
 80065f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fb40 	bl	8006c90 <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fb32 	bl	8006c7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fb43 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d020      	beq.n	8006670 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01b      	beq.n	8006670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0204 	mvn.w	r2, #4
 8006640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2202      	movs	r2, #2
 8006646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fb1a 	bl	8006c90 <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fb0c 	bl	8006c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fb1d 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d020      	beq.n	80066bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01b      	beq.n	80066bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0208 	mvn.w	r2, #8
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2204      	movs	r2, #4
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 faf4 	bl	8006c90 <HAL_TIM_IC_CaptureCallback>
 80066a8:	e005      	b.n	80066b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fae6 	bl	8006c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 faf7 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 0310 	and.w	r3, r3, #16
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d020      	beq.n	8006708 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01b      	beq.n	8006708 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0210 	mvn.w	r2, #16
 80066d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2208      	movs	r2, #8
 80066de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 face 	bl	8006c90 <HAL_TIM_IC_CaptureCallback>
 80066f4:	e005      	b.n	8006702 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fac0 	bl	8006c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fad1 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0201 	mvn.w	r2, #1
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fa fff4 	bl	8001714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00c      	beq.n	800675a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 f937 	bl	80079c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00c      	beq.n	800677e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 f92f 	bl	80079dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00c      	beq.n	80067a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800679a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fa8b 	bl	8006cb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00c      	beq.n	80067c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f06f 0220 	mvn.w	r2, #32
 80067be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 f8f7 	bl	80079b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00c      	beq.n	80067ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80067e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 f903 	bl	80079f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00c      	beq.n	800680e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 f8fb 	bl	8007a04 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00c      	beq.n	8006832 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800682a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 f8f3 	bl	8007a18 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00c      	beq.n	8006856 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800684e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 f8eb 	bl	8007a2c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800687a:	2302      	movs	r3, #2
 800687c:	e0ff      	b.n	8006a7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b14      	cmp	r3, #20
 800688a:	f200 80f0 	bhi.w	8006a6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800688e:	a201      	add	r2, pc, #4	@ (adr r2, 8006894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068e9 	.word	0x080068e9
 8006898:	08006a6f 	.word	0x08006a6f
 800689c:	08006a6f 	.word	0x08006a6f
 80068a0:	08006a6f 	.word	0x08006a6f
 80068a4:	08006929 	.word	0x08006929
 80068a8:	08006a6f 	.word	0x08006a6f
 80068ac:	08006a6f 	.word	0x08006a6f
 80068b0:	08006a6f 	.word	0x08006a6f
 80068b4:	0800696b 	.word	0x0800696b
 80068b8:	08006a6f 	.word	0x08006a6f
 80068bc:	08006a6f 	.word	0x08006a6f
 80068c0:	08006a6f 	.word	0x08006a6f
 80068c4:	080069ab 	.word	0x080069ab
 80068c8:	08006a6f 	.word	0x08006a6f
 80068cc:	08006a6f 	.word	0x08006a6f
 80068d0:	08006a6f 	.word	0x08006a6f
 80068d4:	080069ed 	.word	0x080069ed
 80068d8:	08006a6f 	.word	0x08006a6f
 80068dc:	08006a6f 	.word	0x08006a6f
 80068e0:	08006a6f 	.word	0x08006a6f
 80068e4:	08006a2d 	.word	0x08006a2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fa88 	bl	8006e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0208 	orr.w	r2, r2, #8
 8006902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0204 	bic.w	r2, r2, #4
 8006912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6999      	ldr	r1, [r3, #24]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	619a      	str	r2, [r3, #24]
      break;
 8006926:	e0a5      	b.n	8006a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 faf8 	bl	8006f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6999      	ldr	r1, [r3, #24]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	021a      	lsls	r2, r3, #8
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	619a      	str	r2, [r3, #24]
      break;
 8006968:	e084      	b.n	8006a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fb61 	bl	8007038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0208 	orr.w	r2, r2, #8
 8006984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0204 	bic.w	r2, r2, #4
 8006994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69d9      	ldr	r1, [r3, #28]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	61da      	str	r2, [r3, #28]
      break;
 80069a8:	e064      	b.n	8006a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fbc9 	bl	8007148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69d9      	ldr	r1, [r3, #28]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	021a      	lsls	r2, r3, #8
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	61da      	str	r2, [r3, #28]
      break;
 80069ea:	e043      	b.n	8006a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fc32 	bl	800725c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0208 	orr.w	r2, r2, #8
 8006a06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 0204 	bic.w	r2, r2, #4
 8006a16:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	691a      	ldr	r2, [r3, #16]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006a2a:	e023      	b.n	8006a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fc76 	bl	8007324 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	021a      	lsls	r2, r3, #8
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006a6c:	e002      	b.n	8006a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
      break;
 8006a72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop

08006a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e0de      	b.n	8006c62 <HAL_TIM_ConfigClockSource+0x1da>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006ac2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a63      	ldr	r2, [pc, #396]	@ (8006c6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	f000 80a9 	beq.w	8006c36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ae4:	4a61      	ldr	r2, [pc, #388]	@ (8006c6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	f200 80ae 	bhi.w	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006aec:	4a60      	ldr	r2, [pc, #384]	@ (8006c70 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	f000 80a1 	beq.w	8006c36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006af4:	4a5e      	ldr	r2, [pc, #376]	@ (8006c70 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	f200 80a6 	bhi.w	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006afc:	4a5d      	ldr	r2, [pc, #372]	@ (8006c74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	f000 8099 	beq.w	8006c36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b04:	4a5b      	ldr	r2, [pc, #364]	@ (8006c74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	f200 809e 	bhi.w	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8006c78 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	f000 8091 	beq.w	8006c36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b14:	4a58      	ldr	r2, [pc, #352]	@ (8006c78 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	f200 8096 	bhi.w	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006b20:	f000 8089 	beq.w	8006c36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006b28:	f200 808e 	bhi.w	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b30:	d03e      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x128>
 8006b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b36:	f200 8087 	bhi.w	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b3e:	f000 8086 	beq.w	8006c4e <HAL_TIM_ConfigClockSource+0x1c6>
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b46:	d87f      	bhi.n	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b48:	2b70      	cmp	r3, #112	@ 0x70
 8006b4a:	d01a      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0xfa>
 8006b4c:	2b70      	cmp	r3, #112	@ 0x70
 8006b4e:	d87b      	bhi.n	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b50:	2b60      	cmp	r3, #96	@ 0x60
 8006b52:	d050      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16e>
 8006b54:	2b60      	cmp	r3, #96	@ 0x60
 8006b56:	d877      	bhi.n	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b58:	2b50      	cmp	r3, #80	@ 0x50
 8006b5a:	d03c      	beq.n	8006bd6 <HAL_TIM_ConfigClockSource+0x14e>
 8006b5c:	2b50      	cmp	r3, #80	@ 0x50
 8006b5e:	d873      	bhi.n	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b60:	2b40      	cmp	r3, #64	@ 0x40
 8006b62:	d058      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x18e>
 8006b64:	2b40      	cmp	r3, #64	@ 0x40
 8006b66:	d86f      	bhi.n	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b68:	2b30      	cmp	r3, #48	@ 0x30
 8006b6a:	d064      	beq.n	8006c36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b6c:	2b30      	cmp	r3, #48	@ 0x30
 8006b6e:	d86b      	bhi.n	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d060      	beq.n	8006c36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	d867      	bhi.n	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d05c      	beq.n	8006c36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b7c:	2b10      	cmp	r3, #16
 8006b7e:	d05a      	beq.n	8006c36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b80:	e062      	b.n	8006c48 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b92:	f000 fca9 	bl	80074e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ba4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	609a      	str	r2, [r3, #8]
      break;
 8006bae:	e04f      	b.n	8006c50 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bc0:	f000 fc92 	bl	80074e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bd2:	609a      	str	r2, [r3, #8]
      break;
 8006bd4:	e03c      	b.n	8006c50 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be2:	461a      	mov	r2, r3
 8006be4:	f000 fc04 	bl	80073f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2150      	movs	r1, #80	@ 0x50
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fc5d 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006bf4:	e02c      	b.n	8006c50 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c02:	461a      	mov	r2, r3
 8006c04:	f000 fc23 	bl	800744e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2160      	movs	r1, #96	@ 0x60
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fc4d 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006c14:	e01c      	b.n	8006c50 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c22:	461a      	mov	r2, r3
 8006c24:	f000 fbe4 	bl	80073f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2140      	movs	r1, #64	@ 0x40
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fc3d 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006c34:	e00c      	b.n	8006c50 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	4610      	mov	r0, r2
 8006c42:	f000 fc34 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006c46:	e003      	b.n	8006c50 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c4c:	e000      	b.n	8006c50 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006c4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	00100070 	.word	0x00100070
 8006c70:	00100040 	.word	0x00100040
 8006c74:	00100030 	.word	0x00100030
 8006c78:	00100020 	.word	0x00100020

08006c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a42      	ldr	r2, [pc, #264]	@ (8006de8 <TIM_Base_SetConfig+0x11c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00f      	beq.n	8006d04 <TIM_Base_SetConfig+0x38>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cea:	d00b      	beq.n	8006d04 <TIM_Base_SetConfig+0x38>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a3f      	ldr	r2, [pc, #252]	@ (8006dec <TIM_Base_SetConfig+0x120>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d007      	beq.n	8006d04 <TIM_Base_SetConfig+0x38>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a3e      	ldr	r2, [pc, #248]	@ (8006df0 <TIM_Base_SetConfig+0x124>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d003      	beq.n	8006d04 <TIM_Base_SetConfig+0x38>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8006df4 <TIM_Base_SetConfig+0x128>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d108      	bne.n	8006d16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a33      	ldr	r2, [pc, #204]	@ (8006de8 <TIM_Base_SetConfig+0x11c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d01b      	beq.n	8006d56 <TIM_Base_SetConfig+0x8a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d24:	d017      	beq.n	8006d56 <TIM_Base_SetConfig+0x8a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a30      	ldr	r2, [pc, #192]	@ (8006dec <TIM_Base_SetConfig+0x120>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d013      	beq.n	8006d56 <TIM_Base_SetConfig+0x8a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a2f      	ldr	r2, [pc, #188]	@ (8006df0 <TIM_Base_SetConfig+0x124>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d00f      	beq.n	8006d56 <TIM_Base_SetConfig+0x8a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2e      	ldr	r2, [pc, #184]	@ (8006df4 <TIM_Base_SetConfig+0x128>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00b      	beq.n	8006d56 <TIM_Base_SetConfig+0x8a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a2d      	ldr	r2, [pc, #180]	@ (8006df8 <TIM_Base_SetConfig+0x12c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d007      	beq.n	8006d56 <TIM_Base_SetConfig+0x8a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a2c      	ldr	r2, [pc, #176]	@ (8006dfc <TIM_Base_SetConfig+0x130>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d003      	beq.n	8006d56 <TIM_Base_SetConfig+0x8a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2b      	ldr	r2, [pc, #172]	@ (8006e00 <TIM_Base_SetConfig+0x134>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d108      	bne.n	8006d68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a16      	ldr	r2, [pc, #88]	@ (8006de8 <TIM_Base_SetConfig+0x11c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00f      	beq.n	8006db4 <TIM_Base_SetConfig+0xe8>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a17      	ldr	r2, [pc, #92]	@ (8006df4 <TIM_Base_SetConfig+0x128>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00b      	beq.n	8006db4 <TIM_Base_SetConfig+0xe8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a16      	ldr	r2, [pc, #88]	@ (8006df8 <TIM_Base_SetConfig+0x12c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d007      	beq.n	8006db4 <TIM_Base_SetConfig+0xe8>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a15      	ldr	r2, [pc, #84]	@ (8006dfc <TIM_Base_SetConfig+0x130>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d003      	beq.n	8006db4 <TIM_Base_SetConfig+0xe8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a14      	ldr	r2, [pc, #80]	@ (8006e00 <TIM_Base_SetConfig+0x134>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d103      	bne.n	8006dbc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d105      	bne.n	8006dda <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f023 0201 	bic.w	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	611a      	str	r2, [r3, #16]
  }
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800
 8006df4:	40013400 	.word	0x40013400
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40014400 	.word	0x40014400
 8006e00:	40014800 	.word	0x40014800

08006e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	f023 0201 	bic.w	r2, r3, #1
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0303 	bic.w	r3, r3, #3
 8006e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 0302 	bic.w	r3, r3, #2
 8006e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006f10 <TIM_OC1_SetConfig+0x10c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00f      	beq.n	8006e84 <TIM_OC1_SetConfig+0x80>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a2b      	ldr	r2, [pc, #172]	@ (8006f14 <TIM_OC1_SetConfig+0x110>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_OC1_SetConfig+0x80>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8006f18 <TIM_OC1_SetConfig+0x114>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_OC1_SetConfig+0x80>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a29      	ldr	r2, [pc, #164]	@ (8006f1c <TIM_OC1_SetConfig+0x118>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_OC1_SetConfig+0x80>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a28      	ldr	r2, [pc, #160]	@ (8006f20 <TIM_OC1_SetConfig+0x11c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d10c      	bne.n	8006e9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f023 0308 	bic.w	r3, r3, #8
 8006e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 0304 	bic.w	r3, r3, #4
 8006e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f10 <TIM_OC1_SetConfig+0x10c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00f      	beq.n	8006ec6 <TIM_OC1_SetConfig+0xc2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8006f14 <TIM_OC1_SetConfig+0x110>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00b      	beq.n	8006ec6 <TIM_OC1_SetConfig+0xc2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a19      	ldr	r2, [pc, #100]	@ (8006f18 <TIM_OC1_SetConfig+0x114>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d007      	beq.n	8006ec6 <TIM_OC1_SetConfig+0xc2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	@ (8006f1c <TIM_OC1_SetConfig+0x118>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d003      	beq.n	8006ec6 <TIM_OC1_SetConfig+0xc2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a17      	ldr	r2, [pc, #92]	@ (8006f20 <TIM_OC1_SetConfig+0x11c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d111      	bne.n	8006eea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	621a      	str	r2, [r3, #32]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	40012c00 	.word	0x40012c00
 8006f14:	40013400 	.word	0x40013400
 8006f18:	40014000 	.word	0x40014000
 8006f1c:	40014400 	.word	0x40014400
 8006f20:	40014800 	.word	0x40014800

08006f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	f023 0210 	bic.w	r2, r3, #16
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f023 0320 	bic.w	r3, r3, #32
 8006f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a28      	ldr	r2, [pc, #160]	@ (8007024 <TIM_OC2_SetConfig+0x100>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_OC2_SetConfig+0x6c>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a27      	ldr	r2, [pc, #156]	@ (8007028 <TIM_OC2_SetConfig+0x104>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d10d      	bne.n	8006fac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006faa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1d      	ldr	r2, [pc, #116]	@ (8007024 <TIM_OC2_SetConfig+0x100>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00f      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xb0>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8007028 <TIM_OC2_SetConfig+0x104>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00b      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xb0>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800702c <TIM_OC2_SetConfig+0x108>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d007      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xb0>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8007030 <TIM_OC2_SetConfig+0x10c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xb0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a19      	ldr	r2, [pc, #100]	@ (8007034 <TIM_OC2_SetConfig+0x110>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d113      	bne.n	8006ffc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40012c00 	.word	0x40012c00
 8007028:	40013400 	.word	0x40013400
 800702c:	40014000 	.word	0x40014000
 8007030:	40014400 	.word	0x40014400
 8007034:	40014800 	.word	0x40014800

08007038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800706a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0303 	bic.w	r3, r3, #3
 8007072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a27      	ldr	r2, [pc, #156]	@ (8007134 <TIM_OC3_SetConfig+0xfc>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_OC3_SetConfig+0x6a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a26      	ldr	r2, [pc, #152]	@ (8007138 <TIM_OC3_SetConfig+0x100>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d10d      	bne.n	80070be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007134 <TIM_OC3_SetConfig+0xfc>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00f      	beq.n	80070e6 <TIM_OC3_SetConfig+0xae>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007138 <TIM_OC3_SetConfig+0x100>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00b      	beq.n	80070e6 <TIM_OC3_SetConfig+0xae>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a1a      	ldr	r2, [pc, #104]	@ (800713c <TIM_OC3_SetConfig+0x104>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d007      	beq.n	80070e6 <TIM_OC3_SetConfig+0xae>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a19      	ldr	r2, [pc, #100]	@ (8007140 <TIM_OC3_SetConfig+0x108>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d003      	beq.n	80070e6 <TIM_OC3_SetConfig+0xae>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a18      	ldr	r2, [pc, #96]	@ (8007144 <TIM_OC3_SetConfig+0x10c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d113      	bne.n	800710e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	4313      	orrs	r3, r2
 8007100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	621a      	str	r2, [r3, #32]
}
 8007128:	bf00      	nop
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	40012c00 	.word	0x40012c00
 8007138:	40013400 	.word	0x40013400
 800713c:	40014000 	.word	0x40014000
 8007140:	40014400 	.word	0x40014400
 8007144:	40014800 	.word	0x40014800

08007148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800717a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	031b      	lsls	r3, r3, #12
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a28      	ldr	r2, [pc, #160]	@ (8007248 <TIM_OC4_SetConfig+0x100>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_OC4_SetConfig+0x6c>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a27      	ldr	r2, [pc, #156]	@ (800724c <TIM_OC4_SetConfig+0x104>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d10d      	bne.n	80071d0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	031b      	lsls	r3, r3, #12
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007248 <TIM_OC4_SetConfig+0x100>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00f      	beq.n	80071f8 <TIM_OC4_SetConfig+0xb0>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a1c      	ldr	r2, [pc, #112]	@ (800724c <TIM_OC4_SetConfig+0x104>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00b      	beq.n	80071f8 <TIM_OC4_SetConfig+0xb0>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007250 <TIM_OC4_SetConfig+0x108>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d007      	beq.n	80071f8 <TIM_OC4_SetConfig+0xb0>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007254 <TIM_OC4_SetConfig+0x10c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_OC4_SetConfig+0xb0>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a19      	ldr	r2, [pc, #100]	@ (8007258 <TIM_OC4_SetConfig+0x110>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d113      	bne.n	8007220 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007206:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	019b      	lsls	r3, r3, #6
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	019b      	lsls	r3, r3, #6
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40012c00 	.word	0x40012c00
 800724c:	40013400 	.word	0x40013400
 8007250:	40014000 	.word	0x40014000
 8007254:	40014400 	.word	0x40014400
 8007258:	40014800 	.word	0x40014800

0800725c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800728a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80072a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	041b      	lsls	r3, r3, #16
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a17      	ldr	r2, [pc, #92]	@ (8007310 <TIM_OC5_SetConfig+0xb4>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00f      	beq.n	80072d6 <TIM_OC5_SetConfig+0x7a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a16      	ldr	r2, [pc, #88]	@ (8007314 <TIM_OC5_SetConfig+0xb8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00b      	beq.n	80072d6 <TIM_OC5_SetConfig+0x7a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a15      	ldr	r2, [pc, #84]	@ (8007318 <TIM_OC5_SetConfig+0xbc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d007      	beq.n	80072d6 <TIM_OC5_SetConfig+0x7a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a14      	ldr	r2, [pc, #80]	@ (800731c <TIM_OC5_SetConfig+0xc0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_OC5_SetConfig+0x7a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a13      	ldr	r2, [pc, #76]	@ (8007320 <TIM_OC5_SetConfig+0xc4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d109      	bne.n	80072ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	621a      	str	r2, [r3, #32]
}
 8007304:	bf00      	nop
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	40012c00 	.word	0x40012c00
 8007314:	40013400 	.word	0x40013400
 8007318:	40014000 	.word	0x40014000
 800731c:	40014400 	.word	0x40014400
 8007320:	40014800 	.word	0x40014800

08007324 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800734a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4313      	orrs	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800736a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	051b      	lsls	r3, r3, #20
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4313      	orrs	r3, r2
 8007376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a18      	ldr	r2, [pc, #96]	@ (80073dc <TIM_OC6_SetConfig+0xb8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00f      	beq.n	80073a0 <TIM_OC6_SetConfig+0x7c>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a17      	ldr	r2, [pc, #92]	@ (80073e0 <TIM_OC6_SetConfig+0xbc>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00b      	beq.n	80073a0 <TIM_OC6_SetConfig+0x7c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a16      	ldr	r2, [pc, #88]	@ (80073e4 <TIM_OC6_SetConfig+0xc0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d007      	beq.n	80073a0 <TIM_OC6_SetConfig+0x7c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a15      	ldr	r2, [pc, #84]	@ (80073e8 <TIM_OC6_SetConfig+0xc4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d003      	beq.n	80073a0 <TIM_OC6_SetConfig+0x7c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a14      	ldr	r2, [pc, #80]	@ (80073ec <TIM_OC6_SetConfig+0xc8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d109      	bne.n	80073b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	029b      	lsls	r3, r3, #10
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	621a      	str	r2, [r3, #32]
}
 80073ce:	bf00      	nop
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40013400 	.word	0x40013400
 80073e4:	40014000 	.word	0x40014000
 80073e8:	40014400 	.word	0x40014400
 80073ec:	40014800 	.word	0x40014800

080073f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f023 0201 	bic.w	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800741a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f023 030a 	bic.w	r3, r3, #10
 800742c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800744e:	b480      	push	{r7}
 8007450:	b087      	sub	sp, #28
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	f023 0210 	bic.w	r2, r3, #16
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	031b      	lsls	r3, r3, #12
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800748a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	4313      	orrs	r3, r2
 8007494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	621a      	str	r2, [r3, #32]
}
 80074a2:	bf00      	nop
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80074c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f043 0307 	orr.w	r3, r3, #7
 80074d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	609a      	str	r2, [r3, #8]
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	021a      	lsls	r2, r3, #8
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	431a      	orrs	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4313      	orrs	r3, r2
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	609a      	str	r2, [r3, #8]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f003 031f 	and.w	r3, r3, #31
 800753a:	2201      	movs	r2, #1
 800753c:	fa02 f303 	lsl.w	r3, r2, r3
 8007540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a1a      	ldr	r2, [r3, #32]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	43db      	mvns	r3, r3
 800754a:	401a      	ands	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	fa01 f303 	lsl.w	r3, r1, r3
 8007560:	431a      	orrs	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	621a      	str	r2, [r3, #32]
}
 8007566:	bf00      	nop
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
	...

08007574 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d109      	bne.n	8007598 <HAL_TIMEx_PWMN_Start+0x24>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b01      	cmp	r3, #1
 800758e:	bf14      	ite	ne
 8007590:	2301      	movne	r3, #1
 8007592:	2300      	moveq	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	e022      	b.n	80075de <HAL_TIMEx_PWMN_Start+0x6a>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b04      	cmp	r3, #4
 800759c:	d109      	bne.n	80075b2 <HAL_TIMEx_PWMN_Start+0x3e>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	bf14      	ite	ne
 80075aa:	2301      	movne	r3, #1
 80075ac:	2300      	moveq	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	e015      	b.n	80075de <HAL_TIMEx_PWMN_Start+0x6a>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d109      	bne.n	80075cc <HAL_TIMEx_PWMN_Start+0x58>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	bf14      	ite	ne
 80075c4:	2301      	movne	r3, #1
 80075c6:	2300      	moveq	r3, #0
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	e008      	b.n	80075de <HAL_TIMEx_PWMN_Start+0x6a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	bf14      	ite	ne
 80075d8:	2301      	movne	r3, #1
 80075da:	2300      	moveq	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e069      	b.n	80076ba <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d104      	bne.n	80075f6 <HAL_TIMEx_PWMN_Start+0x82>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075f4:	e013      	b.n	800761e <HAL_TIMEx_PWMN_Start+0xaa>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d104      	bne.n	8007606 <HAL_TIMEx_PWMN_Start+0x92>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007604:	e00b      	b.n	800761e <HAL_TIMEx_PWMN_Start+0xaa>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b08      	cmp	r3, #8
 800760a:	d104      	bne.n	8007616 <HAL_TIMEx_PWMN_Start+0xa2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007614:	e003      	b.n	800761e <HAL_TIMEx_PWMN_Start+0xaa>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2202      	movs	r2, #2
 800761a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2204      	movs	r2, #4
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fa0a 	bl	8007a40 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800763a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a20      	ldr	r2, [pc, #128]	@ (80076c4 <HAL_TIMEx_PWMN_Start+0x150>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d018      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x104>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800764e:	d013      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x104>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a1c      	ldr	r2, [pc, #112]	@ (80076c8 <HAL_TIMEx_PWMN_Start+0x154>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00e      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x104>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a1b      	ldr	r2, [pc, #108]	@ (80076cc <HAL_TIMEx_PWMN_Start+0x158>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d009      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x104>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a19      	ldr	r2, [pc, #100]	@ (80076d0 <HAL_TIMEx_PWMN_Start+0x15c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x104>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a18      	ldr	r2, [pc, #96]	@ (80076d4 <HAL_TIMEx_PWMN_Start+0x160>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d115      	bne.n	80076a4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	4b16      	ldr	r3, [pc, #88]	@ (80076d8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007680:	4013      	ands	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b06      	cmp	r3, #6
 8007688:	d015      	beq.n	80076b6 <HAL_TIMEx_PWMN_Start+0x142>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007690:	d011      	beq.n	80076b6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0201 	orr.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a2:	e008      	b.n	80076b6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e000      	b.n	80076b8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40012c00 	.word	0x40012c00
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800
 80076d0:	40013400 	.word	0x40013400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	00010007 	.word	0x00010007

080076dc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2200      	movs	r2, #0
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 f9a6 	bl	8007a40 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6a1a      	ldr	r2, [r3, #32]
 80076fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80076fe:	4013      	ands	r3, r2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10f      	bne.n	8007724 <HAL_TIMEx_PWMN_Stop+0x48>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6a1a      	ldr	r2, [r3, #32]
 800770a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d107      	bne.n	8007724 <HAL_TIMEx_PWMN_Stop+0x48>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007722:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800772e:	4013      	ands	r3, r2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10f      	bne.n	8007754 <HAL_TIMEx_PWMN_Stop+0x78>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6a1a      	ldr	r2, [r3, #32]
 800773a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800773e:	4013      	ands	r3, r2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <HAL_TIMEx_PWMN_Stop+0x78>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0201 	bic.w	r2, r2, #1
 8007752:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <HAL_TIMEx_PWMN_Stop+0x88>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007762:	e013      	b.n	800778c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2b04      	cmp	r3, #4
 8007768:	d104      	bne.n	8007774 <HAL_TIMEx_PWMN_Stop+0x98>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007772:	e00b      	b.n	800778c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b08      	cmp	r3, #8
 8007778:	d104      	bne.n	8007784 <HAL_TIMEx_PWMN_Stop+0xa8>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007782:	e003      	b.n	800778c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e065      	b.n	800787c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a2c      	ldr	r2, [pc, #176]	@ (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d004      	beq.n	80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a2b      	ldr	r2, [pc, #172]	@ (800788c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d108      	bne.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80077ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80077fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007800:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a1b      	ldr	r2, [pc, #108]	@ (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d018      	beq.n	8007850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007826:	d013      	beq.n	8007850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a18      	ldr	r2, [pc, #96]	@ (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00e      	beq.n	8007850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a17      	ldr	r2, [pc, #92]	@ (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d009      	beq.n	8007850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a12      	ldr	r2, [pc, #72]	@ (800788c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d004      	beq.n	8007850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a13      	ldr	r2, [pc, #76]	@ (8007898 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d10c      	bne.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	4313      	orrs	r3, r2
 8007860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40013400 	.word	0x40013400
 8007890:	40000400 	.word	0x40000400
 8007894:	40000800 	.word	0x40000800
 8007898:	40014000 	.word	0x40014000

0800789c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e073      	b.n	80079a0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	041b      	lsls	r3, r3, #16
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a19      	ldr	r2, [pc, #100]	@ (80079ac <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d004      	beq.n	8007954 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a18      	ldr	r2, [pc, #96]	@ (80079b0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d11c      	bne.n	800798e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795e:	051b      	lsls	r3, r3, #20
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	40012c00 	.word	0x40012c00
 80079b0:	40013400 	.word	0x40013400

080079b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	2204      	movs	r2, #4
 8007a54:	fa02 f303 	lsl.w	r3, r2, r3
 8007a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6a1a      	ldr	r2, [r3, #32]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	43db      	mvns	r3, r3
 8007a62:	401a      	ands	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1a      	ldr	r2, [r3, #32]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	fa01 f303 	lsl.w	r3, r1, r3
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	621a      	str	r2, [r3, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e042      	b.n	8007b22 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fa fb78 	bl	80021a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2224      	movs	r2, #36	@ 0x24
 8007ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0201 	bic.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fee9 	bl	80088ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fc1a 	bl	8008314 <UART_SetConfig>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e01b      	b.n	8007b22 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007af8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0201 	orr.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 ff68 	bl	80089f0 <UART_CheckIdleState>
 8007b20:	4603      	mov	r3, r0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b08a      	sub	sp, #40	@ 0x28
 8007b2e:	af02      	add	r7, sp, #8
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	603b      	str	r3, [r7, #0]
 8007b36:	4613      	mov	r3, r2
 8007b38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d17b      	bne.n	8007c3c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_UART_Transmit+0x26>
 8007b4a:	88fb      	ldrh	r3, [r7, #6]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e074      	b.n	8007c3e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2221      	movs	r2, #33	@ 0x21
 8007b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b64:	f7fa fede 	bl	8002924 <HAL_GetTick>
 8007b68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	88fa      	ldrh	r2, [r7, #6]
 8007b6e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	88fa      	ldrh	r2, [r7, #6]
 8007b76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b82:	d108      	bne.n	8007b96 <HAL_UART_Transmit+0x6c>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	e003      	b.n	8007b9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b9e:	e030      	b.n	8007c02 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2180      	movs	r1, #128	@ 0x80
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 ffca 	bl	8008b44 <UART_WaitOnFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e03d      	b.n	8007c3e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10b      	bne.n	8007be0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	3302      	adds	r3, #2
 8007bdc:	61bb      	str	r3, [r7, #24]
 8007bde:	e007      	b.n	8007bf0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	3301      	adds	r3, #1
 8007bee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1c8      	bne.n	8007ba0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2200      	movs	r2, #0
 8007c16:	2140      	movs	r1, #64	@ 0x40
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 ff93 	bl	8008b44 <UART_WaitOnFlagUntilTimeout>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e006      	b.n	8007c3e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e000      	b.n	8007c3e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007c3c:	2302      	movs	r3, #2
  }
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b0ba      	sub	sp, #232	@ 0xe8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007c72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007c76:	4013      	ands	r3, r2
 8007c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d11b      	bne.n	8007cbc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d015      	beq.n	8007cbc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d105      	bne.n	8007ca8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d009      	beq.n	8007cbc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 8300 	beq.w	80082b2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
      }
      return;
 8007cba:	e2fa      	b.n	80082b2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 8123 	beq.w	8007f0c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007cca:	4b8d      	ldr	r3, [pc, #564]	@ (8007f00 <HAL_UART_IRQHandler+0x2b8>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007cd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007cd6:	4b8b      	ldr	r3, [pc, #556]	@ (8007f04 <HAL_UART_IRQHandler+0x2bc>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 8116 	beq.w	8007f0c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d011      	beq.n	8007d10 <HAL_UART_IRQHandler+0xc8>
 8007cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d06:	f043 0201 	orr.w	r2, r3, #1
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d011      	beq.n	8007d40 <HAL_UART_IRQHandler+0xf8>
 8007d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d36:	f043 0204 	orr.w	r2, r3, #4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d011      	beq.n	8007d70 <HAL_UART_IRQHandler+0x128>
 8007d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d66:	f043 0202 	orr.w	r2, r3, #2
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d017      	beq.n	8007dac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d80:	f003 0320 	and.w	r3, r3, #32
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d105      	bne.n	8007d94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8007f00 <HAL_UART_IRQHandler+0x2b8>)
 8007d8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2208      	movs	r2, #8
 8007d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da2:	f043 0208 	orr.w	r2, r3, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d012      	beq.n	8007dde <HAL_UART_IRQHandler+0x196>
 8007db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00c      	beq.n	8007dde <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dd4:	f043 0220 	orr.w	r2, r3, #32
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8266 	beq.w	80082b6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d013      	beq.n	8007e1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d105      	bne.n	8007e0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d007      	beq.n	8007e1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e32:	2b40      	cmp	r3, #64	@ 0x40
 8007e34:	d005      	beq.n	8007e42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d054      	beq.n	8007eec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 feeb 	bl	8008c1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e52:	2b40      	cmp	r3, #64	@ 0x40
 8007e54:	d146      	bne.n	8007ee4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1d9      	bne.n	8007e56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d017      	beq.n	8007edc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eb2:	4a15      	ldr	r2, [pc, #84]	@ (8007f08 <HAL_UART_IRQHandler+0x2c0>)
 8007eb4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fc fb4e 	bl	800455e <HAL_DMA_Abort_IT>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d019      	beq.n	8007efc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eda:	e00f      	b.n	8007efc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7f9 fbd5 	bl	800168c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee2:	e00b      	b.n	8007efc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7f9 fbd1 	bl	800168c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eea:	e007      	b.n	8007efc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7f9 fbcd 	bl	800168c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007efa:	e1dc      	b.n	80082b6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007efc:	bf00      	nop
    return;
 8007efe:	e1da      	b.n	80082b6 <HAL_UART_IRQHandler+0x66e>
 8007f00:	10000001 	.word	0x10000001
 8007f04:	04000120 	.word	0x04000120
 8007f08:	08008ceb 	.word	0x08008ceb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	f040 8170 	bne.w	80081f6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f1a:	f003 0310 	and.w	r3, r3, #16
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8169 	beq.w	80081f6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f28:	f003 0310 	and.w	r3, r3, #16
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 8162 	beq.w	80081f6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2210      	movs	r2, #16
 8007f38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f44:	2b40      	cmp	r3, #64	@ 0x40
 8007f46:	f040 80d8 	bne.w	80080fa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 80af 	beq.w	80080c0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	f080 80a7 	bcs.w	80080c0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 8087 	bne.w	800809e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fbe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1da      	bne.n	8007f90 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3308      	adds	r3, #8
 8007fe0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fec:	f023 0301 	bic.w	r3, r3, #1
 8007ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ffe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008002:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008006:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800800a:	e841 2300 	strex	r3, r2, [r1]
 800800e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1e1      	bne.n	8007fda <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3308      	adds	r3, #8
 800801c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800802c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3308      	adds	r3, #8
 8008036:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800803a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800803c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008040:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e3      	bne.n	8008016 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800806a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800806c:	f023 0310 	bic.w	r3, r3, #16
 8008070:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800807e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008080:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008084:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800808c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e4      	bne.n	800805c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008098:	4618      	mov	r0, r3
 800809a:	f7fc fa07 	bl	80044ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2202      	movs	r2, #2
 80080a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f911 	bl	80082e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80080be:	e0fc      	b.n	80082ba <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080ca:	429a      	cmp	r2, r3
 80080cc:	f040 80f5 	bne.w	80082ba <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b20      	cmp	r3, #32
 80080e0:	f040 80eb 	bne.w	80082ba <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f8f4 	bl	80082e0 <HAL_UARTEx_RxEventCallback>
      return;
 80080f8:	e0df      	b.n	80082ba <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008106:	b29b      	uxth	r3, r3
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008114:	b29b      	uxth	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 80d1 	beq.w	80082be <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800811c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 80cc 	beq.w	80082be <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008136:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800813a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008148:	647b      	str	r3, [r7, #68]	@ 0x44
 800814a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800814e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e4      	bne.n	8008126 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3308      	adds	r3, #8
 8008162:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	e853 3f00 	ldrex	r3, [r3]
 800816a:	623b      	str	r3, [r7, #32]
   return(result);
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008172:	f023 0301 	bic.w	r3, r3, #1
 8008176:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3308      	adds	r3, #8
 8008180:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008184:	633a      	str	r2, [r7, #48]	@ 0x30
 8008186:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800818a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e1      	bne.n	800815c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f023 0310 	bic.w	r3, r3, #16
 80081c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	69b9      	ldr	r1, [r7, #24]
 80081d4:	69fa      	ldr	r2, [r7, #28]
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	617b      	str	r3, [r7, #20]
   return(result);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e4      	bne.n	80081ac <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2202      	movs	r2, #2
 80081e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f876 	bl	80082e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081f4:	e063      	b.n	80082be <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00e      	beq.n	8008220 <HAL_UART_IRQHandler+0x5d8>
 8008202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d008      	beq.n	8008220 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008216:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fda7 	bl	8008d6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800821e:	e051      	b.n	80082c4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008228:	2b00      	cmp	r3, #0
 800822a:	d014      	beq.n	8008256 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008234:	2b00      	cmp	r3, #0
 8008236:	d105      	bne.n	8008244 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800823c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d008      	beq.n	8008256 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008248:	2b00      	cmp	r3, #0
 800824a:	d03a      	beq.n	80082c2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	4798      	blx	r3
    }
    return;
 8008254:	e035      	b.n	80082c2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800825a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	d009      	beq.n	8008276 <HAL_UART_IRQHandler+0x62e>
 8008262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fd51 	bl	8008d16 <UART_EndTransmit_IT>
    return;
 8008274:	e026      	b.n	80082c4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800827a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <HAL_UART_IRQHandler+0x64e>
 8008282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008286:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fd80 	bl	8008d94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008294:	e016      	b.n	80082c4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800829a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d010      	beq.n	80082c4 <HAL_UART_IRQHandler+0x67c>
 80082a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	da0c      	bge.n	80082c4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fd68 	bl	8008d80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082b0:	e008      	b.n	80082c4 <HAL_UART_IRQHandler+0x67c>
      return;
 80082b2:	bf00      	nop
 80082b4:	e006      	b.n	80082c4 <HAL_UART_IRQHandler+0x67c>
    return;
 80082b6:	bf00      	nop
 80082b8:	e004      	b.n	80082c4 <HAL_UART_IRQHandler+0x67c>
      return;
 80082ba:	bf00      	nop
 80082bc:	e002      	b.n	80082c4 <HAL_UART_IRQHandler+0x67c>
      return;
 80082be:	bf00      	nop
 80082c0:	e000      	b.n	80082c4 <HAL_UART_IRQHandler+0x67c>
    return;
 80082c2:	bf00      	nop
  }
}
 80082c4:	37e8      	adds	r7, #232	@ 0xe8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop

080082cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8008306:	4618      	mov	r0, r3
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
	...

08008314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008318:	b08c      	sub	sp, #48	@ 0x30
 800831a:	af00      	add	r7, sp, #0
 800831c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	431a      	orrs	r2, r3
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	431a      	orrs	r2, r3
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	4313      	orrs	r3, r2
 800833a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	4bab      	ldr	r3, [pc, #684]	@ (80085f0 <UART_SetConfig+0x2dc>)
 8008344:	4013      	ands	r3, r2
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800834c:	430b      	orrs	r3, r1
 800834e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	68da      	ldr	r2, [r3, #12]
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4aa0      	ldr	r2, [pc, #640]	@ (80085f4 <UART_SetConfig+0x2e0>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d004      	beq.n	8008380 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800837c:	4313      	orrs	r3, r2
 800837e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800838a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008394:	430b      	orrs	r3, r1
 8008396:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	f023 010f 	bic.w	r1, r3, #15
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a91      	ldr	r2, [pc, #580]	@ (80085f8 <UART_SetConfig+0x2e4>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d125      	bne.n	8008404 <UART_SetConfig+0xf0>
 80083b8:	4b90      	ldr	r3, [pc, #576]	@ (80085fc <UART_SetConfig+0x2e8>)
 80083ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d81a      	bhi.n	80083fc <UART_SetConfig+0xe8>
 80083c6:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <UART_SetConfig+0xb8>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	080083ed 	.word	0x080083ed
 80083d4:	080083e5 	.word	0x080083e5
 80083d8:	080083f5 	.word	0x080083f5
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e2:	e0d6      	b.n	8008592 <UART_SetConfig+0x27e>
 80083e4:	2302      	movs	r3, #2
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ea:	e0d2      	b.n	8008592 <UART_SetConfig+0x27e>
 80083ec:	2304      	movs	r3, #4
 80083ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083f2:	e0ce      	b.n	8008592 <UART_SetConfig+0x27e>
 80083f4:	2308      	movs	r3, #8
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083fa:	e0ca      	b.n	8008592 <UART_SetConfig+0x27e>
 80083fc:	2310      	movs	r3, #16
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008402:	e0c6      	b.n	8008592 <UART_SetConfig+0x27e>
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a7d      	ldr	r2, [pc, #500]	@ (8008600 <UART_SetConfig+0x2ec>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d138      	bne.n	8008480 <UART_SetConfig+0x16c>
 800840e:	4b7b      	ldr	r3, [pc, #492]	@ (80085fc <UART_SetConfig+0x2e8>)
 8008410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008414:	f003 030c 	and.w	r3, r3, #12
 8008418:	2b0c      	cmp	r3, #12
 800841a:	d82d      	bhi.n	8008478 <UART_SetConfig+0x164>
 800841c:	a201      	add	r2, pc, #4	@ (adr r2, 8008424 <UART_SetConfig+0x110>)
 800841e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008422:	bf00      	nop
 8008424:	08008459 	.word	0x08008459
 8008428:	08008479 	.word	0x08008479
 800842c:	08008479 	.word	0x08008479
 8008430:	08008479 	.word	0x08008479
 8008434:	08008469 	.word	0x08008469
 8008438:	08008479 	.word	0x08008479
 800843c:	08008479 	.word	0x08008479
 8008440:	08008479 	.word	0x08008479
 8008444:	08008461 	.word	0x08008461
 8008448:	08008479 	.word	0x08008479
 800844c:	08008479 	.word	0x08008479
 8008450:	08008479 	.word	0x08008479
 8008454:	08008471 	.word	0x08008471
 8008458:	2300      	movs	r3, #0
 800845a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800845e:	e098      	b.n	8008592 <UART_SetConfig+0x27e>
 8008460:	2302      	movs	r3, #2
 8008462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008466:	e094      	b.n	8008592 <UART_SetConfig+0x27e>
 8008468:	2304      	movs	r3, #4
 800846a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800846e:	e090      	b.n	8008592 <UART_SetConfig+0x27e>
 8008470:	2308      	movs	r3, #8
 8008472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008476:	e08c      	b.n	8008592 <UART_SetConfig+0x27e>
 8008478:	2310      	movs	r3, #16
 800847a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800847e:	e088      	b.n	8008592 <UART_SetConfig+0x27e>
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a5f      	ldr	r2, [pc, #380]	@ (8008604 <UART_SetConfig+0x2f0>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d125      	bne.n	80084d6 <UART_SetConfig+0x1c2>
 800848a:	4b5c      	ldr	r3, [pc, #368]	@ (80085fc <UART_SetConfig+0x2e8>)
 800848c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008490:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008494:	2b30      	cmp	r3, #48	@ 0x30
 8008496:	d016      	beq.n	80084c6 <UART_SetConfig+0x1b2>
 8008498:	2b30      	cmp	r3, #48	@ 0x30
 800849a:	d818      	bhi.n	80084ce <UART_SetConfig+0x1ba>
 800849c:	2b20      	cmp	r3, #32
 800849e:	d00a      	beq.n	80084b6 <UART_SetConfig+0x1a2>
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d814      	bhi.n	80084ce <UART_SetConfig+0x1ba>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <UART_SetConfig+0x19a>
 80084a8:	2b10      	cmp	r3, #16
 80084aa:	d008      	beq.n	80084be <UART_SetConfig+0x1aa>
 80084ac:	e00f      	b.n	80084ce <UART_SetConfig+0x1ba>
 80084ae:	2300      	movs	r3, #0
 80084b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084b4:	e06d      	b.n	8008592 <UART_SetConfig+0x27e>
 80084b6:	2302      	movs	r3, #2
 80084b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084bc:	e069      	b.n	8008592 <UART_SetConfig+0x27e>
 80084be:	2304      	movs	r3, #4
 80084c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084c4:	e065      	b.n	8008592 <UART_SetConfig+0x27e>
 80084c6:	2308      	movs	r3, #8
 80084c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084cc:	e061      	b.n	8008592 <UART_SetConfig+0x27e>
 80084ce:	2310      	movs	r3, #16
 80084d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084d4:	e05d      	b.n	8008592 <UART_SetConfig+0x27e>
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a4b      	ldr	r2, [pc, #300]	@ (8008608 <UART_SetConfig+0x2f4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d125      	bne.n	800852c <UART_SetConfig+0x218>
 80084e0:	4b46      	ldr	r3, [pc, #280]	@ (80085fc <UART_SetConfig+0x2e8>)
 80084e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80084ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80084ec:	d016      	beq.n	800851c <UART_SetConfig+0x208>
 80084ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80084f0:	d818      	bhi.n	8008524 <UART_SetConfig+0x210>
 80084f2:	2b80      	cmp	r3, #128	@ 0x80
 80084f4:	d00a      	beq.n	800850c <UART_SetConfig+0x1f8>
 80084f6:	2b80      	cmp	r3, #128	@ 0x80
 80084f8:	d814      	bhi.n	8008524 <UART_SetConfig+0x210>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <UART_SetConfig+0x1f0>
 80084fe:	2b40      	cmp	r3, #64	@ 0x40
 8008500:	d008      	beq.n	8008514 <UART_SetConfig+0x200>
 8008502:	e00f      	b.n	8008524 <UART_SetConfig+0x210>
 8008504:	2300      	movs	r3, #0
 8008506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800850a:	e042      	b.n	8008592 <UART_SetConfig+0x27e>
 800850c:	2302      	movs	r3, #2
 800850e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008512:	e03e      	b.n	8008592 <UART_SetConfig+0x27e>
 8008514:	2304      	movs	r3, #4
 8008516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800851a:	e03a      	b.n	8008592 <UART_SetConfig+0x27e>
 800851c:	2308      	movs	r3, #8
 800851e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008522:	e036      	b.n	8008592 <UART_SetConfig+0x27e>
 8008524:	2310      	movs	r3, #16
 8008526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800852a:	e032      	b.n	8008592 <UART_SetConfig+0x27e>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a30      	ldr	r2, [pc, #192]	@ (80085f4 <UART_SetConfig+0x2e0>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d12a      	bne.n	800858c <UART_SetConfig+0x278>
 8008536:	4b31      	ldr	r3, [pc, #196]	@ (80085fc <UART_SetConfig+0x2e8>)
 8008538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800853c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008540:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008544:	d01a      	beq.n	800857c <UART_SetConfig+0x268>
 8008546:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800854a:	d81b      	bhi.n	8008584 <UART_SetConfig+0x270>
 800854c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008550:	d00c      	beq.n	800856c <UART_SetConfig+0x258>
 8008552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008556:	d815      	bhi.n	8008584 <UART_SetConfig+0x270>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <UART_SetConfig+0x250>
 800855c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008560:	d008      	beq.n	8008574 <UART_SetConfig+0x260>
 8008562:	e00f      	b.n	8008584 <UART_SetConfig+0x270>
 8008564:	2300      	movs	r3, #0
 8008566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800856a:	e012      	b.n	8008592 <UART_SetConfig+0x27e>
 800856c:	2302      	movs	r3, #2
 800856e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008572:	e00e      	b.n	8008592 <UART_SetConfig+0x27e>
 8008574:	2304      	movs	r3, #4
 8008576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800857a:	e00a      	b.n	8008592 <UART_SetConfig+0x27e>
 800857c:	2308      	movs	r3, #8
 800857e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008582:	e006      	b.n	8008592 <UART_SetConfig+0x27e>
 8008584:	2310      	movs	r3, #16
 8008586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800858a:	e002      	b.n	8008592 <UART_SetConfig+0x27e>
 800858c:	2310      	movs	r3, #16
 800858e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a17      	ldr	r2, [pc, #92]	@ (80085f4 <UART_SetConfig+0x2e0>)
 8008598:	4293      	cmp	r3, r2
 800859a:	f040 80a8 	bne.w	80086ee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800859e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085a2:	2b08      	cmp	r3, #8
 80085a4:	d834      	bhi.n	8008610 <UART_SetConfig+0x2fc>
 80085a6:	a201      	add	r2, pc, #4	@ (adr r2, 80085ac <UART_SetConfig+0x298>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	080085d1 	.word	0x080085d1
 80085b0:	08008611 	.word	0x08008611
 80085b4:	080085d9 	.word	0x080085d9
 80085b8:	08008611 	.word	0x08008611
 80085bc:	080085df 	.word	0x080085df
 80085c0:	08008611 	.word	0x08008611
 80085c4:	08008611 	.word	0x08008611
 80085c8:	08008611 	.word	0x08008611
 80085cc:	080085e7 	.word	0x080085e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085d0:	f7fd f846 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 80085d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085d6:	e021      	b.n	800861c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085d8:	4b0c      	ldr	r3, [pc, #48]	@ (800860c <UART_SetConfig+0x2f8>)
 80085da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085dc:	e01e      	b.n	800861c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085de:	f7fc ffd3 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 80085e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085e4:	e01a      	b.n	800861c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085ec:	e016      	b.n	800861c <UART_SetConfig+0x308>
 80085ee:	bf00      	nop
 80085f0:	cfff69f3 	.word	0xcfff69f3
 80085f4:	40008000 	.word	0x40008000
 80085f8:	40013800 	.word	0x40013800
 80085fc:	40021000 	.word	0x40021000
 8008600:	40004400 	.word	0x40004400
 8008604:	40004800 	.word	0x40004800
 8008608:	40004c00 	.word	0x40004c00
 800860c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800861a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800861c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 812a 	beq.w	8008878 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008628:	4a9e      	ldr	r2, [pc, #632]	@ (80088a4 <UART_SetConfig+0x590>)
 800862a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800862e:	461a      	mov	r2, r3
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	fbb3 f3f2 	udiv	r3, r3, r2
 8008636:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	4613      	mov	r3, r2
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	4413      	add	r3, r2
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	429a      	cmp	r2, r3
 8008646:	d305      	bcc.n	8008654 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	429a      	cmp	r2, r3
 8008652:	d903      	bls.n	800865c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800865a:	e10d      	b.n	8008878 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800865c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865e:	2200      	movs	r2, #0
 8008660:	60bb      	str	r3, [r7, #8]
 8008662:	60fa      	str	r2, [r7, #12]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008668:	4a8e      	ldr	r2, [pc, #568]	@ (80088a4 <UART_SetConfig+0x590>)
 800866a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800866e:	b29b      	uxth	r3, r3
 8008670:	2200      	movs	r2, #0
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	607a      	str	r2, [r7, #4]
 8008676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800867a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800867e:	f7f8 fb2b 	bl	8000cd8 <__aeabi_uldivmod>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4610      	mov	r0, r2
 8008688:	4619      	mov	r1, r3
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	f04f 0300 	mov.w	r3, #0
 8008692:	020b      	lsls	r3, r1, #8
 8008694:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008698:	0202      	lsls	r2, r0, #8
 800869a:	6979      	ldr	r1, [r7, #20]
 800869c:	6849      	ldr	r1, [r1, #4]
 800869e:	0849      	lsrs	r1, r1, #1
 80086a0:	2000      	movs	r0, #0
 80086a2:	460c      	mov	r4, r1
 80086a4:	4605      	mov	r5, r0
 80086a6:	eb12 0804 	adds.w	r8, r2, r4
 80086aa:	eb43 0905 	adc.w	r9, r3, r5
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	469a      	mov	sl, r3
 80086b6:	4693      	mov	fp, r2
 80086b8:	4652      	mov	r2, sl
 80086ba:	465b      	mov	r3, fp
 80086bc:	4640      	mov	r0, r8
 80086be:	4649      	mov	r1, r9
 80086c0:	f7f8 fb0a 	bl	8000cd8 <__aeabi_uldivmod>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4613      	mov	r3, r2
 80086ca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086d2:	d308      	bcc.n	80086e6 <UART_SetConfig+0x3d2>
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086da:	d204      	bcs.n	80086e6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6a3a      	ldr	r2, [r7, #32]
 80086e2:	60da      	str	r2, [r3, #12]
 80086e4:	e0c8      	b.n	8008878 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80086ec:	e0c4      	b.n	8008878 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086f6:	d167      	bne.n	80087c8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80086f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d828      	bhi.n	8008752 <UART_SetConfig+0x43e>
 8008700:	a201      	add	r2, pc, #4	@ (adr r2, 8008708 <UART_SetConfig+0x3f4>)
 8008702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008706:	bf00      	nop
 8008708:	0800872d 	.word	0x0800872d
 800870c:	08008735 	.word	0x08008735
 8008710:	0800873d 	.word	0x0800873d
 8008714:	08008753 	.word	0x08008753
 8008718:	08008743 	.word	0x08008743
 800871c:	08008753 	.word	0x08008753
 8008720:	08008753 	.word	0x08008753
 8008724:	08008753 	.word	0x08008753
 8008728:	0800874b 	.word	0x0800874b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800872c:	f7fc ff98 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 8008730:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008732:	e014      	b.n	800875e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008734:	f7fc ffaa 	bl	800568c <HAL_RCC_GetPCLK2Freq>
 8008738:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800873a:	e010      	b.n	800875e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800873c:	4b5a      	ldr	r3, [pc, #360]	@ (80088a8 <UART_SetConfig+0x594>)
 800873e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008740:	e00d      	b.n	800875e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008742:	f7fc ff21 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8008746:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008748:	e009      	b.n	800875e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800874a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800874e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008750:	e005      	b.n	800875e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800875c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 8089 	beq.w	8008878 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876a:	4a4e      	ldr	r2, [pc, #312]	@ (80088a4 <UART_SetConfig+0x590>)
 800876c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008770:	461a      	mov	r2, r3
 8008772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008774:	fbb3 f3f2 	udiv	r3, r3, r2
 8008778:	005a      	lsls	r2, r3, #1
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	441a      	add	r2, r3
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	fbb2 f3f3 	udiv	r3, r2, r3
 800878a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	2b0f      	cmp	r3, #15
 8008790:	d916      	bls.n	80087c0 <UART_SetConfig+0x4ac>
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008798:	d212      	bcs.n	80087c0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	b29b      	uxth	r3, r3
 800879e:	f023 030f 	bic.w	r3, r3, #15
 80087a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	085b      	lsrs	r3, r3, #1
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	8bfb      	ldrh	r3, [r7, #30]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	8bfa      	ldrh	r2, [r7, #30]
 80087bc:	60da      	str	r2, [r3, #12]
 80087be:	e05b      	b.n	8008878 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80087c6:	e057      	b.n	8008878 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d828      	bhi.n	8008822 <UART_SetConfig+0x50e>
 80087d0:	a201      	add	r2, pc, #4	@ (adr r2, 80087d8 <UART_SetConfig+0x4c4>)
 80087d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d6:	bf00      	nop
 80087d8:	080087fd 	.word	0x080087fd
 80087dc:	08008805 	.word	0x08008805
 80087e0:	0800880d 	.word	0x0800880d
 80087e4:	08008823 	.word	0x08008823
 80087e8:	08008813 	.word	0x08008813
 80087ec:	08008823 	.word	0x08008823
 80087f0:	08008823 	.word	0x08008823
 80087f4:	08008823 	.word	0x08008823
 80087f8:	0800881b 	.word	0x0800881b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087fc:	f7fc ff30 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 8008800:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008802:	e014      	b.n	800882e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008804:	f7fc ff42 	bl	800568c <HAL_RCC_GetPCLK2Freq>
 8008808:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800880a:	e010      	b.n	800882e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800880c:	4b26      	ldr	r3, [pc, #152]	@ (80088a8 <UART_SetConfig+0x594>)
 800880e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008810:	e00d      	b.n	800882e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008812:	f7fc feb9 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8008816:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008818:	e009      	b.n	800882e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800881a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800881e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008820:	e005      	b.n	800882e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800882c:	bf00      	nop
    }

    if (pclk != 0U)
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	2b00      	cmp	r3, #0
 8008832:	d021      	beq.n	8008878 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008838:	4a1a      	ldr	r2, [pc, #104]	@ (80088a4 <UART_SetConfig+0x590>)
 800883a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800883e:	461a      	mov	r2, r3
 8008840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008842:	fbb3 f2f2 	udiv	r2, r3, r2
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	085b      	lsrs	r3, r3, #1
 800884c:	441a      	add	r2, r3
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	fbb2 f3f3 	udiv	r3, r2, r3
 8008856:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	2b0f      	cmp	r3, #15
 800885c:	d909      	bls.n	8008872 <UART_SetConfig+0x55e>
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008864:	d205      	bcs.n	8008872 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	b29a      	uxth	r2, r3
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60da      	str	r2, [r3, #12]
 8008870:	e002      	b.n	8008878 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2201      	movs	r2, #1
 800887c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	2201      	movs	r2, #1
 8008884:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2200      	movs	r2, #0
 800888c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2200      	movs	r2, #0
 8008892:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008894:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008898:	4618      	mov	r0, r3
 800889a:	3730      	adds	r7, #48	@ 0x30
 800889c:	46bd      	mov	sp, r7
 800889e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088a2:	bf00      	nop
 80088a4:	0800ed90 	.word	0x0800ed90
 80088a8:	00f42400 	.word	0x00f42400

080088ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00a      	beq.n	80088d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00a      	beq.n	800891a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00a      	beq.n	800895e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00a      	beq.n	8008980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01a      	beq.n	80089c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089aa:	d10a      	bne.n	80089c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00a      	beq.n	80089e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	430a      	orrs	r2, r1
 80089e2:	605a      	str	r2, [r3, #4]
  }
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b098      	sub	sp, #96	@ 0x60
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a00:	f7f9 ff90 	bl	8002924 <HAL_GetTick>
 8008a04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0308 	and.w	r3, r3, #8
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d12f      	bne.n	8008a74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f88e 	bl	8008b44 <UART_WaitOnFlagUntilTimeout>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d022      	beq.n	8008a74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a36:	e853 3f00 	ldrex	r3, [r3]
 8008a3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a42:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e6      	bne.n	8008a2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e063      	b.n	8008b3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0304 	and.w	r3, r3, #4
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d149      	bne.n	8008b16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f857 	bl	8008b44 <UART_WaitOnFlagUntilTimeout>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d03c      	beq.n	8008b16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	623b      	str	r3, [r7, #32]
   return(result);
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8008abc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e6      	bne.n	8008a9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f023 0301 	bic.w	r3, r3, #1
 8008ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008aee:	61fa      	str	r2, [r7, #28]
 8008af0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	69b9      	ldr	r1, [r7, #24]
 8008af4:	69fa      	ldr	r2, [r7, #28]
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	617b      	str	r3, [r7, #20]
   return(result);
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e5      	bne.n	8008ace <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e012      	b.n	8008b3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3758      	adds	r7, #88	@ 0x58
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	4613      	mov	r3, r2
 8008b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b54:	e04f      	b.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b5c:	d04b      	beq.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b5e:	f7f9 fee1 	bl	8002924 <HAL_GetTick>
 8008b62:	4602      	mov	r2, r0
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d302      	bcc.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e04e      	b.n	8008c16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d037      	beq.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b80      	cmp	r3, #128	@ 0x80
 8008b8a:	d034      	beq.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b40      	cmp	r3, #64	@ 0x40
 8008b90:	d031      	beq.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d110      	bne.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 f838 	bl	8008c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e029      	b.n	8008c16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bd0:	d111      	bne.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 f81e 	bl	8008c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e00f      	b.n	8008c16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	69da      	ldr	r2, [r3, #28]
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	4013      	ands	r3, r2
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	bf0c      	ite	eq
 8008c06:	2301      	moveq	r3, #1
 8008c08:	2300      	movne	r3, #0
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d0a0      	beq.n	8008b56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b095      	sub	sp, #84	@ 0x54
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2e:	e853 3f00 	ldrex	r3, [r3]
 8008c32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	461a      	mov	r2, r3
 8008c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c44:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c4c:	e841 2300 	strex	r3, r2, [r1]
 8008c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1e6      	bne.n	8008c26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	e853 3f00 	ldrex	r3, [r3]
 8008c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c6e:	f023 0301 	bic.w	r3, r3, #1
 8008c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e3      	bne.n	8008c58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d118      	bne.n	8008cca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f023 0310 	bic.w	r3, r3, #16
 8008cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cb6:	61bb      	str	r3, [r7, #24]
 8008cb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6979      	ldr	r1, [r7, #20]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e6      	bne.n	8008c98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008cde:	bf00      	nop
 8008ce0:	3754      	adds	r7, #84	@ 0x54
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7f8 fcbf 	bl	800168c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d0e:	bf00      	nop
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b088      	sub	sp, #32
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	e853 3f00 	ldrex	r3, [r3]
 8008d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d32:	61fb      	str	r3, [r7, #28]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	61bb      	str	r3, [r7, #24]
 8008d3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	6979      	ldr	r1, [r7, #20]
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	e841 2300 	strex	r3, r2, [r1]
 8008d48:	613b      	str	r3, [r7, #16]
   return(result);
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e6      	bne.n	8008d1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2220      	movs	r2, #32
 8008d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff fab4 	bl	80082cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d64:	bf00      	nop
 8008d66:	3720      	adds	r7, #32
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <HAL_UARTEx_DisableFifoMode+0x16>
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e027      	b.n	8008e0e <HAL_UARTEx_DisableFifoMode+0x66>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2224      	movs	r2, #36	@ 0x24
 8008dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0201 	bic.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008dec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d101      	bne.n	8008e32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e02d      	b.n	8008e8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2224      	movs	r2, #36	@ 0x24
 8008e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0201 	bic.w	r2, r2, #1
 8008e58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f850 	bl	8008f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2220      	movs	r2, #32
 8008e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e02d      	b.n	8008f0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2224      	movs	r2, #36	@ 0x24
 8008eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f022 0201 	bic.w	r2, r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f812 	bl	8008f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2220      	movs	r2, #32
 8008efc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d108      	bne.n	8008f36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f34:	e031      	b.n	8008f9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f36:	2308      	movs	r3, #8
 8008f38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f3a:	2308      	movs	r3, #8
 8008f3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	0e5b      	lsrs	r3, r3, #25
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	f003 0307 	and.w	r3, r3, #7
 8008f4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	0f5b      	lsrs	r3, r3, #29
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	f003 0307 	and.w	r3, r3, #7
 8008f5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	7b3a      	ldrb	r2, [r7, #12]
 8008f62:	4911      	ldr	r1, [pc, #68]	@ (8008fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8008f64:	5c8a      	ldrb	r2, [r1, r2]
 8008f66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f6a:	7b3a      	ldrb	r2, [r7, #12]
 8008f6c:	490f      	ldr	r1, [pc, #60]	@ (8008fac <UARTEx_SetNbDataToProcess+0x98>)
 8008f6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	7b7a      	ldrb	r2, [r7, #13]
 8008f80:	4909      	ldr	r1, [pc, #36]	@ (8008fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8008f82:	5c8a      	ldrb	r2, [r1, r2]
 8008f84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f88:	7b7a      	ldrb	r2, [r7, #13]
 8008f8a:	4908      	ldr	r1, [pc, #32]	@ (8008fac <UARTEx_SetNbDataToProcess+0x98>)
 8008f8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008f9a:	bf00      	nop
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	0800eda8 	.word	0x0800eda8
 8008fac:	0800edb0 	.word	0x0800edb0

08008fb0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fc2:	2b84      	cmp	r3, #132	@ 0x84
 8008fc4:	d005      	beq.n	8008fd2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008fc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4413      	add	r3, r2
 8008fce:	3303      	adds	r3, #3
 8008fd0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008fe4:	f000 fa74 	bl	80094d0 <vTaskStartScheduler>
  
  return osOK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	bd80      	pop	{r7, pc}

08008fee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff0:	b087      	sub	sp, #28
 8008ff2:	af02      	add	r7, sp, #8
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685c      	ldr	r4, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009004:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff ffcf 	bl	8008fb0 <makeFreeRtosPriority>
 8009012:	4602      	mov	r2, r0
 8009014:	f107 030c 	add.w	r3, r7, #12
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	9200      	str	r2, [sp, #0]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	4632      	mov	r2, r6
 8009020:	4629      	mov	r1, r5
 8009022:	4620      	mov	r0, r4
 8009024:	f000 f8d2 	bl	80091cc <xTaskCreate>
 8009028:	4603      	mov	r3, r0
 800902a:	2b01      	cmp	r3, #1
 800902c:	d001      	beq.n	8009032 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800902e:	2300      	movs	r3, #0
 8009030:	e000      	b.n	8009034 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009032:	68fb      	ldr	r3, [r7, #12]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800903c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <osDelay+0x16>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	e000      	b.n	8009054 <osDelay+0x18>
 8009052:	2301      	movs	r3, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fa05 	bl	8009464 <vTaskDelay>
  
  return osOK;
 800905a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f103 0208 	add.w	r2, r3, #8
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800907c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f103 0208 	add.w	r2, r3, #8
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f103 0208 	add.w	r2, r3, #8
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090b2:	bf00      	nop
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090be:	b480      	push	{r7}
 80090c0:	b085      	sub	sp, #20
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	601a      	str	r2, [r3, #0]
}
 80090fa:	bf00      	nop
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800911c:	d103      	bne.n	8009126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	e00c      	b.n	8009140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	3308      	adds	r3, #8
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	e002      	b.n	8009134 <vListInsert+0x2e>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	429a      	cmp	r2, r3
 800913e:	d2f6      	bcs.n	800912e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	601a      	str	r2, [r3, #0]
}
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6892      	ldr	r2, [r2, #8]
 800918e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6852      	ldr	r2, [r2, #4]
 8009198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d103      	bne.n	80091ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	1e5a      	subs	r2, r3, #1
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08c      	sub	sp, #48	@ 0x30
 80091d0:	af04      	add	r7, sp, #16
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	603b      	str	r3, [r7, #0]
 80091d8:	4613      	mov	r3, r2
 80091da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 fec1 	bl	8009f68 <pvPortMalloc>
 80091e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00e      	beq.n	800920c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091ee:	20a0      	movs	r0, #160	@ 0xa0
 80091f0:	f000 feba 	bl	8009f68 <pvPortMalloc>
 80091f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	631a      	str	r2, [r3, #48]	@ 0x30
 8009202:	e005      	b.n	8009210 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009204:	6978      	ldr	r0, [r7, #20]
 8009206:	f000 ff7d 	bl	800a104 <vPortFree>
 800920a:	e001      	b.n	8009210 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800920c:	2300      	movs	r3, #0
 800920e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d013      	beq.n	800923e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009216:	88fa      	ldrh	r2, [r7, #6]
 8009218:	2300      	movs	r3, #0
 800921a:	9303      	str	r3, [sp, #12]
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	9302      	str	r3, [sp, #8]
 8009220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009222:	9301      	str	r3, [sp, #4]
 8009224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f80f 	bl	8009250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009232:	69f8      	ldr	r0, [r7, #28]
 8009234:	f000 f8ac 	bl	8009390 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009238:	2301      	movs	r3, #1
 800923a:	61bb      	str	r3, [r7, #24]
 800923c:	e002      	b.n	8009244 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800923e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009242:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009244:	69bb      	ldr	r3, [r7, #24]
	}
 8009246:	4618      	mov	r0, r3
 8009248:	3720      	adds	r7, #32
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009268:	3b01      	subs	r3, #1
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	f023 0307 	bic.w	r3, r3, #7
 8009276:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	f003 0307 	and.w	r3, r3, #7
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop
 8009298:	e7fd      	b.n	8009296 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d01f      	beq.n	80092e0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092a0:	2300      	movs	r3, #0
 80092a2:	61fb      	str	r3, [r7, #28]
 80092a4:	e012      	b.n	80092cc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	4413      	add	r3, r2
 80092ac:	7819      	ldrb	r1, [r3, #0]
 80092ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	4413      	add	r3, r2
 80092b4:	3334      	adds	r3, #52	@ 0x34
 80092b6:	460a      	mov	r2, r1
 80092b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	4413      	add	r3, r2
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d006      	beq.n	80092d4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	3301      	adds	r3, #1
 80092ca:	61fb      	str	r3, [r7, #28]
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	2b0f      	cmp	r3, #15
 80092d0:	d9e9      	bls.n	80092a6 <prvInitialiseNewTask+0x56>
 80092d2:	e000      	b.n	80092d6 <prvInitialiseNewTask+0x86>
			{
				break;
 80092d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092de:	e003      	b.n	80092e8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ea:	2b06      	cmp	r3, #6
 80092ec:	d901      	bls.n	80092f2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092ee:	2306      	movs	r3, #6
 80092f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80092f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092fc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	2200      	movs	r2, #0
 8009302:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009306:	3304      	adds	r3, #4
 8009308:	4618      	mov	r0, r3
 800930a:	f7ff fecb 	bl	80090a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	3318      	adds	r3, #24
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff fec6 	bl	80090a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800931c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800931e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009320:	f1c3 0207 	rsb	r2, r3, #7
 8009324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009326:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800932c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	2200      	movs	r2, #0
 8009332:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	2200      	movs	r2, #0
 800933a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	334c      	adds	r3, #76	@ 0x4c
 8009342:	224c      	movs	r2, #76	@ 0x4c
 8009344:	2100      	movs	r1, #0
 8009346:	4618      	mov	r0, r3
 8009348:	f002 f892 	bl	800b470 <memset>
 800934c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934e:	4a0d      	ldr	r2, [pc, #52]	@ (8009384 <prvInitialiseNewTask+0x134>)
 8009350:	651a      	str	r2, [r3, #80]	@ 0x50
 8009352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009354:	4a0c      	ldr	r2, [pc, #48]	@ (8009388 <prvInitialiseNewTask+0x138>)
 8009356:	655a      	str	r2, [r3, #84]	@ 0x54
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	4a0c      	ldr	r2, [pc, #48]	@ (800938c <prvInitialiseNewTask+0x13c>)
 800935c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	68f9      	ldr	r1, [r7, #12]
 8009362:	69b8      	ldr	r0, [r7, #24]
 8009364:	f000 fbf2 	bl	8009b4c <pxPortInitialiseStack>
 8009368:	4602      	mov	r2, r0
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800936e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800937a:	bf00      	nop
 800937c:	3720      	adds	r7, #32
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20002f58 	.word	0x20002f58
 8009388:	20002fc0 	.word	0x20002fc0
 800938c:	20003028 	.word	0x20003028

08009390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009398:	f000 fd06 	bl	8009da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800939c:	4b2a      	ldr	r3, [pc, #168]	@ (8009448 <prvAddNewTaskToReadyList+0xb8>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	4a29      	ldr	r2, [pc, #164]	@ (8009448 <prvAddNewTaskToReadyList+0xb8>)
 80093a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093a6:	4b29      	ldr	r3, [pc, #164]	@ (800944c <prvAddNewTaskToReadyList+0xbc>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d109      	bne.n	80093c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093ae:	4a27      	ldr	r2, [pc, #156]	@ (800944c <prvAddNewTaskToReadyList+0xbc>)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093b4:	4b24      	ldr	r3, [pc, #144]	@ (8009448 <prvAddNewTaskToReadyList+0xb8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d110      	bne.n	80093de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093bc:	f000 fabc 	bl	8009938 <prvInitialiseTaskLists>
 80093c0:	e00d      	b.n	80093de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093c2:	4b23      	ldr	r3, [pc, #140]	@ (8009450 <prvAddNewTaskToReadyList+0xc0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d109      	bne.n	80093de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093ca:	4b20      	ldr	r3, [pc, #128]	@ (800944c <prvAddNewTaskToReadyList+0xbc>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d802      	bhi.n	80093de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093d8:	4a1c      	ldr	r2, [pc, #112]	@ (800944c <prvAddNewTaskToReadyList+0xbc>)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093de:	4b1d      	ldr	r3, [pc, #116]	@ (8009454 <prvAddNewTaskToReadyList+0xc4>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	3301      	adds	r3, #1
 80093e4:	4a1b      	ldr	r2, [pc, #108]	@ (8009454 <prvAddNewTaskToReadyList+0xc4>)
 80093e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ec:	2201      	movs	r2, #1
 80093ee:	409a      	lsls	r2, r3
 80093f0:	4b19      	ldr	r3, [pc, #100]	@ (8009458 <prvAddNewTaskToReadyList+0xc8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	4a18      	ldr	r2, [pc, #96]	@ (8009458 <prvAddNewTaskToReadyList+0xc8>)
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4a15      	ldr	r2, [pc, #84]	@ (800945c <prvAddNewTaskToReadyList+0xcc>)
 8009408:	441a      	add	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3304      	adds	r3, #4
 800940e:	4619      	mov	r1, r3
 8009410:	4610      	mov	r0, r2
 8009412:	f7ff fe54 	bl	80090be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009416:	f000 fcf9 	bl	8009e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800941a:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <prvAddNewTaskToReadyList+0xc0>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00e      	beq.n	8009440 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009422:	4b0a      	ldr	r3, [pc, #40]	@ (800944c <prvAddNewTaskToReadyList+0xbc>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942c:	429a      	cmp	r2, r3
 800942e:	d207      	bcs.n	8009440 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009430:	4b0b      	ldr	r3, [pc, #44]	@ (8009460 <prvAddNewTaskToReadyList+0xd0>)
 8009432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	20000704 	.word	0x20000704
 800944c:	20000604 	.word	0x20000604
 8009450:	20000710 	.word	0x20000710
 8009454:	20000720 	.word	0x20000720
 8009458:	2000070c 	.word	0x2000070c
 800945c:	20000608 	.word	0x20000608
 8009460:	e000ed04 	.word	0xe000ed04

08009464 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d018      	beq.n	80094a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009476:	4b14      	ldr	r3, [pc, #80]	@ (80094c8 <vTaskDelay+0x64>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00b      	beq.n	8009496 <vTaskDelay+0x32>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	60bb      	str	r3, [r7, #8]
}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	e7fd      	b.n	8009492 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009496:	f000 f86d 	bl	8009574 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800949a:	2100      	movs	r1, #0
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 faef 	bl	8009a80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094a2:	f000 f875 	bl	8009590 <xTaskResumeAll>
 80094a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d107      	bne.n	80094be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80094ae:	4b07      	ldr	r3, [pc, #28]	@ (80094cc <vTaskDelay+0x68>)
 80094b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	2000072c 	.word	0x2000072c
 80094cc:	e000ed04 	.word	0xe000ed04

080094d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80094d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009554 <vTaskStartScheduler+0x84>)
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	2300      	movs	r3, #0
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	2300      	movs	r3, #0
 80094e0:	2280      	movs	r2, #128	@ 0x80
 80094e2:	491d      	ldr	r1, [pc, #116]	@ (8009558 <vTaskStartScheduler+0x88>)
 80094e4:	481d      	ldr	r0, [pc, #116]	@ (800955c <vTaskStartScheduler+0x8c>)
 80094e6:	f7ff fe71 	bl	80091cc <xTaskCreate>
 80094ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d11b      	bne.n	800952a <vTaskStartScheduler+0x5a>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	60bb      	str	r3, [r7, #8]
}
 8009504:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009506:	4b16      	ldr	r3, [pc, #88]	@ (8009560 <vTaskStartScheduler+0x90>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	334c      	adds	r3, #76	@ 0x4c
 800950c:	4a15      	ldr	r2, [pc, #84]	@ (8009564 <vTaskStartScheduler+0x94>)
 800950e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009510:	4b15      	ldr	r3, [pc, #84]	@ (8009568 <vTaskStartScheduler+0x98>)
 8009512:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009516:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009518:	4b14      	ldr	r3, [pc, #80]	@ (800956c <vTaskStartScheduler+0x9c>)
 800951a:	2201      	movs	r2, #1
 800951c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800951e:	4b14      	ldr	r3, [pc, #80]	@ (8009570 <vTaskStartScheduler+0xa0>)
 8009520:	2200      	movs	r2, #0
 8009522:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009524:	f000 fb9c 	bl	8009c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009528:	e00f      	b.n	800954a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009530:	d10b      	bne.n	800954a <vTaskStartScheduler+0x7a>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	607b      	str	r3, [r7, #4]
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	e7fd      	b.n	8009546 <vTaskStartScheduler+0x76>
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20000728 	.word	0x20000728
 8009558:	0800ed70 	.word	0x0800ed70
 800955c:	08009909 	.word	0x08009909
 8009560:	20000604 	.word	0x20000604
 8009564:	2000001c 	.word	0x2000001c
 8009568:	20000724 	.word	0x20000724
 800956c:	20000710 	.word	0x20000710
 8009570:	20000708 	.word	0x20000708

08009574 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009574:	b480      	push	{r7}
 8009576:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009578:	4b04      	ldr	r3, [pc, #16]	@ (800958c <vTaskSuspendAll+0x18>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3301      	adds	r3, #1
 800957e:	4a03      	ldr	r2, [pc, #12]	@ (800958c <vTaskSuspendAll+0x18>)
 8009580:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009582:	bf00      	nop
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	2000072c 	.word	0x2000072c

08009590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800959a:	2300      	movs	r3, #0
 800959c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800959e:	4b42      	ldr	r3, [pc, #264]	@ (80096a8 <xTaskResumeAll+0x118>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10b      	bne.n	80095be <xTaskResumeAll+0x2e>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	603b      	str	r3, [r7, #0]
}
 80095b8:	bf00      	nop
 80095ba:	bf00      	nop
 80095bc:	e7fd      	b.n	80095ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095be:	f000 fbf3 	bl	8009da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095c2:	4b39      	ldr	r3, [pc, #228]	@ (80096a8 <xTaskResumeAll+0x118>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	4a37      	ldr	r2, [pc, #220]	@ (80096a8 <xTaskResumeAll+0x118>)
 80095ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095cc:	4b36      	ldr	r3, [pc, #216]	@ (80096a8 <xTaskResumeAll+0x118>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d161      	bne.n	8009698 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095d4:	4b35      	ldr	r3, [pc, #212]	@ (80096ac <xTaskResumeAll+0x11c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d05d      	beq.n	8009698 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095dc:	e02e      	b.n	800963c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095de:	4b34      	ldr	r3, [pc, #208]	@ (80096b0 <xTaskResumeAll+0x120>)
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3318      	adds	r3, #24
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7ff fdc4 	bl	8009178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3304      	adds	r3, #4
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7ff fdbf 	bl	8009178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fe:	2201      	movs	r2, #1
 8009600:	409a      	lsls	r2, r3
 8009602:	4b2c      	ldr	r3, [pc, #176]	@ (80096b4 <xTaskResumeAll+0x124>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4313      	orrs	r3, r2
 8009608:	4a2a      	ldr	r2, [pc, #168]	@ (80096b4 <xTaskResumeAll+0x124>)
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4a27      	ldr	r2, [pc, #156]	@ (80096b8 <xTaskResumeAll+0x128>)
 800961a:	441a      	add	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f7ff fd4b 	bl	80090be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800962c:	4b23      	ldr	r3, [pc, #140]	@ (80096bc <xTaskResumeAll+0x12c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009632:	429a      	cmp	r2, r3
 8009634:	d302      	bcc.n	800963c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009636:	4b22      	ldr	r3, [pc, #136]	@ (80096c0 <xTaskResumeAll+0x130>)
 8009638:	2201      	movs	r2, #1
 800963a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800963c:	4b1c      	ldr	r3, [pc, #112]	@ (80096b0 <xTaskResumeAll+0x120>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1cc      	bne.n	80095de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800964a:	f000 f9f9 	bl	8009a40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800964e:	4b1d      	ldr	r3, [pc, #116]	@ (80096c4 <xTaskResumeAll+0x134>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d010      	beq.n	800967c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800965a:	f000 f837 	bl	80096cc <xTaskIncrementTick>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009664:	4b16      	ldr	r3, [pc, #88]	@ (80096c0 <xTaskResumeAll+0x130>)
 8009666:	2201      	movs	r2, #1
 8009668:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	3b01      	subs	r3, #1
 800966e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1f1      	bne.n	800965a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009676:	4b13      	ldr	r3, [pc, #76]	@ (80096c4 <xTaskResumeAll+0x134>)
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800967c:	4b10      	ldr	r3, [pc, #64]	@ (80096c0 <xTaskResumeAll+0x130>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d009      	beq.n	8009698 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009684:	2301      	movs	r3, #1
 8009686:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009688:	4b0f      	ldr	r3, [pc, #60]	@ (80096c8 <xTaskResumeAll+0x138>)
 800968a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009698:	f000 fbb8 	bl	8009e0c <vPortExitCritical>

	return xAlreadyYielded;
 800969c:	68bb      	ldr	r3, [r7, #8]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	2000072c 	.word	0x2000072c
 80096ac:	20000704 	.word	0x20000704
 80096b0:	200006c4 	.word	0x200006c4
 80096b4:	2000070c 	.word	0x2000070c
 80096b8:	20000608 	.word	0x20000608
 80096bc:	20000604 	.word	0x20000604
 80096c0:	20000718 	.word	0x20000718
 80096c4:	20000714 	.word	0x20000714
 80096c8:	e000ed04 	.word	0xe000ed04

080096cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096d6:	4b4f      	ldr	r3, [pc, #316]	@ (8009814 <xTaskIncrementTick+0x148>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f040 808f 	bne.w	80097fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009818 <xTaskIncrementTick+0x14c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096e8:	4a4b      	ldr	r2, [pc, #300]	@ (8009818 <xTaskIncrementTick+0x14c>)
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d121      	bne.n	8009738 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80096f4:	4b49      	ldr	r3, [pc, #292]	@ (800981c <xTaskIncrementTick+0x150>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00b      	beq.n	8009716 <xTaskIncrementTick+0x4a>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	603b      	str	r3, [r7, #0]
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	e7fd      	b.n	8009712 <xTaskIncrementTick+0x46>
 8009716:	4b41      	ldr	r3, [pc, #260]	@ (800981c <xTaskIncrementTick+0x150>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	60fb      	str	r3, [r7, #12]
 800971c:	4b40      	ldr	r3, [pc, #256]	@ (8009820 <xTaskIncrementTick+0x154>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a3e      	ldr	r2, [pc, #248]	@ (800981c <xTaskIncrementTick+0x150>)
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	4a3e      	ldr	r2, [pc, #248]	@ (8009820 <xTaskIncrementTick+0x154>)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	4b3e      	ldr	r3, [pc, #248]	@ (8009824 <xTaskIncrementTick+0x158>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3301      	adds	r3, #1
 8009730:	4a3c      	ldr	r2, [pc, #240]	@ (8009824 <xTaskIncrementTick+0x158>)
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	f000 f984 	bl	8009a40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009738:	4b3b      	ldr	r3, [pc, #236]	@ (8009828 <xTaskIncrementTick+0x15c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	429a      	cmp	r2, r3
 8009740:	d348      	bcc.n	80097d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009742:	4b36      	ldr	r3, [pc, #216]	@ (800981c <xTaskIncrementTick+0x150>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d104      	bne.n	8009756 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800974c:	4b36      	ldr	r3, [pc, #216]	@ (8009828 <xTaskIncrementTick+0x15c>)
 800974e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009752:	601a      	str	r2, [r3, #0]
					break;
 8009754:	e03e      	b.n	80097d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009756:	4b31      	ldr	r3, [pc, #196]	@ (800981c <xTaskIncrementTick+0x150>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	429a      	cmp	r2, r3
 800976c:	d203      	bcs.n	8009776 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800976e:	4a2e      	ldr	r2, [pc, #184]	@ (8009828 <xTaskIncrementTick+0x15c>)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009774:	e02e      	b.n	80097d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	3304      	adds	r3, #4
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fcfc 	bl	8009178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	3318      	adds	r3, #24
 800978c:	4618      	mov	r0, r3
 800978e:	f7ff fcf3 	bl	8009178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009796:	2201      	movs	r2, #1
 8009798:	409a      	lsls	r2, r3
 800979a:	4b24      	ldr	r3, [pc, #144]	@ (800982c <xTaskIncrementTick+0x160>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4313      	orrs	r3, r2
 80097a0:	4a22      	ldr	r2, [pc, #136]	@ (800982c <xTaskIncrementTick+0x160>)
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4a1f      	ldr	r2, [pc, #124]	@ (8009830 <xTaskIncrementTick+0x164>)
 80097b2:	441a      	add	r2, r3
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	3304      	adds	r3, #4
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f7ff fc7f 	bl	80090be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009834 <xTaskIncrementTick+0x168>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d3b9      	bcc.n	8009742 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80097ce:	2301      	movs	r3, #1
 80097d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097d2:	e7b6      	b.n	8009742 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097d4:	4b17      	ldr	r3, [pc, #92]	@ (8009834 <xTaskIncrementTick+0x168>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097da:	4915      	ldr	r1, [pc, #84]	@ (8009830 <xTaskIncrementTick+0x164>)
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	440b      	add	r3, r1
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d901      	bls.n	80097f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80097ec:	2301      	movs	r3, #1
 80097ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80097f0:	4b11      	ldr	r3, [pc, #68]	@ (8009838 <xTaskIncrementTick+0x16c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d007      	beq.n	8009808 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80097f8:	2301      	movs	r3, #1
 80097fa:	617b      	str	r3, [r7, #20]
 80097fc:	e004      	b.n	8009808 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80097fe:	4b0f      	ldr	r3, [pc, #60]	@ (800983c <xTaskIncrementTick+0x170>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	4a0d      	ldr	r2, [pc, #52]	@ (800983c <xTaskIncrementTick+0x170>)
 8009806:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009808:	697b      	ldr	r3, [r7, #20]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	2000072c 	.word	0x2000072c
 8009818:	20000708 	.word	0x20000708
 800981c:	200006bc 	.word	0x200006bc
 8009820:	200006c0 	.word	0x200006c0
 8009824:	2000071c 	.word	0x2000071c
 8009828:	20000724 	.word	0x20000724
 800982c:	2000070c 	.word	0x2000070c
 8009830:	20000608 	.word	0x20000608
 8009834:	20000604 	.word	0x20000604
 8009838:	20000718 	.word	0x20000718
 800983c:	20000714 	.word	0x20000714

08009840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009846:	4b2a      	ldr	r3, [pc, #168]	@ (80098f0 <vTaskSwitchContext+0xb0>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800984e:	4b29      	ldr	r3, [pc, #164]	@ (80098f4 <vTaskSwitchContext+0xb4>)
 8009850:	2201      	movs	r2, #1
 8009852:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009854:	e045      	b.n	80098e2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009856:	4b27      	ldr	r3, [pc, #156]	@ (80098f4 <vTaskSwitchContext+0xb4>)
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800985c:	4b26      	ldr	r3, [pc, #152]	@ (80098f8 <vTaskSwitchContext+0xb8>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	fab3 f383 	clz	r3, r3
 8009868:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800986a:	7afb      	ldrb	r3, [r7, #11]
 800986c:	f1c3 031f 	rsb	r3, r3, #31
 8009870:	617b      	str	r3, [r7, #20]
 8009872:	4922      	ldr	r1, [pc, #136]	@ (80098fc <vTaskSwitchContext+0xbc>)
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	440b      	add	r3, r1
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <vTaskSwitchContext+0x5e>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	607b      	str	r3, [r7, #4]
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	e7fd      	b.n	800989a <vTaskSwitchContext+0x5a>
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4a14      	ldr	r2, [pc, #80]	@ (80098fc <vTaskSwitchContext+0xbc>)
 80098aa:	4413      	add	r3, r2
 80098ac:	613b      	str	r3, [r7, #16]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	605a      	str	r2, [r3, #4]
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3308      	adds	r3, #8
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d104      	bne.n	80098ce <vTaskSwitchContext+0x8e>
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	605a      	str	r2, [r3, #4]
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	4a0a      	ldr	r2, [pc, #40]	@ (8009900 <vTaskSwitchContext+0xc0>)
 80098d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098d8:	4b09      	ldr	r3, [pc, #36]	@ (8009900 <vTaskSwitchContext+0xc0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	334c      	adds	r3, #76	@ 0x4c
 80098de:	4a09      	ldr	r2, [pc, #36]	@ (8009904 <vTaskSwitchContext+0xc4>)
 80098e0:	6013      	str	r3, [r2, #0]
}
 80098e2:	bf00      	nop
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	2000072c 	.word	0x2000072c
 80098f4:	20000718 	.word	0x20000718
 80098f8:	2000070c 	.word	0x2000070c
 80098fc:	20000608 	.word	0x20000608
 8009900:	20000604 	.word	0x20000604
 8009904:	2000001c 	.word	0x2000001c

08009908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009910:	f000 f852 	bl	80099b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009914:	4b06      	ldr	r3, [pc, #24]	@ (8009930 <prvIdleTask+0x28>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d9f9      	bls.n	8009910 <prvIdleTask+0x8>
			{
				taskYIELD();
 800991c:	4b05      	ldr	r3, [pc, #20]	@ (8009934 <prvIdleTask+0x2c>)
 800991e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800992c:	e7f0      	b.n	8009910 <prvIdleTask+0x8>
 800992e:	bf00      	nop
 8009930:	20000608 	.word	0x20000608
 8009934:	e000ed04 	.word	0xe000ed04

08009938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800993e:	2300      	movs	r3, #0
 8009940:	607b      	str	r3, [r7, #4]
 8009942:	e00c      	b.n	800995e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4a12      	ldr	r2, [pc, #72]	@ (8009998 <prvInitialiseTaskLists+0x60>)
 8009950:	4413      	add	r3, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff fb86 	bl	8009064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3301      	adds	r3, #1
 800995c:	607b      	str	r3, [r7, #4]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b06      	cmp	r3, #6
 8009962:	d9ef      	bls.n	8009944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009964:	480d      	ldr	r0, [pc, #52]	@ (800999c <prvInitialiseTaskLists+0x64>)
 8009966:	f7ff fb7d 	bl	8009064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800996a:	480d      	ldr	r0, [pc, #52]	@ (80099a0 <prvInitialiseTaskLists+0x68>)
 800996c:	f7ff fb7a 	bl	8009064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009970:	480c      	ldr	r0, [pc, #48]	@ (80099a4 <prvInitialiseTaskLists+0x6c>)
 8009972:	f7ff fb77 	bl	8009064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009976:	480c      	ldr	r0, [pc, #48]	@ (80099a8 <prvInitialiseTaskLists+0x70>)
 8009978:	f7ff fb74 	bl	8009064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800997c:	480b      	ldr	r0, [pc, #44]	@ (80099ac <prvInitialiseTaskLists+0x74>)
 800997e:	f7ff fb71 	bl	8009064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009982:	4b0b      	ldr	r3, [pc, #44]	@ (80099b0 <prvInitialiseTaskLists+0x78>)
 8009984:	4a05      	ldr	r2, [pc, #20]	@ (800999c <prvInitialiseTaskLists+0x64>)
 8009986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009988:	4b0a      	ldr	r3, [pc, #40]	@ (80099b4 <prvInitialiseTaskLists+0x7c>)
 800998a:	4a05      	ldr	r2, [pc, #20]	@ (80099a0 <prvInitialiseTaskLists+0x68>)
 800998c:	601a      	str	r2, [r3, #0]
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20000608 	.word	0x20000608
 800999c:	20000694 	.word	0x20000694
 80099a0:	200006a8 	.word	0x200006a8
 80099a4:	200006c4 	.word	0x200006c4
 80099a8:	200006d8 	.word	0x200006d8
 80099ac:	200006f0 	.word	0x200006f0
 80099b0:	200006bc 	.word	0x200006bc
 80099b4:	200006c0 	.word	0x200006c0

080099b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099be:	e019      	b.n	80099f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099c0:	f000 f9f2 	bl	8009da8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099c4:	4b10      	ldr	r3, [pc, #64]	@ (8009a08 <prvCheckTasksWaitingTermination+0x50>)
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3304      	adds	r3, #4
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7ff fbd1 	bl	8009178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099d6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a0c <prvCheckTasksWaitingTermination+0x54>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3b01      	subs	r3, #1
 80099dc:	4a0b      	ldr	r2, [pc, #44]	@ (8009a0c <prvCheckTasksWaitingTermination+0x54>)
 80099de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009a10 <prvCheckTasksWaitingTermination+0x58>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	4a0a      	ldr	r2, [pc, #40]	@ (8009a10 <prvCheckTasksWaitingTermination+0x58>)
 80099e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099ea:	f000 fa0f 	bl	8009e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f810 	bl	8009a14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099f4:	4b06      	ldr	r3, [pc, #24]	@ (8009a10 <prvCheckTasksWaitingTermination+0x58>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e1      	bne.n	80099c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099fc:	bf00      	nop
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	200006d8 	.word	0x200006d8
 8009a0c:	20000704 	.word	0x20000704
 8009a10:	200006ec 	.word	0x200006ec

08009a14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	334c      	adds	r3, #76	@ 0x4c
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 fd41 	bl	800b4a8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fb6a 	bl	800a104 <vPortFree>
			vPortFree( pxTCB );
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fb67 	bl	800a104 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a46:	4b0c      	ldr	r3, [pc, #48]	@ (8009a78 <prvResetNextTaskUnblockTime+0x38>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d104      	bne.n	8009a5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a50:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <prvResetNextTaskUnblockTime+0x3c>)
 8009a52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a58:	e008      	b.n	8009a6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a5a:	4b07      	ldr	r3, [pc, #28]	@ (8009a78 <prvResetNextTaskUnblockTime+0x38>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	4a04      	ldr	r2, [pc, #16]	@ (8009a7c <prvResetNextTaskUnblockTime+0x3c>)
 8009a6a:	6013      	str	r3, [r2, #0]
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	200006bc 	.word	0x200006bc
 8009a7c:	20000724 	.word	0x20000724

08009a80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a8a:	4b29      	ldr	r3, [pc, #164]	@ (8009b30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a90:	4b28      	ldr	r3, [pc, #160]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3304      	adds	r3, #4
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff fb6e 	bl	8009178 <uxListRemove>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10b      	bne.n	8009aba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009aa2:	4b24      	ldr	r3, [pc, #144]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8009aae:	43da      	mvns	r2, r3
 8009ab0:	4b21      	ldr	r3, [pc, #132]	@ (8009b38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	4a20      	ldr	r2, [pc, #128]	@ (8009b38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ab8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ac0:	d10a      	bne.n	8009ad8 <prvAddCurrentTaskToDelayedList+0x58>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d007      	beq.n	8009ad8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4619      	mov	r1, r3
 8009ad0:	481a      	ldr	r0, [pc, #104]	@ (8009b3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ad2:	f7ff faf4 	bl	80090be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ad6:	e026      	b.n	8009b26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ae0:	4b14      	ldr	r3, [pc, #80]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d209      	bcs.n	8009b04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009af0:	4b13      	ldr	r3, [pc, #76]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	4b0f      	ldr	r3, [pc, #60]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4619      	mov	r1, r3
 8009afc:	4610      	mov	r0, r2
 8009afe:	f7ff fb02 	bl	8009106 <vListInsert>
}
 8009b02:	e010      	b.n	8009b26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b04:	4b0f      	ldr	r3, [pc, #60]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	4b0a      	ldr	r3, [pc, #40]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	4619      	mov	r1, r3
 8009b10:	4610      	mov	r0, r2
 8009b12:	f7ff faf8 	bl	8009106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b16:	4b0c      	ldr	r3, [pc, #48]	@ (8009b48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d202      	bcs.n	8009b26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009b20:	4a09      	ldr	r2, [pc, #36]	@ (8009b48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	6013      	str	r3, [r2, #0]
}
 8009b26:	bf00      	nop
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20000708 	.word	0x20000708
 8009b34:	20000604 	.word	0x20000604
 8009b38:	2000070c 	.word	0x2000070c
 8009b3c:	200006f0 	.word	0x200006f0
 8009b40:	200006c0 	.word	0x200006c0
 8009b44:	200006bc 	.word	0x200006bc
 8009b48:	20000724 	.word	0x20000724

08009b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3b04      	subs	r3, #4
 8009b5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3b04      	subs	r3, #4
 8009b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f023 0201 	bic.w	r2, r3, #1
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3b04      	subs	r3, #4
 8009b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8009bb0 <pxPortInitialiseStack+0x64>)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3b14      	subs	r3, #20
 8009b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3b04      	subs	r3, #4
 8009b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f06f 0202 	mvn.w	r2, #2
 8009b9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	3b20      	subs	r3, #32
 8009ba0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	08009bb5 	.word	0x08009bb5

08009bb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bbe:	4b13      	ldr	r3, [pc, #76]	@ (8009c0c <prvTaskExitError+0x58>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bc6:	d00b      	beq.n	8009be0 <prvTaskExitError+0x2c>
	__asm volatile
 8009bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	60fb      	str	r3, [r7, #12]
}
 8009bda:	bf00      	nop
 8009bdc:	bf00      	nop
 8009bde:	e7fd      	b.n	8009bdc <prvTaskExitError+0x28>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	60bb      	str	r3, [r7, #8]
}
 8009bf2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bf4:	bf00      	nop
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0fc      	beq.n	8009bf6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	2000000c 	.word	0x2000000c

08009c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c10:	4b07      	ldr	r3, [pc, #28]	@ (8009c30 <pxCurrentTCBConst2>)
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	6808      	ldr	r0, [r1, #0]
 8009c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1a:	f380 8809 	msr	PSP, r0
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f04f 0000 	mov.w	r0, #0
 8009c26:	f380 8811 	msr	BASEPRI, r0
 8009c2a:	4770      	bx	lr
 8009c2c:	f3af 8000 	nop.w

08009c30 <pxCurrentTCBConst2>:
 8009c30:	20000604 	.word	0x20000604
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop

08009c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c38:	4808      	ldr	r0, [pc, #32]	@ (8009c5c <prvPortStartFirstTask+0x24>)
 8009c3a:	6800      	ldr	r0, [r0, #0]
 8009c3c:	6800      	ldr	r0, [r0, #0]
 8009c3e:	f380 8808 	msr	MSP, r0
 8009c42:	f04f 0000 	mov.w	r0, #0
 8009c46:	f380 8814 	msr	CONTROL, r0
 8009c4a:	b662      	cpsie	i
 8009c4c:	b661      	cpsie	f
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	df00      	svc	0
 8009c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c5a:	bf00      	nop
 8009c5c:	e000ed08 	.word	0xe000ed08

08009c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c66:	4b47      	ldr	r3, [pc, #284]	@ (8009d84 <xPortStartScheduler+0x124>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a47      	ldr	r2, [pc, #284]	@ (8009d88 <xPortStartScheduler+0x128>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d10b      	bne.n	8009c88 <xPortStartScheduler+0x28>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	613b      	str	r3, [r7, #16]
}
 8009c82:	bf00      	nop
 8009c84:	bf00      	nop
 8009c86:	e7fd      	b.n	8009c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c88:	4b3e      	ldr	r3, [pc, #248]	@ (8009d84 <xPortStartScheduler+0x124>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8009d8c <xPortStartScheduler+0x12c>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d10b      	bne.n	8009caa <xPortStartScheduler+0x4a>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	60fb      	str	r3, [r7, #12]
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop
 8009ca8:	e7fd      	b.n	8009ca6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009caa:	4b39      	ldr	r3, [pc, #228]	@ (8009d90 <xPortStartScheduler+0x130>)
 8009cac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	22ff      	movs	r2, #255	@ 0xff
 8009cba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	4b31      	ldr	r3, [pc, #196]	@ (8009d94 <xPortStartScheduler+0x134>)
 8009cd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cd2:	4b31      	ldr	r3, [pc, #196]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009cd4:	2207      	movs	r2, #7
 8009cd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cd8:	e009      	b.n	8009cee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009cda:	4b2f      	ldr	r3, [pc, #188]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009ce2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cee:	78fb      	ldrb	r3, [r7, #3]
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cf6:	2b80      	cmp	r3, #128	@ 0x80
 8009cf8:	d0ef      	beq.n	8009cda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cfa:	4b27      	ldr	r3, [pc, #156]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f1c3 0307 	rsb	r3, r3, #7
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d00b      	beq.n	8009d1e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	60bb      	str	r3, [r7, #8]
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	e7fd      	b.n	8009d1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	021b      	lsls	r3, r3, #8
 8009d24:	4a1c      	ldr	r2, [pc, #112]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009d26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d28:	4b1b      	ldr	r3, [pc, #108]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d30:	4a19      	ldr	r2, [pc, #100]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009d32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d3c:	4b17      	ldr	r3, [pc, #92]	@ (8009d9c <xPortStartScheduler+0x13c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a16      	ldr	r2, [pc, #88]	@ (8009d9c <xPortStartScheduler+0x13c>)
 8009d42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d48:	4b14      	ldr	r3, [pc, #80]	@ (8009d9c <xPortStartScheduler+0x13c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a13      	ldr	r2, [pc, #76]	@ (8009d9c <xPortStartScheduler+0x13c>)
 8009d4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d54:	f000 f8da 	bl	8009f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d58:	4b11      	ldr	r3, [pc, #68]	@ (8009da0 <xPortStartScheduler+0x140>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d5e:	f000 f8f9 	bl	8009f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d62:	4b10      	ldr	r3, [pc, #64]	@ (8009da4 <xPortStartScheduler+0x144>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a0f      	ldr	r2, [pc, #60]	@ (8009da4 <xPortStartScheduler+0x144>)
 8009d68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d6e:	f7ff ff63 	bl	8009c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d72:	f7ff fd65 	bl	8009840 <vTaskSwitchContext>
	prvTaskExitError();
 8009d76:	f7ff ff1d 	bl	8009bb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	e000ed00 	.word	0xe000ed00
 8009d88:	410fc271 	.word	0x410fc271
 8009d8c:	410fc270 	.word	0x410fc270
 8009d90:	e000e400 	.word	0xe000e400
 8009d94:	20000730 	.word	0x20000730
 8009d98:	20000734 	.word	0x20000734
 8009d9c:	e000ed20 	.word	0xe000ed20
 8009da0:	2000000c 	.word	0x2000000c
 8009da4:	e000ef34 	.word	0xe000ef34

08009da8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	607b      	str	r3, [r7, #4]
}
 8009dc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dc2:	4b10      	ldr	r3, [pc, #64]	@ (8009e04 <vPortEnterCritical+0x5c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8009e04 <vPortEnterCritical+0x5c>)
 8009dca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8009e04 <vPortEnterCritical+0x5c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d110      	bne.n	8009df6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009e08 <vPortEnterCritical+0x60>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00b      	beq.n	8009df6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	603b      	str	r3, [r7, #0]
}
 8009df0:	bf00      	nop
 8009df2:	bf00      	nop
 8009df4:	e7fd      	b.n	8009df2 <vPortEnterCritical+0x4a>
	}
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	2000000c 	.word	0x2000000c
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e12:	4b12      	ldr	r3, [pc, #72]	@ (8009e5c <vPortExitCritical+0x50>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10b      	bne.n	8009e32 <vPortExitCritical+0x26>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	607b      	str	r3, [r7, #4]
}
 8009e2c:	bf00      	nop
 8009e2e:	bf00      	nop
 8009e30:	e7fd      	b.n	8009e2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e32:	4b0a      	ldr	r3, [pc, #40]	@ (8009e5c <vPortExitCritical+0x50>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	4a08      	ldr	r2, [pc, #32]	@ (8009e5c <vPortExitCritical+0x50>)
 8009e3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e3c:	4b07      	ldr	r3, [pc, #28]	@ (8009e5c <vPortExitCritical+0x50>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d105      	bne.n	8009e50 <vPortExitCritical+0x44>
 8009e44:	2300      	movs	r3, #0
 8009e46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	2000000c 	.word	0x2000000c

08009e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e60:	f3ef 8009 	mrs	r0, PSP
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	4b15      	ldr	r3, [pc, #84]	@ (8009ec0 <pxCurrentTCBConst>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	f01e 0f10 	tst.w	lr, #16
 8009e70:	bf08      	it	eq
 8009e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7a:	6010      	str	r0, [r2, #0]
 8009e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e84:	f380 8811 	msr	BASEPRI, r0
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f7ff fcd6 	bl	8009840 <vTaskSwitchContext>
 8009e94:	f04f 0000 	mov.w	r0, #0
 8009e98:	f380 8811 	msr	BASEPRI, r0
 8009e9c:	bc09      	pop	{r0, r3}
 8009e9e:	6819      	ldr	r1, [r3, #0]
 8009ea0:	6808      	ldr	r0, [r1, #0]
 8009ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea6:	f01e 0f10 	tst.w	lr, #16
 8009eaa:	bf08      	it	eq
 8009eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009eb0:	f380 8809 	msr	PSP, r0
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	f3af 8000 	nop.w

08009ec0 <pxCurrentTCBConst>:
 8009ec0:	20000604 	.word	0x20000604
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop

08009ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	607b      	str	r3, [r7, #4]
}
 8009ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ee2:	f7ff fbf3 	bl	80096cc <xTaskIncrementTick>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d003      	beq.n	8009ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009eec:	4b06      	ldr	r3, [pc, #24]	@ (8009f08 <SysTick_Handler+0x40>)
 8009eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	f383 8811 	msr	BASEPRI, r3
}
 8009efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f00:	bf00      	nop
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	e000ed04 	.word	0xe000ed04

08009f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f10:	4b0b      	ldr	r3, [pc, #44]	@ (8009f40 <vPortSetupTimerInterrupt+0x34>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f16:	4b0b      	ldr	r3, [pc, #44]	@ (8009f44 <vPortSetupTimerInterrupt+0x38>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f48 <vPortSetupTimerInterrupt+0x3c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a0a      	ldr	r2, [pc, #40]	@ (8009f4c <vPortSetupTimerInterrupt+0x40>)
 8009f22:	fba2 2303 	umull	r2, r3, r2, r3
 8009f26:	099b      	lsrs	r3, r3, #6
 8009f28:	4a09      	ldr	r2, [pc, #36]	@ (8009f50 <vPortSetupTimerInterrupt+0x44>)
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f2e:	4b04      	ldr	r3, [pc, #16]	@ (8009f40 <vPortSetupTimerInterrupt+0x34>)
 8009f30:	2207      	movs	r2, #7
 8009f32:	601a      	str	r2, [r3, #0]
}
 8009f34:	bf00      	nop
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	e000e010 	.word	0xe000e010
 8009f44:	e000e018 	.word	0xe000e018
 8009f48:	20000000 	.word	0x20000000
 8009f4c:	10624dd3 	.word	0x10624dd3
 8009f50:	e000e014 	.word	0xe000e014

08009f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009f64 <vPortEnableVFP+0x10>
 8009f58:	6801      	ldr	r1, [r0, #0]
 8009f5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f5e:	6001      	str	r1, [r0, #0]
 8009f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f62:	bf00      	nop
 8009f64:	e000ed88 	.word	0xe000ed88

08009f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b08a      	sub	sp, #40	@ 0x28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f70:	2300      	movs	r3, #0
 8009f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f74:	f7ff fafe 	bl	8009574 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f78:	4b5c      	ldr	r3, [pc, #368]	@ (800a0ec <pvPortMalloc+0x184>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f80:	f000 f924 	bl	800a1cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f84:	4b5a      	ldr	r3, [pc, #360]	@ (800a0f0 <pvPortMalloc+0x188>)
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f040 8095 	bne.w	800a0bc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d01e      	beq.n	8009fd6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009f98:	2208      	movs	r2, #8
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f003 0307 	and.w	r3, r3, #7
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d015      	beq.n	8009fd6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f023 0307 	bic.w	r3, r3, #7
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00b      	beq.n	8009fd6 <pvPortMalloc+0x6e>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	617b      	str	r3, [r7, #20]
}
 8009fd0:	bf00      	nop
 8009fd2:	bf00      	nop
 8009fd4:	e7fd      	b.n	8009fd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d06f      	beq.n	800a0bc <pvPortMalloc+0x154>
 8009fdc:	4b45      	ldr	r3, [pc, #276]	@ (800a0f4 <pvPortMalloc+0x18c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d86a      	bhi.n	800a0bc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009fe6:	4b44      	ldr	r3, [pc, #272]	@ (800a0f8 <pvPortMalloc+0x190>)
 8009fe8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009fea:	4b43      	ldr	r3, [pc, #268]	@ (800a0f8 <pvPortMalloc+0x190>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ff0:	e004      	b.n	8009ffc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	429a      	cmp	r2, r3
 800a004:	d903      	bls.n	800a00e <pvPortMalloc+0xa6>
 800a006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1f1      	bne.n	8009ff2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a00e:	4b37      	ldr	r3, [pc, #220]	@ (800a0ec <pvPortMalloc+0x184>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a014:	429a      	cmp	r2, r3
 800a016:	d051      	beq.n	800a0bc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2208      	movs	r2, #8
 800a01e:	4413      	add	r3, r2
 800a020:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	1ad2      	subs	r2, r2, r3
 800a032:	2308      	movs	r3, #8
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	429a      	cmp	r2, r3
 800a038:	d920      	bls.n	800a07c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a03a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4413      	add	r3, r2
 800a040:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	f003 0307 	and.w	r3, r3, #7
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00b      	beq.n	800a064 <pvPortMalloc+0xfc>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	613b      	str	r3, [r7, #16]
}
 800a05e:	bf00      	nop
 800a060:	bf00      	nop
 800a062:	e7fd      	b.n	800a060 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a066:	685a      	ldr	r2, [r3, #4]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	1ad2      	subs	r2, r2, r3
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a076:	69b8      	ldr	r0, [r7, #24]
 800a078:	f000 f90a 	bl	800a290 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a07c:	4b1d      	ldr	r3, [pc, #116]	@ (800a0f4 <pvPortMalloc+0x18c>)
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	4a1b      	ldr	r2, [pc, #108]	@ (800a0f4 <pvPortMalloc+0x18c>)
 800a088:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a08a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0f4 <pvPortMalloc+0x18c>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	4b1b      	ldr	r3, [pc, #108]	@ (800a0fc <pvPortMalloc+0x194>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	429a      	cmp	r2, r3
 800a094:	d203      	bcs.n	800a09e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a096:	4b17      	ldr	r3, [pc, #92]	@ (800a0f4 <pvPortMalloc+0x18c>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a18      	ldr	r2, [pc, #96]	@ (800a0fc <pvPortMalloc+0x194>)
 800a09c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	4b13      	ldr	r3, [pc, #76]	@ (800a0f0 <pvPortMalloc+0x188>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a0b2:	4b13      	ldr	r3, [pc, #76]	@ (800a100 <pvPortMalloc+0x198>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	4a11      	ldr	r2, [pc, #68]	@ (800a100 <pvPortMalloc+0x198>)
 800a0ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0bc:	f7ff fa68 	bl	8009590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00b      	beq.n	800a0e2 <pvPortMalloc+0x17a>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	60fb      	str	r3, [r7, #12]
}
 800a0dc:	bf00      	nop
 800a0de:	bf00      	nop
 800a0e0:	e7fd      	b.n	800a0de <pvPortMalloc+0x176>
	return pvReturn;
 800a0e2:	69fb      	ldr	r3, [r7, #28]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3728      	adds	r7, #40	@ 0x28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	20002f40 	.word	0x20002f40
 800a0f0:	20002f54 	.word	0x20002f54
 800a0f4:	20002f44 	.word	0x20002f44
 800a0f8:	20002f38 	.word	0x20002f38
 800a0fc:	20002f48 	.word	0x20002f48
 800a100:	20002f4c 	.word	0x20002f4c

0800a104 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d04f      	beq.n	800a1b6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a116:	2308      	movs	r3, #8
 800a118:	425b      	negs	r3, r3
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	4413      	add	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	4b25      	ldr	r3, [pc, #148]	@ (800a1c0 <vPortFree+0xbc>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4013      	ands	r3, r2
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10b      	bne.n	800a14a <vPortFree+0x46>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	60fb      	str	r3, [r7, #12]
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	e7fd      	b.n	800a146 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00b      	beq.n	800a16a <vPortFree+0x66>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	60bb      	str	r3, [r7, #8]
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop
 800a168:	e7fd      	b.n	800a166 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	4b14      	ldr	r3, [pc, #80]	@ (800a1c0 <vPortFree+0xbc>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4013      	ands	r3, r2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d01e      	beq.n	800a1b6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d11a      	bne.n	800a1b6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c0 <vPortFree+0xbc>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	43db      	mvns	r3, r3
 800a18a:	401a      	ands	r2, r3
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a190:	f7ff f9f0 	bl	8009574 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c4 <vPortFree+0xc0>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4413      	add	r3, r2
 800a19e:	4a09      	ldr	r2, [pc, #36]	@ (800a1c4 <vPortFree+0xc0>)
 800a1a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1a2:	6938      	ldr	r0, [r7, #16]
 800a1a4:	f000 f874 	bl	800a290 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1a8:	4b07      	ldr	r3, [pc, #28]	@ (800a1c8 <vPortFree+0xc4>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	4a06      	ldr	r2, [pc, #24]	@ (800a1c8 <vPortFree+0xc4>)
 800a1b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a1b2:	f7ff f9ed 	bl	8009590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1b6:	bf00      	nop
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20002f54 	.word	0x20002f54
 800a1c4:	20002f44 	.word	0x20002f44
 800a1c8:	20002f50 	.word	0x20002f50

0800a1cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800a1d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a1d8:	4b27      	ldr	r3, [pc, #156]	@ (800a278 <prvHeapInit+0xac>)
 800a1da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f003 0307 	and.w	r3, r3, #7
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00c      	beq.n	800a200 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3307      	adds	r3, #7
 800a1ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0307 	bic.w	r3, r3, #7
 800a1f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	4a1f      	ldr	r2, [pc, #124]	@ (800a278 <prvHeapInit+0xac>)
 800a1fc:	4413      	add	r3, r2
 800a1fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a204:	4a1d      	ldr	r2, [pc, #116]	@ (800a27c <prvHeapInit+0xb0>)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a20a:	4b1c      	ldr	r3, [pc, #112]	@ (800a27c <prvHeapInit+0xb0>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	4413      	add	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a218:	2208      	movs	r2, #8
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	1a9b      	subs	r3, r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f023 0307 	bic.w	r3, r3, #7
 800a226:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4a15      	ldr	r2, [pc, #84]	@ (800a280 <prvHeapInit+0xb4>)
 800a22c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a22e:	4b14      	ldr	r3, [pc, #80]	@ (800a280 <prvHeapInit+0xb4>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2200      	movs	r2, #0
 800a234:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a236:	4b12      	ldr	r3, [pc, #72]	@ (800a280 <prvHeapInit+0xb4>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	1ad2      	subs	r2, r2, r3
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a24c:	4b0c      	ldr	r3, [pc, #48]	@ (800a280 <prvHeapInit+0xb4>)
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	4a0a      	ldr	r2, [pc, #40]	@ (800a284 <prvHeapInit+0xb8>)
 800a25a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	4a09      	ldr	r2, [pc, #36]	@ (800a288 <prvHeapInit+0xbc>)
 800a262:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a264:	4b09      	ldr	r3, [pc, #36]	@ (800a28c <prvHeapInit+0xc0>)
 800a266:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a26a:	601a      	str	r2, [r3, #0]
}
 800a26c:	bf00      	nop
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	20000738 	.word	0x20000738
 800a27c:	20002f38 	.word	0x20002f38
 800a280:	20002f40 	.word	0x20002f40
 800a284:	20002f48 	.word	0x20002f48
 800a288:	20002f44 	.word	0x20002f44
 800a28c:	20002f54 	.word	0x20002f54

0800a290 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a298:	4b28      	ldr	r3, [pc, #160]	@ (800a33c <prvInsertBlockIntoFreeList+0xac>)
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	e002      	b.n	800a2a4 <prvInsertBlockIntoFreeList+0x14>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d8f7      	bhi.n	800a29e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d108      	bne.n	800a2d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	441a      	add	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	441a      	add	r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d118      	bne.n	800a318 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	4b15      	ldr	r3, [pc, #84]	@ (800a340 <prvInsertBlockIntoFreeList+0xb0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d00d      	beq.n	800a30e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	441a      	add	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	e008      	b.n	800a320 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a30e:	4b0c      	ldr	r3, [pc, #48]	@ (800a340 <prvInsertBlockIntoFreeList+0xb0>)
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	e003      	b.n	800a320 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	429a      	cmp	r2, r3
 800a326:	d002      	beq.n	800a32e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a32e:	bf00      	nop
 800a330:	3714      	adds	r7, #20
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	20002f38 	.word	0x20002f38
 800a340:	20002f40 	.word	0x20002f40

0800a344 <__cvt>:
 800a344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a348:	ec57 6b10 	vmov	r6, r7, d0
 800a34c:	2f00      	cmp	r7, #0
 800a34e:	460c      	mov	r4, r1
 800a350:	4619      	mov	r1, r3
 800a352:	463b      	mov	r3, r7
 800a354:	bfbb      	ittet	lt
 800a356:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a35a:	461f      	movlt	r7, r3
 800a35c:	2300      	movge	r3, #0
 800a35e:	232d      	movlt	r3, #45	@ 0x2d
 800a360:	700b      	strb	r3, [r1, #0]
 800a362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a364:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a368:	4691      	mov	r9, r2
 800a36a:	f023 0820 	bic.w	r8, r3, #32
 800a36e:	bfbc      	itt	lt
 800a370:	4632      	movlt	r2, r6
 800a372:	4616      	movlt	r6, r2
 800a374:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a378:	d005      	beq.n	800a386 <__cvt+0x42>
 800a37a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a37e:	d100      	bne.n	800a382 <__cvt+0x3e>
 800a380:	3401      	adds	r4, #1
 800a382:	2102      	movs	r1, #2
 800a384:	e000      	b.n	800a388 <__cvt+0x44>
 800a386:	2103      	movs	r1, #3
 800a388:	ab03      	add	r3, sp, #12
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	ab02      	add	r3, sp, #8
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	ec47 6b10 	vmov	d0, r6, r7
 800a394:	4653      	mov	r3, sl
 800a396:	4622      	mov	r2, r4
 800a398:	f001 f9de 	bl	800b758 <_dtoa_r>
 800a39c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	d119      	bne.n	800a3d8 <__cvt+0x94>
 800a3a4:	f019 0f01 	tst.w	r9, #1
 800a3a8:	d00e      	beq.n	800a3c8 <__cvt+0x84>
 800a3aa:	eb00 0904 	add.w	r9, r0, r4
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	f7f6 fbaf 	bl	8000b18 <__aeabi_dcmpeq>
 800a3ba:	b108      	cbz	r0, 800a3c0 <__cvt+0x7c>
 800a3bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3c0:	2230      	movs	r2, #48	@ 0x30
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	454b      	cmp	r3, r9
 800a3c6:	d31e      	bcc.n	800a406 <__cvt+0xc2>
 800a3c8:	9b03      	ldr	r3, [sp, #12]
 800a3ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3cc:	1b5b      	subs	r3, r3, r5
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	6013      	str	r3, [r2, #0]
 800a3d2:	b004      	add	sp, #16
 800a3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a3dc:	eb00 0904 	add.w	r9, r0, r4
 800a3e0:	d1e5      	bne.n	800a3ae <__cvt+0x6a>
 800a3e2:	7803      	ldrb	r3, [r0, #0]
 800a3e4:	2b30      	cmp	r3, #48	@ 0x30
 800a3e6:	d10a      	bne.n	800a3fe <__cvt+0xba>
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	f7f6 fb92 	bl	8000b18 <__aeabi_dcmpeq>
 800a3f4:	b918      	cbnz	r0, 800a3fe <__cvt+0xba>
 800a3f6:	f1c4 0401 	rsb	r4, r4, #1
 800a3fa:	f8ca 4000 	str.w	r4, [sl]
 800a3fe:	f8da 3000 	ldr.w	r3, [sl]
 800a402:	4499      	add	r9, r3
 800a404:	e7d3      	b.n	800a3ae <__cvt+0x6a>
 800a406:	1c59      	adds	r1, r3, #1
 800a408:	9103      	str	r1, [sp, #12]
 800a40a:	701a      	strb	r2, [r3, #0]
 800a40c:	e7d9      	b.n	800a3c2 <__cvt+0x7e>

0800a40e <__exponent>:
 800a40e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a410:	2900      	cmp	r1, #0
 800a412:	bfba      	itte	lt
 800a414:	4249      	neglt	r1, r1
 800a416:	232d      	movlt	r3, #45	@ 0x2d
 800a418:	232b      	movge	r3, #43	@ 0x2b
 800a41a:	2909      	cmp	r1, #9
 800a41c:	7002      	strb	r2, [r0, #0]
 800a41e:	7043      	strb	r3, [r0, #1]
 800a420:	dd29      	ble.n	800a476 <__exponent+0x68>
 800a422:	f10d 0307 	add.w	r3, sp, #7
 800a426:	461d      	mov	r5, r3
 800a428:	270a      	movs	r7, #10
 800a42a:	461a      	mov	r2, r3
 800a42c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a430:	fb07 1416 	mls	r4, r7, r6, r1
 800a434:	3430      	adds	r4, #48	@ 0x30
 800a436:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a43a:	460c      	mov	r4, r1
 800a43c:	2c63      	cmp	r4, #99	@ 0x63
 800a43e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a442:	4631      	mov	r1, r6
 800a444:	dcf1      	bgt.n	800a42a <__exponent+0x1c>
 800a446:	3130      	adds	r1, #48	@ 0x30
 800a448:	1e94      	subs	r4, r2, #2
 800a44a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a44e:	1c41      	adds	r1, r0, #1
 800a450:	4623      	mov	r3, r4
 800a452:	42ab      	cmp	r3, r5
 800a454:	d30a      	bcc.n	800a46c <__exponent+0x5e>
 800a456:	f10d 0309 	add.w	r3, sp, #9
 800a45a:	1a9b      	subs	r3, r3, r2
 800a45c:	42ac      	cmp	r4, r5
 800a45e:	bf88      	it	hi
 800a460:	2300      	movhi	r3, #0
 800a462:	3302      	adds	r3, #2
 800a464:	4403      	add	r3, r0
 800a466:	1a18      	subs	r0, r3, r0
 800a468:	b003      	add	sp, #12
 800a46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a46c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a470:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a474:	e7ed      	b.n	800a452 <__exponent+0x44>
 800a476:	2330      	movs	r3, #48	@ 0x30
 800a478:	3130      	adds	r1, #48	@ 0x30
 800a47a:	7083      	strb	r3, [r0, #2]
 800a47c:	70c1      	strb	r1, [r0, #3]
 800a47e:	1d03      	adds	r3, r0, #4
 800a480:	e7f1      	b.n	800a466 <__exponent+0x58>
	...

0800a484 <_printf_float>:
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	b08d      	sub	sp, #52	@ 0x34
 800a48a:	460c      	mov	r4, r1
 800a48c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a490:	4616      	mov	r6, r2
 800a492:	461f      	mov	r7, r3
 800a494:	4605      	mov	r5, r0
 800a496:	f000 fff3 	bl	800b480 <_localeconv_r>
 800a49a:	6803      	ldr	r3, [r0, #0]
 800a49c:	9304      	str	r3, [sp, #16]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7f5 ff0e 	bl	80002c0 <strlen>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a4ac:	9005      	str	r0, [sp, #20]
 800a4ae:	3307      	adds	r3, #7
 800a4b0:	f023 0307 	bic.w	r3, r3, #7
 800a4b4:	f103 0208 	add.w	r2, r3, #8
 800a4b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a4bc:	f8d4 b000 	ldr.w	fp, [r4]
 800a4c0:	f8c8 2000 	str.w	r2, [r8]
 800a4c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a4cc:	9307      	str	r3, [sp, #28]
 800a4ce:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a4d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4da:	4b9c      	ldr	r3, [pc, #624]	@ (800a74c <_printf_float+0x2c8>)
 800a4dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4e0:	f7f6 fb4c 	bl	8000b7c <__aeabi_dcmpun>
 800a4e4:	bb70      	cbnz	r0, 800a544 <_printf_float+0xc0>
 800a4e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4ea:	4b98      	ldr	r3, [pc, #608]	@ (800a74c <_printf_float+0x2c8>)
 800a4ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4f0:	f7f6 fb26 	bl	8000b40 <__aeabi_dcmple>
 800a4f4:	bb30      	cbnz	r0, 800a544 <_printf_float+0xc0>
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	f7f6 fb15 	bl	8000b2c <__aeabi_dcmplt>
 800a502:	b110      	cbz	r0, 800a50a <_printf_float+0x86>
 800a504:	232d      	movs	r3, #45	@ 0x2d
 800a506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a50a:	4a91      	ldr	r2, [pc, #580]	@ (800a750 <_printf_float+0x2cc>)
 800a50c:	4b91      	ldr	r3, [pc, #580]	@ (800a754 <_printf_float+0x2d0>)
 800a50e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a512:	bf94      	ite	ls
 800a514:	4690      	movls	r8, r2
 800a516:	4698      	movhi	r8, r3
 800a518:	2303      	movs	r3, #3
 800a51a:	6123      	str	r3, [r4, #16]
 800a51c:	f02b 0304 	bic.w	r3, fp, #4
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	f04f 0900 	mov.w	r9, #0
 800a526:	9700      	str	r7, [sp, #0]
 800a528:	4633      	mov	r3, r6
 800a52a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a52c:	4621      	mov	r1, r4
 800a52e:	4628      	mov	r0, r5
 800a530:	f000 f9d2 	bl	800a8d8 <_printf_common>
 800a534:	3001      	adds	r0, #1
 800a536:	f040 808d 	bne.w	800a654 <_printf_float+0x1d0>
 800a53a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a53e:	b00d      	add	sp, #52	@ 0x34
 800a540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a544:	4642      	mov	r2, r8
 800a546:	464b      	mov	r3, r9
 800a548:	4640      	mov	r0, r8
 800a54a:	4649      	mov	r1, r9
 800a54c:	f7f6 fb16 	bl	8000b7c <__aeabi_dcmpun>
 800a550:	b140      	cbz	r0, 800a564 <_printf_float+0xe0>
 800a552:	464b      	mov	r3, r9
 800a554:	2b00      	cmp	r3, #0
 800a556:	bfbc      	itt	lt
 800a558:	232d      	movlt	r3, #45	@ 0x2d
 800a55a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a55e:	4a7e      	ldr	r2, [pc, #504]	@ (800a758 <_printf_float+0x2d4>)
 800a560:	4b7e      	ldr	r3, [pc, #504]	@ (800a75c <_printf_float+0x2d8>)
 800a562:	e7d4      	b.n	800a50e <_printf_float+0x8a>
 800a564:	6863      	ldr	r3, [r4, #4]
 800a566:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a56a:	9206      	str	r2, [sp, #24]
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	d13b      	bne.n	800a5e8 <_printf_float+0x164>
 800a570:	2306      	movs	r3, #6
 800a572:	6063      	str	r3, [r4, #4]
 800a574:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a578:	2300      	movs	r3, #0
 800a57a:	6022      	str	r2, [r4, #0]
 800a57c:	9303      	str	r3, [sp, #12]
 800a57e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a580:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a584:	ab09      	add	r3, sp, #36	@ 0x24
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	6861      	ldr	r1, [r4, #4]
 800a58a:	ec49 8b10 	vmov	d0, r8, r9
 800a58e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a592:	4628      	mov	r0, r5
 800a594:	f7ff fed6 	bl	800a344 <__cvt>
 800a598:	9b06      	ldr	r3, [sp, #24]
 800a59a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a59c:	2b47      	cmp	r3, #71	@ 0x47
 800a59e:	4680      	mov	r8, r0
 800a5a0:	d129      	bne.n	800a5f6 <_printf_float+0x172>
 800a5a2:	1cc8      	adds	r0, r1, #3
 800a5a4:	db02      	blt.n	800a5ac <_printf_float+0x128>
 800a5a6:	6863      	ldr	r3, [r4, #4]
 800a5a8:	4299      	cmp	r1, r3
 800a5aa:	dd41      	ble.n	800a630 <_printf_float+0x1ac>
 800a5ac:	f1aa 0a02 	sub.w	sl, sl, #2
 800a5b0:	fa5f fa8a 	uxtb.w	sl, sl
 800a5b4:	3901      	subs	r1, #1
 800a5b6:	4652      	mov	r2, sl
 800a5b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a5bc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a5be:	f7ff ff26 	bl	800a40e <__exponent>
 800a5c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5c4:	1813      	adds	r3, r2, r0
 800a5c6:	2a01      	cmp	r2, #1
 800a5c8:	4681      	mov	r9, r0
 800a5ca:	6123      	str	r3, [r4, #16]
 800a5cc:	dc02      	bgt.n	800a5d4 <_printf_float+0x150>
 800a5ce:	6822      	ldr	r2, [r4, #0]
 800a5d0:	07d2      	lsls	r2, r2, #31
 800a5d2:	d501      	bpl.n	800a5d8 <_printf_float+0x154>
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	6123      	str	r3, [r4, #16]
 800a5d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d0a2      	beq.n	800a526 <_printf_float+0xa2>
 800a5e0:	232d      	movs	r3, #45	@ 0x2d
 800a5e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5e6:	e79e      	b.n	800a526 <_printf_float+0xa2>
 800a5e8:	9a06      	ldr	r2, [sp, #24]
 800a5ea:	2a47      	cmp	r2, #71	@ 0x47
 800a5ec:	d1c2      	bne.n	800a574 <_printf_float+0xf0>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1c0      	bne.n	800a574 <_printf_float+0xf0>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e7bd      	b.n	800a572 <_printf_float+0xee>
 800a5f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a5fa:	d9db      	bls.n	800a5b4 <_printf_float+0x130>
 800a5fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a600:	d118      	bne.n	800a634 <_printf_float+0x1b0>
 800a602:	2900      	cmp	r1, #0
 800a604:	6863      	ldr	r3, [r4, #4]
 800a606:	dd0b      	ble.n	800a620 <_printf_float+0x19c>
 800a608:	6121      	str	r1, [r4, #16]
 800a60a:	b913      	cbnz	r3, 800a612 <_printf_float+0x18e>
 800a60c:	6822      	ldr	r2, [r4, #0]
 800a60e:	07d0      	lsls	r0, r2, #31
 800a610:	d502      	bpl.n	800a618 <_printf_float+0x194>
 800a612:	3301      	adds	r3, #1
 800a614:	440b      	add	r3, r1
 800a616:	6123      	str	r3, [r4, #16]
 800a618:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a61a:	f04f 0900 	mov.w	r9, #0
 800a61e:	e7db      	b.n	800a5d8 <_printf_float+0x154>
 800a620:	b913      	cbnz	r3, 800a628 <_printf_float+0x1a4>
 800a622:	6822      	ldr	r2, [r4, #0]
 800a624:	07d2      	lsls	r2, r2, #31
 800a626:	d501      	bpl.n	800a62c <_printf_float+0x1a8>
 800a628:	3302      	adds	r3, #2
 800a62a:	e7f4      	b.n	800a616 <_printf_float+0x192>
 800a62c:	2301      	movs	r3, #1
 800a62e:	e7f2      	b.n	800a616 <_printf_float+0x192>
 800a630:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a636:	4299      	cmp	r1, r3
 800a638:	db05      	blt.n	800a646 <_printf_float+0x1c2>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	6121      	str	r1, [r4, #16]
 800a63e:	07d8      	lsls	r0, r3, #31
 800a640:	d5ea      	bpl.n	800a618 <_printf_float+0x194>
 800a642:	1c4b      	adds	r3, r1, #1
 800a644:	e7e7      	b.n	800a616 <_printf_float+0x192>
 800a646:	2900      	cmp	r1, #0
 800a648:	bfd4      	ite	le
 800a64a:	f1c1 0202 	rsble	r2, r1, #2
 800a64e:	2201      	movgt	r2, #1
 800a650:	4413      	add	r3, r2
 800a652:	e7e0      	b.n	800a616 <_printf_float+0x192>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	055a      	lsls	r2, r3, #21
 800a658:	d407      	bmi.n	800a66a <_printf_float+0x1e6>
 800a65a:	6923      	ldr	r3, [r4, #16]
 800a65c:	4642      	mov	r2, r8
 800a65e:	4631      	mov	r1, r6
 800a660:	4628      	mov	r0, r5
 800a662:	47b8      	blx	r7
 800a664:	3001      	adds	r0, #1
 800a666:	d12b      	bne.n	800a6c0 <_printf_float+0x23c>
 800a668:	e767      	b.n	800a53a <_printf_float+0xb6>
 800a66a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a66e:	f240 80dd 	bls.w	800a82c <_printf_float+0x3a8>
 800a672:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a676:	2200      	movs	r2, #0
 800a678:	2300      	movs	r3, #0
 800a67a:	f7f6 fa4d 	bl	8000b18 <__aeabi_dcmpeq>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d033      	beq.n	800a6ea <_printf_float+0x266>
 800a682:	4a37      	ldr	r2, [pc, #220]	@ (800a760 <_printf_float+0x2dc>)
 800a684:	2301      	movs	r3, #1
 800a686:	4631      	mov	r1, r6
 800a688:	4628      	mov	r0, r5
 800a68a:	47b8      	blx	r7
 800a68c:	3001      	adds	r0, #1
 800a68e:	f43f af54 	beq.w	800a53a <_printf_float+0xb6>
 800a692:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a696:	4543      	cmp	r3, r8
 800a698:	db02      	blt.n	800a6a0 <_printf_float+0x21c>
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	07d8      	lsls	r0, r3, #31
 800a69e:	d50f      	bpl.n	800a6c0 <_printf_float+0x23c>
 800a6a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6a4:	4631      	mov	r1, r6
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	47b8      	blx	r7
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	f43f af45 	beq.w	800a53a <_printf_float+0xb6>
 800a6b0:	f04f 0900 	mov.w	r9, #0
 800a6b4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a6b8:	f104 0a1a 	add.w	sl, r4, #26
 800a6bc:	45c8      	cmp	r8, r9
 800a6be:	dc09      	bgt.n	800a6d4 <_printf_float+0x250>
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	079b      	lsls	r3, r3, #30
 800a6c4:	f100 8103 	bmi.w	800a8ce <_printf_float+0x44a>
 800a6c8:	68e0      	ldr	r0, [r4, #12]
 800a6ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6cc:	4298      	cmp	r0, r3
 800a6ce:	bfb8      	it	lt
 800a6d0:	4618      	movlt	r0, r3
 800a6d2:	e734      	b.n	800a53e <_printf_float+0xba>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	4652      	mov	r2, sl
 800a6d8:	4631      	mov	r1, r6
 800a6da:	4628      	mov	r0, r5
 800a6dc:	47b8      	blx	r7
 800a6de:	3001      	adds	r0, #1
 800a6e0:	f43f af2b 	beq.w	800a53a <_printf_float+0xb6>
 800a6e4:	f109 0901 	add.w	r9, r9, #1
 800a6e8:	e7e8      	b.n	800a6bc <_printf_float+0x238>
 800a6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	dc39      	bgt.n	800a764 <_printf_float+0x2e0>
 800a6f0:	4a1b      	ldr	r2, [pc, #108]	@ (800a760 <_printf_float+0x2dc>)
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	47b8      	blx	r7
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	f43f af1d 	beq.w	800a53a <_printf_float+0xb6>
 800a700:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a704:	ea59 0303 	orrs.w	r3, r9, r3
 800a708:	d102      	bne.n	800a710 <_printf_float+0x28c>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	07d9      	lsls	r1, r3, #31
 800a70e:	d5d7      	bpl.n	800a6c0 <_printf_float+0x23c>
 800a710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a714:	4631      	mov	r1, r6
 800a716:	4628      	mov	r0, r5
 800a718:	47b8      	blx	r7
 800a71a:	3001      	adds	r0, #1
 800a71c:	f43f af0d 	beq.w	800a53a <_printf_float+0xb6>
 800a720:	f04f 0a00 	mov.w	sl, #0
 800a724:	f104 0b1a 	add.w	fp, r4, #26
 800a728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a72a:	425b      	negs	r3, r3
 800a72c:	4553      	cmp	r3, sl
 800a72e:	dc01      	bgt.n	800a734 <_printf_float+0x2b0>
 800a730:	464b      	mov	r3, r9
 800a732:	e793      	b.n	800a65c <_printf_float+0x1d8>
 800a734:	2301      	movs	r3, #1
 800a736:	465a      	mov	r2, fp
 800a738:	4631      	mov	r1, r6
 800a73a:	4628      	mov	r0, r5
 800a73c:	47b8      	blx	r7
 800a73e:	3001      	adds	r0, #1
 800a740:	f43f aefb 	beq.w	800a53a <_printf_float+0xb6>
 800a744:	f10a 0a01 	add.w	sl, sl, #1
 800a748:	e7ee      	b.n	800a728 <_printf_float+0x2a4>
 800a74a:	bf00      	nop
 800a74c:	7fefffff 	.word	0x7fefffff
 800a750:	0800edb8 	.word	0x0800edb8
 800a754:	0800edbc 	.word	0x0800edbc
 800a758:	0800edc0 	.word	0x0800edc0
 800a75c:	0800edc4 	.word	0x0800edc4
 800a760:	0800edc8 	.word	0x0800edc8
 800a764:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a766:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a76a:	4553      	cmp	r3, sl
 800a76c:	bfa8      	it	ge
 800a76e:	4653      	movge	r3, sl
 800a770:	2b00      	cmp	r3, #0
 800a772:	4699      	mov	r9, r3
 800a774:	dc36      	bgt.n	800a7e4 <_printf_float+0x360>
 800a776:	f04f 0b00 	mov.w	fp, #0
 800a77a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a77e:	f104 021a 	add.w	r2, r4, #26
 800a782:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a784:	9306      	str	r3, [sp, #24]
 800a786:	eba3 0309 	sub.w	r3, r3, r9
 800a78a:	455b      	cmp	r3, fp
 800a78c:	dc31      	bgt.n	800a7f2 <_printf_float+0x36e>
 800a78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a790:	459a      	cmp	sl, r3
 800a792:	dc3a      	bgt.n	800a80a <_printf_float+0x386>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	07da      	lsls	r2, r3, #31
 800a798:	d437      	bmi.n	800a80a <_printf_float+0x386>
 800a79a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a79c:	ebaa 0903 	sub.w	r9, sl, r3
 800a7a0:	9b06      	ldr	r3, [sp, #24]
 800a7a2:	ebaa 0303 	sub.w	r3, sl, r3
 800a7a6:	4599      	cmp	r9, r3
 800a7a8:	bfa8      	it	ge
 800a7aa:	4699      	movge	r9, r3
 800a7ac:	f1b9 0f00 	cmp.w	r9, #0
 800a7b0:	dc33      	bgt.n	800a81a <_printf_float+0x396>
 800a7b2:	f04f 0800 	mov.w	r8, #0
 800a7b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7ba:	f104 0b1a 	add.w	fp, r4, #26
 800a7be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c0:	ebaa 0303 	sub.w	r3, sl, r3
 800a7c4:	eba3 0309 	sub.w	r3, r3, r9
 800a7c8:	4543      	cmp	r3, r8
 800a7ca:	f77f af79 	ble.w	800a6c0 <_printf_float+0x23c>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	465a      	mov	r2, fp
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	47b8      	blx	r7
 800a7d8:	3001      	adds	r0, #1
 800a7da:	f43f aeae 	beq.w	800a53a <_printf_float+0xb6>
 800a7de:	f108 0801 	add.w	r8, r8, #1
 800a7e2:	e7ec      	b.n	800a7be <_printf_float+0x33a>
 800a7e4:	4642      	mov	r2, r8
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	47b8      	blx	r7
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	d1c2      	bne.n	800a776 <_printf_float+0x2f2>
 800a7f0:	e6a3      	b.n	800a53a <_printf_float+0xb6>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	9206      	str	r2, [sp, #24]
 800a7fa:	47b8      	blx	r7
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	f43f ae9c 	beq.w	800a53a <_printf_float+0xb6>
 800a802:	9a06      	ldr	r2, [sp, #24]
 800a804:	f10b 0b01 	add.w	fp, fp, #1
 800a808:	e7bb      	b.n	800a782 <_printf_float+0x2fe>
 800a80a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a80e:	4631      	mov	r1, r6
 800a810:	4628      	mov	r0, r5
 800a812:	47b8      	blx	r7
 800a814:	3001      	adds	r0, #1
 800a816:	d1c0      	bne.n	800a79a <_printf_float+0x316>
 800a818:	e68f      	b.n	800a53a <_printf_float+0xb6>
 800a81a:	9a06      	ldr	r2, [sp, #24]
 800a81c:	464b      	mov	r3, r9
 800a81e:	4442      	add	r2, r8
 800a820:	4631      	mov	r1, r6
 800a822:	4628      	mov	r0, r5
 800a824:	47b8      	blx	r7
 800a826:	3001      	adds	r0, #1
 800a828:	d1c3      	bne.n	800a7b2 <_printf_float+0x32e>
 800a82a:	e686      	b.n	800a53a <_printf_float+0xb6>
 800a82c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a830:	f1ba 0f01 	cmp.w	sl, #1
 800a834:	dc01      	bgt.n	800a83a <_printf_float+0x3b6>
 800a836:	07db      	lsls	r3, r3, #31
 800a838:	d536      	bpl.n	800a8a8 <_printf_float+0x424>
 800a83a:	2301      	movs	r3, #1
 800a83c:	4642      	mov	r2, r8
 800a83e:	4631      	mov	r1, r6
 800a840:	4628      	mov	r0, r5
 800a842:	47b8      	blx	r7
 800a844:	3001      	adds	r0, #1
 800a846:	f43f ae78 	beq.w	800a53a <_printf_float+0xb6>
 800a84a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a84e:	4631      	mov	r1, r6
 800a850:	4628      	mov	r0, r5
 800a852:	47b8      	blx	r7
 800a854:	3001      	adds	r0, #1
 800a856:	f43f ae70 	beq.w	800a53a <_printf_float+0xb6>
 800a85a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a85e:	2200      	movs	r2, #0
 800a860:	2300      	movs	r3, #0
 800a862:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a866:	f7f6 f957 	bl	8000b18 <__aeabi_dcmpeq>
 800a86a:	b9c0      	cbnz	r0, 800a89e <_printf_float+0x41a>
 800a86c:	4653      	mov	r3, sl
 800a86e:	f108 0201 	add.w	r2, r8, #1
 800a872:	4631      	mov	r1, r6
 800a874:	4628      	mov	r0, r5
 800a876:	47b8      	blx	r7
 800a878:	3001      	adds	r0, #1
 800a87a:	d10c      	bne.n	800a896 <_printf_float+0x412>
 800a87c:	e65d      	b.n	800a53a <_printf_float+0xb6>
 800a87e:	2301      	movs	r3, #1
 800a880:	465a      	mov	r2, fp
 800a882:	4631      	mov	r1, r6
 800a884:	4628      	mov	r0, r5
 800a886:	47b8      	blx	r7
 800a888:	3001      	adds	r0, #1
 800a88a:	f43f ae56 	beq.w	800a53a <_printf_float+0xb6>
 800a88e:	f108 0801 	add.w	r8, r8, #1
 800a892:	45d0      	cmp	r8, sl
 800a894:	dbf3      	blt.n	800a87e <_printf_float+0x3fa>
 800a896:	464b      	mov	r3, r9
 800a898:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a89c:	e6df      	b.n	800a65e <_printf_float+0x1da>
 800a89e:	f04f 0800 	mov.w	r8, #0
 800a8a2:	f104 0b1a 	add.w	fp, r4, #26
 800a8a6:	e7f4      	b.n	800a892 <_printf_float+0x40e>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	4642      	mov	r2, r8
 800a8ac:	e7e1      	b.n	800a872 <_printf_float+0x3ee>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	464a      	mov	r2, r9
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b8      	blx	r7
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	f43f ae3e 	beq.w	800a53a <_printf_float+0xb6>
 800a8be:	f108 0801 	add.w	r8, r8, #1
 800a8c2:	68e3      	ldr	r3, [r4, #12]
 800a8c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8c6:	1a5b      	subs	r3, r3, r1
 800a8c8:	4543      	cmp	r3, r8
 800a8ca:	dcf0      	bgt.n	800a8ae <_printf_float+0x42a>
 800a8cc:	e6fc      	b.n	800a6c8 <_printf_float+0x244>
 800a8ce:	f04f 0800 	mov.w	r8, #0
 800a8d2:	f104 0919 	add.w	r9, r4, #25
 800a8d6:	e7f4      	b.n	800a8c2 <_printf_float+0x43e>

0800a8d8 <_printf_common>:
 800a8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8dc:	4616      	mov	r6, r2
 800a8de:	4698      	mov	r8, r3
 800a8e0:	688a      	ldr	r2, [r1, #8]
 800a8e2:	690b      	ldr	r3, [r1, #16]
 800a8e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	bfb8      	it	lt
 800a8ec:	4613      	movlt	r3, r2
 800a8ee:	6033      	str	r3, [r6, #0]
 800a8f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a8f4:	4607      	mov	r7, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	b10a      	cbz	r2, 800a8fe <_printf_common+0x26>
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	6033      	str	r3, [r6, #0]
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	0699      	lsls	r1, r3, #26
 800a902:	bf42      	ittt	mi
 800a904:	6833      	ldrmi	r3, [r6, #0]
 800a906:	3302      	addmi	r3, #2
 800a908:	6033      	strmi	r3, [r6, #0]
 800a90a:	6825      	ldr	r5, [r4, #0]
 800a90c:	f015 0506 	ands.w	r5, r5, #6
 800a910:	d106      	bne.n	800a920 <_printf_common+0x48>
 800a912:	f104 0a19 	add.w	sl, r4, #25
 800a916:	68e3      	ldr	r3, [r4, #12]
 800a918:	6832      	ldr	r2, [r6, #0]
 800a91a:	1a9b      	subs	r3, r3, r2
 800a91c:	42ab      	cmp	r3, r5
 800a91e:	dc26      	bgt.n	800a96e <_printf_common+0x96>
 800a920:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a924:	6822      	ldr	r2, [r4, #0]
 800a926:	3b00      	subs	r3, #0
 800a928:	bf18      	it	ne
 800a92a:	2301      	movne	r3, #1
 800a92c:	0692      	lsls	r2, r2, #26
 800a92e:	d42b      	bmi.n	800a988 <_printf_common+0xb0>
 800a930:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a934:	4641      	mov	r1, r8
 800a936:	4638      	mov	r0, r7
 800a938:	47c8      	blx	r9
 800a93a:	3001      	adds	r0, #1
 800a93c:	d01e      	beq.n	800a97c <_printf_common+0xa4>
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	f003 0306 	and.w	r3, r3, #6
 800a946:	2b04      	cmp	r3, #4
 800a948:	bf02      	ittt	eq
 800a94a:	68e5      	ldreq	r5, [r4, #12]
 800a94c:	6833      	ldreq	r3, [r6, #0]
 800a94e:	1aed      	subeq	r5, r5, r3
 800a950:	68a3      	ldr	r3, [r4, #8]
 800a952:	bf0c      	ite	eq
 800a954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a958:	2500      	movne	r5, #0
 800a95a:	4293      	cmp	r3, r2
 800a95c:	bfc4      	itt	gt
 800a95e:	1a9b      	subgt	r3, r3, r2
 800a960:	18ed      	addgt	r5, r5, r3
 800a962:	2600      	movs	r6, #0
 800a964:	341a      	adds	r4, #26
 800a966:	42b5      	cmp	r5, r6
 800a968:	d11a      	bne.n	800a9a0 <_printf_common+0xc8>
 800a96a:	2000      	movs	r0, #0
 800a96c:	e008      	b.n	800a980 <_printf_common+0xa8>
 800a96e:	2301      	movs	r3, #1
 800a970:	4652      	mov	r2, sl
 800a972:	4641      	mov	r1, r8
 800a974:	4638      	mov	r0, r7
 800a976:	47c8      	blx	r9
 800a978:	3001      	adds	r0, #1
 800a97a:	d103      	bne.n	800a984 <_printf_common+0xac>
 800a97c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a984:	3501      	adds	r5, #1
 800a986:	e7c6      	b.n	800a916 <_printf_common+0x3e>
 800a988:	18e1      	adds	r1, r4, r3
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	2030      	movs	r0, #48	@ 0x30
 800a98e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a992:	4422      	add	r2, r4
 800a994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a998:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a99c:	3302      	adds	r3, #2
 800a99e:	e7c7      	b.n	800a930 <_printf_common+0x58>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	4641      	mov	r1, r8
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	47c8      	blx	r9
 800a9aa:	3001      	adds	r0, #1
 800a9ac:	d0e6      	beq.n	800a97c <_printf_common+0xa4>
 800a9ae:	3601      	adds	r6, #1
 800a9b0:	e7d9      	b.n	800a966 <_printf_common+0x8e>
	...

0800a9b4 <_printf_i>:
 800a9b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b8:	7e0f      	ldrb	r7, [r1, #24]
 800a9ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9bc:	2f78      	cmp	r7, #120	@ 0x78
 800a9be:	4691      	mov	r9, r2
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	469a      	mov	sl, r3
 800a9c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9ca:	d807      	bhi.n	800a9dc <_printf_i+0x28>
 800a9cc:	2f62      	cmp	r7, #98	@ 0x62
 800a9ce:	d80a      	bhi.n	800a9e6 <_printf_i+0x32>
 800a9d0:	2f00      	cmp	r7, #0
 800a9d2:	f000 80d2 	beq.w	800ab7a <_printf_i+0x1c6>
 800a9d6:	2f58      	cmp	r7, #88	@ 0x58
 800a9d8:	f000 80b9 	beq.w	800ab4e <_printf_i+0x19a>
 800a9dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a9e4:	e03a      	b.n	800aa5c <_printf_i+0xa8>
 800a9e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a9ea:	2b15      	cmp	r3, #21
 800a9ec:	d8f6      	bhi.n	800a9dc <_printf_i+0x28>
 800a9ee:	a101      	add	r1, pc, #4	@ (adr r1, 800a9f4 <_printf_i+0x40>)
 800a9f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9f4:	0800aa4d 	.word	0x0800aa4d
 800a9f8:	0800aa61 	.word	0x0800aa61
 800a9fc:	0800a9dd 	.word	0x0800a9dd
 800aa00:	0800a9dd 	.word	0x0800a9dd
 800aa04:	0800a9dd 	.word	0x0800a9dd
 800aa08:	0800a9dd 	.word	0x0800a9dd
 800aa0c:	0800aa61 	.word	0x0800aa61
 800aa10:	0800a9dd 	.word	0x0800a9dd
 800aa14:	0800a9dd 	.word	0x0800a9dd
 800aa18:	0800a9dd 	.word	0x0800a9dd
 800aa1c:	0800a9dd 	.word	0x0800a9dd
 800aa20:	0800ab61 	.word	0x0800ab61
 800aa24:	0800aa8b 	.word	0x0800aa8b
 800aa28:	0800ab1b 	.word	0x0800ab1b
 800aa2c:	0800a9dd 	.word	0x0800a9dd
 800aa30:	0800a9dd 	.word	0x0800a9dd
 800aa34:	0800ab83 	.word	0x0800ab83
 800aa38:	0800a9dd 	.word	0x0800a9dd
 800aa3c:	0800aa8b 	.word	0x0800aa8b
 800aa40:	0800a9dd 	.word	0x0800a9dd
 800aa44:	0800a9dd 	.word	0x0800a9dd
 800aa48:	0800ab23 	.word	0x0800ab23
 800aa4c:	6833      	ldr	r3, [r6, #0]
 800aa4e:	1d1a      	adds	r2, r3, #4
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	6032      	str	r2, [r6, #0]
 800aa54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e09d      	b.n	800ab9c <_printf_i+0x1e8>
 800aa60:	6833      	ldr	r3, [r6, #0]
 800aa62:	6820      	ldr	r0, [r4, #0]
 800aa64:	1d19      	adds	r1, r3, #4
 800aa66:	6031      	str	r1, [r6, #0]
 800aa68:	0606      	lsls	r6, r0, #24
 800aa6a:	d501      	bpl.n	800aa70 <_printf_i+0xbc>
 800aa6c:	681d      	ldr	r5, [r3, #0]
 800aa6e:	e003      	b.n	800aa78 <_printf_i+0xc4>
 800aa70:	0645      	lsls	r5, r0, #25
 800aa72:	d5fb      	bpl.n	800aa6c <_printf_i+0xb8>
 800aa74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa78:	2d00      	cmp	r5, #0
 800aa7a:	da03      	bge.n	800aa84 <_printf_i+0xd0>
 800aa7c:	232d      	movs	r3, #45	@ 0x2d
 800aa7e:	426d      	negs	r5, r5
 800aa80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa84:	4859      	ldr	r0, [pc, #356]	@ (800abec <_printf_i+0x238>)
 800aa86:	230a      	movs	r3, #10
 800aa88:	e011      	b.n	800aaae <_printf_i+0xfa>
 800aa8a:	6821      	ldr	r1, [r4, #0]
 800aa8c:	6833      	ldr	r3, [r6, #0]
 800aa8e:	0608      	lsls	r0, r1, #24
 800aa90:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa94:	d402      	bmi.n	800aa9c <_printf_i+0xe8>
 800aa96:	0649      	lsls	r1, r1, #25
 800aa98:	bf48      	it	mi
 800aa9a:	b2ad      	uxthmi	r5, r5
 800aa9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa9e:	4853      	ldr	r0, [pc, #332]	@ (800abec <_printf_i+0x238>)
 800aaa0:	6033      	str	r3, [r6, #0]
 800aaa2:	bf14      	ite	ne
 800aaa4:	230a      	movne	r3, #10
 800aaa6:	2308      	moveq	r3, #8
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aaae:	6866      	ldr	r6, [r4, #4]
 800aab0:	60a6      	str	r6, [r4, #8]
 800aab2:	2e00      	cmp	r6, #0
 800aab4:	bfa2      	ittt	ge
 800aab6:	6821      	ldrge	r1, [r4, #0]
 800aab8:	f021 0104 	bicge.w	r1, r1, #4
 800aabc:	6021      	strge	r1, [r4, #0]
 800aabe:	b90d      	cbnz	r5, 800aac4 <_printf_i+0x110>
 800aac0:	2e00      	cmp	r6, #0
 800aac2:	d04b      	beq.n	800ab5c <_printf_i+0x1a8>
 800aac4:	4616      	mov	r6, r2
 800aac6:	fbb5 f1f3 	udiv	r1, r5, r3
 800aaca:	fb03 5711 	mls	r7, r3, r1, r5
 800aace:	5dc7      	ldrb	r7, [r0, r7]
 800aad0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aad4:	462f      	mov	r7, r5
 800aad6:	42bb      	cmp	r3, r7
 800aad8:	460d      	mov	r5, r1
 800aada:	d9f4      	bls.n	800aac6 <_printf_i+0x112>
 800aadc:	2b08      	cmp	r3, #8
 800aade:	d10b      	bne.n	800aaf8 <_printf_i+0x144>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	07df      	lsls	r7, r3, #31
 800aae4:	d508      	bpl.n	800aaf8 <_printf_i+0x144>
 800aae6:	6923      	ldr	r3, [r4, #16]
 800aae8:	6861      	ldr	r1, [r4, #4]
 800aaea:	4299      	cmp	r1, r3
 800aaec:	bfde      	ittt	le
 800aaee:	2330      	movle	r3, #48	@ 0x30
 800aaf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aaf4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800aaf8:	1b92      	subs	r2, r2, r6
 800aafa:	6122      	str	r2, [r4, #16]
 800aafc:	f8cd a000 	str.w	sl, [sp]
 800ab00:	464b      	mov	r3, r9
 800ab02:	aa03      	add	r2, sp, #12
 800ab04:	4621      	mov	r1, r4
 800ab06:	4640      	mov	r0, r8
 800ab08:	f7ff fee6 	bl	800a8d8 <_printf_common>
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d14a      	bne.n	800aba6 <_printf_i+0x1f2>
 800ab10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab14:	b004      	add	sp, #16
 800ab16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	f043 0320 	orr.w	r3, r3, #32
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	4833      	ldr	r0, [pc, #204]	@ (800abf0 <_printf_i+0x23c>)
 800ab24:	2778      	movs	r7, #120	@ 0x78
 800ab26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	6831      	ldr	r1, [r6, #0]
 800ab2e:	061f      	lsls	r7, r3, #24
 800ab30:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab34:	d402      	bmi.n	800ab3c <_printf_i+0x188>
 800ab36:	065f      	lsls	r7, r3, #25
 800ab38:	bf48      	it	mi
 800ab3a:	b2ad      	uxthmi	r5, r5
 800ab3c:	6031      	str	r1, [r6, #0]
 800ab3e:	07d9      	lsls	r1, r3, #31
 800ab40:	bf44      	itt	mi
 800ab42:	f043 0320 	orrmi.w	r3, r3, #32
 800ab46:	6023      	strmi	r3, [r4, #0]
 800ab48:	b11d      	cbz	r5, 800ab52 <_printf_i+0x19e>
 800ab4a:	2310      	movs	r3, #16
 800ab4c:	e7ac      	b.n	800aaa8 <_printf_i+0xf4>
 800ab4e:	4827      	ldr	r0, [pc, #156]	@ (800abec <_printf_i+0x238>)
 800ab50:	e7e9      	b.n	800ab26 <_printf_i+0x172>
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	f023 0320 	bic.w	r3, r3, #32
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	e7f6      	b.n	800ab4a <_printf_i+0x196>
 800ab5c:	4616      	mov	r6, r2
 800ab5e:	e7bd      	b.n	800aadc <_printf_i+0x128>
 800ab60:	6833      	ldr	r3, [r6, #0]
 800ab62:	6825      	ldr	r5, [r4, #0]
 800ab64:	6961      	ldr	r1, [r4, #20]
 800ab66:	1d18      	adds	r0, r3, #4
 800ab68:	6030      	str	r0, [r6, #0]
 800ab6a:	062e      	lsls	r6, r5, #24
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	d501      	bpl.n	800ab74 <_printf_i+0x1c0>
 800ab70:	6019      	str	r1, [r3, #0]
 800ab72:	e002      	b.n	800ab7a <_printf_i+0x1c6>
 800ab74:	0668      	lsls	r0, r5, #25
 800ab76:	d5fb      	bpl.n	800ab70 <_printf_i+0x1bc>
 800ab78:	8019      	strh	r1, [r3, #0]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	6123      	str	r3, [r4, #16]
 800ab7e:	4616      	mov	r6, r2
 800ab80:	e7bc      	b.n	800aafc <_printf_i+0x148>
 800ab82:	6833      	ldr	r3, [r6, #0]
 800ab84:	1d1a      	adds	r2, r3, #4
 800ab86:	6032      	str	r2, [r6, #0]
 800ab88:	681e      	ldr	r6, [r3, #0]
 800ab8a:	6862      	ldr	r2, [r4, #4]
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f7f5 fb46 	bl	8000220 <memchr>
 800ab94:	b108      	cbz	r0, 800ab9a <_printf_i+0x1e6>
 800ab96:	1b80      	subs	r0, r0, r6
 800ab98:	6060      	str	r0, [r4, #4]
 800ab9a:	6863      	ldr	r3, [r4, #4]
 800ab9c:	6123      	str	r3, [r4, #16]
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aba4:	e7aa      	b.n	800aafc <_printf_i+0x148>
 800aba6:	6923      	ldr	r3, [r4, #16]
 800aba8:	4632      	mov	r2, r6
 800abaa:	4649      	mov	r1, r9
 800abac:	4640      	mov	r0, r8
 800abae:	47d0      	blx	sl
 800abb0:	3001      	adds	r0, #1
 800abb2:	d0ad      	beq.n	800ab10 <_printf_i+0x15c>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	079b      	lsls	r3, r3, #30
 800abb8:	d413      	bmi.n	800abe2 <_printf_i+0x22e>
 800abba:	68e0      	ldr	r0, [r4, #12]
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	4298      	cmp	r0, r3
 800abc0:	bfb8      	it	lt
 800abc2:	4618      	movlt	r0, r3
 800abc4:	e7a6      	b.n	800ab14 <_printf_i+0x160>
 800abc6:	2301      	movs	r3, #1
 800abc8:	4632      	mov	r2, r6
 800abca:	4649      	mov	r1, r9
 800abcc:	4640      	mov	r0, r8
 800abce:	47d0      	blx	sl
 800abd0:	3001      	adds	r0, #1
 800abd2:	d09d      	beq.n	800ab10 <_printf_i+0x15c>
 800abd4:	3501      	adds	r5, #1
 800abd6:	68e3      	ldr	r3, [r4, #12]
 800abd8:	9903      	ldr	r1, [sp, #12]
 800abda:	1a5b      	subs	r3, r3, r1
 800abdc:	42ab      	cmp	r3, r5
 800abde:	dcf2      	bgt.n	800abc6 <_printf_i+0x212>
 800abe0:	e7eb      	b.n	800abba <_printf_i+0x206>
 800abe2:	2500      	movs	r5, #0
 800abe4:	f104 0619 	add.w	r6, r4, #25
 800abe8:	e7f5      	b.n	800abd6 <_printf_i+0x222>
 800abea:	bf00      	nop
 800abec:	0800edca 	.word	0x0800edca
 800abf0:	0800eddb 	.word	0x0800eddb

0800abf4 <_scanf_float>:
 800abf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf8:	b087      	sub	sp, #28
 800abfa:	4617      	mov	r7, r2
 800abfc:	9303      	str	r3, [sp, #12]
 800abfe:	688b      	ldr	r3, [r1, #8]
 800ac00:	1e5a      	subs	r2, r3, #1
 800ac02:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ac06:	bf81      	itttt	hi
 800ac08:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ac0c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ac10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ac14:	608b      	strhi	r3, [r1, #8]
 800ac16:	680b      	ldr	r3, [r1, #0]
 800ac18:	460a      	mov	r2, r1
 800ac1a:	f04f 0500 	mov.w	r5, #0
 800ac1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ac22:	f842 3b1c 	str.w	r3, [r2], #28
 800ac26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ac2a:	4680      	mov	r8, r0
 800ac2c:	460c      	mov	r4, r1
 800ac2e:	bf98      	it	ls
 800ac30:	f04f 0b00 	movls.w	fp, #0
 800ac34:	9201      	str	r2, [sp, #4]
 800ac36:	4616      	mov	r6, r2
 800ac38:	46aa      	mov	sl, r5
 800ac3a:	46a9      	mov	r9, r5
 800ac3c:	9502      	str	r5, [sp, #8]
 800ac3e:	68a2      	ldr	r2, [r4, #8]
 800ac40:	b152      	cbz	r2, 800ac58 <_scanf_float+0x64>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b4e      	cmp	r3, #78	@ 0x4e
 800ac48:	d864      	bhi.n	800ad14 <_scanf_float+0x120>
 800ac4a:	2b40      	cmp	r3, #64	@ 0x40
 800ac4c:	d83c      	bhi.n	800acc8 <_scanf_float+0xd4>
 800ac4e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ac52:	b2c8      	uxtb	r0, r1
 800ac54:	280e      	cmp	r0, #14
 800ac56:	d93a      	bls.n	800acce <_scanf_float+0xda>
 800ac58:	f1b9 0f00 	cmp.w	r9, #0
 800ac5c:	d003      	beq.n	800ac66 <_scanf_float+0x72>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ac6a:	f1ba 0f01 	cmp.w	sl, #1
 800ac6e:	f200 8117 	bhi.w	800aea0 <_scanf_float+0x2ac>
 800ac72:	9b01      	ldr	r3, [sp, #4]
 800ac74:	429e      	cmp	r6, r3
 800ac76:	f200 8108 	bhi.w	800ae8a <_scanf_float+0x296>
 800ac7a:	2001      	movs	r0, #1
 800ac7c:	b007      	add	sp, #28
 800ac7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac82:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ac86:	2a0d      	cmp	r2, #13
 800ac88:	d8e6      	bhi.n	800ac58 <_scanf_float+0x64>
 800ac8a:	a101      	add	r1, pc, #4	@ (adr r1, 800ac90 <_scanf_float+0x9c>)
 800ac8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac90:	0800add7 	.word	0x0800add7
 800ac94:	0800ac59 	.word	0x0800ac59
 800ac98:	0800ac59 	.word	0x0800ac59
 800ac9c:	0800ac59 	.word	0x0800ac59
 800aca0:	0800ae37 	.word	0x0800ae37
 800aca4:	0800ae0f 	.word	0x0800ae0f
 800aca8:	0800ac59 	.word	0x0800ac59
 800acac:	0800ac59 	.word	0x0800ac59
 800acb0:	0800ade5 	.word	0x0800ade5
 800acb4:	0800ac59 	.word	0x0800ac59
 800acb8:	0800ac59 	.word	0x0800ac59
 800acbc:	0800ac59 	.word	0x0800ac59
 800acc0:	0800ac59 	.word	0x0800ac59
 800acc4:	0800ad9d 	.word	0x0800ad9d
 800acc8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800accc:	e7db      	b.n	800ac86 <_scanf_float+0x92>
 800acce:	290e      	cmp	r1, #14
 800acd0:	d8c2      	bhi.n	800ac58 <_scanf_float+0x64>
 800acd2:	a001      	add	r0, pc, #4	@ (adr r0, 800acd8 <_scanf_float+0xe4>)
 800acd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800acd8:	0800ad8d 	.word	0x0800ad8d
 800acdc:	0800ac59 	.word	0x0800ac59
 800ace0:	0800ad8d 	.word	0x0800ad8d
 800ace4:	0800ae23 	.word	0x0800ae23
 800ace8:	0800ac59 	.word	0x0800ac59
 800acec:	0800ad35 	.word	0x0800ad35
 800acf0:	0800ad73 	.word	0x0800ad73
 800acf4:	0800ad73 	.word	0x0800ad73
 800acf8:	0800ad73 	.word	0x0800ad73
 800acfc:	0800ad73 	.word	0x0800ad73
 800ad00:	0800ad73 	.word	0x0800ad73
 800ad04:	0800ad73 	.word	0x0800ad73
 800ad08:	0800ad73 	.word	0x0800ad73
 800ad0c:	0800ad73 	.word	0x0800ad73
 800ad10:	0800ad73 	.word	0x0800ad73
 800ad14:	2b6e      	cmp	r3, #110	@ 0x6e
 800ad16:	d809      	bhi.n	800ad2c <_scanf_float+0x138>
 800ad18:	2b60      	cmp	r3, #96	@ 0x60
 800ad1a:	d8b2      	bhi.n	800ac82 <_scanf_float+0x8e>
 800ad1c:	2b54      	cmp	r3, #84	@ 0x54
 800ad1e:	d07b      	beq.n	800ae18 <_scanf_float+0x224>
 800ad20:	2b59      	cmp	r3, #89	@ 0x59
 800ad22:	d199      	bne.n	800ac58 <_scanf_float+0x64>
 800ad24:	2d07      	cmp	r5, #7
 800ad26:	d197      	bne.n	800ac58 <_scanf_float+0x64>
 800ad28:	2508      	movs	r5, #8
 800ad2a:	e02c      	b.n	800ad86 <_scanf_float+0x192>
 800ad2c:	2b74      	cmp	r3, #116	@ 0x74
 800ad2e:	d073      	beq.n	800ae18 <_scanf_float+0x224>
 800ad30:	2b79      	cmp	r3, #121	@ 0x79
 800ad32:	e7f6      	b.n	800ad22 <_scanf_float+0x12e>
 800ad34:	6821      	ldr	r1, [r4, #0]
 800ad36:	05c8      	lsls	r0, r1, #23
 800ad38:	d51b      	bpl.n	800ad72 <_scanf_float+0x17e>
 800ad3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ad3e:	6021      	str	r1, [r4, #0]
 800ad40:	f109 0901 	add.w	r9, r9, #1
 800ad44:	f1bb 0f00 	cmp.w	fp, #0
 800ad48:	d003      	beq.n	800ad52 <_scanf_float+0x15e>
 800ad4a:	3201      	adds	r2, #1
 800ad4c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800ad50:	60a2      	str	r2, [r4, #8]
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	60a3      	str	r3, [r4, #8]
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	6123      	str	r3, [r4, #16]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	607b      	str	r3, [r7, #4]
 800ad66:	f340 8087 	ble.w	800ae78 <_scanf_float+0x284>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	e765      	b.n	800ac3e <_scanf_float+0x4a>
 800ad72:	eb1a 0105 	adds.w	r1, sl, r5
 800ad76:	f47f af6f 	bne.w	800ac58 <_scanf_float+0x64>
 800ad7a:	6822      	ldr	r2, [r4, #0]
 800ad7c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ad80:	6022      	str	r2, [r4, #0]
 800ad82:	460d      	mov	r5, r1
 800ad84:	468a      	mov	sl, r1
 800ad86:	f806 3b01 	strb.w	r3, [r6], #1
 800ad8a:	e7e2      	b.n	800ad52 <_scanf_float+0x15e>
 800ad8c:	6822      	ldr	r2, [r4, #0]
 800ad8e:	0610      	lsls	r0, r2, #24
 800ad90:	f57f af62 	bpl.w	800ac58 <_scanf_float+0x64>
 800ad94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ad98:	6022      	str	r2, [r4, #0]
 800ad9a:	e7f4      	b.n	800ad86 <_scanf_float+0x192>
 800ad9c:	f1ba 0f00 	cmp.w	sl, #0
 800ada0:	d10e      	bne.n	800adc0 <_scanf_float+0x1cc>
 800ada2:	f1b9 0f00 	cmp.w	r9, #0
 800ada6:	d10e      	bne.n	800adc6 <_scanf_float+0x1d2>
 800ada8:	6822      	ldr	r2, [r4, #0]
 800adaa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800adae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800adb2:	d108      	bne.n	800adc6 <_scanf_float+0x1d2>
 800adb4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800adb8:	6022      	str	r2, [r4, #0]
 800adba:	f04f 0a01 	mov.w	sl, #1
 800adbe:	e7e2      	b.n	800ad86 <_scanf_float+0x192>
 800adc0:	f1ba 0f02 	cmp.w	sl, #2
 800adc4:	d055      	beq.n	800ae72 <_scanf_float+0x27e>
 800adc6:	2d01      	cmp	r5, #1
 800adc8:	d002      	beq.n	800add0 <_scanf_float+0x1dc>
 800adca:	2d04      	cmp	r5, #4
 800adcc:	f47f af44 	bne.w	800ac58 <_scanf_float+0x64>
 800add0:	3501      	adds	r5, #1
 800add2:	b2ed      	uxtb	r5, r5
 800add4:	e7d7      	b.n	800ad86 <_scanf_float+0x192>
 800add6:	f1ba 0f01 	cmp.w	sl, #1
 800adda:	f47f af3d 	bne.w	800ac58 <_scanf_float+0x64>
 800adde:	f04f 0a02 	mov.w	sl, #2
 800ade2:	e7d0      	b.n	800ad86 <_scanf_float+0x192>
 800ade4:	b97d      	cbnz	r5, 800ae06 <_scanf_float+0x212>
 800ade6:	f1b9 0f00 	cmp.w	r9, #0
 800adea:	f47f af38 	bne.w	800ac5e <_scanf_float+0x6a>
 800adee:	6822      	ldr	r2, [r4, #0]
 800adf0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800adf4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800adf8:	f040 8108 	bne.w	800b00c <_scanf_float+0x418>
 800adfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ae00:	6022      	str	r2, [r4, #0]
 800ae02:	2501      	movs	r5, #1
 800ae04:	e7bf      	b.n	800ad86 <_scanf_float+0x192>
 800ae06:	2d03      	cmp	r5, #3
 800ae08:	d0e2      	beq.n	800add0 <_scanf_float+0x1dc>
 800ae0a:	2d05      	cmp	r5, #5
 800ae0c:	e7de      	b.n	800adcc <_scanf_float+0x1d8>
 800ae0e:	2d02      	cmp	r5, #2
 800ae10:	f47f af22 	bne.w	800ac58 <_scanf_float+0x64>
 800ae14:	2503      	movs	r5, #3
 800ae16:	e7b6      	b.n	800ad86 <_scanf_float+0x192>
 800ae18:	2d06      	cmp	r5, #6
 800ae1a:	f47f af1d 	bne.w	800ac58 <_scanf_float+0x64>
 800ae1e:	2507      	movs	r5, #7
 800ae20:	e7b1      	b.n	800ad86 <_scanf_float+0x192>
 800ae22:	6822      	ldr	r2, [r4, #0]
 800ae24:	0591      	lsls	r1, r2, #22
 800ae26:	f57f af17 	bpl.w	800ac58 <_scanf_float+0x64>
 800ae2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ae2e:	6022      	str	r2, [r4, #0]
 800ae30:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae34:	e7a7      	b.n	800ad86 <_scanf_float+0x192>
 800ae36:	6822      	ldr	r2, [r4, #0]
 800ae38:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ae3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ae40:	d006      	beq.n	800ae50 <_scanf_float+0x25c>
 800ae42:	0550      	lsls	r0, r2, #21
 800ae44:	f57f af08 	bpl.w	800ac58 <_scanf_float+0x64>
 800ae48:	f1b9 0f00 	cmp.w	r9, #0
 800ae4c:	f000 80de 	beq.w	800b00c <_scanf_float+0x418>
 800ae50:	0591      	lsls	r1, r2, #22
 800ae52:	bf58      	it	pl
 800ae54:	9902      	ldrpl	r1, [sp, #8]
 800ae56:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ae5a:	bf58      	it	pl
 800ae5c:	eba9 0101 	subpl.w	r1, r9, r1
 800ae60:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ae64:	bf58      	it	pl
 800ae66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ae6a:	6022      	str	r2, [r4, #0]
 800ae6c:	f04f 0900 	mov.w	r9, #0
 800ae70:	e789      	b.n	800ad86 <_scanf_float+0x192>
 800ae72:	f04f 0a03 	mov.w	sl, #3
 800ae76:	e786      	b.n	800ad86 <_scanf_float+0x192>
 800ae78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	4640      	mov	r0, r8
 800ae80:	4798      	blx	r3
 800ae82:	2800      	cmp	r0, #0
 800ae84:	f43f aedb 	beq.w	800ac3e <_scanf_float+0x4a>
 800ae88:	e6e6      	b.n	800ac58 <_scanf_float+0x64>
 800ae8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae92:	463a      	mov	r2, r7
 800ae94:	4640      	mov	r0, r8
 800ae96:	4798      	blx	r3
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	6123      	str	r3, [r4, #16]
 800ae9e:	e6e8      	b.n	800ac72 <_scanf_float+0x7e>
 800aea0:	1e6b      	subs	r3, r5, #1
 800aea2:	2b06      	cmp	r3, #6
 800aea4:	d824      	bhi.n	800aef0 <_scanf_float+0x2fc>
 800aea6:	2d02      	cmp	r5, #2
 800aea8:	d836      	bhi.n	800af18 <_scanf_float+0x324>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	429e      	cmp	r6, r3
 800aeae:	f67f aee4 	bls.w	800ac7a <_scanf_float+0x86>
 800aeb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aeb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aeba:	463a      	mov	r2, r7
 800aebc:	4640      	mov	r0, r8
 800aebe:	4798      	blx	r3
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	6123      	str	r3, [r4, #16]
 800aec6:	e7f0      	b.n	800aeaa <_scanf_float+0x2b6>
 800aec8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aecc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aed0:	463a      	mov	r2, r7
 800aed2:	4640      	mov	r0, r8
 800aed4:	4798      	blx	r3
 800aed6:	6923      	ldr	r3, [r4, #16]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	6123      	str	r3, [r4, #16]
 800aedc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aee0:	fa5f fa8a 	uxtb.w	sl, sl
 800aee4:	f1ba 0f02 	cmp.w	sl, #2
 800aee8:	d1ee      	bne.n	800aec8 <_scanf_float+0x2d4>
 800aeea:	3d03      	subs	r5, #3
 800aeec:	b2ed      	uxtb	r5, r5
 800aeee:	1b76      	subs	r6, r6, r5
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	05da      	lsls	r2, r3, #23
 800aef4:	d530      	bpl.n	800af58 <_scanf_float+0x364>
 800aef6:	055b      	lsls	r3, r3, #21
 800aef8:	d511      	bpl.n	800af1e <_scanf_float+0x32a>
 800aefa:	9b01      	ldr	r3, [sp, #4]
 800aefc:	429e      	cmp	r6, r3
 800aefe:	f67f aebc 	bls.w	800ac7a <_scanf_float+0x86>
 800af02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af0a:	463a      	mov	r2, r7
 800af0c:	4640      	mov	r0, r8
 800af0e:	4798      	blx	r3
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	3b01      	subs	r3, #1
 800af14:	6123      	str	r3, [r4, #16]
 800af16:	e7f0      	b.n	800aefa <_scanf_float+0x306>
 800af18:	46aa      	mov	sl, r5
 800af1a:	46b3      	mov	fp, r6
 800af1c:	e7de      	b.n	800aedc <_scanf_float+0x2e8>
 800af1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800af22:	6923      	ldr	r3, [r4, #16]
 800af24:	2965      	cmp	r1, #101	@ 0x65
 800af26:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800af2a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800af2e:	6123      	str	r3, [r4, #16]
 800af30:	d00c      	beq.n	800af4c <_scanf_float+0x358>
 800af32:	2945      	cmp	r1, #69	@ 0x45
 800af34:	d00a      	beq.n	800af4c <_scanf_float+0x358>
 800af36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af3a:	463a      	mov	r2, r7
 800af3c:	4640      	mov	r0, r8
 800af3e:	4798      	blx	r3
 800af40:	6923      	ldr	r3, [r4, #16]
 800af42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800af46:	3b01      	subs	r3, #1
 800af48:	1eb5      	subs	r5, r6, #2
 800af4a:	6123      	str	r3, [r4, #16]
 800af4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af50:	463a      	mov	r2, r7
 800af52:	4640      	mov	r0, r8
 800af54:	4798      	blx	r3
 800af56:	462e      	mov	r6, r5
 800af58:	6822      	ldr	r2, [r4, #0]
 800af5a:	f012 0210 	ands.w	r2, r2, #16
 800af5e:	d001      	beq.n	800af64 <_scanf_float+0x370>
 800af60:	2000      	movs	r0, #0
 800af62:	e68b      	b.n	800ac7c <_scanf_float+0x88>
 800af64:	7032      	strb	r2, [r6, #0]
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800af6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af70:	d11c      	bne.n	800afac <_scanf_float+0x3b8>
 800af72:	9b02      	ldr	r3, [sp, #8]
 800af74:	454b      	cmp	r3, r9
 800af76:	eba3 0209 	sub.w	r2, r3, r9
 800af7a:	d123      	bne.n	800afc4 <_scanf_float+0x3d0>
 800af7c:	9901      	ldr	r1, [sp, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	4640      	mov	r0, r8
 800af82:	f002 fd61 	bl	800da48 <_strtod_r>
 800af86:	9b03      	ldr	r3, [sp, #12]
 800af88:	6821      	ldr	r1, [r4, #0]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f011 0f02 	tst.w	r1, #2
 800af90:	ec57 6b10 	vmov	r6, r7, d0
 800af94:	f103 0204 	add.w	r2, r3, #4
 800af98:	d01f      	beq.n	800afda <_scanf_float+0x3e6>
 800af9a:	9903      	ldr	r1, [sp, #12]
 800af9c:	600a      	str	r2, [r1, #0]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	e9c3 6700 	strd	r6, r7, [r3]
 800afa4:	68e3      	ldr	r3, [r4, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	60e3      	str	r3, [r4, #12]
 800afaa:	e7d9      	b.n	800af60 <_scanf_float+0x36c>
 800afac:	9b04      	ldr	r3, [sp, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0e4      	beq.n	800af7c <_scanf_float+0x388>
 800afb2:	9905      	ldr	r1, [sp, #20]
 800afb4:	230a      	movs	r3, #10
 800afb6:	3101      	adds	r1, #1
 800afb8:	4640      	mov	r0, r8
 800afba:	f002 fdc5 	bl	800db48 <_strtol_r>
 800afbe:	9b04      	ldr	r3, [sp, #16]
 800afc0:	9e05      	ldr	r6, [sp, #20]
 800afc2:	1ac2      	subs	r2, r0, r3
 800afc4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800afc8:	429e      	cmp	r6, r3
 800afca:	bf28      	it	cs
 800afcc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800afd0:	4910      	ldr	r1, [pc, #64]	@ (800b014 <_scanf_float+0x420>)
 800afd2:	4630      	mov	r0, r6
 800afd4:	f000 f954 	bl	800b280 <siprintf>
 800afd8:	e7d0      	b.n	800af7c <_scanf_float+0x388>
 800afda:	f011 0f04 	tst.w	r1, #4
 800afde:	9903      	ldr	r1, [sp, #12]
 800afe0:	600a      	str	r2, [r1, #0]
 800afe2:	d1dc      	bne.n	800af9e <_scanf_float+0x3aa>
 800afe4:	681d      	ldr	r5, [r3, #0]
 800afe6:	4632      	mov	r2, r6
 800afe8:	463b      	mov	r3, r7
 800afea:	4630      	mov	r0, r6
 800afec:	4639      	mov	r1, r7
 800afee:	f7f5 fdc5 	bl	8000b7c <__aeabi_dcmpun>
 800aff2:	b128      	cbz	r0, 800b000 <_scanf_float+0x40c>
 800aff4:	4808      	ldr	r0, [pc, #32]	@ (800b018 <_scanf_float+0x424>)
 800aff6:	f000 fb1f 	bl	800b638 <nanf>
 800affa:	ed85 0a00 	vstr	s0, [r5]
 800affe:	e7d1      	b.n	800afa4 <_scanf_float+0x3b0>
 800b000:	4630      	mov	r0, r6
 800b002:	4639      	mov	r1, r7
 800b004:	f7f5 fe18 	bl	8000c38 <__aeabi_d2f>
 800b008:	6028      	str	r0, [r5, #0]
 800b00a:	e7cb      	b.n	800afa4 <_scanf_float+0x3b0>
 800b00c:	f04f 0900 	mov.w	r9, #0
 800b010:	e629      	b.n	800ac66 <_scanf_float+0x72>
 800b012:	bf00      	nop
 800b014:	0800edec 	.word	0x0800edec
 800b018:	0800f185 	.word	0x0800f185

0800b01c <std>:
 800b01c:	2300      	movs	r3, #0
 800b01e:	b510      	push	{r4, lr}
 800b020:	4604      	mov	r4, r0
 800b022:	e9c0 3300 	strd	r3, r3, [r0]
 800b026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b02a:	6083      	str	r3, [r0, #8]
 800b02c:	8181      	strh	r1, [r0, #12]
 800b02e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b030:	81c2      	strh	r2, [r0, #14]
 800b032:	6183      	str	r3, [r0, #24]
 800b034:	4619      	mov	r1, r3
 800b036:	2208      	movs	r2, #8
 800b038:	305c      	adds	r0, #92	@ 0x5c
 800b03a:	f000 fa19 	bl	800b470 <memset>
 800b03e:	4b0d      	ldr	r3, [pc, #52]	@ (800b074 <std+0x58>)
 800b040:	6263      	str	r3, [r4, #36]	@ 0x24
 800b042:	4b0d      	ldr	r3, [pc, #52]	@ (800b078 <std+0x5c>)
 800b044:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b046:	4b0d      	ldr	r3, [pc, #52]	@ (800b07c <std+0x60>)
 800b048:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b04a:	4b0d      	ldr	r3, [pc, #52]	@ (800b080 <std+0x64>)
 800b04c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b04e:	4b0d      	ldr	r3, [pc, #52]	@ (800b084 <std+0x68>)
 800b050:	6224      	str	r4, [r4, #32]
 800b052:	429c      	cmp	r4, r3
 800b054:	d006      	beq.n	800b064 <std+0x48>
 800b056:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b05a:	4294      	cmp	r4, r2
 800b05c:	d002      	beq.n	800b064 <std+0x48>
 800b05e:	33d0      	adds	r3, #208	@ 0xd0
 800b060:	429c      	cmp	r4, r3
 800b062:	d105      	bne.n	800b070 <std+0x54>
 800b064:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b06c:	f000 bad2 	b.w	800b614 <__retarget_lock_init_recursive>
 800b070:	bd10      	pop	{r4, pc}
 800b072:	bf00      	nop
 800b074:	0800b2c1 	.word	0x0800b2c1
 800b078:	0800b2e3 	.word	0x0800b2e3
 800b07c:	0800b31b 	.word	0x0800b31b
 800b080:	0800b33f 	.word	0x0800b33f
 800b084:	20002f58 	.word	0x20002f58

0800b088 <stdio_exit_handler>:
 800b088:	4a02      	ldr	r2, [pc, #8]	@ (800b094 <stdio_exit_handler+0xc>)
 800b08a:	4903      	ldr	r1, [pc, #12]	@ (800b098 <stdio_exit_handler+0x10>)
 800b08c:	4803      	ldr	r0, [pc, #12]	@ (800b09c <stdio_exit_handler+0x14>)
 800b08e:	f000 b869 	b.w	800b164 <_fwalk_sglue>
 800b092:	bf00      	nop
 800b094:	20000010 	.word	0x20000010
 800b098:	0800e189 	.word	0x0800e189
 800b09c:	20000020 	.word	0x20000020

0800b0a0 <cleanup_stdio>:
 800b0a0:	6841      	ldr	r1, [r0, #4]
 800b0a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0d4 <cleanup_stdio+0x34>)
 800b0a4:	4299      	cmp	r1, r3
 800b0a6:	b510      	push	{r4, lr}
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	d001      	beq.n	800b0b0 <cleanup_stdio+0x10>
 800b0ac:	f003 f86c 	bl	800e188 <_fflush_r>
 800b0b0:	68a1      	ldr	r1, [r4, #8]
 800b0b2:	4b09      	ldr	r3, [pc, #36]	@ (800b0d8 <cleanup_stdio+0x38>)
 800b0b4:	4299      	cmp	r1, r3
 800b0b6:	d002      	beq.n	800b0be <cleanup_stdio+0x1e>
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f003 f865 	bl	800e188 <_fflush_r>
 800b0be:	68e1      	ldr	r1, [r4, #12]
 800b0c0:	4b06      	ldr	r3, [pc, #24]	@ (800b0dc <cleanup_stdio+0x3c>)
 800b0c2:	4299      	cmp	r1, r3
 800b0c4:	d004      	beq.n	800b0d0 <cleanup_stdio+0x30>
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0cc:	f003 b85c 	b.w	800e188 <_fflush_r>
 800b0d0:	bd10      	pop	{r4, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20002f58 	.word	0x20002f58
 800b0d8:	20002fc0 	.word	0x20002fc0
 800b0dc:	20003028 	.word	0x20003028

0800b0e0 <global_stdio_init.part.0>:
 800b0e0:	b510      	push	{r4, lr}
 800b0e2:	4b0b      	ldr	r3, [pc, #44]	@ (800b110 <global_stdio_init.part.0+0x30>)
 800b0e4:	4c0b      	ldr	r4, [pc, #44]	@ (800b114 <global_stdio_init.part.0+0x34>)
 800b0e6:	4a0c      	ldr	r2, [pc, #48]	@ (800b118 <global_stdio_init.part.0+0x38>)
 800b0e8:	601a      	str	r2, [r3, #0]
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2104      	movs	r1, #4
 800b0f0:	f7ff ff94 	bl	800b01c <std>
 800b0f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	2109      	movs	r1, #9
 800b0fc:	f7ff ff8e 	bl	800b01c <std>
 800b100:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b104:	2202      	movs	r2, #2
 800b106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b10a:	2112      	movs	r1, #18
 800b10c:	f7ff bf86 	b.w	800b01c <std>
 800b110:	20003090 	.word	0x20003090
 800b114:	20002f58 	.word	0x20002f58
 800b118:	0800b089 	.word	0x0800b089

0800b11c <__sfp_lock_acquire>:
 800b11c:	4801      	ldr	r0, [pc, #4]	@ (800b124 <__sfp_lock_acquire+0x8>)
 800b11e:	f000 ba7a 	b.w	800b616 <__retarget_lock_acquire_recursive>
 800b122:	bf00      	nop
 800b124:	20003099 	.word	0x20003099

0800b128 <__sfp_lock_release>:
 800b128:	4801      	ldr	r0, [pc, #4]	@ (800b130 <__sfp_lock_release+0x8>)
 800b12a:	f000 ba75 	b.w	800b618 <__retarget_lock_release_recursive>
 800b12e:	bf00      	nop
 800b130:	20003099 	.word	0x20003099

0800b134 <__sinit>:
 800b134:	b510      	push	{r4, lr}
 800b136:	4604      	mov	r4, r0
 800b138:	f7ff fff0 	bl	800b11c <__sfp_lock_acquire>
 800b13c:	6a23      	ldr	r3, [r4, #32]
 800b13e:	b11b      	cbz	r3, 800b148 <__sinit+0x14>
 800b140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b144:	f7ff bff0 	b.w	800b128 <__sfp_lock_release>
 800b148:	4b04      	ldr	r3, [pc, #16]	@ (800b15c <__sinit+0x28>)
 800b14a:	6223      	str	r3, [r4, #32]
 800b14c:	4b04      	ldr	r3, [pc, #16]	@ (800b160 <__sinit+0x2c>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1f5      	bne.n	800b140 <__sinit+0xc>
 800b154:	f7ff ffc4 	bl	800b0e0 <global_stdio_init.part.0>
 800b158:	e7f2      	b.n	800b140 <__sinit+0xc>
 800b15a:	bf00      	nop
 800b15c:	0800b0a1 	.word	0x0800b0a1
 800b160:	20003090 	.word	0x20003090

0800b164 <_fwalk_sglue>:
 800b164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b168:	4607      	mov	r7, r0
 800b16a:	4688      	mov	r8, r1
 800b16c:	4614      	mov	r4, r2
 800b16e:	2600      	movs	r6, #0
 800b170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b174:	f1b9 0901 	subs.w	r9, r9, #1
 800b178:	d505      	bpl.n	800b186 <_fwalk_sglue+0x22>
 800b17a:	6824      	ldr	r4, [r4, #0]
 800b17c:	2c00      	cmp	r4, #0
 800b17e:	d1f7      	bne.n	800b170 <_fwalk_sglue+0xc>
 800b180:	4630      	mov	r0, r6
 800b182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b186:	89ab      	ldrh	r3, [r5, #12]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d907      	bls.n	800b19c <_fwalk_sglue+0x38>
 800b18c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b190:	3301      	adds	r3, #1
 800b192:	d003      	beq.n	800b19c <_fwalk_sglue+0x38>
 800b194:	4629      	mov	r1, r5
 800b196:	4638      	mov	r0, r7
 800b198:	47c0      	blx	r8
 800b19a:	4306      	orrs	r6, r0
 800b19c:	3568      	adds	r5, #104	@ 0x68
 800b19e:	e7e9      	b.n	800b174 <_fwalk_sglue+0x10>

0800b1a0 <iprintf>:
 800b1a0:	b40f      	push	{r0, r1, r2, r3}
 800b1a2:	b507      	push	{r0, r1, r2, lr}
 800b1a4:	4906      	ldr	r1, [pc, #24]	@ (800b1c0 <iprintf+0x20>)
 800b1a6:	ab04      	add	r3, sp, #16
 800b1a8:	6808      	ldr	r0, [r1, #0]
 800b1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ae:	6881      	ldr	r1, [r0, #8]
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	f002 fe4d 	bl	800de50 <_vfiprintf_r>
 800b1b6:	b003      	add	sp, #12
 800b1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1bc:	b004      	add	sp, #16
 800b1be:	4770      	bx	lr
 800b1c0:	2000001c 	.word	0x2000001c

0800b1c4 <_puts_r>:
 800b1c4:	6a03      	ldr	r3, [r0, #32]
 800b1c6:	b570      	push	{r4, r5, r6, lr}
 800b1c8:	6884      	ldr	r4, [r0, #8]
 800b1ca:	4605      	mov	r5, r0
 800b1cc:	460e      	mov	r6, r1
 800b1ce:	b90b      	cbnz	r3, 800b1d4 <_puts_r+0x10>
 800b1d0:	f7ff ffb0 	bl	800b134 <__sinit>
 800b1d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1d6:	07db      	lsls	r3, r3, #31
 800b1d8:	d405      	bmi.n	800b1e6 <_puts_r+0x22>
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	0598      	lsls	r0, r3, #22
 800b1de:	d402      	bmi.n	800b1e6 <_puts_r+0x22>
 800b1e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1e2:	f000 fa18 	bl	800b616 <__retarget_lock_acquire_recursive>
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	0719      	lsls	r1, r3, #28
 800b1ea:	d502      	bpl.n	800b1f2 <_puts_r+0x2e>
 800b1ec:	6923      	ldr	r3, [r4, #16]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d135      	bne.n	800b25e <_puts_r+0x9a>
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	f000 f8e5 	bl	800b3c4 <__swsetup_r>
 800b1fa:	b380      	cbz	r0, 800b25e <_puts_r+0x9a>
 800b1fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b200:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b202:	07da      	lsls	r2, r3, #31
 800b204:	d405      	bmi.n	800b212 <_puts_r+0x4e>
 800b206:	89a3      	ldrh	r3, [r4, #12]
 800b208:	059b      	lsls	r3, r3, #22
 800b20a:	d402      	bmi.n	800b212 <_puts_r+0x4e>
 800b20c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b20e:	f000 fa03 	bl	800b618 <__retarget_lock_release_recursive>
 800b212:	4628      	mov	r0, r5
 800b214:	bd70      	pop	{r4, r5, r6, pc}
 800b216:	2b00      	cmp	r3, #0
 800b218:	da04      	bge.n	800b224 <_puts_r+0x60>
 800b21a:	69a2      	ldr	r2, [r4, #24]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	dc17      	bgt.n	800b250 <_puts_r+0x8c>
 800b220:	290a      	cmp	r1, #10
 800b222:	d015      	beq.n	800b250 <_puts_r+0x8c>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	6022      	str	r2, [r4, #0]
 800b22a:	7019      	strb	r1, [r3, #0]
 800b22c:	68a3      	ldr	r3, [r4, #8]
 800b22e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b232:	3b01      	subs	r3, #1
 800b234:	60a3      	str	r3, [r4, #8]
 800b236:	2900      	cmp	r1, #0
 800b238:	d1ed      	bne.n	800b216 <_puts_r+0x52>
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	da11      	bge.n	800b262 <_puts_r+0x9e>
 800b23e:	4622      	mov	r2, r4
 800b240:	210a      	movs	r1, #10
 800b242:	4628      	mov	r0, r5
 800b244:	f000 f87f 	bl	800b346 <__swbuf_r>
 800b248:	3001      	adds	r0, #1
 800b24a:	d0d7      	beq.n	800b1fc <_puts_r+0x38>
 800b24c:	250a      	movs	r5, #10
 800b24e:	e7d7      	b.n	800b200 <_puts_r+0x3c>
 800b250:	4622      	mov	r2, r4
 800b252:	4628      	mov	r0, r5
 800b254:	f000 f877 	bl	800b346 <__swbuf_r>
 800b258:	3001      	adds	r0, #1
 800b25a:	d1e7      	bne.n	800b22c <_puts_r+0x68>
 800b25c:	e7ce      	b.n	800b1fc <_puts_r+0x38>
 800b25e:	3e01      	subs	r6, #1
 800b260:	e7e4      	b.n	800b22c <_puts_r+0x68>
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	6022      	str	r2, [r4, #0]
 800b268:	220a      	movs	r2, #10
 800b26a:	701a      	strb	r2, [r3, #0]
 800b26c:	e7ee      	b.n	800b24c <_puts_r+0x88>
	...

0800b270 <puts>:
 800b270:	4b02      	ldr	r3, [pc, #8]	@ (800b27c <puts+0xc>)
 800b272:	4601      	mov	r1, r0
 800b274:	6818      	ldr	r0, [r3, #0]
 800b276:	f7ff bfa5 	b.w	800b1c4 <_puts_r>
 800b27a:	bf00      	nop
 800b27c:	2000001c 	.word	0x2000001c

0800b280 <siprintf>:
 800b280:	b40e      	push	{r1, r2, r3}
 800b282:	b500      	push	{lr}
 800b284:	b09c      	sub	sp, #112	@ 0x70
 800b286:	ab1d      	add	r3, sp, #116	@ 0x74
 800b288:	9002      	str	r0, [sp, #8]
 800b28a:	9006      	str	r0, [sp, #24]
 800b28c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b290:	4809      	ldr	r0, [pc, #36]	@ (800b2b8 <siprintf+0x38>)
 800b292:	9107      	str	r1, [sp, #28]
 800b294:	9104      	str	r1, [sp, #16]
 800b296:	4909      	ldr	r1, [pc, #36]	@ (800b2bc <siprintf+0x3c>)
 800b298:	f853 2b04 	ldr.w	r2, [r3], #4
 800b29c:	9105      	str	r1, [sp, #20]
 800b29e:	6800      	ldr	r0, [r0, #0]
 800b2a0:	9301      	str	r3, [sp, #4]
 800b2a2:	a902      	add	r1, sp, #8
 800b2a4:	f002 fcae 	bl	800dc04 <_svfiprintf_r>
 800b2a8:	9b02      	ldr	r3, [sp, #8]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	701a      	strb	r2, [r3, #0]
 800b2ae:	b01c      	add	sp, #112	@ 0x70
 800b2b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2b4:	b003      	add	sp, #12
 800b2b6:	4770      	bx	lr
 800b2b8:	2000001c 	.word	0x2000001c
 800b2bc:	ffff0208 	.word	0xffff0208

0800b2c0 <__sread>:
 800b2c0:	b510      	push	{r4, lr}
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2c8:	f000 f956 	bl	800b578 <_read_r>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	bfab      	itete	ge
 800b2d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b2d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b2d4:	181b      	addge	r3, r3, r0
 800b2d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b2da:	bfac      	ite	ge
 800b2dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b2de:	81a3      	strhlt	r3, [r4, #12]
 800b2e0:	bd10      	pop	{r4, pc}

0800b2e2 <__swrite>:
 800b2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e6:	461f      	mov	r7, r3
 800b2e8:	898b      	ldrh	r3, [r1, #12]
 800b2ea:	05db      	lsls	r3, r3, #23
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	4616      	mov	r6, r2
 800b2f2:	d505      	bpl.n	800b300 <__swrite+0x1e>
 800b2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f8:	2302      	movs	r3, #2
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f000 f92a 	bl	800b554 <_lseek_r>
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b306:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b30a:	81a3      	strh	r3, [r4, #12]
 800b30c:	4632      	mov	r2, r6
 800b30e:	463b      	mov	r3, r7
 800b310:	4628      	mov	r0, r5
 800b312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b316:	f000 b941 	b.w	800b59c <_write_r>

0800b31a <__sseek>:
 800b31a:	b510      	push	{r4, lr}
 800b31c:	460c      	mov	r4, r1
 800b31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b322:	f000 f917 	bl	800b554 <_lseek_r>
 800b326:	1c43      	adds	r3, r0, #1
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	bf15      	itete	ne
 800b32c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b32e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b332:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b336:	81a3      	strheq	r3, [r4, #12]
 800b338:	bf18      	it	ne
 800b33a:	81a3      	strhne	r3, [r4, #12]
 800b33c:	bd10      	pop	{r4, pc}

0800b33e <__sclose>:
 800b33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b342:	f000 b8a1 	b.w	800b488 <_close_r>

0800b346 <__swbuf_r>:
 800b346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b348:	460e      	mov	r6, r1
 800b34a:	4614      	mov	r4, r2
 800b34c:	4605      	mov	r5, r0
 800b34e:	b118      	cbz	r0, 800b358 <__swbuf_r+0x12>
 800b350:	6a03      	ldr	r3, [r0, #32]
 800b352:	b90b      	cbnz	r3, 800b358 <__swbuf_r+0x12>
 800b354:	f7ff feee 	bl	800b134 <__sinit>
 800b358:	69a3      	ldr	r3, [r4, #24]
 800b35a:	60a3      	str	r3, [r4, #8]
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	071a      	lsls	r2, r3, #28
 800b360:	d501      	bpl.n	800b366 <__swbuf_r+0x20>
 800b362:	6923      	ldr	r3, [r4, #16]
 800b364:	b943      	cbnz	r3, 800b378 <__swbuf_r+0x32>
 800b366:	4621      	mov	r1, r4
 800b368:	4628      	mov	r0, r5
 800b36a:	f000 f82b 	bl	800b3c4 <__swsetup_r>
 800b36e:	b118      	cbz	r0, 800b378 <__swbuf_r+0x32>
 800b370:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b374:	4638      	mov	r0, r7
 800b376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	6922      	ldr	r2, [r4, #16]
 800b37c:	1a98      	subs	r0, r3, r2
 800b37e:	6963      	ldr	r3, [r4, #20]
 800b380:	b2f6      	uxtb	r6, r6
 800b382:	4283      	cmp	r3, r0
 800b384:	4637      	mov	r7, r6
 800b386:	dc05      	bgt.n	800b394 <__swbuf_r+0x4e>
 800b388:	4621      	mov	r1, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	f002 fefc 	bl	800e188 <_fflush_r>
 800b390:	2800      	cmp	r0, #0
 800b392:	d1ed      	bne.n	800b370 <__swbuf_r+0x2a>
 800b394:	68a3      	ldr	r3, [r4, #8]
 800b396:	3b01      	subs	r3, #1
 800b398:	60a3      	str	r3, [r4, #8]
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	6022      	str	r2, [r4, #0]
 800b3a0:	701e      	strb	r6, [r3, #0]
 800b3a2:	6962      	ldr	r2, [r4, #20]
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d004      	beq.n	800b3b4 <__swbuf_r+0x6e>
 800b3aa:	89a3      	ldrh	r3, [r4, #12]
 800b3ac:	07db      	lsls	r3, r3, #31
 800b3ae:	d5e1      	bpl.n	800b374 <__swbuf_r+0x2e>
 800b3b0:	2e0a      	cmp	r6, #10
 800b3b2:	d1df      	bne.n	800b374 <__swbuf_r+0x2e>
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f002 fee6 	bl	800e188 <_fflush_r>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d0d9      	beq.n	800b374 <__swbuf_r+0x2e>
 800b3c0:	e7d6      	b.n	800b370 <__swbuf_r+0x2a>
	...

0800b3c4 <__swsetup_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4b29      	ldr	r3, [pc, #164]	@ (800b46c <__swsetup_r+0xa8>)
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	b118      	cbz	r0, 800b3d8 <__swsetup_r+0x14>
 800b3d0:	6a03      	ldr	r3, [r0, #32]
 800b3d2:	b90b      	cbnz	r3, 800b3d8 <__swsetup_r+0x14>
 800b3d4:	f7ff feae 	bl	800b134 <__sinit>
 800b3d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3dc:	0719      	lsls	r1, r3, #28
 800b3de:	d422      	bmi.n	800b426 <__swsetup_r+0x62>
 800b3e0:	06da      	lsls	r2, r3, #27
 800b3e2:	d407      	bmi.n	800b3f4 <__swsetup_r+0x30>
 800b3e4:	2209      	movs	r2, #9
 800b3e6:	602a      	str	r2, [r5, #0]
 800b3e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3f2:	e033      	b.n	800b45c <__swsetup_r+0x98>
 800b3f4:	0758      	lsls	r0, r3, #29
 800b3f6:	d512      	bpl.n	800b41e <__swsetup_r+0x5a>
 800b3f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3fa:	b141      	cbz	r1, 800b40e <__swsetup_r+0x4a>
 800b3fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b400:	4299      	cmp	r1, r3
 800b402:	d002      	beq.n	800b40a <__swsetup_r+0x46>
 800b404:	4628      	mov	r0, r5
 800b406:	f000 ff6b 	bl	800c2e0 <_free_r>
 800b40a:	2300      	movs	r3, #0
 800b40c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b414:	81a3      	strh	r3, [r4, #12]
 800b416:	2300      	movs	r3, #0
 800b418:	6063      	str	r3, [r4, #4]
 800b41a:	6923      	ldr	r3, [r4, #16]
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	89a3      	ldrh	r3, [r4, #12]
 800b420:	f043 0308 	orr.w	r3, r3, #8
 800b424:	81a3      	strh	r3, [r4, #12]
 800b426:	6923      	ldr	r3, [r4, #16]
 800b428:	b94b      	cbnz	r3, 800b43e <__swsetup_r+0x7a>
 800b42a:	89a3      	ldrh	r3, [r4, #12]
 800b42c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b434:	d003      	beq.n	800b43e <__swsetup_r+0x7a>
 800b436:	4621      	mov	r1, r4
 800b438:	4628      	mov	r0, r5
 800b43a:	f002 fef3 	bl	800e224 <__smakebuf_r>
 800b43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b442:	f013 0201 	ands.w	r2, r3, #1
 800b446:	d00a      	beq.n	800b45e <__swsetup_r+0x9a>
 800b448:	2200      	movs	r2, #0
 800b44a:	60a2      	str	r2, [r4, #8]
 800b44c:	6962      	ldr	r2, [r4, #20]
 800b44e:	4252      	negs	r2, r2
 800b450:	61a2      	str	r2, [r4, #24]
 800b452:	6922      	ldr	r2, [r4, #16]
 800b454:	b942      	cbnz	r2, 800b468 <__swsetup_r+0xa4>
 800b456:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b45a:	d1c5      	bne.n	800b3e8 <__swsetup_r+0x24>
 800b45c:	bd38      	pop	{r3, r4, r5, pc}
 800b45e:	0799      	lsls	r1, r3, #30
 800b460:	bf58      	it	pl
 800b462:	6962      	ldrpl	r2, [r4, #20]
 800b464:	60a2      	str	r2, [r4, #8]
 800b466:	e7f4      	b.n	800b452 <__swsetup_r+0x8e>
 800b468:	2000      	movs	r0, #0
 800b46a:	e7f7      	b.n	800b45c <__swsetup_r+0x98>
 800b46c:	2000001c 	.word	0x2000001c

0800b470 <memset>:
 800b470:	4402      	add	r2, r0
 800b472:	4603      	mov	r3, r0
 800b474:	4293      	cmp	r3, r2
 800b476:	d100      	bne.n	800b47a <memset+0xa>
 800b478:	4770      	bx	lr
 800b47a:	f803 1b01 	strb.w	r1, [r3], #1
 800b47e:	e7f9      	b.n	800b474 <memset+0x4>

0800b480 <_localeconv_r>:
 800b480:	4800      	ldr	r0, [pc, #0]	@ (800b484 <_localeconv_r+0x4>)
 800b482:	4770      	bx	lr
 800b484:	2000015c 	.word	0x2000015c

0800b488 <_close_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4d06      	ldr	r5, [pc, #24]	@ (800b4a4 <_close_r+0x1c>)
 800b48c:	2300      	movs	r3, #0
 800b48e:	4604      	mov	r4, r0
 800b490:	4608      	mov	r0, r1
 800b492:	602b      	str	r3, [r5, #0]
 800b494:	f7f6 fb12 	bl	8001abc <_close>
 800b498:	1c43      	adds	r3, r0, #1
 800b49a:	d102      	bne.n	800b4a2 <_close_r+0x1a>
 800b49c:	682b      	ldr	r3, [r5, #0]
 800b49e:	b103      	cbz	r3, 800b4a2 <_close_r+0x1a>
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	bd38      	pop	{r3, r4, r5, pc}
 800b4a4:	20003094 	.word	0x20003094

0800b4a8 <_reclaim_reent>:
 800b4a8:	4b29      	ldr	r3, [pc, #164]	@ (800b550 <_reclaim_reent+0xa8>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4283      	cmp	r3, r0
 800b4ae:	b570      	push	{r4, r5, r6, lr}
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	d04b      	beq.n	800b54c <_reclaim_reent+0xa4>
 800b4b4:	69c3      	ldr	r3, [r0, #28]
 800b4b6:	b1ab      	cbz	r3, 800b4e4 <_reclaim_reent+0x3c>
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	b16b      	cbz	r3, 800b4d8 <_reclaim_reent+0x30>
 800b4bc:	2500      	movs	r5, #0
 800b4be:	69e3      	ldr	r3, [r4, #28]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	5959      	ldr	r1, [r3, r5]
 800b4c4:	2900      	cmp	r1, #0
 800b4c6:	d13b      	bne.n	800b540 <_reclaim_reent+0x98>
 800b4c8:	3504      	adds	r5, #4
 800b4ca:	2d80      	cmp	r5, #128	@ 0x80
 800b4cc:	d1f7      	bne.n	800b4be <_reclaim_reent+0x16>
 800b4ce:	69e3      	ldr	r3, [r4, #28]
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	68d9      	ldr	r1, [r3, #12]
 800b4d4:	f000 ff04 	bl	800c2e0 <_free_r>
 800b4d8:	69e3      	ldr	r3, [r4, #28]
 800b4da:	6819      	ldr	r1, [r3, #0]
 800b4dc:	b111      	cbz	r1, 800b4e4 <_reclaim_reent+0x3c>
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f000 fefe 	bl	800c2e0 <_free_r>
 800b4e4:	6961      	ldr	r1, [r4, #20]
 800b4e6:	b111      	cbz	r1, 800b4ee <_reclaim_reent+0x46>
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f000 fef9 	bl	800c2e0 <_free_r>
 800b4ee:	69e1      	ldr	r1, [r4, #28]
 800b4f0:	b111      	cbz	r1, 800b4f8 <_reclaim_reent+0x50>
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 fef4 	bl	800c2e0 <_free_r>
 800b4f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b4fa:	b111      	cbz	r1, 800b502 <_reclaim_reent+0x5a>
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f000 feef 	bl	800c2e0 <_free_r>
 800b502:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b504:	b111      	cbz	r1, 800b50c <_reclaim_reent+0x64>
 800b506:	4620      	mov	r0, r4
 800b508:	f000 feea 	bl	800c2e0 <_free_r>
 800b50c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b50e:	b111      	cbz	r1, 800b516 <_reclaim_reent+0x6e>
 800b510:	4620      	mov	r0, r4
 800b512:	f000 fee5 	bl	800c2e0 <_free_r>
 800b516:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b518:	b111      	cbz	r1, 800b520 <_reclaim_reent+0x78>
 800b51a:	4620      	mov	r0, r4
 800b51c:	f000 fee0 	bl	800c2e0 <_free_r>
 800b520:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b522:	b111      	cbz	r1, 800b52a <_reclaim_reent+0x82>
 800b524:	4620      	mov	r0, r4
 800b526:	f000 fedb 	bl	800c2e0 <_free_r>
 800b52a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b52c:	b111      	cbz	r1, 800b534 <_reclaim_reent+0x8c>
 800b52e:	4620      	mov	r0, r4
 800b530:	f000 fed6 	bl	800c2e0 <_free_r>
 800b534:	6a23      	ldr	r3, [r4, #32]
 800b536:	b14b      	cbz	r3, 800b54c <_reclaim_reent+0xa4>
 800b538:	4620      	mov	r0, r4
 800b53a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b53e:	4718      	bx	r3
 800b540:	680e      	ldr	r6, [r1, #0]
 800b542:	4620      	mov	r0, r4
 800b544:	f000 fecc 	bl	800c2e0 <_free_r>
 800b548:	4631      	mov	r1, r6
 800b54a:	e7bb      	b.n	800b4c4 <_reclaim_reent+0x1c>
 800b54c:	bd70      	pop	{r4, r5, r6, pc}
 800b54e:	bf00      	nop
 800b550:	2000001c 	.word	0x2000001c

0800b554 <_lseek_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	4d07      	ldr	r5, [pc, #28]	@ (800b574 <_lseek_r+0x20>)
 800b558:	4604      	mov	r4, r0
 800b55a:	4608      	mov	r0, r1
 800b55c:	4611      	mov	r1, r2
 800b55e:	2200      	movs	r2, #0
 800b560:	602a      	str	r2, [r5, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	f7f6 fad1 	bl	8001b0a <_lseek>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d102      	bne.n	800b572 <_lseek_r+0x1e>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	b103      	cbz	r3, 800b572 <_lseek_r+0x1e>
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	bd38      	pop	{r3, r4, r5, pc}
 800b574:	20003094 	.word	0x20003094

0800b578 <_read_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d07      	ldr	r5, [pc, #28]	@ (800b598 <_read_r+0x20>)
 800b57c:	4604      	mov	r4, r0
 800b57e:	4608      	mov	r0, r1
 800b580:	4611      	mov	r1, r2
 800b582:	2200      	movs	r2, #0
 800b584:	602a      	str	r2, [r5, #0]
 800b586:	461a      	mov	r2, r3
 800b588:	f7f6 fa5f 	bl	8001a4a <_read>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <_read_r+0x1e>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	b103      	cbz	r3, 800b596 <_read_r+0x1e>
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	20003094 	.word	0x20003094

0800b59c <_write_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4d07      	ldr	r5, [pc, #28]	@ (800b5bc <_write_r+0x20>)
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	4608      	mov	r0, r1
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	602a      	str	r2, [r5, #0]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	f7f6 fa6a 	bl	8001a84 <_write>
 800b5b0:	1c43      	adds	r3, r0, #1
 800b5b2:	d102      	bne.n	800b5ba <_write_r+0x1e>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	b103      	cbz	r3, 800b5ba <_write_r+0x1e>
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	bd38      	pop	{r3, r4, r5, pc}
 800b5bc:	20003094 	.word	0x20003094

0800b5c0 <__errno>:
 800b5c0:	4b01      	ldr	r3, [pc, #4]	@ (800b5c8 <__errno+0x8>)
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	2000001c 	.word	0x2000001c

0800b5cc <__libc_init_array>:
 800b5cc:	b570      	push	{r4, r5, r6, lr}
 800b5ce:	4d0d      	ldr	r5, [pc, #52]	@ (800b604 <__libc_init_array+0x38>)
 800b5d0:	4c0d      	ldr	r4, [pc, #52]	@ (800b608 <__libc_init_array+0x3c>)
 800b5d2:	1b64      	subs	r4, r4, r5
 800b5d4:	10a4      	asrs	r4, r4, #2
 800b5d6:	2600      	movs	r6, #0
 800b5d8:	42a6      	cmp	r6, r4
 800b5da:	d109      	bne.n	800b5f0 <__libc_init_array+0x24>
 800b5dc:	4d0b      	ldr	r5, [pc, #44]	@ (800b60c <__libc_init_array+0x40>)
 800b5de:	4c0c      	ldr	r4, [pc, #48]	@ (800b610 <__libc_init_array+0x44>)
 800b5e0:	f003 fae0 	bl	800eba4 <_init>
 800b5e4:	1b64      	subs	r4, r4, r5
 800b5e6:	10a4      	asrs	r4, r4, #2
 800b5e8:	2600      	movs	r6, #0
 800b5ea:	42a6      	cmp	r6, r4
 800b5ec:	d105      	bne.n	800b5fa <__libc_init_array+0x2e>
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5f4:	4798      	blx	r3
 800b5f6:	3601      	adds	r6, #1
 800b5f8:	e7ee      	b.n	800b5d8 <__libc_init_array+0xc>
 800b5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5fe:	4798      	blx	r3
 800b600:	3601      	adds	r6, #1
 800b602:	e7f2      	b.n	800b5ea <__libc_init_array+0x1e>
 800b604:	0800f1f0 	.word	0x0800f1f0
 800b608:	0800f1f0 	.word	0x0800f1f0
 800b60c:	0800f1f0 	.word	0x0800f1f0
 800b610:	0800f1f4 	.word	0x0800f1f4

0800b614 <__retarget_lock_init_recursive>:
 800b614:	4770      	bx	lr

0800b616 <__retarget_lock_acquire_recursive>:
 800b616:	4770      	bx	lr

0800b618 <__retarget_lock_release_recursive>:
 800b618:	4770      	bx	lr

0800b61a <memcpy>:
 800b61a:	440a      	add	r2, r1
 800b61c:	4291      	cmp	r1, r2
 800b61e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b622:	d100      	bne.n	800b626 <memcpy+0xc>
 800b624:	4770      	bx	lr
 800b626:	b510      	push	{r4, lr}
 800b628:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b62c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b630:	4291      	cmp	r1, r2
 800b632:	d1f9      	bne.n	800b628 <memcpy+0xe>
 800b634:	bd10      	pop	{r4, pc}
	...

0800b638 <nanf>:
 800b638:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b640 <nanf+0x8>
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	7fc00000 	.word	0x7fc00000

0800b644 <quorem>:
 800b644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	6903      	ldr	r3, [r0, #16]
 800b64a:	690c      	ldr	r4, [r1, #16]
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	4607      	mov	r7, r0
 800b650:	db7e      	blt.n	800b750 <quorem+0x10c>
 800b652:	3c01      	subs	r4, #1
 800b654:	f101 0814 	add.w	r8, r1, #20
 800b658:	00a3      	lsls	r3, r4, #2
 800b65a:	f100 0514 	add.w	r5, r0, #20
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b66a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b66e:	3301      	adds	r3, #1
 800b670:	429a      	cmp	r2, r3
 800b672:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b676:	fbb2 f6f3 	udiv	r6, r2, r3
 800b67a:	d32e      	bcc.n	800b6da <quorem+0x96>
 800b67c:	f04f 0a00 	mov.w	sl, #0
 800b680:	46c4      	mov	ip, r8
 800b682:	46ae      	mov	lr, r5
 800b684:	46d3      	mov	fp, sl
 800b686:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b68a:	b298      	uxth	r0, r3
 800b68c:	fb06 a000 	mla	r0, r6, r0, sl
 800b690:	0c02      	lsrs	r2, r0, #16
 800b692:	0c1b      	lsrs	r3, r3, #16
 800b694:	fb06 2303 	mla	r3, r6, r3, r2
 800b698:	f8de 2000 	ldr.w	r2, [lr]
 800b69c:	b280      	uxth	r0, r0
 800b69e:	b292      	uxth	r2, r2
 800b6a0:	1a12      	subs	r2, r2, r0
 800b6a2:	445a      	add	r2, fp
 800b6a4:	f8de 0000 	ldr.w	r0, [lr]
 800b6a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b6b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b6b6:	b292      	uxth	r2, r2
 800b6b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b6bc:	45e1      	cmp	r9, ip
 800b6be:	f84e 2b04 	str.w	r2, [lr], #4
 800b6c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b6c6:	d2de      	bcs.n	800b686 <quorem+0x42>
 800b6c8:	9b00      	ldr	r3, [sp, #0]
 800b6ca:	58eb      	ldr	r3, [r5, r3]
 800b6cc:	b92b      	cbnz	r3, 800b6da <quorem+0x96>
 800b6ce:	9b01      	ldr	r3, [sp, #4]
 800b6d0:	3b04      	subs	r3, #4
 800b6d2:	429d      	cmp	r5, r3
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	d32f      	bcc.n	800b738 <quorem+0xf4>
 800b6d8:	613c      	str	r4, [r7, #16]
 800b6da:	4638      	mov	r0, r7
 800b6dc:	f001 f9c4 	bl	800ca68 <__mcmp>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	db25      	blt.n	800b730 <quorem+0xec>
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6ec:	f8d1 c000 	ldr.w	ip, [r1]
 800b6f0:	fa1f fe82 	uxth.w	lr, r2
 800b6f4:	fa1f f38c 	uxth.w	r3, ip
 800b6f8:	eba3 030e 	sub.w	r3, r3, lr
 800b6fc:	4403      	add	r3, r0
 800b6fe:	0c12      	lsrs	r2, r2, #16
 800b700:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b704:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b708:	b29b      	uxth	r3, r3
 800b70a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b70e:	45c1      	cmp	r9, r8
 800b710:	f841 3b04 	str.w	r3, [r1], #4
 800b714:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b718:	d2e6      	bcs.n	800b6e8 <quorem+0xa4>
 800b71a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b71e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b722:	b922      	cbnz	r2, 800b72e <quorem+0xea>
 800b724:	3b04      	subs	r3, #4
 800b726:	429d      	cmp	r5, r3
 800b728:	461a      	mov	r2, r3
 800b72a:	d30b      	bcc.n	800b744 <quorem+0x100>
 800b72c:	613c      	str	r4, [r7, #16]
 800b72e:	3601      	adds	r6, #1
 800b730:	4630      	mov	r0, r6
 800b732:	b003      	add	sp, #12
 800b734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b738:	6812      	ldr	r2, [r2, #0]
 800b73a:	3b04      	subs	r3, #4
 800b73c:	2a00      	cmp	r2, #0
 800b73e:	d1cb      	bne.n	800b6d8 <quorem+0x94>
 800b740:	3c01      	subs	r4, #1
 800b742:	e7c6      	b.n	800b6d2 <quorem+0x8e>
 800b744:	6812      	ldr	r2, [r2, #0]
 800b746:	3b04      	subs	r3, #4
 800b748:	2a00      	cmp	r2, #0
 800b74a:	d1ef      	bne.n	800b72c <quorem+0xe8>
 800b74c:	3c01      	subs	r4, #1
 800b74e:	e7ea      	b.n	800b726 <quorem+0xe2>
 800b750:	2000      	movs	r0, #0
 800b752:	e7ee      	b.n	800b732 <quorem+0xee>
 800b754:	0000      	movs	r0, r0
	...

0800b758 <_dtoa_r>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	69c7      	ldr	r7, [r0, #28]
 800b75e:	b099      	sub	sp, #100	@ 0x64
 800b760:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b764:	ec55 4b10 	vmov	r4, r5, d0
 800b768:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b76a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b76c:	4683      	mov	fp, r0
 800b76e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b770:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b772:	b97f      	cbnz	r7, 800b794 <_dtoa_r+0x3c>
 800b774:	2010      	movs	r0, #16
 800b776:	f000 fdfd 	bl	800c374 <malloc>
 800b77a:	4602      	mov	r2, r0
 800b77c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b780:	b920      	cbnz	r0, 800b78c <_dtoa_r+0x34>
 800b782:	4ba7      	ldr	r3, [pc, #668]	@ (800ba20 <_dtoa_r+0x2c8>)
 800b784:	21ef      	movs	r1, #239	@ 0xef
 800b786:	48a7      	ldr	r0, [pc, #668]	@ (800ba24 <_dtoa_r+0x2cc>)
 800b788:	f002 fdee 	bl	800e368 <__assert_func>
 800b78c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b790:	6007      	str	r7, [r0, #0]
 800b792:	60c7      	str	r7, [r0, #12]
 800b794:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b798:	6819      	ldr	r1, [r3, #0]
 800b79a:	b159      	cbz	r1, 800b7b4 <_dtoa_r+0x5c>
 800b79c:	685a      	ldr	r2, [r3, #4]
 800b79e:	604a      	str	r2, [r1, #4]
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	4093      	lsls	r3, r2
 800b7a4:	608b      	str	r3, [r1, #8]
 800b7a6:	4658      	mov	r0, fp
 800b7a8:	f000 feda 	bl	800c560 <_Bfree>
 800b7ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	1e2b      	subs	r3, r5, #0
 800b7b6:	bfb9      	ittee	lt
 800b7b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b7bc:	9303      	strlt	r3, [sp, #12]
 800b7be:	2300      	movge	r3, #0
 800b7c0:	6033      	strge	r3, [r6, #0]
 800b7c2:	9f03      	ldr	r7, [sp, #12]
 800b7c4:	4b98      	ldr	r3, [pc, #608]	@ (800ba28 <_dtoa_r+0x2d0>)
 800b7c6:	bfbc      	itt	lt
 800b7c8:	2201      	movlt	r2, #1
 800b7ca:	6032      	strlt	r2, [r6, #0]
 800b7cc:	43bb      	bics	r3, r7
 800b7ce:	d112      	bne.n	800b7f6 <_dtoa_r+0x9e>
 800b7d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b7d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7dc:	4323      	orrs	r3, r4
 800b7de:	f000 854d 	beq.w	800c27c <_dtoa_r+0xb24>
 800b7e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ba3c <_dtoa_r+0x2e4>
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f000 854f 	beq.w	800c28c <_dtoa_r+0xb34>
 800b7ee:	f10a 0303 	add.w	r3, sl, #3
 800b7f2:	f000 bd49 	b.w	800c288 <_dtoa_r+0xb30>
 800b7f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	ec51 0b17 	vmov	r0, r1, d7
 800b800:	2300      	movs	r3, #0
 800b802:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b806:	f7f5 f987 	bl	8000b18 <__aeabi_dcmpeq>
 800b80a:	4680      	mov	r8, r0
 800b80c:	b158      	cbz	r0, 800b826 <_dtoa_r+0xce>
 800b80e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b810:	2301      	movs	r3, #1
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b816:	b113      	cbz	r3, 800b81e <_dtoa_r+0xc6>
 800b818:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b81a:	4b84      	ldr	r3, [pc, #528]	@ (800ba2c <_dtoa_r+0x2d4>)
 800b81c:	6013      	str	r3, [r2, #0]
 800b81e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ba40 <_dtoa_r+0x2e8>
 800b822:	f000 bd33 	b.w	800c28c <_dtoa_r+0xb34>
 800b826:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b82a:	aa16      	add	r2, sp, #88	@ 0x58
 800b82c:	a917      	add	r1, sp, #92	@ 0x5c
 800b82e:	4658      	mov	r0, fp
 800b830:	f001 fa3a 	bl	800cca8 <__d2b>
 800b834:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b838:	4681      	mov	r9, r0
 800b83a:	2e00      	cmp	r6, #0
 800b83c:	d077      	beq.n	800b92e <_dtoa_r+0x1d6>
 800b83e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b840:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b84c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b850:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b854:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b858:	4619      	mov	r1, r3
 800b85a:	2200      	movs	r2, #0
 800b85c:	4b74      	ldr	r3, [pc, #464]	@ (800ba30 <_dtoa_r+0x2d8>)
 800b85e:	f7f4 fd3b 	bl	80002d8 <__aeabi_dsub>
 800b862:	a369      	add	r3, pc, #420	@ (adr r3, 800ba08 <_dtoa_r+0x2b0>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f7f4 feee 	bl	8000648 <__aeabi_dmul>
 800b86c:	a368      	add	r3, pc, #416	@ (adr r3, 800ba10 <_dtoa_r+0x2b8>)
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	f7f4 fd33 	bl	80002dc <__adddf3>
 800b876:	4604      	mov	r4, r0
 800b878:	4630      	mov	r0, r6
 800b87a:	460d      	mov	r5, r1
 800b87c:	f7f4 fe7a 	bl	8000574 <__aeabi_i2d>
 800b880:	a365      	add	r3, pc, #404	@ (adr r3, 800ba18 <_dtoa_r+0x2c0>)
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	f7f4 fedf 	bl	8000648 <__aeabi_dmul>
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	4620      	mov	r0, r4
 800b890:	4629      	mov	r1, r5
 800b892:	f7f4 fd23 	bl	80002dc <__adddf3>
 800b896:	4604      	mov	r4, r0
 800b898:	460d      	mov	r5, r1
 800b89a:	f7f5 f985 	bl	8000ba8 <__aeabi_d2iz>
 800b89e:	2200      	movs	r2, #0
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	f7f5 f940 	bl	8000b2c <__aeabi_dcmplt>
 800b8ac:	b140      	cbz	r0, 800b8c0 <_dtoa_r+0x168>
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	f7f4 fe60 	bl	8000574 <__aeabi_i2d>
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	f7f5 f92e 	bl	8000b18 <__aeabi_dcmpeq>
 800b8bc:	b900      	cbnz	r0, 800b8c0 <_dtoa_r+0x168>
 800b8be:	3f01      	subs	r7, #1
 800b8c0:	2f16      	cmp	r7, #22
 800b8c2:	d851      	bhi.n	800b968 <_dtoa_r+0x210>
 800b8c4:	4b5b      	ldr	r3, [pc, #364]	@ (800ba34 <_dtoa_r+0x2dc>)
 800b8c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8d2:	f7f5 f92b 	bl	8000b2c <__aeabi_dcmplt>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d048      	beq.n	800b96c <_dtoa_r+0x214>
 800b8da:	3f01      	subs	r7, #1
 800b8dc:	2300      	movs	r3, #0
 800b8de:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b8e2:	1b9b      	subs	r3, r3, r6
 800b8e4:	1e5a      	subs	r2, r3, #1
 800b8e6:	bf44      	itt	mi
 800b8e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b8ec:	2300      	movmi	r3, #0
 800b8ee:	9208      	str	r2, [sp, #32]
 800b8f0:	bf54      	ite	pl
 800b8f2:	f04f 0800 	movpl.w	r8, #0
 800b8f6:	9308      	strmi	r3, [sp, #32]
 800b8f8:	2f00      	cmp	r7, #0
 800b8fa:	db39      	blt.n	800b970 <_dtoa_r+0x218>
 800b8fc:	9b08      	ldr	r3, [sp, #32]
 800b8fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b900:	443b      	add	r3, r7
 800b902:	9308      	str	r3, [sp, #32]
 800b904:	2300      	movs	r3, #0
 800b906:	930a      	str	r3, [sp, #40]	@ 0x28
 800b908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b90a:	2b09      	cmp	r3, #9
 800b90c:	d864      	bhi.n	800b9d8 <_dtoa_r+0x280>
 800b90e:	2b05      	cmp	r3, #5
 800b910:	bfc4      	itt	gt
 800b912:	3b04      	subgt	r3, #4
 800b914:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b918:	f1a3 0302 	sub.w	r3, r3, #2
 800b91c:	bfcc      	ite	gt
 800b91e:	2400      	movgt	r4, #0
 800b920:	2401      	movle	r4, #1
 800b922:	2b03      	cmp	r3, #3
 800b924:	d863      	bhi.n	800b9ee <_dtoa_r+0x296>
 800b926:	e8df f003 	tbb	[pc, r3]
 800b92a:	372a      	.short	0x372a
 800b92c:	5535      	.short	0x5535
 800b92e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b932:	441e      	add	r6, r3
 800b934:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b938:	2b20      	cmp	r3, #32
 800b93a:	bfc1      	itttt	gt
 800b93c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b940:	409f      	lslgt	r7, r3
 800b942:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b946:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b94a:	bfd6      	itet	le
 800b94c:	f1c3 0320 	rsble	r3, r3, #32
 800b950:	ea47 0003 	orrgt.w	r0, r7, r3
 800b954:	fa04 f003 	lslle.w	r0, r4, r3
 800b958:	f7f4 fdfc 	bl	8000554 <__aeabi_ui2d>
 800b95c:	2201      	movs	r2, #1
 800b95e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b962:	3e01      	subs	r6, #1
 800b964:	9214      	str	r2, [sp, #80]	@ 0x50
 800b966:	e777      	b.n	800b858 <_dtoa_r+0x100>
 800b968:	2301      	movs	r3, #1
 800b96a:	e7b8      	b.n	800b8de <_dtoa_r+0x186>
 800b96c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b96e:	e7b7      	b.n	800b8e0 <_dtoa_r+0x188>
 800b970:	427b      	negs	r3, r7
 800b972:	930a      	str	r3, [sp, #40]	@ 0x28
 800b974:	2300      	movs	r3, #0
 800b976:	eba8 0807 	sub.w	r8, r8, r7
 800b97a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b97c:	e7c4      	b.n	800b908 <_dtoa_r+0x1b0>
 800b97e:	2300      	movs	r3, #0
 800b980:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b984:	2b00      	cmp	r3, #0
 800b986:	dc35      	bgt.n	800b9f4 <_dtoa_r+0x29c>
 800b988:	2301      	movs	r3, #1
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	9307      	str	r3, [sp, #28]
 800b98e:	461a      	mov	r2, r3
 800b990:	920e      	str	r2, [sp, #56]	@ 0x38
 800b992:	e00b      	b.n	800b9ac <_dtoa_r+0x254>
 800b994:	2301      	movs	r3, #1
 800b996:	e7f3      	b.n	800b980 <_dtoa_r+0x228>
 800b998:	2300      	movs	r3, #0
 800b99a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b99c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b99e:	18fb      	adds	r3, r7, r3
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	9307      	str	r3, [sp, #28]
 800b9a8:	bfb8      	it	lt
 800b9aa:	2301      	movlt	r3, #1
 800b9ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	2204      	movs	r2, #4
 800b9b4:	f102 0514 	add.w	r5, r2, #20
 800b9b8:	429d      	cmp	r5, r3
 800b9ba:	d91f      	bls.n	800b9fc <_dtoa_r+0x2a4>
 800b9bc:	6041      	str	r1, [r0, #4]
 800b9be:	4658      	mov	r0, fp
 800b9c0:	f000 fd8e 	bl	800c4e0 <_Balloc>
 800b9c4:	4682      	mov	sl, r0
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d13c      	bne.n	800ba44 <_dtoa_r+0x2ec>
 800b9ca:	4b1b      	ldr	r3, [pc, #108]	@ (800ba38 <_dtoa_r+0x2e0>)
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800b9d2:	e6d8      	b.n	800b786 <_dtoa_r+0x2e>
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e7e0      	b.n	800b99a <_dtoa_r+0x242>
 800b9d8:	2401      	movs	r4, #1
 800b9da:	2300      	movs	r3, #0
 800b9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b9e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	9307      	str	r3, [sp, #28]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	2312      	movs	r3, #18
 800b9ec:	e7d0      	b.n	800b990 <_dtoa_r+0x238>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9f2:	e7f5      	b.n	800b9e0 <_dtoa_r+0x288>
 800b9f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	9307      	str	r3, [sp, #28]
 800b9fa:	e7d7      	b.n	800b9ac <_dtoa_r+0x254>
 800b9fc:	3101      	adds	r1, #1
 800b9fe:	0052      	lsls	r2, r2, #1
 800ba00:	e7d8      	b.n	800b9b4 <_dtoa_r+0x25c>
 800ba02:	bf00      	nop
 800ba04:	f3af 8000 	nop.w
 800ba08:	636f4361 	.word	0x636f4361
 800ba0c:	3fd287a7 	.word	0x3fd287a7
 800ba10:	8b60c8b3 	.word	0x8b60c8b3
 800ba14:	3fc68a28 	.word	0x3fc68a28
 800ba18:	509f79fb 	.word	0x509f79fb
 800ba1c:	3fd34413 	.word	0x3fd34413
 800ba20:	0800edfe 	.word	0x0800edfe
 800ba24:	0800ee15 	.word	0x0800ee15
 800ba28:	7ff00000 	.word	0x7ff00000
 800ba2c:	0800edc9 	.word	0x0800edc9
 800ba30:	3ff80000 	.word	0x3ff80000
 800ba34:	0800ef10 	.word	0x0800ef10
 800ba38:	0800ee6d 	.word	0x0800ee6d
 800ba3c:	0800edfa 	.word	0x0800edfa
 800ba40:	0800edc8 	.word	0x0800edc8
 800ba44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba48:	6018      	str	r0, [r3, #0]
 800ba4a:	9b07      	ldr	r3, [sp, #28]
 800ba4c:	2b0e      	cmp	r3, #14
 800ba4e:	f200 80a4 	bhi.w	800bb9a <_dtoa_r+0x442>
 800ba52:	2c00      	cmp	r4, #0
 800ba54:	f000 80a1 	beq.w	800bb9a <_dtoa_r+0x442>
 800ba58:	2f00      	cmp	r7, #0
 800ba5a:	dd33      	ble.n	800bac4 <_dtoa_r+0x36c>
 800ba5c:	4bad      	ldr	r3, [pc, #692]	@ (800bd14 <_dtoa_r+0x5bc>)
 800ba5e:	f007 020f 	and.w	r2, r7, #15
 800ba62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba66:	ed93 7b00 	vldr	d7, [r3]
 800ba6a:	05f8      	lsls	r0, r7, #23
 800ba6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ba74:	d516      	bpl.n	800baa4 <_dtoa_r+0x34c>
 800ba76:	4ba8      	ldr	r3, [pc, #672]	@ (800bd18 <_dtoa_r+0x5c0>)
 800ba78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba80:	f7f4 ff0c 	bl	800089c <__aeabi_ddiv>
 800ba84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba88:	f004 040f 	and.w	r4, r4, #15
 800ba8c:	2603      	movs	r6, #3
 800ba8e:	4da2      	ldr	r5, [pc, #648]	@ (800bd18 <_dtoa_r+0x5c0>)
 800ba90:	b954      	cbnz	r4, 800baa8 <_dtoa_r+0x350>
 800ba92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba9a:	f7f4 feff 	bl	800089c <__aeabi_ddiv>
 800ba9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa2:	e028      	b.n	800baf6 <_dtoa_r+0x39e>
 800baa4:	2602      	movs	r6, #2
 800baa6:	e7f2      	b.n	800ba8e <_dtoa_r+0x336>
 800baa8:	07e1      	lsls	r1, r4, #31
 800baaa:	d508      	bpl.n	800babe <_dtoa_r+0x366>
 800baac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bab4:	f7f4 fdc8 	bl	8000648 <__aeabi_dmul>
 800bab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800babc:	3601      	adds	r6, #1
 800babe:	1064      	asrs	r4, r4, #1
 800bac0:	3508      	adds	r5, #8
 800bac2:	e7e5      	b.n	800ba90 <_dtoa_r+0x338>
 800bac4:	f000 80d2 	beq.w	800bc6c <_dtoa_r+0x514>
 800bac8:	427c      	negs	r4, r7
 800baca:	4b92      	ldr	r3, [pc, #584]	@ (800bd14 <_dtoa_r+0x5bc>)
 800bacc:	4d92      	ldr	r5, [pc, #584]	@ (800bd18 <_dtoa_r+0x5c0>)
 800bace:	f004 020f 	and.w	r2, r4, #15
 800bad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bade:	f7f4 fdb3 	bl	8000648 <__aeabi_dmul>
 800bae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bae6:	1124      	asrs	r4, r4, #4
 800bae8:	2300      	movs	r3, #0
 800baea:	2602      	movs	r6, #2
 800baec:	2c00      	cmp	r4, #0
 800baee:	f040 80b2 	bne.w	800bc56 <_dtoa_r+0x4fe>
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1d3      	bne.n	800ba9e <_dtoa_r+0x346>
 800baf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800baf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 80b7 	beq.w	800bc70 <_dtoa_r+0x518>
 800bb02:	4b86      	ldr	r3, [pc, #536]	@ (800bd1c <_dtoa_r+0x5c4>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f5 f80f 	bl	8000b2c <__aeabi_dcmplt>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	f000 80ae 	beq.w	800bc70 <_dtoa_r+0x518>
 800bb14:	9b07      	ldr	r3, [sp, #28]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f000 80aa 	beq.w	800bc70 <_dtoa_r+0x518>
 800bb1c:	9b00      	ldr	r3, [sp, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	dd37      	ble.n	800bb92 <_dtoa_r+0x43a>
 800bb22:	1e7b      	subs	r3, r7, #1
 800bb24:	9304      	str	r3, [sp, #16]
 800bb26:	4620      	mov	r0, r4
 800bb28:	4b7d      	ldr	r3, [pc, #500]	@ (800bd20 <_dtoa_r+0x5c8>)
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	f7f4 fd8b 	bl	8000648 <__aeabi_dmul>
 800bb32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb36:	9c00      	ldr	r4, [sp, #0]
 800bb38:	3601      	adds	r6, #1
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f7f4 fd1a 	bl	8000574 <__aeabi_i2d>
 800bb40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb44:	f7f4 fd80 	bl	8000648 <__aeabi_dmul>
 800bb48:	4b76      	ldr	r3, [pc, #472]	@ (800bd24 <_dtoa_r+0x5cc>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f7f4 fbc6 	bl	80002dc <__adddf3>
 800bb50:	4605      	mov	r5, r0
 800bb52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb56:	2c00      	cmp	r4, #0
 800bb58:	f040 808d 	bne.w	800bc76 <_dtoa_r+0x51e>
 800bb5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb60:	4b71      	ldr	r3, [pc, #452]	@ (800bd28 <_dtoa_r+0x5d0>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	f7f4 fbb8 	bl	80002d8 <__aeabi_dsub>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb70:	462a      	mov	r2, r5
 800bb72:	4633      	mov	r3, r6
 800bb74:	f7f4 fff8 	bl	8000b68 <__aeabi_dcmpgt>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	f040 828b 	bne.w	800c094 <_dtoa_r+0x93c>
 800bb7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb82:	462a      	mov	r2, r5
 800bb84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bb88:	f7f4 ffd0 	bl	8000b2c <__aeabi_dcmplt>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f040 8128 	bne.w	800bde2 <_dtoa_r+0x68a>
 800bb92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bb96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bb9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f2c0 815a 	blt.w	800be56 <_dtoa_r+0x6fe>
 800bba2:	2f0e      	cmp	r7, #14
 800bba4:	f300 8157 	bgt.w	800be56 <_dtoa_r+0x6fe>
 800bba8:	4b5a      	ldr	r3, [pc, #360]	@ (800bd14 <_dtoa_r+0x5bc>)
 800bbaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbae:	ed93 7b00 	vldr	d7, [r3]
 800bbb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	ed8d 7b00 	vstr	d7, [sp]
 800bbba:	da03      	bge.n	800bbc4 <_dtoa_r+0x46c>
 800bbbc:	9b07      	ldr	r3, [sp, #28]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f340 8101 	ble.w	800bdc6 <_dtoa_r+0x66e>
 800bbc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbc8:	4656      	mov	r6, sl
 800bbca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbce:	4620      	mov	r0, r4
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	f7f4 fe63 	bl	800089c <__aeabi_ddiv>
 800bbd6:	f7f4 ffe7 	bl	8000ba8 <__aeabi_d2iz>
 800bbda:	4680      	mov	r8, r0
 800bbdc:	f7f4 fcca 	bl	8000574 <__aeabi_i2d>
 800bbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbe4:	f7f4 fd30 	bl	8000648 <__aeabi_dmul>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	4620      	mov	r0, r4
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bbf4:	f7f4 fb70 	bl	80002d8 <__aeabi_dsub>
 800bbf8:	f806 4b01 	strb.w	r4, [r6], #1
 800bbfc:	9d07      	ldr	r5, [sp, #28]
 800bbfe:	eba6 040a 	sub.w	r4, r6, sl
 800bc02:	42a5      	cmp	r5, r4
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	f040 8117 	bne.w	800be3a <_dtoa_r+0x6e2>
 800bc0c:	f7f4 fb66 	bl	80002dc <__adddf3>
 800bc10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc14:	4604      	mov	r4, r0
 800bc16:	460d      	mov	r5, r1
 800bc18:	f7f4 ffa6 	bl	8000b68 <__aeabi_dcmpgt>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	f040 80f9 	bne.w	800be14 <_dtoa_r+0x6bc>
 800bc22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc26:	4620      	mov	r0, r4
 800bc28:	4629      	mov	r1, r5
 800bc2a:	f7f4 ff75 	bl	8000b18 <__aeabi_dcmpeq>
 800bc2e:	b118      	cbz	r0, 800bc38 <_dtoa_r+0x4e0>
 800bc30:	f018 0f01 	tst.w	r8, #1
 800bc34:	f040 80ee 	bne.w	800be14 <_dtoa_r+0x6bc>
 800bc38:	4649      	mov	r1, r9
 800bc3a:	4658      	mov	r0, fp
 800bc3c:	f000 fc90 	bl	800c560 <_Bfree>
 800bc40:	2300      	movs	r3, #0
 800bc42:	7033      	strb	r3, [r6, #0]
 800bc44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc46:	3701      	adds	r7, #1
 800bc48:	601f      	str	r7, [r3, #0]
 800bc4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 831d 	beq.w	800c28c <_dtoa_r+0xb34>
 800bc52:	601e      	str	r6, [r3, #0]
 800bc54:	e31a      	b.n	800c28c <_dtoa_r+0xb34>
 800bc56:	07e2      	lsls	r2, r4, #31
 800bc58:	d505      	bpl.n	800bc66 <_dtoa_r+0x50e>
 800bc5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc5e:	f7f4 fcf3 	bl	8000648 <__aeabi_dmul>
 800bc62:	3601      	adds	r6, #1
 800bc64:	2301      	movs	r3, #1
 800bc66:	1064      	asrs	r4, r4, #1
 800bc68:	3508      	adds	r5, #8
 800bc6a:	e73f      	b.n	800baec <_dtoa_r+0x394>
 800bc6c:	2602      	movs	r6, #2
 800bc6e:	e742      	b.n	800baf6 <_dtoa_r+0x39e>
 800bc70:	9c07      	ldr	r4, [sp, #28]
 800bc72:	9704      	str	r7, [sp, #16]
 800bc74:	e761      	b.n	800bb3a <_dtoa_r+0x3e2>
 800bc76:	4b27      	ldr	r3, [pc, #156]	@ (800bd14 <_dtoa_r+0x5bc>)
 800bc78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc82:	4454      	add	r4, sl
 800bc84:	2900      	cmp	r1, #0
 800bc86:	d053      	beq.n	800bd30 <_dtoa_r+0x5d8>
 800bc88:	4928      	ldr	r1, [pc, #160]	@ (800bd2c <_dtoa_r+0x5d4>)
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	f7f4 fe06 	bl	800089c <__aeabi_ddiv>
 800bc90:	4633      	mov	r3, r6
 800bc92:	462a      	mov	r2, r5
 800bc94:	f7f4 fb20 	bl	80002d8 <__aeabi_dsub>
 800bc98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc9c:	4656      	mov	r6, sl
 800bc9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bca2:	f7f4 ff81 	bl	8000ba8 <__aeabi_d2iz>
 800bca6:	4605      	mov	r5, r0
 800bca8:	f7f4 fc64 	bl	8000574 <__aeabi_i2d>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb4:	f7f4 fb10 	bl	80002d8 <__aeabi_dsub>
 800bcb8:	3530      	adds	r5, #48	@ 0x30
 800bcba:	4602      	mov	r2, r0
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcc2:	f806 5b01 	strb.w	r5, [r6], #1
 800bcc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcca:	f7f4 ff2f 	bl	8000b2c <__aeabi_dcmplt>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d171      	bne.n	800bdb6 <_dtoa_r+0x65e>
 800bcd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcd6:	4911      	ldr	r1, [pc, #68]	@ (800bd1c <_dtoa_r+0x5c4>)
 800bcd8:	2000      	movs	r0, #0
 800bcda:	f7f4 fafd 	bl	80002d8 <__aeabi_dsub>
 800bcde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bce2:	f7f4 ff23 	bl	8000b2c <__aeabi_dcmplt>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f040 8095 	bne.w	800be16 <_dtoa_r+0x6be>
 800bcec:	42a6      	cmp	r6, r4
 800bcee:	f43f af50 	beq.w	800bb92 <_dtoa_r+0x43a>
 800bcf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcf6:	4b0a      	ldr	r3, [pc, #40]	@ (800bd20 <_dtoa_r+0x5c8>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f7f4 fca5 	bl	8000648 <__aeabi_dmul>
 800bcfe:	4b08      	ldr	r3, [pc, #32]	@ (800bd20 <_dtoa_r+0x5c8>)
 800bd00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd04:	2200      	movs	r2, #0
 800bd06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd0a:	f7f4 fc9d 	bl	8000648 <__aeabi_dmul>
 800bd0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd12:	e7c4      	b.n	800bc9e <_dtoa_r+0x546>
 800bd14:	0800ef10 	.word	0x0800ef10
 800bd18:	0800eee8 	.word	0x0800eee8
 800bd1c:	3ff00000 	.word	0x3ff00000
 800bd20:	40240000 	.word	0x40240000
 800bd24:	401c0000 	.word	0x401c0000
 800bd28:	40140000 	.word	0x40140000
 800bd2c:	3fe00000 	.word	0x3fe00000
 800bd30:	4631      	mov	r1, r6
 800bd32:	4628      	mov	r0, r5
 800bd34:	f7f4 fc88 	bl	8000648 <__aeabi_dmul>
 800bd38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bd3e:	4656      	mov	r6, sl
 800bd40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd44:	f7f4 ff30 	bl	8000ba8 <__aeabi_d2iz>
 800bd48:	4605      	mov	r5, r0
 800bd4a:	f7f4 fc13 	bl	8000574 <__aeabi_i2d>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
 800bd52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd56:	f7f4 fabf 	bl	80002d8 <__aeabi_dsub>
 800bd5a:	3530      	adds	r5, #48	@ 0x30
 800bd5c:	f806 5b01 	strb.w	r5, [r6], #1
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	42a6      	cmp	r6, r4
 800bd66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd6a:	f04f 0200 	mov.w	r2, #0
 800bd6e:	d124      	bne.n	800bdba <_dtoa_r+0x662>
 800bd70:	4bac      	ldr	r3, [pc, #688]	@ (800c024 <_dtoa_r+0x8cc>)
 800bd72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd76:	f7f4 fab1 	bl	80002dc <__adddf3>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd82:	f7f4 fef1 	bl	8000b68 <__aeabi_dcmpgt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d145      	bne.n	800be16 <_dtoa_r+0x6be>
 800bd8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd8e:	49a5      	ldr	r1, [pc, #660]	@ (800c024 <_dtoa_r+0x8cc>)
 800bd90:	2000      	movs	r0, #0
 800bd92:	f7f4 faa1 	bl	80002d8 <__aeabi_dsub>
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd9e:	f7f4 fec5 	bl	8000b2c <__aeabi_dcmplt>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	f43f aef5 	beq.w	800bb92 <_dtoa_r+0x43a>
 800bda8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bdaa:	1e73      	subs	r3, r6, #1
 800bdac:	9315      	str	r3, [sp, #84]	@ 0x54
 800bdae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bdb2:	2b30      	cmp	r3, #48	@ 0x30
 800bdb4:	d0f8      	beq.n	800bda8 <_dtoa_r+0x650>
 800bdb6:	9f04      	ldr	r7, [sp, #16]
 800bdb8:	e73e      	b.n	800bc38 <_dtoa_r+0x4e0>
 800bdba:	4b9b      	ldr	r3, [pc, #620]	@ (800c028 <_dtoa_r+0x8d0>)
 800bdbc:	f7f4 fc44 	bl	8000648 <__aeabi_dmul>
 800bdc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdc4:	e7bc      	b.n	800bd40 <_dtoa_r+0x5e8>
 800bdc6:	d10c      	bne.n	800bde2 <_dtoa_r+0x68a>
 800bdc8:	4b98      	ldr	r3, [pc, #608]	@ (800c02c <_dtoa_r+0x8d4>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdd0:	f7f4 fc3a 	bl	8000648 <__aeabi_dmul>
 800bdd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdd8:	f7f4 febc 	bl	8000b54 <__aeabi_dcmpge>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f000 8157 	beq.w	800c090 <_dtoa_r+0x938>
 800bde2:	2400      	movs	r4, #0
 800bde4:	4625      	mov	r5, r4
 800bde6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bde8:	43db      	mvns	r3, r3
 800bdea:	9304      	str	r3, [sp, #16]
 800bdec:	4656      	mov	r6, sl
 800bdee:	2700      	movs	r7, #0
 800bdf0:	4621      	mov	r1, r4
 800bdf2:	4658      	mov	r0, fp
 800bdf4:	f000 fbb4 	bl	800c560 <_Bfree>
 800bdf8:	2d00      	cmp	r5, #0
 800bdfa:	d0dc      	beq.n	800bdb6 <_dtoa_r+0x65e>
 800bdfc:	b12f      	cbz	r7, 800be0a <_dtoa_r+0x6b2>
 800bdfe:	42af      	cmp	r7, r5
 800be00:	d003      	beq.n	800be0a <_dtoa_r+0x6b2>
 800be02:	4639      	mov	r1, r7
 800be04:	4658      	mov	r0, fp
 800be06:	f000 fbab 	bl	800c560 <_Bfree>
 800be0a:	4629      	mov	r1, r5
 800be0c:	4658      	mov	r0, fp
 800be0e:	f000 fba7 	bl	800c560 <_Bfree>
 800be12:	e7d0      	b.n	800bdb6 <_dtoa_r+0x65e>
 800be14:	9704      	str	r7, [sp, #16]
 800be16:	4633      	mov	r3, r6
 800be18:	461e      	mov	r6, r3
 800be1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be1e:	2a39      	cmp	r2, #57	@ 0x39
 800be20:	d107      	bne.n	800be32 <_dtoa_r+0x6da>
 800be22:	459a      	cmp	sl, r3
 800be24:	d1f8      	bne.n	800be18 <_dtoa_r+0x6c0>
 800be26:	9a04      	ldr	r2, [sp, #16]
 800be28:	3201      	adds	r2, #1
 800be2a:	9204      	str	r2, [sp, #16]
 800be2c:	2230      	movs	r2, #48	@ 0x30
 800be2e:	f88a 2000 	strb.w	r2, [sl]
 800be32:	781a      	ldrb	r2, [r3, #0]
 800be34:	3201      	adds	r2, #1
 800be36:	701a      	strb	r2, [r3, #0]
 800be38:	e7bd      	b.n	800bdb6 <_dtoa_r+0x65e>
 800be3a:	4b7b      	ldr	r3, [pc, #492]	@ (800c028 <_dtoa_r+0x8d0>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	f7f4 fc03 	bl	8000648 <__aeabi_dmul>
 800be42:	2200      	movs	r2, #0
 800be44:	2300      	movs	r3, #0
 800be46:	4604      	mov	r4, r0
 800be48:	460d      	mov	r5, r1
 800be4a:	f7f4 fe65 	bl	8000b18 <__aeabi_dcmpeq>
 800be4e:	2800      	cmp	r0, #0
 800be50:	f43f aebb 	beq.w	800bbca <_dtoa_r+0x472>
 800be54:	e6f0      	b.n	800bc38 <_dtoa_r+0x4e0>
 800be56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be58:	2a00      	cmp	r2, #0
 800be5a:	f000 80db 	beq.w	800c014 <_dtoa_r+0x8bc>
 800be5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be60:	2a01      	cmp	r2, #1
 800be62:	f300 80bf 	bgt.w	800bfe4 <_dtoa_r+0x88c>
 800be66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800be68:	2a00      	cmp	r2, #0
 800be6a:	f000 80b7 	beq.w	800bfdc <_dtoa_r+0x884>
 800be6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800be72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be74:	4646      	mov	r6, r8
 800be76:	9a08      	ldr	r2, [sp, #32]
 800be78:	2101      	movs	r1, #1
 800be7a:	441a      	add	r2, r3
 800be7c:	4658      	mov	r0, fp
 800be7e:	4498      	add	r8, r3
 800be80:	9208      	str	r2, [sp, #32]
 800be82:	f000 fc6b 	bl	800c75c <__i2b>
 800be86:	4605      	mov	r5, r0
 800be88:	b15e      	cbz	r6, 800bea2 <_dtoa_r+0x74a>
 800be8a:	9b08      	ldr	r3, [sp, #32]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dd08      	ble.n	800bea2 <_dtoa_r+0x74a>
 800be90:	42b3      	cmp	r3, r6
 800be92:	9a08      	ldr	r2, [sp, #32]
 800be94:	bfa8      	it	ge
 800be96:	4633      	movge	r3, r6
 800be98:	eba8 0803 	sub.w	r8, r8, r3
 800be9c:	1af6      	subs	r6, r6, r3
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	9308      	str	r3, [sp, #32]
 800bea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bea4:	b1f3      	cbz	r3, 800bee4 <_dtoa_r+0x78c>
 800bea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 80b7 	beq.w	800c01c <_dtoa_r+0x8c4>
 800beae:	b18c      	cbz	r4, 800bed4 <_dtoa_r+0x77c>
 800beb0:	4629      	mov	r1, r5
 800beb2:	4622      	mov	r2, r4
 800beb4:	4658      	mov	r0, fp
 800beb6:	f000 fd11 	bl	800c8dc <__pow5mult>
 800beba:	464a      	mov	r2, r9
 800bebc:	4601      	mov	r1, r0
 800bebe:	4605      	mov	r5, r0
 800bec0:	4658      	mov	r0, fp
 800bec2:	f000 fc61 	bl	800c788 <__multiply>
 800bec6:	4649      	mov	r1, r9
 800bec8:	9004      	str	r0, [sp, #16]
 800beca:	4658      	mov	r0, fp
 800becc:	f000 fb48 	bl	800c560 <_Bfree>
 800bed0:	9b04      	ldr	r3, [sp, #16]
 800bed2:	4699      	mov	r9, r3
 800bed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bed6:	1b1a      	subs	r2, r3, r4
 800bed8:	d004      	beq.n	800bee4 <_dtoa_r+0x78c>
 800beda:	4649      	mov	r1, r9
 800bedc:	4658      	mov	r0, fp
 800bede:	f000 fcfd 	bl	800c8dc <__pow5mult>
 800bee2:	4681      	mov	r9, r0
 800bee4:	2101      	movs	r1, #1
 800bee6:	4658      	mov	r0, fp
 800bee8:	f000 fc38 	bl	800c75c <__i2b>
 800beec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beee:	4604      	mov	r4, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f000 81cf 	beq.w	800c294 <_dtoa_r+0xb3c>
 800bef6:	461a      	mov	r2, r3
 800bef8:	4601      	mov	r1, r0
 800befa:	4658      	mov	r0, fp
 800befc:	f000 fcee 	bl	800c8dc <__pow5mult>
 800bf00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	4604      	mov	r4, r0
 800bf06:	f300 8095 	bgt.w	800c034 <_dtoa_r+0x8dc>
 800bf0a:	9b02      	ldr	r3, [sp, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f040 8087 	bne.w	800c020 <_dtoa_r+0x8c8>
 800bf12:	9b03      	ldr	r3, [sp, #12]
 800bf14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f040 8089 	bne.w	800c030 <_dtoa_r+0x8d8>
 800bf1e:	9b03      	ldr	r3, [sp, #12]
 800bf20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf24:	0d1b      	lsrs	r3, r3, #20
 800bf26:	051b      	lsls	r3, r3, #20
 800bf28:	b12b      	cbz	r3, 800bf36 <_dtoa_r+0x7de>
 800bf2a:	9b08      	ldr	r3, [sp, #32]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	9308      	str	r3, [sp, #32]
 800bf30:	f108 0801 	add.w	r8, r8, #1
 800bf34:	2301      	movs	r3, #1
 800bf36:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f000 81b0 	beq.w	800c2a0 <_dtoa_r+0xb48>
 800bf40:	6923      	ldr	r3, [r4, #16]
 800bf42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf46:	6918      	ldr	r0, [r3, #16]
 800bf48:	f000 fbbc 	bl	800c6c4 <__hi0bits>
 800bf4c:	f1c0 0020 	rsb	r0, r0, #32
 800bf50:	9b08      	ldr	r3, [sp, #32]
 800bf52:	4418      	add	r0, r3
 800bf54:	f010 001f 	ands.w	r0, r0, #31
 800bf58:	d077      	beq.n	800c04a <_dtoa_r+0x8f2>
 800bf5a:	f1c0 0320 	rsb	r3, r0, #32
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	dd6b      	ble.n	800c03a <_dtoa_r+0x8e2>
 800bf62:	9b08      	ldr	r3, [sp, #32]
 800bf64:	f1c0 001c 	rsb	r0, r0, #28
 800bf68:	4403      	add	r3, r0
 800bf6a:	4480      	add	r8, r0
 800bf6c:	4406      	add	r6, r0
 800bf6e:	9308      	str	r3, [sp, #32]
 800bf70:	f1b8 0f00 	cmp.w	r8, #0
 800bf74:	dd05      	ble.n	800bf82 <_dtoa_r+0x82a>
 800bf76:	4649      	mov	r1, r9
 800bf78:	4642      	mov	r2, r8
 800bf7a:	4658      	mov	r0, fp
 800bf7c:	f000 fd08 	bl	800c990 <__lshift>
 800bf80:	4681      	mov	r9, r0
 800bf82:	9b08      	ldr	r3, [sp, #32]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	dd05      	ble.n	800bf94 <_dtoa_r+0x83c>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	4658      	mov	r0, fp
 800bf8e:	f000 fcff 	bl	800c990 <__lshift>
 800bf92:	4604      	mov	r4, r0
 800bf94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d059      	beq.n	800c04e <_dtoa_r+0x8f6>
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4648      	mov	r0, r9
 800bf9e:	f000 fd63 	bl	800ca68 <__mcmp>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	da53      	bge.n	800c04e <_dtoa_r+0x8f6>
 800bfa6:	1e7b      	subs	r3, r7, #1
 800bfa8:	9304      	str	r3, [sp, #16]
 800bfaa:	4649      	mov	r1, r9
 800bfac:	2300      	movs	r3, #0
 800bfae:	220a      	movs	r2, #10
 800bfb0:	4658      	mov	r0, fp
 800bfb2:	f000 faf7 	bl	800c5a4 <__multadd>
 800bfb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfb8:	4681      	mov	r9, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 8172 	beq.w	800c2a4 <_dtoa_r+0xb4c>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	220a      	movs	r2, #10
 800bfc6:	4658      	mov	r0, fp
 800bfc8:	f000 faec 	bl	800c5a4 <__multadd>
 800bfcc:	9b00      	ldr	r3, [sp, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	4605      	mov	r5, r0
 800bfd2:	dc67      	bgt.n	800c0a4 <_dtoa_r+0x94c>
 800bfd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	dc41      	bgt.n	800c05e <_dtoa_r+0x906>
 800bfda:	e063      	b.n	800c0a4 <_dtoa_r+0x94c>
 800bfdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bfde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bfe2:	e746      	b.n	800be72 <_dtoa_r+0x71a>
 800bfe4:	9b07      	ldr	r3, [sp, #28]
 800bfe6:	1e5c      	subs	r4, r3, #1
 800bfe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfea:	42a3      	cmp	r3, r4
 800bfec:	bfbf      	itttt	lt
 800bfee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bff0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bff2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bff4:	1ae3      	sublt	r3, r4, r3
 800bff6:	bfb4      	ite	lt
 800bff8:	18d2      	addlt	r2, r2, r3
 800bffa:	1b1c      	subge	r4, r3, r4
 800bffc:	9b07      	ldr	r3, [sp, #28]
 800bffe:	bfbc      	itt	lt
 800c000:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c002:	2400      	movlt	r4, #0
 800c004:	2b00      	cmp	r3, #0
 800c006:	bfb5      	itete	lt
 800c008:	eba8 0603 	sublt.w	r6, r8, r3
 800c00c:	9b07      	ldrge	r3, [sp, #28]
 800c00e:	2300      	movlt	r3, #0
 800c010:	4646      	movge	r6, r8
 800c012:	e730      	b.n	800be76 <_dtoa_r+0x71e>
 800c014:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c016:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c018:	4646      	mov	r6, r8
 800c01a:	e735      	b.n	800be88 <_dtoa_r+0x730>
 800c01c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c01e:	e75c      	b.n	800beda <_dtoa_r+0x782>
 800c020:	2300      	movs	r3, #0
 800c022:	e788      	b.n	800bf36 <_dtoa_r+0x7de>
 800c024:	3fe00000 	.word	0x3fe00000
 800c028:	40240000 	.word	0x40240000
 800c02c:	40140000 	.word	0x40140000
 800c030:	9b02      	ldr	r3, [sp, #8]
 800c032:	e780      	b.n	800bf36 <_dtoa_r+0x7de>
 800c034:	2300      	movs	r3, #0
 800c036:	930a      	str	r3, [sp, #40]	@ 0x28
 800c038:	e782      	b.n	800bf40 <_dtoa_r+0x7e8>
 800c03a:	d099      	beq.n	800bf70 <_dtoa_r+0x818>
 800c03c:	9a08      	ldr	r2, [sp, #32]
 800c03e:	331c      	adds	r3, #28
 800c040:	441a      	add	r2, r3
 800c042:	4498      	add	r8, r3
 800c044:	441e      	add	r6, r3
 800c046:	9208      	str	r2, [sp, #32]
 800c048:	e792      	b.n	800bf70 <_dtoa_r+0x818>
 800c04a:	4603      	mov	r3, r0
 800c04c:	e7f6      	b.n	800c03c <_dtoa_r+0x8e4>
 800c04e:	9b07      	ldr	r3, [sp, #28]
 800c050:	9704      	str	r7, [sp, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	dc20      	bgt.n	800c098 <_dtoa_r+0x940>
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	dd1e      	ble.n	800c09c <_dtoa_r+0x944>
 800c05e:	9b00      	ldr	r3, [sp, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	f47f aec0 	bne.w	800bde6 <_dtoa_r+0x68e>
 800c066:	4621      	mov	r1, r4
 800c068:	2205      	movs	r2, #5
 800c06a:	4658      	mov	r0, fp
 800c06c:	f000 fa9a 	bl	800c5a4 <__multadd>
 800c070:	4601      	mov	r1, r0
 800c072:	4604      	mov	r4, r0
 800c074:	4648      	mov	r0, r9
 800c076:	f000 fcf7 	bl	800ca68 <__mcmp>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	f77f aeb3 	ble.w	800bde6 <_dtoa_r+0x68e>
 800c080:	4656      	mov	r6, sl
 800c082:	2331      	movs	r3, #49	@ 0x31
 800c084:	f806 3b01 	strb.w	r3, [r6], #1
 800c088:	9b04      	ldr	r3, [sp, #16]
 800c08a:	3301      	adds	r3, #1
 800c08c:	9304      	str	r3, [sp, #16]
 800c08e:	e6ae      	b.n	800bdee <_dtoa_r+0x696>
 800c090:	9c07      	ldr	r4, [sp, #28]
 800c092:	9704      	str	r7, [sp, #16]
 800c094:	4625      	mov	r5, r4
 800c096:	e7f3      	b.n	800c080 <_dtoa_r+0x928>
 800c098:	9b07      	ldr	r3, [sp, #28]
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 8104 	beq.w	800c2ac <_dtoa_r+0xb54>
 800c0a4:	2e00      	cmp	r6, #0
 800c0a6:	dd05      	ble.n	800c0b4 <_dtoa_r+0x95c>
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	4632      	mov	r2, r6
 800c0ac:	4658      	mov	r0, fp
 800c0ae:	f000 fc6f 	bl	800c990 <__lshift>
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d05a      	beq.n	800c170 <_dtoa_r+0xa18>
 800c0ba:	6869      	ldr	r1, [r5, #4]
 800c0bc:	4658      	mov	r0, fp
 800c0be:	f000 fa0f 	bl	800c4e0 <_Balloc>
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	b928      	cbnz	r0, 800c0d2 <_dtoa_r+0x97a>
 800c0c6:	4b84      	ldr	r3, [pc, #528]	@ (800c2d8 <_dtoa_r+0xb80>)
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c0ce:	f7ff bb5a 	b.w	800b786 <_dtoa_r+0x2e>
 800c0d2:	692a      	ldr	r2, [r5, #16]
 800c0d4:	3202      	adds	r2, #2
 800c0d6:	0092      	lsls	r2, r2, #2
 800c0d8:	f105 010c 	add.w	r1, r5, #12
 800c0dc:	300c      	adds	r0, #12
 800c0de:	f7ff fa9c 	bl	800b61a <memcpy>
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	4631      	mov	r1, r6
 800c0e6:	4658      	mov	r0, fp
 800c0e8:	f000 fc52 	bl	800c990 <__lshift>
 800c0ec:	f10a 0301 	add.w	r3, sl, #1
 800c0f0:	9307      	str	r3, [sp, #28]
 800c0f2:	9b00      	ldr	r3, [sp, #0]
 800c0f4:	4453      	add	r3, sl
 800c0f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0f8:	9b02      	ldr	r3, [sp, #8]
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	462f      	mov	r7, r5
 800c100:	930a      	str	r3, [sp, #40]	@ 0x28
 800c102:	4605      	mov	r5, r0
 800c104:	9b07      	ldr	r3, [sp, #28]
 800c106:	4621      	mov	r1, r4
 800c108:	3b01      	subs	r3, #1
 800c10a:	4648      	mov	r0, r9
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	f7ff fa99 	bl	800b644 <quorem>
 800c112:	4639      	mov	r1, r7
 800c114:	9002      	str	r0, [sp, #8]
 800c116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c11a:	4648      	mov	r0, r9
 800c11c:	f000 fca4 	bl	800ca68 <__mcmp>
 800c120:	462a      	mov	r2, r5
 800c122:	9008      	str	r0, [sp, #32]
 800c124:	4621      	mov	r1, r4
 800c126:	4658      	mov	r0, fp
 800c128:	f000 fcba 	bl	800caa0 <__mdiff>
 800c12c:	68c2      	ldr	r2, [r0, #12]
 800c12e:	4606      	mov	r6, r0
 800c130:	bb02      	cbnz	r2, 800c174 <_dtoa_r+0xa1c>
 800c132:	4601      	mov	r1, r0
 800c134:	4648      	mov	r0, r9
 800c136:	f000 fc97 	bl	800ca68 <__mcmp>
 800c13a:	4602      	mov	r2, r0
 800c13c:	4631      	mov	r1, r6
 800c13e:	4658      	mov	r0, fp
 800c140:	920e      	str	r2, [sp, #56]	@ 0x38
 800c142:	f000 fa0d 	bl	800c560 <_Bfree>
 800c146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c14a:	9e07      	ldr	r6, [sp, #28]
 800c14c:	ea43 0102 	orr.w	r1, r3, r2
 800c150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c152:	4319      	orrs	r1, r3
 800c154:	d110      	bne.n	800c178 <_dtoa_r+0xa20>
 800c156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c15a:	d029      	beq.n	800c1b0 <_dtoa_r+0xa58>
 800c15c:	9b08      	ldr	r3, [sp, #32]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	dd02      	ble.n	800c168 <_dtoa_r+0xa10>
 800c162:	9b02      	ldr	r3, [sp, #8]
 800c164:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c168:	9b00      	ldr	r3, [sp, #0]
 800c16a:	f883 8000 	strb.w	r8, [r3]
 800c16e:	e63f      	b.n	800bdf0 <_dtoa_r+0x698>
 800c170:	4628      	mov	r0, r5
 800c172:	e7bb      	b.n	800c0ec <_dtoa_r+0x994>
 800c174:	2201      	movs	r2, #1
 800c176:	e7e1      	b.n	800c13c <_dtoa_r+0x9e4>
 800c178:	9b08      	ldr	r3, [sp, #32]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	db04      	blt.n	800c188 <_dtoa_r+0xa30>
 800c17e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c180:	430b      	orrs	r3, r1
 800c182:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c184:	430b      	orrs	r3, r1
 800c186:	d120      	bne.n	800c1ca <_dtoa_r+0xa72>
 800c188:	2a00      	cmp	r2, #0
 800c18a:	dded      	ble.n	800c168 <_dtoa_r+0xa10>
 800c18c:	4649      	mov	r1, r9
 800c18e:	2201      	movs	r2, #1
 800c190:	4658      	mov	r0, fp
 800c192:	f000 fbfd 	bl	800c990 <__lshift>
 800c196:	4621      	mov	r1, r4
 800c198:	4681      	mov	r9, r0
 800c19a:	f000 fc65 	bl	800ca68 <__mcmp>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	dc03      	bgt.n	800c1aa <_dtoa_r+0xa52>
 800c1a2:	d1e1      	bne.n	800c168 <_dtoa_r+0xa10>
 800c1a4:	f018 0f01 	tst.w	r8, #1
 800c1a8:	d0de      	beq.n	800c168 <_dtoa_r+0xa10>
 800c1aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1ae:	d1d8      	bne.n	800c162 <_dtoa_r+0xa0a>
 800c1b0:	9a00      	ldr	r2, [sp, #0]
 800c1b2:	2339      	movs	r3, #57	@ 0x39
 800c1b4:	7013      	strb	r3, [r2, #0]
 800c1b6:	4633      	mov	r3, r6
 800c1b8:	461e      	mov	r6, r3
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c1c0:	2a39      	cmp	r2, #57	@ 0x39
 800c1c2:	d052      	beq.n	800c26a <_dtoa_r+0xb12>
 800c1c4:	3201      	adds	r2, #1
 800c1c6:	701a      	strb	r2, [r3, #0]
 800c1c8:	e612      	b.n	800bdf0 <_dtoa_r+0x698>
 800c1ca:	2a00      	cmp	r2, #0
 800c1cc:	dd07      	ble.n	800c1de <_dtoa_r+0xa86>
 800c1ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1d2:	d0ed      	beq.n	800c1b0 <_dtoa_r+0xa58>
 800c1d4:	9a00      	ldr	r2, [sp, #0]
 800c1d6:	f108 0301 	add.w	r3, r8, #1
 800c1da:	7013      	strb	r3, [r2, #0]
 800c1dc:	e608      	b.n	800bdf0 <_dtoa_r+0x698>
 800c1de:	9b07      	ldr	r3, [sp, #28]
 800c1e0:	9a07      	ldr	r2, [sp, #28]
 800c1e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d028      	beq.n	800c23e <_dtoa_r+0xae6>
 800c1ec:	4649      	mov	r1, r9
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	220a      	movs	r2, #10
 800c1f2:	4658      	mov	r0, fp
 800c1f4:	f000 f9d6 	bl	800c5a4 <__multadd>
 800c1f8:	42af      	cmp	r7, r5
 800c1fa:	4681      	mov	r9, r0
 800c1fc:	f04f 0300 	mov.w	r3, #0
 800c200:	f04f 020a 	mov.w	r2, #10
 800c204:	4639      	mov	r1, r7
 800c206:	4658      	mov	r0, fp
 800c208:	d107      	bne.n	800c21a <_dtoa_r+0xac2>
 800c20a:	f000 f9cb 	bl	800c5a4 <__multadd>
 800c20e:	4607      	mov	r7, r0
 800c210:	4605      	mov	r5, r0
 800c212:	9b07      	ldr	r3, [sp, #28]
 800c214:	3301      	adds	r3, #1
 800c216:	9307      	str	r3, [sp, #28]
 800c218:	e774      	b.n	800c104 <_dtoa_r+0x9ac>
 800c21a:	f000 f9c3 	bl	800c5a4 <__multadd>
 800c21e:	4629      	mov	r1, r5
 800c220:	4607      	mov	r7, r0
 800c222:	2300      	movs	r3, #0
 800c224:	220a      	movs	r2, #10
 800c226:	4658      	mov	r0, fp
 800c228:	f000 f9bc 	bl	800c5a4 <__multadd>
 800c22c:	4605      	mov	r5, r0
 800c22e:	e7f0      	b.n	800c212 <_dtoa_r+0xaba>
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	bfcc      	ite	gt
 800c236:	461e      	movgt	r6, r3
 800c238:	2601      	movle	r6, #1
 800c23a:	4456      	add	r6, sl
 800c23c:	2700      	movs	r7, #0
 800c23e:	4649      	mov	r1, r9
 800c240:	2201      	movs	r2, #1
 800c242:	4658      	mov	r0, fp
 800c244:	f000 fba4 	bl	800c990 <__lshift>
 800c248:	4621      	mov	r1, r4
 800c24a:	4681      	mov	r9, r0
 800c24c:	f000 fc0c 	bl	800ca68 <__mcmp>
 800c250:	2800      	cmp	r0, #0
 800c252:	dcb0      	bgt.n	800c1b6 <_dtoa_r+0xa5e>
 800c254:	d102      	bne.n	800c25c <_dtoa_r+0xb04>
 800c256:	f018 0f01 	tst.w	r8, #1
 800c25a:	d1ac      	bne.n	800c1b6 <_dtoa_r+0xa5e>
 800c25c:	4633      	mov	r3, r6
 800c25e:	461e      	mov	r6, r3
 800c260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c264:	2a30      	cmp	r2, #48	@ 0x30
 800c266:	d0fa      	beq.n	800c25e <_dtoa_r+0xb06>
 800c268:	e5c2      	b.n	800bdf0 <_dtoa_r+0x698>
 800c26a:	459a      	cmp	sl, r3
 800c26c:	d1a4      	bne.n	800c1b8 <_dtoa_r+0xa60>
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	3301      	adds	r3, #1
 800c272:	9304      	str	r3, [sp, #16]
 800c274:	2331      	movs	r3, #49	@ 0x31
 800c276:	f88a 3000 	strb.w	r3, [sl]
 800c27a:	e5b9      	b.n	800bdf0 <_dtoa_r+0x698>
 800c27c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c27e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c2dc <_dtoa_r+0xb84>
 800c282:	b11b      	cbz	r3, 800c28c <_dtoa_r+0xb34>
 800c284:	f10a 0308 	add.w	r3, sl, #8
 800c288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c28a:	6013      	str	r3, [r2, #0]
 800c28c:	4650      	mov	r0, sl
 800c28e:	b019      	add	sp, #100	@ 0x64
 800c290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c296:	2b01      	cmp	r3, #1
 800c298:	f77f ae37 	ble.w	800bf0a <_dtoa_r+0x7b2>
 800c29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2a0:	2001      	movs	r0, #1
 800c2a2:	e655      	b.n	800bf50 <_dtoa_r+0x7f8>
 800c2a4:	9b00      	ldr	r3, [sp, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f77f aed6 	ble.w	800c058 <_dtoa_r+0x900>
 800c2ac:	4656      	mov	r6, sl
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4648      	mov	r0, r9
 800c2b2:	f7ff f9c7 	bl	800b644 <quorem>
 800c2b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c2ba:	f806 8b01 	strb.w	r8, [r6], #1
 800c2be:	9b00      	ldr	r3, [sp, #0]
 800c2c0:	eba6 020a 	sub.w	r2, r6, sl
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	ddb3      	ble.n	800c230 <_dtoa_r+0xad8>
 800c2c8:	4649      	mov	r1, r9
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	220a      	movs	r2, #10
 800c2ce:	4658      	mov	r0, fp
 800c2d0:	f000 f968 	bl	800c5a4 <__multadd>
 800c2d4:	4681      	mov	r9, r0
 800c2d6:	e7ea      	b.n	800c2ae <_dtoa_r+0xb56>
 800c2d8:	0800ee6d 	.word	0x0800ee6d
 800c2dc:	0800edf1 	.word	0x0800edf1

0800c2e0 <_free_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4605      	mov	r5, r0
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	d041      	beq.n	800c36c <_free_r+0x8c>
 800c2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ec:	1f0c      	subs	r4, r1, #4
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	bfb8      	it	lt
 800c2f2:	18e4      	addlt	r4, r4, r3
 800c2f4:	f000 f8e8 	bl	800c4c8 <__malloc_lock>
 800c2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c370 <_free_r+0x90>)
 800c2fa:	6813      	ldr	r3, [r2, #0]
 800c2fc:	b933      	cbnz	r3, 800c30c <_free_r+0x2c>
 800c2fe:	6063      	str	r3, [r4, #4]
 800c300:	6014      	str	r4, [r2, #0]
 800c302:	4628      	mov	r0, r5
 800c304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c308:	f000 b8e4 	b.w	800c4d4 <__malloc_unlock>
 800c30c:	42a3      	cmp	r3, r4
 800c30e:	d908      	bls.n	800c322 <_free_r+0x42>
 800c310:	6820      	ldr	r0, [r4, #0]
 800c312:	1821      	adds	r1, r4, r0
 800c314:	428b      	cmp	r3, r1
 800c316:	bf01      	itttt	eq
 800c318:	6819      	ldreq	r1, [r3, #0]
 800c31a:	685b      	ldreq	r3, [r3, #4]
 800c31c:	1809      	addeq	r1, r1, r0
 800c31e:	6021      	streq	r1, [r4, #0]
 800c320:	e7ed      	b.n	800c2fe <_free_r+0x1e>
 800c322:	461a      	mov	r2, r3
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	b10b      	cbz	r3, 800c32c <_free_r+0x4c>
 800c328:	42a3      	cmp	r3, r4
 800c32a:	d9fa      	bls.n	800c322 <_free_r+0x42>
 800c32c:	6811      	ldr	r1, [r2, #0]
 800c32e:	1850      	adds	r0, r2, r1
 800c330:	42a0      	cmp	r0, r4
 800c332:	d10b      	bne.n	800c34c <_free_r+0x6c>
 800c334:	6820      	ldr	r0, [r4, #0]
 800c336:	4401      	add	r1, r0
 800c338:	1850      	adds	r0, r2, r1
 800c33a:	4283      	cmp	r3, r0
 800c33c:	6011      	str	r1, [r2, #0]
 800c33e:	d1e0      	bne.n	800c302 <_free_r+0x22>
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	6053      	str	r3, [r2, #4]
 800c346:	4408      	add	r0, r1
 800c348:	6010      	str	r0, [r2, #0]
 800c34a:	e7da      	b.n	800c302 <_free_r+0x22>
 800c34c:	d902      	bls.n	800c354 <_free_r+0x74>
 800c34e:	230c      	movs	r3, #12
 800c350:	602b      	str	r3, [r5, #0]
 800c352:	e7d6      	b.n	800c302 <_free_r+0x22>
 800c354:	6820      	ldr	r0, [r4, #0]
 800c356:	1821      	adds	r1, r4, r0
 800c358:	428b      	cmp	r3, r1
 800c35a:	bf04      	itt	eq
 800c35c:	6819      	ldreq	r1, [r3, #0]
 800c35e:	685b      	ldreq	r3, [r3, #4]
 800c360:	6063      	str	r3, [r4, #4]
 800c362:	bf04      	itt	eq
 800c364:	1809      	addeq	r1, r1, r0
 800c366:	6021      	streq	r1, [r4, #0]
 800c368:	6054      	str	r4, [r2, #4]
 800c36a:	e7ca      	b.n	800c302 <_free_r+0x22>
 800c36c:	bd38      	pop	{r3, r4, r5, pc}
 800c36e:	bf00      	nop
 800c370:	200030a0 	.word	0x200030a0

0800c374 <malloc>:
 800c374:	4b02      	ldr	r3, [pc, #8]	@ (800c380 <malloc+0xc>)
 800c376:	4601      	mov	r1, r0
 800c378:	6818      	ldr	r0, [r3, #0]
 800c37a:	f000 b825 	b.w	800c3c8 <_malloc_r>
 800c37e:	bf00      	nop
 800c380:	2000001c 	.word	0x2000001c

0800c384 <sbrk_aligned>:
 800c384:	b570      	push	{r4, r5, r6, lr}
 800c386:	4e0f      	ldr	r6, [pc, #60]	@ (800c3c4 <sbrk_aligned+0x40>)
 800c388:	460c      	mov	r4, r1
 800c38a:	6831      	ldr	r1, [r6, #0]
 800c38c:	4605      	mov	r5, r0
 800c38e:	b911      	cbnz	r1, 800c396 <sbrk_aligned+0x12>
 800c390:	f001 ffd2 	bl	800e338 <_sbrk_r>
 800c394:	6030      	str	r0, [r6, #0]
 800c396:	4621      	mov	r1, r4
 800c398:	4628      	mov	r0, r5
 800c39a:	f001 ffcd 	bl	800e338 <_sbrk_r>
 800c39e:	1c43      	adds	r3, r0, #1
 800c3a0:	d103      	bne.n	800c3aa <sbrk_aligned+0x26>
 800c3a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	bd70      	pop	{r4, r5, r6, pc}
 800c3aa:	1cc4      	adds	r4, r0, #3
 800c3ac:	f024 0403 	bic.w	r4, r4, #3
 800c3b0:	42a0      	cmp	r0, r4
 800c3b2:	d0f8      	beq.n	800c3a6 <sbrk_aligned+0x22>
 800c3b4:	1a21      	subs	r1, r4, r0
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f001 ffbe 	bl	800e338 <_sbrk_r>
 800c3bc:	3001      	adds	r0, #1
 800c3be:	d1f2      	bne.n	800c3a6 <sbrk_aligned+0x22>
 800c3c0:	e7ef      	b.n	800c3a2 <sbrk_aligned+0x1e>
 800c3c2:	bf00      	nop
 800c3c4:	2000309c 	.word	0x2000309c

0800c3c8 <_malloc_r>:
 800c3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3cc:	1ccd      	adds	r5, r1, #3
 800c3ce:	f025 0503 	bic.w	r5, r5, #3
 800c3d2:	3508      	adds	r5, #8
 800c3d4:	2d0c      	cmp	r5, #12
 800c3d6:	bf38      	it	cc
 800c3d8:	250c      	movcc	r5, #12
 800c3da:	2d00      	cmp	r5, #0
 800c3dc:	4606      	mov	r6, r0
 800c3de:	db01      	blt.n	800c3e4 <_malloc_r+0x1c>
 800c3e0:	42a9      	cmp	r1, r5
 800c3e2:	d904      	bls.n	800c3ee <_malloc_r+0x26>
 800c3e4:	230c      	movs	r3, #12
 800c3e6:	6033      	str	r3, [r6, #0]
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c4c4 <_malloc_r+0xfc>
 800c3f2:	f000 f869 	bl	800c4c8 <__malloc_lock>
 800c3f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c3fa:	461c      	mov	r4, r3
 800c3fc:	bb44      	cbnz	r4, 800c450 <_malloc_r+0x88>
 800c3fe:	4629      	mov	r1, r5
 800c400:	4630      	mov	r0, r6
 800c402:	f7ff ffbf 	bl	800c384 <sbrk_aligned>
 800c406:	1c43      	adds	r3, r0, #1
 800c408:	4604      	mov	r4, r0
 800c40a:	d158      	bne.n	800c4be <_malloc_r+0xf6>
 800c40c:	f8d8 4000 	ldr.w	r4, [r8]
 800c410:	4627      	mov	r7, r4
 800c412:	2f00      	cmp	r7, #0
 800c414:	d143      	bne.n	800c49e <_malloc_r+0xd6>
 800c416:	2c00      	cmp	r4, #0
 800c418:	d04b      	beq.n	800c4b2 <_malloc_r+0xea>
 800c41a:	6823      	ldr	r3, [r4, #0]
 800c41c:	4639      	mov	r1, r7
 800c41e:	4630      	mov	r0, r6
 800c420:	eb04 0903 	add.w	r9, r4, r3
 800c424:	f001 ff88 	bl	800e338 <_sbrk_r>
 800c428:	4581      	cmp	r9, r0
 800c42a:	d142      	bne.n	800c4b2 <_malloc_r+0xea>
 800c42c:	6821      	ldr	r1, [r4, #0]
 800c42e:	1a6d      	subs	r5, r5, r1
 800c430:	4629      	mov	r1, r5
 800c432:	4630      	mov	r0, r6
 800c434:	f7ff ffa6 	bl	800c384 <sbrk_aligned>
 800c438:	3001      	adds	r0, #1
 800c43a:	d03a      	beq.n	800c4b2 <_malloc_r+0xea>
 800c43c:	6823      	ldr	r3, [r4, #0]
 800c43e:	442b      	add	r3, r5
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	f8d8 3000 	ldr.w	r3, [r8]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	bb62      	cbnz	r2, 800c4a4 <_malloc_r+0xdc>
 800c44a:	f8c8 7000 	str.w	r7, [r8]
 800c44e:	e00f      	b.n	800c470 <_malloc_r+0xa8>
 800c450:	6822      	ldr	r2, [r4, #0]
 800c452:	1b52      	subs	r2, r2, r5
 800c454:	d420      	bmi.n	800c498 <_malloc_r+0xd0>
 800c456:	2a0b      	cmp	r2, #11
 800c458:	d917      	bls.n	800c48a <_malloc_r+0xc2>
 800c45a:	1961      	adds	r1, r4, r5
 800c45c:	42a3      	cmp	r3, r4
 800c45e:	6025      	str	r5, [r4, #0]
 800c460:	bf18      	it	ne
 800c462:	6059      	strne	r1, [r3, #4]
 800c464:	6863      	ldr	r3, [r4, #4]
 800c466:	bf08      	it	eq
 800c468:	f8c8 1000 	streq.w	r1, [r8]
 800c46c:	5162      	str	r2, [r4, r5]
 800c46e:	604b      	str	r3, [r1, #4]
 800c470:	4630      	mov	r0, r6
 800c472:	f000 f82f 	bl	800c4d4 <__malloc_unlock>
 800c476:	f104 000b 	add.w	r0, r4, #11
 800c47a:	1d23      	adds	r3, r4, #4
 800c47c:	f020 0007 	bic.w	r0, r0, #7
 800c480:	1ac2      	subs	r2, r0, r3
 800c482:	bf1c      	itt	ne
 800c484:	1a1b      	subne	r3, r3, r0
 800c486:	50a3      	strne	r3, [r4, r2]
 800c488:	e7af      	b.n	800c3ea <_malloc_r+0x22>
 800c48a:	6862      	ldr	r2, [r4, #4]
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	bf0c      	ite	eq
 800c490:	f8c8 2000 	streq.w	r2, [r8]
 800c494:	605a      	strne	r2, [r3, #4]
 800c496:	e7eb      	b.n	800c470 <_malloc_r+0xa8>
 800c498:	4623      	mov	r3, r4
 800c49a:	6864      	ldr	r4, [r4, #4]
 800c49c:	e7ae      	b.n	800c3fc <_malloc_r+0x34>
 800c49e:	463c      	mov	r4, r7
 800c4a0:	687f      	ldr	r7, [r7, #4]
 800c4a2:	e7b6      	b.n	800c412 <_malloc_r+0x4a>
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	42a3      	cmp	r3, r4
 800c4aa:	d1fb      	bne.n	800c4a4 <_malloc_r+0xdc>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	6053      	str	r3, [r2, #4]
 800c4b0:	e7de      	b.n	800c470 <_malloc_r+0xa8>
 800c4b2:	230c      	movs	r3, #12
 800c4b4:	6033      	str	r3, [r6, #0]
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f000 f80c 	bl	800c4d4 <__malloc_unlock>
 800c4bc:	e794      	b.n	800c3e8 <_malloc_r+0x20>
 800c4be:	6005      	str	r5, [r0, #0]
 800c4c0:	e7d6      	b.n	800c470 <_malloc_r+0xa8>
 800c4c2:	bf00      	nop
 800c4c4:	200030a0 	.word	0x200030a0

0800c4c8 <__malloc_lock>:
 800c4c8:	4801      	ldr	r0, [pc, #4]	@ (800c4d0 <__malloc_lock+0x8>)
 800c4ca:	f7ff b8a4 	b.w	800b616 <__retarget_lock_acquire_recursive>
 800c4ce:	bf00      	nop
 800c4d0:	20003098 	.word	0x20003098

0800c4d4 <__malloc_unlock>:
 800c4d4:	4801      	ldr	r0, [pc, #4]	@ (800c4dc <__malloc_unlock+0x8>)
 800c4d6:	f7ff b89f 	b.w	800b618 <__retarget_lock_release_recursive>
 800c4da:	bf00      	nop
 800c4dc:	20003098 	.word	0x20003098

0800c4e0 <_Balloc>:
 800c4e0:	b570      	push	{r4, r5, r6, lr}
 800c4e2:	69c6      	ldr	r6, [r0, #28]
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	460d      	mov	r5, r1
 800c4e8:	b976      	cbnz	r6, 800c508 <_Balloc+0x28>
 800c4ea:	2010      	movs	r0, #16
 800c4ec:	f7ff ff42 	bl	800c374 <malloc>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	61e0      	str	r0, [r4, #28]
 800c4f4:	b920      	cbnz	r0, 800c500 <_Balloc+0x20>
 800c4f6:	4b18      	ldr	r3, [pc, #96]	@ (800c558 <_Balloc+0x78>)
 800c4f8:	4818      	ldr	r0, [pc, #96]	@ (800c55c <_Balloc+0x7c>)
 800c4fa:	216b      	movs	r1, #107	@ 0x6b
 800c4fc:	f001 ff34 	bl	800e368 <__assert_func>
 800c500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c504:	6006      	str	r6, [r0, #0]
 800c506:	60c6      	str	r6, [r0, #12]
 800c508:	69e6      	ldr	r6, [r4, #28]
 800c50a:	68f3      	ldr	r3, [r6, #12]
 800c50c:	b183      	cbz	r3, 800c530 <_Balloc+0x50>
 800c50e:	69e3      	ldr	r3, [r4, #28]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c516:	b9b8      	cbnz	r0, 800c548 <_Balloc+0x68>
 800c518:	2101      	movs	r1, #1
 800c51a:	fa01 f605 	lsl.w	r6, r1, r5
 800c51e:	1d72      	adds	r2, r6, #5
 800c520:	0092      	lsls	r2, r2, #2
 800c522:	4620      	mov	r0, r4
 800c524:	f001 ff3e 	bl	800e3a4 <_calloc_r>
 800c528:	b160      	cbz	r0, 800c544 <_Balloc+0x64>
 800c52a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c52e:	e00e      	b.n	800c54e <_Balloc+0x6e>
 800c530:	2221      	movs	r2, #33	@ 0x21
 800c532:	2104      	movs	r1, #4
 800c534:	4620      	mov	r0, r4
 800c536:	f001 ff35 	bl	800e3a4 <_calloc_r>
 800c53a:	69e3      	ldr	r3, [r4, #28]
 800c53c:	60f0      	str	r0, [r6, #12]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d1e4      	bne.n	800c50e <_Balloc+0x2e>
 800c544:	2000      	movs	r0, #0
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	6802      	ldr	r2, [r0, #0]
 800c54a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c54e:	2300      	movs	r3, #0
 800c550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c554:	e7f7      	b.n	800c546 <_Balloc+0x66>
 800c556:	bf00      	nop
 800c558:	0800edfe 	.word	0x0800edfe
 800c55c:	0800ee7e 	.word	0x0800ee7e

0800c560 <_Bfree>:
 800c560:	b570      	push	{r4, r5, r6, lr}
 800c562:	69c6      	ldr	r6, [r0, #28]
 800c564:	4605      	mov	r5, r0
 800c566:	460c      	mov	r4, r1
 800c568:	b976      	cbnz	r6, 800c588 <_Bfree+0x28>
 800c56a:	2010      	movs	r0, #16
 800c56c:	f7ff ff02 	bl	800c374 <malloc>
 800c570:	4602      	mov	r2, r0
 800c572:	61e8      	str	r0, [r5, #28]
 800c574:	b920      	cbnz	r0, 800c580 <_Bfree+0x20>
 800c576:	4b09      	ldr	r3, [pc, #36]	@ (800c59c <_Bfree+0x3c>)
 800c578:	4809      	ldr	r0, [pc, #36]	@ (800c5a0 <_Bfree+0x40>)
 800c57a:	218f      	movs	r1, #143	@ 0x8f
 800c57c:	f001 fef4 	bl	800e368 <__assert_func>
 800c580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c584:	6006      	str	r6, [r0, #0]
 800c586:	60c6      	str	r6, [r0, #12]
 800c588:	b13c      	cbz	r4, 800c59a <_Bfree+0x3a>
 800c58a:	69eb      	ldr	r3, [r5, #28]
 800c58c:	6862      	ldr	r2, [r4, #4]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c594:	6021      	str	r1, [r4, #0]
 800c596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c59a:	bd70      	pop	{r4, r5, r6, pc}
 800c59c:	0800edfe 	.word	0x0800edfe
 800c5a0:	0800ee7e 	.word	0x0800ee7e

0800c5a4 <__multadd>:
 800c5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5a8:	690d      	ldr	r5, [r1, #16]
 800c5aa:	4607      	mov	r7, r0
 800c5ac:	460c      	mov	r4, r1
 800c5ae:	461e      	mov	r6, r3
 800c5b0:	f101 0c14 	add.w	ip, r1, #20
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	f8dc 3000 	ldr.w	r3, [ip]
 800c5ba:	b299      	uxth	r1, r3
 800c5bc:	fb02 6101 	mla	r1, r2, r1, r6
 800c5c0:	0c1e      	lsrs	r6, r3, #16
 800c5c2:	0c0b      	lsrs	r3, r1, #16
 800c5c4:	fb02 3306 	mla	r3, r2, r6, r3
 800c5c8:	b289      	uxth	r1, r1
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5d0:	4285      	cmp	r5, r0
 800c5d2:	f84c 1b04 	str.w	r1, [ip], #4
 800c5d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5da:	dcec      	bgt.n	800c5b6 <__multadd+0x12>
 800c5dc:	b30e      	cbz	r6, 800c622 <__multadd+0x7e>
 800c5de:	68a3      	ldr	r3, [r4, #8]
 800c5e0:	42ab      	cmp	r3, r5
 800c5e2:	dc19      	bgt.n	800c618 <__multadd+0x74>
 800c5e4:	6861      	ldr	r1, [r4, #4]
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	3101      	adds	r1, #1
 800c5ea:	f7ff ff79 	bl	800c4e0 <_Balloc>
 800c5ee:	4680      	mov	r8, r0
 800c5f0:	b928      	cbnz	r0, 800c5fe <__multadd+0x5a>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c628 <__multadd+0x84>)
 800c5f6:	480d      	ldr	r0, [pc, #52]	@ (800c62c <__multadd+0x88>)
 800c5f8:	21ba      	movs	r1, #186	@ 0xba
 800c5fa:	f001 feb5 	bl	800e368 <__assert_func>
 800c5fe:	6922      	ldr	r2, [r4, #16]
 800c600:	3202      	adds	r2, #2
 800c602:	f104 010c 	add.w	r1, r4, #12
 800c606:	0092      	lsls	r2, r2, #2
 800c608:	300c      	adds	r0, #12
 800c60a:	f7ff f806 	bl	800b61a <memcpy>
 800c60e:	4621      	mov	r1, r4
 800c610:	4638      	mov	r0, r7
 800c612:	f7ff ffa5 	bl	800c560 <_Bfree>
 800c616:	4644      	mov	r4, r8
 800c618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c61c:	3501      	adds	r5, #1
 800c61e:	615e      	str	r6, [r3, #20]
 800c620:	6125      	str	r5, [r4, #16]
 800c622:	4620      	mov	r0, r4
 800c624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c628:	0800ee6d 	.word	0x0800ee6d
 800c62c:	0800ee7e 	.word	0x0800ee7e

0800c630 <__s2b>:
 800c630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c634:	460c      	mov	r4, r1
 800c636:	4615      	mov	r5, r2
 800c638:	461f      	mov	r7, r3
 800c63a:	2209      	movs	r2, #9
 800c63c:	3308      	adds	r3, #8
 800c63e:	4606      	mov	r6, r0
 800c640:	fb93 f3f2 	sdiv	r3, r3, r2
 800c644:	2100      	movs	r1, #0
 800c646:	2201      	movs	r2, #1
 800c648:	429a      	cmp	r2, r3
 800c64a:	db09      	blt.n	800c660 <__s2b+0x30>
 800c64c:	4630      	mov	r0, r6
 800c64e:	f7ff ff47 	bl	800c4e0 <_Balloc>
 800c652:	b940      	cbnz	r0, 800c666 <__s2b+0x36>
 800c654:	4602      	mov	r2, r0
 800c656:	4b19      	ldr	r3, [pc, #100]	@ (800c6bc <__s2b+0x8c>)
 800c658:	4819      	ldr	r0, [pc, #100]	@ (800c6c0 <__s2b+0x90>)
 800c65a:	21d3      	movs	r1, #211	@ 0xd3
 800c65c:	f001 fe84 	bl	800e368 <__assert_func>
 800c660:	0052      	lsls	r2, r2, #1
 800c662:	3101      	adds	r1, #1
 800c664:	e7f0      	b.n	800c648 <__s2b+0x18>
 800c666:	9b08      	ldr	r3, [sp, #32]
 800c668:	6143      	str	r3, [r0, #20]
 800c66a:	2d09      	cmp	r5, #9
 800c66c:	f04f 0301 	mov.w	r3, #1
 800c670:	6103      	str	r3, [r0, #16]
 800c672:	dd16      	ble.n	800c6a2 <__s2b+0x72>
 800c674:	f104 0909 	add.w	r9, r4, #9
 800c678:	46c8      	mov	r8, r9
 800c67a:	442c      	add	r4, r5
 800c67c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c680:	4601      	mov	r1, r0
 800c682:	3b30      	subs	r3, #48	@ 0x30
 800c684:	220a      	movs	r2, #10
 800c686:	4630      	mov	r0, r6
 800c688:	f7ff ff8c 	bl	800c5a4 <__multadd>
 800c68c:	45a0      	cmp	r8, r4
 800c68e:	d1f5      	bne.n	800c67c <__s2b+0x4c>
 800c690:	f1a5 0408 	sub.w	r4, r5, #8
 800c694:	444c      	add	r4, r9
 800c696:	1b2d      	subs	r5, r5, r4
 800c698:	1963      	adds	r3, r4, r5
 800c69a:	42bb      	cmp	r3, r7
 800c69c:	db04      	blt.n	800c6a8 <__s2b+0x78>
 800c69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6a2:	340a      	adds	r4, #10
 800c6a4:	2509      	movs	r5, #9
 800c6a6:	e7f6      	b.n	800c696 <__s2b+0x66>
 800c6a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c6ac:	4601      	mov	r1, r0
 800c6ae:	3b30      	subs	r3, #48	@ 0x30
 800c6b0:	220a      	movs	r2, #10
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	f7ff ff76 	bl	800c5a4 <__multadd>
 800c6b8:	e7ee      	b.n	800c698 <__s2b+0x68>
 800c6ba:	bf00      	nop
 800c6bc:	0800ee6d 	.word	0x0800ee6d
 800c6c0:	0800ee7e 	.word	0x0800ee7e

0800c6c4 <__hi0bits>:
 800c6c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	bf36      	itet	cc
 800c6cc:	0403      	lslcc	r3, r0, #16
 800c6ce:	2000      	movcs	r0, #0
 800c6d0:	2010      	movcc	r0, #16
 800c6d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6d6:	bf3c      	itt	cc
 800c6d8:	021b      	lslcc	r3, r3, #8
 800c6da:	3008      	addcc	r0, #8
 800c6dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6e0:	bf3c      	itt	cc
 800c6e2:	011b      	lslcc	r3, r3, #4
 800c6e4:	3004      	addcc	r0, #4
 800c6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ea:	bf3c      	itt	cc
 800c6ec:	009b      	lslcc	r3, r3, #2
 800c6ee:	3002      	addcc	r0, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	db05      	blt.n	800c700 <__hi0bits+0x3c>
 800c6f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c6f8:	f100 0001 	add.w	r0, r0, #1
 800c6fc:	bf08      	it	eq
 800c6fe:	2020      	moveq	r0, #32
 800c700:	4770      	bx	lr

0800c702 <__lo0bits>:
 800c702:	6803      	ldr	r3, [r0, #0]
 800c704:	4602      	mov	r2, r0
 800c706:	f013 0007 	ands.w	r0, r3, #7
 800c70a:	d00b      	beq.n	800c724 <__lo0bits+0x22>
 800c70c:	07d9      	lsls	r1, r3, #31
 800c70e:	d421      	bmi.n	800c754 <__lo0bits+0x52>
 800c710:	0798      	lsls	r0, r3, #30
 800c712:	bf49      	itett	mi
 800c714:	085b      	lsrmi	r3, r3, #1
 800c716:	089b      	lsrpl	r3, r3, #2
 800c718:	2001      	movmi	r0, #1
 800c71a:	6013      	strmi	r3, [r2, #0]
 800c71c:	bf5c      	itt	pl
 800c71e:	6013      	strpl	r3, [r2, #0]
 800c720:	2002      	movpl	r0, #2
 800c722:	4770      	bx	lr
 800c724:	b299      	uxth	r1, r3
 800c726:	b909      	cbnz	r1, 800c72c <__lo0bits+0x2a>
 800c728:	0c1b      	lsrs	r3, r3, #16
 800c72a:	2010      	movs	r0, #16
 800c72c:	b2d9      	uxtb	r1, r3
 800c72e:	b909      	cbnz	r1, 800c734 <__lo0bits+0x32>
 800c730:	3008      	adds	r0, #8
 800c732:	0a1b      	lsrs	r3, r3, #8
 800c734:	0719      	lsls	r1, r3, #28
 800c736:	bf04      	itt	eq
 800c738:	091b      	lsreq	r3, r3, #4
 800c73a:	3004      	addeq	r0, #4
 800c73c:	0799      	lsls	r1, r3, #30
 800c73e:	bf04      	itt	eq
 800c740:	089b      	lsreq	r3, r3, #2
 800c742:	3002      	addeq	r0, #2
 800c744:	07d9      	lsls	r1, r3, #31
 800c746:	d403      	bmi.n	800c750 <__lo0bits+0x4e>
 800c748:	085b      	lsrs	r3, r3, #1
 800c74a:	f100 0001 	add.w	r0, r0, #1
 800c74e:	d003      	beq.n	800c758 <__lo0bits+0x56>
 800c750:	6013      	str	r3, [r2, #0]
 800c752:	4770      	bx	lr
 800c754:	2000      	movs	r0, #0
 800c756:	4770      	bx	lr
 800c758:	2020      	movs	r0, #32
 800c75a:	4770      	bx	lr

0800c75c <__i2b>:
 800c75c:	b510      	push	{r4, lr}
 800c75e:	460c      	mov	r4, r1
 800c760:	2101      	movs	r1, #1
 800c762:	f7ff febd 	bl	800c4e0 <_Balloc>
 800c766:	4602      	mov	r2, r0
 800c768:	b928      	cbnz	r0, 800c776 <__i2b+0x1a>
 800c76a:	4b05      	ldr	r3, [pc, #20]	@ (800c780 <__i2b+0x24>)
 800c76c:	4805      	ldr	r0, [pc, #20]	@ (800c784 <__i2b+0x28>)
 800c76e:	f240 1145 	movw	r1, #325	@ 0x145
 800c772:	f001 fdf9 	bl	800e368 <__assert_func>
 800c776:	2301      	movs	r3, #1
 800c778:	6144      	str	r4, [r0, #20]
 800c77a:	6103      	str	r3, [r0, #16]
 800c77c:	bd10      	pop	{r4, pc}
 800c77e:	bf00      	nop
 800c780:	0800ee6d 	.word	0x0800ee6d
 800c784:	0800ee7e 	.word	0x0800ee7e

0800c788 <__multiply>:
 800c788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78c:	4614      	mov	r4, r2
 800c78e:	690a      	ldr	r2, [r1, #16]
 800c790:	6923      	ldr	r3, [r4, #16]
 800c792:	429a      	cmp	r2, r3
 800c794:	bfa8      	it	ge
 800c796:	4623      	movge	r3, r4
 800c798:	460f      	mov	r7, r1
 800c79a:	bfa4      	itt	ge
 800c79c:	460c      	movge	r4, r1
 800c79e:	461f      	movge	r7, r3
 800c7a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c7a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c7a8:	68a3      	ldr	r3, [r4, #8]
 800c7aa:	6861      	ldr	r1, [r4, #4]
 800c7ac:	eb0a 0609 	add.w	r6, sl, r9
 800c7b0:	42b3      	cmp	r3, r6
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	bfb8      	it	lt
 800c7b6:	3101      	addlt	r1, #1
 800c7b8:	f7ff fe92 	bl	800c4e0 <_Balloc>
 800c7bc:	b930      	cbnz	r0, 800c7cc <__multiply+0x44>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	4b44      	ldr	r3, [pc, #272]	@ (800c8d4 <__multiply+0x14c>)
 800c7c2:	4845      	ldr	r0, [pc, #276]	@ (800c8d8 <__multiply+0x150>)
 800c7c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c7c8:	f001 fdce 	bl	800e368 <__assert_func>
 800c7cc:	f100 0514 	add.w	r5, r0, #20
 800c7d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7d4:	462b      	mov	r3, r5
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	4543      	cmp	r3, r8
 800c7da:	d321      	bcc.n	800c820 <__multiply+0x98>
 800c7dc:	f107 0114 	add.w	r1, r7, #20
 800c7e0:	f104 0214 	add.w	r2, r4, #20
 800c7e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c7e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c7ec:	9302      	str	r3, [sp, #8]
 800c7ee:	1b13      	subs	r3, r2, r4
 800c7f0:	3b15      	subs	r3, #21
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	f104 0715 	add.w	r7, r4, #21
 800c7fc:	42ba      	cmp	r2, r7
 800c7fe:	bf38      	it	cc
 800c800:	2304      	movcc	r3, #4
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	9b02      	ldr	r3, [sp, #8]
 800c806:	9103      	str	r1, [sp, #12]
 800c808:	428b      	cmp	r3, r1
 800c80a:	d80c      	bhi.n	800c826 <__multiply+0x9e>
 800c80c:	2e00      	cmp	r6, #0
 800c80e:	dd03      	ble.n	800c818 <__multiply+0x90>
 800c810:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c814:	2b00      	cmp	r3, #0
 800c816:	d05b      	beq.n	800c8d0 <__multiply+0x148>
 800c818:	6106      	str	r6, [r0, #16]
 800c81a:	b005      	add	sp, #20
 800c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c820:	f843 2b04 	str.w	r2, [r3], #4
 800c824:	e7d8      	b.n	800c7d8 <__multiply+0x50>
 800c826:	f8b1 a000 	ldrh.w	sl, [r1]
 800c82a:	f1ba 0f00 	cmp.w	sl, #0
 800c82e:	d024      	beq.n	800c87a <__multiply+0xf2>
 800c830:	f104 0e14 	add.w	lr, r4, #20
 800c834:	46a9      	mov	r9, r5
 800c836:	f04f 0c00 	mov.w	ip, #0
 800c83a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c83e:	f8d9 3000 	ldr.w	r3, [r9]
 800c842:	fa1f fb87 	uxth.w	fp, r7
 800c846:	b29b      	uxth	r3, r3
 800c848:	fb0a 330b 	mla	r3, sl, fp, r3
 800c84c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c850:	f8d9 7000 	ldr.w	r7, [r9]
 800c854:	4463      	add	r3, ip
 800c856:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c85a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c85e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c862:	b29b      	uxth	r3, r3
 800c864:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c868:	4572      	cmp	r2, lr
 800c86a:	f849 3b04 	str.w	r3, [r9], #4
 800c86e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c872:	d8e2      	bhi.n	800c83a <__multiply+0xb2>
 800c874:	9b01      	ldr	r3, [sp, #4]
 800c876:	f845 c003 	str.w	ip, [r5, r3]
 800c87a:	9b03      	ldr	r3, [sp, #12]
 800c87c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c880:	3104      	adds	r1, #4
 800c882:	f1b9 0f00 	cmp.w	r9, #0
 800c886:	d021      	beq.n	800c8cc <__multiply+0x144>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	f104 0c14 	add.w	ip, r4, #20
 800c88e:	46ae      	mov	lr, r5
 800c890:	f04f 0a00 	mov.w	sl, #0
 800c894:	f8bc b000 	ldrh.w	fp, [ip]
 800c898:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c89c:	fb09 770b 	mla	r7, r9, fp, r7
 800c8a0:	4457      	add	r7, sl
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8a8:	f84e 3b04 	str.w	r3, [lr], #4
 800c8ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8b4:	f8be 3000 	ldrh.w	r3, [lr]
 800c8b8:	fb09 330a 	mla	r3, r9, sl, r3
 800c8bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c8c0:	4562      	cmp	r2, ip
 800c8c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8c6:	d8e5      	bhi.n	800c894 <__multiply+0x10c>
 800c8c8:	9f01      	ldr	r7, [sp, #4]
 800c8ca:	51eb      	str	r3, [r5, r7]
 800c8cc:	3504      	adds	r5, #4
 800c8ce:	e799      	b.n	800c804 <__multiply+0x7c>
 800c8d0:	3e01      	subs	r6, #1
 800c8d2:	e79b      	b.n	800c80c <__multiply+0x84>
 800c8d4:	0800ee6d 	.word	0x0800ee6d
 800c8d8:	0800ee7e 	.word	0x0800ee7e

0800c8dc <__pow5mult>:
 800c8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8e0:	4615      	mov	r5, r2
 800c8e2:	f012 0203 	ands.w	r2, r2, #3
 800c8e6:	4607      	mov	r7, r0
 800c8e8:	460e      	mov	r6, r1
 800c8ea:	d007      	beq.n	800c8fc <__pow5mult+0x20>
 800c8ec:	4c25      	ldr	r4, [pc, #148]	@ (800c984 <__pow5mult+0xa8>)
 800c8ee:	3a01      	subs	r2, #1
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8f6:	f7ff fe55 	bl	800c5a4 <__multadd>
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	10ad      	asrs	r5, r5, #2
 800c8fe:	d03d      	beq.n	800c97c <__pow5mult+0xa0>
 800c900:	69fc      	ldr	r4, [r7, #28]
 800c902:	b97c      	cbnz	r4, 800c924 <__pow5mult+0x48>
 800c904:	2010      	movs	r0, #16
 800c906:	f7ff fd35 	bl	800c374 <malloc>
 800c90a:	4602      	mov	r2, r0
 800c90c:	61f8      	str	r0, [r7, #28]
 800c90e:	b928      	cbnz	r0, 800c91c <__pow5mult+0x40>
 800c910:	4b1d      	ldr	r3, [pc, #116]	@ (800c988 <__pow5mult+0xac>)
 800c912:	481e      	ldr	r0, [pc, #120]	@ (800c98c <__pow5mult+0xb0>)
 800c914:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c918:	f001 fd26 	bl	800e368 <__assert_func>
 800c91c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c920:	6004      	str	r4, [r0, #0]
 800c922:	60c4      	str	r4, [r0, #12]
 800c924:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c92c:	b94c      	cbnz	r4, 800c942 <__pow5mult+0x66>
 800c92e:	f240 2171 	movw	r1, #625	@ 0x271
 800c932:	4638      	mov	r0, r7
 800c934:	f7ff ff12 	bl	800c75c <__i2b>
 800c938:	2300      	movs	r3, #0
 800c93a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c93e:	4604      	mov	r4, r0
 800c940:	6003      	str	r3, [r0, #0]
 800c942:	f04f 0900 	mov.w	r9, #0
 800c946:	07eb      	lsls	r3, r5, #31
 800c948:	d50a      	bpl.n	800c960 <__pow5mult+0x84>
 800c94a:	4631      	mov	r1, r6
 800c94c:	4622      	mov	r2, r4
 800c94e:	4638      	mov	r0, r7
 800c950:	f7ff ff1a 	bl	800c788 <__multiply>
 800c954:	4631      	mov	r1, r6
 800c956:	4680      	mov	r8, r0
 800c958:	4638      	mov	r0, r7
 800c95a:	f7ff fe01 	bl	800c560 <_Bfree>
 800c95e:	4646      	mov	r6, r8
 800c960:	106d      	asrs	r5, r5, #1
 800c962:	d00b      	beq.n	800c97c <__pow5mult+0xa0>
 800c964:	6820      	ldr	r0, [r4, #0]
 800c966:	b938      	cbnz	r0, 800c978 <__pow5mult+0x9c>
 800c968:	4622      	mov	r2, r4
 800c96a:	4621      	mov	r1, r4
 800c96c:	4638      	mov	r0, r7
 800c96e:	f7ff ff0b 	bl	800c788 <__multiply>
 800c972:	6020      	str	r0, [r4, #0]
 800c974:	f8c0 9000 	str.w	r9, [r0]
 800c978:	4604      	mov	r4, r0
 800c97a:	e7e4      	b.n	800c946 <__pow5mult+0x6a>
 800c97c:	4630      	mov	r0, r6
 800c97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c982:	bf00      	nop
 800c984:	0800eed8 	.word	0x0800eed8
 800c988:	0800edfe 	.word	0x0800edfe
 800c98c:	0800ee7e 	.word	0x0800ee7e

0800c990 <__lshift>:
 800c990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c994:	460c      	mov	r4, r1
 800c996:	6849      	ldr	r1, [r1, #4]
 800c998:	6923      	ldr	r3, [r4, #16]
 800c99a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c99e:	68a3      	ldr	r3, [r4, #8]
 800c9a0:	4607      	mov	r7, r0
 800c9a2:	4691      	mov	r9, r2
 800c9a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9a8:	f108 0601 	add.w	r6, r8, #1
 800c9ac:	42b3      	cmp	r3, r6
 800c9ae:	db0b      	blt.n	800c9c8 <__lshift+0x38>
 800c9b0:	4638      	mov	r0, r7
 800c9b2:	f7ff fd95 	bl	800c4e0 <_Balloc>
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	b948      	cbnz	r0, 800c9ce <__lshift+0x3e>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	4b28      	ldr	r3, [pc, #160]	@ (800ca60 <__lshift+0xd0>)
 800c9be:	4829      	ldr	r0, [pc, #164]	@ (800ca64 <__lshift+0xd4>)
 800c9c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c9c4:	f001 fcd0 	bl	800e368 <__assert_func>
 800c9c8:	3101      	adds	r1, #1
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	e7ee      	b.n	800c9ac <__lshift+0x1c>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f100 0114 	add.w	r1, r0, #20
 800c9d4:	f100 0210 	add.w	r2, r0, #16
 800c9d8:	4618      	mov	r0, r3
 800c9da:	4553      	cmp	r3, sl
 800c9dc:	db33      	blt.n	800ca46 <__lshift+0xb6>
 800c9de:	6920      	ldr	r0, [r4, #16]
 800c9e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9e4:	f104 0314 	add.w	r3, r4, #20
 800c9e8:	f019 091f 	ands.w	r9, r9, #31
 800c9ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9f4:	d02b      	beq.n	800ca4e <__lshift+0xbe>
 800c9f6:	f1c9 0e20 	rsb	lr, r9, #32
 800c9fa:	468a      	mov	sl, r1
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	6818      	ldr	r0, [r3, #0]
 800ca00:	fa00 f009 	lsl.w	r0, r0, r9
 800ca04:	4310      	orrs	r0, r2
 800ca06:	f84a 0b04 	str.w	r0, [sl], #4
 800ca0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca0e:	459c      	cmp	ip, r3
 800ca10:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca14:	d8f3      	bhi.n	800c9fe <__lshift+0x6e>
 800ca16:	ebac 0304 	sub.w	r3, ip, r4
 800ca1a:	3b15      	subs	r3, #21
 800ca1c:	f023 0303 	bic.w	r3, r3, #3
 800ca20:	3304      	adds	r3, #4
 800ca22:	f104 0015 	add.w	r0, r4, #21
 800ca26:	4584      	cmp	ip, r0
 800ca28:	bf38      	it	cc
 800ca2a:	2304      	movcc	r3, #4
 800ca2c:	50ca      	str	r2, [r1, r3]
 800ca2e:	b10a      	cbz	r2, 800ca34 <__lshift+0xa4>
 800ca30:	f108 0602 	add.w	r6, r8, #2
 800ca34:	3e01      	subs	r6, #1
 800ca36:	4638      	mov	r0, r7
 800ca38:	612e      	str	r6, [r5, #16]
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	f7ff fd90 	bl	800c560 <_Bfree>
 800ca40:	4628      	mov	r0, r5
 800ca42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca46:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	e7c5      	b.n	800c9da <__lshift+0x4a>
 800ca4e:	3904      	subs	r1, #4
 800ca50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca54:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca58:	459c      	cmp	ip, r3
 800ca5a:	d8f9      	bhi.n	800ca50 <__lshift+0xc0>
 800ca5c:	e7ea      	b.n	800ca34 <__lshift+0xa4>
 800ca5e:	bf00      	nop
 800ca60:	0800ee6d 	.word	0x0800ee6d
 800ca64:	0800ee7e 	.word	0x0800ee7e

0800ca68 <__mcmp>:
 800ca68:	690a      	ldr	r2, [r1, #16]
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	6900      	ldr	r0, [r0, #16]
 800ca6e:	1a80      	subs	r0, r0, r2
 800ca70:	b530      	push	{r4, r5, lr}
 800ca72:	d10e      	bne.n	800ca92 <__mcmp+0x2a>
 800ca74:	3314      	adds	r3, #20
 800ca76:	3114      	adds	r1, #20
 800ca78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca88:	4295      	cmp	r5, r2
 800ca8a:	d003      	beq.n	800ca94 <__mcmp+0x2c>
 800ca8c:	d205      	bcs.n	800ca9a <__mcmp+0x32>
 800ca8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca92:	bd30      	pop	{r4, r5, pc}
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	d3f3      	bcc.n	800ca80 <__mcmp+0x18>
 800ca98:	e7fb      	b.n	800ca92 <__mcmp+0x2a>
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	e7f9      	b.n	800ca92 <__mcmp+0x2a>
	...

0800caa0 <__mdiff>:
 800caa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	4689      	mov	r9, r1
 800caa6:	4606      	mov	r6, r0
 800caa8:	4611      	mov	r1, r2
 800caaa:	4648      	mov	r0, r9
 800caac:	4614      	mov	r4, r2
 800caae:	f7ff ffdb 	bl	800ca68 <__mcmp>
 800cab2:	1e05      	subs	r5, r0, #0
 800cab4:	d112      	bne.n	800cadc <__mdiff+0x3c>
 800cab6:	4629      	mov	r1, r5
 800cab8:	4630      	mov	r0, r6
 800caba:	f7ff fd11 	bl	800c4e0 <_Balloc>
 800cabe:	4602      	mov	r2, r0
 800cac0:	b928      	cbnz	r0, 800cace <__mdiff+0x2e>
 800cac2:	4b3f      	ldr	r3, [pc, #252]	@ (800cbc0 <__mdiff+0x120>)
 800cac4:	f240 2137 	movw	r1, #567	@ 0x237
 800cac8:	483e      	ldr	r0, [pc, #248]	@ (800cbc4 <__mdiff+0x124>)
 800caca:	f001 fc4d 	bl	800e368 <__assert_func>
 800cace:	2301      	movs	r3, #1
 800cad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cad4:	4610      	mov	r0, r2
 800cad6:	b003      	add	sp, #12
 800cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cadc:	bfbc      	itt	lt
 800cade:	464b      	movlt	r3, r9
 800cae0:	46a1      	movlt	r9, r4
 800cae2:	4630      	mov	r0, r6
 800cae4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cae8:	bfba      	itte	lt
 800caea:	461c      	movlt	r4, r3
 800caec:	2501      	movlt	r5, #1
 800caee:	2500      	movge	r5, #0
 800caf0:	f7ff fcf6 	bl	800c4e0 <_Balloc>
 800caf4:	4602      	mov	r2, r0
 800caf6:	b918      	cbnz	r0, 800cb00 <__mdiff+0x60>
 800caf8:	4b31      	ldr	r3, [pc, #196]	@ (800cbc0 <__mdiff+0x120>)
 800cafa:	f240 2145 	movw	r1, #581	@ 0x245
 800cafe:	e7e3      	b.n	800cac8 <__mdiff+0x28>
 800cb00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb04:	6926      	ldr	r6, [r4, #16]
 800cb06:	60c5      	str	r5, [r0, #12]
 800cb08:	f109 0310 	add.w	r3, r9, #16
 800cb0c:	f109 0514 	add.w	r5, r9, #20
 800cb10:	f104 0e14 	add.w	lr, r4, #20
 800cb14:	f100 0b14 	add.w	fp, r0, #20
 800cb18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	46d9      	mov	r9, fp
 800cb24:	f04f 0c00 	mov.w	ip, #0
 800cb28:	9b01      	ldr	r3, [sp, #4]
 800cb2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb32:	9301      	str	r3, [sp, #4]
 800cb34:	fa1f f38a 	uxth.w	r3, sl
 800cb38:	4619      	mov	r1, r3
 800cb3a:	b283      	uxth	r3, r0
 800cb3c:	1acb      	subs	r3, r1, r3
 800cb3e:	0c00      	lsrs	r0, r0, #16
 800cb40:	4463      	add	r3, ip
 800cb42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb50:	4576      	cmp	r6, lr
 800cb52:	f849 3b04 	str.w	r3, [r9], #4
 800cb56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb5a:	d8e5      	bhi.n	800cb28 <__mdiff+0x88>
 800cb5c:	1b33      	subs	r3, r6, r4
 800cb5e:	3b15      	subs	r3, #21
 800cb60:	f023 0303 	bic.w	r3, r3, #3
 800cb64:	3415      	adds	r4, #21
 800cb66:	3304      	adds	r3, #4
 800cb68:	42a6      	cmp	r6, r4
 800cb6a:	bf38      	it	cc
 800cb6c:	2304      	movcc	r3, #4
 800cb6e:	441d      	add	r5, r3
 800cb70:	445b      	add	r3, fp
 800cb72:	461e      	mov	r6, r3
 800cb74:	462c      	mov	r4, r5
 800cb76:	4544      	cmp	r4, r8
 800cb78:	d30e      	bcc.n	800cb98 <__mdiff+0xf8>
 800cb7a:	f108 0103 	add.w	r1, r8, #3
 800cb7e:	1b49      	subs	r1, r1, r5
 800cb80:	f021 0103 	bic.w	r1, r1, #3
 800cb84:	3d03      	subs	r5, #3
 800cb86:	45a8      	cmp	r8, r5
 800cb88:	bf38      	it	cc
 800cb8a:	2100      	movcc	r1, #0
 800cb8c:	440b      	add	r3, r1
 800cb8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb92:	b191      	cbz	r1, 800cbba <__mdiff+0x11a>
 800cb94:	6117      	str	r7, [r2, #16]
 800cb96:	e79d      	b.n	800cad4 <__mdiff+0x34>
 800cb98:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb9c:	46e6      	mov	lr, ip
 800cb9e:	0c08      	lsrs	r0, r1, #16
 800cba0:	fa1c fc81 	uxtah	ip, ip, r1
 800cba4:	4471      	add	r1, lr
 800cba6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cbaa:	b289      	uxth	r1, r1
 800cbac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cbb0:	f846 1b04 	str.w	r1, [r6], #4
 800cbb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbb8:	e7dd      	b.n	800cb76 <__mdiff+0xd6>
 800cbba:	3f01      	subs	r7, #1
 800cbbc:	e7e7      	b.n	800cb8e <__mdiff+0xee>
 800cbbe:	bf00      	nop
 800cbc0:	0800ee6d 	.word	0x0800ee6d
 800cbc4:	0800ee7e 	.word	0x0800ee7e

0800cbc8 <__ulp>:
 800cbc8:	b082      	sub	sp, #8
 800cbca:	ed8d 0b00 	vstr	d0, [sp]
 800cbce:	9a01      	ldr	r2, [sp, #4]
 800cbd0:	4b0f      	ldr	r3, [pc, #60]	@ (800cc10 <__ulp+0x48>)
 800cbd2:	4013      	ands	r3, r2
 800cbd4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	dc08      	bgt.n	800cbee <__ulp+0x26>
 800cbdc:	425b      	negs	r3, r3
 800cbde:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cbe2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cbe6:	da04      	bge.n	800cbf2 <__ulp+0x2a>
 800cbe8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cbec:	4113      	asrs	r3, r2
 800cbee:	2200      	movs	r2, #0
 800cbf0:	e008      	b.n	800cc04 <__ulp+0x3c>
 800cbf2:	f1a2 0314 	sub.w	r3, r2, #20
 800cbf6:	2b1e      	cmp	r3, #30
 800cbf8:	bfda      	itte	le
 800cbfa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cbfe:	40da      	lsrle	r2, r3
 800cc00:	2201      	movgt	r2, #1
 800cc02:	2300      	movs	r3, #0
 800cc04:	4619      	mov	r1, r3
 800cc06:	4610      	mov	r0, r2
 800cc08:	ec41 0b10 	vmov	d0, r0, r1
 800cc0c:	b002      	add	sp, #8
 800cc0e:	4770      	bx	lr
 800cc10:	7ff00000 	.word	0x7ff00000

0800cc14 <__b2d>:
 800cc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc18:	6906      	ldr	r6, [r0, #16]
 800cc1a:	f100 0814 	add.w	r8, r0, #20
 800cc1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cc22:	1f37      	subs	r7, r6, #4
 800cc24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cc28:	4610      	mov	r0, r2
 800cc2a:	f7ff fd4b 	bl	800c6c4 <__hi0bits>
 800cc2e:	f1c0 0320 	rsb	r3, r0, #32
 800cc32:	280a      	cmp	r0, #10
 800cc34:	600b      	str	r3, [r1, #0]
 800cc36:	491b      	ldr	r1, [pc, #108]	@ (800cca4 <__b2d+0x90>)
 800cc38:	dc15      	bgt.n	800cc66 <__b2d+0x52>
 800cc3a:	f1c0 0c0b 	rsb	ip, r0, #11
 800cc3e:	fa22 f30c 	lsr.w	r3, r2, ip
 800cc42:	45b8      	cmp	r8, r7
 800cc44:	ea43 0501 	orr.w	r5, r3, r1
 800cc48:	bf34      	ite	cc
 800cc4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc4e:	2300      	movcs	r3, #0
 800cc50:	3015      	adds	r0, #21
 800cc52:	fa02 f000 	lsl.w	r0, r2, r0
 800cc56:	fa23 f30c 	lsr.w	r3, r3, ip
 800cc5a:	4303      	orrs	r3, r0
 800cc5c:	461c      	mov	r4, r3
 800cc5e:	ec45 4b10 	vmov	d0, r4, r5
 800cc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc66:	45b8      	cmp	r8, r7
 800cc68:	bf3a      	itte	cc
 800cc6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc6e:	f1a6 0708 	subcc.w	r7, r6, #8
 800cc72:	2300      	movcs	r3, #0
 800cc74:	380b      	subs	r0, #11
 800cc76:	d012      	beq.n	800cc9e <__b2d+0x8a>
 800cc78:	f1c0 0120 	rsb	r1, r0, #32
 800cc7c:	fa23 f401 	lsr.w	r4, r3, r1
 800cc80:	4082      	lsls	r2, r0
 800cc82:	4322      	orrs	r2, r4
 800cc84:	4547      	cmp	r7, r8
 800cc86:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cc8a:	bf8c      	ite	hi
 800cc8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cc90:	2200      	movls	r2, #0
 800cc92:	4083      	lsls	r3, r0
 800cc94:	40ca      	lsrs	r2, r1
 800cc96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	e7de      	b.n	800cc5c <__b2d+0x48>
 800cc9e:	ea42 0501 	orr.w	r5, r2, r1
 800cca2:	e7db      	b.n	800cc5c <__b2d+0x48>
 800cca4:	3ff00000 	.word	0x3ff00000

0800cca8 <__d2b>:
 800cca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccac:	460f      	mov	r7, r1
 800ccae:	2101      	movs	r1, #1
 800ccb0:	ec59 8b10 	vmov	r8, r9, d0
 800ccb4:	4616      	mov	r6, r2
 800ccb6:	f7ff fc13 	bl	800c4e0 <_Balloc>
 800ccba:	4604      	mov	r4, r0
 800ccbc:	b930      	cbnz	r0, 800cccc <__d2b+0x24>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	4b23      	ldr	r3, [pc, #140]	@ (800cd50 <__d2b+0xa8>)
 800ccc2:	4824      	ldr	r0, [pc, #144]	@ (800cd54 <__d2b+0xac>)
 800ccc4:	f240 310f 	movw	r1, #783	@ 0x30f
 800ccc8:	f001 fb4e 	bl	800e368 <__assert_func>
 800cccc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ccd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccd4:	b10d      	cbz	r5, 800ccda <__d2b+0x32>
 800ccd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccda:	9301      	str	r3, [sp, #4]
 800ccdc:	f1b8 0300 	subs.w	r3, r8, #0
 800cce0:	d023      	beq.n	800cd2a <__d2b+0x82>
 800cce2:	4668      	mov	r0, sp
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	f7ff fd0c 	bl	800c702 <__lo0bits>
 800ccea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ccee:	b1d0      	cbz	r0, 800cd26 <__d2b+0x7e>
 800ccf0:	f1c0 0320 	rsb	r3, r0, #32
 800ccf4:	fa02 f303 	lsl.w	r3, r2, r3
 800ccf8:	430b      	orrs	r3, r1
 800ccfa:	40c2      	lsrs	r2, r0
 800ccfc:	6163      	str	r3, [r4, #20]
 800ccfe:	9201      	str	r2, [sp, #4]
 800cd00:	9b01      	ldr	r3, [sp, #4]
 800cd02:	61a3      	str	r3, [r4, #24]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	bf0c      	ite	eq
 800cd08:	2201      	moveq	r2, #1
 800cd0a:	2202      	movne	r2, #2
 800cd0c:	6122      	str	r2, [r4, #16]
 800cd0e:	b1a5      	cbz	r5, 800cd3a <__d2b+0x92>
 800cd10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd14:	4405      	add	r5, r0
 800cd16:	603d      	str	r5, [r7, #0]
 800cd18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd1c:	6030      	str	r0, [r6, #0]
 800cd1e:	4620      	mov	r0, r4
 800cd20:	b003      	add	sp, #12
 800cd22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd26:	6161      	str	r1, [r4, #20]
 800cd28:	e7ea      	b.n	800cd00 <__d2b+0x58>
 800cd2a:	a801      	add	r0, sp, #4
 800cd2c:	f7ff fce9 	bl	800c702 <__lo0bits>
 800cd30:	9b01      	ldr	r3, [sp, #4]
 800cd32:	6163      	str	r3, [r4, #20]
 800cd34:	3020      	adds	r0, #32
 800cd36:	2201      	movs	r2, #1
 800cd38:	e7e8      	b.n	800cd0c <__d2b+0x64>
 800cd3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd42:	6038      	str	r0, [r7, #0]
 800cd44:	6918      	ldr	r0, [r3, #16]
 800cd46:	f7ff fcbd 	bl	800c6c4 <__hi0bits>
 800cd4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd4e:	e7e5      	b.n	800cd1c <__d2b+0x74>
 800cd50:	0800ee6d 	.word	0x0800ee6d
 800cd54:	0800ee7e 	.word	0x0800ee7e

0800cd58 <__ratio>:
 800cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	b085      	sub	sp, #20
 800cd5e:	e9cd 1000 	strd	r1, r0, [sp]
 800cd62:	a902      	add	r1, sp, #8
 800cd64:	f7ff ff56 	bl	800cc14 <__b2d>
 800cd68:	9800      	ldr	r0, [sp, #0]
 800cd6a:	a903      	add	r1, sp, #12
 800cd6c:	ec55 4b10 	vmov	r4, r5, d0
 800cd70:	f7ff ff50 	bl	800cc14 <__b2d>
 800cd74:	9b01      	ldr	r3, [sp, #4]
 800cd76:	6919      	ldr	r1, [r3, #16]
 800cd78:	9b00      	ldr	r3, [sp, #0]
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	1ac9      	subs	r1, r1, r3
 800cd7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cd82:	1a9b      	subs	r3, r3, r2
 800cd84:	ec5b ab10 	vmov	sl, fp, d0
 800cd88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	bfce      	itee	gt
 800cd90:	462a      	movgt	r2, r5
 800cd92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd96:	465a      	movle	r2, fp
 800cd98:	462f      	mov	r7, r5
 800cd9a:	46d9      	mov	r9, fp
 800cd9c:	bfcc      	ite	gt
 800cd9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cda2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cda6:	464b      	mov	r3, r9
 800cda8:	4652      	mov	r2, sl
 800cdaa:	4620      	mov	r0, r4
 800cdac:	4639      	mov	r1, r7
 800cdae:	f7f3 fd75 	bl	800089c <__aeabi_ddiv>
 800cdb2:	ec41 0b10 	vmov	d0, r0, r1
 800cdb6:	b005      	add	sp, #20
 800cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cdbc <__copybits>:
 800cdbc:	3901      	subs	r1, #1
 800cdbe:	b570      	push	{r4, r5, r6, lr}
 800cdc0:	1149      	asrs	r1, r1, #5
 800cdc2:	6914      	ldr	r4, [r2, #16]
 800cdc4:	3101      	adds	r1, #1
 800cdc6:	f102 0314 	add.w	r3, r2, #20
 800cdca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cdce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cdd2:	1f05      	subs	r5, r0, #4
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	d30c      	bcc.n	800cdf2 <__copybits+0x36>
 800cdd8:	1aa3      	subs	r3, r4, r2
 800cdda:	3b11      	subs	r3, #17
 800cddc:	f023 0303 	bic.w	r3, r3, #3
 800cde0:	3211      	adds	r2, #17
 800cde2:	42a2      	cmp	r2, r4
 800cde4:	bf88      	it	hi
 800cde6:	2300      	movhi	r3, #0
 800cde8:	4418      	add	r0, r3
 800cdea:	2300      	movs	r3, #0
 800cdec:	4288      	cmp	r0, r1
 800cdee:	d305      	bcc.n	800cdfc <__copybits+0x40>
 800cdf0:	bd70      	pop	{r4, r5, r6, pc}
 800cdf2:	f853 6b04 	ldr.w	r6, [r3], #4
 800cdf6:	f845 6f04 	str.w	r6, [r5, #4]!
 800cdfa:	e7eb      	b.n	800cdd4 <__copybits+0x18>
 800cdfc:	f840 3b04 	str.w	r3, [r0], #4
 800ce00:	e7f4      	b.n	800cdec <__copybits+0x30>

0800ce02 <__any_on>:
 800ce02:	f100 0214 	add.w	r2, r0, #20
 800ce06:	6900      	ldr	r0, [r0, #16]
 800ce08:	114b      	asrs	r3, r1, #5
 800ce0a:	4298      	cmp	r0, r3
 800ce0c:	b510      	push	{r4, lr}
 800ce0e:	db11      	blt.n	800ce34 <__any_on+0x32>
 800ce10:	dd0a      	ble.n	800ce28 <__any_on+0x26>
 800ce12:	f011 011f 	ands.w	r1, r1, #31
 800ce16:	d007      	beq.n	800ce28 <__any_on+0x26>
 800ce18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce1c:	fa24 f001 	lsr.w	r0, r4, r1
 800ce20:	fa00 f101 	lsl.w	r1, r0, r1
 800ce24:	428c      	cmp	r4, r1
 800ce26:	d10b      	bne.n	800ce40 <__any_on+0x3e>
 800ce28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d803      	bhi.n	800ce38 <__any_on+0x36>
 800ce30:	2000      	movs	r0, #0
 800ce32:	bd10      	pop	{r4, pc}
 800ce34:	4603      	mov	r3, r0
 800ce36:	e7f7      	b.n	800ce28 <__any_on+0x26>
 800ce38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce3c:	2900      	cmp	r1, #0
 800ce3e:	d0f5      	beq.n	800ce2c <__any_on+0x2a>
 800ce40:	2001      	movs	r0, #1
 800ce42:	e7f6      	b.n	800ce32 <__any_on+0x30>

0800ce44 <sulp>:
 800ce44:	b570      	push	{r4, r5, r6, lr}
 800ce46:	4604      	mov	r4, r0
 800ce48:	460d      	mov	r5, r1
 800ce4a:	ec45 4b10 	vmov	d0, r4, r5
 800ce4e:	4616      	mov	r6, r2
 800ce50:	f7ff feba 	bl	800cbc8 <__ulp>
 800ce54:	ec51 0b10 	vmov	r0, r1, d0
 800ce58:	b17e      	cbz	r6, 800ce7a <sulp+0x36>
 800ce5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ce5e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	dd09      	ble.n	800ce7a <sulp+0x36>
 800ce66:	051b      	lsls	r3, r3, #20
 800ce68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ce6c:	2400      	movs	r4, #0
 800ce6e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ce72:	4622      	mov	r2, r4
 800ce74:	462b      	mov	r3, r5
 800ce76:	f7f3 fbe7 	bl	8000648 <__aeabi_dmul>
 800ce7a:	ec41 0b10 	vmov	d0, r0, r1
 800ce7e:	bd70      	pop	{r4, r5, r6, pc}

0800ce80 <_strtod_l>:
 800ce80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce84:	b09f      	sub	sp, #124	@ 0x7c
 800ce86:	460c      	mov	r4, r1
 800ce88:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ce8e:	9005      	str	r0, [sp, #20]
 800ce90:	f04f 0a00 	mov.w	sl, #0
 800ce94:	f04f 0b00 	mov.w	fp, #0
 800ce98:	460a      	mov	r2, r1
 800ce9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce9c:	7811      	ldrb	r1, [r2, #0]
 800ce9e:	292b      	cmp	r1, #43	@ 0x2b
 800cea0:	d04a      	beq.n	800cf38 <_strtod_l+0xb8>
 800cea2:	d838      	bhi.n	800cf16 <_strtod_l+0x96>
 800cea4:	290d      	cmp	r1, #13
 800cea6:	d832      	bhi.n	800cf0e <_strtod_l+0x8e>
 800cea8:	2908      	cmp	r1, #8
 800ceaa:	d832      	bhi.n	800cf12 <_strtod_l+0x92>
 800ceac:	2900      	cmp	r1, #0
 800ceae:	d03b      	beq.n	800cf28 <_strtod_l+0xa8>
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ceb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ceb6:	782a      	ldrb	r2, [r5, #0]
 800ceb8:	2a30      	cmp	r2, #48	@ 0x30
 800ceba:	f040 80b3 	bne.w	800d024 <_strtod_l+0x1a4>
 800cebe:	786a      	ldrb	r2, [r5, #1]
 800cec0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cec4:	2a58      	cmp	r2, #88	@ 0x58
 800cec6:	d16e      	bne.n	800cfa6 <_strtod_l+0x126>
 800cec8:	9302      	str	r3, [sp, #8]
 800ceca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cecc:	9301      	str	r3, [sp, #4]
 800cece:	ab1a      	add	r3, sp, #104	@ 0x68
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	4a8e      	ldr	r2, [pc, #568]	@ (800d10c <_strtod_l+0x28c>)
 800ced4:	9805      	ldr	r0, [sp, #20]
 800ced6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ced8:	a919      	add	r1, sp, #100	@ 0x64
 800ceda:	f001 fadf 	bl	800e49c <__gethex>
 800cede:	f010 060f 	ands.w	r6, r0, #15
 800cee2:	4604      	mov	r4, r0
 800cee4:	d005      	beq.n	800cef2 <_strtod_l+0x72>
 800cee6:	2e06      	cmp	r6, #6
 800cee8:	d128      	bne.n	800cf3c <_strtod_l+0xbc>
 800ceea:	3501      	adds	r5, #1
 800ceec:	2300      	movs	r3, #0
 800ceee:	9519      	str	r5, [sp, #100]	@ 0x64
 800cef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cef2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f040 858e 	bne.w	800da16 <_strtod_l+0xb96>
 800cefa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cefc:	b1cb      	cbz	r3, 800cf32 <_strtod_l+0xb2>
 800cefe:	4652      	mov	r2, sl
 800cf00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cf04:	ec43 2b10 	vmov	d0, r2, r3
 800cf08:	b01f      	add	sp, #124	@ 0x7c
 800cf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf0e:	2920      	cmp	r1, #32
 800cf10:	d1ce      	bne.n	800ceb0 <_strtod_l+0x30>
 800cf12:	3201      	adds	r2, #1
 800cf14:	e7c1      	b.n	800ce9a <_strtod_l+0x1a>
 800cf16:	292d      	cmp	r1, #45	@ 0x2d
 800cf18:	d1ca      	bne.n	800ceb0 <_strtod_l+0x30>
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cf1e:	1c51      	adds	r1, r2, #1
 800cf20:	9119      	str	r1, [sp, #100]	@ 0x64
 800cf22:	7852      	ldrb	r2, [r2, #1]
 800cf24:	2a00      	cmp	r2, #0
 800cf26:	d1c5      	bne.n	800ceb4 <_strtod_l+0x34>
 800cf28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f040 8570 	bne.w	800da12 <_strtod_l+0xb92>
 800cf32:	4652      	mov	r2, sl
 800cf34:	465b      	mov	r3, fp
 800cf36:	e7e5      	b.n	800cf04 <_strtod_l+0x84>
 800cf38:	2100      	movs	r1, #0
 800cf3a:	e7ef      	b.n	800cf1c <_strtod_l+0x9c>
 800cf3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf3e:	b13a      	cbz	r2, 800cf50 <_strtod_l+0xd0>
 800cf40:	2135      	movs	r1, #53	@ 0x35
 800cf42:	a81c      	add	r0, sp, #112	@ 0x70
 800cf44:	f7ff ff3a 	bl	800cdbc <__copybits>
 800cf48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf4a:	9805      	ldr	r0, [sp, #20]
 800cf4c:	f7ff fb08 	bl	800c560 <_Bfree>
 800cf50:	3e01      	subs	r6, #1
 800cf52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cf54:	2e04      	cmp	r6, #4
 800cf56:	d806      	bhi.n	800cf66 <_strtod_l+0xe6>
 800cf58:	e8df f006 	tbb	[pc, r6]
 800cf5c:	201d0314 	.word	0x201d0314
 800cf60:	14          	.byte	0x14
 800cf61:	00          	.byte	0x00
 800cf62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cf66:	05e1      	lsls	r1, r4, #23
 800cf68:	bf48      	it	mi
 800cf6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cf6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf72:	0d1b      	lsrs	r3, r3, #20
 800cf74:	051b      	lsls	r3, r3, #20
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1bb      	bne.n	800cef2 <_strtod_l+0x72>
 800cf7a:	f7fe fb21 	bl	800b5c0 <__errno>
 800cf7e:	2322      	movs	r3, #34	@ 0x22
 800cf80:	6003      	str	r3, [r0, #0]
 800cf82:	e7b6      	b.n	800cef2 <_strtod_l+0x72>
 800cf84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cf88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cf8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cf90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cf94:	e7e7      	b.n	800cf66 <_strtod_l+0xe6>
 800cf96:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d114 <_strtod_l+0x294>
 800cf9a:	e7e4      	b.n	800cf66 <_strtod_l+0xe6>
 800cf9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cfa0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800cfa4:	e7df      	b.n	800cf66 <_strtod_l+0xe6>
 800cfa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfa8:	1c5a      	adds	r2, r3, #1
 800cfaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800cfac:	785b      	ldrb	r3, [r3, #1]
 800cfae:	2b30      	cmp	r3, #48	@ 0x30
 800cfb0:	d0f9      	beq.n	800cfa6 <_strtod_l+0x126>
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d09d      	beq.n	800cef2 <_strtod_l+0x72>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfbc:	930c      	str	r3, [sp, #48]	@ 0x30
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	9308      	str	r3, [sp, #32]
 800cfc2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfc4:	461f      	mov	r7, r3
 800cfc6:	220a      	movs	r2, #10
 800cfc8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cfca:	7805      	ldrb	r5, [r0, #0]
 800cfcc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cfd0:	b2d9      	uxtb	r1, r3
 800cfd2:	2909      	cmp	r1, #9
 800cfd4:	d928      	bls.n	800d028 <_strtod_l+0x1a8>
 800cfd6:	494e      	ldr	r1, [pc, #312]	@ (800d110 <_strtod_l+0x290>)
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f001 f979 	bl	800e2d0 <strncmp>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d032      	beq.n	800d048 <_strtod_l+0x1c8>
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	462a      	mov	r2, r5
 800cfe6:	4681      	mov	r9, r0
 800cfe8:	463d      	mov	r5, r7
 800cfea:	4603      	mov	r3, r0
 800cfec:	2a65      	cmp	r2, #101	@ 0x65
 800cfee:	d001      	beq.n	800cff4 <_strtod_l+0x174>
 800cff0:	2a45      	cmp	r2, #69	@ 0x45
 800cff2:	d114      	bne.n	800d01e <_strtod_l+0x19e>
 800cff4:	b91d      	cbnz	r5, 800cffe <_strtod_l+0x17e>
 800cff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cff8:	4302      	orrs	r2, r0
 800cffa:	d095      	beq.n	800cf28 <_strtod_l+0xa8>
 800cffc:	2500      	movs	r5, #0
 800cffe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d000:	1c62      	adds	r2, r4, #1
 800d002:	9219      	str	r2, [sp, #100]	@ 0x64
 800d004:	7862      	ldrb	r2, [r4, #1]
 800d006:	2a2b      	cmp	r2, #43	@ 0x2b
 800d008:	d077      	beq.n	800d0fa <_strtod_l+0x27a>
 800d00a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d00c:	d07b      	beq.n	800d106 <_strtod_l+0x286>
 800d00e:	f04f 0c00 	mov.w	ip, #0
 800d012:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d016:	2909      	cmp	r1, #9
 800d018:	f240 8082 	bls.w	800d120 <_strtod_l+0x2a0>
 800d01c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d01e:	f04f 0800 	mov.w	r8, #0
 800d022:	e0a2      	b.n	800d16a <_strtod_l+0x2ea>
 800d024:	2300      	movs	r3, #0
 800d026:	e7c7      	b.n	800cfb8 <_strtod_l+0x138>
 800d028:	2f08      	cmp	r7, #8
 800d02a:	bfd5      	itete	le
 800d02c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d02e:	9908      	ldrgt	r1, [sp, #32]
 800d030:	fb02 3301 	mlale	r3, r2, r1, r3
 800d034:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d038:	f100 0001 	add.w	r0, r0, #1
 800d03c:	bfd4      	ite	le
 800d03e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d040:	9308      	strgt	r3, [sp, #32]
 800d042:	3701      	adds	r7, #1
 800d044:	9019      	str	r0, [sp, #100]	@ 0x64
 800d046:	e7bf      	b.n	800cfc8 <_strtod_l+0x148>
 800d048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d04a:	1c5a      	adds	r2, r3, #1
 800d04c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d04e:	785a      	ldrb	r2, [r3, #1]
 800d050:	b37f      	cbz	r7, 800d0b2 <_strtod_l+0x232>
 800d052:	4681      	mov	r9, r0
 800d054:	463d      	mov	r5, r7
 800d056:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d05a:	2b09      	cmp	r3, #9
 800d05c:	d912      	bls.n	800d084 <_strtod_l+0x204>
 800d05e:	2301      	movs	r3, #1
 800d060:	e7c4      	b.n	800cfec <_strtod_l+0x16c>
 800d062:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d064:	1c5a      	adds	r2, r3, #1
 800d066:	9219      	str	r2, [sp, #100]	@ 0x64
 800d068:	785a      	ldrb	r2, [r3, #1]
 800d06a:	3001      	adds	r0, #1
 800d06c:	2a30      	cmp	r2, #48	@ 0x30
 800d06e:	d0f8      	beq.n	800d062 <_strtod_l+0x1e2>
 800d070:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d074:	2b08      	cmp	r3, #8
 800d076:	f200 84d3 	bhi.w	800da20 <_strtod_l+0xba0>
 800d07a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d07c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d07e:	4681      	mov	r9, r0
 800d080:	2000      	movs	r0, #0
 800d082:	4605      	mov	r5, r0
 800d084:	3a30      	subs	r2, #48	@ 0x30
 800d086:	f100 0301 	add.w	r3, r0, #1
 800d08a:	d02a      	beq.n	800d0e2 <_strtod_l+0x262>
 800d08c:	4499      	add	r9, r3
 800d08e:	eb00 0c05 	add.w	ip, r0, r5
 800d092:	462b      	mov	r3, r5
 800d094:	210a      	movs	r1, #10
 800d096:	4563      	cmp	r3, ip
 800d098:	d10d      	bne.n	800d0b6 <_strtod_l+0x236>
 800d09a:	1c69      	adds	r1, r5, #1
 800d09c:	4401      	add	r1, r0
 800d09e:	4428      	add	r0, r5
 800d0a0:	2808      	cmp	r0, #8
 800d0a2:	dc16      	bgt.n	800d0d2 <_strtod_l+0x252>
 800d0a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d0a6:	230a      	movs	r3, #10
 800d0a8:	fb03 2300 	mla	r3, r3, r0, r2
 800d0ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e018      	b.n	800d0e4 <_strtod_l+0x264>
 800d0b2:	4638      	mov	r0, r7
 800d0b4:	e7da      	b.n	800d06c <_strtod_l+0x1ec>
 800d0b6:	2b08      	cmp	r3, #8
 800d0b8:	f103 0301 	add.w	r3, r3, #1
 800d0bc:	dc03      	bgt.n	800d0c6 <_strtod_l+0x246>
 800d0be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d0c0:	434e      	muls	r6, r1
 800d0c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800d0c4:	e7e7      	b.n	800d096 <_strtod_l+0x216>
 800d0c6:	2b10      	cmp	r3, #16
 800d0c8:	bfde      	ittt	le
 800d0ca:	9e08      	ldrle	r6, [sp, #32]
 800d0cc:	434e      	mulle	r6, r1
 800d0ce:	9608      	strle	r6, [sp, #32]
 800d0d0:	e7e1      	b.n	800d096 <_strtod_l+0x216>
 800d0d2:	280f      	cmp	r0, #15
 800d0d4:	dceb      	bgt.n	800d0ae <_strtod_l+0x22e>
 800d0d6:	9808      	ldr	r0, [sp, #32]
 800d0d8:	230a      	movs	r3, #10
 800d0da:	fb03 2300 	mla	r3, r3, r0, r2
 800d0de:	9308      	str	r3, [sp, #32]
 800d0e0:	e7e5      	b.n	800d0ae <_strtod_l+0x22e>
 800d0e2:	4629      	mov	r1, r5
 800d0e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d0e6:	1c50      	adds	r0, r2, #1
 800d0e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800d0ea:	7852      	ldrb	r2, [r2, #1]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	460d      	mov	r5, r1
 800d0f0:	e7b1      	b.n	800d056 <_strtod_l+0x1d6>
 800d0f2:	f04f 0900 	mov.w	r9, #0
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e77d      	b.n	800cff6 <_strtod_l+0x176>
 800d0fa:	f04f 0c00 	mov.w	ip, #0
 800d0fe:	1ca2      	adds	r2, r4, #2
 800d100:	9219      	str	r2, [sp, #100]	@ 0x64
 800d102:	78a2      	ldrb	r2, [r4, #2]
 800d104:	e785      	b.n	800d012 <_strtod_l+0x192>
 800d106:	f04f 0c01 	mov.w	ip, #1
 800d10a:	e7f8      	b.n	800d0fe <_strtod_l+0x27e>
 800d10c:	0800eff0 	.word	0x0800eff0
 800d110:	0800efd8 	.word	0x0800efd8
 800d114:	7ff00000 	.word	0x7ff00000
 800d118:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d11a:	1c51      	adds	r1, r2, #1
 800d11c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d11e:	7852      	ldrb	r2, [r2, #1]
 800d120:	2a30      	cmp	r2, #48	@ 0x30
 800d122:	d0f9      	beq.n	800d118 <_strtod_l+0x298>
 800d124:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d128:	2908      	cmp	r1, #8
 800d12a:	f63f af78 	bhi.w	800d01e <_strtod_l+0x19e>
 800d12e:	3a30      	subs	r2, #48	@ 0x30
 800d130:	920e      	str	r2, [sp, #56]	@ 0x38
 800d132:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d134:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d136:	f04f 080a 	mov.w	r8, #10
 800d13a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d13c:	1c56      	adds	r6, r2, #1
 800d13e:	9619      	str	r6, [sp, #100]	@ 0x64
 800d140:	7852      	ldrb	r2, [r2, #1]
 800d142:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d146:	f1be 0f09 	cmp.w	lr, #9
 800d14a:	d939      	bls.n	800d1c0 <_strtod_l+0x340>
 800d14c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d14e:	1a76      	subs	r6, r6, r1
 800d150:	2e08      	cmp	r6, #8
 800d152:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d156:	dc03      	bgt.n	800d160 <_strtod_l+0x2e0>
 800d158:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d15a:	4588      	cmp	r8, r1
 800d15c:	bfa8      	it	ge
 800d15e:	4688      	movge	r8, r1
 800d160:	f1bc 0f00 	cmp.w	ip, #0
 800d164:	d001      	beq.n	800d16a <_strtod_l+0x2ea>
 800d166:	f1c8 0800 	rsb	r8, r8, #0
 800d16a:	2d00      	cmp	r5, #0
 800d16c:	d14e      	bne.n	800d20c <_strtod_l+0x38c>
 800d16e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d170:	4308      	orrs	r0, r1
 800d172:	f47f aebe 	bne.w	800cef2 <_strtod_l+0x72>
 800d176:	2b00      	cmp	r3, #0
 800d178:	f47f aed6 	bne.w	800cf28 <_strtod_l+0xa8>
 800d17c:	2a69      	cmp	r2, #105	@ 0x69
 800d17e:	d028      	beq.n	800d1d2 <_strtod_l+0x352>
 800d180:	dc25      	bgt.n	800d1ce <_strtod_l+0x34e>
 800d182:	2a49      	cmp	r2, #73	@ 0x49
 800d184:	d025      	beq.n	800d1d2 <_strtod_l+0x352>
 800d186:	2a4e      	cmp	r2, #78	@ 0x4e
 800d188:	f47f aece 	bne.w	800cf28 <_strtod_l+0xa8>
 800d18c:	499b      	ldr	r1, [pc, #620]	@ (800d3fc <_strtod_l+0x57c>)
 800d18e:	a819      	add	r0, sp, #100	@ 0x64
 800d190:	f001 fba6 	bl	800e8e0 <__match>
 800d194:	2800      	cmp	r0, #0
 800d196:	f43f aec7 	beq.w	800cf28 <_strtod_l+0xa8>
 800d19a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	2b28      	cmp	r3, #40	@ 0x28
 800d1a0:	d12e      	bne.n	800d200 <_strtod_l+0x380>
 800d1a2:	4997      	ldr	r1, [pc, #604]	@ (800d400 <_strtod_l+0x580>)
 800d1a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800d1a6:	a819      	add	r0, sp, #100	@ 0x64
 800d1a8:	f001 fbae 	bl	800e908 <__hexnan>
 800d1ac:	2805      	cmp	r0, #5
 800d1ae:	d127      	bne.n	800d200 <_strtod_l+0x380>
 800d1b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d1b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d1b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d1ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d1be:	e698      	b.n	800cef2 <_strtod_l+0x72>
 800d1c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d1c2:	fb08 2101 	mla	r1, r8, r1, r2
 800d1c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d1ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1cc:	e7b5      	b.n	800d13a <_strtod_l+0x2ba>
 800d1ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800d1d0:	e7da      	b.n	800d188 <_strtod_l+0x308>
 800d1d2:	498c      	ldr	r1, [pc, #560]	@ (800d404 <_strtod_l+0x584>)
 800d1d4:	a819      	add	r0, sp, #100	@ 0x64
 800d1d6:	f001 fb83 	bl	800e8e0 <__match>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	f43f aea4 	beq.w	800cf28 <_strtod_l+0xa8>
 800d1e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1e2:	4989      	ldr	r1, [pc, #548]	@ (800d408 <_strtod_l+0x588>)
 800d1e4:	3b01      	subs	r3, #1
 800d1e6:	a819      	add	r0, sp, #100	@ 0x64
 800d1e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d1ea:	f001 fb79 	bl	800e8e0 <__match>
 800d1ee:	b910      	cbnz	r0, 800d1f6 <_strtod_l+0x376>
 800d1f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d1f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d418 <_strtod_l+0x598>
 800d1fa:	f04f 0a00 	mov.w	sl, #0
 800d1fe:	e678      	b.n	800cef2 <_strtod_l+0x72>
 800d200:	4882      	ldr	r0, [pc, #520]	@ (800d40c <_strtod_l+0x58c>)
 800d202:	f001 f8a9 	bl	800e358 <nan>
 800d206:	ec5b ab10 	vmov	sl, fp, d0
 800d20a:	e672      	b.n	800cef2 <_strtod_l+0x72>
 800d20c:	eba8 0309 	sub.w	r3, r8, r9
 800d210:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d212:	9309      	str	r3, [sp, #36]	@ 0x24
 800d214:	2f00      	cmp	r7, #0
 800d216:	bf08      	it	eq
 800d218:	462f      	moveq	r7, r5
 800d21a:	2d10      	cmp	r5, #16
 800d21c:	462c      	mov	r4, r5
 800d21e:	bfa8      	it	ge
 800d220:	2410      	movge	r4, #16
 800d222:	f7f3 f997 	bl	8000554 <__aeabi_ui2d>
 800d226:	2d09      	cmp	r5, #9
 800d228:	4682      	mov	sl, r0
 800d22a:	468b      	mov	fp, r1
 800d22c:	dc13      	bgt.n	800d256 <_strtod_l+0x3d6>
 800d22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d230:	2b00      	cmp	r3, #0
 800d232:	f43f ae5e 	beq.w	800cef2 <_strtod_l+0x72>
 800d236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d238:	dd78      	ble.n	800d32c <_strtod_l+0x4ac>
 800d23a:	2b16      	cmp	r3, #22
 800d23c:	dc5f      	bgt.n	800d2fe <_strtod_l+0x47e>
 800d23e:	4974      	ldr	r1, [pc, #464]	@ (800d410 <_strtod_l+0x590>)
 800d240:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d244:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d248:	4652      	mov	r2, sl
 800d24a:	465b      	mov	r3, fp
 800d24c:	f7f3 f9fc 	bl	8000648 <__aeabi_dmul>
 800d250:	4682      	mov	sl, r0
 800d252:	468b      	mov	fp, r1
 800d254:	e64d      	b.n	800cef2 <_strtod_l+0x72>
 800d256:	4b6e      	ldr	r3, [pc, #440]	@ (800d410 <_strtod_l+0x590>)
 800d258:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d25c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d260:	f7f3 f9f2 	bl	8000648 <__aeabi_dmul>
 800d264:	4682      	mov	sl, r0
 800d266:	9808      	ldr	r0, [sp, #32]
 800d268:	468b      	mov	fp, r1
 800d26a:	f7f3 f973 	bl	8000554 <__aeabi_ui2d>
 800d26e:	4602      	mov	r2, r0
 800d270:	460b      	mov	r3, r1
 800d272:	4650      	mov	r0, sl
 800d274:	4659      	mov	r1, fp
 800d276:	f7f3 f831 	bl	80002dc <__adddf3>
 800d27a:	2d0f      	cmp	r5, #15
 800d27c:	4682      	mov	sl, r0
 800d27e:	468b      	mov	fp, r1
 800d280:	ddd5      	ble.n	800d22e <_strtod_l+0x3ae>
 800d282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d284:	1b2c      	subs	r4, r5, r4
 800d286:	441c      	add	r4, r3
 800d288:	2c00      	cmp	r4, #0
 800d28a:	f340 8096 	ble.w	800d3ba <_strtod_l+0x53a>
 800d28e:	f014 030f 	ands.w	r3, r4, #15
 800d292:	d00a      	beq.n	800d2aa <_strtod_l+0x42a>
 800d294:	495e      	ldr	r1, [pc, #376]	@ (800d410 <_strtod_l+0x590>)
 800d296:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d29a:	4652      	mov	r2, sl
 800d29c:	465b      	mov	r3, fp
 800d29e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2a2:	f7f3 f9d1 	bl	8000648 <__aeabi_dmul>
 800d2a6:	4682      	mov	sl, r0
 800d2a8:	468b      	mov	fp, r1
 800d2aa:	f034 040f 	bics.w	r4, r4, #15
 800d2ae:	d073      	beq.n	800d398 <_strtod_l+0x518>
 800d2b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d2b4:	dd48      	ble.n	800d348 <_strtod_l+0x4c8>
 800d2b6:	2400      	movs	r4, #0
 800d2b8:	46a0      	mov	r8, r4
 800d2ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800d2bc:	46a1      	mov	r9, r4
 800d2be:	9a05      	ldr	r2, [sp, #20]
 800d2c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d418 <_strtod_l+0x598>
 800d2c4:	2322      	movs	r3, #34	@ 0x22
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	f04f 0a00 	mov.w	sl, #0
 800d2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f43f ae0f 	beq.w	800cef2 <_strtod_l+0x72>
 800d2d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2d6:	9805      	ldr	r0, [sp, #20]
 800d2d8:	f7ff f942 	bl	800c560 <_Bfree>
 800d2dc:	9805      	ldr	r0, [sp, #20]
 800d2de:	4649      	mov	r1, r9
 800d2e0:	f7ff f93e 	bl	800c560 <_Bfree>
 800d2e4:	9805      	ldr	r0, [sp, #20]
 800d2e6:	4641      	mov	r1, r8
 800d2e8:	f7ff f93a 	bl	800c560 <_Bfree>
 800d2ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d2ee:	9805      	ldr	r0, [sp, #20]
 800d2f0:	f7ff f936 	bl	800c560 <_Bfree>
 800d2f4:	9805      	ldr	r0, [sp, #20]
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	f7ff f932 	bl	800c560 <_Bfree>
 800d2fc:	e5f9      	b.n	800cef2 <_strtod_l+0x72>
 800d2fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d300:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d304:	4293      	cmp	r3, r2
 800d306:	dbbc      	blt.n	800d282 <_strtod_l+0x402>
 800d308:	4c41      	ldr	r4, [pc, #260]	@ (800d410 <_strtod_l+0x590>)
 800d30a:	f1c5 050f 	rsb	r5, r5, #15
 800d30e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d312:	4652      	mov	r2, sl
 800d314:	465b      	mov	r3, fp
 800d316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d31a:	f7f3 f995 	bl	8000648 <__aeabi_dmul>
 800d31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d320:	1b5d      	subs	r5, r3, r5
 800d322:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d326:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d32a:	e78f      	b.n	800d24c <_strtod_l+0x3cc>
 800d32c:	3316      	adds	r3, #22
 800d32e:	dba8      	blt.n	800d282 <_strtod_l+0x402>
 800d330:	4b37      	ldr	r3, [pc, #220]	@ (800d410 <_strtod_l+0x590>)
 800d332:	eba9 0808 	sub.w	r8, r9, r8
 800d336:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d33a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d33e:	4650      	mov	r0, sl
 800d340:	4659      	mov	r1, fp
 800d342:	f7f3 faab 	bl	800089c <__aeabi_ddiv>
 800d346:	e783      	b.n	800d250 <_strtod_l+0x3d0>
 800d348:	4b32      	ldr	r3, [pc, #200]	@ (800d414 <_strtod_l+0x594>)
 800d34a:	9308      	str	r3, [sp, #32]
 800d34c:	2300      	movs	r3, #0
 800d34e:	1124      	asrs	r4, r4, #4
 800d350:	4650      	mov	r0, sl
 800d352:	4659      	mov	r1, fp
 800d354:	461e      	mov	r6, r3
 800d356:	2c01      	cmp	r4, #1
 800d358:	dc21      	bgt.n	800d39e <_strtod_l+0x51e>
 800d35a:	b10b      	cbz	r3, 800d360 <_strtod_l+0x4e0>
 800d35c:	4682      	mov	sl, r0
 800d35e:	468b      	mov	fp, r1
 800d360:	492c      	ldr	r1, [pc, #176]	@ (800d414 <_strtod_l+0x594>)
 800d362:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d366:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d36a:	4652      	mov	r2, sl
 800d36c:	465b      	mov	r3, fp
 800d36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d372:	f7f3 f969 	bl	8000648 <__aeabi_dmul>
 800d376:	4b28      	ldr	r3, [pc, #160]	@ (800d418 <_strtod_l+0x598>)
 800d378:	460a      	mov	r2, r1
 800d37a:	400b      	ands	r3, r1
 800d37c:	4927      	ldr	r1, [pc, #156]	@ (800d41c <_strtod_l+0x59c>)
 800d37e:	428b      	cmp	r3, r1
 800d380:	4682      	mov	sl, r0
 800d382:	d898      	bhi.n	800d2b6 <_strtod_l+0x436>
 800d384:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d388:	428b      	cmp	r3, r1
 800d38a:	bf86      	itte	hi
 800d38c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d420 <_strtod_l+0x5a0>
 800d390:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800d394:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d398:	2300      	movs	r3, #0
 800d39a:	9308      	str	r3, [sp, #32]
 800d39c:	e07a      	b.n	800d494 <_strtod_l+0x614>
 800d39e:	07e2      	lsls	r2, r4, #31
 800d3a0:	d505      	bpl.n	800d3ae <_strtod_l+0x52e>
 800d3a2:	9b08      	ldr	r3, [sp, #32]
 800d3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a8:	f7f3 f94e 	bl	8000648 <__aeabi_dmul>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	9a08      	ldr	r2, [sp, #32]
 800d3b0:	3208      	adds	r2, #8
 800d3b2:	3601      	adds	r6, #1
 800d3b4:	1064      	asrs	r4, r4, #1
 800d3b6:	9208      	str	r2, [sp, #32]
 800d3b8:	e7cd      	b.n	800d356 <_strtod_l+0x4d6>
 800d3ba:	d0ed      	beq.n	800d398 <_strtod_l+0x518>
 800d3bc:	4264      	negs	r4, r4
 800d3be:	f014 020f 	ands.w	r2, r4, #15
 800d3c2:	d00a      	beq.n	800d3da <_strtod_l+0x55a>
 800d3c4:	4b12      	ldr	r3, [pc, #72]	@ (800d410 <_strtod_l+0x590>)
 800d3c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3ca:	4650      	mov	r0, sl
 800d3cc:	4659      	mov	r1, fp
 800d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d2:	f7f3 fa63 	bl	800089c <__aeabi_ddiv>
 800d3d6:	4682      	mov	sl, r0
 800d3d8:	468b      	mov	fp, r1
 800d3da:	1124      	asrs	r4, r4, #4
 800d3dc:	d0dc      	beq.n	800d398 <_strtod_l+0x518>
 800d3de:	2c1f      	cmp	r4, #31
 800d3e0:	dd20      	ble.n	800d424 <_strtod_l+0x5a4>
 800d3e2:	2400      	movs	r4, #0
 800d3e4:	46a0      	mov	r8, r4
 800d3e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800d3e8:	46a1      	mov	r9, r4
 800d3ea:	9a05      	ldr	r2, [sp, #20]
 800d3ec:	2322      	movs	r3, #34	@ 0x22
 800d3ee:	f04f 0a00 	mov.w	sl, #0
 800d3f2:	f04f 0b00 	mov.w	fp, #0
 800d3f6:	6013      	str	r3, [r2, #0]
 800d3f8:	e768      	b.n	800d2cc <_strtod_l+0x44c>
 800d3fa:	bf00      	nop
 800d3fc:	0800edc5 	.word	0x0800edc5
 800d400:	0800efdc 	.word	0x0800efdc
 800d404:	0800edbd 	.word	0x0800edbd
 800d408:	0800edf4 	.word	0x0800edf4
 800d40c:	0800f185 	.word	0x0800f185
 800d410:	0800ef10 	.word	0x0800ef10
 800d414:	0800eee8 	.word	0x0800eee8
 800d418:	7ff00000 	.word	0x7ff00000
 800d41c:	7ca00000 	.word	0x7ca00000
 800d420:	7fefffff 	.word	0x7fefffff
 800d424:	f014 0310 	ands.w	r3, r4, #16
 800d428:	bf18      	it	ne
 800d42a:	236a      	movne	r3, #106	@ 0x6a
 800d42c:	4ea9      	ldr	r6, [pc, #676]	@ (800d6d4 <_strtod_l+0x854>)
 800d42e:	9308      	str	r3, [sp, #32]
 800d430:	4650      	mov	r0, sl
 800d432:	4659      	mov	r1, fp
 800d434:	2300      	movs	r3, #0
 800d436:	07e2      	lsls	r2, r4, #31
 800d438:	d504      	bpl.n	800d444 <_strtod_l+0x5c4>
 800d43a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d43e:	f7f3 f903 	bl	8000648 <__aeabi_dmul>
 800d442:	2301      	movs	r3, #1
 800d444:	1064      	asrs	r4, r4, #1
 800d446:	f106 0608 	add.w	r6, r6, #8
 800d44a:	d1f4      	bne.n	800d436 <_strtod_l+0x5b6>
 800d44c:	b10b      	cbz	r3, 800d452 <_strtod_l+0x5d2>
 800d44e:	4682      	mov	sl, r0
 800d450:	468b      	mov	fp, r1
 800d452:	9b08      	ldr	r3, [sp, #32]
 800d454:	b1b3      	cbz	r3, 800d484 <_strtod_l+0x604>
 800d456:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d45a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d45e:	2b00      	cmp	r3, #0
 800d460:	4659      	mov	r1, fp
 800d462:	dd0f      	ble.n	800d484 <_strtod_l+0x604>
 800d464:	2b1f      	cmp	r3, #31
 800d466:	dd55      	ble.n	800d514 <_strtod_l+0x694>
 800d468:	2b34      	cmp	r3, #52	@ 0x34
 800d46a:	bfde      	ittt	le
 800d46c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800d470:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d474:	4093      	lslle	r3, r2
 800d476:	f04f 0a00 	mov.w	sl, #0
 800d47a:	bfcc      	ite	gt
 800d47c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d480:	ea03 0b01 	andle.w	fp, r3, r1
 800d484:	2200      	movs	r2, #0
 800d486:	2300      	movs	r3, #0
 800d488:	4650      	mov	r0, sl
 800d48a:	4659      	mov	r1, fp
 800d48c:	f7f3 fb44 	bl	8000b18 <__aeabi_dcmpeq>
 800d490:	2800      	cmp	r0, #0
 800d492:	d1a6      	bne.n	800d3e2 <_strtod_l+0x562>
 800d494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d49a:	9805      	ldr	r0, [sp, #20]
 800d49c:	462b      	mov	r3, r5
 800d49e:	463a      	mov	r2, r7
 800d4a0:	f7ff f8c6 	bl	800c630 <__s2b>
 800d4a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	f43f af05 	beq.w	800d2b6 <_strtod_l+0x436>
 800d4ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4ae:	2a00      	cmp	r2, #0
 800d4b0:	eba9 0308 	sub.w	r3, r9, r8
 800d4b4:	bfa8      	it	ge
 800d4b6:	2300      	movge	r3, #0
 800d4b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d4ba:	2400      	movs	r4, #0
 800d4bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d4c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d4c2:	46a0      	mov	r8, r4
 800d4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4c6:	9805      	ldr	r0, [sp, #20]
 800d4c8:	6859      	ldr	r1, [r3, #4]
 800d4ca:	f7ff f809 	bl	800c4e0 <_Balloc>
 800d4ce:	4681      	mov	r9, r0
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	f43f aef4 	beq.w	800d2be <_strtod_l+0x43e>
 800d4d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4d8:	691a      	ldr	r2, [r3, #16]
 800d4da:	3202      	adds	r2, #2
 800d4dc:	f103 010c 	add.w	r1, r3, #12
 800d4e0:	0092      	lsls	r2, r2, #2
 800d4e2:	300c      	adds	r0, #12
 800d4e4:	f7fe f899 	bl	800b61a <memcpy>
 800d4e8:	ec4b ab10 	vmov	d0, sl, fp
 800d4ec:	9805      	ldr	r0, [sp, #20]
 800d4ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800d4f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800d4f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d4f6:	f7ff fbd7 	bl	800cca8 <__d2b>
 800d4fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	f43f aede 	beq.w	800d2be <_strtod_l+0x43e>
 800d502:	9805      	ldr	r0, [sp, #20]
 800d504:	2101      	movs	r1, #1
 800d506:	f7ff f929 	bl	800c75c <__i2b>
 800d50a:	4680      	mov	r8, r0
 800d50c:	b948      	cbnz	r0, 800d522 <_strtod_l+0x6a2>
 800d50e:	f04f 0800 	mov.w	r8, #0
 800d512:	e6d4      	b.n	800d2be <_strtod_l+0x43e>
 800d514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d518:	fa02 f303 	lsl.w	r3, r2, r3
 800d51c:	ea03 0a0a 	and.w	sl, r3, sl
 800d520:	e7b0      	b.n	800d484 <_strtod_l+0x604>
 800d522:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d524:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d526:	2d00      	cmp	r5, #0
 800d528:	bfab      	itete	ge
 800d52a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d52c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d52e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d530:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d532:	bfac      	ite	ge
 800d534:	18ef      	addge	r7, r5, r3
 800d536:	1b5e      	sublt	r6, r3, r5
 800d538:	9b08      	ldr	r3, [sp, #32]
 800d53a:	1aed      	subs	r5, r5, r3
 800d53c:	4415      	add	r5, r2
 800d53e:	4b66      	ldr	r3, [pc, #408]	@ (800d6d8 <_strtod_l+0x858>)
 800d540:	3d01      	subs	r5, #1
 800d542:	429d      	cmp	r5, r3
 800d544:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d548:	da50      	bge.n	800d5ec <_strtod_l+0x76c>
 800d54a:	1b5b      	subs	r3, r3, r5
 800d54c:	2b1f      	cmp	r3, #31
 800d54e:	eba2 0203 	sub.w	r2, r2, r3
 800d552:	f04f 0101 	mov.w	r1, #1
 800d556:	dc3d      	bgt.n	800d5d4 <_strtod_l+0x754>
 800d558:	fa01 f303 	lsl.w	r3, r1, r3
 800d55c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d55e:	2300      	movs	r3, #0
 800d560:	9310      	str	r3, [sp, #64]	@ 0x40
 800d562:	18bd      	adds	r5, r7, r2
 800d564:	9b08      	ldr	r3, [sp, #32]
 800d566:	42af      	cmp	r7, r5
 800d568:	4416      	add	r6, r2
 800d56a:	441e      	add	r6, r3
 800d56c:	463b      	mov	r3, r7
 800d56e:	bfa8      	it	ge
 800d570:	462b      	movge	r3, r5
 800d572:	42b3      	cmp	r3, r6
 800d574:	bfa8      	it	ge
 800d576:	4633      	movge	r3, r6
 800d578:	2b00      	cmp	r3, #0
 800d57a:	bfc2      	ittt	gt
 800d57c:	1aed      	subgt	r5, r5, r3
 800d57e:	1af6      	subgt	r6, r6, r3
 800d580:	1aff      	subgt	r7, r7, r3
 800d582:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d584:	2b00      	cmp	r3, #0
 800d586:	dd16      	ble.n	800d5b6 <_strtod_l+0x736>
 800d588:	4641      	mov	r1, r8
 800d58a:	9805      	ldr	r0, [sp, #20]
 800d58c:	461a      	mov	r2, r3
 800d58e:	f7ff f9a5 	bl	800c8dc <__pow5mult>
 800d592:	4680      	mov	r8, r0
 800d594:	2800      	cmp	r0, #0
 800d596:	d0ba      	beq.n	800d50e <_strtod_l+0x68e>
 800d598:	4601      	mov	r1, r0
 800d59a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d59c:	9805      	ldr	r0, [sp, #20]
 800d59e:	f7ff f8f3 	bl	800c788 <__multiply>
 800d5a2:	900e      	str	r0, [sp, #56]	@ 0x38
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	f43f ae8a 	beq.w	800d2be <_strtod_l+0x43e>
 800d5aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5ac:	9805      	ldr	r0, [sp, #20]
 800d5ae:	f7fe ffd7 	bl	800c560 <_Bfree>
 800d5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5b6:	2d00      	cmp	r5, #0
 800d5b8:	dc1d      	bgt.n	800d5f6 <_strtod_l+0x776>
 800d5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	dd23      	ble.n	800d608 <_strtod_l+0x788>
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d5c4:	9805      	ldr	r0, [sp, #20]
 800d5c6:	f7ff f989 	bl	800c8dc <__pow5mult>
 800d5ca:	4681      	mov	r9, r0
 800d5cc:	b9e0      	cbnz	r0, 800d608 <_strtod_l+0x788>
 800d5ce:	f04f 0900 	mov.w	r9, #0
 800d5d2:	e674      	b.n	800d2be <_strtod_l+0x43e>
 800d5d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d5d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d5dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d5e0:	35e2      	adds	r5, #226	@ 0xe2
 800d5e2:	fa01 f305 	lsl.w	r3, r1, r5
 800d5e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d5ea:	e7ba      	b.n	800d562 <_strtod_l+0x6e2>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d5f4:	e7b5      	b.n	800d562 <_strtod_l+0x6e2>
 800d5f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5f8:	9805      	ldr	r0, [sp, #20]
 800d5fa:	462a      	mov	r2, r5
 800d5fc:	f7ff f9c8 	bl	800c990 <__lshift>
 800d600:	901a      	str	r0, [sp, #104]	@ 0x68
 800d602:	2800      	cmp	r0, #0
 800d604:	d1d9      	bne.n	800d5ba <_strtod_l+0x73a>
 800d606:	e65a      	b.n	800d2be <_strtod_l+0x43e>
 800d608:	2e00      	cmp	r6, #0
 800d60a:	dd07      	ble.n	800d61c <_strtod_l+0x79c>
 800d60c:	4649      	mov	r1, r9
 800d60e:	9805      	ldr	r0, [sp, #20]
 800d610:	4632      	mov	r2, r6
 800d612:	f7ff f9bd 	bl	800c990 <__lshift>
 800d616:	4681      	mov	r9, r0
 800d618:	2800      	cmp	r0, #0
 800d61a:	d0d8      	beq.n	800d5ce <_strtod_l+0x74e>
 800d61c:	2f00      	cmp	r7, #0
 800d61e:	dd08      	ble.n	800d632 <_strtod_l+0x7b2>
 800d620:	4641      	mov	r1, r8
 800d622:	9805      	ldr	r0, [sp, #20]
 800d624:	463a      	mov	r2, r7
 800d626:	f7ff f9b3 	bl	800c990 <__lshift>
 800d62a:	4680      	mov	r8, r0
 800d62c:	2800      	cmp	r0, #0
 800d62e:	f43f ae46 	beq.w	800d2be <_strtod_l+0x43e>
 800d632:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d634:	9805      	ldr	r0, [sp, #20]
 800d636:	464a      	mov	r2, r9
 800d638:	f7ff fa32 	bl	800caa0 <__mdiff>
 800d63c:	4604      	mov	r4, r0
 800d63e:	2800      	cmp	r0, #0
 800d640:	f43f ae3d 	beq.w	800d2be <_strtod_l+0x43e>
 800d644:	68c3      	ldr	r3, [r0, #12]
 800d646:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d648:	2300      	movs	r3, #0
 800d64a:	60c3      	str	r3, [r0, #12]
 800d64c:	4641      	mov	r1, r8
 800d64e:	f7ff fa0b 	bl	800ca68 <__mcmp>
 800d652:	2800      	cmp	r0, #0
 800d654:	da46      	bge.n	800d6e4 <_strtod_l+0x864>
 800d656:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d658:	ea53 030a 	orrs.w	r3, r3, sl
 800d65c:	d16c      	bne.n	800d738 <_strtod_l+0x8b8>
 800d65e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d662:	2b00      	cmp	r3, #0
 800d664:	d168      	bne.n	800d738 <_strtod_l+0x8b8>
 800d666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d66a:	0d1b      	lsrs	r3, r3, #20
 800d66c:	051b      	lsls	r3, r3, #20
 800d66e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d672:	d961      	bls.n	800d738 <_strtod_l+0x8b8>
 800d674:	6963      	ldr	r3, [r4, #20]
 800d676:	b913      	cbnz	r3, 800d67e <_strtod_l+0x7fe>
 800d678:	6923      	ldr	r3, [r4, #16]
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	dd5c      	ble.n	800d738 <_strtod_l+0x8b8>
 800d67e:	4621      	mov	r1, r4
 800d680:	2201      	movs	r2, #1
 800d682:	9805      	ldr	r0, [sp, #20]
 800d684:	f7ff f984 	bl	800c990 <__lshift>
 800d688:	4641      	mov	r1, r8
 800d68a:	4604      	mov	r4, r0
 800d68c:	f7ff f9ec 	bl	800ca68 <__mcmp>
 800d690:	2800      	cmp	r0, #0
 800d692:	dd51      	ble.n	800d738 <_strtod_l+0x8b8>
 800d694:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d698:	9a08      	ldr	r2, [sp, #32]
 800d69a:	0d1b      	lsrs	r3, r3, #20
 800d69c:	051b      	lsls	r3, r3, #20
 800d69e:	2a00      	cmp	r2, #0
 800d6a0:	d06b      	beq.n	800d77a <_strtod_l+0x8fa>
 800d6a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d6a6:	d868      	bhi.n	800d77a <_strtod_l+0x8fa>
 800d6a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d6ac:	f67f ae9d 	bls.w	800d3ea <_strtod_l+0x56a>
 800d6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d6dc <_strtod_l+0x85c>)
 800d6b2:	4650      	mov	r0, sl
 800d6b4:	4659      	mov	r1, fp
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f7f2 ffc6 	bl	8000648 <__aeabi_dmul>
 800d6bc:	4b08      	ldr	r3, [pc, #32]	@ (800d6e0 <_strtod_l+0x860>)
 800d6be:	400b      	ands	r3, r1
 800d6c0:	4682      	mov	sl, r0
 800d6c2:	468b      	mov	fp, r1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	f47f ae05 	bne.w	800d2d4 <_strtod_l+0x454>
 800d6ca:	9a05      	ldr	r2, [sp, #20]
 800d6cc:	2322      	movs	r3, #34	@ 0x22
 800d6ce:	6013      	str	r3, [r2, #0]
 800d6d0:	e600      	b.n	800d2d4 <_strtod_l+0x454>
 800d6d2:	bf00      	nop
 800d6d4:	0800f008 	.word	0x0800f008
 800d6d8:	fffffc02 	.word	0xfffffc02
 800d6dc:	39500000 	.word	0x39500000
 800d6e0:	7ff00000 	.word	0x7ff00000
 800d6e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d6e8:	d165      	bne.n	800d7b6 <_strtod_l+0x936>
 800d6ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d6ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6f0:	b35a      	cbz	r2, 800d74a <_strtod_l+0x8ca>
 800d6f2:	4a9f      	ldr	r2, [pc, #636]	@ (800d970 <_strtod_l+0xaf0>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d12b      	bne.n	800d750 <_strtod_l+0x8d0>
 800d6f8:	9b08      	ldr	r3, [sp, #32]
 800d6fa:	4651      	mov	r1, sl
 800d6fc:	b303      	cbz	r3, 800d740 <_strtod_l+0x8c0>
 800d6fe:	4b9d      	ldr	r3, [pc, #628]	@ (800d974 <_strtod_l+0xaf4>)
 800d700:	465a      	mov	r2, fp
 800d702:	4013      	ands	r3, r2
 800d704:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d70c:	d81b      	bhi.n	800d746 <_strtod_l+0x8c6>
 800d70e:	0d1b      	lsrs	r3, r3, #20
 800d710:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d714:	fa02 f303 	lsl.w	r3, r2, r3
 800d718:	4299      	cmp	r1, r3
 800d71a:	d119      	bne.n	800d750 <_strtod_l+0x8d0>
 800d71c:	4b96      	ldr	r3, [pc, #600]	@ (800d978 <_strtod_l+0xaf8>)
 800d71e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d720:	429a      	cmp	r2, r3
 800d722:	d102      	bne.n	800d72a <_strtod_l+0x8aa>
 800d724:	3101      	adds	r1, #1
 800d726:	f43f adca 	beq.w	800d2be <_strtod_l+0x43e>
 800d72a:	4b92      	ldr	r3, [pc, #584]	@ (800d974 <_strtod_l+0xaf4>)
 800d72c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d72e:	401a      	ands	r2, r3
 800d730:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d734:	f04f 0a00 	mov.w	sl, #0
 800d738:	9b08      	ldr	r3, [sp, #32]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1b8      	bne.n	800d6b0 <_strtod_l+0x830>
 800d73e:	e5c9      	b.n	800d2d4 <_strtod_l+0x454>
 800d740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d744:	e7e8      	b.n	800d718 <_strtod_l+0x898>
 800d746:	4613      	mov	r3, r2
 800d748:	e7e6      	b.n	800d718 <_strtod_l+0x898>
 800d74a:	ea53 030a 	orrs.w	r3, r3, sl
 800d74e:	d0a1      	beq.n	800d694 <_strtod_l+0x814>
 800d750:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d752:	b1db      	cbz	r3, 800d78c <_strtod_l+0x90c>
 800d754:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d756:	4213      	tst	r3, r2
 800d758:	d0ee      	beq.n	800d738 <_strtod_l+0x8b8>
 800d75a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d75c:	9a08      	ldr	r2, [sp, #32]
 800d75e:	4650      	mov	r0, sl
 800d760:	4659      	mov	r1, fp
 800d762:	b1bb      	cbz	r3, 800d794 <_strtod_l+0x914>
 800d764:	f7ff fb6e 	bl	800ce44 <sulp>
 800d768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d76c:	ec53 2b10 	vmov	r2, r3, d0
 800d770:	f7f2 fdb4 	bl	80002dc <__adddf3>
 800d774:	4682      	mov	sl, r0
 800d776:	468b      	mov	fp, r1
 800d778:	e7de      	b.n	800d738 <_strtod_l+0x8b8>
 800d77a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d77e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d782:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d786:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d78a:	e7d5      	b.n	800d738 <_strtod_l+0x8b8>
 800d78c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d78e:	ea13 0f0a 	tst.w	r3, sl
 800d792:	e7e1      	b.n	800d758 <_strtod_l+0x8d8>
 800d794:	f7ff fb56 	bl	800ce44 <sulp>
 800d798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d79c:	ec53 2b10 	vmov	r2, r3, d0
 800d7a0:	f7f2 fd9a 	bl	80002d8 <__aeabi_dsub>
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	468b      	mov	fp, r1
 800d7ac:	f7f3 f9b4 	bl	8000b18 <__aeabi_dcmpeq>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d0c1      	beq.n	800d738 <_strtod_l+0x8b8>
 800d7b4:	e619      	b.n	800d3ea <_strtod_l+0x56a>
 800d7b6:	4641      	mov	r1, r8
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f7ff facd 	bl	800cd58 <__ratio>
 800d7be:	ec57 6b10 	vmov	r6, r7, d0
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	4639      	mov	r1, r7
 800d7cc:	f7f3 f9b8 	bl	8000b40 <__aeabi_dcmple>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d06f      	beq.n	800d8b4 <_strtod_l+0xa34>
 800d7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d17a      	bne.n	800d8d0 <_strtod_l+0xa50>
 800d7da:	f1ba 0f00 	cmp.w	sl, #0
 800d7de:	d158      	bne.n	800d892 <_strtod_l+0xa12>
 800d7e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d15a      	bne.n	800d8a0 <_strtod_l+0xa20>
 800d7ea:	4b64      	ldr	r3, [pc, #400]	@ (800d97c <_strtod_l+0xafc>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	4639      	mov	r1, r7
 800d7f2:	f7f3 f99b 	bl	8000b2c <__aeabi_dcmplt>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d159      	bne.n	800d8ae <_strtod_l+0xa2e>
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	4639      	mov	r1, r7
 800d7fe:	4b60      	ldr	r3, [pc, #384]	@ (800d980 <_strtod_l+0xb00>)
 800d800:	2200      	movs	r2, #0
 800d802:	f7f2 ff21 	bl	8000648 <__aeabi_dmul>
 800d806:	4606      	mov	r6, r0
 800d808:	460f      	mov	r7, r1
 800d80a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d80e:	9606      	str	r6, [sp, #24]
 800d810:	9307      	str	r3, [sp, #28]
 800d812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d816:	4d57      	ldr	r5, [pc, #348]	@ (800d974 <_strtod_l+0xaf4>)
 800d818:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d81c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d81e:	401d      	ands	r5, r3
 800d820:	4b58      	ldr	r3, [pc, #352]	@ (800d984 <_strtod_l+0xb04>)
 800d822:	429d      	cmp	r5, r3
 800d824:	f040 80b2 	bne.w	800d98c <_strtod_l+0xb0c>
 800d828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d82a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d82e:	ec4b ab10 	vmov	d0, sl, fp
 800d832:	f7ff f9c9 	bl	800cbc8 <__ulp>
 800d836:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d83a:	ec51 0b10 	vmov	r0, r1, d0
 800d83e:	f7f2 ff03 	bl	8000648 <__aeabi_dmul>
 800d842:	4652      	mov	r2, sl
 800d844:	465b      	mov	r3, fp
 800d846:	f7f2 fd49 	bl	80002dc <__adddf3>
 800d84a:	460b      	mov	r3, r1
 800d84c:	4949      	ldr	r1, [pc, #292]	@ (800d974 <_strtod_l+0xaf4>)
 800d84e:	4a4e      	ldr	r2, [pc, #312]	@ (800d988 <_strtod_l+0xb08>)
 800d850:	4019      	ands	r1, r3
 800d852:	4291      	cmp	r1, r2
 800d854:	4682      	mov	sl, r0
 800d856:	d942      	bls.n	800d8de <_strtod_l+0xa5e>
 800d858:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d85a:	4b47      	ldr	r3, [pc, #284]	@ (800d978 <_strtod_l+0xaf8>)
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d103      	bne.n	800d868 <_strtod_l+0x9e8>
 800d860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d862:	3301      	adds	r3, #1
 800d864:	f43f ad2b 	beq.w	800d2be <_strtod_l+0x43e>
 800d868:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d978 <_strtod_l+0xaf8>
 800d86c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d870:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d872:	9805      	ldr	r0, [sp, #20]
 800d874:	f7fe fe74 	bl	800c560 <_Bfree>
 800d878:	9805      	ldr	r0, [sp, #20]
 800d87a:	4649      	mov	r1, r9
 800d87c:	f7fe fe70 	bl	800c560 <_Bfree>
 800d880:	9805      	ldr	r0, [sp, #20]
 800d882:	4641      	mov	r1, r8
 800d884:	f7fe fe6c 	bl	800c560 <_Bfree>
 800d888:	9805      	ldr	r0, [sp, #20]
 800d88a:	4621      	mov	r1, r4
 800d88c:	f7fe fe68 	bl	800c560 <_Bfree>
 800d890:	e618      	b.n	800d4c4 <_strtod_l+0x644>
 800d892:	f1ba 0f01 	cmp.w	sl, #1
 800d896:	d103      	bne.n	800d8a0 <_strtod_l+0xa20>
 800d898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f43f ada5 	beq.w	800d3ea <_strtod_l+0x56a>
 800d8a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d950 <_strtod_l+0xad0>
 800d8a4:	4f35      	ldr	r7, [pc, #212]	@ (800d97c <_strtod_l+0xafc>)
 800d8a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8aa:	2600      	movs	r6, #0
 800d8ac:	e7b1      	b.n	800d812 <_strtod_l+0x992>
 800d8ae:	4f34      	ldr	r7, [pc, #208]	@ (800d980 <_strtod_l+0xb00>)
 800d8b0:	2600      	movs	r6, #0
 800d8b2:	e7aa      	b.n	800d80a <_strtod_l+0x98a>
 800d8b4:	4b32      	ldr	r3, [pc, #200]	@ (800d980 <_strtod_l+0xb00>)
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	4639      	mov	r1, r7
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f7f2 fec4 	bl	8000648 <__aeabi_dmul>
 800d8c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	460f      	mov	r7, r1
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d09f      	beq.n	800d80a <_strtod_l+0x98a>
 800d8ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d8ce:	e7a0      	b.n	800d812 <_strtod_l+0x992>
 800d8d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d958 <_strtod_l+0xad8>
 800d8d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8d8:	ec57 6b17 	vmov	r6, r7, d7
 800d8dc:	e799      	b.n	800d812 <_strtod_l+0x992>
 800d8de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d8e2:	9b08      	ldr	r3, [sp, #32]
 800d8e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1c1      	bne.n	800d870 <_strtod_l+0x9f0>
 800d8ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8f0:	0d1b      	lsrs	r3, r3, #20
 800d8f2:	051b      	lsls	r3, r3, #20
 800d8f4:	429d      	cmp	r5, r3
 800d8f6:	d1bb      	bne.n	800d870 <_strtod_l+0x9f0>
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	4639      	mov	r1, r7
 800d8fc:	f7f3 fa04 	bl	8000d08 <__aeabi_d2lz>
 800d900:	f7f2 fe74 	bl	80005ec <__aeabi_l2d>
 800d904:	4602      	mov	r2, r0
 800d906:	460b      	mov	r3, r1
 800d908:	4630      	mov	r0, r6
 800d90a:	4639      	mov	r1, r7
 800d90c:	f7f2 fce4 	bl	80002d8 <__aeabi_dsub>
 800d910:	460b      	mov	r3, r1
 800d912:	4602      	mov	r2, r0
 800d914:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d918:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d91e:	ea46 060a 	orr.w	r6, r6, sl
 800d922:	431e      	orrs	r6, r3
 800d924:	d06f      	beq.n	800da06 <_strtod_l+0xb86>
 800d926:	a30e      	add	r3, pc, #56	@ (adr r3, 800d960 <_strtod_l+0xae0>)
 800d928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92c:	f7f3 f8fe 	bl	8000b2c <__aeabi_dcmplt>
 800d930:	2800      	cmp	r0, #0
 800d932:	f47f accf 	bne.w	800d2d4 <_strtod_l+0x454>
 800d936:	a30c      	add	r3, pc, #48	@ (adr r3, 800d968 <_strtod_l+0xae8>)
 800d938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d940:	f7f3 f912 	bl	8000b68 <__aeabi_dcmpgt>
 800d944:	2800      	cmp	r0, #0
 800d946:	d093      	beq.n	800d870 <_strtod_l+0x9f0>
 800d948:	e4c4      	b.n	800d2d4 <_strtod_l+0x454>
 800d94a:	bf00      	nop
 800d94c:	f3af 8000 	nop.w
 800d950:	00000000 	.word	0x00000000
 800d954:	bff00000 	.word	0xbff00000
 800d958:	00000000 	.word	0x00000000
 800d95c:	3ff00000 	.word	0x3ff00000
 800d960:	94a03595 	.word	0x94a03595
 800d964:	3fdfffff 	.word	0x3fdfffff
 800d968:	35afe535 	.word	0x35afe535
 800d96c:	3fe00000 	.word	0x3fe00000
 800d970:	000fffff 	.word	0x000fffff
 800d974:	7ff00000 	.word	0x7ff00000
 800d978:	7fefffff 	.word	0x7fefffff
 800d97c:	3ff00000 	.word	0x3ff00000
 800d980:	3fe00000 	.word	0x3fe00000
 800d984:	7fe00000 	.word	0x7fe00000
 800d988:	7c9fffff 	.word	0x7c9fffff
 800d98c:	9b08      	ldr	r3, [sp, #32]
 800d98e:	b323      	cbz	r3, 800d9da <_strtod_l+0xb5a>
 800d990:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d994:	d821      	bhi.n	800d9da <_strtod_l+0xb5a>
 800d996:	a328      	add	r3, pc, #160	@ (adr r3, 800da38 <_strtod_l+0xbb8>)
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	4630      	mov	r0, r6
 800d99e:	4639      	mov	r1, r7
 800d9a0:	f7f3 f8ce 	bl	8000b40 <__aeabi_dcmple>
 800d9a4:	b1a0      	cbz	r0, 800d9d0 <_strtod_l+0xb50>
 800d9a6:	4639      	mov	r1, r7
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7f3 f925 	bl	8000bf8 <__aeabi_d2uiz>
 800d9ae:	2801      	cmp	r0, #1
 800d9b0:	bf38      	it	cc
 800d9b2:	2001      	movcc	r0, #1
 800d9b4:	f7f2 fdce 	bl	8000554 <__aeabi_ui2d>
 800d9b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	460f      	mov	r7, r1
 800d9be:	b9fb      	cbnz	r3, 800da00 <_strtod_l+0xb80>
 800d9c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d9c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d9c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d9c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d9cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d9d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d9d6:	1b5b      	subs	r3, r3, r5
 800d9d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d9da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d9de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d9e2:	f7ff f8f1 	bl	800cbc8 <__ulp>
 800d9e6:	4650      	mov	r0, sl
 800d9e8:	ec53 2b10 	vmov	r2, r3, d0
 800d9ec:	4659      	mov	r1, fp
 800d9ee:	f7f2 fe2b 	bl	8000648 <__aeabi_dmul>
 800d9f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d9f6:	f7f2 fc71 	bl	80002dc <__adddf3>
 800d9fa:	4682      	mov	sl, r0
 800d9fc:	468b      	mov	fp, r1
 800d9fe:	e770      	b.n	800d8e2 <_strtod_l+0xa62>
 800da00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800da04:	e7e0      	b.n	800d9c8 <_strtod_l+0xb48>
 800da06:	a30e      	add	r3, pc, #56	@ (adr r3, 800da40 <_strtod_l+0xbc0>)
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	f7f3 f88e 	bl	8000b2c <__aeabi_dcmplt>
 800da10:	e798      	b.n	800d944 <_strtod_l+0xac4>
 800da12:	2300      	movs	r3, #0
 800da14:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800da18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da1a:	6013      	str	r3, [r2, #0]
 800da1c:	f7ff ba6d 	b.w	800cefa <_strtod_l+0x7a>
 800da20:	2a65      	cmp	r2, #101	@ 0x65
 800da22:	f43f ab66 	beq.w	800d0f2 <_strtod_l+0x272>
 800da26:	2a45      	cmp	r2, #69	@ 0x45
 800da28:	f43f ab63 	beq.w	800d0f2 <_strtod_l+0x272>
 800da2c:	2301      	movs	r3, #1
 800da2e:	f7ff bb9e 	b.w	800d16e <_strtod_l+0x2ee>
 800da32:	bf00      	nop
 800da34:	f3af 8000 	nop.w
 800da38:	ffc00000 	.word	0xffc00000
 800da3c:	41dfffff 	.word	0x41dfffff
 800da40:	94a03595 	.word	0x94a03595
 800da44:	3fcfffff 	.word	0x3fcfffff

0800da48 <_strtod_r>:
 800da48:	4b01      	ldr	r3, [pc, #4]	@ (800da50 <_strtod_r+0x8>)
 800da4a:	f7ff ba19 	b.w	800ce80 <_strtod_l>
 800da4e:	bf00      	nop
 800da50:	2000006c 	.word	0x2000006c

0800da54 <_strtol_l.constprop.0>:
 800da54:	2b24      	cmp	r3, #36	@ 0x24
 800da56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da5a:	4686      	mov	lr, r0
 800da5c:	4690      	mov	r8, r2
 800da5e:	d801      	bhi.n	800da64 <_strtol_l.constprop.0+0x10>
 800da60:	2b01      	cmp	r3, #1
 800da62:	d106      	bne.n	800da72 <_strtol_l.constprop.0+0x1e>
 800da64:	f7fd fdac 	bl	800b5c0 <__errno>
 800da68:	2316      	movs	r3, #22
 800da6a:	6003      	str	r3, [r0, #0]
 800da6c:	2000      	movs	r0, #0
 800da6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da72:	4834      	ldr	r0, [pc, #208]	@ (800db44 <_strtol_l.constprop.0+0xf0>)
 800da74:	460d      	mov	r5, r1
 800da76:	462a      	mov	r2, r5
 800da78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da7c:	5d06      	ldrb	r6, [r0, r4]
 800da7e:	f016 0608 	ands.w	r6, r6, #8
 800da82:	d1f8      	bne.n	800da76 <_strtol_l.constprop.0+0x22>
 800da84:	2c2d      	cmp	r4, #45	@ 0x2d
 800da86:	d12d      	bne.n	800dae4 <_strtol_l.constprop.0+0x90>
 800da88:	782c      	ldrb	r4, [r5, #0]
 800da8a:	2601      	movs	r6, #1
 800da8c:	1c95      	adds	r5, r2, #2
 800da8e:	f033 0210 	bics.w	r2, r3, #16
 800da92:	d109      	bne.n	800daa8 <_strtol_l.constprop.0+0x54>
 800da94:	2c30      	cmp	r4, #48	@ 0x30
 800da96:	d12a      	bne.n	800daee <_strtol_l.constprop.0+0x9a>
 800da98:	782a      	ldrb	r2, [r5, #0]
 800da9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800da9e:	2a58      	cmp	r2, #88	@ 0x58
 800daa0:	d125      	bne.n	800daee <_strtol_l.constprop.0+0x9a>
 800daa2:	786c      	ldrb	r4, [r5, #1]
 800daa4:	2310      	movs	r3, #16
 800daa6:	3502      	adds	r5, #2
 800daa8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800daac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800dab0:	2200      	movs	r2, #0
 800dab2:	fbbc f9f3 	udiv	r9, ip, r3
 800dab6:	4610      	mov	r0, r2
 800dab8:	fb03 ca19 	mls	sl, r3, r9, ip
 800dabc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dac0:	2f09      	cmp	r7, #9
 800dac2:	d81b      	bhi.n	800dafc <_strtol_l.constprop.0+0xa8>
 800dac4:	463c      	mov	r4, r7
 800dac6:	42a3      	cmp	r3, r4
 800dac8:	dd27      	ble.n	800db1a <_strtol_l.constprop.0+0xc6>
 800daca:	1c57      	adds	r7, r2, #1
 800dacc:	d007      	beq.n	800dade <_strtol_l.constprop.0+0x8a>
 800dace:	4581      	cmp	r9, r0
 800dad0:	d320      	bcc.n	800db14 <_strtol_l.constprop.0+0xc0>
 800dad2:	d101      	bne.n	800dad8 <_strtol_l.constprop.0+0x84>
 800dad4:	45a2      	cmp	sl, r4
 800dad6:	db1d      	blt.n	800db14 <_strtol_l.constprop.0+0xc0>
 800dad8:	fb00 4003 	mla	r0, r0, r3, r4
 800dadc:	2201      	movs	r2, #1
 800dade:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dae2:	e7eb      	b.n	800dabc <_strtol_l.constprop.0+0x68>
 800dae4:	2c2b      	cmp	r4, #43	@ 0x2b
 800dae6:	bf04      	itt	eq
 800dae8:	782c      	ldrbeq	r4, [r5, #0]
 800daea:	1c95      	addeq	r5, r2, #2
 800daec:	e7cf      	b.n	800da8e <_strtol_l.constprop.0+0x3a>
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1da      	bne.n	800daa8 <_strtol_l.constprop.0+0x54>
 800daf2:	2c30      	cmp	r4, #48	@ 0x30
 800daf4:	bf0c      	ite	eq
 800daf6:	2308      	moveq	r3, #8
 800daf8:	230a      	movne	r3, #10
 800dafa:	e7d5      	b.n	800daa8 <_strtol_l.constprop.0+0x54>
 800dafc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800db00:	2f19      	cmp	r7, #25
 800db02:	d801      	bhi.n	800db08 <_strtol_l.constprop.0+0xb4>
 800db04:	3c37      	subs	r4, #55	@ 0x37
 800db06:	e7de      	b.n	800dac6 <_strtol_l.constprop.0+0x72>
 800db08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800db0c:	2f19      	cmp	r7, #25
 800db0e:	d804      	bhi.n	800db1a <_strtol_l.constprop.0+0xc6>
 800db10:	3c57      	subs	r4, #87	@ 0x57
 800db12:	e7d8      	b.n	800dac6 <_strtol_l.constprop.0+0x72>
 800db14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db18:	e7e1      	b.n	800dade <_strtol_l.constprop.0+0x8a>
 800db1a:	1c53      	adds	r3, r2, #1
 800db1c:	d108      	bne.n	800db30 <_strtol_l.constprop.0+0xdc>
 800db1e:	2322      	movs	r3, #34	@ 0x22
 800db20:	f8ce 3000 	str.w	r3, [lr]
 800db24:	4660      	mov	r0, ip
 800db26:	f1b8 0f00 	cmp.w	r8, #0
 800db2a:	d0a0      	beq.n	800da6e <_strtol_l.constprop.0+0x1a>
 800db2c:	1e69      	subs	r1, r5, #1
 800db2e:	e006      	b.n	800db3e <_strtol_l.constprop.0+0xea>
 800db30:	b106      	cbz	r6, 800db34 <_strtol_l.constprop.0+0xe0>
 800db32:	4240      	negs	r0, r0
 800db34:	f1b8 0f00 	cmp.w	r8, #0
 800db38:	d099      	beq.n	800da6e <_strtol_l.constprop.0+0x1a>
 800db3a:	2a00      	cmp	r2, #0
 800db3c:	d1f6      	bne.n	800db2c <_strtol_l.constprop.0+0xd8>
 800db3e:	f8c8 1000 	str.w	r1, [r8]
 800db42:	e794      	b.n	800da6e <_strtol_l.constprop.0+0x1a>
 800db44:	0800f031 	.word	0x0800f031

0800db48 <_strtol_r>:
 800db48:	f7ff bf84 	b.w	800da54 <_strtol_l.constprop.0>

0800db4c <__ssputs_r>:
 800db4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db50:	688e      	ldr	r6, [r1, #8]
 800db52:	461f      	mov	r7, r3
 800db54:	42be      	cmp	r6, r7
 800db56:	680b      	ldr	r3, [r1, #0]
 800db58:	4682      	mov	sl, r0
 800db5a:	460c      	mov	r4, r1
 800db5c:	4690      	mov	r8, r2
 800db5e:	d82d      	bhi.n	800dbbc <__ssputs_r+0x70>
 800db60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db68:	d026      	beq.n	800dbb8 <__ssputs_r+0x6c>
 800db6a:	6965      	ldr	r5, [r4, #20]
 800db6c:	6909      	ldr	r1, [r1, #16]
 800db6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db72:	eba3 0901 	sub.w	r9, r3, r1
 800db76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db7a:	1c7b      	adds	r3, r7, #1
 800db7c:	444b      	add	r3, r9
 800db7e:	106d      	asrs	r5, r5, #1
 800db80:	429d      	cmp	r5, r3
 800db82:	bf38      	it	cc
 800db84:	461d      	movcc	r5, r3
 800db86:	0553      	lsls	r3, r2, #21
 800db88:	d527      	bpl.n	800dbda <__ssputs_r+0x8e>
 800db8a:	4629      	mov	r1, r5
 800db8c:	f7fe fc1c 	bl	800c3c8 <_malloc_r>
 800db90:	4606      	mov	r6, r0
 800db92:	b360      	cbz	r0, 800dbee <__ssputs_r+0xa2>
 800db94:	6921      	ldr	r1, [r4, #16]
 800db96:	464a      	mov	r2, r9
 800db98:	f7fd fd3f 	bl	800b61a <memcpy>
 800db9c:	89a3      	ldrh	r3, [r4, #12]
 800db9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dba6:	81a3      	strh	r3, [r4, #12]
 800dba8:	6126      	str	r6, [r4, #16]
 800dbaa:	6165      	str	r5, [r4, #20]
 800dbac:	444e      	add	r6, r9
 800dbae:	eba5 0509 	sub.w	r5, r5, r9
 800dbb2:	6026      	str	r6, [r4, #0]
 800dbb4:	60a5      	str	r5, [r4, #8]
 800dbb6:	463e      	mov	r6, r7
 800dbb8:	42be      	cmp	r6, r7
 800dbba:	d900      	bls.n	800dbbe <__ssputs_r+0x72>
 800dbbc:	463e      	mov	r6, r7
 800dbbe:	6820      	ldr	r0, [r4, #0]
 800dbc0:	4632      	mov	r2, r6
 800dbc2:	4641      	mov	r1, r8
 800dbc4:	f000 fb6a 	bl	800e29c <memmove>
 800dbc8:	68a3      	ldr	r3, [r4, #8]
 800dbca:	1b9b      	subs	r3, r3, r6
 800dbcc:	60a3      	str	r3, [r4, #8]
 800dbce:	6823      	ldr	r3, [r4, #0]
 800dbd0:	4433      	add	r3, r6
 800dbd2:	6023      	str	r3, [r4, #0]
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbda:	462a      	mov	r2, r5
 800dbdc:	f000 ff41 	bl	800ea62 <_realloc_r>
 800dbe0:	4606      	mov	r6, r0
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d1e0      	bne.n	800dba8 <__ssputs_r+0x5c>
 800dbe6:	6921      	ldr	r1, [r4, #16]
 800dbe8:	4650      	mov	r0, sl
 800dbea:	f7fe fb79 	bl	800c2e0 <_free_r>
 800dbee:	230c      	movs	r3, #12
 800dbf0:	f8ca 3000 	str.w	r3, [sl]
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbfa:	81a3      	strh	r3, [r4, #12]
 800dbfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc00:	e7e9      	b.n	800dbd6 <__ssputs_r+0x8a>
	...

0800dc04 <_svfiprintf_r>:
 800dc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc08:	4698      	mov	r8, r3
 800dc0a:	898b      	ldrh	r3, [r1, #12]
 800dc0c:	061b      	lsls	r3, r3, #24
 800dc0e:	b09d      	sub	sp, #116	@ 0x74
 800dc10:	4607      	mov	r7, r0
 800dc12:	460d      	mov	r5, r1
 800dc14:	4614      	mov	r4, r2
 800dc16:	d510      	bpl.n	800dc3a <_svfiprintf_r+0x36>
 800dc18:	690b      	ldr	r3, [r1, #16]
 800dc1a:	b973      	cbnz	r3, 800dc3a <_svfiprintf_r+0x36>
 800dc1c:	2140      	movs	r1, #64	@ 0x40
 800dc1e:	f7fe fbd3 	bl	800c3c8 <_malloc_r>
 800dc22:	6028      	str	r0, [r5, #0]
 800dc24:	6128      	str	r0, [r5, #16]
 800dc26:	b930      	cbnz	r0, 800dc36 <_svfiprintf_r+0x32>
 800dc28:	230c      	movs	r3, #12
 800dc2a:	603b      	str	r3, [r7, #0]
 800dc2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc30:	b01d      	add	sp, #116	@ 0x74
 800dc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc36:	2340      	movs	r3, #64	@ 0x40
 800dc38:	616b      	str	r3, [r5, #20]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc3e:	2320      	movs	r3, #32
 800dc40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc44:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc48:	2330      	movs	r3, #48	@ 0x30
 800dc4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dde8 <_svfiprintf_r+0x1e4>
 800dc4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc52:	f04f 0901 	mov.w	r9, #1
 800dc56:	4623      	mov	r3, r4
 800dc58:	469a      	mov	sl, r3
 800dc5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc5e:	b10a      	cbz	r2, 800dc64 <_svfiprintf_r+0x60>
 800dc60:	2a25      	cmp	r2, #37	@ 0x25
 800dc62:	d1f9      	bne.n	800dc58 <_svfiprintf_r+0x54>
 800dc64:	ebba 0b04 	subs.w	fp, sl, r4
 800dc68:	d00b      	beq.n	800dc82 <_svfiprintf_r+0x7e>
 800dc6a:	465b      	mov	r3, fp
 800dc6c:	4622      	mov	r2, r4
 800dc6e:	4629      	mov	r1, r5
 800dc70:	4638      	mov	r0, r7
 800dc72:	f7ff ff6b 	bl	800db4c <__ssputs_r>
 800dc76:	3001      	adds	r0, #1
 800dc78:	f000 80a7 	beq.w	800ddca <_svfiprintf_r+0x1c6>
 800dc7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc7e:	445a      	add	r2, fp
 800dc80:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc82:	f89a 3000 	ldrb.w	r3, [sl]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f000 809f 	beq.w	800ddca <_svfiprintf_r+0x1c6>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc96:	f10a 0a01 	add.w	sl, sl, #1
 800dc9a:	9304      	str	r3, [sp, #16]
 800dc9c:	9307      	str	r3, [sp, #28]
 800dc9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dca2:	931a      	str	r3, [sp, #104]	@ 0x68
 800dca4:	4654      	mov	r4, sl
 800dca6:	2205      	movs	r2, #5
 800dca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcac:	484e      	ldr	r0, [pc, #312]	@ (800dde8 <_svfiprintf_r+0x1e4>)
 800dcae:	f7f2 fab7 	bl	8000220 <memchr>
 800dcb2:	9a04      	ldr	r2, [sp, #16]
 800dcb4:	b9d8      	cbnz	r0, 800dcee <_svfiprintf_r+0xea>
 800dcb6:	06d0      	lsls	r0, r2, #27
 800dcb8:	bf44      	itt	mi
 800dcba:	2320      	movmi	r3, #32
 800dcbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcc0:	0711      	lsls	r1, r2, #28
 800dcc2:	bf44      	itt	mi
 800dcc4:	232b      	movmi	r3, #43	@ 0x2b
 800dcc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcca:	f89a 3000 	ldrb.w	r3, [sl]
 800dcce:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcd0:	d015      	beq.n	800dcfe <_svfiprintf_r+0xfa>
 800dcd2:	9a07      	ldr	r2, [sp, #28]
 800dcd4:	4654      	mov	r4, sl
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	f04f 0c0a 	mov.w	ip, #10
 800dcdc:	4621      	mov	r1, r4
 800dcde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dce2:	3b30      	subs	r3, #48	@ 0x30
 800dce4:	2b09      	cmp	r3, #9
 800dce6:	d94b      	bls.n	800dd80 <_svfiprintf_r+0x17c>
 800dce8:	b1b0      	cbz	r0, 800dd18 <_svfiprintf_r+0x114>
 800dcea:	9207      	str	r2, [sp, #28]
 800dcec:	e014      	b.n	800dd18 <_svfiprintf_r+0x114>
 800dcee:	eba0 0308 	sub.w	r3, r0, r8
 800dcf2:	fa09 f303 	lsl.w	r3, r9, r3
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	9304      	str	r3, [sp, #16]
 800dcfa:	46a2      	mov	sl, r4
 800dcfc:	e7d2      	b.n	800dca4 <_svfiprintf_r+0xa0>
 800dcfe:	9b03      	ldr	r3, [sp, #12]
 800dd00:	1d19      	adds	r1, r3, #4
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	9103      	str	r1, [sp, #12]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	bfbb      	ittet	lt
 800dd0a:	425b      	neglt	r3, r3
 800dd0c:	f042 0202 	orrlt.w	r2, r2, #2
 800dd10:	9307      	strge	r3, [sp, #28]
 800dd12:	9307      	strlt	r3, [sp, #28]
 800dd14:	bfb8      	it	lt
 800dd16:	9204      	strlt	r2, [sp, #16]
 800dd18:	7823      	ldrb	r3, [r4, #0]
 800dd1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd1c:	d10a      	bne.n	800dd34 <_svfiprintf_r+0x130>
 800dd1e:	7863      	ldrb	r3, [r4, #1]
 800dd20:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd22:	d132      	bne.n	800dd8a <_svfiprintf_r+0x186>
 800dd24:	9b03      	ldr	r3, [sp, #12]
 800dd26:	1d1a      	adds	r2, r3, #4
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	9203      	str	r2, [sp, #12]
 800dd2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd30:	3402      	adds	r4, #2
 800dd32:	9305      	str	r3, [sp, #20]
 800dd34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ddf8 <_svfiprintf_r+0x1f4>
 800dd38:	7821      	ldrb	r1, [r4, #0]
 800dd3a:	2203      	movs	r2, #3
 800dd3c:	4650      	mov	r0, sl
 800dd3e:	f7f2 fa6f 	bl	8000220 <memchr>
 800dd42:	b138      	cbz	r0, 800dd54 <_svfiprintf_r+0x150>
 800dd44:	9b04      	ldr	r3, [sp, #16]
 800dd46:	eba0 000a 	sub.w	r0, r0, sl
 800dd4a:	2240      	movs	r2, #64	@ 0x40
 800dd4c:	4082      	lsls	r2, r0
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	3401      	adds	r4, #1
 800dd52:	9304      	str	r3, [sp, #16]
 800dd54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd58:	4824      	ldr	r0, [pc, #144]	@ (800ddec <_svfiprintf_r+0x1e8>)
 800dd5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd5e:	2206      	movs	r2, #6
 800dd60:	f7f2 fa5e 	bl	8000220 <memchr>
 800dd64:	2800      	cmp	r0, #0
 800dd66:	d036      	beq.n	800ddd6 <_svfiprintf_r+0x1d2>
 800dd68:	4b21      	ldr	r3, [pc, #132]	@ (800ddf0 <_svfiprintf_r+0x1ec>)
 800dd6a:	bb1b      	cbnz	r3, 800ddb4 <_svfiprintf_r+0x1b0>
 800dd6c:	9b03      	ldr	r3, [sp, #12]
 800dd6e:	3307      	adds	r3, #7
 800dd70:	f023 0307 	bic.w	r3, r3, #7
 800dd74:	3308      	adds	r3, #8
 800dd76:	9303      	str	r3, [sp, #12]
 800dd78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd7a:	4433      	add	r3, r6
 800dd7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd7e:	e76a      	b.n	800dc56 <_svfiprintf_r+0x52>
 800dd80:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd84:	460c      	mov	r4, r1
 800dd86:	2001      	movs	r0, #1
 800dd88:	e7a8      	b.n	800dcdc <_svfiprintf_r+0xd8>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	3401      	adds	r4, #1
 800dd8e:	9305      	str	r3, [sp, #20]
 800dd90:	4619      	mov	r1, r3
 800dd92:	f04f 0c0a 	mov.w	ip, #10
 800dd96:	4620      	mov	r0, r4
 800dd98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd9c:	3a30      	subs	r2, #48	@ 0x30
 800dd9e:	2a09      	cmp	r2, #9
 800dda0:	d903      	bls.n	800ddaa <_svfiprintf_r+0x1a6>
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d0c6      	beq.n	800dd34 <_svfiprintf_r+0x130>
 800dda6:	9105      	str	r1, [sp, #20]
 800dda8:	e7c4      	b.n	800dd34 <_svfiprintf_r+0x130>
 800ddaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddae:	4604      	mov	r4, r0
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	e7f0      	b.n	800dd96 <_svfiprintf_r+0x192>
 800ddb4:	ab03      	add	r3, sp, #12
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	462a      	mov	r2, r5
 800ddba:	4b0e      	ldr	r3, [pc, #56]	@ (800ddf4 <_svfiprintf_r+0x1f0>)
 800ddbc:	a904      	add	r1, sp, #16
 800ddbe:	4638      	mov	r0, r7
 800ddc0:	f7fc fb60 	bl	800a484 <_printf_float>
 800ddc4:	1c42      	adds	r2, r0, #1
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	d1d6      	bne.n	800dd78 <_svfiprintf_r+0x174>
 800ddca:	89ab      	ldrh	r3, [r5, #12]
 800ddcc:	065b      	lsls	r3, r3, #25
 800ddce:	f53f af2d 	bmi.w	800dc2c <_svfiprintf_r+0x28>
 800ddd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddd4:	e72c      	b.n	800dc30 <_svfiprintf_r+0x2c>
 800ddd6:	ab03      	add	r3, sp, #12
 800ddd8:	9300      	str	r3, [sp, #0]
 800ddda:	462a      	mov	r2, r5
 800dddc:	4b05      	ldr	r3, [pc, #20]	@ (800ddf4 <_svfiprintf_r+0x1f0>)
 800ddde:	a904      	add	r1, sp, #16
 800dde0:	4638      	mov	r0, r7
 800dde2:	f7fc fde7 	bl	800a9b4 <_printf_i>
 800dde6:	e7ed      	b.n	800ddc4 <_svfiprintf_r+0x1c0>
 800dde8:	0800f131 	.word	0x0800f131
 800ddec:	0800f13b 	.word	0x0800f13b
 800ddf0:	0800a485 	.word	0x0800a485
 800ddf4:	0800db4d 	.word	0x0800db4d
 800ddf8:	0800f137 	.word	0x0800f137

0800ddfc <__sfputc_r>:
 800ddfc:	6893      	ldr	r3, [r2, #8]
 800ddfe:	3b01      	subs	r3, #1
 800de00:	2b00      	cmp	r3, #0
 800de02:	b410      	push	{r4}
 800de04:	6093      	str	r3, [r2, #8]
 800de06:	da08      	bge.n	800de1a <__sfputc_r+0x1e>
 800de08:	6994      	ldr	r4, [r2, #24]
 800de0a:	42a3      	cmp	r3, r4
 800de0c:	db01      	blt.n	800de12 <__sfputc_r+0x16>
 800de0e:	290a      	cmp	r1, #10
 800de10:	d103      	bne.n	800de1a <__sfputc_r+0x1e>
 800de12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de16:	f7fd ba96 	b.w	800b346 <__swbuf_r>
 800de1a:	6813      	ldr	r3, [r2, #0]
 800de1c:	1c58      	adds	r0, r3, #1
 800de1e:	6010      	str	r0, [r2, #0]
 800de20:	7019      	strb	r1, [r3, #0]
 800de22:	4608      	mov	r0, r1
 800de24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de28:	4770      	bx	lr

0800de2a <__sfputs_r>:
 800de2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2c:	4606      	mov	r6, r0
 800de2e:	460f      	mov	r7, r1
 800de30:	4614      	mov	r4, r2
 800de32:	18d5      	adds	r5, r2, r3
 800de34:	42ac      	cmp	r4, r5
 800de36:	d101      	bne.n	800de3c <__sfputs_r+0x12>
 800de38:	2000      	movs	r0, #0
 800de3a:	e007      	b.n	800de4c <__sfputs_r+0x22>
 800de3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de40:	463a      	mov	r2, r7
 800de42:	4630      	mov	r0, r6
 800de44:	f7ff ffda 	bl	800ddfc <__sfputc_r>
 800de48:	1c43      	adds	r3, r0, #1
 800de4a:	d1f3      	bne.n	800de34 <__sfputs_r+0xa>
 800de4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de50 <_vfiprintf_r>:
 800de50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de54:	460d      	mov	r5, r1
 800de56:	b09d      	sub	sp, #116	@ 0x74
 800de58:	4614      	mov	r4, r2
 800de5a:	4698      	mov	r8, r3
 800de5c:	4606      	mov	r6, r0
 800de5e:	b118      	cbz	r0, 800de68 <_vfiprintf_r+0x18>
 800de60:	6a03      	ldr	r3, [r0, #32]
 800de62:	b90b      	cbnz	r3, 800de68 <_vfiprintf_r+0x18>
 800de64:	f7fd f966 	bl	800b134 <__sinit>
 800de68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de6a:	07d9      	lsls	r1, r3, #31
 800de6c:	d405      	bmi.n	800de7a <_vfiprintf_r+0x2a>
 800de6e:	89ab      	ldrh	r3, [r5, #12]
 800de70:	059a      	lsls	r2, r3, #22
 800de72:	d402      	bmi.n	800de7a <_vfiprintf_r+0x2a>
 800de74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de76:	f7fd fbce 	bl	800b616 <__retarget_lock_acquire_recursive>
 800de7a:	89ab      	ldrh	r3, [r5, #12]
 800de7c:	071b      	lsls	r3, r3, #28
 800de7e:	d501      	bpl.n	800de84 <_vfiprintf_r+0x34>
 800de80:	692b      	ldr	r3, [r5, #16]
 800de82:	b99b      	cbnz	r3, 800deac <_vfiprintf_r+0x5c>
 800de84:	4629      	mov	r1, r5
 800de86:	4630      	mov	r0, r6
 800de88:	f7fd fa9c 	bl	800b3c4 <__swsetup_r>
 800de8c:	b170      	cbz	r0, 800deac <_vfiprintf_r+0x5c>
 800de8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de90:	07dc      	lsls	r4, r3, #31
 800de92:	d504      	bpl.n	800de9e <_vfiprintf_r+0x4e>
 800de94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de98:	b01d      	add	sp, #116	@ 0x74
 800de9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9e:	89ab      	ldrh	r3, [r5, #12]
 800dea0:	0598      	lsls	r0, r3, #22
 800dea2:	d4f7      	bmi.n	800de94 <_vfiprintf_r+0x44>
 800dea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dea6:	f7fd fbb7 	bl	800b618 <__retarget_lock_release_recursive>
 800deaa:	e7f3      	b.n	800de94 <_vfiprintf_r+0x44>
 800deac:	2300      	movs	r3, #0
 800deae:	9309      	str	r3, [sp, #36]	@ 0x24
 800deb0:	2320      	movs	r3, #32
 800deb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800deb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800deba:	2330      	movs	r3, #48	@ 0x30
 800debc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e06c <_vfiprintf_r+0x21c>
 800dec0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dec4:	f04f 0901 	mov.w	r9, #1
 800dec8:	4623      	mov	r3, r4
 800deca:	469a      	mov	sl, r3
 800decc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ded0:	b10a      	cbz	r2, 800ded6 <_vfiprintf_r+0x86>
 800ded2:	2a25      	cmp	r2, #37	@ 0x25
 800ded4:	d1f9      	bne.n	800deca <_vfiprintf_r+0x7a>
 800ded6:	ebba 0b04 	subs.w	fp, sl, r4
 800deda:	d00b      	beq.n	800def4 <_vfiprintf_r+0xa4>
 800dedc:	465b      	mov	r3, fp
 800dede:	4622      	mov	r2, r4
 800dee0:	4629      	mov	r1, r5
 800dee2:	4630      	mov	r0, r6
 800dee4:	f7ff ffa1 	bl	800de2a <__sfputs_r>
 800dee8:	3001      	adds	r0, #1
 800deea:	f000 80a7 	beq.w	800e03c <_vfiprintf_r+0x1ec>
 800deee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800def0:	445a      	add	r2, fp
 800def2:	9209      	str	r2, [sp, #36]	@ 0x24
 800def4:	f89a 3000 	ldrb.w	r3, [sl]
 800def8:	2b00      	cmp	r3, #0
 800defa:	f000 809f 	beq.w	800e03c <_vfiprintf_r+0x1ec>
 800defe:	2300      	movs	r3, #0
 800df00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df08:	f10a 0a01 	add.w	sl, sl, #1
 800df0c:	9304      	str	r3, [sp, #16]
 800df0e:	9307      	str	r3, [sp, #28]
 800df10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df14:	931a      	str	r3, [sp, #104]	@ 0x68
 800df16:	4654      	mov	r4, sl
 800df18:	2205      	movs	r2, #5
 800df1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df1e:	4853      	ldr	r0, [pc, #332]	@ (800e06c <_vfiprintf_r+0x21c>)
 800df20:	f7f2 f97e 	bl	8000220 <memchr>
 800df24:	9a04      	ldr	r2, [sp, #16]
 800df26:	b9d8      	cbnz	r0, 800df60 <_vfiprintf_r+0x110>
 800df28:	06d1      	lsls	r1, r2, #27
 800df2a:	bf44      	itt	mi
 800df2c:	2320      	movmi	r3, #32
 800df2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df32:	0713      	lsls	r3, r2, #28
 800df34:	bf44      	itt	mi
 800df36:	232b      	movmi	r3, #43	@ 0x2b
 800df38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df3c:	f89a 3000 	ldrb.w	r3, [sl]
 800df40:	2b2a      	cmp	r3, #42	@ 0x2a
 800df42:	d015      	beq.n	800df70 <_vfiprintf_r+0x120>
 800df44:	9a07      	ldr	r2, [sp, #28]
 800df46:	4654      	mov	r4, sl
 800df48:	2000      	movs	r0, #0
 800df4a:	f04f 0c0a 	mov.w	ip, #10
 800df4e:	4621      	mov	r1, r4
 800df50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df54:	3b30      	subs	r3, #48	@ 0x30
 800df56:	2b09      	cmp	r3, #9
 800df58:	d94b      	bls.n	800dff2 <_vfiprintf_r+0x1a2>
 800df5a:	b1b0      	cbz	r0, 800df8a <_vfiprintf_r+0x13a>
 800df5c:	9207      	str	r2, [sp, #28]
 800df5e:	e014      	b.n	800df8a <_vfiprintf_r+0x13a>
 800df60:	eba0 0308 	sub.w	r3, r0, r8
 800df64:	fa09 f303 	lsl.w	r3, r9, r3
 800df68:	4313      	orrs	r3, r2
 800df6a:	9304      	str	r3, [sp, #16]
 800df6c:	46a2      	mov	sl, r4
 800df6e:	e7d2      	b.n	800df16 <_vfiprintf_r+0xc6>
 800df70:	9b03      	ldr	r3, [sp, #12]
 800df72:	1d19      	adds	r1, r3, #4
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	9103      	str	r1, [sp, #12]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	bfbb      	ittet	lt
 800df7c:	425b      	neglt	r3, r3
 800df7e:	f042 0202 	orrlt.w	r2, r2, #2
 800df82:	9307      	strge	r3, [sp, #28]
 800df84:	9307      	strlt	r3, [sp, #28]
 800df86:	bfb8      	it	lt
 800df88:	9204      	strlt	r2, [sp, #16]
 800df8a:	7823      	ldrb	r3, [r4, #0]
 800df8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800df8e:	d10a      	bne.n	800dfa6 <_vfiprintf_r+0x156>
 800df90:	7863      	ldrb	r3, [r4, #1]
 800df92:	2b2a      	cmp	r3, #42	@ 0x2a
 800df94:	d132      	bne.n	800dffc <_vfiprintf_r+0x1ac>
 800df96:	9b03      	ldr	r3, [sp, #12]
 800df98:	1d1a      	adds	r2, r3, #4
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	9203      	str	r2, [sp, #12]
 800df9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfa2:	3402      	adds	r4, #2
 800dfa4:	9305      	str	r3, [sp, #20]
 800dfa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e07c <_vfiprintf_r+0x22c>
 800dfaa:	7821      	ldrb	r1, [r4, #0]
 800dfac:	2203      	movs	r2, #3
 800dfae:	4650      	mov	r0, sl
 800dfb0:	f7f2 f936 	bl	8000220 <memchr>
 800dfb4:	b138      	cbz	r0, 800dfc6 <_vfiprintf_r+0x176>
 800dfb6:	9b04      	ldr	r3, [sp, #16]
 800dfb8:	eba0 000a 	sub.w	r0, r0, sl
 800dfbc:	2240      	movs	r2, #64	@ 0x40
 800dfbe:	4082      	lsls	r2, r0
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	3401      	adds	r4, #1
 800dfc4:	9304      	str	r3, [sp, #16]
 800dfc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfca:	4829      	ldr	r0, [pc, #164]	@ (800e070 <_vfiprintf_r+0x220>)
 800dfcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfd0:	2206      	movs	r2, #6
 800dfd2:	f7f2 f925 	bl	8000220 <memchr>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d03f      	beq.n	800e05a <_vfiprintf_r+0x20a>
 800dfda:	4b26      	ldr	r3, [pc, #152]	@ (800e074 <_vfiprintf_r+0x224>)
 800dfdc:	bb1b      	cbnz	r3, 800e026 <_vfiprintf_r+0x1d6>
 800dfde:	9b03      	ldr	r3, [sp, #12]
 800dfe0:	3307      	adds	r3, #7
 800dfe2:	f023 0307 	bic.w	r3, r3, #7
 800dfe6:	3308      	adds	r3, #8
 800dfe8:	9303      	str	r3, [sp, #12]
 800dfea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfec:	443b      	add	r3, r7
 800dfee:	9309      	str	r3, [sp, #36]	@ 0x24
 800dff0:	e76a      	b.n	800dec8 <_vfiprintf_r+0x78>
 800dff2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dff6:	460c      	mov	r4, r1
 800dff8:	2001      	movs	r0, #1
 800dffa:	e7a8      	b.n	800df4e <_vfiprintf_r+0xfe>
 800dffc:	2300      	movs	r3, #0
 800dffe:	3401      	adds	r4, #1
 800e000:	9305      	str	r3, [sp, #20]
 800e002:	4619      	mov	r1, r3
 800e004:	f04f 0c0a 	mov.w	ip, #10
 800e008:	4620      	mov	r0, r4
 800e00a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e00e:	3a30      	subs	r2, #48	@ 0x30
 800e010:	2a09      	cmp	r2, #9
 800e012:	d903      	bls.n	800e01c <_vfiprintf_r+0x1cc>
 800e014:	2b00      	cmp	r3, #0
 800e016:	d0c6      	beq.n	800dfa6 <_vfiprintf_r+0x156>
 800e018:	9105      	str	r1, [sp, #20]
 800e01a:	e7c4      	b.n	800dfa6 <_vfiprintf_r+0x156>
 800e01c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e020:	4604      	mov	r4, r0
 800e022:	2301      	movs	r3, #1
 800e024:	e7f0      	b.n	800e008 <_vfiprintf_r+0x1b8>
 800e026:	ab03      	add	r3, sp, #12
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	462a      	mov	r2, r5
 800e02c:	4b12      	ldr	r3, [pc, #72]	@ (800e078 <_vfiprintf_r+0x228>)
 800e02e:	a904      	add	r1, sp, #16
 800e030:	4630      	mov	r0, r6
 800e032:	f7fc fa27 	bl	800a484 <_printf_float>
 800e036:	4607      	mov	r7, r0
 800e038:	1c78      	adds	r0, r7, #1
 800e03a:	d1d6      	bne.n	800dfea <_vfiprintf_r+0x19a>
 800e03c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e03e:	07d9      	lsls	r1, r3, #31
 800e040:	d405      	bmi.n	800e04e <_vfiprintf_r+0x1fe>
 800e042:	89ab      	ldrh	r3, [r5, #12]
 800e044:	059a      	lsls	r2, r3, #22
 800e046:	d402      	bmi.n	800e04e <_vfiprintf_r+0x1fe>
 800e048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e04a:	f7fd fae5 	bl	800b618 <__retarget_lock_release_recursive>
 800e04e:	89ab      	ldrh	r3, [r5, #12]
 800e050:	065b      	lsls	r3, r3, #25
 800e052:	f53f af1f 	bmi.w	800de94 <_vfiprintf_r+0x44>
 800e056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e058:	e71e      	b.n	800de98 <_vfiprintf_r+0x48>
 800e05a:	ab03      	add	r3, sp, #12
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	462a      	mov	r2, r5
 800e060:	4b05      	ldr	r3, [pc, #20]	@ (800e078 <_vfiprintf_r+0x228>)
 800e062:	a904      	add	r1, sp, #16
 800e064:	4630      	mov	r0, r6
 800e066:	f7fc fca5 	bl	800a9b4 <_printf_i>
 800e06a:	e7e4      	b.n	800e036 <_vfiprintf_r+0x1e6>
 800e06c:	0800f131 	.word	0x0800f131
 800e070:	0800f13b 	.word	0x0800f13b
 800e074:	0800a485 	.word	0x0800a485
 800e078:	0800de2b 	.word	0x0800de2b
 800e07c:	0800f137 	.word	0x0800f137

0800e080 <__sflush_r>:
 800e080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e088:	0716      	lsls	r6, r2, #28
 800e08a:	4605      	mov	r5, r0
 800e08c:	460c      	mov	r4, r1
 800e08e:	d454      	bmi.n	800e13a <__sflush_r+0xba>
 800e090:	684b      	ldr	r3, [r1, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	dc02      	bgt.n	800e09c <__sflush_r+0x1c>
 800e096:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e098:	2b00      	cmp	r3, #0
 800e09a:	dd48      	ble.n	800e12e <__sflush_r+0xae>
 800e09c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e09e:	2e00      	cmp	r6, #0
 800e0a0:	d045      	beq.n	800e12e <__sflush_r+0xae>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0a8:	682f      	ldr	r7, [r5, #0]
 800e0aa:	6a21      	ldr	r1, [r4, #32]
 800e0ac:	602b      	str	r3, [r5, #0]
 800e0ae:	d030      	beq.n	800e112 <__sflush_r+0x92>
 800e0b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	0759      	lsls	r1, r3, #29
 800e0b6:	d505      	bpl.n	800e0c4 <__sflush_r+0x44>
 800e0b8:	6863      	ldr	r3, [r4, #4]
 800e0ba:	1ad2      	subs	r2, r2, r3
 800e0bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0be:	b10b      	cbz	r3, 800e0c4 <__sflush_r+0x44>
 800e0c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0c2:	1ad2      	subs	r2, r2, r3
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0c8:	6a21      	ldr	r1, [r4, #32]
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	47b0      	blx	r6
 800e0ce:	1c43      	adds	r3, r0, #1
 800e0d0:	89a3      	ldrh	r3, [r4, #12]
 800e0d2:	d106      	bne.n	800e0e2 <__sflush_r+0x62>
 800e0d4:	6829      	ldr	r1, [r5, #0]
 800e0d6:	291d      	cmp	r1, #29
 800e0d8:	d82b      	bhi.n	800e132 <__sflush_r+0xb2>
 800e0da:	4a2a      	ldr	r2, [pc, #168]	@ (800e184 <__sflush_r+0x104>)
 800e0dc:	410a      	asrs	r2, r1
 800e0de:	07d6      	lsls	r6, r2, #31
 800e0e0:	d427      	bmi.n	800e132 <__sflush_r+0xb2>
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	6062      	str	r2, [r4, #4]
 800e0e6:	04d9      	lsls	r1, r3, #19
 800e0e8:	6922      	ldr	r2, [r4, #16]
 800e0ea:	6022      	str	r2, [r4, #0]
 800e0ec:	d504      	bpl.n	800e0f8 <__sflush_r+0x78>
 800e0ee:	1c42      	adds	r2, r0, #1
 800e0f0:	d101      	bne.n	800e0f6 <__sflush_r+0x76>
 800e0f2:	682b      	ldr	r3, [r5, #0]
 800e0f4:	b903      	cbnz	r3, 800e0f8 <__sflush_r+0x78>
 800e0f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e0f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0fa:	602f      	str	r7, [r5, #0]
 800e0fc:	b1b9      	cbz	r1, 800e12e <__sflush_r+0xae>
 800e0fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e102:	4299      	cmp	r1, r3
 800e104:	d002      	beq.n	800e10c <__sflush_r+0x8c>
 800e106:	4628      	mov	r0, r5
 800e108:	f7fe f8ea 	bl	800c2e0 <_free_r>
 800e10c:	2300      	movs	r3, #0
 800e10e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e110:	e00d      	b.n	800e12e <__sflush_r+0xae>
 800e112:	2301      	movs	r3, #1
 800e114:	4628      	mov	r0, r5
 800e116:	47b0      	blx	r6
 800e118:	4602      	mov	r2, r0
 800e11a:	1c50      	adds	r0, r2, #1
 800e11c:	d1c9      	bne.n	800e0b2 <__sflush_r+0x32>
 800e11e:	682b      	ldr	r3, [r5, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d0c6      	beq.n	800e0b2 <__sflush_r+0x32>
 800e124:	2b1d      	cmp	r3, #29
 800e126:	d001      	beq.n	800e12c <__sflush_r+0xac>
 800e128:	2b16      	cmp	r3, #22
 800e12a:	d11e      	bne.n	800e16a <__sflush_r+0xea>
 800e12c:	602f      	str	r7, [r5, #0]
 800e12e:	2000      	movs	r0, #0
 800e130:	e022      	b.n	800e178 <__sflush_r+0xf8>
 800e132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e136:	b21b      	sxth	r3, r3
 800e138:	e01b      	b.n	800e172 <__sflush_r+0xf2>
 800e13a:	690f      	ldr	r7, [r1, #16]
 800e13c:	2f00      	cmp	r7, #0
 800e13e:	d0f6      	beq.n	800e12e <__sflush_r+0xae>
 800e140:	0793      	lsls	r3, r2, #30
 800e142:	680e      	ldr	r6, [r1, #0]
 800e144:	bf08      	it	eq
 800e146:	694b      	ldreq	r3, [r1, #20]
 800e148:	600f      	str	r7, [r1, #0]
 800e14a:	bf18      	it	ne
 800e14c:	2300      	movne	r3, #0
 800e14e:	eba6 0807 	sub.w	r8, r6, r7
 800e152:	608b      	str	r3, [r1, #8]
 800e154:	f1b8 0f00 	cmp.w	r8, #0
 800e158:	dde9      	ble.n	800e12e <__sflush_r+0xae>
 800e15a:	6a21      	ldr	r1, [r4, #32]
 800e15c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e15e:	4643      	mov	r3, r8
 800e160:	463a      	mov	r2, r7
 800e162:	4628      	mov	r0, r5
 800e164:	47b0      	blx	r6
 800e166:	2800      	cmp	r0, #0
 800e168:	dc08      	bgt.n	800e17c <__sflush_r+0xfc>
 800e16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e16e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e172:	81a3      	strh	r3, [r4, #12]
 800e174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e17c:	4407      	add	r7, r0
 800e17e:	eba8 0800 	sub.w	r8, r8, r0
 800e182:	e7e7      	b.n	800e154 <__sflush_r+0xd4>
 800e184:	dfbffffe 	.word	0xdfbffffe

0800e188 <_fflush_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	690b      	ldr	r3, [r1, #16]
 800e18c:	4605      	mov	r5, r0
 800e18e:	460c      	mov	r4, r1
 800e190:	b913      	cbnz	r3, 800e198 <_fflush_r+0x10>
 800e192:	2500      	movs	r5, #0
 800e194:	4628      	mov	r0, r5
 800e196:	bd38      	pop	{r3, r4, r5, pc}
 800e198:	b118      	cbz	r0, 800e1a2 <_fflush_r+0x1a>
 800e19a:	6a03      	ldr	r3, [r0, #32]
 800e19c:	b90b      	cbnz	r3, 800e1a2 <_fflush_r+0x1a>
 800e19e:	f7fc ffc9 	bl	800b134 <__sinit>
 800e1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d0f3      	beq.n	800e192 <_fflush_r+0xa>
 800e1aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1ac:	07d0      	lsls	r0, r2, #31
 800e1ae:	d404      	bmi.n	800e1ba <_fflush_r+0x32>
 800e1b0:	0599      	lsls	r1, r3, #22
 800e1b2:	d402      	bmi.n	800e1ba <_fflush_r+0x32>
 800e1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1b6:	f7fd fa2e 	bl	800b616 <__retarget_lock_acquire_recursive>
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	4621      	mov	r1, r4
 800e1be:	f7ff ff5f 	bl	800e080 <__sflush_r>
 800e1c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1c4:	07da      	lsls	r2, r3, #31
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	d4e4      	bmi.n	800e194 <_fflush_r+0xc>
 800e1ca:	89a3      	ldrh	r3, [r4, #12]
 800e1cc:	059b      	lsls	r3, r3, #22
 800e1ce:	d4e1      	bmi.n	800e194 <_fflush_r+0xc>
 800e1d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1d2:	f7fd fa21 	bl	800b618 <__retarget_lock_release_recursive>
 800e1d6:	e7dd      	b.n	800e194 <_fflush_r+0xc>

0800e1d8 <__swhatbuf_r>:
 800e1d8:	b570      	push	{r4, r5, r6, lr}
 800e1da:	460c      	mov	r4, r1
 800e1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1e0:	2900      	cmp	r1, #0
 800e1e2:	b096      	sub	sp, #88	@ 0x58
 800e1e4:	4615      	mov	r5, r2
 800e1e6:	461e      	mov	r6, r3
 800e1e8:	da0d      	bge.n	800e206 <__swhatbuf_r+0x2e>
 800e1ea:	89a3      	ldrh	r3, [r4, #12]
 800e1ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e1f0:	f04f 0100 	mov.w	r1, #0
 800e1f4:	bf14      	ite	ne
 800e1f6:	2340      	movne	r3, #64	@ 0x40
 800e1f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	6031      	str	r1, [r6, #0]
 800e200:	602b      	str	r3, [r5, #0]
 800e202:	b016      	add	sp, #88	@ 0x58
 800e204:	bd70      	pop	{r4, r5, r6, pc}
 800e206:	466a      	mov	r2, sp
 800e208:	f000 f874 	bl	800e2f4 <_fstat_r>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	dbec      	blt.n	800e1ea <__swhatbuf_r+0x12>
 800e210:	9901      	ldr	r1, [sp, #4]
 800e212:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e216:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e21a:	4259      	negs	r1, r3
 800e21c:	4159      	adcs	r1, r3
 800e21e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e222:	e7eb      	b.n	800e1fc <__swhatbuf_r+0x24>

0800e224 <__smakebuf_r>:
 800e224:	898b      	ldrh	r3, [r1, #12]
 800e226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e228:	079d      	lsls	r5, r3, #30
 800e22a:	4606      	mov	r6, r0
 800e22c:	460c      	mov	r4, r1
 800e22e:	d507      	bpl.n	800e240 <__smakebuf_r+0x1c>
 800e230:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	6123      	str	r3, [r4, #16]
 800e238:	2301      	movs	r3, #1
 800e23a:	6163      	str	r3, [r4, #20]
 800e23c:	b003      	add	sp, #12
 800e23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e240:	ab01      	add	r3, sp, #4
 800e242:	466a      	mov	r2, sp
 800e244:	f7ff ffc8 	bl	800e1d8 <__swhatbuf_r>
 800e248:	9f00      	ldr	r7, [sp, #0]
 800e24a:	4605      	mov	r5, r0
 800e24c:	4639      	mov	r1, r7
 800e24e:	4630      	mov	r0, r6
 800e250:	f7fe f8ba 	bl	800c3c8 <_malloc_r>
 800e254:	b948      	cbnz	r0, 800e26a <__smakebuf_r+0x46>
 800e256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e25a:	059a      	lsls	r2, r3, #22
 800e25c:	d4ee      	bmi.n	800e23c <__smakebuf_r+0x18>
 800e25e:	f023 0303 	bic.w	r3, r3, #3
 800e262:	f043 0302 	orr.w	r3, r3, #2
 800e266:	81a3      	strh	r3, [r4, #12]
 800e268:	e7e2      	b.n	800e230 <__smakebuf_r+0xc>
 800e26a:	89a3      	ldrh	r3, [r4, #12]
 800e26c:	6020      	str	r0, [r4, #0]
 800e26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e272:	81a3      	strh	r3, [r4, #12]
 800e274:	9b01      	ldr	r3, [sp, #4]
 800e276:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e27a:	b15b      	cbz	r3, 800e294 <__smakebuf_r+0x70>
 800e27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e280:	4630      	mov	r0, r6
 800e282:	f000 f849 	bl	800e318 <_isatty_r>
 800e286:	b128      	cbz	r0, 800e294 <__smakebuf_r+0x70>
 800e288:	89a3      	ldrh	r3, [r4, #12]
 800e28a:	f023 0303 	bic.w	r3, r3, #3
 800e28e:	f043 0301 	orr.w	r3, r3, #1
 800e292:	81a3      	strh	r3, [r4, #12]
 800e294:	89a3      	ldrh	r3, [r4, #12]
 800e296:	431d      	orrs	r5, r3
 800e298:	81a5      	strh	r5, [r4, #12]
 800e29a:	e7cf      	b.n	800e23c <__smakebuf_r+0x18>

0800e29c <memmove>:
 800e29c:	4288      	cmp	r0, r1
 800e29e:	b510      	push	{r4, lr}
 800e2a0:	eb01 0402 	add.w	r4, r1, r2
 800e2a4:	d902      	bls.n	800e2ac <memmove+0x10>
 800e2a6:	4284      	cmp	r4, r0
 800e2a8:	4623      	mov	r3, r4
 800e2aa:	d807      	bhi.n	800e2bc <memmove+0x20>
 800e2ac:	1e43      	subs	r3, r0, #1
 800e2ae:	42a1      	cmp	r1, r4
 800e2b0:	d008      	beq.n	800e2c4 <memmove+0x28>
 800e2b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2ba:	e7f8      	b.n	800e2ae <memmove+0x12>
 800e2bc:	4402      	add	r2, r0
 800e2be:	4601      	mov	r1, r0
 800e2c0:	428a      	cmp	r2, r1
 800e2c2:	d100      	bne.n	800e2c6 <memmove+0x2a>
 800e2c4:	bd10      	pop	{r4, pc}
 800e2c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2ce:	e7f7      	b.n	800e2c0 <memmove+0x24>

0800e2d0 <strncmp>:
 800e2d0:	b510      	push	{r4, lr}
 800e2d2:	b16a      	cbz	r2, 800e2f0 <strncmp+0x20>
 800e2d4:	3901      	subs	r1, #1
 800e2d6:	1884      	adds	r4, r0, r2
 800e2d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d103      	bne.n	800e2ec <strncmp+0x1c>
 800e2e4:	42a0      	cmp	r0, r4
 800e2e6:	d001      	beq.n	800e2ec <strncmp+0x1c>
 800e2e8:	2a00      	cmp	r2, #0
 800e2ea:	d1f5      	bne.n	800e2d8 <strncmp+0x8>
 800e2ec:	1ad0      	subs	r0, r2, r3
 800e2ee:	bd10      	pop	{r4, pc}
 800e2f0:	4610      	mov	r0, r2
 800e2f2:	e7fc      	b.n	800e2ee <strncmp+0x1e>

0800e2f4 <_fstat_r>:
 800e2f4:	b538      	push	{r3, r4, r5, lr}
 800e2f6:	4d07      	ldr	r5, [pc, #28]	@ (800e314 <_fstat_r+0x20>)
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	4608      	mov	r0, r1
 800e2fe:	4611      	mov	r1, r2
 800e300:	602b      	str	r3, [r5, #0]
 800e302:	f7f3 fbe7 	bl	8001ad4 <_fstat>
 800e306:	1c43      	adds	r3, r0, #1
 800e308:	d102      	bne.n	800e310 <_fstat_r+0x1c>
 800e30a:	682b      	ldr	r3, [r5, #0]
 800e30c:	b103      	cbz	r3, 800e310 <_fstat_r+0x1c>
 800e30e:	6023      	str	r3, [r4, #0]
 800e310:	bd38      	pop	{r3, r4, r5, pc}
 800e312:	bf00      	nop
 800e314:	20003094 	.word	0x20003094

0800e318 <_isatty_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d06      	ldr	r5, [pc, #24]	@ (800e334 <_isatty_r+0x1c>)
 800e31c:	2300      	movs	r3, #0
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	602b      	str	r3, [r5, #0]
 800e324:	f7f3 fbe6 	bl	8001af4 <_isatty>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_isatty_r+0x1a>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_isatty_r+0x1a>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	20003094 	.word	0x20003094

0800e338 <_sbrk_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	4d06      	ldr	r5, [pc, #24]	@ (800e354 <_sbrk_r+0x1c>)
 800e33c:	2300      	movs	r3, #0
 800e33e:	4604      	mov	r4, r0
 800e340:	4608      	mov	r0, r1
 800e342:	602b      	str	r3, [r5, #0]
 800e344:	f7f3 fbee 	bl	8001b24 <_sbrk>
 800e348:	1c43      	adds	r3, r0, #1
 800e34a:	d102      	bne.n	800e352 <_sbrk_r+0x1a>
 800e34c:	682b      	ldr	r3, [r5, #0]
 800e34e:	b103      	cbz	r3, 800e352 <_sbrk_r+0x1a>
 800e350:	6023      	str	r3, [r4, #0]
 800e352:	bd38      	pop	{r3, r4, r5, pc}
 800e354:	20003094 	.word	0x20003094

0800e358 <nan>:
 800e358:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e360 <nan+0x8>
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	00000000 	.word	0x00000000
 800e364:	7ff80000 	.word	0x7ff80000

0800e368 <__assert_func>:
 800e368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e36a:	4614      	mov	r4, r2
 800e36c:	461a      	mov	r2, r3
 800e36e:	4b09      	ldr	r3, [pc, #36]	@ (800e394 <__assert_func+0x2c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4605      	mov	r5, r0
 800e374:	68d8      	ldr	r0, [r3, #12]
 800e376:	b954      	cbnz	r4, 800e38e <__assert_func+0x26>
 800e378:	4b07      	ldr	r3, [pc, #28]	@ (800e398 <__assert_func+0x30>)
 800e37a:	461c      	mov	r4, r3
 800e37c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e380:	9100      	str	r1, [sp, #0]
 800e382:	462b      	mov	r3, r5
 800e384:	4905      	ldr	r1, [pc, #20]	@ (800e39c <__assert_func+0x34>)
 800e386:	f000 fba7 	bl	800ead8 <fiprintf>
 800e38a:	f000 fbb7 	bl	800eafc <abort>
 800e38e:	4b04      	ldr	r3, [pc, #16]	@ (800e3a0 <__assert_func+0x38>)
 800e390:	e7f4      	b.n	800e37c <__assert_func+0x14>
 800e392:	bf00      	nop
 800e394:	2000001c 	.word	0x2000001c
 800e398:	0800f185 	.word	0x0800f185
 800e39c:	0800f157 	.word	0x0800f157
 800e3a0:	0800f14a 	.word	0x0800f14a

0800e3a4 <_calloc_r>:
 800e3a4:	b570      	push	{r4, r5, r6, lr}
 800e3a6:	fba1 5402 	umull	r5, r4, r1, r2
 800e3aa:	b93c      	cbnz	r4, 800e3bc <_calloc_r+0x18>
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	f7fe f80b 	bl	800c3c8 <_malloc_r>
 800e3b2:	4606      	mov	r6, r0
 800e3b4:	b928      	cbnz	r0, 800e3c2 <_calloc_r+0x1e>
 800e3b6:	2600      	movs	r6, #0
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	bd70      	pop	{r4, r5, r6, pc}
 800e3bc:	220c      	movs	r2, #12
 800e3be:	6002      	str	r2, [r0, #0]
 800e3c0:	e7f9      	b.n	800e3b6 <_calloc_r+0x12>
 800e3c2:	462a      	mov	r2, r5
 800e3c4:	4621      	mov	r1, r4
 800e3c6:	f7fd f853 	bl	800b470 <memset>
 800e3ca:	e7f5      	b.n	800e3b8 <_calloc_r+0x14>

0800e3cc <rshift>:
 800e3cc:	6903      	ldr	r3, [r0, #16]
 800e3ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e3d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e3da:	f100 0414 	add.w	r4, r0, #20
 800e3de:	dd45      	ble.n	800e46c <rshift+0xa0>
 800e3e0:	f011 011f 	ands.w	r1, r1, #31
 800e3e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e3e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e3ec:	d10c      	bne.n	800e408 <rshift+0x3c>
 800e3ee:	f100 0710 	add.w	r7, r0, #16
 800e3f2:	4629      	mov	r1, r5
 800e3f4:	42b1      	cmp	r1, r6
 800e3f6:	d334      	bcc.n	800e462 <rshift+0x96>
 800e3f8:	1a9b      	subs	r3, r3, r2
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	1eea      	subs	r2, r5, #3
 800e3fe:	4296      	cmp	r6, r2
 800e400:	bf38      	it	cc
 800e402:	2300      	movcc	r3, #0
 800e404:	4423      	add	r3, r4
 800e406:	e015      	b.n	800e434 <rshift+0x68>
 800e408:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e40c:	f1c1 0820 	rsb	r8, r1, #32
 800e410:	40cf      	lsrs	r7, r1
 800e412:	f105 0e04 	add.w	lr, r5, #4
 800e416:	46a1      	mov	r9, r4
 800e418:	4576      	cmp	r6, lr
 800e41a:	46f4      	mov	ip, lr
 800e41c:	d815      	bhi.n	800e44a <rshift+0x7e>
 800e41e:	1a9a      	subs	r2, r3, r2
 800e420:	0092      	lsls	r2, r2, #2
 800e422:	3a04      	subs	r2, #4
 800e424:	3501      	adds	r5, #1
 800e426:	42ae      	cmp	r6, r5
 800e428:	bf38      	it	cc
 800e42a:	2200      	movcc	r2, #0
 800e42c:	18a3      	adds	r3, r4, r2
 800e42e:	50a7      	str	r7, [r4, r2]
 800e430:	b107      	cbz	r7, 800e434 <rshift+0x68>
 800e432:	3304      	adds	r3, #4
 800e434:	1b1a      	subs	r2, r3, r4
 800e436:	42a3      	cmp	r3, r4
 800e438:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e43c:	bf08      	it	eq
 800e43e:	2300      	moveq	r3, #0
 800e440:	6102      	str	r2, [r0, #16]
 800e442:	bf08      	it	eq
 800e444:	6143      	streq	r3, [r0, #20]
 800e446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e44a:	f8dc c000 	ldr.w	ip, [ip]
 800e44e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e452:	ea4c 0707 	orr.w	r7, ip, r7
 800e456:	f849 7b04 	str.w	r7, [r9], #4
 800e45a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e45e:	40cf      	lsrs	r7, r1
 800e460:	e7da      	b.n	800e418 <rshift+0x4c>
 800e462:	f851 cb04 	ldr.w	ip, [r1], #4
 800e466:	f847 cf04 	str.w	ip, [r7, #4]!
 800e46a:	e7c3      	b.n	800e3f4 <rshift+0x28>
 800e46c:	4623      	mov	r3, r4
 800e46e:	e7e1      	b.n	800e434 <rshift+0x68>

0800e470 <__hexdig_fun>:
 800e470:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e474:	2b09      	cmp	r3, #9
 800e476:	d802      	bhi.n	800e47e <__hexdig_fun+0xe>
 800e478:	3820      	subs	r0, #32
 800e47a:	b2c0      	uxtb	r0, r0
 800e47c:	4770      	bx	lr
 800e47e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e482:	2b05      	cmp	r3, #5
 800e484:	d801      	bhi.n	800e48a <__hexdig_fun+0x1a>
 800e486:	3847      	subs	r0, #71	@ 0x47
 800e488:	e7f7      	b.n	800e47a <__hexdig_fun+0xa>
 800e48a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e48e:	2b05      	cmp	r3, #5
 800e490:	d801      	bhi.n	800e496 <__hexdig_fun+0x26>
 800e492:	3827      	subs	r0, #39	@ 0x27
 800e494:	e7f1      	b.n	800e47a <__hexdig_fun+0xa>
 800e496:	2000      	movs	r0, #0
 800e498:	4770      	bx	lr
	...

0800e49c <__gethex>:
 800e49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a0:	b085      	sub	sp, #20
 800e4a2:	468a      	mov	sl, r1
 800e4a4:	9302      	str	r3, [sp, #8]
 800e4a6:	680b      	ldr	r3, [r1, #0]
 800e4a8:	9001      	str	r0, [sp, #4]
 800e4aa:	4690      	mov	r8, r2
 800e4ac:	1c9c      	adds	r4, r3, #2
 800e4ae:	46a1      	mov	r9, r4
 800e4b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e4b4:	2830      	cmp	r0, #48	@ 0x30
 800e4b6:	d0fa      	beq.n	800e4ae <__gethex+0x12>
 800e4b8:	eba9 0303 	sub.w	r3, r9, r3
 800e4bc:	f1a3 0b02 	sub.w	fp, r3, #2
 800e4c0:	f7ff ffd6 	bl	800e470 <__hexdig_fun>
 800e4c4:	4605      	mov	r5, r0
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	d168      	bne.n	800e59c <__gethex+0x100>
 800e4ca:	49a0      	ldr	r1, [pc, #640]	@ (800e74c <__gethex+0x2b0>)
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	4648      	mov	r0, r9
 800e4d0:	f7ff fefe 	bl	800e2d0 <strncmp>
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d167      	bne.n	800e5aa <__gethex+0x10e>
 800e4da:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e4de:	4626      	mov	r6, r4
 800e4e0:	f7ff ffc6 	bl	800e470 <__hexdig_fun>
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d062      	beq.n	800e5ae <__gethex+0x112>
 800e4e8:	4623      	mov	r3, r4
 800e4ea:	7818      	ldrb	r0, [r3, #0]
 800e4ec:	2830      	cmp	r0, #48	@ 0x30
 800e4ee:	4699      	mov	r9, r3
 800e4f0:	f103 0301 	add.w	r3, r3, #1
 800e4f4:	d0f9      	beq.n	800e4ea <__gethex+0x4e>
 800e4f6:	f7ff ffbb 	bl	800e470 <__hexdig_fun>
 800e4fa:	fab0 f580 	clz	r5, r0
 800e4fe:	096d      	lsrs	r5, r5, #5
 800e500:	f04f 0b01 	mov.w	fp, #1
 800e504:	464a      	mov	r2, r9
 800e506:	4616      	mov	r6, r2
 800e508:	3201      	adds	r2, #1
 800e50a:	7830      	ldrb	r0, [r6, #0]
 800e50c:	f7ff ffb0 	bl	800e470 <__hexdig_fun>
 800e510:	2800      	cmp	r0, #0
 800e512:	d1f8      	bne.n	800e506 <__gethex+0x6a>
 800e514:	498d      	ldr	r1, [pc, #564]	@ (800e74c <__gethex+0x2b0>)
 800e516:	2201      	movs	r2, #1
 800e518:	4630      	mov	r0, r6
 800e51a:	f7ff fed9 	bl	800e2d0 <strncmp>
 800e51e:	2800      	cmp	r0, #0
 800e520:	d13f      	bne.n	800e5a2 <__gethex+0x106>
 800e522:	b944      	cbnz	r4, 800e536 <__gethex+0x9a>
 800e524:	1c74      	adds	r4, r6, #1
 800e526:	4622      	mov	r2, r4
 800e528:	4616      	mov	r6, r2
 800e52a:	3201      	adds	r2, #1
 800e52c:	7830      	ldrb	r0, [r6, #0]
 800e52e:	f7ff ff9f 	bl	800e470 <__hexdig_fun>
 800e532:	2800      	cmp	r0, #0
 800e534:	d1f8      	bne.n	800e528 <__gethex+0x8c>
 800e536:	1ba4      	subs	r4, r4, r6
 800e538:	00a7      	lsls	r7, r4, #2
 800e53a:	7833      	ldrb	r3, [r6, #0]
 800e53c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e540:	2b50      	cmp	r3, #80	@ 0x50
 800e542:	d13e      	bne.n	800e5c2 <__gethex+0x126>
 800e544:	7873      	ldrb	r3, [r6, #1]
 800e546:	2b2b      	cmp	r3, #43	@ 0x2b
 800e548:	d033      	beq.n	800e5b2 <__gethex+0x116>
 800e54a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e54c:	d034      	beq.n	800e5b8 <__gethex+0x11c>
 800e54e:	1c71      	adds	r1, r6, #1
 800e550:	2400      	movs	r4, #0
 800e552:	7808      	ldrb	r0, [r1, #0]
 800e554:	f7ff ff8c 	bl	800e470 <__hexdig_fun>
 800e558:	1e43      	subs	r3, r0, #1
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b18      	cmp	r3, #24
 800e55e:	d830      	bhi.n	800e5c2 <__gethex+0x126>
 800e560:	f1a0 0210 	sub.w	r2, r0, #16
 800e564:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e568:	f7ff ff82 	bl	800e470 <__hexdig_fun>
 800e56c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800e570:	fa5f fc8c 	uxtb.w	ip, ip
 800e574:	f1bc 0f18 	cmp.w	ip, #24
 800e578:	f04f 030a 	mov.w	r3, #10
 800e57c:	d91e      	bls.n	800e5bc <__gethex+0x120>
 800e57e:	b104      	cbz	r4, 800e582 <__gethex+0xe6>
 800e580:	4252      	negs	r2, r2
 800e582:	4417      	add	r7, r2
 800e584:	f8ca 1000 	str.w	r1, [sl]
 800e588:	b1ed      	cbz	r5, 800e5c6 <__gethex+0x12a>
 800e58a:	f1bb 0f00 	cmp.w	fp, #0
 800e58e:	bf0c      	ite	eq
 800e590:	2506      	moveq	r5, #6
 800e592:	2500      	movne	r5, #0
 800e594:	4628      	mov	r0, r5
 800e596:	b005      	add	sp, #20
 800e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e59c:	2500      	movs	r5, #0
 800e59e:	462c      	mov	r4, r5
 800e5a0:	e7b0      	b.n	800e504 <__gethex+0x68>
 800e5a2:	2c00      	cmp	r4, #0
 800e5a4:	d1c7      	bne.n	800e536 <__gethex+0x9a>
 800e5a6:	4627      	mov	r7, r4
 800e5a8:	e7c7      	b.n	800e53a <__gethex+0x9e>
 800e5aa:	464e      	mov	r6, r9
 800e5ac:	462f      	mov	r7, r5
 800e5ae:	2501      	movs	r5, #1
 800e5b0:	e7c3      	b.n	800e53a <__gethex+0x9e>
 800e5b2:	2400      	movs	r4, #0
 800e5b4:	1cb1      	adds	r1, r6, #2
 800e5b6:	e7cc      	b.n	800e552 <__gethex+0xb6>
 800e5b8:	2401      	movs	r4, #1
 800e5ba:	e7fb      	b.n	800e5b4 <__gethex+0x118>
 800e5bc:	fb03 0002 	mla	r0, r3, r2, r0
 800e5c0:	e7ce      	b.n	800e560 <__gethex+0xc4>
 800e5c2:	4631      	mov	r1, r6
 800e5c4:	e7de      	b.n	800e584 <__gethex+0xe8>
 800e5c6:	eba6 0309 	sub.w	r3, r6, r9
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	2b07      	cmp	r3, #7
 800e5d0:	dc0a      	bgt.n	800e5e8 <__gethex+0x14c>
 800e5d2:	9801      	ldr	r0, [sp, #4]
 800e5d4:	f7fd ff84 	bl	800c4e0 <_Balloc>
 800e5d8:	4604      	mov	r4, r0
 800e5da:	b940      	cbnz	r0, 800e5ee <__gethex+0x152>
 800e5dc:	4b5c      	ldr	r3, [pc, #368]	@ (800e750 <__gethex+0x2b4>)
 800e5de:	4602      	mov	r2, r0
 800e5e0:	21e4      	movs	r1, #228	@ 0xe4
 800e5e2:	485c      	ldr	r0, [pc, #368]	@ (800e754 <__gethex+0x2b8>)
 800e5e4:	f7ff fec0 	bl	800e368 <__assert_func>
 800e5e8:	3101      	adds	r1, #1
 800e5ea:	105b      	asrs	r3, r3, #1
 800e5ec:	e7ef      	b.n	800e5ce <__gethex+0x132>
 800e5ee:	f100 0a14 	add.w	sl, r0, #20
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	4655      	mov	r5, sl
 800e5f6:	469b      	mov	fp, r3
 800e5f8:	45b1      	cmp	r9, r6
 800e5fa:	d337      	bcc.n	800e66c <__gethex+0x1d0>
 800e5fc:	f845 bb04 	str.w	fp, [r5], #4
 800e600:	eba5 050a 	sub.w	r5, r5, sl
 800e604:	10ad      	asrs	r5, r5, #2
 800e606:	6125      	str	r5, [r4, #16]
 800e608:	4658      	mov	r0, fp
 800e60a:	f7fe f85b 	bl	800c6c4 <__hi0bits>
 800e60e:	016d      	lsls	r5, r5, #5
 800e610:	f8d8 6000 	ldr.w	r6, [r8]
 800e614:	1a2d      	subs	r5, r5, r0
 800e616:	42b5      	cmp	r5, r6
 800e618:	dd54      	ble.n	800e6c4 <__gethex+0x228>
 800e61a:	1bad      	subs	r5, r5, r6
 800e61c:	4629      	mov	r1, r5
 800e61e:	4620      	mov	r0, r4
 800e620:	f7fe fbef 	bl	800ce02 <__any_on>
 800e624:	4681      	mov	r9, r0
 800e626:	b178      	cbz	r0, 800e648 <__gethex+0x1ac>
 800e628:	1e6b      	subs	r3, r5, #1
 800e62a:	1159      	asrs	r1, r3, #5
 800e62c:	f003 021f 	and.w	r2, r3, #31
 800e630:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e634:	f04f 0901 	mov.w	r9, #1
 800e638:	fa09 f202 	lsl.w	r2, r9, r2
 800e63c:	420a      	tst	r2, r1
 800e63e:	d003      	beq.n	800e648 <__gethex+0x1ac>
 800e640:	454b      	cmp	r3, r9
 800e642:	dc36      	bgt.n	800e6b2 <__gethex+0x216>
 800e644:	f04f 0902 	mov.w	r9, #2
 800e648:	4629      	mov	r1, r5
 800e64a:	4620      	mov	r0, r4
 800e64c:	f7ff febe 	bl	800e3cc <rshift>
 800e650:	442f      	add	r7, r5
 800e652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e656:	42bb      	cmp	r3, r7
 800e658:	da42      	bge.n	800e6e0 <__gethex+0x244>
 800e65a:	9801      	ldr	r0, [sp, #4]
 800e65c:	4621      	mov	r1, r4
 800e65e:	f7fd ff7f 	bl	800c560 <_Bfree>
 800e662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e664:	2300      	movs	r3, #0
 800e666:	6013      	str	r3, [r2, #0]
 800e668:	25a3      	movs	r5, #163	@ 0xa3
 800e66a:	e793      	b.n	800e594 <__gethex+0xf8>
 800e66c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e670:	2a2e      	cmp	r2, #46	@ 0x2e
 800e672:	d012      	beq.n	800e69a <__gethex+0x1fe>
 800e674:	2b20      	cmp	r3, #32
 800e676:	d104      	bne.n	800e682 <__gethex+0x1e6>
 800e678:	f845 bb04 	str.w	fp, [r5], #4
 800e67c:	f04f 0b00 	mov.w	fp, #0
 800e680:	465b      	mov	r3, fp
 800e682:	7830      	ldrb	r0, [r6, #0]
 800e684:	9303      	str	r3, [sp, #12]
 800e686:	f7ff fef3 	bl	800e470 <__hexdig_fun>
 800e68a:	9b03      	ldr	r3, [sp, #12]
 800e68c:	f000 000f 	and.w	r0, r0, #15
 800e690:	4098      	lsls	r0, r3
 800e692:	ea4b 0b00 	orr.w	fp, fp, r0
 800e696:	3304      	adds	r3, #4
 800e698:	e7ae      	b.n	800e5f8 <__gethex+0x15c>
 800e69a:	45b1      	cmp	r9, r6
 800e69c:	d8ea      	bhi.n	800e674 <__gethex+0x1d8>
 800e69e:	492b      	ldr	r1, [pc, #172]	@ (800e74c <__gethex+0x2b0>)
 800e6a0:	9303      	str	r3, [sp, #12]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	f7ff fe13 	bl	800e2d0 <strncmp>
 800e6aa:	9b03      	ldr	r3, [sp, #12]
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d1e1      	bne.n	800e674 <__gethex+0x1d8>
 800e6b0:	e7a2      	b.n	800e5f8 <__gethex+0x15c>
 800e6b2:	1ea9      	subs	r1, r5, #2
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f7fe fba4 	bl	800ce02 <__any_on>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d0c2      	beq.n	800e644 <__gethex+0x1a8>
 800e6be:	f04f 0903 	mov.w	r9, #3
 800e6c2:	e7c1      	b.n	800e648 <__gethex+0x1ac>
 800e6c4:	da09      	bge.n	800e6da <__gethex+0x23e>
 800e6c6:	1b75      	subs	r5, r6, r5
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	9801      	ldr	r0, [sp, #4]
 800e6cc:	462a      	mov	r2, r5
 800e6ce:	f7fe f95f 	bl	800c990 <__lshift>
 800e6d2:	1b7f      	subs	r7, r7, r5
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	f100 0a14 	add.w	sl, r0, #20
 800e6da:	f04f 0900 	mov.w	r9, #0
 800e6de:	e7b8      	b.n	800e652 <__gethex+0x1b6>
 800e6e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e6e4:	42bd      	cmp	r5, r7
 800e6e6:	dd6f      	ble.n	800e7c8 <__gethex+0x32c>
 800e6e8:	1bed      	subs	r5, r5, r7
 800e6ea:	42ae      	cmp	r6, r5
 800e6ec:	dc34      	bgt.n	800e758 <__gethex+0x2bc>
 800e6ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d022      	beq.n	800e73c <__gethex+0x2a0>
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d024      	beq.n	800e744 <__gethex+0x2a8>
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d115      	bne.n	800e72a <__gethex+0x28e>
 800e6fe:	42ae      	cmp	r6, r5
 800e700:	d113      	bne.n	800e72a <__gethex+0x28e>
 800e702:	2e01      	cmp	r6, #1
 800e704:	d10b      	bne.n	800e71e <__gethex+0x282>
 800e706:	9a02      	ldr	r2, [sp, #8]
 800e708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e70c:	6013      	str	r3, [r2, #0]
 800e70e:	2301      	movs	r3, #1
 800e710:	6123      	str	r3, [r4, #16]
 800e712:	f8ca 3000 	str.w	r3, [sl]
 800e716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e718:	2562      	movs	r5, #98	@ 0x62
 800e71a:	601c      	str	r4, [r3, #0]
 800e71c:	e73a      	b.n	800e594 <__gethex+0xf8>
 800e71e:	1e71      	subs	r1, r6, #1
 800e720:	4620      	mov	r0, r4
 800e722:	f7fe fb6e 	bl	800ce02 <__any_on>
 800e726:	2800      	cmp	r0, #0
 800e728:	d1ed      	bne.n	800e706 <__gethex+0x26a>
 800e72a:	9801      	ldr	r0, [sp, #4]
 800e72c:	4621      	mov	r1, r4
 800e72e:	f7fd ff17 	bl	800c560 <_Bfree>
 800e732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e734:	2300      	movs	r3, #0
 800e736:	6013      	str	r3, [r2, #0]
 800e738:	2550      	movs	r5, #80	@ 0x50
 800e73a:	e72b      	b.n	800e594 <__gethex+0xf8>
 800e73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1f3      	bne.n	800e72a <__gethex+0x28e>
 800e742:	e7e0      	b.n	800e706 <__gethex+0x26a>
 800e744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e746:	2b00      	cmp	r3, #0
 800e748:	d1dd      	bne.n	800e706 <__gethex+0x26a>
 800e74a:	e7ee      	b.n	800e72a <__gethex+0x28e>
 800e74c:	0800efd8 	.word	0x0800efd8
 800e750:	0800ee6d 	.word	0x0800ee6d
 800e754:	0800f186 	.word	0x0800f186
 800e758:	1e6f      	subs	r7, r5, #1
 800e75a:	f1b9 0f00 	cmp.w	r9, #0
 800e75e:	d130      	bne.n	800e7c2 <__gethex+0x326>
 800e760:	b127      	cbz	r7, 800e76c <__gethex+0x2d0>
 800e762:	4639      	mov	r1, r7
 800e764:	4620      	mov	r0, r4
 800e766:	f7fe fb4c 	bl	800ce02 <__any_on>
 800e76a:	4681      	mov	r9, r0
 800e76c:	117a      	asrs	r2, r7, #5
 800e76e:	2301      	movs	r3, #1
 800e770:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e774:	f007 071f 	and.w	r7, r7, #31
 800e778:	40bb      	lsls	r3, r7
 800e77a:	4213      	tst	r3, r2
 800e77c:	4629      	mov	r1, r5
 800e77e:	4620      	mov	r0, r4
 800e780:	bf18      	it	ne
 800e782:	f049 0902 	orrne.w	r9, r9, #2
 800e786:	f7ff fe21 	bl	800e3cc <rshift>
 800e78a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e78e:	1b76      	subs	r6, r6, r5
 800e790:	2502      	movs	r5, #2
 800e792:	f1b9 0f00 	cmp.w	r9, #0
 800e796:	d047      	beq.n	800e828 <__gethex+0x38c>
 800e798:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e79c:	2b02      	cmp	r3, #2
 800e79e:	d015      	beq.n	800e7cc <__gethex+0x330>
 800e7a0:	2b03      	cmp	r3, #3
 800e7a2:	d017      	beq.n	800e7d4 <__gethex+0x338>
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d109      	bne.n	800e7bc <__gethex+0x320>
 800e7a8:	f019 0f02 	tst.w	r9, #2
 800e7ac:	d006      	beq.n	800e7bc <__gethex+0x320>
 800e7ae:	f8da 3000 	ldr.w	r3, [sl]
 800e7b2:	ea49 0903 	orr.w	r9, r9, r3
 800e7b6:	f019 0f01 	tst.w	r9, #1
 800e7ba:	d10e      	bne.n	800e7da <__gethex+0x33e>
 800e7bc:	f045 0510 	orr.w	r5, r5, #16
 800e7c0:	e032      	b.n	800e828 <__gethex+0x38c>
 800e7c2:	f04f 0901 	mov.w	r9, #1
 800e7c6:	e7d1      	b.n	800e76c <__gethex+0x2d0>
 800e7c8:	2501      	movs	r5, #1
 800e7ca:	e7e2      	b.n	800e792 <__gethex+0x2f6>
 800e7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7ce:	f1c3 0301 	rsb	r3, r3, #1
 800e7d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d0f0      	beq.n	800e7bc <__gethex+0x320>
 800e7da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e7de:	f104 0314 	add.w	r3, r4, #20
 800e7e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e7e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e7ea:	f04f 0c00 	mov.w	ip, #0
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7f4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e7f8:	d01b      	beq.n	800e832 <__gethex+0x396>
 800e7fa:	3201      	adds	r2, #1
 800e7fc:	6002      	str	r2, [r0, #0]
 800e7fe:	2d02      	cmp	r5, #2
 800e800:	f104 0314 	add.w	r3, r4, #20
 800e804:	d13c      	bne.n	800e880 <__gethex+0x3e4>
 800e806:	f8d8 2000 	ldr.w	r2, [r8]
 800e80a:	3a01      	subs	r2, #1
 800e80c:	42b2      	cmp	r2, r6
 800e80e:	d109      	bne.n	800e824 <__gethex+0x388>
 800e810:	1171      	asrs	r1, r6, #5
 800e812:	2201      	movs	r2, #1
 800e814:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e818:	f006 061f 	and.w	r6, r6, #31
 800e81c:	fa02 f606 	lsl.w	r6, r2, r6
 800e820:	421e      	tst	r6, r3
 800e822:	d13a      	bne.n	800e89a <__gethex+0x3fe>
 800e824:	f045 0520 	orr.w	r5, r5, #32
 800e828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e82a:	601c      	str	r4, [r3, #0]
 800e82c:	9b02      	ldr	r3, [sp, #8]
 800e82e:	601f      	str	r7, [r3, #0]
 800e830:	e6b0      	b.n	800e594 <__gethex+0xf8>
 800e832:	4299      	cmp	r1, r3
 800e834:	f843 cc04 	str.w	ip, [r3, #-4]
 800e838:	d8d9      	bhi.n	800e7ee <__gethex+0x352>
 800e83a:	68a3      	ldr	r3, [r4, #8]
 800e83c:	459b      	cmp	fp, r3
 800e83e:	db17      	blt.n	800e870 <__gethex+0x3d4>
 800e840:	6861      	ldr	r1, [r4, #4]
 800e842:	9801      	ldr	r0, [sp, #4]
 800e844:	3101      	adds	r1, #1
 800e846:	f7fd fe4b 	bl	800c4e0 <_Balloc>
 800e84a:	4681      	mov	r9, r0
 800e84c:	b918      	cbnz	r0, 800e856 <__gethex+0x3ba>
 800e84e:	4b1a      	ldr	r3, [pc, #104]	@ (800e8b8 <__gethex+0x41c>)
 800e850:	4602      	mov	r2, r0
 800e852:	2184      	movs	r1, #132	@ 0x84
 800e854:	e6c5      	b.n	800e5e2 <__gethex+0x146>
 800e856:	6922      	ldr	r2, [r4, #16]
 800e858:	3202      	adds	r2, #2
 800e85a:	f104 010c 	add.w	r1, r4, #12
 800e85e:	0092      	lsls	r2, r2, #2
 800e860:	300c      	adds	r0, #12
 800e862:	f7fc feda 	bl	800b61a <memcpy>
 800e866:	4621      	mov	r1, r4
 800e868:	9801      	ldr	r0, [sp, #4]
 800e86a:	f7fd fe79 	bl	800c560 <_Bfree>
 800e86e:	464c      	mov	r4, r9
 800e870:	6923      	ldr	r3, [r4, #16]
 800e872:	1c5a      	adds	r2, r3, #1
 800e874:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e878:	6122      	str	r2, [r4, #16]
 800e87a:	2201      	movs	r2, #1
 800e87c:	615a      	str	r2, [r3, #20]
 800e87e:	e7be      	b.n	800e7fe <__gethex+0x362>
 800e880:	6922      	ldr	r2, [r4, #16]
 800e882:	455a      	cmp	r2, fp
 800e884:	dd0b      	ble.n	800e89e <__gethex+0x402>
 800e886:	2101      	movs	r1, #1
 800e888:	4620      	mov	r0, r4
 800e88a:	f7ff fd9f 	bl	800e3cc <rshift>
 800e88e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e892:	3701      	adds	r7, #1
 800e894:	42bb      	cmp	r3, r7
 800e896:	f6ff aee0 	blt.w	800e65a <__gethex+0x1be>
 800e89a:	2501      	movs	r5, #1
 800e89c:	e7c2      	b.n	800e824 <__gethex+0x388>
 800e89e:	f016 061f 	ands.w	r6, r6, #31
 800e8a2:	d0fa      	beq.n	800e89a <__gethex+0x3fe>
 800e8a4:	4453      	add	r3, sl
 800e8a6:	f1c6 0620 	rsb	r6, r6, #32
 800e8aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e8ae:	f7fd ff09 	bl	800c6c4 <__hi0bits>
 800e8b2:	42b0      	cmp	r0, r6
 800e8b4:	dbe7      	blt.n	800e886 <__gethex+0x3ea>
 800e8b6:	e7f0      	b.n	800e89a <__gethex+0x3fe>
 800e8b8:	0800ee6d 	.word	0x0800ee6d

0800e8bc <L_shift>:
 800e8bc:	f1c2 0208 	rsb	r2, r2, #8
 800e8c0:	0092      	lsls	r2, r2, #2
 800e8c2:	b570      	push	{r4, r5, r6, lr}
 800e8c4:	f1c2 0620 	rsb	r6, r2, #32
 800e8c8:	6843      	ldr	r3, [r0, #4]
 800e8ca:	6804      	ldr	r4, [r0, #0]
 800e8cc:	fa03 f506 	lsl.w	r5, r3, r6
 800e8d0:	432c      	orrs	r4, r5
 800e8d2:	40d3      	lsrs	r3, r2
 800e8d4:	6004      	str	r4, [r0, #0]
 800e8d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e8da:	4288      	cmp	r0, r1
 800e8dc:	d3f4      	bcc.n	800e8c8 <L_shift+0xc>
 800e8de:	bd70      	pop	{r4, r5, r6, pc}

0800e8e0 <__match>:
 800e8e0:	b530      	push	{r4, r5, lr}
 800e8e2:	6803      	ldr	r3, [r0, #0]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8ea:	b914      	cbnz	r4, 800e8f2 <__match+0x12>
 800e8ec:	6003      	str	r3, [r0, #0]
 800e8ee:	2001      	movs	r0, #1
 800e8f0:	bd30      	pop	{r4, r5, pc}
 800e8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e8fa:	2d19      	cmp	r5, #25
 800e8fc:	bf98      	it	ls
 800e8fe:	3220      	addls	r2, #32
 800e900:	42a2      	cmp	r2, r4
 800e902:	d0f0      	beq.n	800e8e6 <__match+0x6>
 800e904:	2000      	movs	r0, #0
 800e906:	e7f3      	b.n	800e8f0 <__match+0x10>

0800e908 <__hexnan>:
 800e908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e90c:	680b      	ldr	r3, [r1, #0]
 800e90e:	6801      	ldr	r1, [r0, #0]
 800e910:	115e      	asrs	r6, r3, #5
 800e912:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e916:	f013 031f 	ands.w	r3, r3, #31
 800e91a:	b087      	sub	sp, #28
 800e91c:	bf18      	it	ne
 800e91e:	3604      	addne	r6, #4
 800e920:	2500      	movs	r5, #0
 800e922:	1f37      	subs	r7, r6, #4
 800e924:	4682      	mov	sl, r0
 800e926:	4690      	mov	r8, r2
 800e928:	9301      	str	r3, [sp, #4]
 800e92a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e92e:	46b9      	mov	r9, r7
 800e930:	463c      	mov	r4, r7
 800e932:	9502      	str	r5, [sp, #8]
 800e934:	46ab      	mov	fp, r5
 800e936:	784a      	ldrb	r2, [r1, #1]
 800e938:	1c4b      	adds	r3, r1, #1
 800e93a:	9303      	str	r3, [sp, #12]
 800e93c:	b342      	cbz	r2, 800e990 <__hexnan+0x88>
 800e93e:	4610      	mov	r0, r2
 800e940:	9105      	str	r1, [sp, #20]
 800e942:	9204      	str	r2, [sp, #16]
 800e944:	f7ff fd94 	bl	800e470 <__hexdig_fun>
 800e948:	2800      	cmp	r0, #0
 800e94a:	d151      	bne.n	800e9f0 <__hexnan+0xe8>
 800e94c:	9a04      	ldr	r2, [sp, #16]
 800e94e:	9905      	ldr	r1, [sp, #20]
 800e950:	2a20      	cmp	r2, #32
 800e952:	d818      	bhi.n	800e986 <__hexnan+0x7e>
 800e954:	9b02      	ldr	r3, [sp, #8]
 800e956:	459b      	cmp	fp, r3
 800e958:	dd13      	ble.n	800e982 <__hexnan+0x7a>
 800e95a:	454c      	cmp	r4, r9
 800e95c:	d206      	bcs.n	800e96c <__hexnan+0x64>
 800e95e:	2d07      	cmp	r5, #7
 800e960:	dc04      	bgt.n	800e96c <__hexnan+0x64>
 800e962:	462a      	mov	r2, r5
 800e964:	4649      	mov	r1, r9
 800e966:	4620      	mov	r0, r4
 800e968:	f7ff ffa8 	bl	800e8bc <L_shift>
 800e96c:	4544      	cmp	r4, r8
 800e96e:	d952      	bls.n	800ea16 <__hexnan+0x10e>
 800e970:	2300      	movs	r3, #0
 800e972:	f1a4 0904 	sub.w	r9, r4, #4
 800e976:	f844 3c04 	str.w	r3, [r4, #-4]
 800e97a:	f8cd b008 	str.w	fp, [sp, #8]
 800e97e:	464c      	mov	r4, r9
 800e980:	461d      	mov	r5, r3
 800e982:	9903      	ldr	r1, [sp, #12]
 800e984:	e7d7      	b.n	800e936 <__hexnan+0x2e>
 800e986:	2a29      	cmp	r2, #41	@ 0x29
 800e988:	d157      	bne.n	800ea3a <__hexnan+0x132>
 800e98a:	3102      	adds	r1, #2
 800e98c:	f8ca 1000 	str.w	r1, [sl]
 800e990:	f1bb 0f00 	cmp.w	fp, #0
 800e994:	d051      	beq.n	800ea3a <__hexnan+0x132>
 800e996:	454c      	cmp	r4, r9
 800e998:	d206      	bcs.n	800e9a8 <__hexnan+0xa0>
 800e99a:	2d07      	cmp	r5, #7
 800e99c:	dc04      	bgt.n	800e9a8 <__hexnan+0xa0>
 800e99e:	462a      	mov	r2, r5
 800e9a0:	4649      	mov	r1, r9
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f7ff ff8a 	bl	800e8bc <L_shift>
 800e9a8:	4544      	cmp	r4, r8
 800e9aa:	d936      	bls.n	800ea1a <__hexnan+0x112>
 800e9ac:	f1a8 0204 	sub.w	r2, r8, #4
 800e9b0:	4623      	mov	r3, r4
 800e9b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e9b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e9ba:	429f      	cmp	r7, r3
 800e9bc:	d2f9      	bcs.n	800e9b2 <__hexnan+0xaa>
 800e9be:	1b3b      	subs	r3, r7, r4
 800e9c0:	f023 0303 	bic.w	r3, r3, #3
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	3401      	adds	r4, #1
 800e9c8:	3e03      	subs	r6, #3
 800e9ca:	42b4      	cmp	r4, r6
 800e9cc:	bf88      	it	hi
 800e9ce:	2304      	movhi	r3, #4
 800e9d0:	4443      	add	r3, r8
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f843 2b04 	str.w	r2, [r3], #4
 800e9d8:	429f      	cmp	r7, r3
 800e9da:	d2fb      	bcs.n	800e9d4 <__hexnan+0xcc>
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	b91b      	cbnz	r3, 800e9e8 <__hexnan+0xe0>
 800e9e0:	4547      	cmp	r7, r8
 800e9e2:	d128      	bne.n	800ea36 <__hexnan+0x12e>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	603b      	str	r3, [r7, #0]
 800e9e8:	2005      	movs	r0, #5
 800e9ea:	b007      	add	sp, #28
 800e9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f0:	3501      	adds	r5, #1
 800e9f2:	2d08      	cmp	r5, #8
 800e9f4:	f10b 0b01 	add.w	fp, fp, #1
 800e9f8:	dd06      	ble.n	800ea08 <__hexnan+0x100>
 800e9fa:	4544      	cmp	r4, r8
 800e9fc:	d9c1      	bls.n	800e982 <__hexnan+0x7a>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea04:	2501      	movs	r5, #1
 800ea06:	3c04      	subs	r4, #4
 800ea08:	6822      	ldr	r2, [r4, #0]
 800ea0a:	f000 000f 	and.w	r0, r0, #15
 800ea0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ea12:	6020      	str	r0, [r4, #0]
 800ea14:	e7b5      	b.n	800e982 <__hexnan+0x7a>
 800ea16:	2508      	movs	r5, #8
 800ea18:	e7b3      	b.n	800e982 <__hexnan+0x7a>
 800ea1a:	9b01      	ldr	r3, [sp, #4]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d0dd      	beq.n	800e9dc <__hexnan+0xd4>
 800ea20:	f1c3 0320 	rsb	r3, r3, #32
 800ea24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea28:	40da      	lsrs	r2, r3
 800ea2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ea2e:	4013      	ands	r3, r2
 800ea30:	f846 3c04 	str.w	r3, [r6, #-4]
 800ea34:	e7d2      	b.n	800e9dc <__hexnan+0xd4>
 800ea36:	3f04      	subs	r7, #4
 800ea38:	e7d0      	b.n	800e9dc <__hexnan+0xd4>
 800ea3a:	2004      	movs	r0, #4
 800ea3c:	e7d5      	b.n	800e9ea <__hexnan+0xe2>

0800ea3e <__ascii_mbtowc>:
 800ea3e:	b082      	sub	sp, #8
 800ea40:	b901      	cbnz	r1, 800ea44 <__ascii_mbtowc+0x6>
 800ea42:	a901      	add	r1, sp, #4
 800ea44:	b142      	cbz	r2, 800ea58 <__ascii_mbtowc+0x1a>
 800ea46:	b14b      	cbz	r3, 800ea5c <__ascii_mbtowc+0x1e>
 800ea48:	7813      	ldrb	r3, [r2, #0]
 800ea4a:	600b      	str	r3, [r1, #0]
 800ea4c:	7812      	ldrb	r2, [r2, #0]
 800ea4e:	1e10      	subs	r0, r2, #0
 800ea50:	bf18      	it	ne
 800ea52:	2001      	movne	r0, #1
 800ea54:	b002      	add	sp, #8
 800ea56:	4770      	bx	lr
 800ea58:	4610      	mov	r0, r2
 800ea5a:	e7fb      	b.n	800ea54 <__ascii_mbtowc+0x16>
 800ea5c:	f06f 0001 	mvn.w	r0, #1
 800ea60:	e7f8      	b.n	800ea54 <__ascii_mbtowc+0x16>

0800ea62 <_realloc_r>:
 800ea62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea66:	4680      	mov	r8, r0
 800ea68:	4615      	mov	r5, r2
 800ea6a:	460c      	mov	r4, r1
 800ea6c:	b921      	cbnz	r1, 800ea78 <_realloc_r+0x16>
 800ea6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea72:	4611      	mov	r1, r2
 800ea74:	f7fd bca8 	b.w	800c3c8 <_malloc_r>
 800ea78:	b92a      	cbnz	r2, 800ea86 <_realloc_r+0x24>
 800ea7a:	f7fd fc31 	bl	800c2e0 <_free_r>
 800ea7e:	2400      	movs	r4, #0
 800ea80:	4620      	mov	r0, r4
 800ea82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea86:	f000 f840 	bl	800eb0a <_malloc_usable_size_r>
 800ea8a:	4285      	cmp	r5, r0
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	d802      	bhi.n	800ea96 <_realloc_r+0x34>
 800ea90:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ea94:	d8f4      	bhi.n	800ea80 <_realloc_r+0x1e>
 800ea96:	4629      	mov	r1, r5
 800ea98:	4640      	mov	r0, r8
 800ea9a:	f7fd fc95 	bl	800c3c8 <_malloc_r>
 800ea9e:	4607      	mov	r7, r0
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d0ec      	beq.n	800ea7e <_realloc_r+0x1c>
 800eaa4:	42b5      	cmp	r5, r6
 800eaa6:	462a      	mov	r2, r5
 800eaa8:	4621      	mov	r1, r4
 800eaaa:	bf28      	it	cs
 800eaac:	4632      	movcs	r2, r6
 800eaae:	f7fc fdb4 	bl	800b61a <memcpy>
 800eab2:	4621      	mov	r1, r4
 800eab4:	4640      	mov	r0, r8
 800eab6:	f7fd fc13 	bl	800c2e0 <_free_r>
 800eaba:	463c      	mov	r4, r7
 800eabc:	e7e0      	b.n	800ea80 <_realloc_r+0x1e>

0800eabe <__ascii_wctomb>:
 800eabe:	4603      	mov	r3, r0
 800eac0:	4608      	mov	r0, r1
 800eac2:	b141      	cbz	r1, 800ead6 <__ascii_wctomb+0x18>
 800eac4:	2aff      	cmp	r2, #255	@ 0xff
 800eac6:	d904      	bls.n	800ead2 <__ascii_wctomb+0x14>
 800eac8:	228a      	movs	r2, #138	@ 0x8a
 800eaca:	601a      	str	r2, [r3, #0]
 800eacc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ead0:	4770      	bx	lr
 800ead2:	700a      	strb	r2, [r1, #0]
 800ead4:	2001      	movs	r0, #1
 800ead6:	4770      	bx	lr

0800ead8 <fiprintf>:
 800ead8:	b40e      	push	{r1, r2, r3}
 800eada:	b503      	push	{r0, r1, lr}
 800eadc:	4601      	mov	r1, r0
 800eade:	ab03      	add	r3, sp, #12
 800eae0:	4805      	ldr	r0, [pc, #20]	@ (800eaf8 <fiprintf+0x20>)
 800eae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eae6:	6800      	ldr	r0, [r0, #0]
 800eae8:	9301      	str	r3, [sp, #4]
 800eaea:	f7ff f9b1 	bl	800de50 <_vfiprintf_r>
 800eaee:	b002      	add	sp, #8
 800eaf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaf4:	b003      	add	sp, #12
 800eaf6:	4770      	bx	lr
 800eaf8:	2000001c 	.word	0x2000001c

0800eafc <abort>:
 800eafc:	b508      	push	{r3, lr}
 800eafe:	2006      	movs	r0, #6
 800eb00:	f000 f834 	bl	800eb6c <raise>
 800eb04:	2001      	movs	r0, #1
 800eb06:	f7f2 ff95 	bl	8001a34 <_exit>

0800eb0a <_malloc_usable_size_r>:
 800eb0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb0e:	1f18      	subs	r0, r3, #4
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	bfbc      	itt	lt
 800eb14:	580b      	ldrlt	r3, [r1, r0]
 800eb16:	18c0      	addlt	r0, r0, r3
 800eb18:	4770      	bx	lr

0800eb1a <_raise_r>:
 800eb1a:	291f      	cmp	r1, #31
 800eb1c:	b538      	push	{r3, r4, r5, lr}
 800eb1e:	4605      	mov	r5, r0
 800eb20:	460c      	mov	r4, r1
 800eb22:	d904      	bls.n	800eb2e <_raise_r+0x14>
 800eb24:	2316      	movs	r3, #22
 800eb26:	6003      	str	r3, [r0, #0]
 800eb28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb2c:	bd38      	pop	{r3, r4, r5, pc}
 800eb2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb30:	b112      	cbz	r2, 800eb38 <_raise_r+0x1e>
 800eb32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb36:	b94b      	cbnz	r3, 800eb4c <_raise_r+0x32>
 800eb38:	4628      	mov	r0, r5
 800eb3a:	f000 f831 	bl	800eba0 <_getpid_r>
 800eb3e:	4622      	mov	r2, r4
 800eb40:	4601      	mov	r1, r0
 800eb42:	4628      	mov	r0, r5
 800eb44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb48:	f000 b818 	b.w	800eb7c <_kill_r>
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d00a      	beq.n	800eb66 <_raise_r+0x4c>
 800eb50:	1c59      	adds	r1, r3, #1
 800eb52:	d103      	bne.n	800eb5c <_raise_r+0x42>
 800eb54:	2316      	movs	r3, #22
 800eb56:	6003      	str	r3, [r0, #0]
 800eb58:	2001      	movs	r0, #1
 800eb5a:	e7e7      	b.n	800eb2c <_raise_r+0x12>
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb62:	4620      	mov	r0, r4
 800eb64:	4798      	blx	r3
 800eb66:	2000      	movs	r0, #0
 800eb68:	e7e0      	b.n	800eb2c <_raise_r+0x12>
	...

0800eb6c <raise>:
 800eb6c:	4b02      	ldr	r3, [pc, #8]	@ (800eb78 <raise+0xc>)
 800eb6e:	4601      	mov	r1, r0
 800eb70:	6818      	ldr	r0, [r3, #0]
 800eb72:	f7ff bfd2 	b.w	800eb1a <_raise_r>
 800eb76:	bf00      	nop
 800eb78:	2000001c 	.word	0x2000001c

0800eb7c <_kill_r>:
 800eb7c:	b538      	push	{r3, r4, r5, lr}
 800eb7e:	4d07      	ldr	r5, [pc, #28]	@ (800eb9c <_kill_r+0x20>)
 800eb80:	2300      	movs	r3, #0
 800eb82:	4604      	mov	r4, r0
 800eb84:	4608      	mov	r0, r1
 800eb86:	4611      	mov	r1, r2
 800eb88:	602b      	str	r3, [r5, #0]
 800eb8a:	f7f2 ff43 	bl	8001a14 <_kill>
 800eb8e:	1c43      	adds	r3, r0, #1
 800eb90:	d102      	bne.n	800eb98 <_kill_r+0x1c>
 800eb92:	682b      	ldr	r3, [r5, #0]
 800eb94:	b103      	cbz	r3, 800eb98 <_kill_r+0x1c>
 800eb96:	6023      	str	r3, [r4, #0]
 800eb98:	bd38      	pop	{r3, r4, r5, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20003094 	.word	0x20003094

0800eba0 <_getpid_r>:
 800eba0:	f7f2 bf30 	b.w	8001a04 <_getpid>

0800eba4 <_init>:
 800eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba6:	bf00      	nop
 800eba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebaa:	bc08      	pop	{r3}
 800ebac:	469e      	mov	lr, r3
 800ebae:	4770      	bx	lr

0800ebb0 <_fini>:
 800ebb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebb2:	bf00      	nop
 800ebb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebb6:	bc08      	pop	{r3}
 800ebb8:	469e      	mov	lr, r3
 800ebba:	4770      	bx	lr
