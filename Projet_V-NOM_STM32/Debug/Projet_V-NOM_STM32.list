
Projet_V-NOM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de50  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  0800e030  0800e030  0000f030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e860  0800e860  00011118  2**0
                  CONTENTS
  4 .ARM          00000008  0800e860  0800e860  0000f860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e868  0800e868  00011118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e868  0800e868  0000f868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e86c  0800e86c  0000f86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001118  20000000  0800e870  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20001118  0800f988  00011118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000198c  0800f988  0001198c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c988  00000000  00000000  00011148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b62  00000000  00000000  0002dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00031638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000136d  00000000  00000000  00032f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002378e  00000000  00000000  000342b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d3b1  00000000  00000000  00057a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1e55  00000000  00000000  00074df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156c49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c0  00000000  00000000  00156c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0015ed4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001118 	.word	0x20001118
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e018 	.word	0x0800e018

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000111c 	.word	0x2000111c
 800021c:	0800e018 	.word	0x0800e018

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f009 fb17 	bl	800a680 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 ffb5 	bl	800302c <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fa6d 	bl	80015a6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 fd42 	bl	8003b60 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fa60 	bl	80015a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f002 f916 	bl	8003334 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 fa4a 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20001134 	.word	0x20001134
 8001120:	0c900008 	.word	0x0c900008

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f009 fa9b 	bl	800a680 <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d134      	bne.n	80011be <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f003 feeb 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 fa19 	bl	80015a6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ToF2_Pin|ToF1_Pin;
 80011a4:	2305      	movs	r3, #5
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ba:	f002 ff45 	bl	8004048 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3768      	adds	r7, #104	@ 0x68
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b42      	ldr	r3, [pc, #264]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a41      	ldr	r2, [pc, #260]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fa:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	4a3b      	ldr	r2, [pc, #236]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001206:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	4a35      	ldr	r2, [pc, #212]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121e:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <MX_GPIO_Init+0x120>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a2f      	ldr	r2, [pc, #188]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8001248:	4829      	ldr	r0, [pc, #164]	@ (80012f0 <MX_GPIO_Init+0x124>)
 800124a:	f003 f87f 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2103      	movs	r1, #3
 8001252:	4828      	ldr	r0, [pc, #160]	@ (80012f4 <MX_GPIO_Init+0x128>)
 8001254:	f003 f87a 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4820      	ldr	r0, [pc, #128]	@ (80012f0 <MX_GPIO_Init+0x124>)
 800126e:	f002 feeb 	bl	8004048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AG_INT1_Pin|AG_INT2_Pin;
 8001272:	2318      	movs	r3, #24
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001276:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128a:	f002 fedd 	bl	8004048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin;
 800128e:	f44f 6341 	mov.w	r3, #3088	@ 0xc10
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4812      	ldr	r0, [pc, #72]	@ (80012f0 <MX_GPIO_Init+0x124>)
 80012a8:	f002 fece 	bl	8004048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80012ac:	2303      	movs	r3, #3
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <MX_GPIO_Init+0x128>)
 80012c4:	f002 fec0 	bl	8004048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin;
 80012c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_MODE_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_GPIO_Init+0x128>)
 80012de:	f002 feb3 	bl	8004048 <HAL_GPIO_Init>

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000400 	.word	0x48000400

080012f8 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001300:	1d39      	adds	r1, r7, #4
 8001302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001306:	2201      	movs	r2, #1
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <__io_putchar+0x20>)
 800130a:	f006 f837 	bl	800737c <HAL_UART_Transmit>

	return ch;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20001304 	.word	0x20001304

0800131c <HAL_UART_RxCpltCallback>:
 * @brief UART receive complete callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <HAL_UART_RxCpltCallback+0x2c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d107      	bne.n	800133e <HAL_UART_RxCpltCallback+0x22>
	{
		//printf("UART2: 0x%X\r\n", rxByte);
		YLIDARX2_UART_irq(&hYLIDAR);
 800132e:	4807      	ldr	r0, [pc, #28]	@ (800134c <HAL_UART_RxCpltCallback+0x30>)
 8001330:	f001 fbae 	bl	8002a90 <YLIDARX2_UART_irq>

		// Restart reception for the next byte
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	4906      	ldr	r1, [pc, #24]	@ (8001350 <HAL_UART_RxCpltCallback+0x34>)
 8001338:	4806      	ldr	r0, [pc, #24]	@ (8001354 <HAL_UART_RxCpltCallback+0x38>)
 800133a:	f006 f8ad 	bl	8007498 <HAL_UART_Receive_IT>
	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40004400 	.word	0x40004400
 800134c:	200011a4 	.word	0x200011a4
 8001350:	200011a0 	.word	0x200011a0
 8001354:	20001398 	.word	0x20001398

08001358 <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1b      	ldr	r2, [pc, #108]	@ (80013d4 <HAL_UART_ErrorCallback+0x7c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d130      	bne.n	80013cc <HAL_UART_ErrorCallback+0x74>
	{
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f006 fc38 	bl	8007be0 <HAL_UART_GetError>
 8001370:	4603      	mov	r3, r0
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_UART_ErrorCallback+0x28>
			printf("Parity Error!\r\n");
 800137a:	4817      	ldr	r0, [pc, #92]	@ (80013d8 <HAL_UART_ErrorCallback+0x80>)
 800137c:	f009 f866 	bl	800a44c <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f006 fc2d 	bl	8007be0 <HAL_UART_GetError>
 8001386:	4603      	mov	r3, r0
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HAL_UART_ErrorCallback+0x3e>
			printf("Noise Error!\r\n");
 8001390:	4812      	ldr	r0, [pc, #72]	@ (80013dc <HAL_UART_ErrorCallback+0x84>)
 8001392:	f009 f85b 	bl	800a44c <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f006 fc22 	bl	8007be0 <HAL_UART_GetError>
 800139c:	4603      	mov	r3, r0
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <HAL_UART_ErrorCallback+0x54>
			printf("Framing Error!\r\n");
 80013a6:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <HAL_UART_ErrorCallback+0x88>)
 80013a8:	f009 f850 	bl	800a44c <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f006 fc17 	bl	8007be0 <HAL_UART_GetError>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_UART_ErrorCallback+0x6a>
			printf("Overrun Error!\r\n");
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <HAL_UART_ErrorCallback+0x8c>)
 80013be:	f009 f845 	bl	800a44c <puts>

		// Restart UART reception after error
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80013c2:	2201      	movs	r2, #1
 80013c4:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <HAL_UART_ErrorCallback+0x90>)
 80013c6:	4809      	ldr	r0, [pc, #36]	@ (80013ec <HAL_UART_ErrorCallback+0x94>)
 80013c8:	f006 f866 	bl	8007498 <HAL_UART_Receive_IT>
	}
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40004400 	.word	0x40004400
 80013d8:	0800e030 	.word	0x0800e030
 80013dc:	0800e040 	.word	0x0800e040
 80013e0:	0800e050 	.word	0x0800e050
 80013e4:	0800e060 	.word	0x0800e060
 80013e8:	200011a0 	.word	0x200011a0
 80013ec:	20001398 	.word	0x20001398

080013f0 <test_ADXL>:
	Motor_SetMode(&hMotors);
	Motor_SetSpeed_percent(&hMotors, 90.0, 90.0);
}

void test_ADXL(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
	printf("\r\nInitializing ADXL...\r\n");
 80013f6:	482c      	ldr	r0, [pc, #176]	@ (80014a8 <test_ADXL+0xb8>)
 80013f8:	f009 f828 	bl	800a44c <puts>

	// Initialize ADXL configuration structure
	ADXL_InitTypeDef adxlConfig;

	adxlConfig.LPMode = LPMODE_NORMAL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	72bb      	strb	r3, [r7, #10]
	adxlConfig.Rate = 10; // 100 Hz
 8001400:	230a      	movs	r3, #10
 8001402:	72fb      	strb	r3, [r7, #11]
	adxlConfig.SPIMode = 0; // 4-wire SPI
 8001404:	2300      	movs	r3, #0
 8001406:	723b      	strb	r3, [r7, #8]
	adxlConfig.IntMode = 0; // Active High
 8001408:	2300      	movs	r3, #0
 800140a:	727b      	strb	r3, [r7, #9]
	adxlConfig.Justify = 0; // Signed
 800140c:	2300      	movs	r3, #0
 800140e:	73bb      	strb	r3, [r7, #14]
	adxlConfig.Resolution = RESOLUTION_10BIT;
 8001410:	2300      	movs	r3, #0
 8001412:	737b      	strb	r3, [r7, #13]
	adxlConfig.Range = RANGE_2G;
 8001414:	2300      	movs	r3, #0
 8001416:	733b      	strb	r3, [r7, #12]
	adxlConfig.AutoSleep = AUTOSLEEPOFF;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
	adxlConfig.LinkMode = LINKMODEOFF;
 800141c:	2300      	movs	r3, #0
 800141e:	743b      	strb	r3, [r7, #16]

	// Initialize ADXL
	if (ADXL_Init(&adxlConfig) != ADXL_OK)
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4618      	mov	r0, r3
 8001426:	f000 ff3d 	bl	80022a4 <ADXL_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <test_ADXL+0x4a>
	{
		printf("ADXL Initialization Failed!\r\n");
 8001430:	481e      	ldr	r0, [pc, #120]	@ (80014ac <test_ADXL+0xbc>)
 8001432:	f009 f80b 	bl	800a44c <puts>
		while (1);
 8001436:	bf00      	nop
 8001438:	e7fd      	b.n	8001436 <test_ADXL+0x46>
	}

	printf("ADXL Initialization Successful!\r\n");
 800143a:	481d      	ldr	r0, [pc, #116]	@ (80014b0 <test_ADXL+0xc0>)
 800143c:	f009 f806 	bl	800a44c <puts>

	// Start Measurement Mode
	ADXL_Measure(ON);
 8001440:	2000      	movs	r0, #0
 8001442:	f001 f861 	bl	8002508 <ADXL_Measure>

	// Data array for accelerometer readings
	int16_t accData[3] = {0, 0, 0};
 8001446:	2300      	movs	r3, #0
 8001448:	803b      	strh	r3, [r7, #0]
 800144a:	2300      	movs	r3, #0
 800144c:	807b      	strh	r3, [r7, #2]
 800144e:	2300      	movs	r3, #0
 8001450:	80bb      	strh	r3, [r7, #4]

	printf("Reading accelerometer data:\r\n");
 8001452:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <test_ADXL+0xc4>)
 8001454:	f008 fffa 	bl	800a44c <puts>

	// Start a 100ms timer
	uint32_t startTime = HAL_GetTick();
 8001458:	f001 fbe4 	bl	8002c24 <HAL_GetTick>
 800145c:	6178      	str	r0, [r7, #20]
	while (HAL_GetTick() - startTime < 100)
 800145e:	e012      	b.n	8001486 <test_ADXL+0x96>
	{
		ADXL_getAccel(accData, OUTPUT_SIGNED);
 8001460:	463b      	mov	r3, r7
 8001462:	2101      	movs	r1, #1
 8001464:	4618      	mov	r0, r3
 8001466:	f000 ffcb 	bl	8002400 <ADXL_getAccel>
		printf("X: %d, Y: %d, Z: %d\r\n", accData[0], accData[1], accData[2]);
 800146a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800146e:	4619      	mov	r1, r3
 8001470:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001474:	461a      	mov	r2, r3
 8001476:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800147a:	480f      	ldr	r0, [pc, #60]	@ (80014b8 <test_ADXL+0xc8>)
 800147c:	f008 ff7e 	bl	800a37c <iprintf>
		HAL_Delay(10); // Delay for 10ms between readings
 8001480:	200a      	movs	r0, #10
 8001482:	f001 fbdb 	bl	8002c3c <HAL_Delay>
	while (HAL_GetTick() - startTime < 100)
 8001486:	f001 fbcd 	bl	8002c24 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b63      	cmp	r3, #99	@ 0x63
 8001492:	d9e5      	bls.n	8001460 <test_ADXL+0x70>
	}

	printf("Finished reading accelerometer data.\r\n");
 8001494:	4809      	ldr	r0, [pc, #36]	@ (80014bc <test_ADXL+0xcc>)
 8001496:	f008 ffd9 	bl	800a44c <puts>

	// Put ADXL in standby mode
	ADXL_Standby(ON);
 800149a:	2000      	movs	r0, #0
 800149c:	f001 f865 	bl	800256a <ADXL_Standby>
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	0800e0b8 	.word	0x0800e0b8
 80014ac:	0800e0d0 	.word	0x0800e0d0
 80014b0:	0800e0f0 	.word	0x0800e0f0
 80014b4:	0800e114 	.word	0x0800e114
 80014b8:	0800e134 	.word	0x0800e134
 80014bc:	0800e14c 	.word	0x0800e14c

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c4:	f001 fb4a 	bl	8002b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c8:	f000 f822 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014cc:	f7ff fe7e 	bl	80011cc <MX_GPIO_Init>
  MX_SPI1_Init();
 80014d0:	f000 f870 	bl	80015b4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80014d4:	f000 fa24 	bl	8001920 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014d8:	f000 faea 	bl	8001ab0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014dc:	f000 fb3e 	bl	8001b5c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80014e0:	f000 fcca 	bl	8001e78 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80014e4:	f000 fc7c 	bl	8001de0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014e8:	f7ff fda4 	bl	8001034 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n*** Waking up V-NOM ***\r\n");
 80014ec:	4805      	ldr	r0, [pc, #20]	@ (8001504 <main+0x44>)
 80014ee:	f008 ffad 	bl	800a44c <puts>
	printf("%s", jumbo_logo_msg);
 80014f2:	4905      	ldr	r1, [pc, #20]	@ (8001508 <main+0x48>)
 80014f4:	4805      	ldr	r0, [pc, #20]	@ (800150c <main+0x4c>)
 80014f6:	f008 ff41 	bl	800a37c <iprintf>
	GP2Y0A41SK0F_Init(&hTof);
	printf("GP2Y0A41SK0F Initialization Successful!\r\n");
	 */

	/* ADXL343 Initialization */
	test_ADXL();
 80014fa:	f7ff ff79 	bl	80013f0 <test_ADXL>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80014fe:	bf00      	nop
 8001500:	e7fd      	b.n	80014fe <main+0x3e>
 8001502:	bf00      	nop
 8001504:	0800e2ec 	.word	0x0800e2ec
 8001508:	20000000 	.word	0x20000000
 800150c:	0800e308 	.word	0x0800e308

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b094      	sub	sp, #80	@ 0x50
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 0318 	add.w	r3, r7, #24
 800151a:	2238      	movs	r2, #56	@ 0x38
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f009 f8ae 	bl	800a680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001532:	2000      	movs	r0, #0
 8001534:	f002 ff22 	bl	800437c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001538:	2302      	movs	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001542:	2340      	movs	r3, #64	@ 0x40
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800154a:	2302      	movs	r3, #2
 800154c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800154e:	2304      	movs	r3, #4
 8001550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001552:	2355      	movs	r3, #85	@ 0x55
 8001554:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001556:	2302      	movs	r3, #2
 8001558:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800155a:	2302      	movs	r3, #2
 800155c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800155e:	2302      	movs	r3, #2
 8001560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f107 0318 	add.w	r3, r7, #24
 8001566:	4618      	mov	r0, r3
 8001568:	f002 ffbc 	bl	80044e4 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001572:	f000 f818 	bl	80015a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	230f      	movs	r3, #15
 8001578:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2303      	movs	r3, #3
 800157c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2104      	movs	r1, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f003 faba 	bl	8004b08 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800159a:	f000 f804 	bl	80015a6 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3750      	adds	r7, #80	@ 0x50
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015aa:	b672      	cpsid	i
}
 80015ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015ae:	bf00      	nop
 80015b0:	e7fd      	b.n	80015ae <Error_Handler+0x8>
	...

080015b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015ba:	4a1c      	ldr	r2, [pc, #112]	@ (800162c <MX_SPI1_Init+0x78>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015ea:	2210      	movs	r2, #16
 80015ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_SPI1_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_SPI1_Init+0x74>)
 8001602:	2207      	movs	r2, #7
 8001604:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_SPI1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_SPI1_Init+0x74>)
 800160e:	2208      	movs	r2, #8
 8001610:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_SPI1_Init+0x74>)
 8001614:	f003 fe84 	bl	8005320 <HAL_SPI_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800161e:	f7ff ffc2 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200011b8 	.word	0x200011b8
 800162c:	40013000 	.word	0x40013000

08001630 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <HAL_SPI_MspInit+0x7c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d128      	bne.n	80016a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001652:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <HAL_SPI_MspInit+0x80>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001656:	4a16      	ldr	r2, [pc, #88]	@ (80016b0 <HAL_SPI_MspInit+0x80>)
 8001658:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800165c:	6613      	str	r3, [r2, #96]	@ 0x60
 800165e:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <HAL_SPI_MspInit+0x80>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <HAL_SPI_MspInit+0x80>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a10      	ldr	r2, [pc, #64]	@ (80016b0 <HAL_SPI_MspInit+0x80>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <HAL_SPI_MspInit+0x80>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001682:	23e0      	movs	r3, #224	@ 0xe0
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001692:	2305      	movs	r3, #5
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a0:	f002 fcd2 	bl	8004048 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	@ 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40013000 	.word	0x40013000
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <HAL_MspInit+0x44>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016be:	4a0e      	ldr	r2, [pc, #56]	@ (80016f8 <HAL_MspInit+0x44>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016c6:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <HAL_MspInit+0x44>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_MspInit+0x44>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	4a08      	ldr	r2, [pc, #32]	@ (80016f8 <HAL_MspInit+0x44>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_MspInit+0x44>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016ea:	f002 feeb 	bl	80044c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <NMI_Handler+0x4>

08001704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <MemManage_Handler+0x4>

08001714 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <UsageFault_Handler+0x4>

08001724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001752:	f001 fa55 	bl	8002c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <USART2_IRQHandler+0x10>)
 8001762:	f005 fee5 	bl	8007530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20001398 	.word	0x20001398

08001770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_kill>:

int _kill(int pid, int sig)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800178a:	f008 ffcb 	bl	800a724 <__errno>
 800178e:	4603      	mov	r3, r0
 8001790:	2216      	movs	r2, #22
 8001792:	601a      	str	r2, [r3, #0]
  return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_exit>:

void _exit (int status)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffe7 	bl	8001780 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b2:	bf00      	nop
 80017b4:	e7fd      	b.n	80017b2 <_exit+0x12>

080017b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e00a      	b.n	80017de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c8:	f3af 8000 	nop.w
 80017cc:	4601      	mov	r1, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	60ba      	str	r2, [r7, #8]
 80017d4:	b2ca      	uxtb	r2, r1
 80017d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3301      	adds	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	dbf0      	blt.n	80017c8 <_read+0x12>
  }

  return len;
 80017e6:	687b      	ldr	r3, [r7, #4]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e009      	b.n	8001816 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	60ba      	str	r2, [r7, #8]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fd74 	bl	80012f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	3301      	adds	r3, #1
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	dbf1      	blt.n	8001802 <_write+0x12>
  }
  return len;
 800181e:	687b      	ldr	r3, [r7, #4]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_close>:

int _close(int file)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001850:	605a      	str	r2, [r3, #4]
  return 0;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_isatty>:

int _isatty(int file)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001898:	4a14      	ldr	r2, [pc, #80]	@ (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a4:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c0:	f008 ff30 	bl	800a724 <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	@ (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20008000 	.word	0x20008000
 80018f0:	00000400 	.word	0x00000400
 80018f4:	2000121c 	.word	0x2000121c
 80018f8:	20001990 	.word	0x20001990

080018fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b09c      	sub	sp, #112	@ 0x70
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001940:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	615a      	str	r2, [r3, #20]
 8001952:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2234      	movs	r2, #52	@ 0x34
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f008 fe90 	bl	800a680 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001960:	4b51      	ldr	r3, [pc, #324]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 8001962:	4a52      	ldr	r2, [pc, #328]	@ (8001aac <MX_TIM1_Init+0x18c>)
 8001964:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001966:	4b50      	ldr	r3, [pc, #320]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 8001968:	2200      	movs	r2, #0
 800196a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196c:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001972:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 8001974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001978:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197a:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001980:	4b49      	ldr	r3, [pc, #292]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b48      	ldr	r3, [pc, #288]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800198c:	4846      	ldr	r0, [pc, #280]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 800198e:	f004 fbfd 	bl	800618c <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001998:	f7ff fe05 	bl	80015a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019a6:	4619      	mov	r1, r3
 80019a8:	483f      	ldr	r0, [pc, #252]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 80019aa:	f004 fe61 	bl	8006670 <HAL_TIM_ConfigClockSource>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019b4:	f7ff fdf7 	bl	80015a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019b8:	483b      	ldr	r0, [pc, #236]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 80019ba:	f004 fc3e 	bl	800623a <HAL_TIM_PWM_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019c4:	f7ff fdef 	bl	80015a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019d8:	4619      	mov	r1, r3
 80019da:	4833      	ldr	r0, [pc, #204]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 80019dc:	f005 fb70 	bl	80070c0 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019e6:	f7ff fdde 	bl	80015a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ea:	2360      	movs	r3, #96	@ 0x60
 80019ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f2:	2300      	movs	r3, #0
 80019f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019f6:	2300      	movs	r3, #0
 80019f8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4826      	ldr	r0, [pc, #152]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 8001a10:	f004 fd1a 	bl	8006448 <HAL_TIM_PWM_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a1a:	f7ff fdc4 	bl	80015a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a22:	2204      	movs	r2, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4820      	ldr	r0, [pc, #128]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 8001a28:	f004 fd0e 	bl	8006448 <HAL_TIM_PWM_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a32:	f7ff fdb8 	bl	80015a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	481a      	ldr	r0, [pc, #104]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 8001a40:	f004 fd02 	bl	8006448 <HAL_TIM_PWM_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001a4a:	f7ff fdac 	bl	80015a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4807      	ldr	r0, [pc, #28]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 8001a8c:	f005 fb9a 	bl	80071c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001a96:	f7ff fd86 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a9a:	4803      	ldr	r0, [pc, #12]	@ (8001aa8 <MX_TIM1_Init+0x188>)
 8001a9c:	f000 f94a 	bl	8001d34 <HAL_TIM_MspPostInit>

}
 8001aa0:	bf00      	nop
 8001aa2:	3770      	adds	r7, #112	@ 0x70
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20001220 	.word	0x20001220
 8001aac:	40012c00 	.word	0x40012c00

08001ab0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	@ 0x30
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2224      	movs	r2, #36	@ 0x24
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 fdde 	bl	800a680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ace:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <MX_TIM3_Init+0xa4>)
 8001ad0:	4a21      	ldr	r2, [pc, #132]	@ (8001b58 <MX_TIM3_Init+0xa8>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <MX_TIM3_Init+0xa4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <MX_TIM3_Init+0xa4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <MX_TIM3_Init+0xa4>)
 8001ae2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ae6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <MX_TIM3_Init+0xa4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <MX_TIM3_Init+0xa4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001af4:	2301      	movs	r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001afc:	2301      	movs	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <MX_TIM3_Init+0xa4>)
 8001b20:	f004 fbec 	bl	80062fc <HAL_TIM_Encoder_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b2a:	f7ff fd3c 	bl	80015a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b36:	463b      	mov	r3, r7
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	@ (8001b54 <MX_TIM3_Init+0xa4>)
 8001b3c:	f005 fac0 	bl	80070c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b46:	f7ff fd2e 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	3730      	adds	r7, #48	@ 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000126c 	.word	0x2000126c
 8001b58:	40000400 	.word	0x40000400

08001b5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08c      	sub	sp, #48	@ 0x30
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	2224      	movs	r2, #36	@ 0x24
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f008 fd88 	bl	800a680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <MX_TIM4_Init+0xa4>)
 8001b7c:	4a21      	ldr	r2, [pc, #132]	@ (8001c04 <MX_TIM4_Init+0xa8>)
 8001b7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b80:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <MX_TIM4_Init+0xa4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <MX_TIM4_Init+0xa4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <MX_TIM4_Init+0xa4>)
 8001b8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <MX_TIM4_Init+0xa4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <MX_TIM4_Init+0xa4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480d      	ldr	r0, [pc, #52]	@ (8001c00 <MX_TIM4_Init+0xa4>)
 8001bcc:	f004 fb96 	bl	80062fc <HAL_TIM_Encoder_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001bd6:	f7ff fce6 	bl	80015a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001be2:	463b      	mov	r3, r7
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	@ (8001c00 <MX_TIM4_Init+0xa4>)
 8001be8:	f005 fa6a 	bl	80070c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001bf2:	f7ff fcd8 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	3730      	adds	r7, #48	@ 0x30
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200012b8 	.word	0x200012b8
 8001c04:	40000800 	.word	0x40000800

08001c08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <HAL_TIM_Base_MspInit+0x38>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d10b      	bne.n	8001c32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_TIM_Base_MspInit+0x3c>)
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1e:	4a09      	ldr	r2, [pc, #36]	@ (8001c44 <HAL_TIM_Base_MspInit+0x3c>)
 8001c20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c24:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <HAL_TIM_Base_MspInit+0x3c>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	@ 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a2f      	ldr	r2, [pc, #188]	@ (8001d24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d128      	bne.n	8001cbc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c76:	4b2c      	ldr	r3, [pc, #176]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4b29      	ldr	r3, [pc, #164]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	4a28      	ldr	r2, [pc, #160]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8e:	4b26      	ldr	r3, [pc, #152]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c9a:	2330      	movs	r3, #48	@ 0x30
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001caa:	2302      	movs	r3, #2
 8001cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	481d      	ldr	r0, [pc, #116]	@ (8001d2c <HAL_TIM_Encoder_MspInit+0xe4>)
 8001cb6:	f002 f9c7 	bl	8004048 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001cba:	e02e      	b.n	8001d1a <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d30 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d129      	bne.n	8001d1a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cc6:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cca:	4a17      	ldr	r2, [pc, #92]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cea:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cf6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001d08:	230a      	movs	r3, #10
 8001d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d16:	f002 f997 	bl	8004048 <HAL_GPIO_Init>
}
 8001d1a:	bf00      	nop
 8001d1c:	3730      	adds	r7, #48	@ 0x30
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	48000400 	.word	0x48000400
 8001d30:	40000800 	.word	0x40000800

08001d34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <HAL_TIM_MspPostInit+0xa0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d13a      	bne.n	8001dcc <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_TIM_MspPostInit+0xa4>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd8 <HAL_TIM_MspPostInit+0xa4>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d62:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_TIM_MspPostInit+0xa4>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_TIM_MspPostInit+0xa4>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d72:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <HAL_TIM_MspPostInit+0xa4>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d7a:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_TIM_MspPostInit+0xa4>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d86:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d98:	2306      	movs	r3, #6
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	480e      	ldr	r0, [pc, #56]	@ (8001ddc <HAL_TIM_MspPostInit+0xa8>)
 8001da4:	f002 f950 	bl	8004048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001da8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001dba:	2306      	movs	r3, #6
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc8:	f002 f93e 	bl	8004048 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	@ 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000400 	.word	0x48000400

08001de0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001de6:	4a23      	ldr	r2, [pc, #140]	@ (8001e74 <MX_USART1_UART_Init+0x94>)
 8001de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001dec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001df2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e06:	220c      	movs	r2, #12
 8001e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e10:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e28:	4811      	ldr	r0, [pc, #68]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e2a:	f005 fa57 	bl	80072dc <HAL_UART_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e34:	f7ff fbb7 	bl	80015a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e38:	2100      	movs	r1, #0
 8001e3a:	480d      	ldr	r0, [pc, #52]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e3c:	f007 faa5 	bl	800938a <HAL_UARTEx_SetTxFifoThreshold>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e46:	f7ff fbae 	bl	80015a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4808      	ldr	r0, [pc, #32]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e4e:	f007 fada 	bl	8009406 <HAL_UARTEx_SetRxFifoThreshold>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e58:	f7ff fba5 	bl	80015a6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <MX_USART1_UART_Init+0x90>)
 8001e5e:	f007 fa5b 	bl	8009318 <HAL_UARTEx_DisableFifoMode>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e68:	f7ff fb9d 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20001304 	.word	0x20001304
 8001e74:	40013800 	.word	0x40013800

08001e78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e7c:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001e7e:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <MX_USART2_UART_Init+0x94>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e82:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b1c      	ldr	r3, [pc, #112]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eae:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eba:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ec0:	4811      	ldr	r0, [pc, #68]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001ec2:	f005 fa0b 	bl	80072dc <HAL_UART_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ecc:	f7ff fb6b 	bl	80015a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	480d      	ldr	r0, [pc, #52]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001ed4:	f007 fa59 	bl	800938a <HAL_UARTEx_SetTxFifoThreshold>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ede:	f7ff fb62 	bl	80015a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4808      	ldr	r0, [pc, #32]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001ee6:	f007 fa8e 	bl	8009406 <HAL_UARTEx_SetRxFifoThreshold>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ef0:	f7ff fb59 	bl	80015a6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ef4:	4804      	ldr	r0, [pc, #16]	@ (8001f08 <MX_USART2_UART_Init+0x90>)
 8001ef6:	f007 fa0f 	bl	8009318 <HAL_UARTEx_DisableFifoMode>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f00:	f7ff fb51 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20001398 	.word	0x20001398
 8001f0c:	40004400 	.word	0x40004400

08001f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b09e      	sub	sp, #120	@ 0x78
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f28:	f107 0320 	add.w	r3, r7, #32
 8001f2c:	2244      	movs	r2, #68	@ 0x44
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f008 fba5 	bl	800a680 <memset>
  if(uartHandle->Instance==USART1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <HAL_UART_MspInit+0x168>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d136      	bne.n	8001fae <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fff7 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f58:	f7ff fb25 	bl	80015a6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f5c:	4b47      	ldr	r3, [pc, #284]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f60:	4a46      	ldr	r2, [pc, #280]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001f62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f66:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f68:	4b44      	ldr	r3, [pc, #272]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f74:	4b41      	ldr	r3, [pc, #260]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	4a40      	ldr	r2, [pc, #256]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f80:	4b3e      	ldr	r3, [pc, #248]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001f8c:	23c0      	movs	r3, #192	@ 0xc0
 8001f8e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4836      	ldr	r0, [pc, #216]	@ (8002080 <HAL_UART_MspInit+0x170>)
 8001fa8:	f002 f84e 	bl	8004048 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fac:	e060      	b.n	8002070 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a34      	ldr	r2, [pc, #208]	@ (8002084 <HAL_UART_MspInit+0x174>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d15b      	bne.n	8002070 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc0:	f107 0320 	add.w	r3, r7, #32
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 ffbb 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001fd0:	f7ff fae9 	bl	80015a6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd4:	4b29      	ldr	r3, [pc, #164]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	4a28      	ldr	r2, [pc, #160]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe0:	4b26      	ldr	r3, [pc, #152]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b23      	ldr	r3, [pc, #140]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff0:	4a22      	ldr	r2, [pc, #136]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff8:	4b20      	ldr	r3, [pc, #128]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002008:	4a1c      	ldr	r2, [pc, #112]	@ (800207c <HAL_UART_MspInit+0x16c>)
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <HAL_UART_MspInit+0x16c>)
 8002012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 800201c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002020:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800202e:	2307      	movs	r3, #7
 8002030:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800203c:	f002 f804 	bl	8004048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 8002040:	2308      	movs	r3, #8
 8002042:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002050:	2307      	movs	r3, #7
 8002052:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002058:	4619      	mov	r1, r3
 800205a:	4809      	ldr	r0, [pc, #36]	@ (8002080 <HAL_UART_MspInit+0x170>)
 800205c:	f001 fff4 	bl	8004048 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2100      	movs	r1, #0
 8002064:	2026      	movs	r0, #38	@ 0x26
 8002066:	f001 fefa 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800206a:	2026      	movs	r0, #38	@ 0x26
 800206c:	f001 ff11 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 8002070:	bf00      	nop
 8002072:	3778      	adds	r7, #120	@ 0x78
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40013800 	.word	0x40013800
 800207c:	40021000 	.word	0x40021000
 8002080:	48000400 	.word	0x48000400
 8002084:	40004400 	.word	0x40004400

08002088 <Reset_Handler>:
 8002088:	480d      	ldr	r0, [pc, #52]	@ (80020c0 <LoopForever+0x2>)
 800208a:	4685      	mov	sp, r0
 800208c:	f7ff fc36 	bl	80018fc <SystemInit>
 8002090:	480c      	ldr	r0, [pc, #48]	@ (80020c4 <LoopForever+0x6>)
 8002092:	490d      	ldr	r1, [pc, #52]	@ (80020c8 <LoopForever+0xa>)
 8002094:	4a0d      	ldr	r2, [pc, #52]	@ (80020cc <LoopForever+0xe>)
 8002096:	2300      	movs	r3, #0
 8002098:	e002      	b.n	80020a0 <LoopCopyDataInit>

0800209a <CopyDataInit>:
 800209a:	58d4      	ldr	r4, [r2, r3]
 800209c:	50c4      	str	r4, [r0, r3]
 800209e:	3304      	adds	r3, #4

080020a0 <LoopCopyDataInit>:
 80020a0:	18c4      	adds	r4, r0, r3
 80020a2:	428c      	cmp	r4, r1
 80020a4:	d3f9      	bcc.n	800209a <CopyDataInit>
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <LoopForever+0x12>)
 80020a8:	4c0a      	ldr	r4, [pc, #40]	@ (80020d4 <LoopForever+0x16>)
 80020aa:	2300      	movs	r3, #0
 80020ac:	e001      	b.n	80020b2 <LoopFillZerobss>

080020ae <FillZerobss>:
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	3204      	adds	r2, #4

080020b2 <LoopFillZerobss>:
 80020b2:	42a2      	cmp	r2, r4
 80020b4:	d3fb      	bcc.n	80020ae <FillZerobss>
 80020b6:	f008 fb3b 	bl	800a730 <__libc_init_array>
 80020ba:	f7ff fa01 	bl	80014c0 <main>

080020be <LoopForever>:
 80020be:	e7fe      	b.n	80020be <LoopForever>
 80020c0:	20008000 	.word	0x20008000
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20001118 	.word	0x20001118
 80020cc:	0800e870 	.word	0x0800e870
 80020d0:	20001118 	.word	0x20001118
 80020d4:	2000198c 	.word	0x2000198c

080020d8 <ADC1_2_IRQHandler>:
 80020d8:	e7fe      	b.n	80020d8 <ADC1_2_IRQHandler>
	...

080020dc <writeRegister>:
 * @address: 8-bit address of register
 * @value  : 8-bit value of corresponding register
 * Since the register values to be written are 8-bit, there is no need to multiple writing
 */
static void writeRegister(uint8_t address, uint8_t value)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	460a      	mov	r2, r1
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	4613      	mov	r3, r2
 80020ea:	71bb      	strb	r3, [r7, #6]
	if (address > 63)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80020f0:	d901      	bls.n	80020f6 <writeRegister+0x1a>
		address = 63;
 80020f2:	233f      	movs	r3, #63	@ 0x3f
 80020f4:	71fb      	strb	r3, [r7, #7]

	// Setting R/W = 0, i.e.: Write Mode
	address &= ~(0x80);
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8002100:	2200      	movs	r2, #0
 8002102:	2110      	movs	r1, #16
 8002104:	480b      	ldr	r0, [pc, #44]	@ (8002134 <writeRegister+0x58>)
 8002106:	f002 f921 	bl	800434c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 800210a:	1df9      	adds	r1, r7, #7
 800210c:	230a      	movs	r3, #10
 800210e:	2201      	movs	r2, #1
 8002110:	4809      	ldr	r0, [pc, #36]	@ (8002138 <writeRegister+0x5c>)
 8002112:	f003 f9b0 	bl	8005476 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 8002116:	1db9      	adds	r1, r7, #6
 8002118:	230a      	movs	r3, #10
 800211a:	2201      	movs	r2, #1
 800211c:	4806      	ldr	r0, [pc, #24]	@ (8002138 <writeRegister+0x5c>)
 800211e:	f003 f9aa 	bl	8005476 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	2110      	movs	r1, #16
 8002126:	4803      	ldr	r0, [pc, #12]	@ (8002134 <writeRegister+0x58>)
 8002128:	f002 f910 	bl	800434c <HAL_GPIO_WritePin>


}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	48000800 	.word	0x48000800
 8002138:	200011b8 	.word	0x200011b8

0800213c <readRegister>:
 * @retval value  : array of 8-bit values of corresponding register
 * @num		: number of bytes to be written
 */

static void readRegister(uint8_t address, uint8_t * value, uint8_t num)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
 8002148:	4613      	mov	r3, r2
 800214a:	71bb      	strb	r3, [r7, #6]
	if (address > 63)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002150:	d901      	bls.n	8002156 <readRegister+0x1a>
		address = 63;
 8002152:	233f      	movs	r3, #63	@ 0x3f
 8002154:	71fb      	strb	r3, [r7, #7]

	// Multiple Byte Read Settings
	if (num > 1)
 8002156:	79bb      	ldrb	r3, [r7, #6]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d905      	bls.n	8002168 <readRegister+0x2c>
		address |= 0x40;
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002162:	b2db      	uxtb	r3, r3
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	e004      	b.n	8002172 <readRegister+0x36>
	else
		address &= ~(0x40);
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800216e:	b2db      	uxtb	r3, r3
 8002170:	71fb      	strb	r3, [r7, #7]

	// Setting R/W = 1, i.e.: Read Mode
	address |= (0x80);
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002178:	b2db      	uxtb	r3, r3
 800217a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	2110      	movs	r1, #16
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <readRegister+0x78>)
 8002182:	f002 f8e3 	bl	800434c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8002186:	1df9      	adds	r1, r7, #7
 8002188:	230a      	movs	r3, #10
 800218a:	2201      	movs	r2, #1
 800218c:	480a      	ldr	r0, [pc, #40]	@ (80021b8 <readRegister+0x7c>)
 800218e:	f003 f972 	bl	8005476 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 8002192:	79bb      	ldrb	r3, [r7, #6]
 8002194:	b29a      	uxth	r2, r3
 8002196:	230a      	movs	r3, #10
 8002198:	6839      	ldr	r1, [r7, #0]
 800219a:	4807      	ldr	r0, [pc, #28]	@ (80021b8 <readRegister+0x7c>)
 800219c:	f003 fae0 	bl	8005760 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80021a0:	2201      	movs	r2, #1
 80021a2:	2110      	movs	r1, #16
 80021a4:	4803      	ldr	r0, [pc, #12]	@ (80021b4 <readRegister+0x78>)
 80021a6:	f002 f8d1 	bl	800434c <HAL_GPIO_WritePin>

}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	48000800 	.word	0x48000800
 80021b8:	200011b8 	.word	0x200011b8

080021bc <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
 */
static void adxlBW(ADXL_InitTypeDef * adxl)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	uint8_t bwreg=0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]
	writeRegister(BW_RATE,bwreg);
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	4619      	mov	r1, r3
 80021cc:	202c      	movs	r0, #44	@ 0x2c
 80021ce:	f7ff ff85 	bl	80020dc <writeRegister>

	if (adxl->LPMode == LPMODE_LOWPOWER)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	789b      	ldrb	r3, [r3, #2]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d11a      	bne.n	8002210 <adxlBW+0x54>
	{
		// Low power mode
		bwreg |= (1 << 4);
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	f043 0310 	orr.w	r3, r3, #16
 80021e0:	73fb      	strb	r3, [r7, #15]
		if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	78db      	ldrb	r3, [r3, #3]
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d807      	bhi.n	80021fa <adxlBW+0x3e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	78db      	ldrb	r3, [r3, #3]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d903      	bls.n	80021fa <adxlBW+0x3e>
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	3307      	adds	r3, #7
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e004      	b.n	8002204 <adxlBW+0x48>
		else bwreg +=(adxl->Rate);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	78da      	ldrb	r2, [r3, #3]
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	4413      	add	r3, r2
 8002202:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	4619      	mov	r1, r3
 8002208:	202c      	movs	r0, #44	@ 0x2c
 800220a:	f7ff ff67 	bl	80020dc <writeRegister>

		if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
		else bwreg +=(adxl->Rate);
		writeRegister(BW_RATE,bwreg);
	}
}
 800220e:	e015      	b.n	800223c <adxlBW+0x80>
		if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	78db      	ldrb	r3, [r3, #3]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d807      	bhi.n	8002228 <adxlBW+0x6c>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	78db      	ldrb	r3, [r3, #3]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d903      	bls.n	8002228 <adxlBW+0x6c>
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	3306      	adds	r3, #6
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e004      	b.n	8002232 <adxlBW+0x76>
		else bwreg +=(adxl->Rate);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	78da      	ldrb	r2, [r3, #3]
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	4413      	add	r3, r2
 8002230:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	4619      	mov	r1, r3
 8002236:	202c      	movs	r0, #44	@ 0x2c
 8002238:	f7ff ff50 	bl	80020dc <writeRegister>
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <adxlFormat>:
						3 		|  				+-16g

 */

static void adxlFormat(ADXL_InitTypeDef * adxl)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	uint8_t formatreg=0;
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]
	writeRegister(DATA_FORMAT,formatreg);
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	4619      	mov	r1, r3
 8002254:	2031      	movs	r0, #49	@ 0x31
 8002256:	f7ff ff41 	bl	80020dc <writeRegister>
	formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	019b      	lsls	r3, r3, #6
 8002260:	b25a      	sxtb	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	015b      	lsls	r3, r3, #5
 8002268:	b25b      	sxtb	r3, r3
 800226a:	4313      	orrs	r3, r2
 800226c:	b25a      	sxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	799b      	ldrb	r3, [r3, #6]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	b25b      	sxtb	r3, r3
 8002276:	4313      	orrs	r3, r2
 8002278:	b25a      	sxtb	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	795b      	ldrb	r3, [r3, #5]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	b25b      	sxtb	r3, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	b25b      	sxtb	r3, r3
 8002286:	73fb      	strb	r3, [r7, #15]
	formatreg += (adxl -> Range);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	791a      	ldrb	r2, [r3, #4]
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	4413      	add	r3, r2
 8002290:	73fb      	strb	r3, [r7, #15]
	writeRegister(DATA_FORMAT,formatreg);
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	4619      	mov	r1, r3
 8002296:	2031      	movs	r0, #49	@ 0x31
 8002298:	f7ff ff20 	bl	80020dc <writeRegister>
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80022ac:	2201      	movs	r2, #1
 80022ae:	2110      	movs	r1, #16
 80022b0:	484b      	ldr	r0, [pc, #300]	@ (80023e0 <ADXL_Init+0x13c>)
 80022b2:	f002 f84b 	bl	800434c <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 80022b6:	2005      	movs	r0, #5
 80022b8:	f000 fcc0 	bl	8002c3c <HAL_Delay>
	uint8_t testval = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID,&testval,1);
 80022c0:	f107 030f 	add.w	r3, r7, #15
 80022c4:	2201      	movs	r2, #1
 80022c6:	4619      	mov	r1, r3
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff ff37 	bl	800213c <readRegister>
	if (testval != 0xE5) return ADXL_ERR;
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	2be5      	cmp	r3, #229	@ 0xe5
 80022d2:	d001      	beq.n	80022d8 <ADXL_Init+0x34>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e07f      	b.n	80023d8 <ADXL_Init+0x134>
	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff6f 	bl	80021bc <adxlBW>
	adxlFormat(adxl);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffb0 	bl	8002244 <adxlFormat>

	// Settings gains
	if (adxl->Resolution == RESOLUTION_10BIT)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	795b      	ldrb	r3, [r3, #5]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d13f      	bne.n	800236c <ADXL_Init+0xc8>
	{
		switch (adxl->Range) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	791b      	ldrb	r3, [r3, #4]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d846      	bhi.n	8002382 <ADXL_Init+0xde>
 80022f4:	a201      	add	r2, pc, #4	@ (adr r2, 80022fc <ADXL_Init+0x58>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	0800230d 	.word	0x0800230d
 8002300:	08002325 	.word	0x08002325
 8002304:	0800233d 	.word	0x0800233d
 8002308:	08002355 	.word	0x08002355
		case RANGE_2G:
			GAINX = GAINY = GAINZ = 1/255.0f;
 800230c:	4b35      	ldr	r3, [pc, #212]	@ (80023e4 <ADXL_Init+0x140>)
 800230e:	4a36      	ldr	r2, [pc, #216]	@ (80023e8 <ADXL_Init+0x144>)
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	4b34      	ldr	r3, [pc, #208]	@ (80023e4 <ADXL_Init+0x140>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a35      	ldr	r2, [pc, #212]	@ (80023ec <ADXL_Init+0x148>)
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b34      	ldr	r3, [pc, #208]	@ (80023ec <ADXL_Init+0x148>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a34      	ldr	r2, [pc, #208]	@ (80023f0 <ADXL_Init+0x14c>)
 8002320:	6013      	str	r3, [r2, #0]
			break;
 8002322:	e02e      	b.n	8002382 <ADXL_Init+0xde>
		case RANGE_4G:
			GAINX = GAINY = GAINZ = 1/127.0f;
 8002324:	4b2f      	ldr	r3, [pc, #188]	@ (80023e4 <ADXL_Init+0x140>)
 8002326:	4a33      	ldr	r2, [pc, #204]	@ (80023f4 <ADXL_Init+0x150>)
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	4b2e      	ldr	r3, [pc, #184]	@ (80023e4 <ADXL_Init+0x140>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2f      	ldr	r2, [pc, #188]	@ (80023ec <ADXL_Init+0x148>)
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b2e      	ldr	r3, [pc, #184]	@ (80023ec <ADXL_Init+0x148>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2e      	ldr	r2, [pc, #184]	@ (80023f0 <ADXL_Init+0x14c>)
 8002338:	6013      	str	r3, [r2, #0]
			break;
 800233a:	e022      	b.n	8002382 <ADXL_Init+0xde>
		case RANGE_8G:
			GAINX = GAINY = GAINZ = 1/63.0f;
 800233c:	4b29      	ldr	r3, [pc, #164]	@ (80023e4 <ADXL_Init+0x140>)
 800233e:	4a2e      	ldr	r2, [pc, #184]	@ (80023f8 <ADXL_Init+0x154>)
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	4b28      	ldr	r3, [pc, #160]	@ (80023e4 <ADXL_Init+0x140>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a29      	ldr	r2, [pc, #164]	@ (80023ec <ADXL_Init+0x148>)
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b28      	ldr	r3, [pc, #160]	@ (80023ec <ADXL_Init+0x148>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a28      	ldr	r2, [pc, #160]	@ (80023f0 <ADXL_Init+0x14c>)
 8002350:	6013      	str	r3, [r2, #0]
			break;
 8002352:	e016      	b.n	8002382 <ADXL_Init+0xde>
		case RANGE_16G:
			GAINX = GAINY = GAINZ = 1/31.0f;
 8002354:	4b23      	ldr	r3, [pc, #140]	@ (80023e4 <ADXL_Init+0x140>)
 8002356:	4a29      	ldr	r2, [pc, #164]	@ (80023fc <ADXL_Init+0x158>)
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <ADXL_Init+0x140>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a23      	ldr	r2, [pc, #140]	@ (80023ec <ADXL_Init+0x148>)
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b22      	ldr	r3, [pc, #136]	@ (80023ec <ADXL_Init+0x148>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a22      	ldr	r2, [pc, #136]	@ (80023f0 <ADXL_Init+0x14c>)
 8002368:	6013      	str	r3, [r2, #0]
			break;
 800236a:	e00a      	b.n	8002382 <ADXL_Init+0xde>
		}
	} else
	{
		GAINX = GAINY = GAINZ = 1/255.0f;
 800236c:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <ADXL_Init+0x140>)
 800236e:	4a1e      	ldr	r2, [pc, #120]	@ (80023e8 <ADXL_Init+0x144>)
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	4b1c      	ldr	r3, [pc, #112]	@ (80023e4 <ADXL_Init+0x140>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1d      	ldr	r2, [pc, #116]	@ (80023ec <ADXL_Init+0x148>)
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <ADXL_Init+0x148>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1c      	ldr	r2, [pc, #112]	@ (80023f0 <ADXL_Init+0x14c>)
 8002380:	6013      	str	r3, [r2, #0]
	}
	// Setting AutoSleep and Link bits
	uint8_t reg;
	readRegister(POWER_CTL,&reg,1);
 8002382:	f107 030e 	add.w	r3, r7, #14
 8002386:	2201      	movs	r2, #1
 8002388:	4619      	mov	r1, r3
 800238a:	202d      	movs	r0, #45	@ 0x2d
 800238c:	f7ff fed6 	bl	800213c <readRegister>
	if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	79db      	ldrb	r3, [r3, #7]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <ADXL_Init+0x100>
 8002398:	7bbb      	ldrb	r3, [r7, #14]
 800239a:	f043 0310 	orr.w	r3, r3, #16
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	73bb      	strb	r3, [r7, #14]
 80023a2:	e004      	b.n	80023ae <ADXL_Init+0x10a>
 80023a4:	7bbb      	ldrb	r3, [r7, #14]
 80023a6:	f023 0310 	bic.w	r3, r3, #16
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	73bb      	strb	r3, [r7, #14]
	if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7a1b      	ldrb	r3, [r3, #8]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d105      	bne.n	80023c2 <ADXL_Init+0x11e>
 80023b6:	7bbb      	ldrb	r3, [r7, #14]
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	73bb      	strb	r3, [r7, #14]
 80023c0:	e004      	b.n	80023cc <ADXL_Init+0x128>
 80023c2:	7bbb      	ldrb	r3, [r7, #14]
 80023c4:	f023 0320 	bic.w	r3, r3, #32
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	73bb      	strb	r3, [r7, #14]
	writeRegister(POWER_CTL,reg);
 80023cc:	7bbb      	ldrb	r3, [r7, #14]
 80023ce:	4619      	mov	r1, r3
 80023d0:	202d      	movs	r0, #45	@ 0x2d
 80023d2:	f7ff fe83 	bl	80020dc <writeRegister>

	return ADXL_OK;
 80023d6:	2300      	movs	r3, #0

}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	48000800 	.word	0x48000800
 80023e4:	20001434 	.word	0x20001434
 80023e8:	3b808081 	.word	0x3b808081
 80023ec:	20001430 	.word	0x20001430
 80023f0:	2000142c 	.word	0x2000142c
 80023f4:	3c010204 	.word	0x3c010204
 80023f8:	3c820821 	.word	0x3c820821
 80023fc:	3d042108 	.word	0x3d042108

08002400 <ADXL_getAccel>:
						uint16_t acc[3];
						ADXL_getAccel(acc,OUTPUT_SIGNED);
						and so on...
 */
void ADXL_getAccel(void *Data , uint8_t outputType)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[6]={0,0,0,0,0,0};
 800240c:	4a3a      	ldr	r2, [pc, #232]	@ (80024f8 <ADXL_getAccel+0xf8>)
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002416:	6018      	str	r0, [r3, #0]
 8002418:	3304      	adds	r3, #4
 800241a:	8019      	strh	r1, [r3, #0]
	readRegister(DATA0,data,6);
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	2206      	movs	r2, #6
 8002422:	4619      	mov	r1, r3
 8002424:	2032      	movs	r0, #50	@ 0x32
 8002426:	f7ff fe89 	bl	800213c <readRegister>


	if (outputType == OUTPUT_SIGNED)
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d11f      	bne.n	8002470 <ADXL_getAccel+0x70>
	{
		int16_t * acc = Data;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	613b      	str	r3, [r7, #16]
		// Two's Complement
		acc[0] = (int16_t) ((data[1]*256+data[0]));
 8002434:	7a7b      	ldrb	r3, [r7, #9]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b29b      	uxth	r3, r3
 800243a:	7a3a      	ldrb	r2, [r7, #8]
 800243c:	4413      	add	r3, r2
 800243e:	b29b      	uxth	r3, r3
 8002440:	b21a      	sxth	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	801a      	strh	r2, [r3, #0]
		acc[1] = (int16_t) ((data[3]*256+data[2]));
 8002446:	7afb      	ldrb	r3, [r7, #11]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	b29b      	uxth	r3, r3
 800244c:	7aba      	ldrb	r2, [r7, #10]
 800244e:	4413      	add	r3, r2
 8002450:	b29a      	uxth	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	3302      	adds	r3, #2
 8002456:	b212      	sxth	r2, r2
 8002458:	801a      	strh	r2, [r3, #0]
		acc[2] = (int16_t) ((data[5]*256+data[4]));
 800245a:	7b7b      	ldrb	r3, [r7, #13]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	b29b      	uxth	r3, r3
 8002460:	7b3a      	ldrb	r2, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	b29a      	uxth	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	3304      	adds	r3, #4
 800246a:	b212      	sxth	r2, r2
 800246c:	801a      	strh	r2, [r3, #0]
		fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
		fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
		fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;

	}
}
 800246e:	e03f      	b.n	80024f0 <ADXL_getAccel+0xf0>
	else if (outputType == OUTPUT_FLOAT)
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d13c      	bne.n	80024f0 <ADXL_getAccel+0xf0>
		float * fdata = Data;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	617b      	str	r3, [r7, #20]
		fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 800247a:	7a7b      	ldrb	r3, [r7, #9]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	b29b      	uxth	r3, r3
 8002480:	7a3a      	ldrb	r2, [r7, #8]
 8002482:	4413      	add	r3, r2
 8002484:	b29b      	uxth	r3, r3
 8002486:	b21b      	sxth	r3, r3
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002490:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <ADXL_getAccel+0xfc>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	edc3 7a00 	vstr	s15, [r3]
		fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 80024a0:	7afb      	ldrb	r3, [r7, #11]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	7aba      	ldrb	r2, [r7, #10]
 80024a8:	4413      	add	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <ADXL_getAccel+0x100>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3304      	adds	r3, #4
 80024c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c4:	edc3 7a00 	vstr	s15, [r3]
		fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 80024c8:	7b7b      	ldrb	r3, [r7, #13]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	7b3a      	ldrb	r2, [r7, #12]
 80024d0:	4413      	add	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <ADXL_getAccel+0x104>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3308      	adds	r3, #8
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	edc3 7a00 	vstr	s15, [r3]
}
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	0800e30c 	.word	0x0800e30c
 80024fc:	2000142c 	.word	0x2000142c
 8002500:	20001430 	.word	0x20001430
 8002504:	20001434 	.word	0x20001434

08002508 <ADXL_Measure>:
/** Starts Measure Mode
 * @param: s = ON or OFF

 */
void ADXL_Measure(Switch s)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	readRegister(POWER_CTL,&reg,1);
 8002512:	f107 030f 	add.w	r3, r7, #15
 8002516:	2201      	movs	r2, #1
 8002518:	4619      	mov	r1, r3
 800251a:	202d      	movs	r0, #45	@ 0x2d
 800251c:	f7ff fe0e 	bl	800213c <readRegister>
	switch (s) {
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <ADXL_Measure+0x24>
 8002526:	2b01      	cmp	r3, #1
 8002528:	d010      	beq.n	800254c <ADXL_Measure+0x44>
	case OFF:
		reg &= ~(1<<3);
		writeRegister(POWER_CTL,reg);
		break;
	}
}
 800252a:	e01a      	b.n	8002562 <ADXL_Measure+0x5a>
		reg &= ~(1<<2);
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	f023 0304 	bic.w	r3, r3, #4
 8002532:	b2db      	uxtb	r3, r3
 8002534:	73fb      	strb	r3, [r7, #15]
		reg |= (1<<3);
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	b2db      	uxtb	r3, r3
 800253e:	73fb      	strb	r3, [r7, #15]
		writeRegister(POWER_CTL,reg);
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	4619      	mov	r1, r3
 8002544:	202d      	movs	r0, #45	@ 0x2d
 8002546:	f7ff fdc9 	bl	80020dc <writeRegister>
		break;
 800254a:	e00a      	b.n	8002562 <ADXL_Measure+0x5a>
		reg &= ~(1<<3);
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	f023 0308 	bic.w	r3, r3, #8
 8002552:	b2db      	uxtb	r3, r3
 8002554:	73fb      	strb	r3, [r7, #15]
		writeRegister(POWER_CTL,reg);
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	4619      	mov	r1, r3
 800255a:	202d      	movs	r0, #45	@ 0x2d
 800255c:	f7ff fdbe 	bl	80020dc <writeRegister>
		break;
 8002560:	bf00      	nop
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <ADXL_Standby>:
 * @param: s = ON or OFF
		OFF: Takes the module into sleep mode.

 */
void ADXL_Standby(Switch s)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	readRegister(POWER_CTL,&reg,1);
 8002574:	f107 030f 	add.w	r3, r7, #15
 8002578:	2201      	movs	r2, #1
 800257a:	4619      	mov	r1, r3
 800257c:	202d      	movs	r0, #45	@ 0x2d
 800257e:	f7ff fddd 	bl	800213c <readRegister>
	switch (s) {
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <ADXL_Standby+0x24>
 8002588:	2b01      	cmp	r3, #1
 800258a:	d010      	beq.n	80025ae <ADXL_Standby+0x44>
		reg |= (1<<2);
		writeRegister(POWER_CTL,reg);
		break;
	}

}
 800258c:	e01a      	b.n	80025c4 <ADXL_Standby+0x5a>
		reg &= ~(1<<2);
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	b2db      	uxtb	r3, r3
 8002596:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1<<3);
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	f023 0308 	bic.w	r3, r3, #8
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	73fb      	strb	r3, [r7, #15]
		writeRegister(POWER_CTL,reg);
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	4619      	mov	r1, r3
 80025a6:	202d      	movs	r0, #45	@ 0x2d
 80025a8:	f7ff fd98 	bl	80020dc <writeRegister>
		break;
 80025ac:	e00a      	b.n	80025c4 <ADXL_Standby+0x5a>
		reg |= (1<<2);
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	73fb      	strb	r3, [r7, #15]
		writeRegister(POWER_CTL,reg);
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	4619      	mov	r1, r3
 80025bc:	202d      	movs	r0, #45	@ 0x2d
 80025be:	f7ff fd8d 	bl	80020dc <writeRegister>
		break;
 80025c2:	bf00      	nop
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <YLIDARX2_PrintData>:

/**
 * Debugging function to print data
 */
void YLIDARX2_PrintData(h_YLIDARX2_t * hYLIDAR)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

		printf("Packet Header: 0x%X\r\n", packetHeader);
		printf("Package Type: %s\r\n", YLIDAR_PACKAGE_TYPE(packageType));
		printf("Scan frequency: %d Hz\r\n", scan_frequency);
#endif
		printf("Sample Quantity: %d\r\n", hYLIDAR->sample_quantity);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7b1b      	ldrb	r3, [r3, #12]
 80025d8:	4619      	mov	r1, r3
 80025da:	4819      	ldr	r0, [pc, #100]	@ (8002640 <YLIDARX2_PrintData+0x74>)
 80025dc:	f007 fece 	bl	800a37c <iprintf>

	printf("Data: ");
 80025e0:	4818      	ldr	r0, [pc, #96]	@ (8002644 <YLIDARX2_PrintData+0x78>)
 80025e2:	f007 fecb 	bl	800a37c <iprintf>

	for (int i=0; i < hYLIDAR->data_length; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	e01c      	b.n	8002626 <YLIDARX2_PrintData+0x5a>
	{
		printf("0x%X ", hYLIDAR->data_buffer[i]);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	4619      	mov	r1, r3
 80025f8:	4813      	ldr	r0, [pc, #76]	@ (8002648 <YLIDARX2_PrintData+0x7c>)
 80025fa:	f007 febf 	bl	800a37c <iprintf>

		if (i%10 == 0) printf("\r\n");
 80025fe:	68f9      	ldr	r1, [r7, #12]
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <YLIDARX2_PrintData+0x80>)
 8002602:	fb83 2301 	smull	r2, r3, r3, r1
 8002606:	109a      	asrs	r2, r3, #2
 8002608:	17cb      	asrs	r3, r1, #31
 800260a:	1ad2      	subs	r2, r2, r3
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	1aca      	subs	r2, r1, r3
 8002616:	2a00      	cmp	r2, #0
 8002618:	d102      	bne.n	8002620 <YLIDARX2_PrintData+0x54>
 800261a:	480d      	ldr	r0, [pc, #52]	@ (8002650 <YLIDARX2_PrintData+0x84>)
 800261c:	f007 ff16 	bl	800a44c <puts>
	for (int i=0; i < hYLIDAR->data_length; i++)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3301      	adds	r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	429a      	cmp	r2, r3
 800262e:	dbdd      	blt.n	80025ec <YLIDARX2_PrintData+0x20>
	}

	printf("\r\n");
 8002630:	4807      	ldr	r0, [pc, #28]	@ (8002650 <YLIDARX2_PrintData+0x84>)
 8002632:	f007 ff0b 	bl	800a44c <puts>
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	0800e314 	.word	0x0800e314
 8002644:	0800e32c 	.word	0x0800e32c
 8002648:	0800e334 	.word	0x0800e334
 800264c:	66666667 	.word	0x66666667
 8002650:	0800e33c 	.word	0x0800e33c

08002654 <YLIDARX2_PrintSamples>:

/**
 * Debugging function to print samples
 */
void YLIDARX2_PrintSamples(h_YLIDARX2_t * hYLIDAR)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	for (int i=0; i < hYLIDAR->sample_quantity; i++)
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e023      	b.n	80026aa <YLIDARX2_PrintSamples+0x56>
			{
				printf("Sample %d: Distance = %d mm, ", i + 1, hYLIDAR->samples[i].distance);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1c58      	adds	r0, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6919      	ldr	r1, [r3, #16]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	885b      	ldrh	r3, [r3, #2]
 8002678:	461a      	mov	r2, r3
 800267a:	4601      	mov	r1, r0
 800267c:	4810      	ldr	r0, [pc, #64]	@ (80026c0 <YLIDARX2_PrintSamples+0x6c>)
 800267e:	f007 fe7d 	bl	800a37c <iprintf>
	#if (LOGS)
				printf("Interference = %d, ", hYLIDAR->samples[i].interference_flag);
	#endif
				printf("Corrected Angle = %.2f°\r\n", hYLIDAR->samples[i].corrected_angle);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd ff7f 	bl	8000598 <__aeabi_f2d>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4809      	ldr	r0, [pc, #36]	@ (80026c4 <YLIDARX2_PrintSamples+0x70>)
 80026a0:	f007 fe6c 	bl	800a37c <iprintf>
	for (int i=0; i < hYLIDAR->sample_quantity; i++)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3301      	adds	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7b1b      	ldrb	r3, [r3, #12]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4293      	cmp	r3, r2
 80026b4:	dbd5      	blt.n	8002662 <YLIDARX2_PrintSamples+0xe>
			}
}
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	0800e340 	.word	0x0800e340
 80026c4:	0800e360 	.word	0x0800e360

080026c8 <YLIDARX2_CalculateChecksum>:

uint16_t YLIDARX2_CalculateChecksum(uint8_t *data, uint16_t length)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
	uint16_t checksum = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < length; i+=2) // Exclude received checksum bytes
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	e015      	b.n	800270a <YLIDARX2_CalculateChecksum+0x42>
	{
		checksum ^= data[i] | (data[i+1] << 8);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	b21a      	sxth	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3301      	adds	r3, #1
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	440b      	add	r3, r1
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b21a      	sxth	r2, r3
 80026fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026fe:	4053      	eors	r3, r2
 8002700:	b21b      	sxth	r3, r3
 8002702:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < length; i+=2) // Exclude received checksum bytes
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	3302      	adds	r3, #2
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	429a      	cmp	r2, r3
 8002710:	dbe5      	blt.n	80026de <YLIDARX2_CalculateChecksum+0x16>
	}

	return checksum;
 8002712:	89fb      	ldrh	r3, [r7, #14]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <YLIDARX2_ParseData>:
 * @brief Parse and print YDLIDAR X2 scan data.
 * @param data: Pointer to the received data buffer.
 * @retval None
 */
void YLIDARX2_ParseData(h_YLIDARX2_t * hYLIDAR)
{
 8002720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002724:	b093      	sub	sp, #76	@ 0x4c
 8002726:	af00      	add	r7, sp, #0
 8002728:	61f8      	str	r0, [r7, #28]
	if (hYLIDAR->data_buffer[0] == YLIDAR_START_BYTE2 && hYLIDAR->data_buffer[1] == YLIDAR_START_BYTE1)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2baa      	cmp	r3, #170	@ 0xaa
 8002732:	f040 8195 	bne.w	8002a60 <YLIDARX2_ParseData+0x340>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	3301      	adds	r3, #1
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b55      	cmp	r3, #85	@ 0x55
 8002740:	f040 818e 	bne.w	8002a60 <YLIDARX2_ParseData+0x340>
	{
 8002744:	466b      	mov	r3, sp
 8002746:	461e      	mov	r6, r3
#if (LOGS)
		printf("Started parsing\r\n");
#endif

		// Verify checksum
		uint16_t checksum = hYLIDAR->data_buffer[8] | (hYLIDAR->data_buffer[9] << 8);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	3308      	adds	r3, #8
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b21a      	sxth	r2, r3
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	3309      	adds	r3, #9
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	b21b      	sxth	r3, r3
 800275e:	4313      	orrs	r3, r2
 8002760:	b21b      	sxth	r3, r3
 8002762:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		uint16_t calculatedChecksum = YLIDARX2_CalculateChecksum(hYLIDAR->data_buffer, YLIDAR_SAMPLE_BYTE_OFFSET);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2108      	movs	r1, #8
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ffac 	bl	80026c8 <YLIDARX2_CalculateChecksum>
 8002770:	4603      	mov	r3, r0
 8002772:	87bb      	strh	r3, [r7, #60]	@ 0x3c

		if (calculatedChecksum != checksum)
 8002774:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002776:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <YLIDARX2_ParseData+0x60>
		{
#if (LOGS)
			printf("Checksum mismatch! Calculated: 0x%X, Received: 0x%X\r\n", calculatedChecksum, checksum);
#endif
			return;
 800277c:	46b5      	mov	sp, r6
 800277e:	e172      	b.n	8002a66 <YLIDARX2_ParseData+0x346>
		}
#if (DEBUG)
		YLIDARX2_PrintData(hYLIDAR);
 8002780:	69f8      	ldr	r0, [r7, #28]
 8002782:	f7ff ff23 	bl	80025cc <YLIDARX2_PrintData>
#endif
		uint16_t startAngleRaw = hYLIDAR->data_buffer[4] | (hYLIDAR->data_buffer[5] << 8);
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b21a      	sxth	r2, r3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	3305      	adds	r3, #5
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	b21b      	sxth	r3, r3
 800279c:	4313      	orrs	r3, r2
 800279e:	b21b      	sxth	r3, r3
 80027a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
		uint16_t endAngleRaw = hYLIDAR->data_buffer[6] | (hYLIDAR->data_buffer[7] << 8);
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	3306      	adds	r3, #6
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b21a      	sxth	r2, r3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	3307      	adds	r3, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	4313      	orrs	r3, r2
 80027ba:	b21b      	sxth	r3, r3
 80027bc:	873b      	strh	r3, [r7, #56]	@ 0x38

		// Calculate starting and ending angles
		float Angle_FSA = (startAngleRaw >> 1) / 64.0f; // Formula: Rshiftbit(FSA) / 64
 80027be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	ee07 3a90 	vmov	s15, r3
 80027c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027cc:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8002a78 <YLIDARX2_ParseData+0x358>
 80027d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027d4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		float Angle_LSA = (endAngleRaw >> 1) / 64.0f;   // Formula: Rshiftbit(LSA) / 64
 80027d8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	b29b      	uxth	r3, r3
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e6:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8002a78 <YLIDARX2_ParseData+0x358>
 80027ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027ee:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
#if (LOGS)
		printf("Start Angle: %.2f°, End Angle: %.2f°\r\n", Angle_FSA, Angle_LSA);
#endif

		// Calculate the angle difference
		float diffAngle = (Angle_LSA > Angle_FSA) ? (Angle_LSA - Angle_FSA) : (360.0f + Angle_LSA - Angle_FSA);
 80027f2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80027f6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80027fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	dd06      	ble.n	8002812 <YLIDARX2_ParseData+0xf2>
 8002804:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002808:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800280c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002810:	e009      	b.n	8002826 <YLIDARX2_ParseData+0x106>
 8002812:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002816:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8002a7c <YLIDARX2_ParseData+0x35c>
 800281a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800281e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002826:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
#if (DEBUG)
		// Process sample data
		printf("Sample Data:\r\n");
 800282a:	4895      	ldr	r0, [pc, #596]	@ (8002a80 <YLIDARX2_ParseData+0x360>)
 800282c:	f007 fe0e 	bl	800a44c <puts>
#endif
		YLIDARX2_sample_t samples[hYLIDAR->sample_quantity];
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	7b19      	ldrb	r1, [r3, #12]
 8002834:	460b      	mov	r3, r1
 8002836:	3b01      	subs	r3, #1
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800283a:	b2cb      	uxtb	r3, r1
 800283c:	2200      	movs	r2, #0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	617a      	str	r2, [r7, #20]
 8002842:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002846:	1890      	adds	r0, r2, r2
 8002848:	60b8      	str	r0, [r7, #8]
 800284a:	415b      	adcs	r3, r3
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002852:	6938      	ldr	r0, [r7, #16]
 8002854:	eb12 0800 	adds.w	r8, r2, r0
 8002858:	6978      	ldr	r0, [r7, #20]
 800285a:	eb43 0900 	adc.w	r9, r3, r0
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800286a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800286e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002872:	b2cb      	uxtb	r3, r1
 8002874:	2200      	movs	r2, #0
 8002876:	469a      	mov	sl, r3
 8002878:	4693      	mov	fp, r2
 800287a:	4652      	mov	r2, sl
 800287c:	465b      	mov	r3, fp
 800287e:	1890      	adds	r0, r2, r2
 8002880:	6038      	str	r0, [r7, #0]
 8002882:	415b      	adcs	r3, r3
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800288a:	eb12 040a 	adds.w	r4, r2, sl
 800288e:	eb43 050b 	adc.w	r5, r3, fp
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	016b      	lsls	r3, r5, #5
 800289c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80028a0:	0162      	lsls	r2, r4, #5
 80028a2:	460a      	mov	r2, r1
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	3307      	adds	r3, #7
 80028ae:	08db      	lsrs	r3, r3, #3
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	ebad 0d03 	sub.w	sp, sp, r3
 80028b6:	466b      	mov	r3, sp
 80028b8:	3303      	adds	r3, #3
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24

		for (int i = 0; i < hYLIDAR->sample_quantity; i++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80028c4:	e0bd      	b.n	8002a42 <YLIDARX2_ParseData+0x322>
		{
			samples[i].data = hYLIDAR->data_buffer[10 + i*2] | (hYLIDAR->data_buffer[11 + i*2] << 8);
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028cc:	3205      	adds	r2, #5
 80028ce:	0052      	lsls	r2, r2, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b21a      	sxth	r2, r3
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80028dc:	0049      	lsls	r1, r1, #1
 80028de:	310b      	adds	r1, #11
 80028e0:	440b      	add	r3, r1
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	4313      	orrs	r3, r2
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	b298      	uxth	r0, r3
 80028ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	4602      	mov	r2, r0
 80028fe:	801a      	strh	r2, [r3, #0]
			samples[i].distance = (uint16_t)((samples[i].data) >> 2);
 8002900:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002902:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	b298      	uxth	r0, r3
 8002914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3302      	adds	r3, #2
 8002924:	4602      	mov	r2, r0
 8002926:	801a      	strh	r2, [r3, #0]
			samples[i].interference_flag = (samples[i].data) & 0b11; // Lower 2 bits
 8002928:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800292a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	b2d8      	uxtb	r0, r3
 8002940:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3304      	adds	r3, #4
 8002950:	4602      	mov	r2, r0
 8002952:	701a      	strb	r2, [r3, #0]

			// Compute the intermediate angle
			float Angle_i = diffAngle * (float)((i - 1)/(hYLIDAR->sample_quantity-1)) + Angle_FSA;
 8002954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002956:	1e5a      	subs	r2, r3, #1
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	7b1b      	ldrb	r3, [r3, #12]
 800295c:	3b01      	subs	r3, #1
 800295e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800296a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297a:	edc7 7a08 	vstr	s15, [r7, #32]

			// Compute angle correction
			float AngCorrect = 0.0f;
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	643b      	str	r3, [r7, #64]	@ 0x40

			if (samples[i].distance > 0)
 8002984:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3302      	adds	r3, #2
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d040      	beq.n	8002a1c <YLIDARX2_ParseData+0x2fc>
			{
				AngCorrect = atan(21.8f * (155.3f - samples[i].distance)/(155.3f * samples[i].distance) ) * (180.0f / PI);
 800299a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800299c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3302      	adds	r3, #2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	ee07 3a90 	vmov	s15, r3
 80029b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b4:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002a84 <YLIDARX2_ParseData+0x364>
 80029b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029bc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002a88 <YLIDARX2_ParseData+0x368>
 80029c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3302      	adds	r3, #2
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029de:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8002a84 <YLIDARX2_ParseData+0x364>
 80029e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029ea:	ee16 0a90 	vmov	r0, s13
 80029ee:	f7fd fdd3 	bl	8000598 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	ec43 2b10 	vmov	d0, r2, r3
 80029fa:	f00b f96d 	bl	800dcd8 <atan>
 80029fe:	ec51 0b10 	vmov	r0, r1, d0
 8002a02:	a31b      	add	r3, pc, #108	@ (adr r3, 8002a70 <YLIDARX2_ParseData+0x350>)
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	f7fd fe1e 	bl	8000648 <__aeabi_dmul>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fe f910 	bl	8000c38 <__aeabi_d2f>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	643b      	str	r3, [r7, #64]	@ 0x40
			}

			samples[i].corrected_angle = Angle_i + AngCorrect;
 8002a1c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a20:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3308      	adds	r3, #8
 8002a38:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < hYLIDAR->sample_quantity; i++)
 8002a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a3e:	3301      	adds	r3, #1
 8002a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	7b1b      	ldrb	r3, [r3, #12]
 8002a46:	461a      	mov	r2, r3
 8002a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	f6ff af3b 	blt.w	80028c6 <YLIDARX2_ParseData+0x1a6>
		}

		hYLIDAR->samples = samples;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a54:	611a      	str	r2, [r3, #16]
#if (DEBUG)
		YLIDARX2_PrintSamples(hYLIDAR);
 8002a56:	69f8      	ldr	r0, [r7, #28]
 8002a58:	f7ff fdfc 	bl	8002654 <YLIDARX2_PrintSamples>
 8002a5c:	46b5      	mov	sp, r6
	{
 8002a5e:	e002      	b.n	8002a66 <YLIDARX2_ParseData+0x346>
#endif
	}
	else
	{
		printf("YLIDAR X2: Invalid start bytes!\r\n");
 8002a60:	480a      	ldr	r0, [pc, #40]	@ (8002a8c <YLIDARX2_ParseData+0x36c>)
 8002a62:	f007 fcf3 	bl	800a44c <puts>
	}
}
 8002a66:	374c      	adds	r7, #76	@ 0x4c
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a6e:	bf00      	nop
 8002a70:	1a63bfe5 	.word	0x1a63bfe5
 8002a74:	404ca5dc 	.word	0x404ca5dc
 8002a78:	42800000 	.word	0x42800000
 8002a7c:	43b40000 	.word	0x43b40000
 8002a80:	0800e37c 	.word	0x0800e37c
 8002a84:	431b4ccd 	.word	0x431b4ccd
 8002a88:	41ae6666 	.word	0x41ae6666
 8002a8c:	0800e38c 	.word	0x0800e38c

08002a90 <YLIDARX2_UART_irq>:

/**
 * @param	UART buffer, should be a variable or an array of 1.
 */
void YLIDARX2_UART_irq(h_YLIDARX2_t * hYLIDAR)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	// Add received byte to the buffer
	uartBuffer[bufferIndex++] = hYLIDAR->uart_buffer[0];
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	1c59      	adds	r1, r3, #1
 8002aa2:	b288      	uxth	r0, r1
 8002aa4:	492a      	ldr	r1, [pc, #168]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002aa6:	8008      	strh	r0, [r1, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	7812      	ldrb	r2, [r2, #0]
 8002aac:	4b29      	ldr	r3, [pc, #164]	@ (8002b54 <YLIDARX2_UART_irq+0xc4>)
 8002aae:	545a      	strb	r2, [r3, r1]

	// Check for start bytes and process data only if a full packet is received
	if (bufferIndex >= 2)
 8002ab0:	4b27      	ldr	r3, [pc, #156]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d93e      	bls.n	8002b36 <YLIDARX2_UART_irq+0xa6>
	{
		if(uartBuffer[0] == YLIDAR_START_BYTE2 && uartBuffer[1] == YLIDAR_START_BYTE1)
 8002ab8:	4b26      	ldr	r3, [pc, #152]	@ (8002b54 <YLIDARX2_UART_irq+0xc4>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2baa      	cmp	r3, #170	@ 0xaa
 8002abe:	d12b      	bne.n	8002b18 <YLIDARX2_UART_irq+0x88>
 8002ac0:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <YLIDARX2_UART_irq+0xc4>)
 8002ac2:	785b      	ldrb	r3, [r3, #1]
 8002ac4:	2b55      	cmp	r3, #85	@ 0x55
 8002ac6:	d127      	bne.n	8002b18 <YLIDARX2_UART_irq+0x88>
		{
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 8002ac8:	4b21      	ldr	r3, [pc, #132]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	2b19      	cmp	r3, #25
 8002ace:	d931      	bls.n	8002b34 <YLIDARX2_UART_irq+0xa4>
			{
				// Extract sample quantity
				hYLIDAR->sample_quantity = uartBuffer[3];
 8002ad0:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <YLIDARX2_UART_irq+0xc4>)
 8002ad2:	78da      	ldrb	r2, [r3, #3]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	731a      	strb	r2, [r3, #12]
				uint16_t expectedLength = YLIDAR_PACKET_HEADER_LENGTH + (hYLIDAR->sample_quantity * 2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7b1b      	ldrb	r3, [r3, #12]
 8002adc:	330d      	adds	r3, #13
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	81fb      	strh	r3, [r7, #14]

				// Process only when the full packet is received
				if (bufferIndex >= expectedLength)
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	89fa      	ldrh	r2, [r7, #14]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d822      	bhi.n	8002b34 <YLIDARX2_UART_irq+0xa4>
				{
					hYLIDAR->data_buffer = uartBuffer;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <YLIDARX2_UART_irq+0xc4>)
 8002af2:	605a      	str	r2, [r3, #4]
					hYLIDAR->data_length = bufferIndex;
 8002af4:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	609a      	str	r2, [r3, #8]

					YLIDARX2_ParseData(hYLIDAR);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff fe0e 	bl	8002720 <YLIDARX2_ParseData>

					// Reset the buffer
					bufferIndex = 0;
 8002b04:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	801a      	strh	r2, [r3, #0]
					memset(uartBuffer, 0, sizeof(uartBuffer));
 8002b0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4810      	ldr	r0, [pc, #64]	@ (8002b54 <YLIDARX2_UART_irq+0xc4>)
 8002b12:	f007 fdb5 	bl	800a680 <memset>
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 8002b16:	e00d      	b.n	8002b34 <YLIDARX2_UART_irq+0xa4>
			}
		}
		else
		{
			// Shift buffer to discard invalid start bytes
			memmove(uartBuffer, uartBuffer + 1, --bufferIndex);
 8002b18:	490f      	ldr	r1, [pc, #60]	@ (8002b58 <YLIDARX2_UART_irq+0xc8>)
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002b24:	801a      	strh	r2, [r3, #0]
 8002b26:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4809      	ldr	r0, [pc, #36]	@ (8002b54 <YLIDARX2_UART_irq+0xc4>)
 8002b2e:	f007 fd8d 	bl	800a64c <memmove>
 8002b32:	e000      	b.n	8002b36 <YLIDARX2_UART_irq+0xa6>
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 8002b34:	bf00      	nop
		}
	}

	if (bufferIndex >= USART_BUFFER_SIZE)
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3e:	d302      	bcc.n	8002b46 <YLIDARX2_UART_irq+0xb6>
	{
		// Reset buffer if overflow occurs
		bufferIndex = 0;
 8002b40:	4b03      	ldr	r3, [pc, #12]	@ (8002b50 <YLIDARX2_UART_irq+0xc0>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	801a      	strh	r2, [r3, #0]
#if (LOGS)
		printf("YLIDAR X2: Buffer overflow! Clearing buffer.\r\n");
#endif
	}
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20001438 	.word	0x20001438
 8002b54:	2000143c 	.word	0x2000143c
 8002b58:	2000143d 	.word	0x2000143d

08002b5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b66:	2003      	movs	r0, #3
 8002b68:	f001 f96e 	bl	8003e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b6c:	200f      	movs	r0, #15
 8002b6e:	f000 f80d 	bl	8002b8c <HAL_InitTick>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	71fb      	strb	r3, [r7, #7]
 8002b7c:	e001      	b.n	8002b82 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b7e:	f7fe fd99 	bl	80016b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b82:	79fb      	ldrb	r3, [r7, #7]

}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b98:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <HAL_InitTick+0x68>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d022      	beq.n	8002be6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002ba0:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <HAL_InitTick+0x6c>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <HAL_InitTick+0x68>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 f97a 	bl	8003eae <HAL_SYSTICK_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10f      	bne.n	8002be0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b0f      	cmp	r3, #15
 8002bc4:	d809      	bhi.n	8002bda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bce:	f001 f946 	bl	8003e5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <HAL_InitTick+0x70>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	e007      	b.n	8002bea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e004      	b.n	8002bea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	e001      	b.n	8002bea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000f4c 	.word	0x20000f4c
 8002bf8:	20000f44 	.word	0x20000f44
 8002bfc:	20000f48 	.word	0x20000f48

08002c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_IncTick+0x1c>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <HAL_IncTick+0x20>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	4a03      	ldr	r2, [pc, #12]	@ (8002c1c <HAL_IncTick+0x1c>)
 8002c10:	6013      	str	r3, [r2, #0]
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	2000183c 	.word	0x2000183c
 8002c20:	20000f4c 	.word	0x20000f4c

08002c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return uwTick;
 8002c28:	4b03      	ldr	r3, [pc, #12]	@ (8002c38 <HAL_GetTick+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	2000183c 	.word	0x2000183c

08002c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c44:	f7ff ffee 	bl	8002c24 <HAL_GetTick>
 8002c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c54:	d004      	beq.n	8002c60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c56:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_Delay+0x40>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c60:	bf00      	nop
 8002c62:	f7ff ffdf 	bl	8002c24 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d8f7      	bhi.n	8002c62 <HAL_Delay+0x26>
  {
  }
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000f4c 	.word	0x20000f4c

08002c80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	609a      	str	r2, [r3, #8]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3360      	adds	r3, #96	@ 0x60
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <LL_ADC_SetOffset+0x44>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	03fff000 	.word	0x03fff000

08002d30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3360      	adds	r3, #96	@ 0x60
 8002d3e:	461a      	mov	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3360      	adds	r3, #96	@ 0x60
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b087      	sub	sp, #28
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3360      	adds	r3, #96	@ 0x60
 8002da2:	461a      	mov	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3360      	adds	r3, #96	@ 0x60
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	615a      	str	r2, [r3, #20]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3330      	adds	r3, #48	@ 0x30
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	4413      	add	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	211f      	movs	r1, #31
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	401a      	ands	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0e9b      	lsrs	r3, r3, #26
 8002e5c:	f003 011f 	and.w	r1, r3, #31
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	0e5b      	lsrs	r3, r3, #25
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	4413      	add	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	0d1b      	lsrs	r3, r3, #20
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2107      	movs	r1, #7
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	0d1b      	lsrs	r3, r3, #20
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	43db      	mvns	r3, r3
 8002eee:	401a      	ands	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0318 	and.w	r3, r3, #24
 8002ef6:	4908      	ldr	r1, [pc, #32]	@ (8002f18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ef8:	40d9      	lsrs	r1, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	400b      	ands	r3, r1
 8002efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f02:	431a      	orrs	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	0007ffff 	.word	0x0007ffff

08002f1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002f2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6093      	str	r3, [r2, #8]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f54:	d101      	bne.n	8002f5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fa4:	d101      	bne.n	8002faa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <LL_ADC_IsEnabled+0x18>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <LL_ADC_IsEnabled+0x1a>
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d101      	bne.n	8002ff6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b08      	cmp	r3, #8
 8003016:	d101      	bne.n	800301c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b089      	sub	sp, #36	@ 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e167      	b.n	8003316 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7fe f865 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff67 	bl	8002f40 <LL_ADC_IsDeepPowerDownEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff4d 	bl	8002f1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ff82 	bl	8002f90 <LL_ADC_IsInternalRegulatorEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d115      	bne.n	80030be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff66 	bl	8002f68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800309c:	4ba0      	ldr	r3, [pc, #640]	@ (8003320 <HAL_ADC_Init+0x2f4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	099b      	lsrs	r3, r3, #6
 80030a2:	4aa0      	ldr	r2, [pc, #640]	@ (8003324 <HAL_ADC_Init+0x2f8>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	3301      	adds	r3, #1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030b0:	e002      	b.n	80030b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f9      	bne.n	80030b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff ff64 	bl	8002f90 <LL_ADC_IsInternalRegulatorEnabled>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10d      	bne.n	80030ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	f043 0210 	orr.w	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff75 	bl	8002fde <LL_ADC_REG_IsConversionOngoing>
 80030f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 8100 	bne.w	8003304 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 80fc 	bne.w	8003304 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003114:	f043 0202 	orr.w	r2, r3, #2
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff49 	bl	8002fb8 <LL_ADC_IsEnabled>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d111      	bne.n	8003150 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800312c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003130:	f7ff ff42 	bl	8002fb8 <LL_ADC_IsEnabled>
 8003134:	4604      	mov	r4, r0
 8003136:	487c      	ldr	r0, [pc, #496]	@ (8003328 <HAL_ADC_Init+0x2fc>)
 8003138:	f7ff ff3e 	bl	8002fb8 <LL_ADC_IsEnabled>
 800313c:	4603      	mov	r3, r0
 800313e:	4323      	orrs	r3, r4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4619      	mov	r1, r3
 800314a:	4878      	ldr	r0, [pc, #480]	@ (800332c <HAL_ADC_Init+0x300>)
 800314c:	f7ff fd98 	bl	8002c80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7f5b      	ldrb	r3, [r3, #29]
 8003154:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800315a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003160:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003166:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800316e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800317a:	2b01      	cmp	r3, #1
 800317c:	d106      	bne.n	800318c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	3b01      	subs	r3, #1
 8003184:	045b      	lsls	r3, r3, #17
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	4b60      	ldr	r3, [pc, #384]	@ (8003330 <HAL_ADC_Init+0x304>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	69b9      	ldr	r1, [r7, #24]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ff14 	bl	8003004 <LL_ADC_INJ_IsConversionOngoing>
 80031dc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d16d      	bne.n	80032c0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d16a      	bne.n	80032c0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031ee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003206:	f023 0302 	bic.w	r3, r3, #2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	69b9      	ldr	r1, [r7, #24]
 8003210:	430b      	orrs	r3, r1
 8003212:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d017      	beq.n	800324c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800322a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003234:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003238:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6911      	ldr	r1, [r2, #16]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	430b      	orrs	r3, r1
 8003246:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800324a:	e013      	b.n	8003274 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800325a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800326c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003270:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800327a:	2b01      	cmp	r3, #1
 800327c:	d118      	bne.n	80032b0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003294:	4311      	orrs	r1, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800329a:	4311      	orrs	r1, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032a0:	430a      	orrs	r2, r1
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	611a      	str	r2, [r3, #16]
 80032ae:	e007      	b.n	80032c0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10c      	bne.n	80032e2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	f023 010f 	bic.w	r1, r3, #15
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30
 80032e0:	e007      	b.n	80032f2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 020f 	bic.w	r2, r2, #15
 80032f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f6:	f023 0303 	bic.w	r3, r3, #3
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003302:	e007      	b.n	8003314 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003308:	f043 0210 	orr.w	r2, r3, #16
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003314:	7ffb      	ldrb	r3, [r7, #31]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3724      	adds	r7, #36	@ 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd90      	pop	{r4, r7, pc}
 800331e:	bf00      	nop
 8003320:	20000f44 	.word	0x20000f44
 8003324:	053e2d63 	.word	0x053e2d63
 8003328:	50000100 	.word	0x50000100
 800332c:	50000300 	.word	0x50000300
 8003330:	fff04007 	.word	0xfff04007

08003334 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b0b6      	sub	sp, #216	@ 0xd8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x22>
 8003352:	2302      	movs	r3, #2
 8003354:	e3c8      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x7b4>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fe3b 	bl	8002fde <LL_ADC_REG_IsConversionOngoing>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 83ad 	bne.w	8003aca <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	f7ff fd51 	bl	8002e24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fe29 	bl	8002fde <LL_ADC_REG_IsConversionOngoing>
 800338c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fe35 	bl	8003004 <LL_ADC_INJ_IsConversionOngoing>
 800339a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800339e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f040 81d9 	bne.w	800375a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 81d4 	bne.w	800375a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033ba:	d10f      	bne.n	80033dc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2200      	movs	r2, #0
 80033c6:	4619      	mov	r1, r3
 80033c8:	f7ff fd58 	bl	8002e7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fd12 	bl	8002dfe <LL_ADC_SetSamplingTimeCommonConfig>
 80033da:	e00e      	b.n	80033fa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f7ff fd47 	bl	8002e7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fd02 	bl	8002dfe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	08db      	lsrs	r3, r3, #3
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d022      	beq.n	8003462 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6919      	ldr	r1, [r3, #16]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800342c:	f7ff fc5c 	bl	8002ce8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6919      	ldr	r1, [r3, #16]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	461a      	mov	r2, r3
 800343e:	f7ff fca8 	bl	8002d92 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x124>
 8003452:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003456:	e000      	b.n	800345a <HAL_ADC_ConfigChannel+0x126>
 8003458:	2300      	movs	r3, #0
 800345a:	461a      	mov	r2, r3
 800345c:	f7ff fcb4 	bl	8002dc8 <LL_ADC_SetOffsetSaturation>
 8003460:	e17b      	b.n	800375a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fc61 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 800346e:	4603      	mov	r3, r0
 8003470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10a      	bne.n	800348e <HAL_ADC_ConfigChannel+0x15a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fc56 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 8003484:	4603      	mov	r3, r0
 8003486:	0e9b      	lsrs	r3, r3, #26
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	e01e      	b.n	80034cc <HAL_ADC_ConfigChannel+0x198>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fc4b 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 800349a:	4603      	mov	r3, r0
 800349c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e004      	b.n	80034ca <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80034c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x1b0>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0e9b      	lsrs	r3, r3, #26
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	e018      	b.n	8003516 <HAL_ADC_ConfigChannel+0x1e2>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80034f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003508:	2320      	movs	r3, #32
 800350a:	e004      	b.n	8003516 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800350c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003516:	429a      	cmp	r2, r3
 8003518:	d106      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fc1a 	bl	8002d5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fbfe 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 8003534:	4603      	mov	r3, r0
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x220>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2101      	movs	r1, #1
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fbf3 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 800354a:	4603      	mov	r3, r0
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	f003 021f 	and.w	r2, r3, #31
 8003552:	e01e      	b.n	8003592 <HAL_ADC_ConfigChannel+0x25e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fbe8 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 8003560:	4603      	mov	r3, r0
 8003562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003576:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800357a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003582:	2320      	movs	r3, #32
 8003584:	e004      	b.n	8003590 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x276>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	0e9b      	lsrs	r3, r3, #26
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	e018      	b.n	80035dc <HAL_ADC_ConfigChannel+0x2a8>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80035be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80035c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e004      	b.n	80035dc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80035d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035dc:	429a      	cmp	r2, r3
 80035de:	d106      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2200      	movs	r2, #0
 80035e6:	2101      	movs	r1, #1
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fbb7 	bl	8002d5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2102      	movs	r1, #2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fb9b 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <HAL_ADC_ConfigChannel+0x2e6>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2102      	movs	r1, #2
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fb90 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 8003610:	4603      	mov	r3, r0
 8003612:	0e9b      	lsrs	r3, r3, #26
 8003614:	f003 021f 	and.w	r2, r3, #31
 8003618:	e01e      	b.n	8003658 <HAL_ADC_ConfigChannel+0x324>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2102      	movs	r1, #2
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fb85 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 8003626:	4603      	mov	r3, r0
 8003628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800363c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003640:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003648:	2320      	movs	r3, #32
 800364a:	e004      	b.n	8003656 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800364c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x33c>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0e9b      	lsrs	r3, r3, #26
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	e016      	b.n	800369e <HAL_ADC_ConfigChannel+0x36a>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003682:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003688:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003690:	2320      	movs	r3, #32
 8003692:	e004      	b.n	800369e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003694:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800369e:	429a      	cmp	r2, r3
 80036a0:	d106      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2200      	movs	r2, #0
 80036a8:	2102      	movs	r1, #2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fb56 	bl	8002d5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2103      	movs	r1, #3
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fb3a 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x3a8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2103      	movs	r1, #3
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fb2f 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 80036d2:	4603      	mov	r3, r0
 80036d4:	0e9b      	lsrs	r3, r3, #26
 80036d6:	f003 021f 	and.w	r2, r3, #31
 80036da:	e017      	b.n	800370c <HAL_ADC_ConfigChannel+0x3d8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2103      	movs	r1, #3
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fb24 	bl	8002d30 <LL_ADC_GetOffsetChannel>
 80036e8:	4603      	mov	r3, r0
 80036ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80036f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036f6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80036f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80036fe:	2320      	movs	r3, #32
 8003700:	e003      	b.n	800370a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003714:	2b00      	cmp	r3, #0
 8003716:	d105      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x3f0>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	0e9b      	lsrs	r3, r3, #26
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	e011      	b.n	8003748 <HAL_ADC_ConfigChannel+0x414>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003732:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003734:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800373c:	2320      	movs	r3, #32
 800373e:	e003      	b.n	8003748 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003748:	429a      	cmp	r2, r3
 800374a:	d106      	bne.n	800375a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2200      	movs	r2, #0
 8003752:	2103      	movs	r1, #3
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fb01 	bl	8002d5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fc2a 	bl	8002fb8 <LL_ADC_IsEnabled>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 8140 	bne.w	80039ec <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	461a      	mov	r2, r3
 800377a:	f7ff fbab 	bl	8002ed4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	4a8f      	ldr	r2, [pc, #572]	@ (80039c0 <HAL_ADC_ConfigChannel+0x68c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	f040 8131 	bne.w	80039ec <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x47e>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	0e9b      	lsrs	r3, r3, #26
 80037a0:	3301      	adds	r3, #1
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	bf94      	ite	ls
 80037aa:	2301      	movls	r3, #1
 80037ac:	2300      	movhi	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e019      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x4b2>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80037c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037c2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80037c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80037ca:	2320      	movs	r3, #32
 80037cc:	e003      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80037ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	2b09      	cmp	r3, #9
 80037de:	bf94      	ite	ls
 80037e0:	2301      	movls	r3, #1
 80037e2:	2300      	movhi	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d079      	beq.n	80038de <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d107      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x4d2>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	0e9b      	lsrs	r3, r3, #26
 80037fc:	3301      	adds	r3, #1
 80037fe:	069b      	lsls	r3, r3, #26
 8003800:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003804:	e015      	b.n	8003832 <HAL_ADC_ConfigChannel+0x4fe>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003816:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800381e:	2320      	movs	r3, #32
 8003820:	e003      	b.n	800382a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	3301      	adds	r3, #1
 800382c:	069b      	lsls	r3, r3, #26
 800382e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x51e>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0e9b      	lsrs	r3, r3, #26
 8003844:	3301      	adds	r3, #1
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	e017      	b.n	8003882 <HAL_ADC_ConfigChannel+0x54e>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003862:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800386a:	2320      	movs	r3, #32
 800386c:	e003      	b.n	8003876 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800386e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	ea42 0103 	orr.w	r1, r2, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x574>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0e9b      	lsrs	r3, r3, #26
 8003898:	3301      	adds	r3, #1
 800389a:	f003 021f 	and.w	r2, r3, #31
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	051b      	lsls	r3, r3, #20
 80038a6:	e018      	b.n	80038da <HAL_ADC_ConfigChannel+0x5a6>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	fa93 f3a3 	rbit	r3, r3
 80038b4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80038b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80038ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80038c0:	2320      	movs	r3, #32
 80038c2:	e003      	b.n	80038cc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80038c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	3301      	adds	r3, #1
 80038ce:	f003 021f 	and.w	r2, r3, #31
 80038d2:	4613      	mov	r3, r2
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	4413      	add	r3, r2
 80038d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038da:	430b      	orrs	r3, r1
 80038dc:	e081      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d107      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x5c6>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	0e9b      	lsrs	r3, r3, #26
 80038f0:	3301      	adds	r3, #1
 80038f2:	069b      	lsls	r3, r3, #26
 80038f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038f8:	e015      	b.n	8003926 <HAL_ADC_ConfigChannel+0x5f2>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003912:	2320      	movs	r3, #32
 8003914:	e003      	b.n	800391e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	3301      	adds	r3, #1
 8003920:	069b      	lsls	r3, r3, #26
 8003922:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x612>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	0e9b      	lsrs	r3, r3, #26
 8003938:	3301      	adds	r3, #1
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	2101      	movs	r1, #1
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	e017      	b.n	8003976 <HAL_ADC_ConfigChannel+0x642>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	61fb      	str	r3, [r7, #28]
  return result;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800395e:	2320      	movs	r3, #32
 8003960:	e003      	b.n	800396a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	ea42 0103 	orr.w	r1, r2, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x66e>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	0e9b      	lsrs	r3, r3, #26
 800398c:	3301      	adds	r3, #1
 800398e:	f003 021f 	and.w	r2, r3, #31
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	3b1e      	subs	r3, #30
 800399a:	051b      	lsls	r3, r3, #20
 800399c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039a0:	e01e      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x6ac>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa93 f3a3 	rbit	r3, r3
 80039ae:	613b      	str	r3, [r7, #16]
  return result;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80039ba:	2320      	movs	r3, #32
 80039bc:	e006      	b.n	80039cc <HAL_ADC_ConfigChannel+0x698>
 80039be:	bf00      	nop
 80039c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	3301      	adds	r3, #1
 80039ce:	f003 021f 	and.w	r2, r3, #31
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	3b1e      	subs	r3, #30
 80039da:	051b      	lsls	r3, r3, #20
 80039dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e6:	4619      	mov	r1, r3
 80039e8:	f7ff fa48 	bl	8002e7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b3f      	ldr	r3, [pc, #252]	@ (8003af0 <HAL_ADC_ConfigChannel+0x7bc>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d071      	beq.n	8003adc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039f8:	483e      	ldr	r0, [pc, #248]	@ (8003af4 <HAL_ADC_ConfigChannel+0x7c0>)
 80039fa:	f7ff f967 	bl	8002ccc <LL_ADC_GetCommonPathInternalCh>
 80039fe:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a3c      	ldr	r2, [pc, #240]	@ (8003af8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <HAL_ADC_ConfigChannel+0x6e2>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a3a      	ldr	r2, [pc, #232]	@ (8003afc <HAL_ADC_ConfigChannel+0x7c8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d127      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d121      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a2a:	d157      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a34:	4619      	mov	r1, r3
 8003a36:	482f      	ldr	r0, [pc, #188]	@ (8003af4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a38:	f7ff f935 	bl	8002ca6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a3c:	4b30      	ldr	r3, [pc, #192]	@ (8003b00 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	4a30      	ldr	r2, [pc, #192]	@ (8003b04 <HAL_ADC_ConfigChannel+0x7d0>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a56:	e002      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f9      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a64:	e03a      	b.n	8003adc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a27      	ldr	r2, [pc, #156]	@ (8003b08 <HAL_ADC_ConfigChannel+0x7d4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d113      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10d      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a22      	ldr	r2, [pc, #136]	@ (8003b0c <HAL_ADC_ConfigChannel+0x7d8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02a      	beq.n	8003adc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4818      	ldr	r0, [pc, #96]	@ (8003af4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a92:	f7ff f908 	bl	8002ca6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a96:	e021      	b.n	8003adc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d11c      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d116      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a16      	ldr	r2, [pc, #88]	@ (8003b0c <HAL_ADC_ConfigChannel+0x7d8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d011      	beq.n	8003adc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003abc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	480c      	ldr	r0, [pc, #48]	@ (8003af4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ac4:	f7ff f8ef 	bl	8002ca6 <LL_ADC_SetCommonPathInternalCh>
 8003ac8:	e008      	b.n	8003adc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ae4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	37d8      	adds	r7, #216	@ 0xd8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	80080000 	.word	0x80080000
 8003af4:	50000300 	.word	0x50000300
 8003af8:	c3210000 	.word	0xc3210000
 8003afc:	90c00010 	.word	0x90c00010
 8003b00:	20000f44 	.word	0x20000f44
 8003b04:	053e2d63 	.word	0x053e2d63
 8003b08:	c7520000 	.word	0xc7520000
 8003b0c:	50000100 	.word	0x50000100
 8003b10:	cb840000 	.word	0xcb840000

08003b14 <LL_ADC_IsEnabled>:
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <LL_ADC_IsEnabled+0x18>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <LL_ADC_IsEnabled+0x1a>
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d101      	bne.n	8003b52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b0a1      	sub	sp, #132	@ 0x84
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e08b      	b.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b86:	2300      	movs	r3, #0
 8003b88:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b96:	d102      	bne.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b98:	4b41      	ldr	r3, [pc, #260]	@ (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	e001      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e06a      	b.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff ffb9 	bl	8003b3a <LL_ADC_REG_IsConversionOngoing>
 8003bc8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff ffb3 	bl	8003b3a <LL_ADC_REG_IsConversionOngoing>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d14c      	bne.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003bda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d149      	bne.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003be0:	4b30      	ldr	r3, [pc, #192]	@ (8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003be2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d028      	beq.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bfe:	035b      	lsls	r3, r3, #13
 8003c00:	430b      	orrs	r3, r1
 8003c02:	431a      	orrs	r2, r3
 8003c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c08:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c0c:	f7ff ff82 	bl	8003b14 <LL_ADC_IsEnabled>
 8003c10:	4604      	mov	r4, r0
 8003c12:	4823      	ldr	r0, [pc, #140]	@ (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c14:	f7ff ff7e 	bl	8003b14 <LL_ADC_IsEnabled>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4323      	orrs	r3, r4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d133      	bne.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c28:	f023 030f 	bic.w	r3, r3, #15
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	6811      	ldr	r1, [r2, #0]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	6892      	ldr	r2, [r2, #8]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	431a      	orrs	r2, r3
 8003c38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c3a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c3c:	e024      	b.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c48:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c4a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c4e:	f7ff ff61 	bl	8003b14 <LL_ADC_IsEnabled>
 8003c52:	4604      	mov	r4, r0
 8003c54:	4812      	ldr	r0, [pc, #72]	@ (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c56:	f7ff ff5d 	bl	8003b14 <LL_ADC_IsEnabled>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4323      	orrs	r3, r4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d112      	bne.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c6a:	f023 030f 	bic.w	r3, r3, #15
 8003c6e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c70:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c72:	e009      	b.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003c86:	e000      	b.n	8003c8a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c92:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3784      	adds	r7, #132	@ 0x84
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd90      	pop	{r4, r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	50000100 	.word	0x50000100
 8003ca4:	50000300 	.word	0x50000300

08003ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cec <__NVIC_SetPriorityGrouping+0x44>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cda:	4a04      	ldr	r2, [pc, #16]	@ (8003cec <__NVIC_SetPriorityGrouping+0x44>)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	60d3      	str	r3, [r2, #12]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf4:	4b04      	ldr	r3, [pc, #16]	@ (8003d08 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	0a1b      	lsrs	r3, r3, #8
 8003cfa:	f003 0307 	and.w	r3, r3, #7
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	db0b      	blt.n	8003d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	f003 021f 	and.w	r2, r3, #31
 8003d24:	4907      	ldr	r1, [pc, #28]	@ (8003d44 <__NVIC_EnableIRQ+0x38>)
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	e000e100 	.word	0xe000e100

08003d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	6039      	str	r1, [r7, #0]
 8003d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	db0a      	blt.n	8003d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	490c      	ldr	r1, [pc, #48]	@ (8003d94 <__NVIC_SetPriority+0x4c>)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	0112      	lsls	r2, r2, #4
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d70:	e00a      	b.n	8003d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	4908      	ldr	r1, [pc, #32]	@ (8003d98 <__NVIC_SetPriority+0x50>)
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	3b04      	subs	r3, #4
 8003d80:	0112      	lsls	r2, r2, #4
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	440b      	add	r3, r1
 8003d86:	761a      	strb	r2, [r3, #24]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000e100 	.word	0xe000e100
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	@ 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f1c3 0307 	rsb	r3, r3, #7
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	bf28      	it	cs
 8003dba:	2304      	movcs	r3, #4
 8003dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d902      	bls.n	8003dcc <NVIC_EncodePriority+0x30>
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3b03      	subs	r3, #3
 8003dca:	e000      	b.n	8003dce <NVIC_EncodePriority+0x32>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	401a      	ands	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	43d9      	mvns	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df4:	4313      	orrs	r3, r2
         );
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3724      	adds	r7, #36	@ 0x24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e14:	d301      	bcc.n	8003e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00f      	b.n	8003e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e44 <SysTick_Config+0x40>)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e22:	210f      	movs	r1, #15
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e28:	f7ff ff8e 	bl	8003d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e2c:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <SysTick_Config+0x40>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e32:	4b04      	ldr	r3, [pc, #16]	@ (8003e44 <SysTick_Config+0x40>)
 8003e34:	2207      	movs	r2, #7
 8003e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	e000e010 	.word	0xe000e010

08003e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff29 	bl	8003ca8 <__NVIC_SetPriorityGrouping>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b086      	sub	sp, #24
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e6c:	f7ff ff40 	bl	8003cf0 <__NVIC_GetPriorityGrouping>
 8003e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	6978      	ldr	r0, [r7, #20]
 8003e78:	f7ff ff90 	bl	8003d9c <NVIC_EncodePriority>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff5f 	bl	8003d48 <__NVIC_SetPriority>
}
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff33 	bl	8003d0c <__NVIC_EnableIRQ>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ffa4 	bl	8003e04 <SysTick_Config>
 8003ebc:	4603      	mov	r3, r0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d005      	beq.n	8003eea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	e037      	b.n	8003f5a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 020e 	bic.w	r2, r2, #14
 8003ef8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f08:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f003 021f 	and.w	r2, r3, #31
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2101      	movs	r1, #1
 8003f28:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f36:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00c      	beq.n	8003f5a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f4e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f58:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d00d      	beq.n	8003fac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2204      	movs	r2, #4
 8003f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
 8003faa:	e047      	b.n	800403c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 020e 	bic.w	r2, r2, #14
 8003fba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe0:	f003 021f 	and.w	r2, r3, #31
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f202 	lsl.w	r2, r1, r2
 8003fee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ff8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00c      	beq.n	800401c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004010:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800401a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
    }
  }
  return status;
 800403c:	7bfb      	ldrb	r3, [r7, #15]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004056:	e15a      	b.n	800430e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	2101      	movs	r1, #1
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	fa01 f303 	lsl.w	r3, r1, r3
 8004064:	4013      	ands	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 814c 	beq.w	8004308 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d005      	beq.n	8004088 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004084:	2b02      	cmp	r3, #2
 8004086:	d130      	bne.n	80040ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	2203      	movs	r2, #3
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4013      	ands	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040be:	2201      	movs	r2, #1
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43db      	mvns	r3, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 0201 	and.w	r2, r3, #1
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d017      	beq.n	8004126 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	2203      	movs	r2, #3
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d123      	bne.n	800417a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	08da      	lsrs	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3208      	adds	r2, #8
 800413a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800413e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	220f      	movs	r2, #15
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4013      	ands	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	08da      	lsrs	r2, r3, #3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3208      	adds	r2, #8
 8004174:	6939      	ldr	r1, [r7, #16]
 8004176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	2203      	movs	r2, #3
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0203 	and.w	r2, r3, #3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80a6 	beq.w	8004308 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041bc:	4b5b      	ldr	r3, [pc, #364]	@ (800432c <HAL_GPIO_Init+0x2e4>)
 80041be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c0:	4a5a      	ldr	r2, [pc, #360]	@ (800432c <HAL_GPIO_Init+0x2e4>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80041c8:	4b58      	ldr	r3, [pc, #352]	@ (800432c <HAL_GPIO_Init+0x2e4>)
 80041ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041d4:	4a56      	ldr	r2, [pc, #344]	@ (8004330 <HAL_GPIO_Init+0x2e8>)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	089b      	lsrs	r3, r3, #2
 80041da:	3302      	adds	r3, #2
 80041dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	220f      	movs	r2, #15
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041fe:	d01f      	beq.n	8004240 <HAL_GPIO_Init+0x1f8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a4c      	ldr	r2, [pc, #304]	@ (8004334 <HAL_GPIO_Init+0x2ec>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d019      	beq.n	800423c <HAL_GPIO_Init+0x1f4>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a4b      	ldr	r2, [pc, #300]	@ (8004338 <HAL_GPIO_Init+0x2f0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <HAL_GPIO_Init+0x1f0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a4a      	ldr	r2, [pc, #296]	@ (800433c <HAL_GPIO_Init+0x2f4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00d      	beq.n	8004234 <HAL_GPIO_Init+0x1ec>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a49      	ldr	r2, [pc, #292]	@ (8004340 <HAL_GPIO_Init+0x2f8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d007      	beq.n	8004230 <HAL_GPIO_Init+0x1e8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a48      	ldr	r2, [pc, #288]	@ (8004344 <HAL_GPIO_Init+0x2fc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d101      	bne.n	800422c <HAL_GPIO_Init+0x1e4>
 8004228:	2305      	movs	r3, #5
 800422a:	e00a      	b.n	8004242 <HAL_GPIO_Init+0x1fa>
 800422c:	2306      	movs	r3, #6
 800422e:	e008      	b.n	8004242 <HAL_GPIO_Init+0x1fa>
 8004230:	2304      	movs	r3, #4
 8004232:	e006      	b.n	8004242 <HAL_GPIO_Init+0x1fa>
 8004234:	2303      	movs	r3, #3
 8004236:	e004      	b.n	8004242 <HAL_GPIO_Init+0x1fa>
 8004238:	2302      	movs	r3, #2
 800423a:	e002      	b.n	8004242 <HAL_GPIO_Init+0x1fa>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_GPIO_Init+0x1fa>
 8004240:	2300      	movs	r3, #0
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	f002 0203 	and.w	r2, r2, #3
 8004248:	0092      	lsls	r2, r2, #2
 800424a:	4093      	lsls	r3, r2
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004252:	4937      	ldr	r1, [pc, #220]	@ (8004330 <HAL_GPIO_Init+0x2e8>)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	089b      	lsrs	r3, r3, #2
 8004258:	3302      	adds	r3, #2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004260:	4b39      	ldr	r3, [pc, #228]	@ (8004348 <HAL_GPIO_Init+0x300>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	43db      	mvns	r3, r3
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004284:	4a30      	ldr	r2, [pc, #192]	@ (8004348 <HAL_GPIO_Init+0x300>)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800428a:	4b2f      	ldr	r3, [pc, #188]	@ (8004348 <HAL_GPIO_Init+0x300>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	43db      	mvns	r3, r3
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042ae:	4a26      	ldr	r2, [pc, #152]	@ (8004348 <HAL_GPIO_Init+0x300>)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042b4:	4b24      	ldr	r3, [pc, #144]	@ (8004348 <HAL_GPIO_Init+0x300>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	43db      	mvns	r3, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4013      	ands	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004348 <HAL_GPIO_Init+0x300>)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042de:	4b1a      	ldr	r3, [pc, #104]	@ (8004348 <HAL_GPIO_Init+0x300>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4013      	ands	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004302:	4a11      	ldr	r2, [pc, #68]	@ (8004348 <HAL_GPIO_Init+0x300>)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3301      	adds	r3, #1
 800430c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f47f ae9d 	bne.w	8004058 <HAL_GPIO_Init+0x10>
  }
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40021000 	.word	0x40021000
 8004330:	40010000 	.word	0x40010000
 8004334:	48000400 	.word	0x48000400
 8004338:	48000800 	.word	0x48000800
 800433c:	48000c00 	.word	0x48000c00
 8004340:	48001000 	.word	0x48001000
 8004344:	48001400 	.word	0x48001400
 8004348:	40010400 	.word	0x40010400

0800434c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	807b      	strh	r3, [r7, #2]
 8004358:	4613      	mov	r3, r2
 800435a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800435c:	787b      	ldrb	r3, [r7, #1]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004362:	887a      	ldrh	r2, [r7, #2]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004368:	e002      	b.n	8004370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d141      	bne.n	800440e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800438a:	4b4b      	ldr	r3, [pc, #300]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004396:	d131      	bne.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004398:	4b47      	ldr	r3, [pc, #284]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800439e:	4a46      	ldr	r2, [pc, #280]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043a8:	4b43      	ldr	r3, [pc, #268]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043b0:	4a41      	ldr	r2, [pc, #260]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043b8:	4b40      	ldr	r3, [pc, #256]	@ (80044bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2232      	movs	r2, #50	@ 0x32
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	4a3f      	ldr	r2, [pc, #252]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	0c9b      	lsrs	r3, r3, #18
 80043ca:	3301      	adds	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ce:	e002      	b.n	80043d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d6:	4b38      	ldr	r3, [pc, #224]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e2:	d102      	bne.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f2      	bne.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ea:	4b33      	ldr	r3, [pc, #204]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f6:	d158      	bne.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e057      	b.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043fc:	4b2e      	ldr	r3, [pc, #184]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004402:	4a2d      	ldr	r2, [pc, #180]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800440c:	e04d      	b.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004414:	d141      	bne.n	800449a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004416:	4b28      	ldr	r3, [pc, #160]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004422:	d131      	bne.n	8004488 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004424:	4b24      	ldr	r3, [pc, #144]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800442a:	4a23      	ldr	r2, [pc, #140]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004434:	4b20      	ldr	r3, [pc, #128]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800443c:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004442:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004444:	4b1d      	ldr	r3, [pc, #116]	@ (80044bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2232      	movs	r2, #50	@ 0x32
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	4a1c      	ldr	r2, [pc, #112]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	0c9b      	lsrs	r3, r3, #18
 8004456:	3301      	adds	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800445a:	e002      	b.n	8004462 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3b01      	subs	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004462:	4b15      	ldr	r3, [pc, #84]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800446a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800446e:	d102      	bne.n	8004476 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f2      	bne.n	800445c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004476:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004482:	d112      	bne.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e011      	b.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004488:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800448e:	4a0a      	ldr	r2, [pc, #40]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004494:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004498:	e007      	b.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800449a:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044a2:	4a05      	ldr	r2, [pc, #20]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40007000 	.word	0x40007000
 80044bc:	20000f44 	.word	0x20000f44
 80044c0:	431bde83 	.word	0x431bde83

080044c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a04      	ldr	r2, [pc, #16]	@ (80044e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044d2:	6093      	str	r3, [r2, #8]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40007000 	.word	0x40007000

080044e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e2fe      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d075      	beq.n	80045ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004502:	4b97      	ldr	r3, [pc, #604]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800450c:	4b94      	ldr	r3, [pc, #592]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b0c      	cmp	r3, #12
 800451a:	d102      	bne.n	8004522 <HAL_RCC_OscConfig+0x3e>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b03      	cmp	r3, #3
 8004520:	d002      	beq.n	8004528 <HAL_RCC_OscConfig+0x44>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d10b      	bne.n	8004540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004528:	4b8d      	ldr	r3, [pc, #564]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d05b      	beq.n	80045ec <HAL_RCC_OscConfig+0x108>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d157      	bne.n	80045ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e2d9      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004548:	d106      	bne.n	8004558 <HAL_RCC_OscConfig+0x74>
 800454a:	4b85      	ldr	r3, [pc, #532]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a84      	ldr	r2, [pc, #528]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e01d      	b.n	8004594 <HAL_RCC_OscConfig+0xb0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004560:	d10c      	bne.n	800457c <HAL_RCC_OscConfig+0x98>
 8004562:	4b7f      	ldr	r3, [pc, #508]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7e      	ldr	r2, [pc, #504]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b7c      	ldr	r3, [pc, #496]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a7b      	ldr	r2, [pc, #492]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e00b      	b.n	8004594 <HAL_RCC_OscConfig+0xb0>
 800457c:	4b78      	ldr	r3, [pc, #480]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a77      	ldr	r2, [pc, #476]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b75      	ldr	r3, [pc, #468]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a74      	ldr	r2, [pc, #464]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800458e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d013      	beq.n	80045c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe fb42 	bl	8002c24 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fe fb3e 	bl	8002c24 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	@ 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e29e      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0xc0>
 80045c2:	e014      	b.n	80045ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fe fb2e 	bl	8002c24 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fe fb2a 	bl	8002c24 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e28a      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045de:	4b60      	ldr	r3, [pc, #384]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0xe8>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d075      	beq.n	80046e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fa:	4b59      	ldr	r3, [pc, #356]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004604:	4b56      	ldr	r3, [pc, #344]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b0c      	cmp	r3, #12
 8004612:	d102      	bne.n	800461a <HAL_RCC_OscConfig+0x136>
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d002      	beq.n	8004620 <HAL_RCC_OscConfig+0x13c>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d11f      	bne.n	8004660 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004620:	4b4f      	ldr	r3, [pc, #316]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_OscConfig+0x154>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e25d      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	4b49      	ldr	r3, [pc, #292]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	4946      	ldr	r1, [pc, #280]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800464c:	4b45      	ldr	r3, [pc, #276]	@ (8004764 <HAL_RCC_OscConfig+0x280>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f7fe fa9b 	bl	8002b8c <HAL_InitTick>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d043      	beq.n	80046e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e249      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d023      	beq.n	80046b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004668:	4b3d      	ldr	r3, [pc, #244]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3c      	ldr	r2, [pc, #240]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fe fad6 	bl	8002c24 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800467c:	f7fe fad2 	bl	8002c24 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e232      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800468e:	4b34      	ldr	r3, [pc, #208]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469a:	4b31      	ldr	r3, [pc, #196]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	061b      	lsls	r3, r3, #24
 80046a8:	492d      	ldr	r1, [pc, #180]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
 80046ae:	e01a      	b.n	80046e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80046b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fe fab2 	bl	8002c24 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c4:	f7fe faae 	bl	8002c24 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e20e      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d6:	4b22      	ldr	r3, [pc, #136]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x1e0>
 80046e2:	e000      	b.n	80046e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d041      	beq.n	8004776 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01c      	beq.n	8004734 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fa:	4b19      	ldr	r3, [pc, #100]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 80046fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004700:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470a:	f7fe fa8b 	bl	8002c24 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004712:	f7fe fa87 	bl	8002c24 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e1e7      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004724:	4b0e      	ldr	r3, [pc, #56]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0ef      	beq.n	8004712 <HAL_RCC_OscConfig+0x22e>
 8004732:	e020      	b.n	8004776 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004734:	4b0a      	ldr	r3, [pc, #40]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800473a:	4a09      	ldr	r2, [pc, #36]	@ (8004760 <HAL_RCC_OscConfig+0x27c>)
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fe fa6e 	bl	8002c24 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800474a:	e00d      	b.n	8004768 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800474c:	f7fe fa6a 	bl	8002c24 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d906      	bls.n	8004768 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e1ca      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	20000f48 	.word	0x20000f48
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004768:	4b8c      	ldr	r3, [pc, #560]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ea      	bne.n	800474c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 80a6 	beq.w	80048d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004784:	2300      	movs	r3, #0
 8004786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004788:	4b84      	ldr	r3, [pc, #528]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800478a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_OscConfig+0x2b4>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x2b6>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00d      	beq.n	80047ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479e:	4b7f      	ldr	r3, [pc, #508]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a2:	4a7e      	ldr	r2, [pc, #504]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80047aa:	4b7c      	ldr	r3, [pc, #496]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047b6:	2301      	movs	r3, #1
 80047b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ba:	4b79      	ldr	r3, [pc, #484]	@ (80049a0 <HAL_RCC_OscConfig+0x4bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d118      	bne.n	80047f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c6:	4b76      	ldr	r3, [pc, #472]	@ (80049a0 <HAL_RCC_OscConfig+0x4bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a75      	ldr	r2, [pc, #468]	@ (80049a0 <HAL_RCC_OscConfig+0x4bc>)
 80047cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d2:	f7fe fa27 	bl	8002c24 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047da:	f7fe fa23 	bl	8002c24 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e183      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ec:	4b6c      	ldr	r3, [pc, #432]	@ (80049a0 <HAL_RCC_OscConfig+0x4bc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f0      	beq.n	80047da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d108      	bne.n	8004812 <HAL_RCC_OscConfig+0x32e>
 8004800:	4b66      	ldr	r3, [pc, #408]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	4a65      	ldr	r2, [pc, #404]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004810:	e024      	b.n	800485c <HAL_RCC_OscConfig+0x378>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d110      	bne.n	800483c <HAL_RCC_OscConfig+0x358>
 800481a:	4b60      	ldr	r3, [pc, #384]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004820:	4a5e      	ldr	r2, [pc, #376]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004822:	f043 0304 	orr.w	r3, r3, #4
 8004826:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800482a:	4b5c      	ldr	r3, [pc, #368]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004830:	4a5a      	ldr	r2, [pc, #360]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800483a:	e00f      	b.n	800485c <HAL_RCC_OscConfig+0x378>
 800483c:	4b57      	ldr	r3, [pc, #348]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004842:	4a56      	ldr	r2, [pc, #344]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800484c:	4b53      	ldr	r3, [pc, #332]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	4a52      	ldr	r2, [pc, #328]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004854:	f023 0304 	bic.w	r3, r3, #4
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d016      	beq.n	8004892 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fe f9de 	bl	8002c24 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fe f9da 	bl	8002c24 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e138      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004882:	4b46      	ldr	r3, [pc, #280]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ed      	beq.n	800486c <HAL_RCC_OscConfig+0x388>
 8004890:	e015      	b.n	80048be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004892:	f7fe f9c7 	bl	8002c24 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fe f9c3 	bl	8002c24 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e121      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b0:	4b3a      	ldr	r3, [pc, #232]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ed      	bne.n	800489a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048be:	7ffb      	ldrb	r3, [r7, #31]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d105      	bne.n	80048d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c4:	4b35      	ldr	r3, [pc, #212]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c8:	4a34      	ldr	r2, [pc, #208]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80048ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d03c      	beq.n	8004956 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01c      	beq.n	800491e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048e4:	4b2d      	ldr	r3, [pc, #180]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80048e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ea:	4a2c      	ldr	r2, [pc, #176]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fe f996 	bl	8002c24 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048fc:	f7fe f992 	bl	8002c24 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e0f2      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800490e:	4b23      	ldr	r3, [pc, #140]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ef      	beq.n	80048fc <HAL_RCC_OscConfig+0x418>
 800491c:	e01b      	b.n	8004956 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800491e:	4b1f      	ldr	r3, [pc, #124]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004920:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004924:	4a1d      	ldr	r2, [pc, #116]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492e:	f7fe f979 	bl	8002c24 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004936:	f7fe f975 	bl	8002c24 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e0d5      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004948:	4b14      	ldr	r3, [pc, #80]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800494a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ef      	bne.n	8004936 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80c9 	beq.w	8004af2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004960:	4b0e      	ldr	r3, [pc, #56]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b0c      	cmp	r3, #12
 800496a:	f000 8083 	beq.w	8004a74 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d15e      	bne.n	8004a34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004976:	4b09      	ldr	r3, [pc, #36]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a08      	ldr	r2, [pc, #32]	@ (800499c <HAL_RCC_OscConfig+0x4b8>)
 800497c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004982:	f7fe f94f 	bl	8002c24 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004988:	e00c      	b.n	80049a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498a:	f7fe f94b 	bl	8002c24 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d905      	bls.n	80049a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0ab      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
 800499c:	40021000 	.word	0x40021000
 80049a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a4:	4b55      	ldr	r3, [pc, #340]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ec      	bne.n	800498a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b0:	4b52      	ldr	r3, [pc, #328]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	4b52      	ldr	r3, [pc, #328]	@ (8004b00 <HAL_RCC_OscConfig+0x61c>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6a11      	ldr	r1, [r2, #32]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049c0:	3a01      	subs	r2, #1
 80049c2:	0112      	lsls	r2, r2, #4
 80049c4:	4311      	orrs	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049ca:	0212      	lsls	r2, r2, #8
 80049cc:	4311      	orrs	r1, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049d2:	0852      	lsrs	r2, r2, #1
 80049d4:	3a01      	subs	r2, #1
 80049d6:	0552      	lsls	r2, r2, #21
 80049d8:	4311      	orrs	r1, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049de:	0852      	lsrs	r2, r2, #1
 80049e0:	3a01      	subs	r2, #1
 80049e2:	0652      	lsls	r2, r2, #25
 80049e4:	4311      	orrs	r1, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049ea:	06d2      	lsls	r2, r2, #27
 80049ec:	430a      	orrs	r2, r1
 80049ee:	4943      	ldr	r1, [pc, #268]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f4:	4b41      	ldr	r3, [pc, #260]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a40      	ldr	r2, [pc, #256]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 80049fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a00:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	4a3d      	ldr	r2, [pc, #244]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fe f90a 	bl	8002c24 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fe f906 	bl	8002c24 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e066      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a26:	4b35      	ldr	r3, [pc, #212]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0x530>
 8004a32:	e05e      	b.n	8004af2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a34:	4b31      	ldr	r3, [pc, #196]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a30      	ldr	r2, [pc, #192]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a40:	f7fe f8f0 	bl	8002c24 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fe f8ec 	bl	8002c24 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e04c      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5a:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a66:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	4924      	ldr	r1, [pc, #144]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a6c:	4b25      	ldr	r3, [pc, #148]	@ (8004b04 <HAL_RCC_OscConfig+0x620>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60cb      	str	r3, [r1, #12]
 8004a72:	e03e      	b.n	8004af2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e039      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a80:	4b1e      	ldr	r3, [pc, #120]	@ (8004afc <HAL_RCC_OscConfig+0x618>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 0203 	and.w	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d12c      	bne.n	8004aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d123      	bne.n	8004aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d11b      	bne.n	8004aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d113      	bne.n	8004aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d109      	bne.n	8004aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d001      	beq.n	8004af2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3720      	adds	r7, #32
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40021000 	.word	0x40021000
 8004b00:	019f800c 	.word	0x019f800c
 8004b04:	feeefffc 	.word	0xfeeefffc

08004b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e11e      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b91      	ldr	r3, [pc, #580]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d910      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b8e      	ldr	r3, [pc, #568]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 020f 	bic.w	r2, r3, #15
 8004b36:	498c      	ldr	r1, [pc, #560]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b8a      	ldr	r3, [pc, #552]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e106      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d073      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d129      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b64:	4b81      	ldr	r3, [pc, #516]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0f4      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b74:	f000 f99e 	bl	8004eb4 <RCC_GetSysClockFreqFromPLLSource>
 8004b78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4a7c      	ldr	r2, [pc, #496]	@ (8004d70 <HAL_RCC_ClockConfig+0x268>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d93f      	bls.n	8004c02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b82:	4b7a      	ldr	r3, [pc, #488]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d033      	beq.n	8004c02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d12f      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ba2:	4b72      	ldr	r3, [pc, #456]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004baa:	4a70      	ldr	r2, [pc, #448]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bb2:	2380      	movs	r3, #128	@ 0x80
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e024      	b.n	8004c02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0c6      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd0:	4b66      	ldr	r3, [pc, #408]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0be      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004be0:	f000 f8ce 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4a61      	ldr	r2, [pc, #388]	@ (8004d70 <HAL_RCC_ClockConfig+0x268>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d909      	bls.n	8004c02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bee:	4b5f      	ldr	r3, [pc, #380]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bf6:	4a5d      	ldr	r2, [pc, #372]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004bfe:	2380      	movs	r3, #128	@ 0x80
 8004c00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c02:	4b5a      	ldr	r3, [pc, #360]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f023 0203 	bic.w	r2, r3, #3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4957      	ldr	r1, [pc, #348]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c14:	f7fe f806 	bl	8002c24 <HAL_GetTick>
 8004c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1c:	f7fe f802 	bl	8002c24 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e095      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	4b4e      	ldr	r3, [pc, #312]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 020c 	and.w	r2, r3, #12
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d1eb      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d023      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c5c:	4b43      	ldr	r3, [pc, #268]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a42      	ldr	r2, [pc, #264]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c74:	4b3d      	ldr	r3, [pc, #244]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c7c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b39      	ldr	r3, [pc, #228]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4936      	ldr	r1, [pc, #216]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
 8004c96:	e008      	b.n	8004caa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b80      	cmp	r3, #128	@ 0x80
 8004c9c:	d105      	bne.n	8004caa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c9e:	4b33      	ldr	r3, [pc, #204]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	4a32      	ldr	r2, [pc, #200]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004ca4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ca8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004caa:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d21d      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f023 020f 	bic.w	r2, r3, #15
 8004cc0:	4929      	ldr	r1, [pc, #164]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cc8:	f7fd ffac 	bl	8002c24 <HAL_GetTick>
 8004ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd0:	f7fd ffa8 	bl	8002c24 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e03b      	b.n	8004d5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <HAL_RCC_ClockConfig+0x260>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1ed      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d00:	4b1a      	ldr	r3, [pc, #104]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4917      	ldr	r1, [pc, #92]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1e:	4b13      	ldr	r3, [pc, #76]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	490f      	ldr	r1, [pc, #60]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d32:	f000 f825 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8004d36:	4602      	mov	r2, r0
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <HAL_RCC_ClockConfig+0x264>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	490c      	ldr	r1, [pc, #48]	@ (8004d74 <HAL_RCC_ClockConfig+0x26c>)
 8004d44:	5ccb      	ldrb	r3, [r1, r3]
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d78 <HAL_RCC_ClockConfig+0x270>)
 8004d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d52:	4b0a      	ldr	r3, [pc, #40]	@ (8004d7c <HAL_RCC_ClockConfig+0x274>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd ff18 	bl	8002b8c <HAL_InitTick>
 8004d5c:	4603      	mov	r3, r0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40022000 	.word	0x40022000
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	04c4b400 	.word	0x04c4b400
 8004d74:	0800e3b0 	.word	0x0800e3b0
 8004d78:	20000f44 	.word	0x20000f44
 8004d7c:	20000f48 	.word	0x20000f48

08004d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d86:	4b2c      	ldr	r3, [pc, #176]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d102      	bne.n	8004d98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d92:	4b2a      	ldr	r3, [pc, #168]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	e047      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d98:	4b27      	ldr	r3, [pc, #156]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 030c 	and.w	r3, r3, #12
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d102      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004da4:	4b26      	ldr	r3, [pc, #152]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e03e      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004daa:	4b23      	ldr	r3, [pc, #140]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b0c      	cmp	r3, #12
 8004db4:	d136      	bne.n	8004e24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004db6:	4b20      	ldr	r3, [pc, #128]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d10c      	bne.n	8004dee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	4a16      	ldr	r2, [pc, #88]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dde:	68d2      	ldr	r2, [r2, #12]
 8004de0:	0a12      	lsrs	r2, r2, #8
 8004de2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	617b      	str	r3, [r7, #20]
      break;
 8004dec:	e00c      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dee:	4a13      	ldr	r2, [pc, #76]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	4a10      	ldr	r2, [pc, #64]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004df8:	68d2      	ldr	r2, [r2, #12]
 8004dfa:	0a12      	lsrs	r2, r2, #8
 8004dfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	617b      	str	r3, [r7, #20]
      break;
 8004e06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e08:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	0e5b      	lsrs	r3, r3, #25
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	3301      	adds	r3, #1
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	e001      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e28:	693b      	ldr	r3, [r7, #16]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	00f42400 	.word	0x00f42400
 8004e40:	007a1200 	.word	0x007a1200

08004e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e48:	4b03      	ldr	r3, [pc, #12]	@ (8004e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000f44 	.word	0x20000f44

08004e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e60:	f7ff fff0 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4904      	ldr	r1, [pc, #16]	@ (8004e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40021000 	.word	0x40021000
 8004e84:	0800e3c0 	.word	0x0800e3c0

08004e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e8c:	f7ff ffda 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	0adb      	lsrs	r3, r3, #11
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4904      	ldr	r1, [pc, #16]	@ (8004eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	0800e3c0 	.word	0x0800e3c0

08004eb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eba:	4b1e      	ldr	r3, [pc, #120]	@ (8004f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d10c      	bne.n	8004ef2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ed8:	4a17      	ldr	r2, [pc, #92]	@ (8004f38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee0:	4a14      	ldr	r2, [pc, #80]	@ (8004f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ee2:	68d2      	ldr	r2, [r2, #12]
 8004ee4:	0a12      	lsrs	r2, r2, #8
 8004ee6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	617b      	str	r3, [r7, #20]
    break;
 8004ef0:	e00c      	b.n	8004f0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ef2:	4a12      	ldr	r2, [pc, #72]	@ (8004f3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	4a0e      	ldr	r2, [pc, #56]	@ (8004f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004efc:	68d2      	ldr	r2, [r2, #12]
 8004efe:	0a12      	lsrs	r2, r2, #8
 8004f00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f04:	fb02 f303 	mul.w	r3, r2, r3
 8004f08:	617b      	str	r3, [r7, #20]
    break;
 8004f0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f0c:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	0e5b      	lsrs	r3, r3, #25
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	3301      	adds	r3, #1
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f26:	687b      	ldr	r3, [r7, #4]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40021000 	.word	0x40021000
 8004f38:	007a1200 	.word	0x007a1200
 8004f3c:	00f42400 	.word	0x00f42400

08004f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f48:	2300      	movs	r3, #0
 8004f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8098 	beq.w	800508e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f62:	4b43      	ldr	r3, [pc, #268]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10d      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6e:	4b40      	ldr	r3, [pc, #256]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f72:	4a3f      	ldr	r2, [pc, #252]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f86:	2301      	movs	r3, #1
 8004f88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a39      	ldr	r2, [pc, #228]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f96:	f7fd fe45 	bl	8002c24 <HAL_GetTick>
 8004f9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f9c:	e009      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9e:	f7fd fe41 	bl	8002c24 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d902      	bls.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	74fb      	strb	r3, [r7, #19]
        break;
 8004fb0:	e005      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb2:	4b30      	ldr	r3, [pc, #192]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0ef      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004fbe:	7cfb      	ldrb	r3, [r7, #19]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d159      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01e      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d019      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fe0:	4b23      	ldr	r3, [pc, #140]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fec:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005002:	4a1b      	ldr	r2, [pc, #108]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800500c:	4a18      	ldr	r2, [pc, #96]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d016      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fd fe01 	bl	8002c24 <HAL_GetTick>
 8005022:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005024:	e00b      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005026:	f7fd fdfd 	bl	8002c24 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005034:	4293      	cmp	r3, r2
 8005036:	d902      	bls.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	74fb      	strb	r3, [r7, #19]
            break;
 800503c:	e006      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503e:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ec      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005058:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005060:	4903      	ldr	r1, [pc, #12]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005068:	e008      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	74bb      	strb	r3, [r7, #18]
 800506e:	e005      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005070:	40021000 	.word	0x40021000
 8005074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	7cfb      	ldrb	r3, [r7, #19]
 800507a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800507c:	7c7b      	ldrb	r3, [r7, #17]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d105      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005082:	4ba6      	ldr	r3, [pc, #664]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005086:	4aa5      	ldr	r2, [pc, #660]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800508c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800509a:	4ba0      	ldr	r3, [pc, #640]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a0:	f023 0203 	bic.w	r2, r3, #3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	499c      	ldr	r1, [pc, #624]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050bc:	4b97      	ldr	r3, [pc, #604]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c2:	f023 020c 	bic.w	r2, r3, #12
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4994      	ldr	r1, [pc, #592]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050de:	4b8f      	ldr	r3, [pc, #572]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	498b      	ldr	r1, [pc, #556]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005100:	4b86      	ldr	r3, [pc, #536]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005106:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	4983      	ldr	r1, [pc, #524]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005122:	4b7e      	ldr	r3, [pc, #504]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005128:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	497a      	ldr	r1, [pc, #488]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005144:	4b75      	ldr	r3, [pc, #468]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	4972      	ldr	r1, [pc, #456]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005166:	4b6d      	ldr	r3, [pc, #436]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	4969      	ldr	r1, [pc, #420]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005188:	4b64      	ldr	r3, [pc, #400]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	4961      	ldr	r1, [pc, #388]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051aa:	4b5c      	ldr	r3, [pc, #368]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	4958      	ldr	r1, [pc, #352]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d015      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051cc:	4b53      	ldr	r3, [pc, #332]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051da:	4950      	ldr	r1, [pc, #320]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ea:	d105      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ec:	4b4b      	ldr	r3, [pc, #300]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4a4a      	ldr	r2, [pc, #296]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051f6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005200:	2b00      	cmp	r3, #0
 8005202:	d015      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005204:	4b45      	ldr	r3, [pc, #276]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	4942      	ldr	r1, [pc, #264]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005222:	d105      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005224:	4b3d      	ldr	r3, [pc, #244]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a3c      	ldr	r2, [pc, #240]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800522e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d015      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800523c:	4b37      	ldr	r3, [pc, #220]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005242:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524a:	4934      	ldr	r1, [pc, #208]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800525a:	d105      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800525c:	4b2f      	ldr	r3, [pc, #188]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a2e      	ldr	r2, [pc, #184]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005266:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d015      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005274:	4b29      	ldr	r3, [pc, #164]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005282:	4926      	ldr	r1, [pc, #152]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800528e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005292:	d105      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005294:	4b21      	ldr	r3, [pc, #132]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4a20      	ldr	r2, [pc, #128]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800529e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d015      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052ac:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ba:	4918      	ldr	r1, [pc, #96]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ca:	d105      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052cc:	4b13      	ldr	r3, [pc, #76]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a12      	ldr	r2, [pc, #72]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d015      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052e4:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f2:	490a      	ldr	r1, [pc, #40]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005302:	d105      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005304:	4b05      	ldr	r3, [pc, #20]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a04      	ldr	r2, [pc, #16]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800530e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005310:	7cbb      	ldrb	r3, [r7, #18]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40021000 	.word	0x40021000

08005320 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e09d      	b.n	800546e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d108      	bne.n	800534c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005342:	d009      	beq.n	8005358 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	61da      	str	r2, [r3, #28]
 800534a:	e005      	b.n	8005358 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fc f95c 	bl	8001630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800538e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005398:	d902      	bls.n	80053a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e002      	b.n	80053a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80053ae:	d007      	beq.n	80053c0 <HAL_SPI_Init+0xa0>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053b8:	d002      	beq.n	80053c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005402:	ea42 0103 	orr.w	r1, r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	0c1b      	lsrs	r3, r3, #16
 800541c:	f003 0204 	and.w	r2, r3, #4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800543c:	ea42 0103 	orr.w	r1, r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800545c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b088      	sub	sp, #32
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	603b      	str	r3, [r7, #0]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_SPI_Transmit+0x22>
 8005494:	2302      	movs	r3, #2
 8005496:	e15f      	b.n	8005758 <HAL_SPI_Transmit+0x2e2>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054a0:	f7fd fbc0 	bl	8002c24 <HAL_GetTick>
 80054a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d002      	beq.n	80054bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
 80054b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ba:	e148      	b.n	800574e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_SPI_Transmit+0x52>
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d102      	bne.n	80054ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054cc:	e13f      	b.n	800574e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2203      	movs	r2, #3
 80054d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	88fa      	ldrh	r2, [r7, #6]
 80054e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005518:	d10f      	bne.n	800553a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005528:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005538:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005544:	2b40      	cmp	r3, #64	@ 0x40
 8005546:	d007      	beq.n	8005558 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005556:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005560:	d94f      	bls.n	8005602 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_SPI_Transmit+0xfa>
 800556a:	8afb      	ldrh	r3, [r7, #22]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d142      	bne.n	80055f6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005574:	881a      	ldrh	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005594:	e02f      	b.n	80055f6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d112      	bne.n	80055ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	881a      	ldrh	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b4:	1c9a      	adds	r2, r3, #2
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055c8:	e015      	b.n	80055f6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ca:	f7fd fb2b 	bl	8002c24 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d803      	bhi.n	80055e2 <HAL_SPI_Transmit+0x16c>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055e0:	d102      	bne.n	80055e8 <HAL_SPI_Transmit+0x172>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80055f4:	e0ab      	b.n	800574e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1ca      	bne.n	8005596 <HAL_SPI_Transmit+0x120>
 8005600:	e080      	b.n	8005704 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_SPI_Transmit+0x19a>
 800560a:	8afb      	ldrh	r3, [r7, #22]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d174      	bne.n	80056fa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d912      	bls.n	8005640 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561e:	881a      	ldrh	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562a:	1c9a      	adds	r2, r3, #2
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b02      	subs	r3, #2
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800563e:	e05c      	b.n	80056fa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	7812      	ldrb	r2, [r2, #0]
 800564c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005666:	e048      	b.n	80056fa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b02      	cmp	r3, #2
 8005674:	d12b      	bne.n	80056ce <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d912      	bls.n	80056a6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	881a      	ldrh	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005690:	1c9a      	adds	r2, r3, #2
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b02      	subs	r3, #2
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056a4:	e029      	b.n	80056fa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	7812      	ldrb	r2, [r2, #0]
 80056b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056cc:	e015      	b.n	80056fa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ce:	f7fd faa9 	bl	8002c24 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d803      	bhi.n	80056e6 <HAL_SPI_Transmit+0x270>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056e4:	d102      	bne.n	80056ec <HAL_SPI_Transmit+0x276>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80056f8:	e029      	b.n	800574e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1b1      	bne.n	8005668 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fcf9 	bl	8006100 <SPI_EndRxTxTransaction>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005722:	2300      	movs	r3, #0
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e003      	b.n	800574e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005756:	7ffb      	ldrb	r3, [r7, #31]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d002      	beq.n	8005786 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005780:	2302      	movs	r3, #2
 8005782:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005784:	e11a      	b.n	80059bc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800578e:	d112      	bne.n	80057b6 <HAL_SPI_Receive+0x56>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10e      	bne.n	80057b6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2204      	movs	r2, #4
 800579c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057a0:	88fa      	ldrh	r2, [r7, #6]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	4613      	mov	r3, r2
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f90e 	bl	80059ce <HAL_SPI_TransmitReceive>
 80057b2:	4603      	mov	r3, r0
 80057b4:	e107      	b.n	80059c6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_SPI_Receive+0x64>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e100      	b.n	80059c6 <HAL_SPI_Receive+0x266>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057cc:	f7fd fa2a 	bl	8002c24 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_Receive+0x7e>
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d102      	bne.n	80057e4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057e2:	e0eb      	b.n	80059bc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2204      	movs	r2, #4
 80057e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	88fa      	ldrh	r2, [r7, #6]
 80057fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800582e:	d908      	bls.n	8005842 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	e007      	b.n	8005852 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005850:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800585a:	d10f      	bne.n	800587c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800586a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800587a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005886:	2b40      	cmp	r3, #64	@ 0x40
 8005888:	d007      	beq.n	800589a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005898:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058a2:	d86f      	bhi.n	8005984 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058a4:	e034      	b.n	8005910 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d117      	bne.n	80058e4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f103 020c 	add.w	r2, r3, #12
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80058e2:	e015      	b.n	8005910 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058e4:	f7fd f99e 	bl	8002c24 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d803      	bhi.n	80058fc <HAL_SPI_Receive+0x19c>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058fa:	d102      	bne.n	8005902 <HAL_SPI_Receive+0x1a2>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800590e:	e055      	b.n	80059bc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1c4      	bne.n	80058a6 <HAL_SPI_Receive+0x146>
 800591c:	e038      	b.n	8005990 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b01      	cmp	r3, #1
 800592a:	d115      	bne.n	8005958 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	b292      	uxth	r2, r2
 8005938:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	1c9a      	adds	r2, r3, #2
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005956:	e015      	b.n	8005984 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005958:	f7fd f964 	bl	8002c24 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d803      	bhi.n	8005970 <HAL_SPI_Receive+0x210>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800596e:	d102      	bne.n	8005976 <HAL_SPI_Receive+0x216>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005982:	e01b      	b.n	80059bc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1c6      	bne.n	800591e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fb5b 	bl	8006050 <SPI_EndRxTransaction>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	75fb      	strb	r3, [r7, #23]
 80059b2:	e003      	b.n	80059bc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b08a      	sub	sp, #40	@ 0x28
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059dc:	2301      	movs	r3, #1
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x26>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e20a      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x43c>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059fc:	f7fd f912 	bl	8002c24 <HAL_GetTick>
 8005a00:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a08:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a10:	887b      	ldrh	r3, [r7, #2]
 8005a12:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a14:	887b      	ldrh	r3, [r7, #2]
 8005a16:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a18:	7efb      	ldrb	r3, [r7, #27]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d00e      	beq.n	8005a3c <HAL_SPI_TransmitReceive+0x6e>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a24:	d106      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x66>
 8005a2e:	7efb      	ldrb	r3, [r7, #27]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d003      	beq.n	8005a3c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a34:	2302      	movs	r3, #2
 8005a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005a3a:	e1e0      	b.n	8005dfe <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0x80>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0x80>
 8005a48:	887b      	ldrh	r3, [r7, #2]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005a54:	e1d3      	b.n	8005dfe <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d003      	beq.n	8005a6a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2205      	movs	r2, #5
 8005a66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	887a      	ldrh	r2, [r7, #2]
 8005a7a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	887a      	ldrh	r2, [r7, #2]
 8005a82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	887a      	ldrh	r2, [r7, #2]
 8005a90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	887a      	ldrh	r2, [r7, #2]
 8005a96:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005aac:	d802      	bhi.n	8005ab4 <HAL_SPI_TransmitReceive+0xe6>
 8005aae:	8a3b      	ldrh	r3, [r7, #16]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d908      	bls.n	8005ac6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	e007      	b.n	8005ad6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ad4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae0:	2b40      	cmp	r3, #64	@ 0x40
 8005ae2:	d007      	beq.n	8005af4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005af2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005afc:	f240 8081 	bls.w	8005c02 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_SPI_TransmitReceive+0x140>
 8005b08:	8a7b      	ldrh	r3, [r7, #18]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d16d      	bne.n	8005bea <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b12:	881a      	ldrh	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1e:	1c9a      	adds	r2, r3, #2
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b32:	e05a      	b.n	8005bea <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d11b      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x1ac>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d016      	beq.n	8005b7a <HAL_SPI_TransmitReceive+0x1ac>
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d113      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b56:	881a      	ldrh	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b62:	1c9a      	adds	r2, r3, #2
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d11c      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x1f4>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d016      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba6:	1c9a      	adds	r2, r3, #2
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bc2:	f7fd f82f 	bl	8002c24 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d80b      	bhi.n	8005bea <HAL_SPI_TransmitReceive+0x21c>
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bd8:	d007      	beq.n	8005bea <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005be8:	e109      	b.n	8005dfe <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d19f      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x166>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d199      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x166>
 8005c00:	e0e3      	b.n	8005dca <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_SPI_TransmitReceive+0x244>
 8005c0a:	8a7b      	ldrh	r3, [r7, #18]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	f040 80cf 	bne.w	8005db0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d912      	bls.n	8005c42 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c20:	881a      	ldrh	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2c:	1c9a      	adds	r2, r3, #2
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b02      	subs	r3, #2
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c40:	e0b6      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	330c      	adds	r3, #12
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c68:	e0a2      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d134      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x314>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d02f      	beq.n	8005ce2 <HAL_SPI_TransmitReceive+0x314>
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d12c      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d912      	bls.n	8005cb8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c96:	881a      	ldrh	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca2:	1c9a      	adds	r2, r3, #2
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b02      	subs	r3, #2
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cb6:	e012      	b.n	8005cde <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d148      	bne.n	8005d82 <HAL_SPI_TransmitReceive+0x3b4>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d042      	beq.n	8005d82 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d923      	bls.n	8005d50 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d12:	b292      	uxth	r2, r2
 8005d14:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1a:	1c9a      	adds	r2, r3, #2
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b02      	subs	r3, #2
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d81f      	bhi.n	8005d7e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	e016      	b.n	8005d7e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f103 020c 	add.w	r2, r3, #12
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5c:	7812      	ldrb	r2, [r2, #0]
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d82:	f7fc ff4f 	bl	8002c24 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d803      	bhi.n	8005d9a <HAL_SPI_TransmitReceive+0x3cc>
 8005d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d98:	d102      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x3d2>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d107      	bne.n	8005db0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005dae:	e026      	b.n	8005dfe <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f47f af57 	bne.w	8005c6a <HAL_SPI_TransmitReceive+0x29c>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f47f af50 	bne.w	8005c6a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f996 	bl	8006100 <SPI_EndRxTxTransaction>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df4:	e003      	b.n	8005dfe <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005e06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3728      	adds	r7, #40	@ 0x28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e24:	f7fc fefe 	bl	8002c24 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	4413      	add	r3, r2
 8005e32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e34:	f7fc fef6 	bl	8002c24 <HAL_GetTick>
 8005e38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e3a:	4b39      	ldr	r3, [pc, #228]	@ (8005f20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	015b      	lsls	r3, r3, #5
 8005e40:	0d1b      	lsrs	r3, r3, #20
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e4a:	e054      	b.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e52:	d050      	beq.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e54:	f7fc fee6 	bl	8002c24 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d902      	bls.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d13d      	bne.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e82:	d111      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e8c:	d004      	beq.n	8005e98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e96:	d107      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ea6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb0:	d10f      	bne.n	8005ed2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ed0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e017      	b.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4013      	ands	r3, r2
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	bf0c      	ite	eq
 8005f06:	2301      	moveq	r3, #1
 8005f08:	2300      	movne	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d19b      	bne.n	8005e4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000f44 	.word	0x20000f44

08005f24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	@ 0x28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f36:	f7fc fe75 	bl	8002c24 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	4413      	add	r3, r2
 8005f44:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f46:	f7fc fe6d 	bl	8002c24 <HAL_GetTick>
 8005f4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f54:	4b3d      	ldr	r3, [pc, #244]	@ (800604c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	00da      	lsls	r2, r3, #3
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	0d1b      	lsrs	r3, r3, #20
 8005f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f6c:	e060      	b.n	8006030 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f74:	d107      	bne.n	8005f86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f8c:	d050      	beq.n	8006030 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f8e:	f7fc fe49 	bl	8002c24 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d902      	bls.n	8005fa4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d13d      	bne.n	8006020 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fbc:	d111      	bne.n	8005fe2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fc6:	d004      	beq.n	8005fd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd0:	d107      	bne.n	8005fe2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fe0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fea:	d10f      	bne.n	800600c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800600a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e010      	b.n	8006042 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	3b01      	subs	r3, #1
 800602e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4013      	ands	r3, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	429a      	cmp	r2, r3
 800603e:	d196      	bne.n	8005f6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3728      	adds	r7, #40	@ 0x28
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000f44 	.word	0x20000f44

08006050 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006064:	d111      	bne.n	800608a <SPI_EndRxTransaction+0x3a>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800606e:	d004      	beq.n	800607a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006078:	d107      	bne.n	800608a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006088:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2200      	movs	r2, #0
 8006092:	2180      	movs	r1, #128	@ 0x80
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f7ff febd 	bl	8005e14 <SPI_WaitFlagStateUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a4:	f043 0220 	orr.w	r2, r3, #32
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e023      	b.n	80060f8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060b8:	d11d      	bne.n	80060f6 <SPI_EndRxTransaction+0xa6>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060c2:	d004      	beq.n	80060ce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060cc:	d113      	bne.n	80060f6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff ff22 	bl	8005f24 <SPI_WaitFifoStateUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ea:	f043 0220 	orr.w	r2, r3, #32
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e000      	b.n	80060f8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2200      	movs	r2, #0
 8006114:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff ff03 	bl	8005f24 <SPI_WaitFifoStateUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006128:	f043 0220 	orr.w	r2, r3, #32
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e027      	b.n	8006184 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	2180      	movs	r1, #128	@ 0x80
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff fe68 	bl	8005e14 <SPI_WaitFlagStateUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614e:	f043 0220 	orr.w	r2, r3, #32
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e014      	b.n	8006184 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2200      	movs	r2, #0
 8006162:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fedc 	bl	8005f24 <SPI_WaitFifoStateUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e000      	b.n	8006184 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e049      	b.n	8006232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fb fd28 	bl	8001c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f000 fb4a 	bl	8006864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e049      	b.n	80062e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f841 	bl	80062e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2202      	movs	r2, #2
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3304      	adds	r3, #4
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f000 faf3 	bl	8006864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e097      	b.n	8006440 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d106      	bne.n	800632a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7fb fc8f 	bl	8001c48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2202      	movs	r2, #2
 800632e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6812      	ldr	r2, [r2, #0]
 800633c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006340:	f023 0307 	bic.w	r3, r3, #7
 8006344:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f000 fa87 	bl	8006864 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800637e:	f023 0303 	bic.w	r3, r3, #3
 8006382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	021b      	lsls	r3, r3, #8
 800638e:	4313      	orrs	r3, r2
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800639c:	f023 030c 	bic.w	r3, r3, #12
 80063a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	4313      	orrs	r3, r2
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	011a      	lsls	r2, r3, #4
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	031b      	lsls	r3, r3, #12
 80063cc:	4313      	orrs	r3, r2
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80063e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	4313      	orrs	r3, r2
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006462:	2302      	movs	r3, #2
 8006464:	e0ff      	b.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b14      	cmp	r3, #20
 8006472:	f200 80f0 	bhi.w	8006656 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006476:	a201      	add	r2, pc, #4	@ (adr r2, 800647c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647c:	080064d1 	.word	0x080064d1
 8006480:	08006657 	.word	0x08006657
 8006484:	08006657 	.word	0x08006657
 8006488:	08006657 	.word	0x08006657
 800648c:	08006511 	.word	0x08006511
 8006490:	08006657 	.word	0x08006657
 8006494:	08006657 	.word	0x08006657
 8006498:	08006657 	.word	0x08006657
 800649c:	08006553 	.word	0x08006553
 80064a0:	08006657 	.word	0x08006657
 80064a4:	08006657 	.word	0x08006657
 80064a8:	08006657 	.word	0x08006657
 80064ac:	08006593 	.word	0x08006593
 80064b0:	08006657 	.word	0x08006657
 80064b4:	08006657 	.word	0x08006657
 80064b8:	08006657 	.word	0x08006657
 80064bc:	080065d5 	.word	0x080065d5
 80064c0:	08006657 	.word	0x08006657
 80064c4:	08006657 	.word	0x08006657
 80064c8:	08006657 	.word	0x08006657
 80064cc:	08006615 	.word	0x08006615
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fa60 	bl	800699c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0208 	orr.w	r2, r2, #8
 80064ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0204 	bic.w	r2, r2, #4
 80064fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6999      	ldr	r1, [r3, #24]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	619a      	str	r2, [r3, #24]
      break;
 800650e:	e0a5      	b.n	800665c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fad0 	bl	8006abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800652a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800653a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6999      	ldr	r1, [r3, #24]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	619a      	str	r2, [r3, #24]
      break;
 8006550:	e084      	b.n	800665c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fb39 	bl	8006bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0208 	orr.w	r2, r2, #8
 800656c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0204 	bic.w	r2, r2, #4
 800657c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69d9      	ldr	r1, [r3, #28]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	61da      	str	r2, [r3, #28]
      break;
 8006590:	e064      	b.n	800665c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fba1 	bl	8006ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69d9      	ldr	r1, [r3, #28]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	021a      	lsls	r2, r3, #8
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	61da      	str	r2, [r3, #28]
      break;
 80065d2:	e043      	b.n	800665c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fc0a 	bl	8006df4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0208 	orr.w	r2, r2, #8
 80065ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0204 	bic.w	r2, r2, #4
 80065fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006612:	e023      	b.n	800665c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fc4e 	bl	8006ebc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800662e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800663e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	021a      	lsls	r2, r3, #8
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006654:	e002      	b.n	800665c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	75fb      	strb	r3, [r7, #23]
      break;
 800665a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006664:	7dfb      	ldrb	r3, [r7, #23]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop

08006670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_TIM_ConfigClockSource+0x1c>
 8006688:	2302      	movs	r3, #2
 800668a:	e0de      	b.n	800684a <HAL_TIM_ConfigClockSource+0x1da>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80066aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a63      	ldr	r2, [pc, #396]	@ (8006854 <HAL_TIM_ConfigClockSource+0x1e4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	f000 80a9 	beq.w	800681e <HAL_TIM_ConfigClockSource+0x1ae>
 80066cc:	4a61      	ldr	r2, [pc, #388]	@ (8006854 <HAL_TIM_ConfigClockSource+0x1e4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	f200 80ae 	bhi.w	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 80066d4:	4a60      	ldr	r2, [pc, #384]	@ (8006858 <HAL_TIM_ConfigClockSource+0x1e8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	f000 80a1 	beq.w	800681e <HAL_TIM_ConfigClockSource+0x1ae>
 80066dc:	4a5e      	ldr	r2, [pc, #376]	@ (8006858 <HAL_TIM_ConfigClockSource+0x1e8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	f200 80a6 	bhi.w	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 80066e4:	4a5d      	ldr	r2, [pc, #372]	@ (800685c <HAL_TIM_ConfigClockSource+0x1ec>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	f000 8099 	beq.w	800681e <HAL_TIM_ConfigClockSource+0x1ae>
 80066ec:	4a5b      	ldr	r2, [pc, #364]	@ (800685c <HAL_TIM_ConfigClockSource+0x1ec>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	f200 809e 	bhi.w	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 80066f4:	4a5a      	ldr	r2, [pc, #360]	@ (8006860 <HAL_TIM_ConfigClockSource+0x1f0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f000 8091 	beq.w	800681e <HAL_TIM_ConfigClockSource+0x1ae>
 80066fc:	4a58      	ldr	r2, [pc, #352]	@ (8006860 <HAL_TIM_ConfigClockSource+0x1f0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	f200 8096 	bhi.w	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 8006704:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006708:	f000 8089 	beq.w	800681e <HAL_TIM_ConfigClockSource+0x1ae>
 800670c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006710:	f200 808e 	bhi.w	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 8006714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006718:	d03e      	beq.n	8006798 <HAL_TIM_ConfigClockSource+0x128>
 800671a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800671e:	f200 8087 	bhi.w	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 8006722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006726:	f000 8086 	beq.w	8006836 <HAL_TIM_ConfigClockSource+0x1c6>
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800672e:	d87f      	bhi.n	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 8006730:	2b70      	cmp	r3, #112	@ 0x70
 8006732:	d01a      	beq.n	800676a <HAL_TIM_ConfigClockSource+0xfa>
 8006734:	2b70      	cmp	r3, #112	@ 0x70
 8006736:	d87b      	bhi.n	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 8006738:	2b60      	cmp	r3, #96	@ 0x60
 800673a:	d050      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x16e>
 800673c:	2b60      	cmp	r3, #96	@ 0x60
 800673e:	d877      	bhi.n	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 8006740:	2b50      	cmp	r3, #80	@ 0x50
 8006742:	d03c      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x14e>
 8006744:	2b50      	cmp	r3, #80	@ 0x50
 8006746:	d873      	bhi.n	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 8006748:	2b40      	cmp	r3, #64	@ 0x40
 800674a:	d058      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0x18e>
 800674c:	2b40      	cmp	r3, #64	@ 0x40
 800674e:	d86f      	bhi.n	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 8006750:	2b30      	cmp	r3, #48	@ 0x30
 8006752:	d064      	beq.n	800681e <HAL_TIM_ConfigClockSource+0x1ae>
 8006754:	2b30      	cmp	r3, #48	@ 0x30
 8006756:	d86b      	bhi.n	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 8006758:	2b20      	cmp	r3, #32
 800675a:	d060      	beq.n	800681e <HAL_TIM_ConfigClockSource+0x1ae>
 800675c:	2b20      	cmp	r3, #32
 800675e:	d867      	bhi.n	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
 8006760:	2b00      	cmp	r3, #0
 8006762:	d05c      	beq.n	800681e <HAL_TIM_ConfigClockSource+0x1ae>
 8006764:	2b10      	cmp	r3, #16
 8006766:	d05a      	beq.n	800681e <HAL_TIM_ConfigClockSource+0x1ae>
 8006768:	e062      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800677a:	f000 fc81 	bl	8007080 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800678c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	609a      	str	r2, [r3, #8]
      break;
 8006796:	e04f      	b.n	8006838 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067a8:	f000 fc6a 	bl	8007080 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067ba:	609a      	str	r2, [r3, #8]
      break;
 80067bc:	e03c      	b.n	8006838 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ca:	461a      	mov	r2, r3
 80067cc:	f000 fbdc 	bl	8006f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2150      	movs	r1, #80	@ 0x50
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fc35 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 80067dc:	e02c      	b.n	8006838 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ea:	461a      	mov	r2, r3
 80067ec:	f000 fbfb 	bl	8006fe6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2160      	movs	r1, #96	@ 0x60
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fc25 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 80067fc:	e01c      	b.n	8006838 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800680a:	461a      	mov	r2, r3
 800680c:	f000 fbbc 	bl	8006f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2140      	movs	r1, #64	@ 0x40
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fc15 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 800681c:	e00c      	b.n	8006838 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4619      	mov	r1, r3
 8006828:	4610      	mov	r0, r2
 800682a:	f000 fc0c 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 800682e:	e003      	b.n	8006838 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
      break;
 8006834:	e000      	b.n	8006838 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	00100070 	.word	0x00100070
 8006858:	00100040 	.word	0x00100040
 800685c:	00100030 	.word	0x00100030
 8006860:	00100020 	.word	0x00100020

08006864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a42      	ldr	r2, [pc, #264]	@ (8006980 <TIM_Base_SetConfig+0x11c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00f      	beq.n	800689c <TIM_Base_SetConfig+0x38>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006882:	d00b      	beq.n	800689c <TIM_Base_SetConfig+0x38>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a3f      	ldr	r2, [pc, #252]	@ (8006984 <TIM_Base_SetConfig+0x120>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d007      	beq.n	800689c <TIM_Base_SetConfig+0x38>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a3e      	ldr	r2, [pc, #248]	@ (8006988 <TIM_Base_SetConfig+0x124>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_Base_SetConfig+0x38>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a3d      	ldr	r2, [pc, #244]	@ (800698c <TIM_Base_SetConfig+0x128>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d108      	bne.n	80068ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a33      	ldr	r2, [pc, #204]	@ (8006980 <TIM_Base_SetConfig+0x11c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01b      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068bc:	d017      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a30      	ldr	r2, [pc, #192]	@ (8006984 <TIM_Base_SetConfig+0x120>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006988 <TIM_Base_SetConfig+0x124>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00f      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2e      	ldr	r2, [pc, #184]	@ (800698c <TIM_Base_SetConfig+0x128>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00b      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006990 <TIM_Base_SetConfig+0x12c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d007      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006994 <TIM_Base_SetConfig+0x130>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d003      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006998 <TIM_Base_SetConfig+0x134>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d108      	bne.n	8006900 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a16      	ldr	r2, [pc, #88]	@ (8006980 <TIM_Base_SetConfig+0x11c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00f      	beq.n	800694c <TIM_Base_SetConfig+0xe8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a17      	ldr	r2, [pc, #92]	@ (800698c <TIM_Base_SetConfig+0x128>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00b      	beq.n	800694c <TIM_Base_SetConfig+0xe8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a16      	ldr	r2, [pc, #88]	@ (8006990 <TIM_Base_SetConfig+0x12c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d007      	beq.n	800694c <TIM_Base_SetConfig+0xe8>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a15      	ldr	r2, [pc, #84]	@ (8006994 <TIM_Base_SetConfig+0x130>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_Base_SetConfig+0xe8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a14      	ldr	r2, [pc, #80]	@ (8006998 <TIM_Base_SetConfig+0x134>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d103      	bne.n	8006954 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b01      	cmp	r3, #1
 8006964:	d105      	bne.n	8006972 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f023 0201 	bic.w	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	611a      	str	r2, [r3, #16]
  }
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40012c00 	.word	0x40012c00
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40013400 	.word	0x40013400
 8006990:	40014000 	.word	0x40014000
 8006994:	40014400 	.word	0x40014400
 8006998:	40014800 	.word	0x40014800

0800699c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	f023 0201 	bic.w	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0303 	bic.w	r3, r3, #3
 80069d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f023 0302 	bic.w	r3, r3, #2
 80069e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a2c      	ldr	r2, [pc, #176]	@ (8006aa8 <TIM_OC1_SetConfig+0x10c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00f      	beq.n	8006a1c <TIM_OC1_SetConfig+0x80>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a2b      	ldr	r2, [pc, #172]	@ (8006aac <TIM_OC1_SetConfig+0x110>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <TIM_OC1_SetConfig+0x80>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab0 <TIM_OC1_SetConfig+0x114>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_OC1_SetConfig+0x80>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a29      	ldr	r2, [pc, #164]	@ (8006ab4 <TIM_OC1_SetConfig+0x118>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_OC1_SetConfig+0x80>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a28      	ldr	r2, [pc, #160]	@ (8006ab8 <TIM_OC1_SetConfig+0x11c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d10c      	bne.n	8006a36 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f023 0308 	bic.w	r3, r3, #8
 8006a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f023 0304 	bic.w	r3, r3, #4
 8006a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa8 <TIM_OC1_SetConfig+0x10c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00f      	beq.n	8006a5e <TIM_OC1_SetConfig+0xc2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a1a      	ldr	r2, [pc, #104]	@ (8006aac <TIM_OC1_SetConfig+0x110>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <TIM_OC1_SetConfig+0xc2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a19      	ldr	r2, [pc, #100]	@ (8006ab0 <TIM_OC1_SetConfig+0x114>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <TIM_OC1_SetConfig+0xc2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a18      	ldr	r2, [pc, #96]	@ (8006ab4 <TIM_OC1_SetConfig+0x118>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d003      	beq.n	8006a5e <TIM_OC1_SetConfig+0xc2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a17      	ldr	r2, [pc, #92]	@ (8006ab8 <TIM_OC1_SetConfig+0x11c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d111      	bne.n	8006a82 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	621a      	str	r2, [r3, #32]
}
 8006a9c:	bf00      	nop
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40013400 	.word	0x40013400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40014400 	.word	0x40014400
 8006ab8:	40014800 	.word	0x40014800

08006abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f023 0210 	bic.w	r2, r3, #16
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f023 0320 	bic.w	r3, r3, #32
 8006b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a28      	ldr	r2, [pc, #160]	@ (8006bbc <TIM_OC2_SetConfig+0x100>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d003      	beq.n	8006b28 <TIM_OC2_SetConfig+0x6c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a27      	ldr	r2, [pc, #156]	@ (8006bc0 <TIM_OC2_SetConfig+0x104>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d10d      	bne.n	8006b44 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a1d      	ldr	r2, [pc, #116]	@ (8006bbc <TIM_OC2_SetConfig+0x100>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00f      	beq.n	8006b6c <TIM_OC2_SetConfig+0xb0>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc0 <TIM_OC2_SetConfig+0x104>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00b      	beq.n	8006b6c <TIM_OC2_SetConfig+0xb0>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc4 <TIM_OC2_SetConfig+0x108>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d007      	beq.n	8006b6c <TIM_OC2_SetConfig+0xb0>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc8 <TIM_OC2_SetConfig+0x10c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d003      	beq.n	8006b6c <TIM_OC2_SetConfig+0xb0>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a19      	ldr	r2, [pc, #100]	@ (8006bcc <TIM_OC2_SetConfig+0x110>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d113      	bne.n	8006b94 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40012c00 	.word	0x40012c00
 8006bc0:	40013400 	.word	0x40013400
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800

08006bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0303 	bic.w	r3, r3, #3
 8006c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a27      	ldr	r2, [pc, #156]	@ (8006ccc <TIM_OC3_SetConfig+0xfc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <TIM_OC3_SetConfig+0x6a>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a26      	ldr	r2, [pc, #152]	@ (8006cd0 <TIM_OC3_SetConfig+0x100>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d10d      	bne.n	8006c56 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a1c      	ldr	r2, [pc, #112]	@ (8006ccc <TIM_OC3_SetConfig+0xfc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00f      	beq.n	8006c7e <TIM_OC3_SetConfig+0xae>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd0 <TIM_OC3_SetConfig+0x100>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00b      	beq.n	8006c7e <TIM_OC3_SetConfig+0xae>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a1a      	ldr	r2, [pc, #104]	@ (8006cd4 <TIM_OC3_SetConfig+0x104>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d007      	beq.n	8006c7e <TIM_OC3_SetConfig+0xae>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a19      	ldr	r2, [pc, #100]	@ (8006cd8 <TIM_OC3_SetConfig+0x108>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d003      	beq.n	8006c7e <TIM_OC3_SetConfig+0xae>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <TIM_OC3_SetConfig+0x10c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d113      	bne.n	8006ca6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	621a      	str	r2, [r3, #32]
}
 8006cc0:	bf00      	nop
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	40012c00 	.word	0x40012c00
 8006cd0:	40013400 	.word	0x40013400
 8006cd4:	40014000 	.word	0x40014000
 8006cd8:	40014400 	.word	0x40014400
 8006cdc:	40014800 	.word	0x40014800

08006ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	031b      	lsls	r3, r3, #12
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a28      	ldr	r2, [pc, #160]	@ (8006de0 <TIM_OC4_SetConfig+0x100>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC4_SetConfig+0x6c>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a27      	ldr	r2, [pc, #156]	@ (8006de4 <TIM_OC4_SetConfig+0x104>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10d      	bne.n	8006d68 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	031b      	lsls	r3, r3, #12
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8006de0 <TIM_OC4_SetConfig+0x100>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00f      	beq.n	8006d90 <TIM_OC4_SetConfig+0xb0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1c      	ldr	r2, [pc, #112]	@ (8006de4 <TIM_OC4_SetConfig+0x104>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <TIM_OC4_SetConfig+0xb0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006de8 <TIM_OC4_SetConfig+0x108>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d007      	beq.n	8006d90 <TIM_OC4_SetConfig+0xb0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a1a      	ldr	r2, [pc, #104]	@ (8006dec <TIM_OC4_SetConfig+0x10c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_OC4_SetConfig+0xb0>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a19      	ldr	r2, [pc, #100]	@ (8006df0 <TIM_OC4_SetConfig+0x110>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d113      	bne.n	8006db8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	019b      	lsls	r3, r3, #6
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	019b      	lsls	r3, r3, #6
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	621a      	str	r2, [r3, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40012c00 	.word	0x40012c00
 8006de4:	40013400 	.word	0x40013400
 8006de8:	40014000 	.word	0x40014000
 8006dec:	40014400 	.word	0x40014400
 8006df0:	40014800 	.word	0x40014800

08006df4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006e38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	041b      	lsls	r3, r3, #16
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a17      	ldr	r2, [pc, #92]	@ (8006ea8 <TIM_OC5_SetConfig+0xb4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00f      	beq.n	8006e6e <TIM_OC5_SetConfig+0x7a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a16      	ldr	r2, [pc, #88]	@ (8006eac <TIM_OC5_SetConfig+0xb8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d00b      	beq.n	8006e6e <TIM_OC5_SetConfig+0x7a>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a15      	ldr	r2, [pc, #84]	@ (8006eb0 <TIM_OC5_SetConfig+0xbc>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d007      	beq.n	8006e6e <TIM_OC5_SetConfig+0x7a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a14      	ldr	r2, [pc, #80]	@ (8006eb4 <TIM_OC5_SetConfig+0xc0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d003      	beq.n	8006e6e <TIM_OC5_SetConfig+0x7a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a13      	ldr	r2, [pc, #76]	@ (8006eb8 <TIM_OC5_SetConfig+0xc4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d109      	bne.n	8006e82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	621a      	str	r2, [r3, #32]
}
 8006e9c:	bf00      	nop
 8006e9e:	371c      	adds	r7, #28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40012c00 	.word	0x40012c00
 8006eac:	40013400 	.word	0x40013400
 8006eb0:	40014000 	.word	0x40014000
 8006eb4:	40014400 	.word	0x40014400
 8006eb8:	40014800 	.word	0x40014800

08006ebc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	051b      	lsls	r3, r3, #20
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a18      	ldr	r2, [pc, #96]	@ (8006f74 <TIM_OC6_SetConfig+0xb8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00f      	beq.n	8006f38 <TIM_OC6_SetConfig+0x7c>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a17      	ldr	r2, [pc, #92]	@ (8006f78 <TIM_OC6_SetConfig+0xbc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00b      	beq.n	8006f38 <TIM_OC6_SetConfig+0x7c>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a16      	ldr	r2, [pc, #88]	@ (8006f7c <TIM_OC6_SetConfig+0xc0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d007      	beq.n	8006f38 <TIM_OC6_SetConfig+0x7c>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <TIM_OC6_SetConfig+0xc4>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <TIM_OC6_SetConfig+0x7c>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a14      	ldr	r2, [pc, #80]	@ (8006f84 <TIM_OC6_SetConfig+0xc8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d109      	bne.n	8006f4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	029b      	lsls	r3, r3, #10
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	621a      	str	r2, [r3, #32]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	40012c00 	.word	0x40012c00
 8006f78:	40013400 	.word	0x40013400
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40014400 	.word	0x40014400
 8006f84:	40014800 	.word	0x40014800

08006f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f023 0201 	bic.w	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f023 030a 	bic.w	r3, r3, #10
 8006fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b087      	sub	sp, #28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f023 0210 	bic.w	r2, r3, #16
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	031b      	lsls	r3, r3, #12
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007022:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800705c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	f043 0307 	orr.w	r3, r3, #7
 800706c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	609a      	str	r2, [r3, #8]
}
 8007074:	bf00      	nop
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800709a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	021a      	lsls	r2, r3, #8
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	609a      	str	r2, [r3, #8]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e065      	b.n	80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a2c      	ldr	r2, [pc, #176]	@ (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d004      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a2b      	ldr	r2, [pc, #172]	@ (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d108      	bne.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007112:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1b      	ldr	r2, [pc, #108]	@ (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d018      	beq.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714e:	d013      	beq.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a18      	ldr	r2, [pc, #96]	@ (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00e      	beq.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a17      	ldr	r2, [pc, #92]	@ (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d009      	beq.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a12      	ldr	r2, [pc, #72]	@ (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d004      	beq.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a13      	ldr	r2, [pc, #76]	@ (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d10c      	bne.n	8007192 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800717e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	4313      	orrs	r3, r2
 8007188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	40012c00 	.word	0x40012c00
 80071b4:	40013400 	.word	0x40013400
 80071b8:	40000400 	.word	0x40000400
 80071bc:	40000800 	.word	0x40000800
 80071c0:	40014000 	.word	0x40014000

080071c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071dc:	2302      	movs	r3, #2
 80071de:	e073      	b.n	80072c8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4313      	orrs	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	041b      	lsls	r3, r3, #16
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a19      	ldr	r2, [pc, #100]	@ (80072d4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a18      	ldr	r2, [pc, #96]	@ (80072d8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d11c      	bne.n	80072b6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007286:	051b      	lsls	r3, r3, #20
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	40012c00 	.word	0x40012c00
 80072d8:	40013400 	.word	0x40013400

080072dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e042      	b.n	8007374 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fa fe05 	bl	8001f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2224      	movs	r2, #36	@ 0x24
 800730a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 ff34 	bl	8008194 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc65 	bl	8007bfc <UART_SetConfig>
 8007332:	4603      	mov	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e01b      	b.n	8007374 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800734a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800735a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0201 	orr.w	r2, r2, #1
 800736a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 ffb3 	bl	80082d8 <UART_CheckIdleState>
 8007372:	4603      	mov	r3, r0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	@ 0x28
 8007380:	af02      	add	r7, sp, #8
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	4613      	mov	r3, r2
 800738a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007392:	2b20      	cmp	r3, #32
 8007394:	d17b      	bne.n	800748e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <HAL_UART_Transmit+0x26>
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e074      	b.n	8007490 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2221      	movs	r2, #33	@ 0x21
 80073b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073b6:	f7fb fc35 	bl	8002c24 <HAL_GetTick>
 80073ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	88fa      	ldrh	r2, [r7, #6]
 80073c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	88fa      	ldrh	r2, [r7, #6]
 80073c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d4:	d108      	bne.n	80073e8 <HAL_UART_Transmit+0x6c>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d104      	bne.n	80073e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	e003      	b.n	80073f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073f0:	e030      	b.n	8007454 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2200      	movs	r2, #0
 80073fa:	2180      	movs	r1, #128	@ 0x80
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f001 f815 	bl	800842c <UART_WaitOnFlagUntilTimeout>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e03d      	b.n	8007490 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007428:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	3302      	adds	r3, #2
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	e007      	b.n	8007442 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	3301      	adds	r3, #1
 8007440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007448:	b29b      	uxth	r3, r3
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1c8      	bne.n	80073f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2200      	movs	r2, #0
 8007468:	2140      	movs	r1, #64	@ 0x40
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 ffde 	bl	800842c <UART_WaitOnFlagUntilTimeout>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2220      	movs	r2, #32
 800747a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e006      	b.n	8007490 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2220      	movs	r2, #32
 8007486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	e000      	b.n	8007490 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800748e:	2302      	movs	r3, #2
  }
}
 8007490:	4618      	mov	r0, r3
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	@ 0x28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074ac:	2b20      	cmp	r3, #32
 80074ae:	d137      	bne.n	8007520 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <HAL_UART_Receive_IT+0x24>
 80074b6:	88fb      	ldrh	r3, [r7, #6]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e030      	b.n	8007522 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a18      	ldr	r2, [pc, #96]	@ (800752c <HAL_UART_Receive_IT+0x94>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d01f      	beq.n	8007510 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d018      	beq.n	8007510 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	e853 3f00 	ldrex	r3, [r3]
 80074ea:	613b      	str	r3, [r7, #16]
   return(result);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	623b      	str	r3, [r7, #32]
 80074fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	69f9      	ldr	r1, [r7, #28]
 8007502:	6a3a      	ldr	r2, [r7, #32]
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	61bb      	str	r3, [r7, #24]
   return(result);
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e6      	bne.n	80074de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007510:	88fb      	ldrh	r3, [r7, #6]
 8007512:	461a      	mov	r2, r3
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fff6 	bl	8008508 <UART_Start_Receive_IT>
 800751c:	4603      	mov	r3, r0
 800751e:	e000      	b.n	8007522 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007520:	2302      	movs	r3, #2
  }
}
 8007522:	4618      	mov	r0, r3
 8007524:	3728      	adds	r7, #40	@ 0x28
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40008000 	.word	0x40008000

08007530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b0ba      	sub	sp, #232	@ 0xe8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800755a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800755e:	4013      	ands	r3, r2
 8007560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d11b      	bne.n	80075a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d015      	beq.n	80075a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800757c:	f003 0320 	and.w	r3, r3, #32
 8007580:	2b00      	cmp	r3, #0
 8007582:	d105      	bne.n	8007590 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d009      	beq.n	80075a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 8300 	beq.w	8007b9a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	4798      	blx	r3
      }
      return;
 80075a2:	e2fa      	b.n	8007b9a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 8123 	beq.w	80077f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80075ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80075b2:	4b8d      	ldr	r3, [pc, #564]	@ (80077e8 <HAL_UART_IRQHandler+0x2b8>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80075ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80075be:	4b8b      	ldr	r3, [pc, #556]	@ (80077ec <HAL_UART_IRQHandler+0x2bc>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8116 	beq.w	80077f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d011      	beq.n	80075f8 <HAL_UART_IRQHandler+0xc8>
 80075d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2201      	movs	r2, #1
 80075e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ee:	f043 0201 	orr.w	r2, r3, #1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d011      	beq.n	8007628 <HAL_UART_IRQHandler+0xf8>
 8007604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2202      	movs	r2, #2
 8007616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800761e:	f043 0204 	orr.w	r2, r3, #4
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d011      	beq.n	8007658 <HAL_UART_IRQHandler+0x128>
 8007634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00b      	beq.n	8007658 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2204      	movs	r2, #4
 8007646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800764e:	f043 0202 	orr.w	r2, r3, #2
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d017      	beq.n	8007694 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	d105      	bne.n	800767c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007670:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007674:	4b5c      	ldr	r3, [pc, #368]	@ (80077e8 <HAL_UART_IRQHandler+0x2b8>)
 8007676:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2208      	movs	r2, #8
 8007682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800768a:	f043 0208 	orr.w	r2, r3, #8
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800769c:	2b00      	cmp	r3, #0
 800769e:	d012      	beq.n	80076c6 <HAL_UART_IRQHandler+0x196>
 80076a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00c      	beq.n	80076c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076bc:	f043 0220 	orr.w	r2, r3, #32
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8266 	beq.w	8007b9e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d6:	f003 0320 	and.w	r3, r3, #32
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d013      	beq.n	8007706 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d105      	bne.n	80076f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d007      	beq.n	8007706 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800771a:	2b40      	cmp	r3, #64	@ 0x40
 800771c:	d005      	beq.n	800772a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800771e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007722:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007726:	2b00      	cmp	r3, #0
 8007728:	d054      	beq.n	80077d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 f80e 	bl	800874c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773a:	2b40      	cmp	r3, #64	@ 0x40
 800773c:	d146      	bne.n	80077cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3308      	adds	r3, #8
 8007744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007754:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800775c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800776a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800776e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1d9      	bne.n	800773e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007790:	2b00      	cmp	r3, #0
 8007792:	d017      	beq.n	80077c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800779a:	4a15      	ldr	r2, [pc, #84]	@ (80077f0 <HAL_UART_IRQHandler+0x2c0>)
 800779c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fc fbe7 	bl	8003f78 <HAL_DMA_Abort_IT>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d019      	beq.n	80077e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80077be:	4610      	mov	r0, r2
 80077c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c2:	e00f      	b.n	80077e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7f9 fdc7 	bl	8001358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ca:	e00b      	b.n	80077e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7f9 fdc3 	bl	8001358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d2:	e007      	b.n	80077e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7f9 fdbf 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80077e2:	e1dc      	b.n	8007b9e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e4:	bf00      	nop
    return;
 80077e6:	e1da      	b.n	8007b9e <HAL_UART_IRQHandler+0x66e>
 80077e8:	10000001 	.word	0x10000001
 80077ec:	04000120 	.word	0x04000120
 80077f0:	08008819 	.word	0x08008819

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	f040 8170 	bne.w	8007ade <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007802:	f003 0310 	and.w	r3, r3, #16
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 8169 	beq.w	8007ade <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800780c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8162 	beq.w	8007ade <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2210      	movs	r2, #16
 8007820:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782c:	2b40      	cmp	r3, #64	@ 0x40
 800782e:	f040 80d8 	bne.w	80079e2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007840:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 80af 	beq.w	80079a8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007850:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007854:	429a      	cmp	r2, r3
 8007856:	f080 80a7 	bcs.w	80079a8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007860:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0320 	and.w	r3, r3, #32
 8007872:	2b00      	cmp	r3, #0
 8007874:	f040 8087 	bne.w	8007986 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800788c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007894:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80078ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80078ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1da      	bne.n	8007878 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80078d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3308      	adds	r3, #8
 80078e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80078e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80078ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80078ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80078f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e1      	bne.n	80078c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3308      	adds	r3, #8
 8007904:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800790e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3308      	adds	r3, #8
 800791e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007922:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007924:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007928:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e3      	bne.n	80078fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2220      	movs	r2, #32
 800793a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007954:	f023 0310 	bic.w	r3, r3, #16
 8007958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007966:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007968:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800796c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e4      	bne.n	8007944 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007980:	4618      	mov	r0, r3
 8007982:	f7fc faa0 	bl	8003ec6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2202      	movs	r2, #2
 800798a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007998:	b29b      	uxth	r3, r3
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	b29b      	uxth	r3, r3
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f911 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80079a6:	e0fc      	b.n	8007ba2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079b2:	429a      	cmp	r2, r3
 80079b4:	f040 80f5 	bne.w	8007ba2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	f040 80eb 	bne.w	8007ba2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f8f4 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
      return;
 80079e0:	e0df      	b.n	8007ba2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80d1 	beq.w	8007ba6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 80cc 	beq.w	8007ba6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e4      	bne.n	8007a0e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3308      	adds	r3, #8
 8007a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	623b      	str	r3, [r7, #32]
   return(result);
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a5a:	f023 0301 	bic.w	r3, r3, #1
 8007a5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3308      	adds	r3, #8
 8007a68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e1      	bne.n	8007a44 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f023 0310 	bic.w	r3, r3, #16
 8007aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ab6:	61fb      	str	r3, [r7, #28]
 8007ab8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	69b9      	ldr	r1, [r7, #24]
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e4      	bne.n	8007a94 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2202      	movs	r2, #2
 8007ace:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ad0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f876 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007adc:	e063      	b.n	8007ba6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00e      	beq.n	8007b08 <HAL_UART_IRQHandler+0x5d8>
 8007aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d008      	beq.n	8007b08 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007afe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 fbeb 	bl	80092dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b06:	e051      	b.n	8007bac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d014      	beq.n	8007b3e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d105      	bne.n	8007b2c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d008      	beq.n	8007b3e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d03a      	beq.n	8007baa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
    }
    return;
 8007b3c:	e035      	b.n	8007baa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <HAL_UART_IRQHandler+0x62e>
 8007b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fe74 	bl	8008844 <UART_EndTransmit_IT>
    return;
 8007b5c:	e026      	b.n	8007bac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <HAL_UART_IRQHandler+0x64e>
 8007b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 fbc4 	bl	8009304 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b7c:	e016      	b.n	8007bac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d010      	beq.n	8007bac <HAL_UART_IRQHandler+0x67c>
 8007b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	da0c      	bge.n	8007bac <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 fbac 	bl	80092f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b98:	e008      	b.n	8007bac <HAL_UART_IRQHandler+0x67c>
      return;
 8007b9a:	bf00      	nop
 8007b9c:	e006      	b.n	8007bac <HAL_UART_IRQHandler+0x67c>
    return;
 8007b9e:	bf00      	nop
 8007ba0:	e004      	b.n	8007bac <HAL_UART_IRQHandler+0x67c>
      return;
 8007ba2:	bf00      	nop
 8007ba4:	e002      	b.n	8007bac <HAL_UART_IRQHandler+0x67c>
      return;
 8007ba6:	bf00      	nop
 8007ba8:	e000      	b.n	8007bac <HAL_UART_IRQHandler+0x67c>
    return;
 8007baa:	bf00      	nop
  }
}
 8007bac:	37e8      	adds	r7, #232	@ 0xe8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop

08007bb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c00:	b08c      	sub	sp, #48	@ 0x30
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	4bab      	ldr	r3, [pc, #684]	@ (8007ed8 <UART_SetConfig+0x2dc>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	6812      	ldr	r2, [r2, #0]
 8007c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4aa0      	ldr	r2, [pc, #640]	@ (8007edc <UART_SetConfig+0x2e0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d004      	beq.n	8007c68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c64:	4313      	orrs	r3, r2
 8007c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007c72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c86:	f023 010f 	bic.w	r1, r3, #15
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a91      	ldr	r2, [pc, #580]	@ (8007ee0 <UART_SetConfig+0x2e4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d125      	bne.n	8007cec <UART_SetConfig+0xf0>
 8007ca0:	4b90      	ldr	r3, [pc, #576]	@ (8007ee4 <UART_SetConfig+0x2e8>)
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca6:	f003 0303 	and.w	r3, r3, #3
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d81a      	bhi.n	8007ce4 <UART_SetConfig+0xe8>
 8007cae:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <UART_SetConfig+0xb8>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007cc5 	.word	0x08007cc5
 8007cb8:	08007cd5 	.word	0x08007cd5
 8007cbc:	08007ccd 	.word	0x08007ccd
 8007cc0:	08007cdd 	.word	0x08007cdd
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cca:	e0d6      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd2:	e0d2      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007cd4:	2304      	movs	r3, #4
 8007cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cda:	e0ce      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007cdc:	2308      	movs	r3, #8
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce2:	e0ca      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cea:	e0c6      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a7d      	ldr	r2, [pc, #500]	@ (8007ee8 <UART_SetConfig+0x2ec>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d138      	bne.n	8007d68 <UART_SetConfig+0x16c>
 8007cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ee4 <UART_SetConfig+0x2e8>)
 8007cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfc:	f003 030c 	and.w	r3, r3, #12
 8007d00:	2b0c      	cmp	r3, #12
 8007d02:	d82d      	bhi.n	8007d60 <UART_SetConfig+0x164>
 8007d04:	a201      	add	r2, pc, #4	@ (adr r2, 8007d0c <UART_SetConfig+0x110>)
 8007d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0a:	bf00      	nop
 8007d0c:	08007d41 	.word	0x08007d41
 8007d10:	08007d61 	.word	0x08007d61
 8007d14:	08007d61 	.word	0x08007d61
 8007d18:	08007d61 	.word	0x08007d61
 8007d1c:	08007d51 	.word	0x08007d51
 8007d20:	08007d61 	.word	0x08007d61
 8007d24:	08007d61 	.word	0x08007d61
 8007d28:	08007d61 	.word	0x08007d61
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d61 	.word	0x08007d61
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d59 	.word	0x08007d59
 8007d40:	2300      	movs	r3, #0
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d46:	e098      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d4e:	e094      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007d50:	2304      	movs	r3, #4
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d56:	e090      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d5e:	e08c      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d66:	e088      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a5f      	ldr	r2, [pc, #380]	@ (8007eec <UART_SetConfig+0x2f0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d125      	bne.n	8007dbe <UART_SetConfig+0x1c2>
 8007d72:	4b5c      	ldr	r3, [pc, #368]	@ (8007ee4 <UART_SetConfig+0x2e8>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d7c:	2b30      	cmp	r3, #48	@ 0x30
 8007d7e:	d016      	beq.n	8007dae <UART_SetConfig+0x1b2>
 8007d80:	2b30      	cmp	r3, #48	@ 0x30
 8007d82:	d818      	bhi.n	8007db6 <UART_SetConfig+0x1ba>
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d00a      	beq.n	8007d9e <UART_SetConfig+0x1a2>
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	d814      	bhi.n	8007db6 <UART_SetConfig+0x1ba>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <UART_SetConfig+0x19a>
 8007d90:	2b10      	cmp	r3, #16
 8007d92:	d008      	beq.n	8007da6 <UART_SetConfig+0x1aa>
 8007d94:	e00f      	b.n	8007db6 <UART_SetConfig+0x1ba>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d9c:	e06d      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007da4:	e069      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007da6:	2304      	movs	r3, #4
 8007da8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dac:	e065      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007dae:	2308      	movs	r3, #8
 8007db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007db4:	e061      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007db6:	2310      	movs	r3, #16
 8007db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dbc:	e05d      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a4b      	ldr	r2, [pc, #300]	@ (8007ef0 <UART_SetConfig+0x2f4>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d125      	bne.n	8007e14 <UART_SetConfig+0x218>
 8007dc8:	4b46      	ldr	r3, [pc, #280]	@ (8007ee4 <UART_SetConfig+0x2e8>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007dd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dd4:	d016      	beq.n	8007e04 <UART_SetConfig+0x208>
 8007dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dd8:	d818      	bhi.n	8007e0c <UART_SetConfig+0x210>
 8007dda:	2b80      	cmp	r3, #128	@ 0x80
 8007ddc:	d00a      	beq.n	8007df4 <UART_SetConfig+0x1f8>
 8007dde:	2b80      	cmp	r3, #128	@ 0x80
 8007de0:	d814      	bhi.n	8007e0c <UART_SetConfig+0x210>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <UART_SetConfig+0x1f0>
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d008      	beq.n	8007dfc <UART_SetConfig+0x200>
 8007dea:	e00f      	b.n	8007e0c <UART_SetConfig+0x210>
 8007dec:	2300      	movs	r3, #0
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df2:	e042      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007df4:	2302      	movs	r3, #2
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dfa:	e03e      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007dfc:	2304      	movs	r3, #4
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e02:	e03a      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007e04:	2308      	movs	r3, #8
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0a:	e036      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e12:	e032      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a30      	ldr	r2, [pc, #192]	@ (8007edc <UART_SetConfig+0x2e0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d12a      	bne.n	8007e74 <UART_SetConfig+0x278>
 8007e1e:	4b31      	ldr	r3, [pc, #196]	@ (8007ee4 <UART_SetConfig+0x2e8>)
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e2c:	d01a      	beq.n	8007e64 <UART_SetConfig+0x268>
 8007e2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e32:	d81b      	bhi.n	8007e6c <UART_SetConfig+0x270>
 8007e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e38:	d00c      	beq.n	8007e54 <UART_SetConfig+0x258>
 8007e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e3e:	d815      	bhi.n	8007e6c <UART_SetConfig+0x270>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d003      	beq.n	8007e4c <UART_SetConfig+0x250>
 8007e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e48:	d008      	beq.n	8007e5c <UART_SetConfig+0x260>
 8007e4a:	e00f      	b.n	8007e6c <UART_SetConfig+0x270>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e52:	e012      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007e54:	2302      	movs	r3, #2
 8007e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e5a:	e00e      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007e5c:	2304      	movs	r3, #4
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e62:	e00a      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007e64:	2308      	movs	r3, #8
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e6a:	e006      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e72:	e002      	b.n	8007e7a <UART_SetConfig+0x27e>
 8007e74:	2310      	movs	r3, #16
 8007e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a17      	ldr	r2, [pc, #92]	@ (8007edc <UART_SetConfig+0x2e0>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	f040 80a8 	bne.w	8007fd6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e8a:	2b08      	cmp	r3, #8
 8007e8c:	d834      	bhi.n	8007ef8 <UART_SetConfig+0x2fc>
 8007e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e94 <UART_SetConfig+0x298>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007eb9 	.word	0x08007eb9
 8007e98:	08007ef9 	.word	0x08007ef9
 8007e9c:	08007ec1 	.word	0x08007ec1
 8007ea0:	08007ef9 	.word	0x08007ef9
 8007ea4:	08007ec7 	.word	0x08007ec7
 8007ea8:	08007ef9 	.word	0x08007ef9
 8007eac:	08007ef9 	.word	0x08007ef9
 8007eb0:	08007ef9 	.word	0x08007ef9
 8007eb4:	08007ecf 	.word	0x08007ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eb8:	f7fc ffd0 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8007ebc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ebe:	e021      	b.n	8007f04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef4 <UART_SetConfig+0x2f8>)
 8007ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ec4:	e01e      	b.n	8007f04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ec6:	f7fc ff5b 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8007eca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ecc:	e01a      	b.n	8007f04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ed4:	e016      	b.n	8007f04 <UART_SetConfig+0x308>
 8007ed6:	bf00      	nop
 8007ed8:	cfff69f3 	.word	0xcfff69f3
 8007edc:	40008000 	.word	0x40008000
 8007ee0:	40013800 	.word	0x40013800
 8007ee4:	40021000 	.word	0x40021000
 8007ee8:	40004400 	.word	0x40004400
 8007eec:	40004800 	.word	0x40004800
 8007ef0:	40004c00 	.word	0x40004c00
 8007ef4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 812a 	beq.w	8008160 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f10:	4a9e      	ldr	r2, [pc, #632]	@ (800818c <UART_SetConfig+0x590>)
 8007f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f16:	461a      	mov	r2, r3
 8007f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	4613      	mov	r3, r2
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	4413      	add	r3, r2
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d305      	bcc.n	8007f3c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d903      	bls.n	8007f44 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f42:	e10d      	b.n	8008160 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	2200      	movs	r2, #0
 8007f48:	60bb      	str	r3, [r7, #8]
 8007f4a:	60fa      	str	r2, [r7, #12]
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f50:	4a8e      	ldr	r2, [pc, #568]	@ (800818c <UART_SetConfig+0x590>)
 8007f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2200      	movs	r2, #0
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	607a      	str	r2, [r7, #4]
 8007f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f66:	f7f8 feb7 	bl	8000cd8 <__aeabi_uldivmod>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4619      	mov	r1, r3
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	020b      	lsls	r3, r1, #8
 8007f7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f80:	0202      	lsls	r2, r0, #8
 8007f82:	6979      	ldr	r1, [r7, #20]
 8007f84:	6849      	ldr	r1, [r1, #4]
 8007f86:	0849      	lsrs	r1, r1, #1
 8007f88:	2000      	movs	r0, #0
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	eb12 0804 	adds.w	r8, r2, r4
 8007f92:	eb43 0905 	adc.w	r9, r3, r5
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	469a      	mov	sl, r3
 8007f9e:	4693      	mov	fp, r2
 8007fa0:	4652      	mov	r2, sl
 8007fa2:	465b      	mov	r3, fp
 8007fa4:	4640      	mov	r0, r8
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	f7f8 fe96 	bl	8000cd8 <__aeabi_uldivmod>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fba:	d308      	bcc.n	8007fce <UART_SetConfig+0x3d2>
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fc2:	d204      	bcs.n	8007fce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6a3a      	ldr	r2, [r7, #32]
 8007fca:	60da      	str	r2, [r3, #12]
 8007fcc:	e0c8      	b.n	8008160 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007fd4:	e0c4      	b.n	8008160 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fde:	d167      	bne.n	80080b0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007fe0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fe4:	2b08      	cmp	r3, #8
 8007fe6:	d828      	bhi.n	800803a <UART_SetConfig+0x43e>
 8007fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <UART_SetConfig+0x3f4>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	0800801d 	.word	0x0800801d
 8007ff8:	08008025 	.word	0x08008025
 8007ffc:	0800803b 	.word	0x0800803b
 8008000:	0800802b 	.word	0x0800802b
 8008004:	0800803b 	.word	0x0800803b
 8008008:	0800803b 	.word	0x0800803b
 800800c:	0800803b 	.word	0x0800803b
 8008010:	08008033 	.word	0x08008033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008014:	f7fc ff22 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8008018:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800801a:	e014      	b.n	8008046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800801c:	f7fc ff34 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 8008020:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008022:	e010      	b.n	8008046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008024:	4b5a      	ldr	r3, [pc, #360]	@ (8008190 <UART_SetConfig+0x594>)
 8008026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008028:	e00d      	b.n	8008046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800802a:	f7fc fea9 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 800802e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008030:	e009      	b.n	8008046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008038:	e005      	b.n	8008046 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8089 	beq.w	8008160 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008052:	4a4e      	ldr	r2, [pc, #312]	@ (800818c <UART_SetConfig+0x590>)
 8008054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008058:	461a      	mov	r2, r3
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008060:	005a      	lsls	r2, r3, #1
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	085b      	lsrs	r3, r3, #1
 8008068:	441a      	add	r2, r3
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008072:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d916      	bls.n	80080a8 <UART_SetConfig+0x4ac>
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008080:	d212      	bcs.n	80080a8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f023 030f 	bic.w	r3, r3, #15
 800808a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	b29b      	uxth	r3, r3
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	b29a      	uxth	r2, r3
 8008098:	8bfb      	ldrh	r3, [r7, #30]
 800809a:	4313      	orrs	r3, r2
 800809c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	8bfa      	ldrh	r2, [r7, #30]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	e05b      	b.n	8008160 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080ae:	e057      	b.n	8008160 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d828      	bhi.n	800810a <UART_SetConfig+0x50e>
 80080b8:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <UART_SetConfig+0x4c4>)
 80080ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080be:	bf00      	nop
 80080c0:	080080e5 	.word	0x080080e5
 80080c4:	080080ed 	.word	0x080080ed
 80080c8:	080080f5 	.word	0x080080f5
 80080cc:	0800810b 	.word	0x0800810b
 80080d0:	080080fb 	.word	0x080080fb
 80080d4:	0800810b 	.word	0x0800810b
 80080d8:	0800810b 	.word	0x0800810b
 80080dc:	0800810b 	.word	0x0800810b
 80080e0:	08008103 	.word	0x08008103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080e4:	f7fc feba 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 80080e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080ea:	e014      	b.n	8008116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080ec:	f7fc fecc 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 80080f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080f2:	e010      	b.n	8008116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080f4:	4b26      	ldr	r3, [pc, #152]	@ (8008190 <UART_SetConfig+0x594>)
 80080f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080f8:	e00d      	b.n	8008116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080fa:	f7fc fe41 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 80080fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008100:	e009      	b.n	8008116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008106:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008108:	e005      	b.n	8008116 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008114:	bf00      	nop
    }

    if (pclk != 0U)
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d021      	beq.n	8008160 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008120:	4a1a      	ldr	r2, [pc, #104]	@ (800818c <UART_SetConfig+0x590>)
 8008122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008126:	461a      	mov	r2, r3
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	fbb3 f2f2 	udiv	r2, r3, r2
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	085b      	lsrs	r3, r3, #1
 8008134:	441a      	add	r2, r3
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	fbb2 f3f3 	udiv	r3, r2, r3
 800813e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	2b0f      	cmp	r3, #15
 8008144:	d909      	bls.n	800815a <UART_SetConfig+0x55e>
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800814c:	d205      	bcs.n	800815a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	b29a      	uxth	r2, r3
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60da      	str	r2, [r3, #12]
 8008158:	e002      	b.n	8008160 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2201      	movs	r2, #1
 8008164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2201      	movs	r2, #1
 800816c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2200      	movs	r2, #0
 8008174:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2200      	movs	r2, #0
 800817a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800817c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008180:	4618      	mov	r0, r3
 8008182:	3730      	adds	r7, #48	@ 0x30
 8008184:	46bd      	mov	sp, r7
 8008186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800818a:	bf00      	nop
 800818c:	0800e3c8 	.word	0x0800e3c8
 8008190:	00f42400 	.word	0x00f42400

08008194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a0:	f003 0308 	and.w	r3, r3, #8
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00a      	beq.n	80081be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01a      	beq.n	80082aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800828e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008292:	d10a      	bne.n	80082aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	605a      	str	r2, [r3, #4]
  }
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b098      	sub	sp, #96	@ 0x60
 80082dc:	af02      	add	r7, sp, #8
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082e8:	f7fa fc9c 	bl	8002c24 <HAL_GetTick>
 80082ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0308 	and.w	r3, r3, #8
 80082f8:	2b08      	cmp	r3, #8
 80082fa:	d12f      	bne.n	800835c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008304:	2200      	movs	r2, #0
 8008306:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f88e 	bl	800842c <UART_WaitOnFlagUntilTimeout>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d022      	beq.n	800835c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800832a:	653b      	str	r3, [r7, #80]	@ 0x50
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008334:	647b      	str	r3, [r7, #68]	@ 0x44
 8008336:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800833a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800833c:	e841 2300 	strex	r3, r2, [r1]
 8008340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e6      	bne.n	8008316 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2220      	movs	r2, #32
 800834c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e063      	b.n	8008424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	2b04      	cmp	r3, #4
 8008368:	d149      	bne.n	80083fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800836a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008372:	2200      	movs	r2, #0
 8008374:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f857 	bl	800842c <UART_WaitOnFlagUntilTimeout>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d03c      	beq.n	80083fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	623b      	str	r3, [r7, #32]
   return(result);
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80083a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e6      	bne.n	8008384 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3308      	adds	r3, #8
 80083bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f023 0301 	bic.w	r3, r3, #1
 80083cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3308      	adds	r3, #8
 80083d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083d6:	61fa      	str	r2, [r7, #28]
 80083d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	69b9      	ldr	r1, [r7, #24]
 80083dc:	69fa      	ldr	r2, [r7, #28]
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	617b      	str	r3, [r7, #20]
   return(result);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e5      	bne.n	80083b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e012      	b.n	8008424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2220      	movs	r2, #32
 800840a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3758      	adds	r7, #88	@ 0x58
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	4613      	mov	r3, r2
 800843a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800843c:	e04f      	b.n	80084de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008444:	d04b      	beq.n	80084de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008446:	f7fa fbed 	bl	8002c24 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	429a      	cmp	r2, r3
 8008454:	d302      	bcc.n	800845c <UART_WaitOnFlagUntilTimeout+0x30>
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e04e      	b.n	80084fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0304 	and.w	r3, r3, #4
 800846a:	2b00      	cmp	r3, #0
 800846c:	d037      	beq.n	80084de <UART_WaitOnFlagUntilTimeout+0xb2>
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b80      	cmp	r3, #128	@ 0x80
 8008472:	d034      	beq.n	80084de <UART_WaitOnFlagUntilTimeout+0xb2>
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b40      	cmp	r3, #64	@ 0x40
 8008478:	d031      	beq.n	80084de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	f003 0308 	and.w	r3, r3, #8
 8008484:	2b08      	cmp	r3, #8
 8008486:	d110      	bne.n	80084aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2208      	movs	r2, #8
 800848e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 f95b 	bl	800874c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2208      	movs	r2, #8
 800849a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e029      	b.n	80084fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084b8:	d111      	bne.n	80084de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 f941 	bl	800874c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e00f      	b.n	80084fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69da      	ldr	r2, [r3, #28]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	4013      	ands	r3, r2
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	bf0c      	ite	eq
 80084ee:	2301      	moveq	r3, #1
 80084f0:	2300      	movne	r3, #0
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	461a      	mov	r2, r3
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d0a0      	beq.n	800843e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008508:	b480      	push	{r7}
 800850a:	b0a3      	sub	sp, #140	@ 0x8c
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	88fa      	ldrh	r2, [r7, #6]
 8008520:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	88fa      	ldrh	r2, [r7, #6]
 8008528:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800853a:	d10e      	bne.n	800855a <UART_Start_Receive_IT+0x52>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <UART_Start_Receive_IT+0x48>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800854a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800854e:	e02d      	b.n	80085ac <UART_Start_Receive_IT+0xa4>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	22ff      	movs	r2, #255	@ 0xff
 8008554:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008558:	e028      	b.n	80085ac <UART_Start_Receive_IT+0xa4>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10d      	bne.n	800857e <UART_Start_Receive_IT+0x76>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d104      	bne.n	8008574 <UART_Start_Receive_IT+0x6c>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	22ff      	movs	r2, #255	@ 0xff
 800856e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008572:	e01b      	b.n	80085ac <UART_Start_Receive_IT+0xa4>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	227f      	movs	r2, #127	@ 0x7f
 8008578:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800857c:	e016      	b.n	80085ac <UART_Start_Receive_IT+0xa4>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008586:	d10d      	bne.n	80085a4 <UART_Start_Receive_IT+0x9c>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d104      	bne.n	800859a <UART_Start_Receive_IT+0x92>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	227f      	movs	r2, #127	@ 0x7f
 8008594:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008598:	e008      	b.n	80085ac <UART_Start_Receive_IT+0xa4>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	223f      	movs	r2, #63	@ 0x3f
 800859e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80085a2:	e003      	b.n	80085ac <UART_Start_Receive_IT+0xa4>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2222      	movs	r2, #34	@ 0x22
 80085b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085c6:	e853 3f00 	ldrex	r3, [r3]
 80085ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80085cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3308      	adds	r3, #8
 80085dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80085e0:	673a      	str	r2, [r7, #112]	@ 0x70
 80085e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80085e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80085ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e3      	bne.n	80085bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085fc:	d14f      	bne.n	800869e <UART_Start_Receive_IT+0x196>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008604:	88fa      	ldrh	r2, [r7, #6]
 8008606:	429a      	cmp	r2, r3
 8008608:	d349      	bcc.n	800869e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008612:	d107      	bne.n	8008624 <UART_Start_Receive_IT+0x11c>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d103      	bne.n	8008624 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4a47      	ldr	r2, [pc, #284]	@ (800873c <UART_Start_Receive_IT+0x234>)
 8008620:	675a      	str	r2, [r3, #116]	@ 0x74
 8008622:	e002      	b.n	800862a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4a46      	ldr	r2, [pc, #280]	@ (8008740 <UART_Start_Receive_IT+0x238>)
 8008628:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d01a      	beq.n	8008668 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800863a:	e853 3f00 	ldrex	r3, [r3]
 800863e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008646:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008654:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008656:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800865a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e4      	bne.n	8008632 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3308      	adds	r3, #8
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800867e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3308      	adds	r3, #8
 8008686:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008688:	64ba      	str	r2, [r7, #72]	@ 0x48
 800868a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800868e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e5      	bne.n	8008668 <UART_Start_Receive_IT+0x160>
 800869c:	e046      	b.n	800872c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086a6:	d107      	bne.n	80086b8 <UART_Start_Receive_IT+0x1b0>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d103      	bne.n	80086b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4a24      	ldr	r2, [pc, #144]	@ (8008744 <UART_Start_Receive_IT+0x23c>)
 80086b4:	675a      	str	r2, [r3, #116]	@ 0x74
 80086b6:	e002      	b.n	80086be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4a23      	ldr	r2, [pc, #140]	@ (8008748 <UART_Start_Receive_IT+0x240>)
 80086bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d019      	beq.n	80086fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80086da:	677b      	str	r3, [r7, #116]	@ 0x74
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	461a      	mov	r2, r3
 80086e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086e6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80086f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e6      	bne.n	80086c6 <UART_Start_Receive_IT+0x1be>
 80086f8:	e018      	b.n	800872c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	613b      	str	r3, [r7, #16]
   return(result);
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f043 0320 	orr.w	r3, r3, #32
 800870e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008718:	623b      	str	r3, [r7, #32]
 800871a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	69f9      	ldr	r1, [r7, #28]
 800871e:	6a3a      	ldr	r2, [r7, #32]
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	61bb      	str	r3, [r7, #24]
   return(result);
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e6      	bne.n	80086fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	378c      	adds	r7, #140	@ 0x8c
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	08008f71 	.word	0x08008f71
 8008740:	08008c0d 	.word	0x08008c0d
 8008744:	08008a55 	.word	0x08008a55
 8008748:	0800889d 	.word	0x0800889d

0800874c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b095      	sub	sp, #84	@ 0x54
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008772:	643b      	str	r3, [r7, #64]	@ 0x40
 8008774:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008776:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008778:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1e6      	bne.n	8008754 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3308      	adds	r3, #8
 800878c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	61fb      	str	r3, [r7, #28]
   return(result);
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800879c:	f023 0301 	bic.w	r3, r3, #1
 80087a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3308      	adds	r3, #8
 80087a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087b2:	e841 2300 	strex	r3, r2, [r1]
 80087b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e3      	bne.n	8008786 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d118      	bne.n	80087f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f023 0310 	bic.w	r3, r3, #16
 80087da:	647b      	str	r3, [r7, #68]	@ 0x44
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087e4:	61bb      	str	r3, [r7, #24]
 80087e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e8:	6979      	ldr	r1, [r7, #20]
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	e841 2300 	strex	r3, r2, [r1]
 80087f0:	613b      	str	r3, [r7, #16]
   return(result);
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e6      	bne.n	80087c6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2220      	movs	r2, #32
 80087fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800880c:	bf00      	nop
 800880e:	3754      	adds	r7, #84	@ 0x54
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f7f8 fd8e 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800883c:	bf00      	nop
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	60bb      	str	r3, [r7, #8]
   return(result);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008860:	61fb      	str	r3, [r7, #28]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	61bb      	str	r3, [r7, #24]
 800886c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	6979      	ldr	r1, [r7, #20]
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	613b      	str	r3, [r7, #16]
   return(result);
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e6      	bne.n	800884c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2220      	movs	r2, #32
 8008882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7ff f991 	bl	8007bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008892:	bf00      	nop
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b09c      	sub	sp, #112	@ 0x70
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088b4:	2b22      	cmp	r3, #34	@ 0x22
 80088b6:	f040 80be 	bne.w	8008a36 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80088c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80088c8:	b2d9      	uxtb	r1, r3
 80088ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088d4:	400a      	ands	r2, r1
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088de:	1c5a      	adds	r2, r3, #1
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	3b01      	subs	r3, #1
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f040 80a1 	bne.w	8008a46 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008918:	66bb      	str	r3, [r7, #104]	@ 0x68
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008922:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008924:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008928:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e6      	bne.n	8008904 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3308      	adds	r3, #8
 800893c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008948:	f023 0301 	bic.w	r3, r3, #1
 800894c:	667b      	str	r3, [r7, #100]	@ 0x64
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3308      	adds	r3, #8
 8008954:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008956:	647a      	str	r2, [r7, #68]	@ 0x44
 8008958:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800895c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e5      	bne.n	8008936 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2220      	movs	r2, #32
 800896e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a33      	ldr	r2, [pc, #204]	@ (8008a50 <UART_RxISR_8BIT+0x1b4>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d01f      	beq.n	80089c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d018      	beq.n	80089c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	623b      	str	r3, [r7, #32]
   return(result);
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80089b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e6      	bne.n	8008996 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d12e      	bne.n	8008a2e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	e853 3f00 	ldrex	r3, [r3]
 80089e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f023 0310 	bic.w	r3, r3, #16
 80089ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089f4:	61fb      	str	r3, [r7, #28]
 80089f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	69b9      	ldr	r1, [r7, #24]
 80089fa:	69fa      	ldr	r2, [r7, #28]
 80089fc:	e841 2300 	strex	r3, r2, [r1]
 8008a00:	617b      	str	r3, [r7, #20]
   return(result);
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e6      	bne.n	80089d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	f003 0310 	and.w	r3, r3, #16
 8008a12:	2b10      	cmp	r3, #16
 8008a14:	d103      	bne.n	8008a1e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2210      	movs	r2, #16
 8008a1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff f8ce 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a2c:	e00b      	b.n	8008a46 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7f8 fc74 	bl	800131c <HAL_UART_RxCpltCallback>
}
 8008a34:	e007      	b.n	8008a46 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	699a      	ldr	r2, [r3, #24]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0208 	orr.w	r2, r2, #8
 8008a44:	619a      	str	r2, [r3, #24]
}
 8008a46:	bf00      	nop
 8008a48:	3770      	adds	r7, #112	@ 0x70
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	40008000 	.word	0x40008000

08008a54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b09c      	sub	sp, #112	@ 0x70
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a6c:	2b22      	cmp	r3, #34	@ 0x22
 8008a6e:	f040 80be 	bne.w	8008bee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a80:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a96:	1c9a      	adds	r2, r3, #2
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f040 80a1 	bne.w	8008bfe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ad0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ada:	657b      	str	r3, [r7, #84]	@ 0x54
 8008adc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ae0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e6      	bne.n	8008abc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	f023 0301 	bic.w	r3, r3, #1
 8008b04:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008b0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e5      	bne.n	8008aee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a33      	ldr	r2, [pc, #204]	@ (8008c08 <UART_RxISR_16BIT+0x1b4>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d01f      	beq.n	8008b80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d018      	beq.n	8008b80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	e853 3f00 	ldrex	r3, [r3]
 8008b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b6e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b74:	e841 2300 	strex	r3, r2, [r1]
 8008b78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1e6      	bne.n	8008b4e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d12e      	bne.n	8008be6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	e853 3f00 	ldrex	r3, [r3]
 8008b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f023 0310 	bic.w	r3, r3, #16
 8008ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bac:	61bb      	str	r3, [r7, #24]
 8008bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb0:	6979      	ldr	r1, [r7, #20]
 8008bb2:	69ba      	ldr	r2, [r7, #24]
 8008bb4:	e841 2300 	strex	r3, r2, [r1]
 8008bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1e6      	bne.n	8008b8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	f003 0310 	and.w	r3, r3, #16
 8008bca:	2b10      	cmp	r3, #16
 8008bcc:	d103      	bne.n	8008bd6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2210      	movs	r2, #16
 8008bd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7fe fff2 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008be4:	e00b      	b.n	8008bfe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7f8 fb98 	bl	800131c <HAL_UART_RxCpltCallback>
}
 8008bec:	e007      	b.n	8008bfe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	699a      	ldr	r2, [r3, #24]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f042 0208 	orr.w	r2, r2, #8
 8008bfc:	619a      	str	r2, [r3, #24]
}
 8008bfe:	bf00      	nop
 8008c00:	3770      	adds	r7, #112	@ 0x70
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	40008000 	.word	0x40008000

08008c0c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b0ac      	sub	sp, #176	@ 0xb0
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c1a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c42:	2b22      	cmp	r3, #34	@ 0x22
 8008c44:	f040 8183 	bne.w	8008f4e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c4e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c52:	e126      	b.n	8008ea2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c5a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c5e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008c62:	b2d9      	uxtb	r1, r3
 8008c64:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c6e:	400a      	ands	r2, r1
 8008c70:	b2d2      	uxtb	r2, r2
 8008c72:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c9e:	f003 0307 	and.w	r3, r3, #7
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d053      	beq.n	8008d4e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d011      	beq.n	8008cd6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00b      	beq.n	8008cd6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ccc:	f043 0201 	orr.w	r2, r3, #1
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d011      	beq.n	8008d06 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cfc:	f043 0204 	orr.w	r2, r3, #4
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d0a:	f003 0304 	and.w	r3, r3, #4
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d011      	beq.n	8008d36 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00b      	beq.n	8008d36 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2204      	movs	r2, #4
 8008d24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2c:	f043 0202 	orr.w	r2, r3, #2
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d006      	beq.n	8008d4e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7f8 fb09 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f040 80a3 	bne.w	8008ea2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d80:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008d84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008d8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e4      	bne.n	8008d5c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3308      	adds	r3, #8
 8008d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008da2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008da8:	f023 0301 	bic.w	r3, r3, #1
 8008dac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3308      	adds	r3, #8
 8008db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008dba:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008dbc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008dc0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008dc2:	e841 2300 	strex	r3, r2, [r1]
 8008dc6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008dc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1e1      	bne.n	8008d92 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a60      	ldr	r2, [pc, #384]	@ (8008f68 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d021      	beq.n	8008e30 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d01a      	beq.n	8008e30 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e02:	e853 3f00 	ldrex	r3, [r3]
 8008e06:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008e1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e1e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e24:	e841 2300 	strex	r3, r2, [r1]
 8008e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e4      	bne.n	8008dfa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d130      	bne.n	8008e9a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e46:	e853 3f00 	ldrex	r3, [r3]
 8008e4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	f023 0310 	bic.w	r3, r3, #16
 8008e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e60:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e68:	e841 2300 	strex	r3, r2, [r1]
 8008e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e4      	bne.n	8008e3e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b10      	cmp	r3, #16
 8008e80:	d103      	bne.n	8008e8a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2210      	movs	r2, #16
 8008e88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7fe fe98 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008e98:	e00e      	b.n	8008eb8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7f8 fa3e 	bl	800131c <HAL_UART_RxCpltCallback>
        break;
 8008ea0:	e00a      	b.n	8008eb8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ea2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d006      	beq.n	8008eb8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8008eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eae:	f003 0320 	and.w	r3, r3, #32
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f47f aece 	bne.w	8008c54 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ebe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ec2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d049      	beq.n	8008f5e <UART_RxISR_8BIT_FIFOEN+0x352>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ed0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d242      	bcs.n	8008f5e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3308      	adds	r3, #8
 8008ede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	e853 3f00 	ldrex	r3, [r3]
 8008ee6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e3      	bne.n	8008ed8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a16      	ldr	r2, [pc, #88]	@ (8008f6c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008f14:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	e853 3f00 	ldrex	r3, [r3]
 8008f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f043 0320 	orr.w	r3, r3, #32
 8008f2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f38:	61bb      	str	r3, [r7, #24]
 8008f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3c:	6979      	ldr	r1, [r7, #20]
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	e841 2300 	strex	r3, r2, [r1]
 8008f44:	613b      	str	r3, [r7, #16]
   return(result);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e4      	bne.n	8008f16 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f4c:	e007      	b.n	8008f5e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	699a      	ldr	r2, [r3, #24]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f042 0208 	orr.w	r2, r2, #8
 8008f5c:	619a      	str	r2, [r3, #24]
}
 8008f5e:	bf00      	nop
 8008f60:	37b0      	adds	r7, #176	@ 0xb0
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	40008000 	.word	0x40008000
 8008f6c:	0800889d 	.word	0x0800889d

08008f70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b0ae      	sub	sp, #184	@ 0xb8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f7e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fa6:	2b22      	cmp	r3, #34	@ 0x22
 8008fa8:	f040 8187 	bne.w	80092ba <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008fb2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fb6:	e12a      	b.n	800920e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fbe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008fce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe0:	1c9a      	adds	r2, r3, #2
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009002:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009006:	f003 0307 	and.w	r3, r3, #7
 800900a:	2b00      	cmp	r3, #0
 800900c:	d053      	beq.n	80090b6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800900e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d011      	beq.n	800903e <UART_RxISR_16BIT_FIFOEN+0xce>
 800901a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800901e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2201      	movs	r2, #1
 800902c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009034:	f043 0201 	orr.w	r2, r3, #1
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800903e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b00      	cmp	r3, #0
 8009048:	d011      	beq.n	800906e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800904a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00b      	beq.n	800906e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2202      	movs	r2, #2
 800905c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009064:	f043 0204 	orr.w	r2, r3, #4
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800906e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d011      	beq.n	800909e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800907a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00b      	beq.n	800909e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2204      	movs	r2, #4
 800908c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009094:	f043 0202 	orr.w	r2, r3, #2
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d006      	beq.n	80090b6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7f8 f955 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f040 80a5 	bne.w	800920e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e2      	bne.n	80090c4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3308      	adds	r3, #8
 8009104:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800910e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009114:	f023 0301 	bic.w	r3, r3, #1
 8009118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3308      	adds	r3, #8
 8009122:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800912c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e1      	bne.n	80090fe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2220      	movs	r2, #32
 800913e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a60      	ldr	r2, [pc, #384]	@ (80092d4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d021      	beq.n	800919c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01a      	beq.n	800919c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009176:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800917a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009188:	65bb      	str	r3, [r7, #88]	@ 0x58
 800918a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800918e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e4      	bne.n	8009166 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d130      	bne.n	8009206 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ba:	f023 0310 	bic.w	r3, r3, #16
 80091be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80091ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e4      	bne.n	80091aa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	f003 0310 	and.w	r3, r3, #16
 80091ea:	2b10      	cmp	r3, #16
 80091ec:	d103      	bne.n	80091f6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2210      	movs	r2, #16
 80091f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7fe fce2 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009204:	e00e      	b.n	8009224 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7f8 f888 	bl	800131c <HAL_UART_RxCpltCallback>
        break;
 800920c:	e00a      	b.n	8009224 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800920e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009212:	2b00      	cmp	r3, #0
 8009214:	d006      	beq.n	8009224 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009216:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800921a:	f003 0320 	and.w	r3, r3, #32
 800921e:	2b00      	cmp	r3, #0
 8009220:	f47f aeca 	bne.w	8008fb8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800922a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800922e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009232:	2b00      	cmp	r3, #0
 8009234:	d049      	beq.n	80092ca <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800923c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009240:	429a      	cmp	r2, r3
 8009242:	d242      	bcs.n	80092ca <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3308      	adds	r3, #8
 800924a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	623b      	str	r3, [r7, #32]
   return(result);
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800925a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3308      	adds	r3, #8
 8009264:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009268:	633a      	str	r2, [r7, #48]	@ 0x30
 800926a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800926e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e3      	bne.n	8009244 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a16      	ldr	r2, [pc, #88]	@ (80092d8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009280:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f043 0320 	orr.w	r3, r3, #32
 8009296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092a4:	61fb      	str	r3, [r7, #28]
 80092a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	69b9      	ldr	r1, [r7, #24]
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	617b      	str	r3, [r7, #20]
   return(result);
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e4      	bne.n	8009282 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092b8:	e007      	b.n	80092ca <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699a      	ldr	r2, [r3, #24]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f042 0208 	orr.w	r2, r2, #8
 80092c8:	619a      	str	r2, [r3, #24]
}
 80092ca:	bf00      	nop
 80092cc:	37b8      	adds	r7, #184	@ 0xb8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	40008000 	.word	0x40008000
 80092d8:	08008a55 	.word	0x08008a55

080092dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009326:	2b01      	cmp	r3, #1
 8009328:	d101      	bne.n	800932e <HAL_UARTEx_DisableFifoMode+0x16>
 800932a:	2302      	movs	r3, #2
 800932c:	e027      	b.n	800937e <HAL_UARTEx_DisableFifoMode+0x66>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2224      	movs	r2, #36	@ 0x24
 800933a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f022 0201 	bic.w	r2, r2, #1
 8009354:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800935c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2220      	movs	r2, #32
 8009370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3714      	adds	r7, #20
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800939a:	2b01      	cmp	r3, #1
 800939c:	d101      	bne.n	80093a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800939e:	2302      	movs	r3, #2
 80093a0:	e02d      	b.n	80093fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2224      	movs	r2, #36	@ 0x24
 80093ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0201 	bic.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f850 	bl	8009484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009416:	2b01      	cmp	r3, #1
 8009418:	d101      	bne.n	800941e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800941a:	2302      	movs	r3, #2
 800941c:	e02d      	b.n	800947a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2224      	movs	r2, #36	@ 0x24
 800942a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f022 0201 	bic.w	r2, r2, #1
 8009444:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f812 	bl	8009484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2220      	movs	r2, #32
 800946c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009490:	2b00      	cmp	r3, #0
 8009492:	d108      	bne.n	80094a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094a4:	e031      	b.n	800950a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094a6:	2308      	movs	r3, #8
 80094a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094aa:	2308      	movs	r3, #8
 80094ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	0e5b      	lsrs	r3, r3, #25
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f003 0307 	and.w	r3, r3, #7
 80094bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	0f5b      	lsrs	r3, r3, #29
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 0307 	and.w	r3, r3, #7
 80094cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	7b3a      	ldrb	r2, [r7, #12]
 80094d2:	4911      	ldr	r1, [pc, #68]	@ (8009518 <UARTEx_SetNbDataToProcess+0x94>)
 80094d4:	5c8a      	ldrb	r2, [r1, r2]
 80094d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094da:	7b3a      	ldrb	r2, [r7, #12]
 80094dc:	490f      	ldr	r1, [pc, #60]	@ (800951c <UARTEx_SetNbDataToProcess+0x98>)
 80094de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	7b7a      	ldrb	r2, [r7, #13]
 80094f0:	4909      	ldr	r1, [pc, #36]	@ (8009518 <UARTEx_SetNbDataToProcess+0x94>)
 80094f2:	5c8a      	ldrb	r2, [r1, r2]
 80094f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094f8:	7b7a      	ldrb	r2, [r7, #13]
 80094fa:	4908      	ldr	r1, [pc, #32]	@ (800951c <UARTEx_SetNbDataToProcess+0x98>)
 80094fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009502:	b29a      	uxth	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800950a:	bf00      	nop
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	0800e3e0 	.word	0x0800e3e0
 800951c:	0800e3e8 	.word	0x0800e3e8

08009520 <__cvt>:
 8009520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009524:	ec57 6b10 	vmov	r6, r7, d0
 8009528:	2f00      	cmp	r7, #0
 800952a:	460c      	mov	r4, r1
 800952c:	4619      	mov	r1, r3
 800952e:	463b      	mov	r3, r7
 8009530:	bfbb      	ittet	lt
 8009532:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009536:	461f      	movlt	r7, r3
 8009538:	2300      	movge	r3, #0
 800953a:	232d      	movlt	r3, #45	@ 0x2d
 800953c:	700b      	strb	r3, [r1, #0]
 800953e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009540:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009544:	4691      	mov	r9, r2
 8009546:	f023 0820 	bic.w	r8, r3, #32
 800954a:	bfbc      	itt	lt
 800954c:	4632      	movlt	r2, r6
 800954e:	4616      	movlt	r6, r2
 8009550:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009554:	d005      	beq.n	8009562 <__cvt+0x42>
 8009556:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800955a:	d100      	bne.n	800955e <__cvt+0x3e>
 800955c:	3401      	adds	r4, #1
 800955e:	2102      	movs	r1, #2
 8009560:	e000      	b.n	8009564 <__cvt+0x44>
 8009562:	2103      	movs	r1, #3
 8009564:	ab03      	add	r3, sp, #12
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	ab02      	add	r3, sp, #8
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	ec47 6b10 	vmov	d0, r6, r7
 8009570:	4653      	mov	r3, sl
 8009572:	4622      	mov	r2, r4
 8009574:	f001 f994 	bl	800a8a0 <_dtoa_r>
 8009578:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800957c:	4605      	mov	r5, r0
 800957e:	d119      	bne.n	80095b4 <__cvt+0x94>
 8009580:	f019 0f01 	tst.w	r9, #1
 8009584:	d00e      	beq.n	80095a4 <__cvt+0x84>
 8009586:	eb00 0904 	add.w	r9, r0, r4
 800958a:	2200      	movs	r2, #0
 800958c:	2300      	movs	r3, #0
 800958e:	4630      	mov	r0, r6
 8009590:	4639      	mov	r1, r7
 8009592:	f7f7 fac1 	bl	8000b18 <__aeabi_dcmpeq>
 8009596:	b108      	cbz	r0, 800959c <__cvt+0x7c>
 8009598:	f8cd 900c 	str.w	r9, [sp, #12]
 800959c:	2230      	movs	r2, #48	@ 0x30
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	454b      	cmp	r3, r9
 80095a2:	d31e      	bcc.n	80095e2 <__cvt+0xc2>
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095a8:	1b5b      	subs	r3, r3, r5
 80095aa:	4628      	mov	r0, r5
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	b004      	add	sp, #16
 80095b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095b8:	eb00 0904 	add.w	r9, r0, r4
 80095bc:	d1e5      	bne.n	800958a <__cvt+0x6a>
 80095be:	7803      	ldrb	r3, [r0, #0]
 80095c0:	2b30      	cmp	r3, #48	@ 0x30
 80095c2:	d10a      	bne.n	80095da <__cvt+0xba>
 80095c4:	2200      	movs	r2, #0
 80095c6:	2300      	movs	r3, #0
 80095c8:	4630      	mov	r0, r6
 80095ca:	4639      	mov	r1, r7
 80095cc:	f7f7 faa4 	bl	8000b18 <__aeabi_dcmpeq>
 80095d0:	b918      	cbnz	r0, 80095da <__cvt+0xba>
 80095d2:	f1c4 0401 	rsb	r4, r4, #1
 80095d6:	f8ca 4000 	str.w	r4, [sl]
 80095da:	f8da 3000 	ldr.w	r3, [sl]
 80095de:	4499      	add	r9, r3
 80095e0:	e7d3      	b.n	800958a <__cvt+0x6a>
 80095e2:	1c59      	adds	r1, r3, #1
 80095e4:	9103      	str	r1, [sp, #12]
 80095e6:	701a      	strb	r2, [r3, #0]
 80095e8:	e7d9      	b.n	800959e <__cvt+0x7e>

080095ea <__exponent>:
 80095ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ec:	2900      	cmp	r1, #0
 80095ee:	bfba      	itte	lt
 80095f0:	4249      	neglt	r1, r1
 80095f2:	232d      	movlt	r3, #45	@ 0x2d
 80095f4:	232b      	movge	r3, #43	@ 0x2b
 80095f6:	2909      	cmp	r1, #9
 80095f8:	7002      	strb	r2, [r0, #0]
 80095fa:	7043      	strb	r3, [r0, #1]
 80095fc:	dd29      	ble.n	8009652 <__exponent+0x68>
 80095fe:	f10d 0307 	add.w	r3, sp, #7
 8009602:	461d      	mov	r5, r3
 8009604:	270a      	movs	r7, #10
 8009606:	461a      	mov	r2, r3
 8009608:	fbb1 f6f7 	udiv	r6, r1, r7
 800960c:	fb07 1416 	mls	r4, r7, r6, r1
 8009610:	3430      	adds	r4, #48	@ 0x30
 8009612:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009616:	460c      	mov	r4, r1
 8009618:	2c63      	cmp	r4, #99	@ 0x63
 800961a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800961e:	4631      	mov	r1, r6
 8009620:	dcf1      	bgt.n	8009606 <__exponent+0x1c>
 8009622:	3130      	adds	r1, #48	@ 0x30
 8009624:	1e94      	subs	r4, r2, #2
 8009626:	f803 1c01 	strb.w	r1, [r3, #-1]
 800962a:	1c41      	adds	r1, r0, #1
 800962c:	4623      	mov	r3, r4
 800962e:	42ab      	cmp	r3, r5
 8009630:	d30a      	bcc.n	8009648 <__exponent+0x5e>
 8009632:	f10d 0309 	add.w	r3, sp, #9
 8009636:	1a9b      	subs	r3, r3, r2
 8009638:	42ac      	cmp	r4, r5
 800963a:	bf88      	it	hi
 800963c:	2300      	movhi	r3, #0
 800963e:	3302      	adds	r3, #2
 8009640:	4403      	add	r3, r0
 8009642:	1a18      	subs	r0, r3, r0
 8009644:	b003      	add	sp, #12
 8009646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009648:	f813 6b01 	ldrb.w	r6, [r3], #1
 800964c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009650:	e7ed      	b.n	800962e <__exponent+0x44>
 8009652:	2330      	movs	r3, #48	@ 0x30
 8009654:	3130      	adds	r1, #48	@ 0x30
 8009656:	7083      	strb	r3, [r0, #2]
 8009658:	70c1      	strb	r1, [r0, #3]
 800965a:	1d03      	adds	r3, r0, #4
 800965c:	e7f1      	b.n	8009642 <__exponent+0x58>
	...

08009660 <_printf_float>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	b08d      	sub	sp, #52	@ 0x34
 8009666:	460c      	mov	r4, r1
 8009668:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800966c:	4616      	mov	r6, r2
 800966e:	461f      	mov	r7, r3
 8009670:	4605      	mov	r5, r0
 8009672:	f001 f80d 	bl	800a690 <_localeconv_r>
 8009676:	6803      	ldr	r3, [r0, #0]
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	4618      	mov	r0, r3
 800967c:	f7f6 fe20 	bl	80002c0 <strlen>
 8009680:	2300      	movs	r3, #0
 8009682:	930a      	str	r3, [sp, #40]	@ 0x28
 8009684:	f8d8 3000 	ldr.w	r3, [r8]
 8009688:	9005      	str	r0, [sp, #20]
 800968a:	3307      	adds	r3, #7
 800968c:	f023 0307 	bic.w	r3, r3, #7
 8009690:	f103 0208 	add.w	r2, r3, #8
 8009694:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009698:	f8d4 b000 	ldr.w	fp, [r4]
 800969c:	f8c8 2000 	str.w	r2, [r8]
 80096a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80096a8:	9307      	str	r3, [sp, #28]
 80096aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80096ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80096b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096b6:	4b9c      	ldr	r3, [pc, #624]	@ (8009928 <_printf_float+0x2c8>)
 80096b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096bc:	f7f7 fa5e 	bl	8000b7c <__aeabi_dcmpun>
 80096c0:	bb70      	cbnz	r0, 8009720 <_printf_float+0xc0>
 80096c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096c6:	4b98      	ldr	r3, [pc, #608]	@ (8009928 <_printf_float+0x2c8>)
 80096c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096cc:	f7f7 fa38 	bl	8000b40 <__aeabi_dcmple>
 80096d0:	bb30      	cbnz	r0, 8009720 <_printf_float+0xc0>
 80096d2:	2200      	movs	r2, #0
 80096d4:	2300      	movs	r3, #0
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f7 fa27 	bl	8000b2c <__aeabi_dcmplt>
 80096de:	b110      	cbz	r0, 80096e6 <_printf_float+0x86>
 80096e0:	232d      	movs	r3, #45	@ 0x2d
 80096e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096e6:	4a91      	ldr	r2, [pc, #580]	@ (800992c <_printf_float+0x2cc>)
 80096e8:	4b91      	ldr	r3, [pc, #580]	@ (8009930 <_printf_float+0x2d0>)
 80096ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80096ee:	bf94      	ite	ls
 80096f0:	4690      	movls	r8, r2
 80096f2:	4698      	movhi	r8, r3
 80096f4:	2303      	movs	r3, #3
 80096f6:	6123      	str	r3, [r4, #16]
 80096f8:	f02b 0304 	bic.w	r3, fp, #4
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	f04f 0900 	mov.w	r9, #0
 8009702:	9700      	str	r7, [sp, #0]
 8009704:	4633      	mov	r3, r6
 8009706:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009708:	4621      	mov	r1, r4
 800970a:	4628      	mov	r0, r5
 800970c:	f000 f9d2 	bl	8009ab4 <_printf_common>
 8009710:	3001      	adds	r0, #1
 8009712:	f040 808d 	bne.w	8009830 <_printf_float+0x1d0>
 8009716:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800971a:	b00d      	add	sp, #52	@ 0x34
 800971c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009720:	4642      	mov	r2, r8
 8009722:	464b      	mov	r3, r9
 8009724:	4640      	mov	r0, r8
 8009726:	4649      	mov	r1, r9
 8009728:	f7f7 fa28 	bl	8000b7c <__aeabi_dcmpun>
 800972c:	b140      	cbz	r0, 8009740 <_printf_float+0xe0>
 800972e:	464b      	mov	r3, r9
 8009730:	2b00      	cmp	r3, #0
 8009732:	bfbc      	itt	lt
 8009734:	232d      	movlt	r3, #45	@ 0x2d
 8009736:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800973a:	4a7e      	ldr	r2, [pc, #504]	@ (8009934 <_printf_float+0x2d4>)
 800973c:	4b7e      	ldr	r3, [pc, #504]	@ (8009938 <_printf_float+0x2d8>)
 800973e:	e7d4      	b.n	80096ea <_printf_float+0x8a>
 8009740:	6863      	ldr	r3, [r4, #4]
 8009742:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009746:	9206      	str	r2, [sp, #24]
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	d13b      	bne.n	80097c4 <_printf_float+0x164>
 800974c:	2306      	movs	r3, #6
 800974e:	6063      	str	r3, [r4, #4]
 8009750:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009754:	2300      	movs	r3, #0
 8009756:	6022      	str	r2, [r4, #0]
 8009758:	9303      	str	r3, [sp, #12]
 800975a:	ab0a      	add	r3, sp, #40	@ 0x28
 800975c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009760:	ab09      	add	r3, sp, #36	@ 0x24
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	6861      	ldr	r1, [r4, #4]
 8009766:	ec49 8b10 	vmov	d0, r8, r9
 800976a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800976e:	4628      	mov	r0, r5
 8009770:	f7ff fed6 	bl	8009520 <__cvt>
 8009774:	9b06      	ldr	r3, [sp, #24]
 8009776:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009778:	2b47      	cmp	r3, #71	@ 0x47
 800977a:	4680      	mov	r8, r0
 800977c:	d129      	bne.n	80097d2 <_printf_float+0x172>
 800977e:	1cc8      	adds	r0, r1, #3
 8009780:	db02      	blt.n	8009788 <_printf_float+0x128>
 8009782:	6863      	ldr	r3, [r4, #4]
 8009784:	4299      	cmp	r1, r3
 8009786:	dd41      	ble.n	800980c <_printf_float+0x1ac>
 8009788:	f1aa 0a02 	sub.w	sl, sl, #2
 800978c:	fa5f fa8a 	uxtb.w	sl, sl
 8009790:	3901      	subs	r1, #1
 8009792:	4652      	mov	r2, sl
 8009794:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009798:	9109      	str	r1, [sp, #36]	@ 0x24
 800979a:	f7ff ff26 	bl	80095ea <__exponent>
 800979e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097a0:	1813      	adds	r3, r2, r0
 80097a2:	2a01      	cmp	r2, #1
 80097a4:	4681      	mov	r9, r0
 80097a6:	6123      	str	r3, [r4, #16]
 80097a8:	dc02      	bgt.n	80097b0 <_printf_float+0x150>
 80097aa:	6822      	ldr	r2, [r4, #0]
 80097ac:	07d2      	lsls	r2, r2, #31
 80097ae:	d501      	bpl.n	80097b4 <_printf_float+0x154>
 80097b0:	3301      	adds	r3, #1
 80097b2:	6123      	str	r3, [r4, #16]
 80097b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0a2      	beq.n	8009702 <_printf_float+0xa2>
 80097bc:	232d      	movs	r3, #45	@ 0x2d
 80097be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097c2:	e79e      	b.n	8009702 <_printf_float+0xa2>
 80097c4:	9a06      	ldr	r2, [sp, #24]
 80097c6:	2a47      	cmp	r2, #71	@ 0x47
 80097c8:	d1c2      	bne.n	8009750 <_printf_float+0xf0>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1c0      	bne.n	8009750 <_printf_float+0xf0>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e7bd      	b.n	800974e <_printf_float+0xee>
 80097d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80097d6:	d9db      	bls.n	8009790 <_printf_float+0x130>
 80097d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80097dc:	d118      	bne.n	8009810 <_printf_float+0x1b0>
 80097de:	2900      	cmp	r1, #0
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	dd0b      	ble.n	80097fc <_printf_float+0x19c>
 80097e4:	6121      	str	r1, [r4, #16]
 80097e6:	b913      	cbnz	r3, 80097ee <_printf_float+0x18e>
 80097e8:	6822      	ldr	r2, [r4, #0]
 80097ea:	07d0      	lsls	r0, r2, #31
 80097ec:	d502      	bpl.n	80097f4 <_printf_float+0x194>
 80097ee:	3301      	adds	r3, #1
 80097f0:	440b      	add	r3, r1
 80097f2:	6123      	str	r3, [r4, #16]
 80097f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80097f6:	f04f 0900 	mov.w	r9, #0
 80097fa:	e7db      	b.n	80097b4 <_printf_float+0x154>
 80097fc:	b913      	cbnz	r3, 8009804 <_printf_float+0x1a4>
 80097fe:	6822      	ldr	r2, [r4, #0]
 8009800:	07d2      	lsls	r2, r2, #31
 8009802:	d501      	bpl.n	8009808 <_printf_float+0x1a8>
 8009804:	3302      	adds	r3, #2
 8009806:	e7f4      	b.n	80097f2 <_printf_float+0x192>
 8009808:	2301      	movs	r3, #1
 800980a:	e7f2      	b.n	80097f2 <_printf_float+0x192>
 800980c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009812:	4299      	cmp	r1, r3
 8009814:	db05      	blt.n	8009822 <_printf_float+0x1c2>
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	6121      	str	r1, [r4, #16]
 800981a:	07d8      	lsls	r0, r3, #31
 800981c:	d5ea      	bpl.n	80097f4 <_printf_float+0x194>
 800981e:	1c4b      	adds	r3, r1, #1
 8009820:	e7e7      	b.n	80097f2 <_printf_float+0x192>
 8009822:	2900      	cmp	r1, #0
 8009824:	bfd4      	ite	le
 8009826:	f1c1 0202 	rsble	r2, r1, #2
 800982a:	2201      	movgt	r2, #1
 800982c:	4413      	add	r3, r2
 800982e:	e7e0      	b.n	80097f2 <_printf_float+0x192>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	055a      	lsls	r2, r3, #21
 8009834:	d407      	bmi.n	8009846 <_printf_float+0x1e6>
 8009836:	6923      	ldr	r3, [r4, #16]
 8009838:	4642      	mov	r2, r8
 800983a:	4631      	mov	r1, r6
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	d12b      	bne.n	800989c <_printf_float+0x23c>
 8009844:	e767      	b.n	8009716 <_printf_float+0xb6>
 8009846:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800984a:	f240 80dd 	bls.w	8009a08 <_printf_float+0x3a8>
 800984e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009852:	2200      	movs	r2, #0
 8009854:	2300      	movs	r3, #0
 8009856:	f7f7 f95f 	bl	8000b18 <__aeabi_dcmpeq>
 800985a:	2800      	cmp	r0, #0
 800985c:	d033      	beq.n	80098c6 <_printf_float+0x266>
 800985e:	4a37      	ldr	r2, [pc, #220]	@ (800993c <_printf_float+0x2dc>)
 8009860:	2301      	movs	r3, #1
 8009862:	4631      	mov	r1, r6
 8009864:	4628      	mov	r0, r5
 8009866:	47b8      	blx	r7
 8009868:	3001      	adds	r0, #1
 800986a:	f43f af54 	beq.w	8009716 <_printf_float+0xb6>
 800986e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009872:	4543      	cmp	r3, r8
 8009874:	db02      	blt.n	800987c <_printf_float+0x21c>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	07d8      	lsls	r0, r3, #31
 800987a:	d50f      	bpl.n	800989c <_printf_float+0x23c>
 800987c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009880:	4631      	mov	r1, r6
 8009882:	4628      	mov	r0, r5
 8009884:	47b8      	blx	r7
 8009886:	3001      	adds	r0, #1
 8009888:	f43f af45 	beq.w	8009716 <_printf_float+0xb6>
 800988c:	f04f 0900 	mov.w	r9, #0
 8009890:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009894:	f104 0a1a 	add.w	sl, r4, #26
 8009898:	45c8      	cmp	r8, r9
 800989a:	dc09      	bgt.n	80098b0 <_printf_float+0x250>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	079b      	lsls	r3, r3, #30
 80098a0:	f100 8103 	bmi.w	8009aaa <_printf_float+0x44a>
 80098a4:	68e0      	ldr	r0, [r4, #12]
 80098a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098a8:	4298      	cmp	r0, r3
 80098aa:	bfb8      	it	lt
 80098ac:	4618      	movlt	r0, r3
 80098ae:	e734      	b.n	800971a <_printf_float+0xba>
 80098b0:	2301      	movs	r3, #1
 80098b2:	4652      	mov	r2, sl
 80098b4:	4631      	mov	r1, r6
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b8      	blx	r7
 80098ba:	3001      	adds	r0, #1
 80098bc:	f43f af2b 	beq.w	8009716 <_printf_float+0xb6>
 80098c0:	f109 0901 	add.w	r9, r9, #1
 80098c4:	e7e8      	b.n	8009898 <_printf_float+0x238>
 80098c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dc39      	bgt.n	8009940 <_printf_float+0x2e0>
 80098cc:	4a1b      	ldr	r2, [pc, #108]	@ (800993c <_printf_float+0x2dc>)
 80098ce:	2301      	movs	r3, #1
 80098d0:	4631      	mov	r1, r6
 80098d2:	4628      	mov	r0, r5
 80098d4:	47b8      	blx	r7
 80098d6:	3001      	adds	r0, #1
 80098d8:	f43f af1d 	beq.w	8009716 <_printf_float+0xb6>
 80098dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80098e0:	ea59 0303 	orrs.w	r3, r9, r3
 80098e4:	d102      	bne.n	80098ec <_printf_float+0x28c>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	07d9      	lsls	r1, r3, #31
 80098ea:	d5d7      	bpl.n	800989c <_printf_float+0x23c>
 80098ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098f0:	4631      	mov	r1, r6
 80098f2:	4628      	mov	r0, r5
 80098f4:	47b8      	blx	r7
 80098f6:	3001      	adds	r0, #1
 80098f8:	f43f af0d 	beq.w	8009716 <_printf_float+0xb6>
 80098fc:	f04f 0a00 	mov.w	sl, #0
 8009900:	f104 0b1a 	add.w	fp, r4, #26
 8009904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009906:	425b      	negs	r3, r3
 8009908:	4553      	cmp	r3, sl
 800990a:	dc01      	bgt.n	8009910 <_printf_float+0x2b0>
 800990c:	464b      	mov	r3, r9
 800990e:	e793      	b.n	8009838 <_printf_float+0x1d8>
 8009910:	2301      	movs	r3, #1
 8009912:	465a      	mov	r2, fp
 8009914:	4631      	mov	r1, r6
 8009916:	4628      	mov	r0, r5
 8009918:	47b8      	blx	r7
 800991a:	3001      	adds	r0, #1
 800991c:	f43f aefb 	beq.w	8009716 <_printf_float+0xb6>
 8009920:	f10a 0a01 	add.w	sl, sl, #1
 8009924:	e7ee      	b.n	8009904 <_printf_float+0x2a4>
 8009926:	bf00      	nop
 8009928:	7fefffff 	.word	0x7fefffff
 800992c:	0800e3f0 	.word	0x0800e3f0
 8009930:	0800e3f4 	.word	0x0800e3f4
 8009934:	0800e3f8 	.word	0x0800e3f8
 8009938:	0800e3fc 	.word	0x0800e3fc
 800993c:	0800e400 	.word	0x0800e400
 8009940:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009942:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009946:	4553      	cmp	r3, sl
 8009948:	bfa8      	it	ge
 800994a:	4653      	movge	r3, sl
 800994c:	2b00      	cmp	r3, #0
 800994e:	4699      	mov	r9, r3
 8009950:	dc36      	bgt.n	80099c0 <_printf_float+0x360>
 8009952:	f04f 0b00 	mov.w	fp, #0
 8009956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800995a:	f104 021a 	add.w	r2, r4, #26
 800995e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009960:	9306      	str	r3, [sp, #24]
 8009962:	eba3 0309 	sub.w	r3, r3, r9
 8009966:	455b      	cmp	r3, fp
 8009968:	dc31      	bgt.n	80099ce <_printf_float+0x36e>
 800996a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800996c:	459a      	cmp	sl, r3
 800996e:	dc3a      	bgt.n	80099e6 <_printf_float+0x386>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	07da      	lsls	r2, r3, #31
 8009974:	d437      	bmi.n	80099e6 <_printf_float+0x386>
 8009976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009978:	ebaa 0903 	sub.w	r9, sl, r3
 800997c:	9b06      	ldr	r3, [sp, #24]
 800997e:	ebaa 0303 	sub.w	r3, sl, r3
 8009982:	4599      	cmp	r9, r3
 8009984:	bfa8      	it	ge
 8009986:	4699      	movge	r9, r3
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	dc33      	bgt.n	80099f6 <_printf_float+0x396>
 800998e:	f04f 0800 	mov.w	r8, #0
 8009992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009996:	f104 0b1a 	add.w	fp, r4, #26
 800999a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800999c:	ebaa 0303 	sub.w	r3, sl, r3
 80099a0:	eba3 0309 	sub.w	r3, r3, r9
 80099a4:	4543      	cmp	r3, r8
 80099a6:	f77f af79 	ble.w	800989c <_printf_float+0x23c>
 80099aa:	2301      	movs	r3, #1
 80099ac:	465a      	mov	r2, fp
 80099ae:	4631      	mov	r1, r6
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b8      	blx	r7
 80099b4:	3001      	adds	r0, #1
 80099b6:	f43f aeae 	beq.w	8009716 <_printf_float+0xb6>
 80099ba:	f108 0801 	add.w	r8, r8, #1
 80099be:	e7ec      	b.n	800999a <_printf_float+0x33a>
 80099c0:	4642      	mov	r2, r8
 80099c2:	4631      	mov	r1, r6
 80099c4:	4628      	mov	r0, r5
 80099c6:	47b8      	blx	r7
 80099c8:	3001      	adds	r0, #1
 80099ca:	d1c2      	bne.n	8009952 <_printf_float+0x2f2>
 80099cc:	e6a3      	b.n	8009716 <_printf_float+0xb6>
 80099ce:	2301      	movs	r3, #1
 80099d0:	4631      	mov	r1, r6
 80099d2:	4628      	mov	r0, r5
 80099d4:	9206      	str	r2, [sp, #24]
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f ae9c 	beq.w	8009716 <_printf_float+0xb6>
 80099de:	9a06      	ldr	r2, [sp, #24]
 80099e0:	f10b 0b01 	add.w	fp, fp, #1
 80099e4:	e7bb      	b.n	800995e <_printf_float+0x2fe>
 80099e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099ea:	4631      	mov	r1, r6
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b8      	blx	r7
 80099f0:	3001      	adds	r0, #1
 80099f2:	d1c0      	bne.n	8009976 <_printf_float+0x316>
 80099f4:	e68f      	b.n	8009716 <_printf_float+0xb6>
 80099f6:	9a06      	ldr	r2, [sp, #24]
 80099f8:	464b      	mov	r3, r9
 80099fa:	4442      	add	r2, r8
 80099fc:	4631      	mov	r1, r6
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b8      	blx	r7
 8009a02:	3001      	adds	r0, #1
 8009a04:	d1c3      	bne.n	800998e <_printf_float+0x32e>
 8009a06:	e686      	b.n	8009716 <_printf_float+0xb6>
 8009a08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a0c:	f1ba 0f01 	cmp.w	sl, #1
 8009a10:	dc01      	bgt.n	8009a16 <_printf_float+0x3b6>
 8009a12:	07db      	lsls	r3, r3, #31
 8009a14:	d536      	bpl.n	8009a84 <_printf_float+0x424>
 8009a16:	2301      	movs	r3, #1
 8009a18:	4642      	mov	r2, r8
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b8      	blx	r7
 8009a20:	3001      	adds	r0, #1
 8009a22:	f43f ae78 	beq.w	8009716 <_printf_float+0xb6>
 8009a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	f43f ae70 	beq.w	8009716 <_printf_float+0xb6>
 8009a36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009a42:	f7f7 f869 	bl	8000b18 <__aeabi_dcmpeq>
 8009a46:	b9c0      	cbnz	r0, 8009a7a <_printf_float+0x41a>
 8009a48:	4653      	mov	r3, sl
 8009a4a:	f108 0201 	add.w	r2, r8, #1
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4628      	mov	r0, r5
 8009a52:	47b8      	blx	r7
 8009a54:	3001      	adds	r0, #1
 8009a56:	d10c      	bne.n	8009a72 <_printf_float+0x412>
 8009a58:	e65d      	b.n	8009716 <_printf_float+0xb6>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	465a      	mov	r2, fp
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b8      	blx	r7
 8009a64:	3001      	adds	r0, #1
 8009a66:	f43f ae56 	beq.w	8009716 <_printf_float+0xb6>
 8009a6a:	f108 0801 	add.w	r8, r8, #1
 8009a6e:	45d0      	cmp	r8, sl
 8009a70:	dbf3      	blt.n	8009a5a <_printf_float+0x3fa>
 8009a72:	464b      	mov	r3, r9
 8009a74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009a78:	e6df      	b.n	800983a <_printf_float+0x1da>
 8009a7a:	f04f 0800 	mov.w	r8, #0
 8009a7e:	f104 0b1a 	add.w	fp, r4, #26
 8009a82:	e7f4      	b.n	8009a6e <_printf_float+0x40e>
 8009a84:	2301      	movs	r3, #1
 8009a86:	4642      	mov	r2, r8
 8009a88:	e7e1      	b.n	8009a4e <_printf_float+0x3ee>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	464a      	mov	r2, r9
 8009a8e:	4631      	mov	r1, r6
 8009a90:	4628      	mov	r0, r5
 8009a92:	47b8      	blx	r7
 8009a94:	3001      	adds	r0, #1
 8009a96:	f43f ae3e 	beq.w	8009716 <_printf_float+0xb6>
 8009a9a:	f108 0801 	add.w	r8, r8, #1
 8009a9e:	68e3      	ldr	r3, [r4, #12]
 8009aa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009aa2:	1a5b      	subs	r3, r3, r1
 8009aa4:	4543      	cmp	r3, r8
 8009aa6:	dcf0      	bgt.n	8009a8a <_printf_float+0x42a>
 8009aa8:	e6fc      	b.n	80098a4 <_printf_float+0x244>
 8009aaa:	f04f 0800 	mov.w	r8, #0
 8009aae:	f104 0919 	add.w	r9, r4, #25
 8009ab2:	e7f4      	b.n	8009a9e <_printf_float+0x43e>

08009ab4 <_printf_common>:
 8009ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab8:	4616      	mov	r6, r2
 8009aba:	4698      	mov	r8, r3
 8009abc:	688a      	ldr	r2, [r1, #8]
 8009abe:	690b      	ldr	r3, [r1, #16]
 8009ac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	bfb8      	it	lt
 8009ac8:	4613      	movlt	r3, r2
 8009aca:	6033      	str	r3, [r6, #0]
 8009acc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	b10a      	cbz	r2, 8009ada <_printf_common+0x26>
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	6033      	str	r3, [r6, #0]
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	0699      	lsls	r1, r3, #26
 8009ade:	bf42      	ittt	mi
 8009ae0:	6833      	ldrmi	r3, [r6, #0]
 8009ae2:	3302      	addmi	r3, #2
 8009ae4:	6033      	strmi	r3, [r6, #0]
 8009ae6:	6825      	ldr	r5, [r4, #0]
 8009ae8:	f015 0506 	ands.w	r5, r5, #6
 8009aec:	d106      	bne.n	8009afc <_printf_common+0x48>
 8009aee:	f104 0a19 	add.w	sl, r4, #25
 8009af2:	68e3      	ldr	r3, [r4, #12]
 8009af4:	6832      	ldr	r2, [r6, #0]
 8009af6:	1a9b      	subs	r3, r3, r2
 8009af8:	42ab      	cmp	r3, r5
 8009afa:	dc26      	bgt.n	8009b4a <_printf_common+0x96>
 8009afc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b00:	6822      	ldr	r2, [r4, #0]
 8009b02:	3b00      	subs	r3, #0
 8009b04:	bf18      	it	ne
 8009b06:	2301      	movne	r3, #1
 8009b08:	0692      	lsls	r2, r2, #26
 8009b0a:	d42b      	bmi.n	8009b64 <_printf_common+0xb0>
 8009b0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b10:	4641      	mov	r1, r8
 8009b12:	4638      	mov	r0, r7
 8009b14:	47c8      	blx	r9
 8009b16:	3001      	adds	r0, #1
 8009b18:	d01e      	beq.n	8009b58 <_printf_common+0xa4>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	6922      	ldr	r2, [r4, #16]
 8009b1e:	f003 0306 	and.w	r3, r3, #6
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	bf02      	ittt	eq
 8009b26:	68e5      	ldreq	r5, [r4, #12]
 8009b28:	6833      	ldreq	r3, [r6, #0]
 8009b2a:	1aed      	subeq	r5, r5, r3
 8009b2c:	68a3      	ldr	r3, [r4, #8]
 8009b2e:	bf0c      	ite	eq
 8009b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b34:	2500      	movne	r5, #0
 8009b36:	4293      	cmp	r3, r2
 8009b38:	bfc4      	itt	gt
 8009b3a:	1a9b      	subgt	r3, r3, r2
 8009b3c:	18ed      	addgt	r5, r5, r3
 8009b3e:	2600      	movs	r6, #0
 8009b40:	341a      	adds	r4, #26
 8009b42:	42b5      	cmp	r5, r6
 8009b44:	d11a      	bne.n	8009b7c <_printf_common+0xc8>
 8009b46:	2000      	movs	r0, #0
 8009b48:	e008      	b.n	8009b5c <_printf_common+0xa8>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	4652      	mov	r2, sl
 8009b4e:	4641      	mov	r1, r8
 8009b50:	4638      	mov	r0, r7
 8009b52:	47c8      	blx	r9
 8009b54:	3001      	adds	r0, #1
 8009b56:	d103      	bne.n	8009b60 <_printf_common+0xac>
 8009b58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b60:	3501      	adds	r5, #1
 8009b62:	e7c6      	b.n	8009af2 <_printf_common+0x3e>
 8009b64:	18e1      	adds	r1, r4, r3
 8009b66:	1c5a      	adds	r2, r3, #1
 8009b68:	2030      	movs	r0, #48	@ 0x30
 8009b6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b6e:	4422      	add	r2, r4
 8009b70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b78:	3302      	adds	r3, #2
 8009b7a:	e7c7      	b.n	8009b0c <_printf_common+0x58>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4622      	mov	r2, r4
 8009b80:	4641      	mov	r1, r8
 8009b82:	4638      	mov	r0, r7
 8009b84:	47c8      	blx	r9
 8009b86:	3001      	adds	r0, #1
 8009b88:	d0e6      	beq.n	8009b58 <_printf_common+0xa4>
 8009b8a:	3601      	adds	r6, #1
 8009b8c:	e7d9      	b.n	8009b42 <_printf_common+0x8e>
	...

08009b90 <_printf_i>:
 8009b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b94:	7e0f      	ldrb	r7, [r1, #24]
 8009b96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b98:	2f78      	cmp	r7, #120	@ 0x78
 8009b9a:	4691      	mov	r9, r2
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	469a      	mov	sl, r3
 8009ba2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ba6:	d807      	bhi.n	8009bb8 <_printf_i+0x28>
 8009ba8:	2f62      	cmp	r7, #98	@ 0x62
 8009baa:	d80a      	bhi.n	8009bc2 <_printf_i+0x32>
 8009bac:	2f00      	cmp	r7, #0
 8009bae:	f000 80d2 	beq.w	8009d56 <_printf_i+0x1c6>
 8009bb2:	2f58      	cmp	r7, #88	@ 0x58
 8009bb4:	f000 80b9 	beq.w	8009d2a <_printf_i+0x19a>
 8009bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009bc0:	e03a      	b.n	8009c38 <_printf_i+0xa8>
 8009bc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bc6:	2b15      	cmp	r3, #21
 8009bc8:	d8f6      	bhi.n	8009bb8 <_printf_i+0x28>
 8009bca:	a101      	add	r1, pc, #4	@ (adr r1, 8009bd0 <_printf_i+0x40>)
 8009bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bd0:	08009c29 	.word	0x08009c29
 8009bd4:	08009c3d 	.word	0x08009c3d
 8009bd8:	08009bb9 	.word	0x08009bb9
 8009bdc:	08009bb9 	.word	0x08009bb9
 8009be0:	08009bb9 	.word	0x08009bb9
 8009be4:	08009bb9 	.word	0x08009bb9
 8009be8:	08009c3d 	.word	0x08009c3d
 8009bec:	08009bb9 	.word	0x08009bb9
 8009bf0:	08009bb9 	.word	0x08009bb9
 8009bf4:	08009bb9 	.word	0x08009bb9
 8009bf8:	08009bb9 	.word	0x08009bb9
 8009bfc:	08009d3d 	.word	0x08009d3d
 8009c00:	08009c67 	.word	0x08009c67
 8009c04:	08009cf7 	.word	0x08009cf7
 8009c08:	08009bb9 	.word	0x08009bb9
 8009c0c:	08009bb9 	.word	0x08009bb9
 8009c10:	08009d5f 	.word	0x08009d5f
 8009c14:	08009bb9 	.word	0x08009bb9
 8009c18:	08009c67 	.word	0x08009c67
 8009c1c:	08009bb9 	.word	0x08009bb9
 8009c20:	08009bb9 	.word	0x08009bb9
 8009c24:	08009cff 	.word	0x08009cff
 8009c28:	6833      	ldr	r3, [r6, #0]
 8009c2a:	1d1a      	adds	r2, r3, #4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6032      	str	r2, [r6, #0]
 8009c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e09d      	b.n	8009d78 <_printf_i+0x1e8>
 8009c3c:	6833      	ldr	r3, [r6, #0]
 8009c3e:	6820      	ldr	r0, [r4, #0]
 8009c40:	1d19      	adds	r1, r3, #4
 8009c42:	6031      	str	r1, [r6, #0]
 8009c44:	0606      	lsls	r6, r0, #24
 8009c46:	d501      	bpl.n	8009c4c <_printf_i+0xbc>
 8009c48:	681d      	ldr	r5, [r3, #0]
 8009c4a:	e003      	b.n	8009c54 <_printf_i+0xc4>
 8009c4c:	0645      	lsls	r5, r0, #25
 8009c4e:	d5fb      	bpl.n	8009c48 <_printf_i+0xb8>
 8009c50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c54:	2d00      	cmp	r5, #0
 8009c56:	da03      	bge.n	8009c60 <_printf_i+0xd0>
 8009c58:	232d      	movs	r3, #45	@ 0x2d
 8009c5a:	426d      	negs	r5, r5
 8009c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c60:	4859      	ldr	r0, [pc, #356]	@ (8009dc8 <_printf_i+0x238>)
 8009c62:	230a      	movs	r3, #10
 8009c64:	e011      	b.n	8009c8a <_printf_i+0xfa>
 8009c66:	6821      	ldr	r1, [r4, #0]
 8009c68:	6833      	ldr	r3, [r6, #0]
 8009c6a:	0608      	lsls	r0, r1, #24
 8009c6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c70:	d402      	bmi.n	8009c78 <_printf_i+0xe8>
 8009c72:	0649      	lsls	r1, r1, #25
 8009c74:	bf48      	it	mi
 8009c76:	b2ad      	uxthmi	r5, r5
 8009c78:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c7a:	4853      	ldr	r0, [pc, #332]	@ (8009dc8 <_printf_i+0x238>)
 8009c7c:	6033      	str	r3, [r6, #0]
 8009c7e:	bf14      	ite	ne
 8009c80:	230a      	movne	r3, #10
 8009c82:	2308      	moveq	r3, #8
 8009c84:	2100      	movs	r1, #0
 8009c86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c8a:	6866      	ldr	r6, [r4, #4]
 8009c8c:	60a6      	str	r6, [r4, #8]
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	bfa2      	ittt	ge
 8009c92:	6821      	ldrge	r1, [r4, #0]
 8009c94:	f021 0104 	bicge.w	r1, r1, #4
 8009c98:	6021      	strge	r1, [r4, #0]
 8009c9a:	b90d      	cbnz	r5, 8009ca0 <_printf_i+0x110>
 8009c9c:	2e00      	cmp	r6, #0
 8009c9e:	d04b      	beq.n	8009d38 <_printf_i+0x1a8>
 8009ca0:	4616      	mov	r6, r2
 8009ca2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ca6:	fb03 5711 	mls	r7, r3, r1, r5
 8009caa:	5dc7      	ldrb	r7, [r0, r7]
 8009cac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cb0:	462f      	mov	r7, r5
 8009cb2:	42bb      	cmp	r3, r7
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	d9f4      	bls.n	8009ca2 <_printf_i+0x112>
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d10b      	bne.n	8009cd4 <_printf_i+0x144>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	07df      	lsls	r7, r3, #31
 8009cc0:	d508      	bpl.n	8009cd4 <_printf_i+0x144>
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	6861      	ldr	r1, [r4, #4]
 8009cc6:	4299      	cmp	r1, r3
 8009cc8:	bfde      	ittt	le
 8009cca:	2330      	movle	r3, #48	@ 0x30
 8009ccc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cd0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009cd4:	1b92      	subs	r2, r2, r6
 8009cd6:	6122      	str	r2, [r4, #16]
 8009cd8:	f8cd a000 	str.w	sl, [sp]
 8009cdc:	464b      	mov	r3, r9
 8009cde:	aa03      	add	r2, sp, #12
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	f7ff fee6 	bl	8009ab4 <_printf_common>
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d14a      	bne.n	8009d82 <_printf_i+0x1f2>
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cf0:	b004      	add	sp, #16
 8009cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	f043 0320 	orr.w	r3, r3, #32
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	4833      	ldr	r0, [pc, #204]	@ (8009dcc <_printf_i+0x23c>)
 8009d00:	2778      	movs	r7, #120	@ 0x78
 8009d02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	6831      	ldr	r1, [r6, #0]
 8009d0a:	061f      	lsls	r7, r3, #24
 8009d0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d10:	d402      	bmi.n	8009d18 <_printf_i+0x188>
 8009d12:	065f      	lsls	r7, r3, #25
 8009d14:	bf48      	it	mi
 8009d16:	b2ad      	uxthmi	r5, r5
 8009d18:	6031      	str	r1, [r6, #0]
 8009d1a:	07d9      	lsls	r1, r3, #31
 8009d1c:	bf44      	itt	mi
 8009d1e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d22:	6023      	strmi	r3, [r4, #0]
 8009d24:	b11d      	cbz	r5, 8009d2e <_printf_i+0x19e>
 8009d26:	2310      	movs	r3, #16
 8009d28:	e7ac      	b.n	8009c84 <_printf_i+0xf4>
 8009d2a:	4827      	ldr	r0, [pc, #156]	@ (8009dc8 <_printf_i+0x238>)
 8009d2c:	e7e9      	b.n	8009d02 <_printf_i+0x172>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	f023 0320 	bic.w	r3, r3, #32
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	e7f6      	b.n	8009d26 <_printf_i+0x196>
 8009d38:	4616      	mov	r6, r2
 8009d3a:	e7bd      	b.n	8009cb8 <_printf_i+0x128>
 8009d3c:	6833      	ldr	r3, [r6, #0]
 8009d3e:	6825      	ldr	r5, [r4, #0]
 8009d40:	6961      	ldr	r1, [r4, #20]
 8009d42:	1d18      	adds	r0, r3, #4
 8009d44:	6030      	str	r0, [r6, #0]
 8009d46:	062e      	lsls	r6, r5, #24
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	d501      	bpl.n	8009d50 <_printf_i+0x1c0>
 8009d4c:	6019      	str	r1, [r3, #0]
 8009d4e:	e002      	b.n	8009d56 <_printf_i+0x1c6>
 8009d50:	0668      	lsls	r0, r5, #25
 8009d52:	d5fb      	bpl.n	8009d4c <_printf_i+0x1bc>
 8009d54:	8019      	strh	r1, [r3, #0]
 8009d56:	2300      	movs	r3, #0
 8009d58:	6123      	str	r3, [r4, #16]
 8009d5a:	4616      	mov	r6, r2
 8009d5c:	e7bc      	b.n	8009cd8 <_printf_i+0x148>
 8009d5e:	6833      	ldr	r3, [r6, #0]
 8009d60:	1d1a      	adds	r2, r3, #4
 8009d62:	6032      	str	r2, [r6, #0]
 8009d64:	681e      	ldr	r6, [r3, #0]
 8009d66:	6862      	ldr	r2, [r4, #4]
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7f6 fa58 	bl	8000220 <memchr>
 8009d70:	b108      	cbz	r0, 8009d76 <_printf_i+0x1e6>
 8009d72:	1b80      	subs	r0, r0, r6
 8009d74:	6060      	str	r0, [r4, #4]
 8009d76:	6863      	ldr	r3, [r4, #4]
 8009d78:	6123      	str	r3, [r4, #16]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d80:	e7aa      	b.n	8009cd8 <_printf_i+0x148>
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	4632      	mov	r2, r6
 8009d86:	4649      	mov	r1, r9
 8009d88:	4640      	mov	r0, r8
 8009d8a:	47d0      	blx	sl
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d0ad      	beq.n	8009cec <_printf_i+0x15c>
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	079b      	lsls	r3, r3, #30
 8009d94:	d413      	bmi.n	8009dbe <_printf_i+0x22e>
 8009d96:	68e0      	ldr	r0, [r4, #12]
 8009d98:	9b03      	ldr	r3, [sp, #12]
 8009d9a:	4298      	cmp	r0, r3
 8009d9c:	bfb8      	it	lt
 8009d9e:	4618      	movlt	r0, r3
 8009da0:	e7a6      	b.n	8009cf0 <_printf_i+0x160>
 8009da2:	2301      	movs	r3, #1
 8009da4:	4632      	mov	r2, r6
 8009da6:	4649      	mov	r1, r9
 8009da8:	4640      	mov	r0, r8
 8009daa:	47d0      	blx	sl
 8009dac:	3001      	adds	r0, #1
 8009dae:	d09d      	beq.n	8009cec <_printf_i+0x15c>
 8009db0:	3501      	adds	r5, #1
 8009db2:	68e3      	ldr	r3, [r4, #12]
 8009db4:	9903      	ldr	r1, [sp, #12]
 8009db6:	1a5b      	subs	r3, r3, r1
 8009db8:	42ab      	cmp	r3, r5
 8009dba:	dcf2      	bgt.n	8009da2 <_printf_i+0x212>
 8009dbc:	e7eb      	b.n	8009d96 <_printf_i+0x206>
 8009dbe:	2500      	movs	r5, #0
 8009dc0:	f104 0619 	add.w	r6, r4, #25
 8009dc4:	e7f5      	b.n	8009db2 <_printf_i+0x222>
 8009dc6:	bf00      	nop
 8009dc8:	0800e402 	.word	0x0800e402
 8009dcc:	0800e413 	.word	0x0800e413

08009dd0 <_scanf_float>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	b087      	sub	sp, #28
 8009dd6:	4617      	mov	r7, r2
 8009dd8:	9303      	str	r3, [sp, #12]
 8009dda:	688b      	ldr	r3, [r1, #8]
 8009ddc:	1e5a      	subs	r2, r3, #1
 8009dde:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009de2:	bf81      	itttt	hi
 8009de4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009de8:	eb03 0b05 	addhi.w	fp, r3, r5
 8009dec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009df0:	608b      	strhi	r3, [r1, #8]
 8009df2:	680b      	ldr	r3, [r1, #0]
 8009df4:	460a      	mov	r2, r1
 8009df6:	f04f 0500 	mov.w	r5, #0
 8009dfa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009dfe:	f842 3b1c 	str.w	r3, [r2], #28
 8009e02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009e06:	4680      	mov	r8, r0
 8009e08:	460c      	mov	r4, r1
 8009e0a:	bf98      	it	ls
 8009e0c:	f04f 0b00 	movls.w	fp, #0
 8009e10:	9201      	str	r2, [sp, #4]
 8009e12:	4616      	mov	r6, r2
 8009e14:	46aa      	mov	sl, r5
 8009e16:	46a9      	mov	r9, r5
 8009e18:	9502      	str	r5, [sp, #8]
 8009e1a:	68a2      	ldr	r2, [r4, #8]
 8009e1c:	b152      	cbz	r2, 8009e34 <_scanf_float+0x64>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b4e      	cmp	r3, #78	@ 0x4e
 8009e24:	d864      	bhi.n	8009ef0 <_scanf_float+0x120>
 8009e26:	2b40      	cmp	r3, #64	@ 0x40
 8009e28:	d83c      	bhi.n	8009ea4 <_scanf_float+0xd4>
 8009e2a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009e2e:	b2c8      	uxtb	r0, r1
 8009e30:	280e      	cmp	r0, #14
 8009e32:	d93a      	bls.n	8009eaa <_scanf_float+0xda>
 8009e34:	f1b9 0f00 	cmp.w	r9, #0
 8009e38:	d003      	beq.n	8009e42 <_scanf_float+0x72>
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009e46:	f1ba 0f01 	cmp.w	sl, #1
 8009e4a:	f200 8117 	bhi.w	800a07c <_scanf_float+0x2ac>
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	429e      	cmp	r6, r3
 8009e52:	f200 8108 	bhi.w	800a066 <_scanf_float+0x296>
 8009e56:	2001      	movs	r0, #1
 8009e58:	b007      	add	sp, #28
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009e62:	2a0d      	cmp	r2, #13
 8009e64:	d8e6      	bhi.n	8009e34 <_scanf_float+0x64>
 8009e66:	a101      	add	r1, pc, #4	@ (adr r1, 8009e6c <_scanf_float+0x9c>)
 8009e68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e6c:	08009fb3 	.word	0x08009fb3
 8009e70:	08009e35 	.word	0x08009e35
 8009e74:	08009e35 	.word	0x08009e35
 8009e78:	08009e35 	.word	0x08009e35
 8009e7c:	0800a013 	.word	0x0800a013
 8009e80:	08009feb 	.word	0x08009feb
 8009e84:	08009e35 	.word	0x08009e35
 8009e88:	08009e35 	.word	0x08009e35
 8009e8c:	08009fc1 	.word	0x08009fc1
 8009e90:	08009e35 	.word	0x08009e35
 8009e94:	08009e35 	.word	0x08009e35
 8009e98:	08009e35 	.word	0x08009e35
 8009e9c:	08009e35 	.word	0x08009e35
 8009ea0:	08009f79 	.word	0x08009f79
 8009ea4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009ea8:	e7db      	b.n	8009e62 <_scanf_float+0x92>
 8009eaa:	290e      	cmp	r1, #14
 8009eac:	d8c2      	bhi.n	8009e34 <_scanf_float+0x64>
 8009eae:	a001      	add	r0, pc, #4	@ (adr r0, 8009eb4 <_scanf_float+0xe4>)
 8009eb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009eb4:	08009f69 	.word	0x08009f69
 8009eb8:	08009e35 	.word	0x08009e35
 8009ebc:	08009f69 	.word	0x08009f69
 8009ec0:	08009fff 	.word	0x08009fff
 8009ec4:	08009e35 	.word	0x08009e35
 8009ec8:	08009f11 	.word	0x08009f11
 8009ecc:	08009f4f 	.word	0x08009f4f
 8009ed0:	08009f4f 	.word	0x08009f4f
 8009ed4:	08009f4f 	.word	0x08009f4f
 8009ed8:	08009f4f 	.word	0x08009f4f
 8009edc:	08009f4f 	.word	0x08009f4f
 8009ee0:	08009f4f 	.word	0x08009f4f
 8009ee4:	08009f4f 	.word	0x08009f4f
 8009ee8:	08009f4f 	.word	0x08009f4f
 8009eec:	08009f4f 	.word	0x08009f4f
 8009ef0:	2b6e      	cmp	r3, #110	@ 0x6e
 8009ef2:	d809      	bhi.n	8009f08 <_scanf_float+0x138>
 8009ef4:	2b60      	cmp	r3, #96	@ 0x60
 8009ef6:	d8b2      	bhi.n	8009e5e <_scanf_float+0x8e>
 8009ef8:	2b54      	cmp	r3, #84	@ 0x54
 8009efa:	d07b      	beq.n	8009ff4 <_scanf_float+0x224>
 8009efc:	2b59      	cmp	r3, #89	@ 0x59
 8009efe:	d199      	bne.n	8009e34 <_scanf_float+0x64>
 8009f00:	2d07      	cmp	r5, #7
 8009f02:	d197      	bne.n	8009e34 <_scanf_float+0x64>
 8009f04:	2508      	movs	r5, #8
 8009f06:	e02c      	b.n	8009f62 <_scanf_float+0x192>
 8009f08:	2b74      	cmp	r3, #116	@ 0x74
 8009f0a:	d073      	beq.n	8009ff4 <_scanf_float+0x224>
 8009f0c:	2b79      	cmp	r3, #121	@ 0x79
 8009f0e:	e7f6      	b.n	8009efe <_scanf_float+0x12e>
 8009f10:	6821      	ldr	r1, [r4, #0]
 8009f12:	05c8      	lsls	r0, r1, #23
 8009f14:	d51b      	bpl.n	8009f4e <_scanf_float+0x17e>
 8009f16:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009f1a:	6021      	str	r1, [r4, #0]
 8009f1c:	f109 0901 	add.w	r9, r9, #1
 8009f20:	f1bb 0f00 	cmp.w	fp, #0
 8009f24:	d003      	beq.n	8009f2e <_scanf_float+0x15e>
 8009f26:	3201      	adds	r2, #1
 8009f28:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009f2c:	60a2      	str	r2, [r4, #8]
 8009f2e:	68a3      	ldr	r3, [r4, #8]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	60a3      	str	r3, [r4, #8]
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	3301      	adds	r3, #1
 8009f38:	6123      	str	r3, [r4, #16]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	607b      	str	r3, [r7, #4]
 8009f42:	f340 8087 	ble.w	800a054 <_scanf_float+0x284>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	e765      	b.n	8009e1a <_scanf_float+0x4a>
 8009f4e:	eb1a 0105 	adds.w	r1, sl, r5
 8009f52:	f47f af6f 	bne.w	8009e34 <_scanf_float+0x64>
 8009f56:	6822      	ldr	r2, [r4, #0]
 8009f58:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009f5c:	6022      	str	r2, [r4, #0]
 8009f5e:	460d      	mov	r5, r1
 8009f60:	468a      	mov	sl, r1
 8009f62:	f806 3b01 	strb.w	r3, [r6], #1
 8009f66:	e7e2      	b.n	8009f2e <_scanf_float+0x15e>
 8009f68:	6822      	ldr	r2, [r4, #0]
 8009f6a:	0610      	lsls	r0, r2, #24
 8009f6c:	f57f af62 	bpl.w	8009e34 <_scanf_float+0x64>
 8009f70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f74:	6022      	str	r2, [r4, #0]
 8009f76:	e7f4      	b.n	8009f62 <_scanf_float+0x192>
 8009f78:	f1ba 0f00 	cmp.w	sl, #0
 8009f7c:	d10e      	bne.n	8009f9c <_scanf_float+0x1cc>
 8009f7e:	f1b9 0f00 	cmp.w	r9, #0
 8009f82:	d10e      	bne.n	8009fa2 <_scanf_float+0x1d2>
 8009f84:	6822      	ldr	r2, [r4, #0]
 8009f86:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009f8a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009f8e:	d108      	bne.n	8009fa2 <_scanf_float+0x1d2>
 8009f90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009f94:	6022      	str	r2, [r4, #0]
 8009f96:	f04f 0a01 	mov.w	sl, #1
 8009f9a:	e7e2      	b.n	8009f62 <_scanf_float+0x192>
 8009f9c:	f1ba 0f02 	cmp.w	sl, #2
 8009fa0:	d055      	beq.n	800a04e <_scanf_float+0x27e>
 8009fa2:	2d01      	cmp	r5, #1
 8009fa4:	d002      	beq.n	8009fac <_scanf_float+0x1dc>
 8009fa6:	2d04      	cmp	r5, #4
 8009fa8:	f47f af44 	bne.w	8009e34 <_scanf_float+0x64>
 8009fac:	3501      	adds	r5, #1
 8009fae:	b2ed      	uxtb	r5, r5
 8009fb0:	e7d7      	b.n	8009f62 <_scanf_float+0x192>
 8009fb2:	f1ba 0f01 	cmp.w	sl, #1
 8009fb6:	f47f af3d 	bne.w	8009e34 <_scanf_float+0x64>
 8009fba:	f04f 0a02 	mov.w	sl, #2
 8009fbe:	e7d0      	b.n	8009f62 <_scanf_float+0x192>
 8009fc0:	b97d      	cbnz	r5, 8009fe2 <_scanf_float+0x212>
 8009fc2:	f1b9 0f00 	cmp.w	r9, #0
 8009fc6:	f47f af38 	bne.w	8009e3a <_scanf_float+0x6a>
 8009fca:	6822      	ldr	r2, [r4, #0]
 8009fcc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009fd0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009fd4:	f040 8108 	bne.w	800a1e8 <_scanf_float+0x418>
 8009fd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009fdc:	6022      	str	r2, [r4, #0]
 8009fde:	2501      	movs	r5, #1
 8009fe0:	e7bf      	b.n	8009f62 <_scanf_float+0x192>
 8009fe2:	2d03      	cmp	r5, #3
 8009fe4:	d0e2      	beq.n	8009fac <_scanf_float+0x1dc>
 8009fe6:	2d05      	cmp	r5, #5
 8009fe8:	e7de      	b.n	8009fa8 <_scanf_float+0x1d8>
 8009fea:	2d02      	cmp	r5, #2
 8009fec:	f47f af22 	bne.w	8009e34 <_scanf_float+0x64>
 8009ff0:	2503      	movs	r5, #3
 8009ff2:	e7b6      	b.n	8009f62 <_scanf_float+0x192>
 8009ff4:	2d06      	cmp	r5, #6
 8009ff6:	f47f af1d 	bne.w	8009e34 <_scanf_float+0x64>
 8009ffa:	2507      	movs	r5, #7
 8009ffc:	e7b1      	b.n	8009f62 <_scanf_float+0x192>
 8009ffe:	6822      	ldr	r2, [r4, #0]
 800a000:	0591      	lsls	r1, r2, #22
 800a002:	f57f af17 	bpl.w	8009e34 <_scanf_float+0x64>
 800a006:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a00a:	6022      	str	r2, [r4, #0]
 800a00c:	f8cd 9008 	str.w	r9, [sp, #8]
 800a010:	e7a7      	b.n	8009f62 <_scanf_float+0x192>
 800a012:	6822      	ldr	r2, [r4, #0]
 800a014:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a018:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a01c:	d006      	beq.n	800a02c <_scanf_float+0x25c>
 800a01e:	0550      	lsls	r0, r2, #21
 800a020:	f57f af08 	bpl.w	8009e34 <_scanf_float+0x64>
 800a024:	f1b9 0f00 	cmp.w	r9, #0
 800a028:	f000 80de 	beq.w	800a1e8 <_scanf_float+0x418>
 800a02c:	0591      	lsls	r1, r2, #22
 800a02e:	bf58      	it	pl
 800a030:	9902      	ldrpl	r1, [sp, #8]
 800a032:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a036:	bf58      	it	pl
 800a038:	eba9 0101 	subpl.w	r1, r9, r1
 800a03c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a040:	bf58      	it	pl
 800a042:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a046:	6022      	str	r2, [r4, #0]
 800a048:	f04f 0900 	mov.w	r9, #0
 800a04c:	e789      	b.n	8009f62 <_scanf_float+0x192>
 800a04e:	f04f 0a03 	mov.w	sl, #3
 800a052:	e786      	b.n	8009f62 <_scanf_float+0x192>
 800a054:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a058:	4639      	mov	r1, r7
 800a05a:	4640      	mov	r0, r8
 800a05c:	4798      	blx	r3
 800a05e:	2800      	cmp	r0, #0
 800a060:	f43f aedb 	beq.w	8009e1a <_scanf_float+0x4a>
 800a064:	e6e6      	b.n	8009e34 <_scanf_float+0x64>
 800a066:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a06a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a06e:	463a      	mov	r2, r7
 800a070:	4640      	mov	r0, r8
 800a072:	4798      	blx	r3
 800a074:	6923      	ldr	r3, [r4, #16]
 800a076:	3b01      	subs	r3, #1
 800a078:	6123      	str	r3, [r4, #16]
 800a07a:	e6e8      	b.n	8009e4e <_scanf_float+0x7e>
 800a07c:	1e6b      	subs	r3, r5, #1
 800a07e:	2b06      	cmp	r3, #6
 800a080:	d824      	bhi.n	800a0cc <_scanf_float+0x2fc>
 800a082:	2d02      	cmp	r5, #2
 800a084:	d836      	bhi.n	800a0f4 <_scanf_float+0x324>
 800a086:	9b01      	ldr	r3, [sp, #4]
 800a088:	429e      	cmp	r6, r3
 800a08a:	f67f aee4 	bls.w	8009e56 <_scanf_float+0x86>
 800a08e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a092:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a096:	463a      	mov	r2, r7
 800a098:	4640      	mov	r0, r8
 800a09a:	4798      	blx	r3
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	6123      	str	r3, [r4, #16]
 800a0a2:	e7f0      	b.n	800a086 <_scanf_float+0x2b6>
 800a0a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a0ac:	463a      	mov	r2, r7
 800a0ae:	4640      	mov	r0, r8
 800a0b0:	4798      	blx	r3
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	6123      	str	r3, [r4, #16]
 800a0b8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a0bc:	fa5f fa8a 	uxtb.w	sl, sl
 800a0c0:	f1ba 0f02 	cmp.w	sl, #2
 800a0c4:	d1ee      	bne.n	800a0a4 <_scanf_float+0x2d4>
 800a0c6:	3d03      	subs	r5, #3
 800a0c8:	b2ed      	uxtb	r5, r5
 800a0ca:	1b76      	subs	r6, r6, r5
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	05da      	lsls	r2, r3, #23
 800a0d0:	d530      	bpl.n	800a134 <_scanf_float+0x364>
 800a0d2:	055b      	lsls	r3, r3, #21
 800a0d4:	d511      	bpl.n	800a0fa <_scanf_float+0x32a>
 800a0d6:	9b01      	ldr	r3, [sp, #4]
 800a0d8:	429e      	cmp	r6, r3
 800a0da:	f67f aebc 	bls.w	8009e56 <_scanf_float+0x86>
 800a0de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0e6:	463a      	mov	r2, r7
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	4798      	blx	r3
 800a0ec:	6923      	ldr	r3, [r4, #16]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	e7f0      	b.n	800a0d6 <_scanf_float+0x306>
 800a0f4:	46aa      	mov	sl, r5
 800a0f6:	46b3      	mov	fp, r6
 800a0f8:	e7de      	b.n	800a0b8 <_scanf_float+0x2e8>
 800a0fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	2965      	cmp	r1, #101	@ 0x65
 800a102:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a106:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a10a:	6123      	str	r3, [r4, #16]
 800a10c:	d00c      	beq.n	800a128 <_scanf_float+0x358>
 800a10e:	2945      	cmp	r1, #69	@ 0x45
 800a110:	d00a      	beq.n	800a128 <_scanf_float+0x358>
 800a112:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a116:	463a      	mov	r2, r7
 800a118:	4640      	mov	r0, r8
 800a11a:	4798      	blx	r3
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a122:	3b01      	subs	r3, #1
 800a124:	1eb5      	subs	r5, r6, #2
 800a126:	6123      	str	r3, [r4, #16]
 800a128:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a12c:	463a      	mov	r2, r7
 800a12e:	4640      	mov	r0, r8
 800a130:	4798      	blx	r3
 800a132:	462e      	mov	r6, r5
 800a134:	6822      	ldr	r2, [r4, #0]
 800a136:	f012 0210 	ands.w	r2, r2, #16
 800a13a:	d001      	beq.n	800a140 <_scanf_float+0x370>
 800a13c:	2000      	movs	r0, #0
 800a13e:	e68b      	b.n	8009e58 <_scanf_float+0x88>
 800a140:	7032      	strb	r2, [r6, #0]
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a14c:	d11c      	bne.n	800a188 <_scanf_float+0x3b8>
 800a14e:	9b02      	ldr	r3, [sp, #8]
 800a150:	454b      	cmp	r3, r9
 800a152:	eba3 0209 	sub.w	r2, r3, r9
 800a156:	d123      	bne.n	800a1a0 <_scanf_float+0x3d0>
 800a158:	9901      	ldr	r1, [sp, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	4640      	mov	r0, r8
 800a15e:	f002 fd17 	bl	800cb90 <_strtod_r>
 800a162:	9b03      	ldr	r3, [sp, #12]
 800a164:	6821      	ldr	r1, [r4, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f011 0f02 	tst.w	r1, #2
 800a16c:	ec57 6b10 	vmov	r6, r7, d0
 800a170:	f103 0204 	add.w	r2, r3, #4
 800a174:	d01f      	beq.n	800a1b6 <_scanf_float+0x3e6>
 800a176:	9903      	ldr	r1, [sp, #12]
 800a178:	600a      	str	r2, [r1, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	e9c3 6700 	strd	r6, r7, [r3]
 800a180:	68e3      	ldr	r3, [r4, #12]
 800a182:	3301      	adds	r3, #1
 800a184:	60e3      	str	r3, [r4, #12]
 800a186:	e7d9      	b.n	800a13c <_scanf_float+0x36c>
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0e4      	beq.n	800a158 <_scanf_float+0x388>
 800a18e:	9905      	ldr	r1, [sp, #20]
 800a190:	230a      	movs	r3, #10
 800a192:	3101      	adds	r1, #1
 800a194:	4640      	mov	r0, r8
 800a196:	f002 fd7b 	bl	800cc90 <_strtol_r>
 800a19a:	9b04      	ldr	r3, [sp, #16]
 800a19c:	9e05      	ldr	r6, [sp, #20]
 800a19e:	1ac2      	subs	r2, r0, r3
 800a1a0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a1a4:	429e      	cmp	r6, r3
 800a1a6:	bf28      	it	cs
 800a1a8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a1ac:	4910      	ldr	r1, [pc, #64]	@ (800a1f0 <_scanf_float+0x420>)
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f000 f954 	bl	800a45c <siprintf>
 800a1b4:	e7d0      	b.n	800a158 <_scanf_float+0x388>
 800a1b6:	f011 0f04 	tst.w	r1, #4
 800a1ba:	9903      	ldr	r1, [sp, #12]
 800a1bc:	600a      	str	r2, [r1, #0]
 800a1be:	d1dc      	bne.n	800a17a <_scanf_float+0x3aa>
 800a1c0:	681d      	ldr	r5, [r3, #0]
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	463b      	mov	r3, r7
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	f7f6 fcd7 	bl	8000b7c <__aeabi_dcmpun>
 800a1ce:	b128      	cbz	r0, 800a1dc <_scanf_float+0x40c>
 800a1d0:	4808      	ldr	r0, [pc, #32]	@ (800a1f4 <_scanf_float+0x424>)
 800a1d2:	f000 fad5 	bl	800a780 <nanf>
 800a1d6:	ed85 0a00 	vstr	s0, [r5]
 800a1da:	e7d1      	b.n	800a180 <_scanf_float+0x3b0>
 800a1dc:	4630      	mov	r0, r6
 800a1de:	4639      	mov	r1, r7
 800a1e0:	f7f6 fd2a 	bl	8000c38 <__aeabi_d2f>
 800a1e4:	6028      	str	r0, [r5, #0]
 800a1e6:	e7cb      	b.n	800a180 <_scanf_float+0x3b0>
 800a1e8:	f04f 0900 	mov.w	r9, #0
 800a1ec:	e629      	b.n	8009e42 <_scanf_float+0x72>
 800a1ee:	bf00      	nop
 800a1f0:	0800e424 	.word	0x0800e424
 800a1f4:	0800e7bd 	.word	0x0800e7bd

0800a1f8 <std>:
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	e9c0 3300 	strd	r3, r3, [r0]
 800a202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a206:	6083      	str	r3, [r0, #8]
 800a208:	8181      	strh	r1, [r0, #12]
 800a20a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a20c:	81c2      	strh	r2, [r0, #14]
 800a20e:	6183      	str	r3, [r0, #24]
 800a210:	4619      	mov	r1, r3
 800a212:	2208      	movs	r2, #8
 800a214:	305c      	adds	r0, #92	@ 0x5c
 800a216:	f000 fa33 	bl	800a680 <memset>
 800a21a:	4b0d      	ldr	r3, [pc, #52]	@ (800a250 <std+0x58>)
 800a21c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a21e:	4b0d      	ldr	r3, [pc, #52]	@ (800a254 <std+0x5c>)
 800a220:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a222:	4b0d      	ldr	r3, [pc, #52]	@ (800a258 <std+0x60>)
 800a224:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a226:	4b0d      	ldr	r3, [pc, #52]	@ (800a25c <std+0x64>)
 800a228:	6323      	str	r3, [r4, #48]	@ 0x30
 800a22a:	4b0d      	ldr	r3, [pc, #52]	@ (800a260 <std+0x68>)
 800a22c:	6224      	str	r4, [r4, #32]
 800a22e:	429c      	cmp	r4, r3
 800a230:	d006      	beq.n	800a240 <std+0x48>
 800a232:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a236:	4294      	cmp	r4, r2
 800a238:	d002      	beq.n	800a240 <std+0x48>
 800a23a:	33d0      	adds	r3, #208	@ 0xd0
 800a23c:	429c      	cmp	r4, r3
 800a23e:	d105      	bne.n	800a24c <std+0x54>
 800a240:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a248:	f000 ba96 	b.w	800a778 <__retarget_lock_init_recursive>
 800a24c:	bd10      	pop	{r4, pc}
 800a24e:	bf00      	nop
 800a250:	0800a49d 	.word	0x0800a49d
 800a254:	0800a4bf 	.word	0x0800a4bf
 800a258:	0800a4f7 	.word	0x0800a4f7
 800a25c:	0800a51b 	.word	0x0800a51b
 800a260:	20001840 	.word	0x20001840

0800a264 <stdio_exit_handler>:
 800a264:	4a02      	ldr	r2, [pc, #8]	@ (800a270 <stdio_exit_handler+0xc>)
 800a266:	4903      	ldr	r1, [pc, #12]	@ (800a274 <stdio_exit_handler+0x10>)
 800a268:	4803      	ldr	r0, [pc, #12]	@ (800a278 <stdio_exit_handler+0x14>)
 800a26a:	f000 b869 	b.w	800a340 <_fwalk_sglue>
 800a26e:	bf00      	nop
 800a270:	20000f50 	.word	0x20000f50
 800a274:	0800d2d1 	.word	0x0800d2d1
 800a278:	20000f60 	.word	0x20000f60

0800a27c <cleanup_stdio>:
 800a27c:	6841      	ldr	r1, [r0, #4]
 800a27e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b0 <cleanup_stdio+0x34>)
 800a280:	4299      	cmp	r1, r3
 800a282:	b510      	push	{r4, lr}
 800a284:	4604      	mov	r4, r0
 800a286:	d001      	beq.n	800a28c <cleanup_stdio+0x10>
 800a288:	f003 f822 	bl	800d2d0 <_fflush_r>
 800a28c:	68a1      	ldr	r1, [r4, #8]
 800a28e:	4b09      	ldr	r3, [pc, #36]	@ (800a2b4 <cleanup_stdio+0x38>)
 800a290:	4299      	cmp	r1, r3
 800a292:	d002      	beq.n	800a29a <cleanup_stdio+0x1e>
 800a294:	4620      	mov	r0, r4
 800a296:	f003 f81b 	bl	800d2d0 <_fflush_r>
 800a29a:	68e1      	ldr	r1, [r4, #12]
 800a29c:	4b06      	ldr	r3, [pc, #24]	@ (800a2b8 <cleanup_stdio+0x3c>)
 800a29e:	4299      	cmp	r1, r3
 800a2a0:	d004      	beq.n	800a2ac <cleanup_stdio+0x30>
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2a8:	f003 b812 	b.w	800d2d0 <_fflush_r>
 800a2ac:	bd10      	pop	{r4, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20001840 	.word	0x20001840
 800a2b4:	200018a8 	.word	0x200018a8
 800a2b8:	20001910 	.word	0x20001910

0800a2bc <global_stdio_init.part.0>:
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ec <global_stdio_init.part.0+0x30>)
 800a2c0:	4c0b      	ldr	r4, [pc, #44]	@ (800a2f0 <global_stdio_init.part.0+0x34>)
 800a2c2:	4a0c      	ldr	r2, [pc, #48]	@ (800a2f4 <global_stdio_init.part.0+0x38>)
 800a2c4:	601a      	str	r2, [r3, #0]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2104      	movs	r1, #4
 800a2cc:	f7ff ff94 	bl	800a1f8 <std>
 800a2d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	2109      	movs	r1, #9
 800a2d8:	f7ff ff8e 	bl	800a1f8 <std>
 800a2dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e6:	2112      	movs	r1, #18
 800a2e8:	f7ff bf86 	b.w	800a1f8 <std>
 800a2ec:	20001978 	.word	0x20001978
 800a2f0:	20001840 	.word	0x20001840
 800a2f4:	0800a265 	.word	0x0800a265

0800a2f8 <__sfp_lock_acquire>:
 800a2f8:	4801      	ldr	r0, [pc, #4]	@ (800a300 <__sfp_lock_acquire+0x8>)
 800a2fa:	f000 ba3e 	b.w	800a77a <__retarget_lock_acquire_recursive>
 800a2fe:	bf00      	nop
 800a300:	20001981 	.word	0x20001981

0800a304 <__sfp_lock_release>:
 800a304:	4801      	ldr	r0, [pc, #4]	@ (800a30c <__sfp_lock_release+0x8>)
 800a306:	f000 ba39 	b.w	800a77c <__retarget_lock_release_recursive>
 800a30a:	bf00      	nop
 800a30c:	20001981 	.word	0x20001981

0800a310 <__sinit>:
 800a310:	b510      	push	{r4, lr}
 800a312:	4604      	mov	r4, r0
 800a314:	f7ff fff0 	bl	800a2f8 <__sfp_lock_acquire>
 800a318:	6a23      	ldr	r3, [r4, #32]
 800a31a:	b11b      	cbz	r3, 800a324 <__sinit+0x14>
 800a31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a320:	f7ff bff0 	b.w	800a304 <__sfp_lock_release>
 800a324:	4b04      	ldr	r3, [pc, #16]	@ (800a338 <__sinit+0x28>)
 800a326:	6223      	str	r3, [r4, #32]
 800a328:	4b04      	ldr	r3, [pc, #16]	@ (800a33c <__sinit+0x2c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1f5      	bne.n	800a31c <__sinit+0xc>
 800a330:	f7ff ffc4 	bl	800a2bc <global_stdio_init.part.0>
 800a334:	e7f2      	b.n	800a31c <__sinit+0xc>
 800a336:	bf00      	nop
 800a338:	0800a27d 	.word	0x0800a27d
 800a33c:	20001978 	.word	0x20001978

0800a340 <_fwalk_sglue>:
 800a340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a344:	4607      	mov	r7, r0
 800a346:	4688      	mov	r8, r1
 800a348:	4614      	mov	r4, r2
 800a34a:	2600      	movs	r6, #0
 800a34c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a350:	f1b9 0901 	subs.w	r9, r9, #1
 800a354:	d505      	bpl.n	800a362 <_fwalk_sglue+0x22>
 800a356:	6824      	ldr	r4, [r4, #0]
 800a358:	2c00      	cmp	r4, #0
 800a35a:	d1f7      	bne.n	800a34c <_fwalk_sglue+0xc>
 800a35c:	4630      	mov	r0, r6
 800a35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a362:	89ab      	ldrh	r3, [r5, #12]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d907      	bls.n	800a378 <_fwalk_sglue+0x38>
 800a368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a36c:	3301      	adds	r3, #1
 800a36e:	d003      	beq.n	800a378 <_fwalk_sglue+0x38>
 800a370:	4629      	mov	r1, r5
 800a372:	4638      	mov	r0, r7
 800a374:	47c0      	blx	r8
 800a376:	4306      	orrs	r6, r0
 800a378:	3568      	adds	r5, #104	@ 0x68
 800a37a:	e7e9      	b.n	800a350 <_fwalk_sglue+0x10>

0800a37c <iprintf>:
 800a37c:	b40f      	push	{r0, r1, r2, r3}
 800a37e:	b507      	push	{r0, r1, r2, lr}
 800a380:	4906      	ldr	r1, [pc, #24]	@ (800a39c <iprintf+0x20>)
 800a382:	ab04      	add	r3, sp, #16
 800a384:	6808      	ldr	r0, [r1, #0]
 800a386:	f853 2b04 	ldr.w	r2, [r3], #4
 800a38a:	6881      	ldr	r1, [r0, #8]
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	f002 fe03 	bl	800cf98 <_vfiprintf_r>
 800a392:	b003      	add	sp, #12
 800a394:	f85d eb04 	ldr.w	lr, [sp], #4
 800a398:	b004      	add	sp, #16
 800a39a:	4770      	bx	lr
 800a39c:	20000f5c 	.word	0x20000f5c

0800a3a0 <_puts_r>:
 800a3a0:	6a03      	ldr	r3, [r0, #32]
 800a3a2:	b570      	push	{r4, r5, r6, lr}
 800a3a4:	6884      	ldr	r4, [r0, #8]
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	460e      	mov	r6, r1
 800a3aa:	b90b      	cbnz	r3, 800a3b0 <_puts_r+0x10>
 800a3ac:	f7ff ffb0 	bl	800a310 <__sinit>
 800a3b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3b2:	07db      	lsls	r3, r3, #31
 800a3b4:	d405      	bmi.n	800a3c2 <_puts_r+0x22>
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	0598      	lsls	r0, r3, #22
 800a3ba:	d402      	bmi.n	800a3c2 <_puts_r+0x22>
 800a3bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3be:	f000 f9dc 	bl	800a77a <__retarget_lock_acquire_recursive>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	0719      	lsls	r1, r3, #28
 800a3c6:	d502      	bpl.n	800a3ce <_puts_r+0x2e>
 800a3c8:	6923      	ldr	r3, [r4, #16]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d135      	bne.n	800a43a <_puts_r+0x9a>
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	f000 f8e5 	bl	800a5a0 <__swsetup_r>
 800a3d6:	b380      	cbz	r0, 800a43a <_puts_r+0x9a>
 800a3d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a3dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3de:	07da      	lsls	r2, r3, #31
 800a3e0:	d405      	bmi.n	800a3ee <_puts_r+0x4e>
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	059b      	lsls	r3, r3, #22
 800a3e6:	d402      	bmi.n	800a3ee <_puts_r+0x4e>
 800a3e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3ea:	f000 f9c7 	bl	800a77c <__retarget_lock_release_recursive>
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	bd70      	pop	{r4, r5, r6, pc}
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	da04      	bge.n	800a400 <_puts_r+0x60>
 800a3f6:	69a2      	ldr	r2, [r4, #24]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	dc17      	bgt.n	800a42c <_puts_r+0x8c>
 800a3fc:	290a      	cmp	r1, #10
 800a3fe:	d015      	beq.n	800a42c <_puts_r+0x8c>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	6022      	str	r2, [r4, #0]
 800a406:	7019      	strb	r1, [r3, #0]
 800a408:	68a3      	ldr	r3, [r4, #8]
 800a40a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a40e:	3b01      	subs	r3, #1
 800a410:	60a3      	str	r3, [r4, #8]
 800a412:	2900      	cmp	r1, #0
 800a414:	d1ed      	bne.n	800a3f2 <_puts_r+0x52>
 800a416:	2b00      	cmp	r3, #0
 800a418:	da11      	bge.n	800a43e <_puts_r+0x9e>
 800a41a:	4622      	mov	r2, r4
 800a41c:	210a      	movs	r1, #10
 800a41e:	4628      	mov	r0, r5
 800a420:	f000 f87f 	bl	800a522 <__swbuf_r>
 800a424:	3001      	adds	r0, #1
 800a426:	d0d7      	beq.n	800a3d8 <_puts_r+0x38>
 800a428:	250a      	movs	r5, #10
 800a42a:	e7d7      	b.n	800a3dc <_puts_r+0x3c>
 800a42c:	4622      	mov	r2, r4
 800a42e:	4628      	mov	r0, r5
 800a430:	f000 f877 	bl	800a522 <__swbuf_r>
 800a434:	3001      	adds	r0, #1
 800a436:	d1e7      	bne.n	800a408 <_puts_r+0x68>
 800a438:	e7ce      	b.n	800a3d8 <_puts_r+0x38>
 800a43a:	3e01      	subs	r6, #1
 800a43c:	e7e4      	b.n	800a408 <_puts_r+0x68>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	6022      	str	r2, [r4, #0]
 800a444:	220a      	movs	r2, #10
 800a446:	701a      	strb	r2, [r3, #0]
 800a448:	e7ee      	b.n	800a428 <_puts_r+0x88>
	...

0800a44c <puts>:
 800a44c:	4b02      	ldr	r3, [pc, #8]	@ (800a458 <puts+0xc>)
 800a44e:	4601      	mov	r1, r0
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	f7ff bfa5 	b.w	800a3a0 <_puts_r>
 800a456:	bf00      	nop
 800a458:	20000f5c 	.word	0x20000f5c

0800a45c <siprintf>:
 800a45c:	b40e      	push	{r1, r2, r3}
 800a45e:	b500      	push	{lr}
 800a460:	b09c      	sub	sp, #112	@ 0x70
 800a462:	ab1d      	add	r3, sp, #116	@ 0x74
 800a464:	9002      	str	r0, [sp, #8]
 800a466:	9006      	str	r0, [sp, #24]
 800a468:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a46c:	4809      	ldr	r0, [pc, #36]	@ (800a494 <siprintf+0x38>)
 800a46e:	9107      	str	r1, [sp, #28]
 800a470:	9104      	str	r1, [sp, #16]
 800a472:	4909      	ldr	r1, [pc, #36]	@ (800a498 <siprintf+0x3c>)
 800a474:	f853 2b04 	ldr.w	r2, [r3], #4
 800a478:	9105      	str	r1, [sp, #20]
 800a47a:	6800      	ldr	r0, [r0, #0]
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	a902      	add	r1, sp, #8
 800a480:	f002 fc64 	bl	800cd4c <_svfiprintf_r>
 800a484:	9b02      	ldr	r3, [sp, #8]
 800a486:	2200      	movs	r2, #0
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	b01c      	add	sp, #112	@ 0x70
 800a48c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a490:	b003      	add	sp, #12
 800a492:	4770      	bx	lr
 800a494:	20000f5c 	.word	0x20000f5c
 800a498:	ffff0208 	.word	0xffff0208

0800a49c <__sread>:
 800a49c:	b510      	push	{r4, lr}
 800a49e:	460c      	mov	r4, r1
 800a4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a4:	f000 f91a 	bl	800a6dc <_read_r>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	bfab      	itete	ge
 800a4ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a4ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a4b0:	181b      	addge	r3, r3, r0
 800a4b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a4b6:	bfac      	ite	ge
 800a4b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a4ba:	81a3      	strhlt	r3, [r4, #12]
 800a4bc:	bd10      	pop	{r4, pc}

0800a4be <__swrite>:
 800a4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c2:	461f      	mov	r7, r3
 800a4c4:	898b      	ldrh	r3, [r1, #12]
 800a4c6:	05db      	lsls	r3, r3, #23
 800a4c8:	4605      	mov	r5, r0
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	4616      	mov	r6, r2
 800a4ce:	d505      	bpl.n	800a4dc <__swrite+0x1e>
 800a4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f000 f8ee 	bl	800a6b8 <_lseek_r>
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4e6:	81a3      	strh	r3, [r4, #12]
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	463b      	mov	r3, r7
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f2:	f000 b905 	b.w	800a700 <_write_r>

0800a4f6 <__sseek>:
 800a4f6:	b510      	push	{r4, lr}
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fe:	f000 f8db 	bl	800a6b8 <_lseek_r>
 800a502:	1c43      	adds	r3, r0, #1
 800a504:	89a3      	ldrh	r3, [r4, #12]
 800a506:	bf15      	itete	ne
 800a508:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a50a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a50e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a512:	81a3      	strheq	r3, [r4, #12]
 800a514:	bf18      	it	ne
 800a516:	81a3      	strhne	r3, [r4, #12]
 800a518:	bd10      	pop	{r4, pc}

0800a51a <__sclose>:
 800a51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51e:	f000 b8bb 	b.w	800a698 <_close_r>

0800a522 <__swbuf_r>:
 800a522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a524:	460e      	mov	r6, r1
 800a526:	4614      	mov	r4, r2
 800a528:	4605      	mov	r5, r0
 800a52a:	b118      	cbz	r0, 800a534 <__swbuf_r+0x12>
 800a52c:	6a03      	ldr	r3, [r0, #32]
 800a52e:	b90b      	cbnz	r3, 800a534 <__swbuf_r+0x12>
 800a530:	f7ff feee 	bl	800a310 <__sinit>
 800a534:	69a3      	ldr	r3, [r4, #24]
 800a536:	60a3      	str	r3, [r4, #8]
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	071a      	lsls	r2, r3, #28
 800a53c:	d501      	bpl.n	800a542 <__swbuf_r+0x20>
 800a53e:	6923      	ldr	r3, [r4, #16]
 800a540:	b943      	cbnz	r3, 800a554 <__swbuf_r+0x32>
 800a542:	4621      	mov	r1, r4
 800a544:	4628      	mov	r0, r5
 800a546:	f000 f82b 	bl	800a5a0 <__swsetup_r>
 800a54a:	b118      	cbz	r0, 800a554 <__swbuf_r+0x32>
 800a54c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a550:	4638      	mov	r0, r7
 800a552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	6922      	ldr	r2, [r4, #16]
 800a558:	1a98      	subs	r0, r3, r2
 800a55a:	6963      	ldr	r3, [r4, #20]
 800a55c:	b2f6      	uxtb	r6, r6
 800a55e:	4283      	cmp	r3, r0
 800a560:	4637      	mov	r7, r6
 800a562:	dc05      	bgt.n	800a570 <__swbuf_r+0x4e>
 800a564:	4621      	mov	r1, r4
 800a566:	4628      	mov	r0, r5
 800a568:	f002 feb2 	bl	800d2d0 <_fflush_r>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d1ed      	bne.n	800a54c <__swbuf_r+0x2a>
 800a570:	68a3      	ldr	r3, [r4, #8]
 800a572:	3b01      	subs	r3, #1
 800a574:	60a3      	str	r3, [r4, #8]
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	6022      	str	r2, [r4, #0]
 800a57c:	701e      	strb	r6, [r3, #0]
 800a57e:	6962      	ldr	r2, [r4, #20]
 800a580:	1c43      	adds	r3, r0, #1
 800a582:	429a      	cmp	r2, r3
 800a584:	d004      	beq.n	800a590 <__swbuf_r+0x6e>
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	07db      	lsls	r3, r3, #31
 800a58a:	d5e1      	bpl.n	800a550 <__swbuf_r+0x2e>
 800a58c:	2e0a      	cmp	r6, #10
 800a58e:	d1df      	bne.n	800a550 <__swbuf_r+0x2e>
 800a590:	4621      	mov	r1, r4
 800a592:	4628      	mov	r0, r5
 800a594:	f002 fe9c 	bl	800d2d0 <_fflush_r>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d0d9      	beq.n	800a550 <__swbuf_r+0x2e>
 800a59c:	e7d6      	b.n	800a54c <__swbuf_r+0x2a>
	...

0800a5a0 <__swsetup_r>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4b29      	ldr	r3, [pc, #164]	@ (800a648 <__swsetup_r+0xa8>)
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	6818      	ldr	r0, [r3, #0]
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	b118      	cbz	r0, 800a5b4 <__swsetup_r+0x14>
 800a5ac:	6a03      	ldr	r3, [r0, #32]
 800a5ae:	b90b      	cbnz	r3, 800a5b4 <__swsetup_r+0x14>
 800a5b0:	f7ff feae 	bl	800a310 <__sinit>
 800a5b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5b8:	0719      	lsls	r1, r3, #28
 800a5ba:	d422      	bmi.n	800a602 <__swsetup_r+0x62>
 800a5bc:	06da      	lsls	r2, r3, #27
 800a5be:	d407      	bmi.n	800a5d0 <__swsetup_r+0x30>
 800a5c0:	2209      	movs	r2, #9
 800a5c2:	602a      	str	r2, [r5, #0]
 800a5c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5c8:	81a3      	strh	r3, [r4, #12]
 800a5ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5ce:	e033      	b.n	800a638 <__swsetup_r+0x98>
 800a5d0:	0758      	lsls	r0, r3, #29
 800a5d2:	d512      	bpl.n	800a5fa <__swsetup_r+0x5a>
 800a5d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5d6:	b141      	cbz	r1, 800a5ea <__swsetup_r+0x4a>
 800a5d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5dc:	4299      	cmp	r1, r3
 800a5de:	d002      	beq.n	800a5e6 <__swsetup_r+0x46>
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f000 ff21 	bl	800b428 <_free_r>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a5f0:	81a3      	strh	r3, [r4, #12]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	6063      	str	r3, [r4, #4]
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	f043 0308 	orr.w	r3, r3, #8
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	6923      	ldr	r3, [r4, #16]
 800a604:	b94b      	cbnz	r3, 800a61a <__swsetup_r+0x7a>
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a60c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a610:	d003      	beq.n	800a61a <__swsetup_r+0x7a>
 800a612:	4621      	mov	r1, r4
 800a614:	4628      	mov	r0, r5
 800a616:	f002 fea9 	bl	800d36c <__smakebuf_r>
 800a61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61e:	f013 0201 	ands.w	r2, r3, #1
 800a622:	d00a      	beq.n	800a63a <__swsetup_r+0x9a>
 800a624:	2200      	movs	r2, #0
 800a626:	60a2      	str	r2, [r4, #8]
 800a628:	6962      	ldr	r2, [r4, #20]
 800a62a:	4252      	negs	r2, r2
 800a62c:	61a2      	str	r2, [r4, #24]
 800a62e:	6922      	ldr	r2, [r4, #16]
 800a630:	b942      	cbnz	r2, 800a644 <__swsetup_r+0xa4>
 800a632:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a636:	d1c5      	bne.n	800a5c4 <__swsetup_r+0x24>
 800a638:	bd38      	pop	{r3, r4, r5, pc}
 800a63a:	0799      	lsls	r1, r3, #30
 800a63c:	bf58      	it	pl
 800a63e:	6962      	ldrpl	r2, [r4, #20]
 800a640:	60a2      	str	r2, [r4, #8]
 800a642:	e7f4      	b.n	800a62e <__swsetup_r+0x8e>
 800a644:	2000      	movs	r0, #0
 800a646:	e7f7      	b.n	800a638 <__swsetup_r+0x98>
 800a648:	20000f5c 	.word	0x20000f5c

0800a64c <memmove>:
 800a64c:	4288      	cmp	r0, r1
 800a64e:	b510      	push	{r4, lr}
 800a650:	eb01 0402 	add.w	r4, r1, r2
 800a654:	d902      	bls.n	800a65c <memmove+0x10>
 800a656:	4284      	cmp	r4, r0
 800a658:	4623      	mov	r3, r4
 800a65a:	d807      	bhi.n	800a66c <memmove+0x20>
 800a65c:	1e43      	subs	r3, r0, #1
 800a65e:	42a1      	cmp	r1, r4
 800a660:	d008      	beq.n	800a674 <memmove+0x28>
 800a662:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a66a:	e7f8      	b.n	800a65e <memmove+0x12>
 800a66c:	4402      	add	r2, r0
 800a66e:	4601      	mov	r1, r0
 800a670:	428a      	cmp	r2, r1
 800a672:	d100      	bne.n	800a676 <memmove+0x2a>
 800a674:	bd10      	pop	{r4, pc}
 800a676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a67a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a67e:	e7f7      	b.n	800a670 <memmove+0x24>

0800a680 <memset>:
 800a680:	4402      	add	r2, r0
 800a682:	4603      	mov	r3, r0
 800a684:	4293      	cmp	r3, r2
 800a686:	d100      	bne.n	800a68a <memset+0xa>
 800a688:	4770      	bx	lr
 800a68a:	f803 1b01 	strb.w	r1, [r3], #1
 800a68e:	e7f9      	b.n	800a684 <memset+0x4>

0800a690 <_localeconv_r>:
 800a690:	4800      	ldr	r0, [pc, #0]	@ (800a694 <_localeconv_r+0x4>)
 800a692:	4770      	bx	lr
 800a694:	2000109c 	.word	0x2000109c

0800a698 <_close_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d06      	ldr	r5, [pc, #24]	@ (800a6b4 <_close_r+0x1c>)
 800a69c:	2300      	movs	r3, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	602b      	str	r3, [r5, #0]
 800a6a4:	f7f7 f8c0 	bl	8001828 <_close>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d102      	bne.n	800a6b2 <_close_r+0x1a>
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	b103      	cbz	r3, 800a6b2 <_close_r+0x1a>
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	2000197c 	.word	0x2000197c

0800a6b8 <_lseek_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d07      	ldr	r5, [pc, #28]	@ (800a6d8 <_lseek_r+0x20>)
 800a6bc:	4604      	mov	r4, r0
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f7f7 f8d5 	bl	8001876 <_lseek>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_lseek_r+0x1e>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_lseek_r+0x1e>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	2000197c 	.word	0x2000197c

0800a6dc <_read_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	4d07      	ldr	r5, [pc, #28]	@ (800a6fc <_read_r+0x20>)
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	4608      	mov	r0, r1
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	602a      	str	r2, [r5, #0]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f7f7 f863 	bl	80017b6 <_read>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d102      	bne.n	800a6fa <_read_r+0x1e>
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	b103      	cbz	r3, 800a6fa <_read_r+0x1e>
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	2000197c 	.word	0x2000197c

0800a700 <_write_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d07      	ldr	r5, [pc, #28]	@ (800a720 <_write_r+0x20>)
 800a704:	4604      	mov	r4, r0
 800a706:	4608      	mov	r0, r1
 800a708:	4611      	mov	r1, r2
 800a70a:	2200      	movs	r2, #0
 800a70c:	602a      	str	r2, [r5, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	f7f7 f86e 	bl	80017f0 <_write>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_write_r+0x1e>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_write_r+0x1e>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	2000197c 	.word	0x2000197c

0800a724 <__errno>:
 800a724:	4b01      	ldr	r3, [pc, #4]	@ (800a72c <__errno+0x8>)
 800a726:	6818      	ldr	r0, [r3, #0]
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	20000f5c 	.word	0x20000f5c

0800a730 <__libc_init_array>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	4d0d      	ldr	r5, [pc, #52]	@ (800a768 <__libc_init_array+0x38>)
 800a734:	4c0d      	ldr	r4, [pc, #52]	@ (800a76c <__libc_init_array+0x3c>)
 800a736:	1b64      	subs	r4, r4, r5
 800a738:	10a4      	asrs	r4, r4, #2
 800a73a:	2600      	movs	r6, #0
 800a73c:	42a6      	cmp	r6, r4
 800a73e:	d109      	bne.n	800a754 <__libc_init_array+0x24>
 800a740:	4d0b      	ldr	r5, [pc, #44]	@ (800a770 <__libc_init_array+0x40>)
 800a742:	4c0c      	ldr	r4, [pc, #48]	@ (800a774 <__libc_init_array+0x44>)
 800a744:	f003 fc68 	bl	800e018 <_init>
 800a748:	1b64      	subs	r4, r4, r5
 800a74a:	10a4      	asrs	r4, r4, #2
 800a74c:	2600      	movs	r6, #0
 800a74e:	42a6      	cmp	r6, r4
 800a750:	d105      	bne.n	800a75e <__libc_init_array+0x2e>
 800a752:	bd70      	pop	{r4, r5, r6, pc}
 800a754:	f855 3b04 	ldr.w	r3, [r5], #4
 800a758:	4798      	blx	r3
 800a75a:	3601      	adds	r6, #1
 800a75c:	e7ee      	b.n	800a73c <__libc_init_array+0xc>
 800a75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a762:	4798      	blx	r3
 800a764:	3601      	adds	r6, #1
 800a766:	e7f2      	b.n	800a74e <__libc_init_array+0x1e>
 800a768:	0800e868 	.word	0x0800e868
 800a76c:	0800e868 	.word	0x0800e868
 800a770:	0800e868 	.word	0x0800e868
 800a774:	0800e86c 	.word	0x0800e86c

0800a778 <__retarget_lock_init_recursive>:
 800a778:	4770      	bx	lr

0800a77a <__retarget_lock_acquire_recursive>:
 800a77a:	4770      	bx	lr

0800a77c <__retarget_lock_release_recursive>:
 800a77c:	4770      	bx	lr
	...

0800a780 <nanf>:
 800a780:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a788 <nanf+0x8>
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	7fc00000 	.word	0x7fc00000

0800a78c <quorem>:
 800a78c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a790:	6903      	ldr	r3, [r0, #16]
 800a792:	690c      	ldr	r4, [r1, #16]
 800a794:	42a3      	cmp	r3, r4
 800a796:	4607      	mov	r7, r0
 800a798:	db7e      	blt.n	800a898 <quorem+0x10c>
 800a79a:	3c01      	subs	r4, #1
 800a79c:	f101 0814 	add.w	r8, r1, #20
 800a7a0:	00a3      	lsls	r3, r4, #2
 800a7a2:	f100 0514 	add.w	r5, r0, #20
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7be:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7c2:	d32e      	bcc.n	800a822 <quorem+0x96>
 800a7c4:	f04f 0a00 	mov.w	sl, #0
 800a7c8:	46c4      	mov	ip, r8
 800a7ca:	46ae      	mov	lr, r5
 800a7cc:	46d3      	mov	fp, sl
 800a7ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a7d2:	b298      	uxth	r0, r3
 800a7d4:	fb06 a000 	mla	r0, r6, r0, sl
 800a7d8:	0c02      	lsrs	r2, r0, #16
 800a7da:	0c1b      	lsrs	r3, r3, #16
 800a7dc:	fb06 2303 	mla	r3, r6, r3, r2
 800a7e0:	f8de 2000 	ldr.w	r2, [lr]
 800a7e4:	b280      	uxth	r0, r0
 800a7e6:	b292      	uxth	r2, r2
 800a7e8:	1a12      	subs	r2, r2, r0
 800a7ea:	445a      	add	r2, fp
 800a7ec:	f8de 0000 	ldr.w	r0, [lr]
 800a7f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a7fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a7fe:	b292      	uxth	r2, r2
 800a800:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a804:	45e1      	cmp	r9, ip
 800a806:	f84e 2b04 	str.w	r2, [lr], #4
 800a80a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a80e:	d2de      	bcs.n	800a7ce <quorem+0x42>
 800a810:	9b00      	ldr	r3, [sp, #0]
 800a812:	58eb      	ldr	r3, [r5, r3]
 800a814:	b92b      	cbnz	r3, 800a822 <quorem+0x96>
 800a816:	9b01      	ldr	r3, [sp, #4]
 800a818:	3b04      	subs	r3, #4
 800a81a:	429d      	cmp	r5, r3
 800a81c:	461a      	mov	r2, r3
 800a81e:	d32f      	bcc.n	800a880 <quorem+0xf4>
 800a820:	613c      	str	r4, [r7, #16]
 800a822:	4638      	mov	r0, r7
 800a824:	f001 f9c4 	bl	800bbb0 <__mcmp>
 800a828:	2800      	cmp	r0, #0
 800a82a:	db25      	blt.n	800a878 <quorem+0xec>
 800a82c:	4629      	mov	r1, r5
 800a82e:	2000      	movs	r0, #0
 800a830:	f858 2b04 	ldr.w	r2, [r8], #4
 800a834:	f8d1 c000 	ldr.w	ip, [r1]
 800a838:	fa1f fe82 	uxth.w	lr, r2
 800a83c:	fa1f f38c 	uxth.w	r3, ip
 800a840:	eba3 030e 	sub.w	r3, r3, lr
 800a844:	4403      	add	r3, r0
 800a846:	0c12      	lsrs	r2, r2, #16
 800a848:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a84c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a850:	b29b      	uxth	r3, r3
 800a852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a856:	45c1      	cmp	r9, r8
 800a858:	f841 3b04 	str.w	r3, [r1], #4
 800a85c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a860:	d2e6      	bcs.n	800a830 <quorem+0xa4>
 800a862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a86a:	b922      	cbnz	r2, 800a876 <quorem+0xea>
 800a86c:	3b04      	subs	r3, #4
 800a86e:	429d      	cmp	r5, r3
 800a870:	461a      	mov	r2, r3
 800a872:	d30b      	bcc.n	800a88c <quorem+0x100>
 800a874:	613c      	str	r4, [r7, #16]
 800a876:	3601      	adds	r6, #1
 800a878:	4630      	mov	r0, r6
 800a87a:	b003      	add	sp, #12
 800a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a880:	6812      	ldr	r2, [r2, #0]
 800a882:	3b04      	subs	r3, #4
 800a884:	2a00      	cmp	r2, #0
 800a886:	d1cb      	bne.n	800a820 <quorem+0x94>
 800a888:	3c01      	subs	r4, #1
 800a88a:	e7c6      	b.n	800a81a <quorem+0x8e>
 800a88c:	6812      	ldr	r2, [r2, #0]
 800a88e:	3b04      	subs	r3, #4
 800a890:	2a00      	cmp	r2, #0
 800a892:	d1ef      	bne.n	800a874 <quorem+0xe8>
 800a894:	3c01      	subs	r4, #1
 800a896:	e7ea      	b.n	800a86e <quorem+0xe2>
 800a898:	2000      	movs	r0, #0
 800a89a:	e7ee      	b.n	800a87a <quorem+0xee>
 800a89c:	0000      	movs	r0, r0
	...

0800a8a0 <_dtoa_r>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	69c7      	ldr	r7, [r0, #28]
 800a8a6:	b099      	sub	sp, #100	@ 0x64
 800a8a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8ac:	ec55 4b10 	vmov	r4, r5, d0
 800a8b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a8b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8b4:	4683      	mov	fp, r0
 800a8b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8ba:	b97f      	cbnz	r7, 800a8dc <_dtoa_r+0x3c>
 800a8bc:	2010      	movs	r0, #16
 800a8be:	f000 fdfd 	bl	800b4bc <malloc>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a8c8:	b920      	cbnz	r0, 800a8d4 <_dtoa_r+0x34>
 800a8ca:	4ba7      	ldr	r3, [pc, #668]	@ (800ab68 <_dtoa_r+0x2c8>)
 800a8cc:	21ef      	movs	r1, #239	@ 0xef
 800a8ce:	48a7      	ldr	r0, [pc, #668]	@ (800ab6c <_dtoa_r+0x2cc>)
 800a8d0:	f002 fde2 	bl	800d498 <__assert_func>
 800a8d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a8d8:	6007      	str	r7, [r0, #0]
 800a8da:	60c7      	str	r7, [r0, #12]
 800a8dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8e0:	6819      	ldr	r1, [r3, #0]
 800a8e2:	b159      	cbz	r1, 800a8fc <_dtoa_r+0x5c>
 800a8e4:	685a      	ldr	r2, [r3, #4]
 800a8e6:	604a      	str	r2, [r1, #4]
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	4093      	lsls	r3, r2
 800a8ec:	608b      	str	r3, [r1, #8]
 800a8ee:	4658      	mov	r0, fp
 800a8f0:	f000 feda 	bl	800b6a8 <_Bfree>
 800a8f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	1e2b      	subs	r3, r5, #0
 800a8fe:	bfb9      	ittee	lt
 800a900:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a904:	9303      	strlt	r3, [sp, #12]
 800a906:	2300      	movge	r3, #0
 800a908:	6033      	strge	r3, [r6, #0]
 800a90a:	9f03      	ldr	r7, [sp, #12]
 800a90c:	4b98      	ldr	r3, [pc, #608]	@ (800ab70 <_dtoa_r+0x2d0>)
 800a90e:	bfbc      	itt	lt
 800a910:	2201      	movlt	r2, #1
 800a912:	6032      	strlt	r2, [r6, #0]
 800a914:	43bb      	bics	r3, r7
 800a916:	d112      	bne.n	800a93e <_dtoa_r+0x9e>
 800a918:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a91a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a924:	4323      	orrs	r3, r4
 800a926:	f000 854d 	beq.w	800b3c4 <_dtoa_r+0xb24>
 800a92a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a92c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ab84 <_dtoa_r+0x2e4>
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 854f 	beq.w	800b3d4 <_dtoa_r+0xb34>
 800a936:	f10a 0303 	add.w	r3, sl, #3
 800a93a:	f000 bd49 	b.w	800b3d0 <_dtoa_r+0xb30>
 800a93e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a942:	2200      	movs	r2, #0
 800a944:	ec51 0b17 	vmov	r0, r1, d7
 800a948:	2300      	movs	r3, #0
 800a94a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a94e:	f7f6 f8e3 	bl	8000b18 <__aeabi_dcmpeq>
 800a952:	4680      	mov	r8, r0
 800a954:	b158      	cbz	r0, 800a96e <_dtoa_r+0xce>
 800a956:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a958:	2301      	movs	r3, #1
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a95e:	b113      	cbz	r3, 800a966 <_dtoa_r+0xc6>
 800a960:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a962:	4b84      	ldr	r3, [pc, #528]	@ (800ab74 <_dtoa_r+0x2d4>)
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ab88 <_dtoa_r+0x2e8>
 800a96a:	f000 bd33 	b.w	800b3d4 <_dtoa_r+0xb34>
 800a96e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a972:	aa16      	add	r2, sp, #88	@ 0x58
 800a974:	a917      	add	r1, sp, #92	@ 0x5c
 800a976:	4658      	mov	r0, fp
 800a978:	f001 fa3a 	bl	800bdf0 <__d2b>
 800a97c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a980:	4681      	mov	r9, r0
 800a982:	2e00      	cmp	r6, #0
 800a984:	d077      	beq.n	800aa76 <_dtoa_r+0x1d6>
 800a986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a988:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a98c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a994:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a998:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a99c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	4b74      	ldr	r3, [pc, #464]	@ (800ab78 <_dtoa_r+0x2d8>)
 800a9a6:	f7f5 fc97 	bl	80002d8 <__aeabi_dsub>
 800a9aa:	a369      	add	r3, pc, #420	@ (adr r3, 800ab50 <_dtoa_r+0x2b0>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7f5 fe4a 	bl	8000648 <__aeabi_dmul>
 800a9b4:	a368      	add	r3, pc, #416	@ (adr r3, 800ab58 <_dtoa_r+0x2b8>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	f7f5 fc8f 	bl	80002dc <__adddf3>
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	f7f5 fdd6 	bl	8000574 <__aeabi_i2d>
 800a9c8:	a365      	add	r3, pc, #404	@ (adr r3, 800ab60 <_dtoa_r+0x2c0>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f7f5 fe3b 	bl	8000648 <__aeabi_dmul>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	4629      	mov	r1, r5
 800a9da:	f7f5 fc7f 	bl	80002dc <__adddf3>
 800a9de:	4604      	mov	r4, r0
 800a9e0:	460d      	mov	r5, r1
 800a9e2:	f7f6 f8e1 	bl	8000ba8 <__aeabi_d2iz>
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	4607      	mov	r7, r0
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f6 f89c 	bl	8000b2c <__aeabi_dcmplt>
 800a9f4:	b140      	cbz	r0, 800aa08 <_dtoa_r+0x168>
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	f7f5 fdbc 	bl	8000574 <__aeabi_i2d>
 800a9fc:	4622      	mov	r2, r4
 800a9fe:	462b      	mov	r3, r5
 800aa00:	f7f6 f88a 	bl	8000b18 <__aeabi_dcmpeq>
 800aa04:	b900      	cbnz	r0, 800aa08 <_dtoa_r+0x168>
 800aa06:	3f01      	subs	r7, #1
 800aa08:	2f16      	cmp	r7, #22
 800aa0a:	d851      	bhi.n	800aab0 <_dtoa_r+0x210>
 800aa0c:	4b5b      	ldr	r3, [pc, #364]	@ (800ab7c <_dtoa_r+0x2dc>)
 800aa0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa1a:	f7f6 f887 	bl	8000b2c <__aeabi_dcmplt>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d048      	beq.n	800aab4 <_dtoa_r+0x214>
 800aa22:	3f01      	subs	r7, #1
 800aa24:	2300      	movs	r3, #0
 800aa26:	9312      	str	r3, [sp, #72]	@ 0x48
 800aa28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa2a:	1b9b      	subs	r3, r3, r6
 800aa2c:	1e5a      	subs	r2, r3, #1
 800aa2e:	bf44      	itt	mi
 800aa30:	f1c3 0801 	rsbmi	r8, r3, #1
 800aa34:	2300      	movmi	r3, #0
 800aa36:	9208      	str	r2, [sp, #32]
 800aa38:	bf54      	ite	pl
 800aa3a:	f04f 0800 	movpl.w	r8, #0
 800aa3e:	9308      	strmi	r3, [sp, #32]
 800aa40:	2f00      	cmp	r7, #0
 800aa42:	db39      	blt.n	800aab8 <_dtoa_r+0x218>
 800aa44:	9b08      	ldr	r3, [sp, #32]
 800aa46:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aa48:	443b      	add	r3, r7
 800aa4a:	9308      	str	r3, [sp, #32]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa52:	2b09      	cmp	r3, #9
 800aa54:	d864      	bhi.n	800ab20 <_dtoa_r+0x280>
 800aa56:	2b05      	cmp	r3, #5
 800aa58:	bfc4      	itt	gt
 800aa5a:	3b04      	subgt	r3, #4
 800aa5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aa5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa60:	f1a3 0302 	sub.w	r3, r3, #2
 800aa64:	bfcc      	ite	gt
 800aa66:	2400      	movgt	r4, #0
 800aa68:	2401      	movle	r4, #1
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d863      	bhi.n	800ab36 <_dtoa_r+0x296>
 800aa6e:	e8df f003 	tbb	[pc, r3]
 800aa72:	372a      	.short	0x372a
 800aa74:	5535      	.short	0x5535
 800aa76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aa7a:	441e      	add	r6, r3
 800aa7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa80:	2b20      	cmp	r3, #32
 800aa82:	bfc1      	itttt	gt
 800aa84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa88:	409f      	lslgt	r7, r3
 800aa8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa92:	bfd6      	itet	le
 800aa94:	f1c3 0320 	rsble	r3, r3, #32
 800aa98:	ea47 0003 	orrgt.w	r0, r7, r3
 800aa9c:	fa04 f003 	lslle.w	r0, r4, r3
 800aaa0:	f7f5 fd58 	bl	8000554 <__aeabi_ui2d>
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aaaa:	3e01      	subs	r6, #1
 800aaac:	9214      	str	r2, [sp, #80]	@ 0x50
 800aaae:	e777      	b.n	800a9a0 <_dtoa_r+0x100>
 800aab0:	2301      	movs	r3, #1
 800aab2:	e7b8      	b.n	800aa26 <_dtoa_r+0x186>
 800aab4:	9012      	str	r0, [sp, #72]	@ 0x48
 800aab6:	e7b7      	b.n	800aa28 <_dtoa_r+0x188>
 800aab8:	427b      	negs	r3, r7
 800aaba:	930a      	str	r3, [sp, #40]	@ 0x28
 800aabc:	2300      	movs	r3, #0
 800aabe:	eba8 0807 	sub.w	r8, r8, r7
 800aac2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aac4:	e7c4      	b.n	800aa50 <_dtoa_r+0x1b0>
 800aac6:	2300      	movs	r3, #0
 800aac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aacc:	2b00      	cmp	r3, #0
 800aace:	dc35      	bgt.n	800ab3c <_dtoa_r+0x29c>
 800aad0:	2301      	movs	r3, #1
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	9307      	str	r3, [sp, #28]
 800aad6:	461a      	mov	r2, r3
 800aad8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aada:	e00b      	b.n	800aaf4 <_dtoa_r+0x254>
 800aadc:	2301      	movs	r3, #1
 800aade:	e7f3      	b.n	800aac8 <_dtoa_r+0x228>
 800aae0:	2300      	movs	r3, #0
 800aae2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aae6:	18fb      	adds	r3, r7, r3
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	3301      	adds	r3, #1
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	9307      	str	r3, [sp, #28]
 800aaf0:	bfb8      	it	lt
 800aaf2:	2301      	movlt	r3, #1
 800aaf4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aaf8:	2100      	movs	r1, #0
 800aafa:	2204      	movs	r2, #4
 800aafc:	f102 0514 	add.w	r5, r2, #20
 800ab00:	429d      	cmp	r5, r3
 800ab02:	d91f      	bls.n	800ab44 <_dtoa_r+0x2a4>
 800ab04:	6041      	str	r1, [r0, #4]
 800ab06:	4658      	mov	r0, fp
 800ab08:	f000 fd8e 	bl	800b628 <_Balloc>
 800ab0c:	4682      	mov	sl, r0
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d13c      	bne.n	800ab8c <_dtoa_r+0x2ec>
 800ab12:	4b1b      	ldr	r3, [pc, #108]	@ (800ab80 <_dtoa_r+0x2e0>)
 800ab14:	4602      	mov	r2, r0
 800ab16:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab1a:	e6d8      	b.n	800a8ce <_dtoa_r+0x2e>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e7e0      	b.n	800aae2 <_dtoa_r+0x242>
 800ab20:	2401      	movs	r4, #1
 800ab22:	2300      	movs	r3, #0
 800ab24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	9307      	str	r3, [sp, #28]
 800ab30:	2200      	movs	r2, #0
 800ab32:	2312      	movs	r3, #18
 800ab34:	e7d0      	b.n	800aad8 <_dtoa_r+0x238>
 800ab36:	2301      	movs	r3, #1
 800ab38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab3a:	e7f5      	b.n	800ab28 <_dtoa_r+0x288>
 800ab3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	9307      	str	r3, [sp, #28]
 800ab42:	e7d7      	b.n	800aaf4 <_dtoa_r+0x254>
 800ab44:	3101      	adds	r1, #1
 800ab46:	0052      	lsls	r2, r2, #1
 800ab48:	e7d8      	b.n	800aafc <_dtoa_r+0x25c>
 800ab4a:	bf00      	nop
 800ab4c:	f3af 8000 	nop.w
 800ab50:	636f4361 	.word	0x636f4361
 800ab54:	3fd287a7 	.word	0x3fd287a7
 800ab58:	8b60c8b3 	.word	0x8b60c8b3
 800ab5c:	3fc68a28 	.word	0x3fc68a28
 800ab60:	509f79fb 	.word	0x509f79fb
 800ab64:	3fd34413 	.word	0x3fd34413
 800ab68:	0800e436 	.word	0x0800e436
 800ab6c:	0800e44d 	.word	0x0800e44d
 800ab70:	7ff00000 	.word	0x7ff00000
 800ab74:	0800e401 	.word	0x0800e401
 800ab78:	3ff80000 	.word	0x3ff80000
 800ab7c:	0800e548 	.word	0x0800e548
 800ab80:	0800e4a5 	.word	0x0800e4a5
 800ab84:	0800e432 	.word	0x0800e432
 800ab88:	0800e400 	.word	0x0800e400
 800ab8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab90:	6018      	str	r0, [r3, #0]
 800ab92:	9b07      	ldr	r3, [sp, #28]
 800ab94:	2b0e      	cmp	r3, #14
 800ab96:	f200 80a4 	bhi.w	800ace2 <_dtoa_r+0x442>
 800ab9a:	2c00      	cmp	r4, #0
 800ab9c:	f000 80a1 	beq.w	800ace2 <_dtoa_r+0x442>
 800aba0:	2f00      	cmp	r7, #0
 800aba2:	dd33      	ble.n	800ac0c <_dtoa_r+0x36c>
 800aba4:	4bad      	ldr	r3, [pc, #692]	@ (800ae5c <_dtoa_r+0x5bc>)
 800aba6:	f007 020f 	and.w	r2, r7, #15
 800abaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abae:	ed93 7b00 	vldr	d7, [r3]
 800abb2:	05f8      	lsls	r0, r7, #23
 800abb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800abb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800abbc:	d516      	bpl.n	800abec <_dtoa_r+0x34c>
 800abbe:	4ba8      	ldr	r3, [pc, #672]	@ (800ae60 <_dtoa_r+0x5c0>)
 800abc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abc8:	f7f5 fe68 	bl	800089c <__aeabi_ddiv>
 800abcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abd0:	f004 040f 	and.w	r4, r4, #15
 800abd4:	2603      	movs	r6, #3
 800abd6:	4da2      	ldr	r5, [pc, #648]	@ (800ae60 <_dtoa_r+0x5c0>)
 800abd8:	b954      	cbnz	r4, 800abf0 <_dtoa_r+0x350>
 800abda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abe2:	f7f5 fe5b 	bl	800089c <__aeabi_ddiv>
 800abe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abea:	e028      	b.n	800ac3e <_dtoa_r+0x39e>
 800abec:	2602      	movs	r6, #2
 800abee:	e7f2      	b.n	800abd6 <_dtoa_r+0x336>
 800abf0:	07e1      	lsls	r1, r4, #31
 800abf2:	d508      	bpl.n	800ac06 <_dtoa_r+0x366>
 800abf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abfc:	f7f5 fd24 	bl	8000648 <__aeabi_dmul>
 800ac00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac04:	3601      	adds	r6, #1
 800ac06:	1064      	asrs	r4, r4, #1
 800ac08:	3508      	adds	r5, #8
 800ac0a:	e7e5      	b.n	800abd8 <_dtoa_r+0x338>
 800ac0c:	f000 80d2 	beq.w	800adb4 <_dtoa_r+0x514>
 800ac10:	427c      	negs	r4, r7
 800ac12:	4b92      	ldr	r3, [pc, #584]	@ (800ae5c <_dtoa_r+0x5bc>)
 800ac14:	4d92      	ldr	r5, [pc, #584]	@ (800ae60 <_dtoa_r+0x5c0>)
 800ac16:	f004 020f 	and.w	r2, r4, #15
 800ac1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac26:	f7f5 fd0f 	bl	8000648 <__aeabi_dmul>
 800ac2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac2e:	1124      	asrs	r4, r4, #4
 800ac30:	2300      	movs	r3, #0
 800ac32:	2602      	movs	r6, #2
 800ac34:	2c00      	cmp	r4, #0
 800ac36:	f040 80b2 	bne.w	800ad9e <_dtoa_r+0x4fe>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1d3      	bne.n	800abe6 <_dtoa_r+0x346>
 800ac3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 80b7 	beq.w	800adb8 <_dtoa_r+0x518>
 800ac4a:	4b86      	ldr	r3, [pc, #536]	@ (800ae64 <_dtoa_r+0x5c4>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	4620      	mov	r0, r4
 800ac50:	4629      	mov	r1, r5
 800ac52:	f7f5 ff6b 	bl	8000b2c <__aeabi_dcmplt>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f000 80ae 	beq.w	800adb8 <_dtoa_r+0x518>
 800ac5c:	9b07      	ldr	r3, [sp, #28]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 80aa 	beq.w	800adb8 <_dtoa_r+0x518>
 800ac64:	9b00      	ldr	r3, [sp, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	dd37      	ble.n	800acda <_dtoa_r+0x43a>
 800ac6a:	1e7b      	subs	r3, r7, #1
 800ac6c:	9304      	str	r3, [sp, #16]
 800ac6e:	4620      	mov	r0, r4
 800ac70:	4b7d      	ldr	r3, [pc, #500]	@ (800ae68 <_dtoa_r+0x5c8>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	4629      	mov	r1, r5
 800ac76:	f7f5 fce7 	bl	8000648 <__aeabi_dmul>
 800ac7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac7e:	9c00      	ldr	r4, [sp, #0]
 800ac80:	3601      	adds	r6, #1
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7f5 fc76 	bl	8000574 <__aeabi_i2d>
 800ac88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac8c:	f7f5 fcdc 	bl	8000648 <__aeabi_dmul>
 800ac90:	4b76      	ldr	r3, [pc, #472]	@ (800ae6c <_dtoa_r+0x5cc>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	f7f5 fb22 	bl	80002dc <__adddf3>
 800ac98:	4605      	mov	r5, r0
 800ac9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac9e:	2c00      	cmp	r4, #0
 800aca0:	f040 808d 	bne.w	800adbe <_dtoa_r+0x51e>
 800aca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca8:	4b71      	ldr	r3, [pc, #452]	@ (800ae70 <_dtoa_r+0x5d0>)
 800acaa:	2200      	movs	r2, #0
 800acac:	f7f5 fb14 	bl	80002d8 <__aeabi_dsub>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acb8:	462a      	mov	r2, r5
 800acba:	4633      	mov	r3, r6
 800acbc:	f7f5 ff54 	bl	8000b68 <__aeabi_dcmpgt>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	f040 828b 	bne.w	800b1dc <_dtoa_r+0x93c>
 800acc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acca:	462a      	mov	r2, r5
 800accc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800acd0:	f7f5 ff2c 	bl	8000b2c <__aeabi_dcmplt>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	f040 8128 	bne.w	800af2a <_dtoa_r+0x68a>
 800acda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800acde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ace2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f2c0 815a 	blt.w	800af9e <_dtoa_r+0x6fe>
 800acea:	2f0e      	cmp	r7, #14
 800acec:	f300 8157 	bgt.w	800af9e <_dtoa_r+0x6fe>
 800acf0:	4b5a      	ldr	r3, [pc, #360]	@ (800ae5c <_dtoa_r+0x5bc>)
 800acf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800acf6:	ed93 7b00 	vldr	d7, [r3]
 800acfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	ed8d 7b00 	vstr	d7, [sp]
 800ad02:	da03      	bge.n	800ad0c <_dtoa_r+0x46c>
 800ad04:	9b07      	ldr	r3, [sp, #28]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f340 8101 	ble.w	800af0e <_dtoa_r+0x66e>
 800ad0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad10:	4656      	mov	r6, sl
 800ad12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad16:	4620      	mov	r0, r4
 800ad18:	4629      	mov	r1, r5
 800ad1a:	f7f5 fdbf 	bl	800089c <__aeabi_ddiv>
 800ad1e:	f7f5 ff43 	bl	8000ba8 <__aeabi_d2iz>
 800ad22:	4680      	mov	r8, r0
 800ad24:	f7f5 fc26 	bl	8000574 <__aeabi_i2d>
 800ad28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad2c:	f7f5 fc8c 	bl	8000648 <__aeabi_dmul>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	4620      	mov	r0, r4
 800ad36:	4629      	mov	r1, r5
 800ad38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad3c:	f7f5 facc 	bl	80002d8 <__aeabi_dsub>
 800ad40:	f806 4b01 	strb.w	r4, [r6], #1
 800ad44:	9d07      	ldr	r5, [sp, #28]
 800ad46:	eba6 040a 	sub.w	r4, r6, sl
 800ad4a:	42a5      	cmp	r5, r4
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	f040 8117 	bne.w	800af82 <_dtoa_r+0x6e2>
 800ad54:	f7f5 fac2 	bl	80002dc <__adddf3>
 800ad58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	460d      	mov	r5, r1
 800ad60:	f7f5 ff02 	bl	8000b68 <__aeabi_dcmpgt>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f040 80f9 	bne.w	800af5c <_dtoa_r+0x6bc>
 800ad6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	4629      	mov	r1, r5
 800ad72:	f7f5 fed1 	bl	8000b18 <__aeabi_dcmpeq>
 800ad76:	b118      	cbz	r0, 800ad80 <_dtoa_r+0x4e0>
 800ad78:	f018 0f01 	tst.w	r8, #1
 800ad7c:	f040 80ee 	bne.w	800af5c <_dtoa_r+0x6bc>
 800ad80:	4649      	mov	r1, r9
 800ad82:	4658      	mov	r0, fp
 800ad84:	f000 fc90 	bl	800b6a8 <_Bfree>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	7033      	strb	r3, [r6, #0]
 800ad8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad8e:	3701      	adds	r7, #1
 800ad90:	601f      	str	r7, [r3, #0]
 800ad92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 831d 	beq.w	800b3d4 <_dtoa_r+0xb34>
 800ad9a:	601e      	str	r6, [r3, #0]
 800ad9c:	e31a      	b.n	800b3d4 <_dtoa_r+0xb34>
 800ad9e:	07e2      	lsls	r2, r4, #31
 800ada0:	d505      	bpl.n	800adae <_dtoa_r+0x50e>
 800ada2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ada6:	f7f5 fc4f 	bl	8000648 <__aeabi_dmul>
 800adaa:	3601      	adds	r6, #1
 800adac:	2301      	movs	r3, #1
 800adae:	1064      	asrs	r4, r4, #1
 800adb0:	3508      	adds	r5, #8
 800adb2:	e73f      	b.n	800ac34 <_dtoa_r+0x394>
 800adb4:	2602      	movs	r6, #2
 800adb6:	e742      	b.n	800ac3e <_dtoa_r+0x39e>
 800adb8:	9c07      	ldr	r4, [sp, #28]
 800adba:	9704      	str	r7, [sp, #16]
 800adbc:	e761      	b.n	800ac82 <_dtoa_r+0x3e2>
 800adbe:	4b27      	ldr	r3, [pc, #156]	@ (800ae5c <_dtoa_r+0x5bc>)
 800adc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adca:	4454      	add	r4, sl
 800adcc:	2900      	cmp	r1, #0
 800adce:	d053      	beq.n	800ae78 <_dtoa_r+0x5d8>
 800add0:	4928      	ldr	r1, [pc, #160]	@ (800ae74 <_dtoa_r+0x5d4>)
 800add2:	2000      	movs	r0, #0
 800add4:	f7f5 fd62 	bl	800089c <__aeabi_ddiv>
 800add8:	4633      	mov	r3, r6
 800adda:	462a      	mov	r2, r5
 800addc:	f7f5 fa7c 	bl	80002d8 <__aeabi_dsub>
 800ade0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ade4:	4656      	mov	r6, sl
 800ade6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adea:	f7f5 fedd 	bl	8000ba8 <__aeabi_d2iz>
 800adee:	4605      	mov	r5, r0
 800adf0:	f7f5 fbc0 	bl	8000574 <__aeabi_i2d>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adfc:	f7f5 fa6c 	bl	80002d8 <__aeabi_dsub>
 800ae00:	3530      	adds	r5, #48	@ 0x30
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae0a:	f806 5b01 	strb.w	r5, [r6], #1
 800ae0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae12:	f7f5 fe8b 	bl	8000b2c <__aeabi_dcmplt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d171      	bne.n	800aefe <_dtoa_r+0x65e>
 800ae1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae1e:	4911      	ldr	r1, [pc, #68]	@ (800ae64 <_dtoa_r+0x5c4>)
 800ae20:	2000      	movs	r0, #0
 800ae22:	f7f5 fa59 	bl	80002d8 <__aeabi_dsub>
 800ae26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae2a:	f7f5 fe7f 	bl	8000b2c <__aeabi_dcmplt>
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	f040 8095 	bne.w	800af5e <_dtoa_r+0x6be>
 800ae34:	42a6      	cmp	r6, r4
 800ae36:	f43f af50 	beq.w	800acda <_dtoa_r+0x43a>
 800ae3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae68 <_dtoa_r+0x5c8>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	f7f5 fc01 	bl	8000648 <__aeabi_dmul>
 800ae46:	4b08      	ldr	r3, [pc, #32]	@ (800ae68 <_dtoa_r+0x5c8>)
 800ae48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae52:	f7f5 fbf9 	bl	8000648 <__aeabi_dmul>
 800ae56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae5a:	e7c4      	b.n	800ade6 <_dtoa_r+0x546>
 800ae5c:	0800e548 	.word	0x0800e548
 800ae60:	0800e520 	.word	0x0800e520
 800ae64:	3ff00000 	.word	0x3ff00000
 800ae68:	40240000 	.word	0x40240000
 800ae6c:	401c0000 	.word	0x401c0000
 800ae70:	40140000 	.word	0x40140000
 800ae74:	3fe00000 	.word	0x3fe00000
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	f7f5 fbe4 	bl	8000648 <__aeabi_dmul>
 800ae80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae84:	9415      	str	r4, [sp, #84]	@ 0x54
 800ae86:	4656      	mov	r6, sl
 800ae88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae8c:	f7f5 fe8c 	bl	8000ba8 <__aeabi_d2iz>
 800ae90:	4605      	mov	r5, r0
 800ae92:	f7f5 fb6f 	bl	8000574 <__aeabi_i2d>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae9e:	f7f5 fa1b 	bl	80002d8 <__aeabi_dsub>
 800aea2:	3530      	adds	r5, #48	@ 0x30
 800aea4:	f806 5b01 	strb.w	r5, [r6], #1
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	42a6      	cmp	r6, r4
 800aeae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aeb2:	f04f 0200 	mov.w	r2, #0
 800aeb6:	d124      	bne.n	800af02 <_dtoa_r+0x662>
 800aeb8:	4bac      	ldr	r3, [pc, #688]	@ (800b16c <_dtoa_r+0x8cc>)
 800aeba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aebe:	f7f5 fa0d 	bl	80002dc <__adddf3>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeca:	f7f5 fe4d 	bl	8000b68 <__aeabi_dcmpgt>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d145      	bne.n	800af5e <_dtoa_r+0x6be>
 800aed2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aed6:	49a5      	ldr	r1, [pc, #660]	@ (800b16c <_dtoa_r+0x8cc>)
 800aed8:	2000      	movs	r0, #0
 800aeda:	f7f5 f9fd 	bl	80002d8 <__aeabi_dsub>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aee6:	f7f5 fe21 	bl	8000b2c <__aeabi_dcmplt>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f43f aef5 	beq.w	800acda <_dtoa_r+0x43a>
 800aef0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aef2:	1e73      	subs	r3, r6, #1
 800aef4:	9315      	str	r3, [sp, #84]	@ 0x54
 800aef6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aefa:	2b30      	cmp	r3, #48	@ 0x30
 800aefc:	d0f8      	beq.n	800aef0 <_dtoa_r+0x650>
 800aefe:	9f04      	ldr	r7, [sp, #16]
 800af00:	e73e      	b.n	800ad80 <_dtoa_r+0x4e0>
 800af02:	4b9b      	ldr	r3, [pc, #620]	@ (800b170 <_dtoa_r+0x8d0>)
 800af04:	f7f5 fba0 	bl	8000648 <__aeabi_dmul>
 800af08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af0c:	e7bc      	b.n	800ae88 <_dtoa_r+0x5e8>
 800af0e:	d10c      	bne.n	800af2a <_dtoa_r+0x68a>
 800af10:	4b98      	ldr	r3, [pc, #608]	@ (800b174 <_dtoa_r+0x8d4>)
 800af12:	2200      	movs	r2, #0
 800af14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af18:	f7f5 fb96 	bl	8000648 <__aeabi_dmul>
 800af1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af20:	f7f5 fe18 	bl	8000b54 <__aeabi_dcmpge>
 800af24:	2800      	cmp	r0, #0
 800af26:	f000 8157 	beq.w	800b1d8 <_dtoa_r+0x938>
 800af2a:	2400      	movs	r4, #0
 800af2c:	4625      	mov	r5, r4
 800af2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af30:	43db      	mvns	r3, r3
 800af32:	9304      	str	r3, [sp, #16]
 800af34:	4656      	mov	r6, sl
 800af36:	2700      	movs	r7, #0
 800af38:	4621      	mov	r1, r4
 800af3a:	4658      	mov	r0, fp
 800af3c:	f000 fbb4 	bl	800b6a8 <_Bfree>
 800af40:	2d00      	cmp	r5, #0
 800af42:	d0dc      	beq.n	800aefe <_dtoa_r+0x65e>
 800af44:	b12f      	cbz	r7, 800af52 <_dtoa_r+0x6b2>
 800af46:	42af      	cmp	r7, r5
 800af48:	d003      	beq.n	800af52 <_dtoa_r+0x6b2>
 800af4a:	4639      	mov	r1, r7
 800af4c:	4658      	mov	r0, fp
 800af4e:	f000 fbab 	bl	800b6a8 <_Bfree>
 800af52:	4629      	mov	r1, r5
 800af54:	4658      	mov	r0, fp
 800af56:	f000 fba7 	bl	800b6a8 <_Bfree>
 800af5a:	e7d0      	b.n	800aefe <_dtoa_r+0x65e>
 800af5c:	9704      	str	r7, [sp, #16]
 800af5e:	4633      	mov	r3, r6
 800af60:	461e      	mov	r6, r3
 800af62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af66:	2a39      	cmp	r2, #57	@ 0x39
 800af68:	d107      	bne.n	800af7a <_dtoa_r+0x6da>
 800af6a:	459a      	cmp	sl, r3
 800af6c:	d1f8      	bne.n	800af60 <_dtoa_r+0x6c0>
 800af6e:	9a04      	ldr	r2, [sp, #16]
 800af70:	3201      	adds	r2, #1
 800af72:	9204      	str	r2, [sp, #16]
 800af74:	2230      	movs	r2, #48	@ 0x30
 800af76:	f88a 2000 	strb.w	r2, [sl]
 800af7a:	781a      	ldrb	r2, [r3, #0]
 800af7c:	3201      	adds	r2, #1
 800af7e:	701a      	strb	r2, [r3, #0]
 800af80:	e7bd      	b.n	800aefe <_dtoa_r+0x65e>
 800af82:	4b7b      	ldr	r3, [pc, #492]	@ (800b170 <_dtoa_r+0x8d0>)
 800af84:	2200      	movs	r2, #0
 800af86:	f7f5 fb5f 	bl	8000648 <__aeabi_dmul>
 800af8a:	2200      	movs	r2, #0
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	460d      	mov	r5, r1
 800af92:	f7f5 fdc1 	bl	8000b18 <__aeabi_dcmpeq>
 800af96:	2800      	cmp	r0, #0
 800af98:	f43f aebb 	beq.w	800ad12 <_dtoa_r+0x472>
 800af9c:	e6f0      	b.n	800ad80 <_dtoa_r+0x4e0>
 800af9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800afa0:	2a00      	cmp	r2, #0
 800afa2:	f000 80db 	beq.w	800b15c <_dtoa_r+0x8bc>
 800afa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afa8:	2a01      	cmp	r2, #1
 800afaa:	f300 80bf 	bgt.w	800b12c <_dtoa_r+0x88c>
 800afae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800afb0:	2a00      	cmp	r2, #0
 800afb2:	f000 80b7 	beq.w	800b124 <_dtoa_r+0x884>
 800afb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800afba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800afbc:	4646      	mov	r6, r8
 800afbe:	9a08      	ldr	r2, [sp, #32]
 800afc0:	2101      	movs	r1, #1
 800afc2:	441a      	add	r2, r3
 800afc4:	4658      	mov	r0, fp
 800afc6:	4498      	add	r8, r3
 800afc8:	9208      	str	r2, [sp, #32]
 800afca:	f000 fc6b 	bl	800b8a4 <__i2b>
 800afce:	4605      	mov	r5, r0
 800afd0:	b15e      	cbz	r6, 800afea <_dtoa_r+0x74a>
 800afd2:	9b08      	ldr	r3, [sp, #32]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	dd08      	ble.n	800afea <_dtoa_r+0x74a>
 800afd8:	42b3      	cmp	r3, r6
 800afda:	9a08      	ldr	r2, [sp, #32]
 800afdc:	bfa8      	it	ge
 800afde:	4633      	movge	r3, r6
 800afe0:	eba8 0803 	sub.w	r8, r8, r3
 800afe4:	1af6      	subs	r6, r6, r3
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	9308      	str	r3, [sp, #32]
 800afea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afec:	b1f3      	cbz	r3, 800b02c <_dtoa_r+0x78c>
 800afee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 80b7 	beq.w	800b164 <_dtoa_r+0x8c4>
 800aff6:	b18c      	cbz	r4, 800b01c <_dtoa_r+0x77c>
 800aff8:	4629      	mov	r1, r5
 800affa:	4622      	mov	r2, r4
 800affc:	4658      	mov	r0, fp
 800affe:	f000 fd11 	bl	800ba24 <__pow5mult>
 800b002:	464a      	mov	r2, r9
 800b004:	4601      	mov	r1, r0
 800b006:	4605      	mov	r5, r0
 800b008:	4658      	mov	r0, fp
 800b00a:	f000 fc61 	bl	800b8d0 <__multiply>
 800b00e:	4649      	mov	r1, r9
 800b010:	9004      	str	r0, [sp, #16]
 800b012:	4658      	mov	r0, fp
 800b014:	f000 fb48 	bl	800b6a8 <_Bfree>
 800b018:	9b04      	ldr	r3, [sp, #16]
 800b01a:	4699      	mov	r9, r3
 800b01c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b01e:	1b1a      	subs	r2, r3, r4
 800b020:	d004      	beq.n	800b02c <_dtoa_r+0x78c>
 800b022:	4649      	mov	r1, r9
 800b024:	4658      	mov	r0, fp
 800b026:	f000 fcfd 	bl	800ba24 <__pow5mult>
 800b02a:	4681      	mov	r9, r0
 800b02c:	2101      	movs	r1, #1
 800b02e:	4658      	mov	r0, fp
 800b030:	f000 fc38 	bl	800b8a4 <__i2b>
 800b034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b036:	4604      	mov	r4, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 81cf 	beq.w	800b3dc <_dtoa_r+0xb3c>
 800b03e:	461a      	mov	r2, r3
 800b040:	4601      	mov	r1, r0
 800b042:	4658      	mov	r0, fp
 800b044:	f000 fcee 	bl	800ba24 <__pow5mult>
 800b048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	4604      	mov	r4, r0
 800b04e:	f300 8095 	bgt.w	800b17c <_dtoa_r+0x8dc>
 800b052:	9b02      	ldr	r3, [sp, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f040 8087 	bne.w	800b168 <_dtoa_r+0x8c8>
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b060:	2b00      	cmp	r3, #0
 800b062:	f040 8089 	bne.w	800b178 <_dtoa_r+0x8d8>
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b06c:	0d1b      	lsrs	r3, r3, #20
 800b06e:	051b      	lsls	r3, r3, #20
 800b070:	b12b      	cbz	r3, 800b07e <_dtoa_r+0x7de>
 800b072:	9b08      	ldr	r3, [sp, #32]
 800b074:	3301      	adds	r3, #1
 800b076:	9308      	str	r3, [sp, #32]
 800b078:	f108 0801 	add.w	r8, r8, #1
 800b07c:	2301      	movs	r3, #1
 800b07e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 81b0 	beq.w	800b3e8 <_dtoa_r+0xb48>
 800b088:	6923      	ldr	r3, [r4, #16]
 800b08a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b08e:	6918      	ldr	r0, [r3, #16]
 800b090:	f000 fbbc 	bl	800b80c <__hi0bits>
 800b094:	f1c0 0020 	rsb	r0, r0, #32
 800b098:	9b08      	ldr	r3, [sp, #32]
 800b09a:	4418      	add	r0, r3
 800b09c:	f010 001f 	ands.w	r0, r0, #31
 800b0a0:	d077      	beq.n	800b192 <_dtoa_r+0x8f2>
 800b0a2:	f1c0 0320 	rsb	r3, r0, #32
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	dd6b      	ble.n	800b182 <_dtoa_r+0x8e2>
 800b0aa:	9b08      	ldr	r3, [sp, #32]
 800b0ac:	f1c0 001c 	rsb	r0, r0, #28
 800b0b0:	4403      	add	r3, r0
 800b0b2:	4480      	add	r8, r0
 800b0b4:	4406      	add	r6, r0
 800b0b6:	9308      	str	r3, [sp, #32]
 800b0b8:	f1b8 0f00 	cmp.w	r8, #0
 800b0bc:	dd05      	ble.n	800b0ca <_dtoa_r+0x82a>
 800b0be:	4649      	mov	r1, r9
 800b0c0:	4642      	mov	r2, r8
 800b0c2:	4658      	mov	r0, fp
 800b0c4:	f000 fd08 	bl	800bad8 <__lshift>
 800b0c8:	4681      	mov	r9, r0
 800b0ca:	9b08      	ldr	r3, [sp, #32]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	dd05      	ble.n	800b0dc <_dtoa_r+0x83c>
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4658      	mov	r0, fp
 800b0d6:	f000 fcff 	bl	800bad8 <__lshift>
 800b0da:	4604      	mov	r4, r0
 800b0dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d059      	beq.n	800b196 <_dtoa_r+0x8f6>
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	4648      	mov	r0, r9
 800b0e6:	f000 fd63 	bl	800bbb0 <__mcmp>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	da53      	bge.n	800b196 <_dtoa_r+0x8f6>
 800b0ee:	1e7b      	subs	r3, r7, #1
 800b0f0:	9304      	str	r3, [sp, #16]
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	220a      	movs	r2, #10
 800b0f8:	4658      	mov	r0, fp
 800b0fa:	f000 faf7 	bl	800b6ec <__multadd>
 800b0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b100:	4681      	mov	r9, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 8172 	beq.w	800b3ec <_dtoa_r+0xb4c>
 800b108:	2300      	movs	r3, #0
 800b10a:	4629      	mov	r1, r5
 800b10c:	220a      	movs	r2, #10
 800b10e:	4658      	mov	r0, fp
 800b110:	f000 faec 	bl	800b6ec <__multadd>
 800b114:	9b00      	ldr	r3, [sp, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	4605      	mov	r5, r0
 800b11a:	dc67      	bgt.n	800b1ec <_dtoa_r+0x94c>
 800b11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b11e:	2b02      	cmp	r3, #2
 800b120:	dc41      	bgt.n	800b1a6 <_dtoa_r+0x906>
 800b122:	e063      	b.n	800b1ec <_dtoa_r+0x94c>
 800b124:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b126:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b12a:	e746      	b.n	800afba <_dtoa_r+0x71a>
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	1e5c      	subs	r4, r3, #1
 800b130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b132:	42a3      	cmp	r3, r4
 800b134:	bfbf      	itttt	lt
 800b136:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b138:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b13a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b13c:	1ae3      	sublt	r3, r4, r3
 800b13e:	bfb4      	ite	lt
 800b140:	18d2      	addlt	r2, r2, r3
 800b142:	1b1c      	subge	r4, r3, r4
 800b144:	9b07      	ldr	r3, [sp, #28]
 800b146:	bfbc      	itt	lt
 800b148:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b14a:	2400      	movlt	r4, #0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bfb5      	itete	lt
 800b150:	eba8 0603 	sublt.w	r6, r8, r3
 800b154:	9b07      	ldrge	r3, [sp, #28]
 800b156:	2300      	movlt	r3, #0
 800b158:	4646      	movge	r6, r8
 800b15a:	e730      	b.n	800afbe <_dtoa_r+0x71e>
 800b15c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b15e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b160:	4646      	mov	r6, r8
 800b162:	e735      	b.n	800afd0 <_dtoa_r+0x730>
 800b164:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b166:	e75c      	b.n	800b022 <_dtoa_r+0x782>
 800b168:	2300      	movs	r3, #0
 800b16a:	e788      	b.n	800b07e <_dtoa_r+0x7de>
 800b16c:	3fe00000 	.word	0x3fe00000
 800b170:	40240000 	.word	0x40240000
 800b174:	40140000 	.word	0x40140000
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	e780      	b.n	800b07e <_dtoa_r+0x7de>
 800b17c:	2300      	movs	r3, #0
 800b17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b180:	e782      	b.n	800b088 <_dtoa_r+0x7e8>
 800b182:	d099      	beq.n	800b0b8 <_dtoa_r+0x818>
 800b184:	9a08      	ldr	r2, [sp, #32]
 800b186:	331c      	adds	r3, #28
 800b188:	441a      	add	r2, r3
 800b18a:	4498      	add	r8, r3
 800b18c:	441e      	add	r6, r3
 800b18e:	9208      	str	r2, [sp, #32]
 800b190:	e792      	b.n	800b0b8 <_dtoa_r+0x818>
 800b192:	4603      	mov	r3, r0
 800b194:	e7f6      	b.n	800b184 <_dtoa_r+0x8e4>
 800b196:	9b07      	ldr	r3, [sp, #28]
 800b198:	9704      	str	r7, [sp, #16]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dc20      	bgt.n	800b1e0 <_dtoa_r+0x940>
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	dd1e      	ble.n	800b1e4 <_dtoa_r+0x944>
 800b1a6:	9b00      	ldr	r3, [sp, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f47f aec0 	bne.w	800af2e <_dtoa_r+0x68e>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	2205      	movs	r2, #5
 800b1b2:	4658      	mov	r0, fp
 800b1b4:	f000 fa9a 	bl	800b6ec <__multadd>
 800b1b8:	4601      	mov	r1, r0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4648      	mov	r0, r9
 800b1be:	f000 fcf7 	bl	800bbb0 <__mcmp>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	f77f aeb3 	ble.w	800af2e <_dtoa_r+0x68e>
 800b1c8:	4656      	mov	r6, sl
 800b1ca:	2331      	movs	r3, #49	@ 0x31
 800b1cc:	f806 3b01 	strb.w	r3, [r6], #1
 800b1d0:	9b04      	ldr	r3, [sp, #16]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	9304      	str	r3, [sp, #16]
 800b1d6:	e6ae      	b.n	800af36 <_dtoa_r+0x696>
 800b1d8:	9c07      	ldr	r4, [sp, #28]
 800b1da:	9704      	str	r7, [sp, #16]
 800b1dc:	4625      	mov	r5, r4
 800b1de:	e7f3      	b.n	800b1c8 <_dtoa_r+0x928>
 800b1e0:	9b07      	ldr	r3, [sp, #28]
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f000 8104 	beq.w	800b3f4 <_dtoa_r+0xb54>
 800b1ec:	2e00      	cmp	r6, #0
 800b1ee:	dd05      	ble.n	800b1fc <_dtoa_r+0x95c>
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	4632      	mov	r2, r6
 800b1f4:	4658      	mov	r0, fp
 800b1f6:	f000 fc6f 	bl	800bad8 <__lshift>
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d05a      	beq.n	800b2b8 <_dtoa_r+0xa18>
 800b202:	6869      	ldr	r1, [r5, #4]
 800b204:	4658      	mov	r0, fp
 800b206:	f000 fa0f 	bl	800b628 <_Balloc>
 800b20a:	4606      	mov	r6, r0
 800b20c:	b928      	cbnz	r0, 800b21a <_dtoa_r+0x97a>
 800b20e:	4b84      	ldr	r3, [pc, #528]	@ (800b420 <_dtoa_r+0xb80>)
 800b210:	4602      	mov	r2, r0
 800b212:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b216:	f7ff bb5a 	b.w	800a8ce <_dtoa_r+0x2e>
 800b21a:	692a      	ldr	r2, [r5, #16]
 800b21c:	3202      	adds	r2, #2
 800b21e:	0092      	lsls	r2, r2, #2
 800b220:	f105 010c 	add.w	r1, r5, #12
 800b224:	300c      	adds	r0, #12
 800b226:	f002 f921 	bl	800d46c <memcpy>
 800b22a:	2201      	movs	r2, #1
 800b22c:	4631      	mov	r1, r6
 800b22e:	4658      	mov	r0, fp
 800b230:	f000 fc52 	bl	800bad8 <__lshift>
 800b234:	f10a 0301 	add.w	r3, sl, #1
 800b238:	9307      	str	r3, [sp, #28]
 800b23a:	9b00      	ldr	r3, [sp, #0]
 800b23c:	4453      	add	r3, sl
 800b23e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b240:	9b02      	ldr	r3, [sp, #8]
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	462f      	mov	r7, r5
 800b248:	930a      	str	r3, [sp, #40]	@ 0x28
 800b24a:	4605      	mov	r5, r0
 800b24c:	9b07      	ldr	r3, [sp, #28]
 800b24e:	4621      	mov	r1, r4
 800b250:	3b01      	subs	r3, #1
 800b252:	4648      	mov	r0, r9
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	f7ff fa99 	bl	800a78c <quorem>
 800b25a:	4639      	mov	r1, r7
 800b25c:	9002      	str	r0, [sp, #8]
 800b25e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b262:	4648      	mov	r0, r9
 800b264:	f000 fca4 	bl	800bbb0 <__mcmp>
 800b268:	462a      	mov	r2, r5
 800b26a:	9008      	str	r0, [sp, #32]
 800b26c:	4621      	mov	r1, r4
 800b26e:	4658      	mov	r0, fp
 800b270:	f000 fcba 	bl	800bbe8 <__mdiff>
 800b274:	68c2      	ldr	r2, [r0, #12]
 800b276:	4606      	mov	r6, r0
 800b278:	bb02      	cbnz	r2, 800b2bc <_dtoa_r+0xa1c>
 800b27a:	4601      	mov	r1, r0
 800b27c:	4648      	mov	r0, r9
 800b27e:	f000 fc97 	bl	800bbb0 <__mcmp>
 800b282:	4602      	mov	r2, r0
 800b284:	4631      	mov	r1, r6
 800b286:	4658      	mov	r0, fp
 800b288:	920e      	str	r2, [sp, #56]	@ 0x38
 800b28a:	f000 fa0d 	bl	800b6a8 <_Bfree>
 800b28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b290:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b292:	9e07      	ldr	r6, [sp, #28]
 800b294:	ea43 0102 	orr.w	r1, r3, r2
 800b298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b29a:	4319      	orrs	r1, r3
 800b29c:	d110      	bne.n	800b2c0 <_dtoa_r+0xa20>
 800b29e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2a2:	d029      	beq.n	800b2f8 <_dtoa_r+0xa58>
 800b2a4:	9b08      	ldr	r3, [sp, #32]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	dd02      	ble.n	800b2b0 <_dtoa_r+0xa10>
 800b2aa:	9b02      	ldr	r3, [sp, #8]
 800b2ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b2b0:	9b00      	ldr	r3, [sp, #0]
 800b2b2:	f883 8000 	strb.w	r8, [r3]
 800b2b6:	e63f      	b.n	800af38 <_dtoa_r+0x698>
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	e7bb      	b.n	800b234 <_dtoa_r+0x994>
 800b2bc:	2201      	movs	r2, #1
 800b2be:	e7e1      	b.n	800b284 <_dtoa_r+0x9e4>
 800b2c0:	9b08      	ldr	r3, [sp, #32]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	db04      	blt.n	800b2d0 <_dtoa_r+0xa30>
 800b2c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2cc:	430b      	orrs	r3, r1
 800b2ce:	d120      	bne.n	800b312 <_dtoa_r+0xa72>
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	dded      	ble.n	800b2b0 <_dtoa_r+0xa10>
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	4658      	mov	r0, fp
 800b2da:	f000 fbfd 	bl	800bad8 <__lshift>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	f000 fc65 	bl	800bbb0 <__mcmp>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	dc03      	bgt.n	800b2f2 <_dtoa_r+0xa52>
 800b2ea:	d1e1      	bne.n	800b2b0 <_dtoa_r+0xa10>
 800b2ec:	f018 0f01 	tst.w	r8, #1
 800b2f0:	d0de      	beq.n	800b2b0 <_dtoa_r+0xa10>
 800b2f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2f6:	d1d8      	bne.n	800b2aa <_dtoa_r+0xa0a>
 800b2f8:	9a00      	ldr	r2, [sp, #0]
 800b2fa:	2339      	movs	r3, #57	@ 0x39
 800b2fc:	7013      	strb	r3, [r2, #0]
 800b2fe:	4633      	mov	r3, r6
 800b300:	461e      	mov	r6, r3
 800b302:	3b01      	subs	r3, #1
 800b304:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b308:	2a39      	cmp	r2, #57	@ 0x39
 800b30a:	d052      	beq.n	800b3b2 <_dtoa_r+0xb12>
 800b30c:	3201      	adds	r2, #1
 800b30e:	701a      	strb	r2, [r3, #0]
 800b310:	e612      	b.n	800af38 <_dtoa_r+0x698>
 800b312:	2a00      	cmp	r2, #0
 800b314:	dd07      	ble.n	800b326 <_dtoa_r+0xa86>
 800b316:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b31a:	d0ed      	beq.n	800b2f8 <_dtoa_r+0xa58>
 800b31c:	9a00      	ldr	r2, [sp, #0]
 800b31e:	f108 0301 	add.w	r3, r8, #1
 800b322:	7013      	strb	r3, [r2, #0]
 800b324:	e608      	b.n	800af38 <_dtoa_r+0x698>
 800b326:	9b07      	ldr	r3, [sp, #28]
 800b328:	9a07      	ldr	r2, [sp, #28]
 800b32a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b330:	4293      	cmp	r3, r2
 800b332:	d028      	beq.n	800b386 <_dtoa_r+0xae6>
 800b334:	4649      	mov	r1, r9
 800b336:	2300      	movs	r3, #0
 800b338:	220a      	movs	r2, #10
 800b33a:	4658      	mov	r0, fp
 800b33c:	f000 f9d6 	bl	800b6ec <__multadd>
 800b340:	42af      	cmp	r7, r5
 800b342:	4681      	mov	r9, r0
 800b344:	f04f 0300 	mov.w	r3, #0
 800b348:	f04f 020a 	mov.w	r2, #10
 800b34c:	4639      	mov	r1, r7
 800b34e:	4658      	mov	r0, fp
 800b350:	d107      	bne.n	800b362 <_dtoa_r+0xac2>
 800b352:	f000 f9cb 	bl	800b6ec <__multadd>
 800b356:	4607      	mov	r7, r0
 800b358:	4605      	mov	r5, r0
 800b35a:	9b07      	ldr	r3, [sp, #28]
 800b35c:	3301      	adds	r3, #1
 800b35e:	9307      	str	r3, [sp, #28]
 800b360:	e774      	b.n	800b24c <_dtoa_r+0x9ac>
 800b362:	f000 f9c3 	bl	800b6ec <__multadd>
 800b366:	4629      	mov	r1, r5
 800b368:	4607      	mov	r7, r0
 800b36a:	2300      	movs	r3, #0
 800b36c:	220a      	movs	r2, #10
 800b36e:	4658      	mov	r0, fp
 800b370:	f000 f9bc 	bl	800b6ec <__multadd>
 800b374:	4605      	mov	r5, r0
 800b376:	e7f0      	b.n	800b35a <_dtoa_r+0xaba>
 800b378:	9b00      	ldr	r3, [sp, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bfcc      	ite	gt
 800b37e:	461e      	movgt	r6, r3
 800b380:	2601      	movle	r6, #1
 800b382:	4456      	add	r6, sl
 800b384:	2700      	movs	r7, #0
 800b386:	4649      	mov	r1, r9
 800b388:	2201      	movs	r2, #1
 800b38a:	4658      	mov	r0, fp
 800b38c:	f000 fba4 	bl	800bad8 <__lshift>
 800b390:	4621      	mov	r1, r4
 800b392:	4681      	mov	r9, r0
 800b394:	f000 fc0c 	bl	800bbb0 <__mcmp>
 800b398:	2800      	cmp	r0, #0
 800b39a:	dcb0      	bgt.n	800b2fe <_dtoa_r+0xa5e>
 800b39c:	d102      	bne.n	800b3a4 <_dtoa_r+0xb04>
 800b39e:	f018 0f01 	tst.w	r8, #1
 800b3a2:	d1ac      	bne.n	800b2fe <_dtoa_r+0xa5e>
 800b3a4:	4633      	mov	r3, r6
 800b3a6:	461e      	mov	r6, r3
 800b3a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3ac:	2a30      	cmp	r2, #48	@ 0x30
 800b3ae:	d0fa      	beq.n	800b3a6 <_dtoa_r+0xb06>
 800b3b0:	e5c2      	b.n	800af38 <_dtoa_r+0x698>
 800b3b2:	459a      	cmp	sl, r3
 800b3b4:	d1a4      	bne.n	800b300 <_dtoa_r+0xa60>
 800b3b6:	9b04      	ldr	r3, [sp, #16]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	9304      	str	r3, [sp, #16]
 800b3bc:	2331      	movs	r3, #49	@ 0x31
 800b3be:	f88a 3000 	strb.w	r3, [sl]
 800b3c2:	e5b9      	b.n	800af38 <_dtoa_r+0x698>
 800b3c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b424 <_dtoa_r+0xb84>
 800b3ca:	b11b      	cbz	r3, 800b3d4 <_dtoa_r+0xb34>
 800b3cc:	f10a 0308 	add.w	r3, sl, #8
 800b3d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	4650      	mov	r0, sl
 800b3d6:	b019      	add	sp, #100	@ 0x64
 800b3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	f77f ae37 	ble.w	800b052 <_dtoa_r+0x7b2>
 800b3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3e8:	2001      	movs	r0, #1
 800b3ea:	e655      	b.n	800b098 <_dtoa_r+0x7f8>
 800b3ec:	9b00      	ldr	r3, [sp, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f77f aed6 	ble.w	800b1a0 <_dtoa_r+0x900>
 800b3f4:	4656      	mov	r6, sl
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4648      	mov	r0, r9
 800b3fa:	f7ff f9c7 	bl	800a78c <quorem>
 800b3fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b402:	f806 8b01 	strb.w	r8, [r6], #1
 800b406:	9b00      	ldr	r3, [sp, #0]
 800b408:	eba6 020a 	sub.w	r2, r6, sl
 800b40c:	4293      	cmp	r3, r2
 800b40e:	ddb3      	ble.n	800b378 <_dtoa_r+0xad8>
 800b410:	4649      	mov	r1, r9
 800b412:	2300      	movs	r3, #0
 800b414:	220a      	movs	r2, #10
 800b416:	4658      	mov	r0, fp
 800b418:	f000 f968 	bl	800b6ec <__multadd>
 800b41c:	4681      	mov	r9, r0
 800b41e:	e7ea      	b.n	800b3f6 <_dtoa_r+0xb56>
 800b420:	0800e4a5 	.word	0x0800e4a5
 800b424:	0800e429 	.word	0x0800e429

0800b428 <_free_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4605      	mov	r5, r0
 800b42c:	2900      	cmp	r1, #0
 800b42e:	d041      	beq.n	800b4b4 <_free_r+0x8c>
 800b430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b434:	1f0c      	subs	r4, r1, #4
 800b436:	2b00      	cmp	r3, #0
 800b438:	bfb8      	it	lt
 800b43a:	18e4      	addlt	r4, r4, r3
 800b43c:	f000 f8e8 	bl	800b610 <__malloc_lock>
 800b440:	4a1d      	ldr	r2, [pc, #116]	@ (800b4b8 <_free_r+0x90>)
 800b442:	6813      	ldr	r3, [r2, #0]
 800b444:	b933      	cbnz	r3, 800b454 <_free_r+0x2c>
 800b446:	6063      	str	r3, [r4, #4]
 800b448:	6014      	str	r4, [r2, #0]
 800b44a:	4628      	mov	r0, r5
 800b44c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b450:	f000 b8e4 	b.w	800b61c <__malloc_unlock>
 800b454:	42a3      	cmp	r3, r4
 800b456:	d908      	bls.n	800b46a <_free_r+0x42>
 800b458:	6820      	ldr	r0, [r4, #0]
 800b45a:	1821      	adds	r1, r4, r0
 800b45c:	428b      	cmp	r3, r1
 800b45e:	bf01      	itttt	eq
 800b460:	6819      	ldreq	r1, [r3, #0]
 800b462:	685b      	ldreq	r3, [r3, #4]
 800b464:	1809      	addeq	r1, r1, r0
 800b466:	6021      	streq	r1, [r4, #0]
 800b468:	e7ed      	b.n	800b446 <_free_r+0x1e>
 800b46a:	461a      	mov	r2, r3
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	b10b      	cbz	r3, 800b474 <_free_r+0x4c>
 800b470:	42a3      	cmp	r3, r4
 800b472:	d9fa      	bls.n	800b46a <_free_r+0x42>
 800b474:	6811      	ldr	r1, [r2, #0]
 800b476:	1850      	adds	r0, r2, r1
 800b478:	42a0      	cmp	r0, r4
 800b47a:	d10b      	bne.n	800b494 <_free_r+0x6c>
 800b47c:	6820      	ldr	r0, [r4, #0]
 800b47e:	4401      	add	r1, r0
 800b480:	1850      	adds	r0, r2, r1
 800b482:	4283      	cmp	r3, r0
 800b484:	6011      	str	r1, [r2, #0]
 800b486:	d1e0      	bne.n	800b44a <_free_r+0x22>
 800b488:	6818      	ldr	r0, [r3, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	6053      	str	r3, [r2, #4]
 800b48e:	4408      	add	r0, r1
 800b490:	6010      	str	r0, [r2, #0]
 800b492:	e7da      	b.n	800b44a <_free_r+0x22>
 800b494:	d902      	bls.n	800b49c <_free_r+0x74>
 800b496:	230c      	movs	r3, #12
 800b498:	602b      	str	r3, [r5, #0]
 800b49a:	e7d6      	b.n	800b44a <_free_r+0x22>
 800b49c:	6820      	ldr	r0, [r4, #0]
 800b49e:	1821      	adds	r1, r4, r0
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	bf04      	itt	eq
 800b4a4:	6819      	ldreq	r1, [r3, #0]
 800b4a6:	685b      	ldreq	r3, [r3, #4]
 800b4a8:	6063      	str	r3, [r4, #4]
 800b4aa:	bf04      	itt	eq
 800b4ac:	1809      	addeq	r1, r1, r0
 800b4ae:	6021      	streq	r1, [r4, #0]
 800b4b0:	6054      	str	r4, [r2, #4]
 800b4b2:	e7ca      	b.n	800b44a <_free_r+0x22>
 800b4b4:	bd38      	pop	{r3, r4, r5, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20001988 	.word	0x20001988

0800b4bc <malloc>:
 800b4bc:	4b02      	ldr	r3, [pc, #8]	@ (800b4c8 <malloc+0xc>)
 800b4be:	4601      	mov	r1, r0
 800b4c0:	6818      	ldr	r0, [r3, #0]
 800b4c2:	f000 b825 	b.w	800b510 <_malloc_r>
 800b4c6:	bf00      	nop
 800b4c8:	20000f5c 	.word	0x20000f5c

0800b4cc <sbrk_aligned>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	4e0f      	ldr	r6, [pc, #60]	@ (800b50c <sbrk_aligned+0x40>)
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	6831      	ldr	r1, [r6, #0]
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	b911      	cbnz	r1, 800b4de <sbrk_aligned+0x12>
 800b4d8:	f001 ffb8 	bl	800d44c <_sbrk_r>
 800b4dc:	6030      	str	r0, [r6, #0]
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f001 ffb3 	bl	800d44c <_sbrk_r>
 800b4e6:	1c43      	adds	r3, r0, #1
 800b4e8:	d103      	bne.n	800b4f2 <sbrk_aligned+0x26>
 800b4ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	bd70      	pop	{r4, r5, r6, pc}
 800b4f2:	1cc4      	adds	r4, r0, #3
 800b4f4:	f024 0403 	bic.w	r4, r4, #3
 800b4f8:	42a0      	cmp	r0, r4
 800b4fa:	d0f8      	beq.n	800b4ee <sbrk_aligned+0x22>
 800b4fc:	1a21      	subs	r1, r4, r0
 800b4fe:	4628      	mov	r0, r5
 800b500:	f001 ffa4 	bl	800d44c <_sbrk_r>
 800b504:	3001      	adds	r0, #1
 800b506:	d1f2      	bne.n	800b4ee <sbrk_aligned+0x22>
 800b508:	e7ef      	b.n	800b4ea <sbrk_aligned+0x1e>
 800b50a:	bf00      	nop
 800b50c:	20001984 	.word	0x20001984

0800b510 <_malloc_r>:
 800b510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b514:	1ccd      	adds	r5, r1, #3
 800b516:	f025 0503 	bic.w	r5, r5, #3
 800b51a:	3508      	adds	r5, #8
 800b51c:	2d0c      	cmp	r5, #12
 800b51e:	bf38      	it	cc
 800b520:	250c      	movcc	r5, #12
 800b522:	2d00      	cmp	r5, #0
 800b524:	4606      	mov	r6, r0
 800b526:	db01      	blt.n	800b52c <_malloc_r+0x1c>
 800b528:	42a9      	cmp	r1, r5
 800b52a:	d904      	bls.n	800b536 <_malloc_r+0x26>
 800b52c:	230c      	movs	r3, #12
 800b52e:	6033      	str	r3, [r6, #0]
 800b530:	2000      	movs	r0, #0
 800b532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b60c <_malloc_r+0xfc>
 800b53a:	f000 f869 	bl	800b610 <__malloc_lock>
 800b53e:	f8d8 3000 	ldr.w	r3, [r8]
 800b542:	461c      	mov	r4, r3
 800b544:	bb44      	cbnz	r4, 800b598 <_malloc_r+0x88>
 800b546:	4629      	mov	r1, r5
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff ffbf 	bl	800b4cc <sbrk_aligned>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	4604      	mov	r4, r0
 800b552:	d158      	bne.n	800b606 <_malloc_r+0xf6>
 800b554:	f8d8 4000 	ldr.w	r4, [r8]
 800b558:	4627      	mov	r7, r4
 800b55a:	2f00      	cmp	r7, #0
 800b55c:	d143      	bne.n	800b5e6 <_malloc_r+0xd6>
 800b55e:	2c00      	cmp	r4, #0
 800b560:	d04b      	beq.n	800b5fa <_malloc_r+0xea>
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	4639      	mov	r1, r7
 800b566:	4630      	mov	r0, r6
 800b568:	eb04 0903 	add.w	r9, r4, r3
 800b56c:	f001 ff6e 	bl	800d44c <_sbrk_r>
 800b570:	4581      	cmp	r9, r0
 800b572:	d142      	bne.n	800b5fa <_malloc_r+0xea>
 800b574:	6821      	ldr	r1, [r4, #0]
 800b576:	1a6d      	subs	r5, r5, r1
 800b578:	4629      	mov	r1, r5
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ffa6 	bl	800b4cc <sbrk_aligned>
 800b580:	3001      	adds	r0, #1
 800b582:	d03a      	beq.n	800b5fa <_malloc_r+0xea>
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	442b      	add	r3, r5
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	f8d8 3000 	ldr.w	r3, [r8]
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	bb62      	cbnz	r2, 800b5ec <_malloc_r+0xdc>
 800b592:	f8c8 7000 	str.w	r7, [r8]
 800b596:	e00f      	b.n	800b5b8 <_malloc_r+0xa8>
 800b598:	6822      	ldr	r2, [r4, #0]
 800b59a:	1b52      	subs	r2, r2, r5
 800b59c:	d420      	bmi.n	800b5e0 <_malloc_r+0xd0>
 800b59e:	2a0b      	cmp	r2, #11
 800b5a0:	d917      	bls.n	800b5d2 <_malloc_r+0xc2>
 800b5a2:	1961      	adds	r1, r4, r5
 800b5a4:	42a3      	cmp	r3, r4
 800b5a6:	6025      	str	r5, [r4, #0]
 800b5a8:	bf18      	it	ne
 800b5aa:	6059      	strne	r1, [r3, #4]
 800b5ac:	6863      	ldr	r3, [r4, #4]
 800b5ae:	bf08      	it	eq
 800b5b0:	f8c8 1000 	streq.w	r1, [r8]
 800b5b4:	5162      	str	r2, [r4, r5]
 800b5b6:	604b      	str	r3, [r1, #4]
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f000 f82f 	bl	800b61c <__malloc_unlock>
 800b5be:	f104 000b 	add.w	r0, r4, #11
 800b5c2:	1d23      	adds	r3, r4, #4
 800b5c4:	f020 0007 	bic.w	r0, r0, #7
 800b5c8:	1ac2      	subs	r2, r0, r3
 800b5ca:	bf1c      	itt	ne
 800b5cc:	1a1b      	subne	r3, r3, r0
 800b5ce:	50a3      	strne	r3, [r4, r2]
 800b5d0:	e7af      	b.n	800b532 <_malloc_r+0x22>
 800b5d2:	6862      	ldr	r2, [r4, #4]
 800b5d4:	42a3      	cmp	r3, r4
 800b5d6:	bf0c      	ite	eq
 800b5d8:	f8c8 2000 	streq.w	r2, [r8]
 800b5dc:	605a      	strne	r2, [r3, #4]
 800b5de:	e7eb      	b.n	800b5b8 <_malloc_r+0xa8>
 800b5e0:	4623      	mov	r3, r4
 800b5e2:	6864      	ldr	r4, [r4, #4]
 800b5e4:	e7ae      	b.n	800b544 <_malloc_r+0x34>
 800b5e6:	463c      	mov	r4, r7
 800b5e8:	687f      	ldr	r7, [r7, #4]
 800b5ea:	e7b6      	b.n	800b55a <_malloc_r+0x4a>
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	42a3      	cmp	r3, r4
 800b5f2:	d1fb      	bne.n	800b5ec <_malloc_r+0xdc>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	6053      	str	r3, [r2, #4]
 800b5f8:	e7de      	b.n	800b5b8 <_malloc_r+0xa8>
 800b5fa:	230c      	movs	r3, #12
 800b5fc:	6033      	str	r3, [r6, #0]
 800b5fe:	4630      	mov	r0, r6
 800b600:	f000 f80c 	bl	800b61c <__malloc_unlock>
 800b604:	e794      	b.n	800b530 <_malloc_r+0x20>
 800b606:	6005      	str	r5, [r0, #0]
 800b608:	e7d6      	b.n	800b5b8 <_malloc_r+0xa8>
 800b60a:	bf00      	nop
 800b60c:	20001988 	.word	0x20001988

0800b610 <__malloc_lock>:
 800b610:	4801      	ldr	r0, [pc, #4]	@ (800b618 <__malloc_lock+0x8>)
 800b612:	f7ff b8b2 	b.w	800a77a <__retarget_lock_acquire_recursive>
 800b616:	bf00      	nop
 800b618:	20001980 	.word	0x20001980

0800b61c <__malloc_unlock>:
 800b61c:	4801      	ldr	r0, [pc, #4]	@ (800b624 <__malloc_unlock+0x8>)
 800b61e:	f7ff b8ad 	b.w	800a77c <__retarget_lock_release_recursive>
 800b622:	bf00      	nop
 800b624:	20001980 	.word	0x20001980

0800b628 <_Balloc>:
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	69c6      	ldr	r6, [r0, #28]
 800b62c:	4604      	mov	r4, r0
 800b62e:	460d      	mov	r5, r1
 800b630:	b976      	cbnz	r6, 800b650 <_Balloc+0x28>
 800b632:	2010      	movs	r0, #16
 800b634:	f7ff ff42 	bl	800b4bc <malloc>
 800b638:	4602      	mov	r2, r0
 800b63a:	61e0      	str	r0, [r4, #28]
 800b63c:	b920      	cbnz	r0, 800b648 <_Balloc+0x20>
 800b63e:	4b18      	ldr	r3, [pc, #96]	@ (800b6a0 <_Balloc+0x78>)
 800b640:	4818      	ldr	r0, [pc, #96]	@ (800b6a4 <_Balloc+0x7c>)
 800b642:	216b      	movs	r1, #107	@ 0x6b
 800b644:	f001 ff28 	bl	800d498 <__assert_func>
 800b648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b64c:	6006      	str	r6, [r0, #0]
 800b64e:	60c6      	str	r6, [r0, #12]
 800b650:	69e6      	ldr	r6, [r4, #28]
 800b652:	68f3      	ldr	r3, [r6, #12]
 800b654:	b183      	cbz	r3, 800b678 <_Balloc+0x50>
 800b656:	69e3      	ldr	r3, [r4, #28]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b65e:	b9b8      	cbnz	r0, 800b690 <_Balloc+0x68>
 800b660:	2101      	movs	r1, #1
 800b662:	fa01 f605 	lsl.w	r6, r1, r5
 800b666:	1d72      	adds	r2, r6, #5
 800b668:	0092      	lsls	r2, r2, #2
 800b66a:	4620      	mov	r0, r4
 800b66c:	f001 ff32 	bl	800d4d4 <_calloc_r>
 800b670:	b160      	cbz	r0, 800b68c <_Balloc+0x64>
 800b672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b676:	e00e      	b.n	800b696 <_Balloc+0x6e>
 800b678:	2221      	movs	r2, #33	@ 0x21
 800b67a:	2104      	movs	r1, #4
 800b67c:	4620      	mov	r0, r4
 800b67e:	f001 ff29 	bl	800d4d4 <_calloc_r>
 800b682:	69e3      	ldr	r3, [r4, #28]
 800b684:	60f0      	str	r0, [r6, #12]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e4      	bne.n	800b656 <_Balloc+0x2e>
 800b68c:	2000      	movs	r0, #0
 800b68e:	bd70      	pop	{r4, r5, r6, pc}
 800b690:	6802      	ldr	r2, [r0, #0]
 800b692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b696:	2300      	movs	r3, #0
 800b698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b69c:	e7f7      	b.n	800b68e <_Balloc+0x66>
 800b69e:	bf00      	nop
 800b6a0:	0800e436 	.word	0x0800e436
 800b6a4:	0800e4b6 	.word	0x0800e4b6

0800b6a8 <_Bfree>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	69c6      	ldr	r6, [r0, #28]
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	b976      	cbnz	r6, 800b6d0 <_Bfree+0x28>
 800b6b2:	2010      	movs	r0, #16
 800b6b4:	f7ff ff02 	bl	800b4bc <malloc>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	61e8      	str	r0, [r5, #28]
 800b6bc:	b920      	cbnz	r0, 800b6c8 <_Bfree+0x20>
 800b6be:	4b09      	ldr	r3, [pc, #36]	@ (800b6e4 <_Bfree+0x3c>)
 800b6c0:	4809      	ldr	r0, [pc, #36]	@ (800b6e8 <_Bfree+0x40>)
 800b6c2:	218f      	movs	r1, #143	@ 0x8f
 800b6c4:	f001 fee8 	bl	800d498 <__assert_func>
 800b6c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6cc:	6006      	str	r6, [r0, #0]
 800b6ce:	60c6      	str	r6, [r0, #12]
 800b6d0:	b13c      	cbz	r4, 800b6e2 <_Bfree+0x3a>
 800b6d2:	69eb      	ldr	r3, [r5, #28]
 800b6d4:	6862      	ldr	r2, [r4, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6dc:	6021      	str	r1, [r4, #0]
 800b6de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6e2:	bd70      	pop	{r4, r5, r6, pc}
 800b6e4:	0800e436 	.word	0x0800e436
 800b6e8:	0800e4b6 	.word	0x0800e4b6

0800b6ec <__multadd>:
 800b6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f0:	690d      	ldr	r5, [r1, #16]
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	461e      	mov	r6, r3
 800b6f8:	f101 0c14 	add.w	ip, r1, #20
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	f8dc 3000 	ldr.w	r3, [ip]
 800b702:	b299      	uxth	r1, r3
 800b704:	fb02 6101 	mla	r1, r2, r1, r6
 800b708:	0c1e      	lsrs	r6, r3, #16
 800b70a:	0c0b      	lsrs	r3, r1, #16
 800b70c:	fb02 3306 	mla	r3, r2, r6, r3
 800b710:	b289      	uxth	r1, r1
 800b712:	3001      	adds	r0, #1
 800b714:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b718:	4285      	cmp	r5, r0
 800b71a:	f84c 1b04 	str.w	r1, [ip], #4
 800b71e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b722:	dcec      	bgt.n	800b6fe <__multadd+0x12>
 800b724:	b30e      	cbz	r6, 800b76a <__multadd+0x7e>
 800b726:	68a3      	ldr	r3, [r4, #8]
 800b728:	42ab      	cmp	r3, r5
 800b72a:	dc19      	bgt.n	800b760 <__multadd+0x74>
 800b72c:	6861      	ldr	r1, [r4, #4]
 800b72e:	4638      	mov	r0, r7
 800b730:	3101      	adds	r1, #1
 800b732:	f7ff ff79 	bl	800b628 <_Balloc>
 800b736:	4680      	mov	r8, r0
 800b738:	b928      	cbnz	r0, 800b746 <__multadd+0x5a>
 800b73a:	4602      	mov	r2, r0
 800b73c:	4b0c      	ldr	r3, [pc, #48]	@ (800b770 <__multadd+0x84>)
 800b73e:	480d      	ldr	r0, [pc, #52]	@ (800b774 <__multadd+0x88>)
 800b740:	21ba      	movs	r1, #186	@ 0xba
 800b742:	f001 fea9 	bl	800d498 <__assert_func>
 800b746:	6922      	ldr	r2, [r4, #16]
 800b748:	3202      	adds	r2, #2
 800b74a:	f104 010c 	add.w	r1, r4, #12
 800b74e:	0092      	lsls	r2, r2, #2
 800b750:	300c      	adds	r0, #12
 800b752:	f001 fe8b 	bl	800d46c <memcpy>
 800b756:	4621      	mov	r1, r4
 800b758:	4638      	mov	r0, r7
 800b75a:	f7ff ffa5 	bl	800b6a8 <_Bfree>
 800b75e:	4644      	mov	r4, r8
 800b760:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b764:	3501      	adds	r5, #1
 800b766:	615e      	str	r6, [r3, #20]
 800b768:	6125      	str	r5, [r4, #16]
 800b76a:	4620      	mov	r0, r4
 800b76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b770:	0800e4a5 	.word	0x0800e4a5
 800b774:	0800e4b6 	.word	0x0800e4b6

0800b778 <__s2b>:
 800b778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b77c:	460c      	mov	r4, r1
 800b77e:	4615      	mov	r5, r2
 800b780:	461f      	mov	r7, r3
 800b782:	2209      	movs	r2, #9
 800b784:	3308      	adds	r3, #8
 800b786:	4606      	mov	r6, r0
 800b788:	fb93 f3f2 	sdiv	r3, r3, r2
 800b78c:	2100      	movs	r1, #0
 800b78e:	2201      	movs	r2, #1
 800b790:	429a      	cmp	r2, r3
 800b792:	db09      	blt.n	800b7a8 <__s2b+0x30>
 800b794:	4630      	mov	r0, r6
 800b796:	f7ff ff47 	bl	800b628 <_Balloc>
 800b79a:	b940      	cbnz	r0, 800b7ae <__s2b+0x36>
 800b79c:	4602      	mov	r2, r0
 800b79e:	4b19      	ldr	r3, [pc, #100]	@ (800b804 <__s2b+0x8c>)
 800b7a0:	4819      	ldr	r0, [pc, #100]	@ (800b808 <__s2b+0x90>)
 800b7a2:	21d3      	movs	r1, #211	@ 0xd3
 800b7a4:	f001 fe78 	bl	800d498 <__assert_func>
 800b7a8:	0052      	lsls	r2, r2, #1
 800b7aa:	3101      	adds	r1, #1
 800b7ac:	e7f0      	b.n	800b790 <__s2b+0x18>
 800b7ae:	9b08      	ldr	r3, [sp, #32]
 800b7b0:	6143      	str	r3, [r0, #20]
 800b7b2:	2d09      	cmp	r5, #9
 800b7b4:	f04f 0301 	mov.w	r3, #1
 800b7b8:	6103      	str	r3, [r0, #16]
 800b7ba:	dd16      	ble.n	800b7ea <__s2b+0x72>
 800b7bc:	f104 0909 	add.w	r9, r4, #9
 800b7c0:	46c8      	mov	r8, r9
 800b7c2:	442c      	add	r4, r5
 800b7c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b7c8:	4601      	mov	r1, r0
 800b7ca:	3b30      	subs	r3, #48	@ 0x30
 800b7cc:	220a      	movs	r2, #10
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f7ff ff8c 	bl	800b6ec <__multadd>
 800b7d4:	45a0      	cmp	r8, r4
 800b7d6:	d1f5      	bne.n	800b7c4 <__s2b+0x4c>
 800b7d8:	f1a5 0408 	sub.w	r4, r5, #8
 800b7dc:	444c      	add	r4, r9
 800b7de:	1b2d      	subs	r5, r5, r4
 800b7e0:	1963      	adds	r3, r4, r5
 800b7e2:	42bb      	cmp	r3, r7
 800b7e4:	db04      	blt.n	800b7f0 <__s2b+0x78>
 800b7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ea:	340a      	adds	r4, #10
 800b7ec:	2509      	movs	r5, #9
 800b7ee:	e7f6      	b.n	800b7de <__s2b+0x66>
 800b7f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b7f4:	4601      	mov	r1, r0
 800b7f6:	3b30      	subs	r3, #48	@ 0x30
 800b7f8:	220a      	movs	r2, #10
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f7ff ff76 	bl	800b6ec <__multadd>
 800b800:	e7ee      	b.n	800b7e0 <__s2b+0x68>
 800b802:	bf00      	nop
 800b804:	0800e4a5 	.word	0x0800e4a5
 800b808:	0800e4b6 	.word	0x0800e4b6

0800b80c <__hi0bits>:
 800b80c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b810:	4603      	mov	r3, r0
 800b812:	bf36      	itet	cc
 800b814:	0403      	lslcc	r3, r0, #16
 800b816:	2000      	movcs	r0, #0
 800b818:	2010      	movcc	r0, #16
 800b81a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b81e:	bf3c      	itt	cc
 800b820:	021b      	lslcc	r3, r3, #8
 800b822:	3008      	addcc	r0, #8
 800b824:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b828:	bf3c      	itt	cc
 800b82a:	011b      	lslcc	r3, r3, #4
 800b82c:	3004      	addcc	r0, #4
 800b82e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b832:	bf3c      	itt	cc
 800b834:	009b      	lslcc	r3, r3, #2
 800b836:	3002      	addcc	r0, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	db05      	blt.n	800b848 <__hi0bits+0x3c>
 800b83c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b840:	f100 0001 	add.w	r0, r0, #1
 800b844:	bf08      	it	eq
 800b846:	2020      	moveq	r0, #32
 800b848:	4770      	bx	lr

0800b84a <__lo0bits>:
 800b84a:	6803      	ldr	r3, [r0, #0]
 800b84c:	4602      	mov	r2, r0
 800b84e:	f013 0007 	ands.w	r0, r3, #7
 800b852:	d00b      	beq.n	800b86c <__lo0bits+0x22>
 800b854:	07d9      	lsls	r1, r3, #31
 800b856:	d421      	bmi.n	800b89c <__lo0bits+0x52>
 800b858:	0798      	lsls	r0, r3, #30
 800b85a:	bf49      	itett	mi
 800b85c:	085b      	lsrmi	r3, r3, #1
 800b85e:	089b      	lsrpl	r3, r3, #2
 800b860:	2001      	movmi	r0, #1
 800b862:	6013      	strmi	r3, [r2, #0]
 800b864:	bf5c      	itt	pl
 800b866:	6013      	strpl	r3, [r2, #0]
 800b868:	2002      	movpl	r0, #2
 800b86a:	4770      	bx	lr
 800b86c:	b299      	uxth	r1, r3
 800b86e:	b909      	cbnz	r1, 800b874 <__lo0bits+0x2a>
 800b870:	0c1b      	lsrs	r3, r3, #16
 800b872:	2010      	movs	r0, #16
 800b874:	b2d9      	uxtb	r1, r3
 800b876:	b909      	cbnz	r1, 800b87c <__lo0bits+0x32>
 800b878:	3008      	adds	r0, #8
 800b87a:	0a1b      	lsrs	r3, r3, #8
 800b87c:	0719      	lsls	r1, r3, #28
 800b87e:	bf04      	itt	eq
 800b880:	091b      	lsreq	r3, r3, #4
 800b882:	3004      	addeq	r0, #4
 800b884:	0799      	lsls	r1, r3, #30
 800b886:	bf04      	itt	eq
 800b888:	089b      	lsreq	r3, r3, #2
 800b88a:	3002      	addeq	r0, #2
 800b88c:	07d9      	lsls	r1, r3, #31
 800b88e:	d403      	bmi.n	800b898 <__lo0bits+0x4e>
 800b890:	085b      	lsrs	r3, r3, #1
 800b892:	f100 0001 	add.w	r0, r0, #1
 800b896:	d003      	beq.n	800b8a0 <__lo0bits+0x56>
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	4770      	bx	lr
 800b89c:	2000      	movs	r0, #0
 800b89e:	4770      	bx	lr
 800b8a0:	2020      	movs	r0, #32
 800b8a2:	4770      	bx	lr

0800b8a4 <__i2b>:
 800b8a4:	b510      	push	{r4, lr}
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	2101      	movs	r1, #1
 800b8aa:	f7ff febd 	bl	800b628 <_Balloc>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	b928      	cbnz	r0, 800b8be <__i2b+0x1a>
 800b8b2:	4b05      	ldr	r3, [pc, #20]	@ (800b8c8 <__i2b+0x24>)
 800b8b4:	4805      	ldr	r0, [pc, #20]	@ (800b8cc <__i2b+0x28>)
 800b8b6:	f240 1145 	movw	r1, #325	@ 0x145
 800b8ba:	f001 fded 	bl	800d498 <__assert_func>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	6144      	str	r4, [r0, #20]
 800b8c2:	6103      	str	r3, [r0, #16]
 800b8c4:	bd10      	pop	{r4, pc}
 800b8c6:	bf00      	nop
 800b8c8:	0800e4a5 	.word	0x0800e4a5
 800b8cc:	0800e4b6 	.word	0x0800e4b6

0800b8d0 <__multiply>:
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	4614      	mov	r4, r2
 800b8d6:	690a      	ldr	r2, [r1, #16]
 800b8d8:	6923      	ldr	r3, [r4, #16]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	bfa8      	it	ge
 800b8de:	4623      	movge	r3, r4
 800b8e0:	460f      	mov	r7, r1
 800b8e2:	bfa4      	itt	ge
 800b8e4:	460c      	movge	r4, r1
 800b8e6:	461f      	movge	r7, r3
 800b8e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b8ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b8f0:	68a3      	ldr	r3, [r4, #8]
 800b8f2:	6861      	ldr	r1, [r4, #4]
 800b8f4:	eb0a 0609 	add.w	r6, sl, r9
 800b8f8:	42b3      	cmp	r3, r6
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	bfb8      	it	lt
 800b8fe:	3101      	addlt	r1, #1
 800b900:	f7ff fe92 	bl	800b628 <_Balloc>
 800b904:	b930      	cbnz	r0, 800b914 <__multiply+0x44>
 800b906:	4602      	mov	r2, r0
 800b908:	4b44      	ldr	r3, [pc, #272]	@ (800ba1c <__multiply+0x14c>)
 800b90a:	4845      	ldr	r0, [pc, #276]	@ (800ba20 <__multiply+0x150>)
 800b90c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b910:	f001 fdc2 	bl	800d498 <__assert_func>
 800b914:	f100 0514 	add.w	r5, r0, #20
 800b918:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b91c:	462b      	mov	r3, r5
 800b91e:	2200      	movs	r2, #0
 800b920:	4543      	cmp	r3, r8
 800b922:	d321      	bcc.n	800b968 <__multiply+0x98>
 800b924:	f107 0114 	add.w	r1, r7, #20
 800b928:	f104 0214 	add.w	r2, r4, #20
 800b92c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b930:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b934:	9302      	str	r3, [sp, #8]
 800b936:	1b13      	subs	r3, r2, r4
 800b938:	3b15      	subs	r3, #21
 800b93a:	f023 0303 	bic.w	r3, r3, #3
 800b93e:	3304      	adds	r3, #4
 800b940:	f104 0715 	add.w	r7, r4, #21
 800b944:	42ba      	cmp	r2, r7
 800b946:	bf38      	it	cc
 800b948:	2304      	movcc	r3, #4
 800b94a:	9301      	str	r3, [sp, #4]
 800b94c:	9b02      	ldr	r3, [sp, #8]
 800b94e:	9103      	str	r1, [sp, #12]
 800b950:	428b      	cmp	r3, r1
 800b952:	d80c      	bhi.n	800b96e <__multiply+0x9e>
 800b954:	2e00      	cmp	r6, #0
 800b956:	dd03      	ble.n	800b960 <__multiply+0x90>
 800b958:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d05b      	beq.n	800ba18 <__multiply+0x148>
 800b960:	6106      	str	r6, [r0, #16]
 800b962:	b005      	add	sp, #20
 800b964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b968:	f843 2b04 	str.w	r2, [r3], #4
 800b96c:	e7d8      	b.n	800b920 <__multiply+0x50>
 800b96e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b972:	f1ba 0f00 	cmp.w	sl, #0
 800b976:	d024      	beq.n	800b9c2 <__multiply+0xf2>
 800b978:	f104 0e14 	add.w	lr, r4, #20
 800b97c:	46a9      	mov	r9, r5
 800b97e:	f04f 0c00 	mov.w	ip, #0
 800b982:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b986:	f8d9 3000 	ldr.w	r3, [r9]
 800b98a:	fa1f fb87 	uxth.w	fp, r7
 800b98e:	b29b      	uxth	r3, r3
 800b990:	fb0a 330b 	mla	r3, sl, fp, r3
 800b994:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b998:	f8d9 7000 	ldr.w	r7, [r9]
 800b99c:	4463      	add	r3, ip
 800b99e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b9a2:	fb0a c70b 	mla	r7, sl, fp, ip
 800b9a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b9b0:	4572      	cmp	r2, lr
 800b9b2:	f849 3b04 	str.w	r3, [r9], #4
 800b9b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b9ba:	d8e2      	bhi.n	800b982 <__multiply+0xb2>
 800b9bc:	9b01      	ldr	r3, [sp, #4]
 800b9be:	f845 c003 	str.w	ip, [r5, r3]
 800b9c2:	9b03      	ldr	r3, [sp, #12]
 800b9c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b9c8:	3104      	adds	r1, #4
 800b9ca:	f1b9 0f00 	cmp.w	r9, #0
 800b9ce:	d021      	beq.n	800ba14 <__multiply+0x144>
 800b9d0:	682b      	ldr	r3, [r5, #0]
 800b9d2:	f104 0c14 	add.w	ip, r4, #20
 800b9d6:	46ae      	mov	lr, r5
 800b9d8:	f04f 0a00 	mov.w	sl, #0
 800b9dc:	f8bc b000 	ldrh.w	fp, [ip]
 800b9e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b9e4:	fb09 770b 	mla	r7, r9, fp, r7
 800b9e8:	4457      	add	r7, sl
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b9f0:	f84e 3b04 	str.w	r3, [lr], #4
 800b9f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9fc:	f8be 3000 	ldrh.w	r3, [lr]
 800ba00:	fb09 330a 	mla	r3, r9, sl, r3
 800ba04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ba08:	4562      	cmp	r2, ip
 800ba0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba0e:	d8e5      	bhi.n	800b9dc <__multiply+0x10c>
 800ba10:	9f01      	ldr	r7, [sp, #4]
 800ba12:	51eb      	str	r3, [r5, r7]
 800ba14:	3504      	adds	r5, #4
 800ba16:	e799      	b.n	800b94c <__multiply+0x7c>
 800ba18:	3e01      	subs	r6, #1
 800ba1a:	e79b      	b.n	800b954 <__multiply+0x84>
 800ba1c:	0800e4a5 	.word	0x0800e4a5
 800ba20:	0800e4b6 	.word	0x0800e4b6

0800ba24 <__pow5mult>:
 800ba24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba28:	4615      	mov	r5, r2
 800ba2a:	f012 0203 	ands.w	r2, r2, #3
 800ba2e:	4607      	mov	r7, r0
 800ba30:	460e      	mov	r6, r1
 800ba32:	d007      	beq.n	800ba44 <__pow5mult+0x20>
 800ba34:	4c25      	ldr	r4, [pc, #148]	@ (800bacc <__pow5mult+0xa8>)
 800ba36:	3a01      	subs	r2, #1
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba3e:	f7ff fe55 	bl	800b6ec <__multadd>
 800ba42:	4606      	mov	r6, r0
 800ba44:	10ad      	asrs	r5, r5, #2
 800ba46:	d03d      	beq.n	800bac4 <__pow5mult+0xa0>
 800ba48:	69fc      	ldr	r4, [r7, #28]
 800ba4a:	b97c      	cbnz	r4, 800ba6c <__pow5mult+0x48>
 800ba4c:	2010      	movs	r0, #16
 800ba4e:	f7ff fd35 	bl	800b4bc <malloc>
 800ba52:	4602      	mov	r2, r0
 800ba54:	61f8      	str	r0, [r7, #28]
 800ba56:	b928      	cbnz	r0, 800ba64 <__pow5mult+0x40>
 800ba58:	4b1d      	ldr	r3, [pc, #116]	@ (800bad0 <__pow5mult+0xac>)
 800ba5a:	481e      	ldr	r0, [pc, #120]	@ (800bad4 <__pow5mult+0xb0>)
 800ba5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ba60:	f001 fd1a 	bl	800d498 <__assert_func>
 800ba64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba68:	6004      	str	r4, [r0, #0]
 800ba6a:	60c4      	str	r4, [r0, #12]
 800ba6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ba70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba74:	b94c      	cbnz	r4, 800ba8a <__pow5mult+0x66>
 800ba76:	f240 2171 	movw	r1, #625	@ 0x271
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	f7ff ff12 	bl	800b8a4 <__i2b>
 800ba80:	2300      	movs	r3, #0
 800ba82:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba86:	4604      	mov	r4, r0
 800ba88:	6003      	str	r3, [r0, #0]
 800ba8a:	f04f 0900 	mov.w	r9, #0
 800ba8e:	07eb      	lsls	r3, r5, #31
 800ba90:	d50a      	bpl.n	800baa8 <__pow5mult+0x84>
 800ba92:	4631      	mov	r1, r6
 800ba94:	4622      	mov	r2, r4
 800ba96:	4638      	mov	r0, r7
 800ba98:	f7ff ff1a 	bl	800b8d0 <__multiply>
 800ba9c:	4631      	mov	r1, r6
 800ba9e:	4680      	mov	r8, r0
 800baa0:	4638      	mov	r0, r7
 800baa2:	f7ff fe01 	bl	800b6a8 <_Bfree>
 800baa6:	4646      	mov	r6, r8
 800baa8:	106d      	asrs	r5, r5, #1
 800baaa:	d00b      	beq.n	800bac4 <__pow5mult+0xa0>
 800baac:	6820      	ldr	r0, [r4, #0]
 800baae:	b938      	cbnz	r0, 800bac0 <__pow5mult+0x9c>
 800bab0:	4622      	mov	r2, r4
 800bab2:	4621      	mov	r1, r4
 800bab4:	4638      	mov	r0, r7
 800bab6:	f7ff ff0b 	bl	800b8d0 <__multiply>
 800baba:	6020      	str	r0, [r4, #0]
 800babc:	f8c0 9000 	str.w	r9, [r0]
 800bac0:	4604      	mov	r4, r0
 800bac2:	e7e4      	b.n	800ba8e <__pow5mult+0x6a>
 800bac4:	4630      	mov	r0, r6
 800bac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baca:	bf00      	nop
 800bacc:	0800e510 	.word	0x0800e510
 800bad0:	0800e436 	.word	0x0800e436
 800bad4:	0800e4b6 	.word	0x0800e4b6

0800bad8 <__lshift>:
 800bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	460c      	mov	r4, r1
 800bade:	6849      	ldr	r1, [r1, #4]
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bae6:	68a3      	ldr	r3, [r4, #8]
 800bae8:	4607      	mov	r7, r0
 800baea:	4691      	mov	r9, r2
 800baec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800baf0:	f108 0601 	add.w	r6, r8, #1
 800baf4:	42b3      	cmp	r3, r6
 800baf6:	db0b      	blt.n	800bb10 <__lshift+0x38>
 800baf8:	4638      	mov	r0, r7
 800bafa:	f7ff fd95 	bl	800b628 <_Balloc>
 800bafe:	4605      	mov	r5, r0
 800bb00:	b948      	cbnz	r0, 800bb16 <__lshift+0x3e>
 800bb02:	4602      	mov	r2, r0
 800bb04:	4b28      	ldr	r3, [pc, #160]	@ (800bba8 <__lshift+0xd0>)
 800bb06:	4829      	ldr	r0, [pc, #164]	@ (800bbac <__lshift+0xd4>)
 800bb08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb0c:	f001 fcc4 	bl	800d498 <__assert_func>
 800bb10:	3101      	adds	r1, #1
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	e7ee      	b.n	800baf4 <__lshift+0x1c>
 800bb16:	2300      	movs	r3, #0
 800bb18:	f100 0114 	add.w	r1, r0, #20
 800bb1c:	f100 0210 	add.w	r2, r0, #16
 800bb20:	4618      	mov	r0, r3
 800bb22:	4553      	cmp	r3, sl
 800bb24:	db33      	blt.n	800bb8e <__lshift+0xb6>
 800bb26:	6920      	ldr	r0, [r4, #16]
 800bb28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb2c:	f104 0314 	add.w	r3, r4, #20
 800bb30:	f019 091f 	ands.w	r9, r9, #31
 800bb34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb3c:	d02b      	beq.n	800bb96 <__lshift+0xbe>
 800bb3e:	f1c9 0e20 	rsb	lr, r9, #32
 800bb42:	468a      	mov	sl, r1
 800bb44:	2200      	movs	r2, #0
 800bb46:	6818      	ldr	r0, [r3, #0]
 800bb48:	fa00 f009 	lsl.w	r0, r0, r9
 800bb4c:	4310      	orrs	r0, r2
 800bb4e:	f84a 0b04 	str.w	r0, [sl], #4
 800bb52:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb56:	459c      	cmp	ip, r3
 800bb58:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb5c:	d8f3      	bhi.n	800bb46 <__lshift+0x6e>
 800bb5e:	ebac 0304 	sub.w	r3, ip, r4
 800bb62:	3b15      	subs	r3, #21
 800bb64:	f023 0303 	bic.w	r3, r3, #3
 800bb68:	3304      	adds	r3, #4
 800bb6a:	f104 0015 	add.w	r0, r4, #21
 800bb6e:	4584      	cmp	ip, r0
 800bb70:	bf38      	it	cc
 800bb72:	2304      	movcc	r3, #4
 800bb74:	50ca      	str	r2, [r1, r3]
 800bb76:	b10a      	cbz	r2, 800bb7c <__lshift+0xa4>
 800bb78:	f108 0602 	add.w	r6, r8, #2
 800bb7c:	3e01      	subs	r6, #1
 800bb7e:	4638      	mov	r0, r7
 800bb80:	612e      	str	r6, [r5, #16]
 800bb82:	4621      	mov	r1, r4
 800bb84:	f7ff fd90 	bl	800b6a8 <_Bfree>
 800bb88:	4628      	mov	r0, r5
 800bb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb92:	3301      	adds	r3, #1
 800bb94:	e7c5      	b.n	800bb22 <__lshift+0x4a>
 800bb96:	3904      	subs	r1, #4
 800bb98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bba0:	459c      	cmp	ip, r3
 800bba2:	d8f9      	bhi.n	800bb98 <__lshift+0xc0>
 800bba4:	e7ea      	b.n	800bb7c <__lshift+0xa4>
 800bba6:	bf00      	nop
 800bba8:	0800e4a5 	.word	0x0800e4a5
 800bbac:	0800e4b6 	.word	0x0800e4b6

0800bbb0 <__mcmp>:
 800bbb0:	690a      	ldr	r2, [r1, #16]
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	6900      	ldr	r0, [r0, #16]
 800bbb6:	1a80      	subs	r0, r0, r2
 800bbb8:	b530      	push	{r4, r5, lr}
 800bbba:	d10e      	bne.n	800bbda <__mcmp+0x2a>
 800bbbc:	3314      	adds	r3, #20
 800bbbe:	3114      	adds	r1, #20
 800bbc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bbc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bbc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bbcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bbd0:	4295      	cmp	r5, r2
 800bbd2:	d003      	beq.n	800bbdc <__mcmp+0x2c>
 800bbd4:	d205      	bcs.n	800bbe2 <__mcmp+0x32>
 800bbd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbda:	bd30      	pop	{r4, r5, pc}
 800bbdc:	42a3      	cmp	r3, r4
 800bbde:	d3f3      	bcc.n	800bbc8 <__mcmp+0x18>
 800bbe0:	e7fb      	b.n	800bbda <__mcmp+0x2a>
 800bbe2:	2001      	movs	r0, #1
 800bbe4:	e7f9      	b.n	800bbda <__mcmp+0x2a>
	...

0800bbe8 <__mdiff>:
 800bbe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbec:	4689      	mov	r9, r1
 800bbee:	4606      	mov	r6, r0
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	4648      	mov	r0, r9
 800bbf4:	4614      	mov	r4, r2
 800bbf6:	f7ff ffdb 	bl	800bbb0 <__mcmp>
 800bbfa:	1e05      	subs	r5, r0, #0
 800bbfc:	d112      	bne.n	800bc24 <__mdiff+0x3c>
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4630      	mov	r0, r6
 800bc02:	f7ff fd11 	bl	800b628 <_Balloc>
 800bc06:	4602      	mov	r2, r0
 800bc08:	b928      	cbnz	r0, 800bc16 <__mdiff+0x2e>
 800bc0a:	4b3f      	ldr	r3, [pc, #252]	@ (800bd08 <__mdiff+0x120>)
 800bc0c:	f240 2137 	movw	r1, #567	@ 0x237
 800bc10:	483e      	ldr	r0, [pc, #248]	@ (800bd0c <__mdiff+0x124>)
 800bc12:	f001 fc41 	bl	800d498 <__assert_func>
 800bc16:	2301      	movs	r3, #1
 800bc18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	b003      	add	sp, #12
 800bc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc24:	bfbc      	itt	lt
 800bc26:	464b      	movlt	r3, r9
 800bc28:	46a1      	movlt	r9, r4
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bc30:	bfba      	itte	lt
 800bc32:	461c      	movlt	r4, r3
 800bc34:	2501      	movlt	r5, #1
 800bc36:	2500      	movge	r5, #0
 800bc38:	f7ff fcf6 	bl	800b628 <_Balloc>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	b918      	cbnz	r0, 800bc48 <__mdiff+0x60>
 800bc40:	4b31      	ldr	r3, [pc, #196]	@ (800bd08 <__mdiff+0x120>)
 800bc42:	f240 2145 	movw	r1, #581	@ 0x245
 800bc46:	e7e3      	b.n	800bc10 <__mdiff+0x28>
 800bc48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bc4c:	6926      	ldr	r6, [r4, #16]
 800bc4e:	60c5      	str	r5, [r0, #12]
 800bc50:	f109 0310 	add.w	r3, r9, #16
 800bc54:	f109 0514 	add.w	r5, r9, #20
 800bc58:	f104 0e14 	add.w	lr, r4, #20
 800bc5c:	f100 0b14 	add.w	fp, r0, #20
 800bc60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bc64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	46d9      	mov	r9, fp
 800bc6c:	f04f 0c00 	mov.w	ip, #0
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bc76:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	fa1f f38a 	uxth.w	r3, sl
 800bc80:	4619      	mov	r1, r3
 800bc82:	b283      	uxth	r3, r0
 800bc84:	1acb      	subs	r3, r1, r3
 800bc86:	0c00      	lsrs	r0, r0, #16
 800bc88:	4463      	add	r3, ip
 800bc8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bc8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc98:	4576      	cmp	r6, lr
 800bc9a:	f849 3b04 	str.w	r3, [r9], #4
 800bc9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bca2:	d8e5      	bhi.n	800bc70 <__mdiff+0x88>
 800bca4:	1b33      	subs	r3, r6, r4
 800bca6:	3b15      	subs	r3, #21
 800bca8:	f023 0303 	bic.w	r3, r3, #3
 800bcac:	3415      	adds	r4, #21
 800bcae:	3304      	adds	r3, #4
 800bcb0:	42a6      	cmp	r6, r4
 800bcb2:	bf38      	it	cc
 800bcb4:	2304      	movcc	r3, #4
 800bcb6:	441d      	add	r5, r3
 800bcb8:	445b      	add	r3, fp
 800bcba:	461e      	mov	r6, r3
 800bcbc:	462c      	mov	r4, r5
 800bcbe:	4544      	cmp	r4, r8
 800bcc0:	d30e      	bcc.n	800bce0 <__mdiff+0xf8>
 800bcc2:	f108 0103 	add.w	r1, r8, #3
 800bcc6:	1b49      	subs	r1, r1, r5
 800bcc8:	f021 0103 	bic.w	r1, r1, #3
 800bccc:	3d03      	subs	r5, #3
 800bcce:	45a8      	cmp	r8, r5
 800bcd0:	bf38      	it	cc
 800bcd2:	2100      	movcc	r1, #0
 800bcd4:	440b      	add	r3, r1
 800bcd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcda:	b191      	cbz	r1, 800bd02 <__mdiff+0x11a>
 800bcdc:	6117      	str	r7, [r2, #16]
 800bcde:	e79d      	b.n	800bc1c <__mdiff+0x34>
 800bce0:	f854 1b04 	ldr.w	r1, [r4], #4
 800bce4:	46e6      	mov	lr, ip
 800bce6:	0c08      	lsrs	r0, r1, #16
 800bce8:	fa1c fc81 	uxtah	ip, ip, r1
 800bcec:	4471      	add	r1, lr
 800bcee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bcf2:	b289      	uxth	r1, r1
 800bcf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bcf8:	f846 1b04 	str.w	r1, [r6], #4
 800bcfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd00:	e7dd      	b.n	800bcbe <__mdiff+0xd6>
 800bd02:	3f01      	subs	r7, #1
 800bd04:	e7e7      	b.n	800bcd6 <__mdiff+0xee>
 800bd06:	bf00      	nop
 800bd08:	0800e4a5 	.word	0x0800e4a5
 800bd0c:	0800e4b6 	.word	0x0800e4b6

0800bd10 <__ulp>:
 800bd10:	b082      	sub	sp, #8
 800bd12:	ed8d 0b00 	vstr	d0, [sp]
 800bd16:	9a01      	ldr	r2, [sp, #4]
 800bd18:	4b0f      	ldr	r3, [pc, #60]	@ (800bd58 <__ulp+0x48>)
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	dc08      	bgt.n	800bd36 <__ulp+0x26>
 800bd24:	425b      	negs	r3, r3
 800bd26:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bd2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd2e:	da04      	bge.n	800bd3a <__ulp+0x2a>
 800bd30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bd34:	4113      	asrs	r3, r2
 800bd36:	2200      	movs	r2, #0
 800bd38:	e008      	b.n	800bd4c <__ulp+0x3c>
 800bd3a:	f1a2 0314 	sub.w	r3, r2, #20
 800bd3e:	2b1e      	cmp	r3, #30
 800bd40:	bfda      	itte	le
 800bd42:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bd46:	40da      	lsrle	r2, r3
 800bd48:	2201      	movgt	r2, #1
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4610      	mov	r0, r2
 800bd50:	ec41 0b10 	vmov	d0, r0, r1
 800bd54:	b002      	add	sp, #8
 800bd56:	4770      	bx	lr
 800bd58:	7ff00000 	.word	0x7ff00000

0800bd5c <__b2d>:
 800bd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd60:	6906      	ldr	r6, [r0, #16]
 800bd62:	f100 0814 	add.w	r8, r0, #20
 800bd66:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bd6a:	1f37      	subs	r7, r6, #4
 800bd6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bd70:	4610      	mov	r0, r2
 800bd72:	f7ff fd4b 	bl	800b80c <__hi0bits>
 800bd76:	f1c0 0320 	rsb	r3, r0, #32
 800bd7a:	280a      	cmp	r0, #10
 800bd7c:	600b      	str	r3, [r1, #0]
 800bd7e:	491b      	ldr	r1, [pc, #108]	@ (800bdec <__b2d+0x90>)
 800bd80:	dc15      	bgt.n	800bdae <__b2d+0x52>
 800bd82:	f1c0 0c0b 	rsb	ip, r0, #11
 800bd86:	fa22 f30c 	lsr.w	r3, r2, ip
 800bd8a:	45b8      	cmp	r8, r7
 800bd8c:	ea43 0501 	orr.w	r5, r3, r1
 800bd90:	bf34      	ite	cc
 800bd92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd96:	2300      	movcs	r3, #0
 800bd98:	3015      	adds	r0, #21
 800bd9a:	fa02 f000 	lsl.w	r0, r2, r0
 800bd9e:	fa23 f30c 	lsr.w	r3, r3, ip
 800bda2:	4303      	orrs	r3, r0
 800bda4:	461c      	mov	r4, r3
 800bda6:	ec45 4b10 	vmov	d0, r4, r5
 800bdaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdae:	45b8      	cmp	r8, r7
 800bdb0:	bf3a      	itte	cc
 800bdb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bdb6:	f1a6 0708 	subcc.w	r7, r6, #8
 800bdba:	2300      	movcs	r3, #0
 800bdbc:	380b      	subs	r0, #11
 800bdbe:	d012      	beq.n	800bde6 <__b2d+0x8a>
 800bdc0:	f1c0 0120 	rsb	r1, r0, #32
 800bdc4:	fa23 f401 	lsr.w	r4, r3, r1
 800bdc8:	4082      	lsls	r2, r0
 800bdca:	4322      	orrs	r2, r4
 800bdcc:	4547      	cmp	r7, r8
 800bdce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bdd2:	bf8c      	ite	hi
 800bdd4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bdd8:	2200      	movls	r2, #0
 800bdda:	4083      	lsls	r3, r0
 800bddc:	40ca      	lsrs	r2, r1
 800bdde:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bde2:	4313      	orrs	r3, r2
 800bde4:	e7de      	b.n	800bda4 <__b2d+0x48>
 800bde6:	ea42 0501 	orr.w	r5, r2, r1
 800bdea:	e7db      	b.n	800bda4 <__b2d+0x48>
 800bdec:	3ff00000 	.word	0x3ff00000

0800bdf0 <__d2b>:
 800bdf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdf4:	460f      	mov	r7, r1
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	ec59 8b10 	vmov	r8, r9, d0
 800bdfc:	4616      	mov	r6, r2
 800bdfe:	f7ff fc13 	bl	800b628 <_Balloc>
 800be02:	4604      	mov	r4, r0
 800be04:	b930      	cbnz	r0, 800be14 <__d2b+0x24>
 800be06:	4602      	mov	r2, r0
 800be08:	4b23      	ldr	r3, [pc, #140]	@ (800be98 <__d2b+0xa8>)
 800be0a:	4824      	ldr	r0, [pc, #144]	@ (800be9c <__d2b+0xac>)
 800be0c:	f240 310f 	movw	r1, #783	@ 0x30f
 800be10:	f001 fb42 	bl	800d498 <__assert_func>
 800be14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be1c:	b10d      	cbz	r5, 800be22 <__d2b+0x32>
 800be1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	f1b8 0300 	subs.w	r3, r8, #0
 800be28:	d023      	beq.n	800be72 <__d2b+0x82>
 800be2a:	4668      	mov	r0, sp
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	f7ff fd0c 	bl	800b84a <__lo0bits>
 800be32:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be36:	b1d0      	cbz	r0, 800be6e <__d2b+0x7e>
 800be38:	f1c0 0320 	rsb	r3, r0, #32
 800be3c:	fa02 f303 	lsl.w	r3, r2, r3
 800be40:	430b      	orrs	r3, r1
 800be42:	40c2      	lsrs	r2, r0
 800be44:	6163      	str	r3, [r4, #20]
 800be46:	9201      	str	r2, [sp, #4]
 800be48:	9b01      	ldr	r3, [sp, #4]
 800be4a:	61a3      	str	r3, [r4, #24]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	bf0c      	ite	eq
 800be50:	2201      	moveq	r2, #1
 800be52:	2202      	movne	r2, #2
 800be54:	6122      	str	r2, [r4, #16]
 800be56:	b1a5      	cbz	r5, 800be82 <__d2b+0x92>
 800be58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800be5c:	4405      	add	r5, r0
 800be5e:	603d      	str	r5, [r7, #0]
 800be60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800be64:	6030      	str	r0, [r6, #0]
 800be66:	4620      	mov	r0, r4
 800be68:	b003      	add	sp, #12
 800be6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be6e:	6161      	str	r1, [r4, #20]
 800be70:	e7ea      	b.n	800be48 <__d2b+0x58>
 800be72:	a801      	add	r0, sp, #4
 800be74:	f7ff fce9 	bl	800b84a <__lo0bits>
 800be78:	9b01      	ldr	r3, [sp, #4]
 800be7a:	6163      	str	r3, [r4, #20]
 800be7c:	3020      	adds	r0, #32
 800be7e:	2201      	movs	r2, #1
 800be80:	e7e8      	b.n	800be54 <__d2b+0x64>
 800be82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be8a:	6038      	str	r0, [r7, #0]
 800be8c:	6918      	ldr	r0, [r3, #16]
 800be8e:	f7ff fcbd 	bl	800b80c <__hi0bits>
 800be92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be96:	e7e5      	b.n	800be64 <__d2b+0x74>
 800be98:	0800e4a5 	.word	0x0800e4a5
 800be9c:	0800e4b6 	.word	0x0800e4b6

0800bea0 <__ratio>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	b085      	sub	sp, #20
 800bea6:	e9cd 1000 	strd	r1, r0, [sp]
 800beaa:	a902      	add	r1, sp, #8
 800beac:	f7ff ff56 	bl	800bd5c <__b2d>
 800beb0:	9800      	ldr	r0, [sp, #0]
 800beb2:	a903      	add	r1, sp, #12
 800beb4:	ec55 4b10 	vmov	r4, r5, d0
 800beb8:	f7ff ff50 	bl	800bd5c <__b2d>
 800bebc:	9b01      	ldr	r3, [sp, #4]
 800bebe:	6919      	ldr	r1, [r3, #16]
 800bec0:	9b00      	ldr	r3, [sp, #0]
 800bec2:	691b      	ldr	r3, [r3, #16]
 800bec4:	1ac9      	subs	r1, r1, r3
 800bec6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800beca:	1a9b      	subs	r3, r3, r2
 800becc:	ec5b ab10 	vmov	sl, fp, d0
 800bed0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	bfce      	itee	gt
 800bed8:	462a      	movgt	r2, r5
 800beda:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bede:	465a      	movle	r2, fp
 800bee0:	462f      	mov	r7, r5
 800bee2:	46d9      	mov	r9, fp
 800bee4:	bfcc      	ite	gt
 800bee6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800beea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800beee:	464b      	mov	r3, r9
 800bef0:	4652      	mov	r2, sl
 800bef2:	4620      	mov	r0, r4
 800bef4:	4639      	mov	r1, r7
 800bef6:	f7f4 fcd1 	bl	800089c <__aeabi_ddiv>
 800befa:	ec41 0b10 	vmov	d0, r0, r1
 800befe:	b005      	add	sp, #20
 800bf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf04 <__copybits>:
 800bf04:	3901      	subs	r1, #1
 800bf06:	b570      	push	{r4, r5, r6, lr}
 800bf08:	1149      	asrs	r1, r1, #5
 800bf0a:	6914      	ldr	r4, [r2, #16]
 800bf0c:	3101      	adds	r1, #1
 800bf0e:	f102 0314 	add.w	r3, r2, #20
 800bf12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf1a:	1f05      	subs	r5, r0, #4
 800bf1c:	42a3      	cmp	r3, r4
 800bf1e:	d30c      	bcc.n	800bf3a <__copybits+0x36>
 800bf20:	1aa3      	subs	r3, r4, r2
 800bf22:	3b11      	subs	r3, #17
 800bf24:	f023 0303 	bic.w	r3, r3, #3
 800bf28:	3211      	adds	r2, #17
 800bf2a:	42a2      	cmp	r2, r4
 800bf2c:	bf88      	it	hi
 800bf2e:	2300      	movhi	r3, #0
 800bf30:	4418      	add	r0, r3
 800bf32:	2300      	movs	r3, #0
 800bf34:	4288      	cmp	r0, r1
 800bf36:	d305      	bcc.n	800bf44 <__copybits+0x40>
 800bf38:	bd70      	pop	{r4, r5, r6, pc}
 800bf3a:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf3e:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf42:	e7eb      	b.n	800bf1c <__copybits+0x18>
 800bf44:	f840 3b04 	str.w	r3, [r0], #4
 800bf48:	e7f4      	b.n	800bf34 <__copybits+0x30>

0800bf4a <__any_on>:
 800bf4a:	f100 0214 	add.w	r2, r0, #20
 800bf4e:	6900      	ldr	r0, [r0, #16]
 800bf50:	114b      	asrs	r3, r1, #5
 800bf52:	4298      	cmp	r0, r3
 800bf54:	b510      	push	{r4, lr}
 800bf56:	db11      	blt.n	800bf7c <__any_on+0x32>
 800bf58:	dd0a      	ble.n	800bf70 <__any_on+0x26>
 800bf5a:	f011 011f 	ands.w	r1, r1, #31
 800bf5e:	d007      	beq.n	800bf70 <__any_on+0x26>
 800bf60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf64:	fa24 f001 	lsr.w	r0, r4, r1
 800bf68:	fa00 f101 	lsl.w	r1, r0, r1
 800bf6c:	428c      	cmp	r4, r1
 800bf6e:	d10b      	bne.n	800bf88 <__any_on+0x3e>
 800bf70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d803      	bhi.n	800bf80 <__any_on+0x36>
 800bf78:	2000      	movs	r0, #0
 800bf7a:	bd10      	pop	{r4, pc}
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	e7f7      	b.n	800bf70 <__any_on+0x26>
 800bf80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf84:	2900      	cmp	r1, #0
 800bf86:	d0f5      	beq.n	800bf74 <__any_on+0x2a>
 800bf88:	2001      	movs	r0, #1
 800bf8a:	e7f6      	b.n	800bf7a <__any_on+0x30>

0800bf8c <sulp>:
 800bf8c:	b570      	push	{r4, r5, r6, lr}
 800bf8e:	4604      	mov	r4, r0
 800bf90:	460d      	mov	r5, r1
 800bf92:	ec45 4b10 	vmov	d0, r4, r5
 800bf96:	4616      	mov	r6, r2
 800bf98:	f7ff feba 	bl	800bd10 <__ulp>
 800bf9c:	ec51 0b10 	vmov	r0, r1, d0
 800bfa0:	b17e      	cbz	r6, 800bfc2 <sulp+0x36>
 800bfa2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bfa6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	dd09      	ble.n	800bfc2 <sulp+0x36>
 800bfae:	051b      	lsls	r3, r3, #20
 800bfb0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bfb4:	2400      	movs	r4, #0
 800bfb6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bfba:	4622      	mov	r2, r4
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	f7f4 fb43 	bl	8000648 <__aeabi_dmul>
 800bfc2:	ec41 0b10 	vmov	d0, r0, r1
 800bfc6:	bd70      	pop	{r4, r5, r6, pc}

0800bfc8 <_strtod_l>:
 800bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfcc:	b09f      	sub	sp, #124	@ 0x7c
 800bfce:	460c      	mov	r4, r1
 800bfd0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	921a      	str	r2, [sp, #104]	@ 0x68
 800bfd6:	9005      	str	r0, [sp, #20]
 800bfd8:	f04f 0a00 	mov.w	sl, #0
 800bfdc:	f04f 0b00 	mov.w	fp, #0
 800bfe0:	460a      	mov	r2, r1
 800bfe2:	9219      	str	r2, [sp, #100]	@ 0x64
 800bfe4:	7811      	ldrb	r1, [r2, #0]
 800bfe6:	292b      	cmp	r1, #43	@ 0x2b
 800bfe8:	d04a      	beq.n	800c080 <_strtod_l+0xb8>
 800bfea:	d838      	bhi.n	800c05e <_strtod_l+0x96>
 800bfec:	290d      	cmp	r1, #13
 800bfee:	d832      	bhi.n	800c056 <_strtod_l+0x8e>
 800bff0:	2908      	cmp	r1, #8
 800bff2:	d832      	bhi.n	800c05a <_strtod_l+0x92>
 800bff4:	2900      	cmp	r1, #0
 800bff6:	d03b      	beq.n	800c070 <_strtod_l+0xa8>
 800bff8:	2200      	movs	r2, #0
 800bffa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bffc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bffe:	782a      	ldrb	r2, [r5, #0]
 800c000:	2a30      	cmp	r2, #48	@ 0x30
 800c002:	f040 80b3 	bne.w	800c16c <_strtod_l+0x1a4>
 800c006:	786a      	ldrb	r2, [r5, #1]
 800c008:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c00c:	2a58      	cmp	r2, #88	@ 0x58
 800c00e:	d16e      	bne.n	800c0ee <_strtod_l+0x126>
 800c010:	9302      	str	r3, [sp, #8]
 800c012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c014:	9301      	str	r3, [sp, #4]
 800c016:	ab1a      	add	r3, sp, #104	@ 0x68
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	4a8e      	ldr	r2, [pc, #568]	@ (800c254 <_strtod_l+0x28c>)
 800c01c:	9805      	ldr	r0, [sp, #20]
 800c01e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c020:	a919      	add	r1, sp, #100	@ 0x64
 800c022:	f001 fad3 	bl	800d5cc <__gethex>
 800c026:	f010 060f 	ands.w	r6, r0, #15
 800c02a:	4604      	mov	r4, r0
 800c02c:	d005      	beq.n	800c03a <_strtod_l+0x72>
 800c02e:	2e06      	cmp	r6, #6
 800c030:	d128      	bne.n	800c084 <_strtod_l+0xbc>
 800c032:	3501      	adds	r5, #1
 800c034:	2300      	movs	r3, #0
 800c036:	9519      	str	r5, [sp, #100]	@ 0x64
 800c038:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c03a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f040 858e 	bne.w	800cb5e <_strtod_l+0xb96>
 800c042:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c044:	b1cb      	cbz	r3, 800c07a <_strtod_l+0xb2>
 800c046:	4652      	mov	r2, sl
 800c048:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c04c:	ec43 2b10 	vmov	d0, r2, r3
 800c050:	b01f      	add	sp, #124	@ 0x7c
 800c052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c056:	2920      	cmp	r1, #32
 800c058:	d1ce      	bne.n	800bff8 <_strtod_l+0x30>
 800c05a:	3201      	adds	r2, #1
 800c05c:	e7c1      	b.n	800bfe2 <_strtod_l+0x1a>
 800c05e:	292d      	cmp	r1, #45	@ 0x2d
 800c060:	d1ca      	bne.n	800bff8 <_strtod_l+0x30>
 800c062:	2101      	movs	r1, #1
 800c064:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c066:	1c51      	adds	r1, r2, #1
 800c068:	9119      	str	r1, [sp, #100]	@ 0x64
 800c06a:	7852      	ldrb	r2, [r2, #1]
 800c06c:	2a00      	cmp	r2, #0
 800c06e:	d1c5      	bne.n	800bffc <_strtod_l+0x34>
 800c070:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c072:	9419      	str	r4, [sp, #100]	@ 0x64
 800c074:	2b00      	cmp	r3, #0
 800c076:	f040 8570 	bne.w	800cb5a <_strtod_l+0xb92>
 800c07a:	4652      	mov	r2, sl
 800c07c:	465b      	mov	r3, fp
 800c07e:	e7e5      	b.n	800c04c <_strtod_l+0x84>
 800c080:	2100      	movs	r1, #0
 800c082:	e7ef      	b.n	800c064 <_strtod_l+0x9c>
 800c084:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c086:	b13a      	cbz	r2, 800c098 <_strtod_l+0xd0>
 800c088:	2135      	movs	r1, #53	@ 0x35
 800c08a:	a81c      	add	r0, sp, #112	@ 0x70
 800c08c:	f7ff ff3a 	bl	800bf04 <__copybits>
 800c090:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c092:	9805      	ldr	r0, [sp, #20]
 800c094:	f7ff fb08 	bl	800b6a8 <_Bfree>
 800c098:	3e01      	subs	r6, #1
 800c09a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c09c:	2e04      	cmp	r6, #4
 800c09e:	d806      	bhi.n	800c0ae <_strtod_l+0xe6>
 800c0a0:	e8df f006 	tbb	[pc, r6]
 800c0a4:	201d0314 	.word	0x201d0314
 800c0a8:	14          	.byte	0x14
 800c0a9:	00          	.byte	0x00
 800c0aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c0ae:	05e1      	lsls	r1, r4, #23
 800c0b0:	bf48      	it	mi
 800c0b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c0b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0ba:	0d1b      	lsrs	r3, r3, #20
 800c0bc:	051b      	lsls	r3, r3, #20
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1bb      	bne.n	800c03a <_strtod_l+0x72>
 800c0c2:	f7fe fb2f 	bl	800a724 <__errno>
 800c0c6:	2322      	movs	r3, #34	@ 0x22
 800c0c8:	6003      	str	r3, [r0, #0]
 800c0ca:	e7b6      	b.n	800c03a <_strtod_l+0x72>
 800c0cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c0d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c0d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c0d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c0dc:	e7e7      	b.n	800c0ae <_strtod_l+0xe6>
 800c0de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c25c <_strtod_l+0x294>
 800c0e2:	e7e4      	b.n	800c0ae <_strtod_l+0xe6>
 800c0e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c0e8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c0ec:	e7df      	b.n	800c0ae <_strtod_l+0xe6>
 800c0ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0f4:	785b      	ldrb	r3, [r3, #1]
 800c0f6:	2b30      	cmp	r3, #48	@ 0x30
 800c0f8:	d0f9      	beq.n	800c0ee <_strtod_l+0x126>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d09d      	beq.n	800c03a <_strtod_l+0x72>
 800c0fe:	2301      	movs	r3, #1
 800c100:	9309      	str	r3, [sp, #36]	@ 0x24
 800c102:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c104:	930c      	str	r3, [sp, #48]	@ 0x30
 800c106:	2300      	movs	r3, #0
 800c108:	9308      	str	r3, [sp, #32]
 800c10a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c10c:	461f      	mov	r7, r3
 800c10e:	220a      	movs	r2, #10
 800c110:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c112:	7805      	ldrb	r5, [r0, #0]
 800c114:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c118:	b2d9      	uxtb	r1, r3
 800c11a:	2909      	cmp	r1, #9
 800c11c:	d928      	bls.n	800c170 <_strtod_l+0x1a8>
 800c11e:	494e      	ldr	r1, [pc, #312]	@ (800c258 <_strtod_l+0x290>)
 800c120:	2201      	movs	r2, #1
 800c122:	f001 f95f 	bl	800d3e4 <strncmp>
 800c126:	2800      	cmp	r0, #0
 800c128:	d032      	beq.n	800c190 <_strtod_l+0x1c8>
 800c12a:	2000      	movs	r0, #0
 800c12c:	462a      	mov	r2, r5
 800c12e:	4681      	mov	r9, r0
 800c130:	463d      	mov	r5, r7
 800c132:	4603      	mov	r3, r0
 800c134:	2a65      	cmp	r2, #101	@ 0x65
 800c136:	d001      	beq.n	800c13c <_strtod_l+0x174>
 800c138:	2a45      	cmp	r2, #69	@ 0x45
 800c13a:	d114      	bne.n	800c166 <_strtod_l+0x19e>
 800c13c:	b91d      	cbnz	r5, 800c146 <_strtod_l+0x17e>
 800c13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c140:	4302      	orrs	r2, r0
 800c142:	d095      	beq.n	800c070 <_strtod_l+0xa8>
 800c144:	2500      	movs	r5, #0
 800c146:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c148:	1c62      	adds	r2, r4, #1
 800c14a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c14c:	7862      	ldrb	r2, [r4, #1]
 800c14e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c150:	d077      	beq.n	800c242 <_strtod_l+0x27a>
 800c152:	2a2d      	cmp	r2, #45	@ 0x2d
 800c154:	d07b      	beq.n	800c24e <_strtod_l+0x286>
 800c156:	f04f 0c00 	mov.w	ip, #0
 800c15a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c15e:	2909      	cmp	r1, #9
 800c160:	f240 8082 	bls.w	800c268 <_strtod_l+0x2a0>
 800c164:	9419      	str	r4, [sp, #100]	@ 0x64
 800c166:	f04f 0800 	mov.w	r8, #0
 800c16a:	e0a2      	b.n	800c2b2 <_strtod_l+0x2ea>
 800c16c:	2300      	movs	r3, #0
 800c16e:	e7c7      	b.n	800c100 <_strtod_l+0x138>
 800c170:	2f08      	cmp	r7, #8
 800c172:	bfd5      	itete	le
 800c174:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c176:	9908      	ldrgt	r1, [sp, #32]
 800c178:	fb02 3301 	mlale	r3, r2, r1, r3
 800c17c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c180:	f100 0001 	add.w	r0, r0, #1
 800c184:	bfd4      	ite	le
 800c186:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c188:	9308      	strgt	r3, [sp, #32]
 800c18a:	3701      	adds	r7, #1
 800c18c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c18e:	e7bf      	b.n	800c110 <_strtod_l+0x148>
 800c190:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	9219      	str	r2, [sp, #100]	@ 0x64
 800c196:	785a      	ldrb	r2, [r3, #1]
 800c198:	b37f      	cbz	r7, 800c1fa <_strtod_l+0x232>
 800c19a:	4681      	mov	r9, r0
 800c19c:	463d      	mov	r5, r7
 800c19e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c1a2:	2b09      	cmp	r3, #9
 800c1a4:	d912      	bls.n	800c1cc <_strtod_l+0x204>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e7c4      	b.n	800c134 <_strtod_l+0x16c>
 800c1aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1ac:	1c5a      	adds	r2, r3, #1
 800c1ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1b0:	785a      	ldrb	r2, [r3, #1]
 800c1b2:	3001      	adds	r0, #1
 800c1b4:	2a30      	cmp	r2, #48	@ 0x30
 800c1b6:	d0f8      	beq.n	800c1aa <_strtod_l+0x1e2>
 800c1b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	f200 84d3 	bhi.w	800cb68 <_strtod_l+0xba0>
 800c1c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1c6:	4681      	mov	r9, r0
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	3a30      	subs	r2, #48	@ 0x30
 800c1ce:	f100 0301 	add.w	r3, r0, #1
 800c1d2:	d02a      	beq.n	800c22a <_strtod_l+0x262>
 800c1d4:	4499      	add	r9, r3
 800c1d6:	eb00 0c05 	add.w	ip, r0, r5
 800c1da:	462b      	mov	r3, r5
 800c1dc:	210a      	movs	r1, #10
 800c1de:	4563      	cmp	r3, ip
 800c1e0:	d10d      	bne.n	800c1fe <_strtod_l+0x236>
 800c1e2:	1c69      	adds	r1, r5, #1
 800c1e4:	4401      	add	r1, r0
 800c1e6:	4428      	add	r0, r5
 800c1e8:	2808      	cmp	r0, #8
 800c1ea:	dc16      	bgt.n	800c21a <_strtod_l+0x252>
 800c1ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c1ee:	230a      	movs	r3, #10
 800c1f0:	fb03 2300 	mla	r3, r3, r0, r2
 800c1f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	e018      	b.n	800c22c <_strtod_l+0x264>
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	e7da      	b.n	800c1b4 <_strtod_l+0x1ec>
 800c1fe:	2b08      	cmp	r3, #8
 800c200:	f103 0301 	add.w	r3, r3, #1
 800c204:	dc03      	bgt.n	800c20e <_strtod_l+0x246>
 800c206:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c208:	434e      	muls	r6, r1
 800c20a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c20c:	e7e7      	b.n	800c1de <_strtod_l+0x216>
 800c20e:	2b10      	cmp	r3, #16
 800c210:	bfde      	ittt	le
 800c212:	9e08      	ldrle	r6, [sp, #32]
 800c214:	434e      	mulle	r6, r1
 800c216:	9608      	strle	r6, [sp, #32]
 800c218:	e7e1      	b.n	800c1de <_strtod_l+0x216>
 800c21a:	280f      	cmp	r0, #15
 800c21c:	dceb      	bgt.n	800c1f6 <_strtod_l+0x22e>
 800c21e:	9808      	ldr	r0, [sp, #32]
 800c220:	230a      	movs	r3, #10
 800c222:	fb03 2300 	mla	r3, r3, r0, r2
 800c226:	9308      	str	r3, [sp, #32]
 800c228:	e7e5      	b.n	800c1f6 <_strtod_l+0x22e>
 800c22a:	4629      	mov	r1, r5
 800c22c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c22e:	1c50      	adds	r0, r2, #1
 800c230:	9019      	str	r0, [sp, #100]	@ 0x64
 800c232:	7852      	ldrb	r2, [r2, #1]
 800c234:	4618      	mov	r0, r3
 800c236:	460d      	mov	r5, r1
 800c238:	e7b1      	b.n	800c19e <_strtod_l+0x1d6>
 800c23a:	f04f 0900 	mov.w	r9, #0
 800c23e:	2301      	movs	r3, #1
 800c240:	e77d      	b.n	800c13e <_strtod_l+0x176>
 800c242:	f04f 0c00 	mov.w	ip, #0
 800c246:	1ca2      	adds	r2, r4, #2
 800c248:	9219      	str	r2, [sp, #100]	@ 0x64
 800c24a:	78a2      	ldrb	r2, [r4, #2]
 800c24c:	e785      	b.n	800c15a <_strtod_l+0x192>
 800c24e:	f04f 0c01 	mov.w	ip, #1
 800c252:	e7f8      	b.n	800c246 <_strtod_l+0x27e>
 800c254:	0800e628 	.word	0x0800e628
 800c258:	0800e610 	.word	0x0800e610
 800c25c:	7ff00000 	.word	0x7ff00000
 800c260:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c262:	1c51      	adds	r1, r2, #1
 800c264:	9119      	str	r1, [sp, #100]	@ 0x64
 800c266:	7852      	ldrb	r2, [r2, #1]
 800c268:	2a30      	cmp	r2, #48	@ 0x30
 800c26a:	d0f9      	beq.n	800c260 <_strtod_l+0x298>
 800c26c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c270:	2908      	cmp	r1, #8
 800c272:	f63f af78 	bhi.w	800c166 <_strtod_l+0x19e>
 800c276:	3a30      	subs	r2, #48	@ 0x30
 800c278:	920e      	str	r2, [sp, #56]	@ 0x38
 800c27a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c27c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c27e:	f04f 080a 	mov.w	r8, #10
 800c282:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c284:	1c56      	adds	r6, r2, #1
 800c286:	9619      	str	r6, [sp, #100]	@ 0x64
 800c288:	7852      	ldrb	r2, [r2, #1]
 800c28a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c28e:	f1be 0f09 	cmp.w	lr, #9
 800c292:	d939      	bls.n	800c308 <_strtod_l+0x340>
 800c294:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c296:	1a76      	subs	r6, r6, r1
 800c298:	2e08      	cmp	r6, #8
 800c29a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c29e:	dc03      	bgt.n	800c2a8 <_strtod_l+0x2e0>
 800c2a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c2a2:	4588      	cmp	r8, r1
 800c2a4:	bfa8      	it	ge
 800c2a6:	4688      	movge	r8, r1
 800c2a8:	f1bc 0f00 	cmp.w	ip, #0
 800c2ac:	d001      	beq.n	800c2b2 <_strtod_l+0x2ea>
 800c2ae:	f1c8 0800 	rsb	r8, r8, #0
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	d14e      	bne.n	800c354 <_strtod_l+0x38c>
 800c2b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2b8:	4308      	orrs	r0, r1
 800c2ba:	f47f aebe 	bne.w	800c03a <_strtod_l+0x72>
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f47f aed6 	bne.w	800c070 <_strtod_l+0xa8>
 800c2c4:	2a69      	cmp	r2, #105	@ 0x69
 800c2c6:	d028      	beq.n	800c31a <_strtod_l+0x352>
 800c2c8:	dc25      	bgt.n	800c316 <_strtod_l+0x34e>
 800c2ca:	2a49      	cmp	r2, #73	@ 0x49
 800c2cc:	d025      	beq.n	800c31a <_strtod_l+0x352>
 800c2ce:	2a4e      	cmp	r2, #78	@ 0x4e
 800c2d0:	f47f aece 	bne.w	800c070 <_strtod_l+0xa8>
 800c2d4:	499b      	ldr	r1, [pc, #620]	@ (800c544 <_strtod_l+0x57c>)
 800c2d6:	a819      	add	r0, sp, #100	@ 0x64
 800c2d8:	f001 fb9a 	bl	800da10 <__match>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f43f aec7 	beq.w	800c070 <_strtod_l+0xa8>
 800c2e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	2b28      	cmp	r3, #40	@ 0x28
 800c2e8:	d12e      	bne.n	800c348 <_strtod_l+0x380>
 800c2ea:	4997      	ldr	r1, [pc, #604]	@ (800c548 <_strtod_l+0x580>)
 800c2ec:	aa1c      	add	r2, sp, #112	@ 0x70
 800c2ee:	a819      	add	r0, sp, #100	@ 0x64
 800c2f0:	f001 fba2 	bl	800da38 <__hexnan>
 800c2f4:	2805      	cmp	r0, #5
 800c2f6:	d127      	bne.n	800c348 <_strtod_l+0x380>
 800c2f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c2fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c2fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c302:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c306:	e698      	b.n	800c03a <_strtod_l+0x72>
 800c308:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c30a:	fb08 2101 	mla	r1, r8, r1, r2
 800c30e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c312:	920e      	str	r2, [sp, #56]	@ 0x38
 800c314:	e7b5      	b.n	800c282 <_strtod_l+0x2ba>
 800c316:	2a6e      	cmp	r2, #110	@ 0x6e
 800c318:	e7da      	b.n	800c2d0 <_strtod_l+0x308>
 800c31a:	498c      	ldr	r1, [pc, #560]	@ (800c54c <_strtod_l+0x584>)
 800c31c:	a819      	add	r0, sp, #100	@ 0x64
 800c31e:	f001 fb77 	bl	800da10 <__match>
 800c322:	2800      	cmp	r0, #0
 800c324:	f43f aea4 	beq.w	800c070 <_strtod_l+0xa8>
 800c328:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c32a:	4989      	ldr	r1, [pc, #548]	@ (800c550 <_strtod_l+0x588>)
 800c32c:	3b01      	subs	r3, #1
 800c32e:	a819      	add	r0, sp, #100	@ 0x64
 800c330:	9319      	str	r3, [sp, #100]	@ 0x64
 800c332:	f001 fb6d 	bl	800da10 <__match>
 800c336:	b910      	cbnz	r0, 800c33e <_strtod_l+0x376>
 800c338:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c33a:	3301      	adds	r3, #1
 800c33c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c33e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c560 <_strtod_l+0x598>
 800c342:	f04f 0a00 	mov.w	sl, #0
 800c346:	e678      	b.n	800c03a <_strtod_l+0x72>
 800c348:	4882      	ldr	r0, [pc, #520]	@ (800c554 <_strtod_l+0x58c>)
 800c34a:	f001 f89d 	bl	800d488 <nan>
 800c34e:	ec5b ab10 	vmov	sl, fp, d0
 800c352:	e672      	b.n	800c03a <_strtod_l+0x72>
 800c354:	eba8 0309 	sub.w	r3, r8, r9
 800c358:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c35a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c35c:	2f00      	cmp	r7, #0
 800c35e:	bf08      	it	eq
 800c360:	462f      	moveq	r7, r5
 800c362:	2d10      	cmp	r5, #16
 800c364:	462c      	mov	r4, r5
 800c366:	bfa8      	it	ge
 800c368:	2410      	movge	r4, #16
 800c36a:	f7f4 f8f3 	bl	8000554 <__aeabi_ui2d>
 800c36e:	2d09      	cmp	r5, #9
 800c370:	4682      	mov	sl, r0
 800c372:	468b      	mov	fp, r1
 800c374:	dc13      	bgt.n	800c39e <_strtod_l+0x3d6>
 800c376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f43f ae5e 	beq.w	800c03a <_strtod_l+0x72>
 800c37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c380:	dd78      	ble.n	800c474 <_strtod_l+0x4ac>
 800c382:	2b16      	cmp	r3, #22
 800c384:	dc5f      	bgt.n	800c446 <_strtod_l+0x47e>
 800c386:	4974      	ldr	r1, [pc, #464]	@ (800c558 <_strtod_l+0x590>)
 800c388:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c38c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c390:	4652      	mov	r2, sl
 800c392:	465b      	mov	r3, fp
 800c394:	f7f4 f958 	bl	8000648 <__aeabi_dmul>
 800c398:	4682      	mov	sl, r0
 800c39a:	468b      	mov	fp, r1
 800c39c:	e64d      	b.n	800c03a <_strtod_l+0x72>
 800c39e:	4b6e      	ldr	r3, [pc, #440]	@ (800c558 <_strtod_l+0x590>)
 800c3a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c3a8:	f7f4 f94e 	bl	8000648 <__aeabi_dmul>
 800c3ac:	4682      	mov	sl, r0
 800c3ae:	9808      	ldr	r0, [sp, #32]
 800c3b0:	468b      	mov	fp, r1
 800c3b2:	f7f4 f8cf 	bl	8000554 <__aeabi_ui2d>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4650      	mov	r0, sl
 800c3bc:	4659      	mov	r1, fp
 800c3be:	f7f3 ff8d 	bl	80002dc <__adddf3>
 800c3c2:	2d0f      	cmp	r5, #15
 800c3c4:	4682      	mov	sl, r0
 800c3c6:	468b      	mov	fp, r1
 800c3c8:	ddd5      	ble.n	800c376 <_strtod_l+0x3ae>
 800c3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3cc:	1b2c      	subs	r4, r5, r4
 800c3ce:	441c      	add	r4, r3
 800c3d0:	2c00      	cmp	r4, #0
 800c3d2:	f340 8096 	ble.w	800c502 <_strtod_l+0x53a>
 800c3d6:	f014 030f 	ands.w	r3, r4, #15
 800c3da:	d00a      	beq.n	800c3f2 <_strtod_l+0x42a>
 800c3dc:	495e      	ldr	r1, [pc, #376]	@ (800c558 <_strtod_l+0x590>)
 800c3de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3e2:	4652      	mov	r2, sl
 800c3e4:	465b      	mov	r3, fp
 800c3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ea:	f7f4 f92d 	bl	8000648 <__aeabi_dmul>
 800c3ee:	4682      	mov	sl, r0
 800c3f0:	468b      	mov	fp, r1
 800c3f2:	f034 040f 	bics.w	r4, r4, #15
 800c3f6:	d073      	beq.n	800c4e0 <_strtod_l+0x518>
 800c3f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c3fc:	dd48      	ble.n	800c490 <_strtod_l+0x4c8>
 800c3fe:	2400      	movs	r4, #0
 800c400:	46a0      	mov	r8, r4
 800c402:	940a      	str	r4, [sp, #40]	@ 0x28
 800c404:	46a1      	mov	r9, r4
 800c406:	9a05      	ldr	r2, [sp, #20]
 800c408:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c560 <_strtod_l+0x598>
 800c40c:	2322      	movs	r3, #34	@ 0x22
 800c40e:	6013      	str	r3, [r2, #0]
 800c410:	f04f 0a00 	mov.w	sl, #0
 800c414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c416:	2b00      	cmp	r3, #0
 800c418:	f43f ae0f 	beq.w	800c03a <_strtod_l+0x72>
 800c41c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c41e:	9805      	ldr	r0, [sp, #20]
 800c420:	f7ff f942 	bl	800b6a8 <_Bfree>
 800c424:	9805      	ldr	r0, [sp, #20]
 800c426:	4649      	mov	r1, r9
 800c428:	f7ff f93e 	bl	800b6a8 <_Bfree>
 800c42c:	9805      	ldr	r0, [sp, #20]
 800c42e:	4641      	mov	r1, r8
 800c430:	f7ff f93a 	bl	800b6a8 <_Bfree>
 800c434:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c436:	9805      	ldr	r0, [sp, #20]
 800c438:	f7ff f936 	bl	800b6a8 <_Bfree>
 800c43c:	9805      	ldr	r0, [sp, #20]
 800c43e:	4621      	mov	r1, r4
 800c440:	f7ff f932 	bl	800b6a8 <_Bfree>
 800c444:	e5f9      	b.n	800c03a <_strtod_l+0x72>
 800c446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c448:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c44c:	4293      	cmp	r3, r2
 800c44e:	dbbc      	blt.n	800c3ca <_strtod_l+0x402>
 800c450:	4c41      	ldr	r4, [pc, #260]	@ (800c558 <_strtod_l+0x590>)
 800c452:	f1c5 050f 	rsb	r5, r5, #15
 800c456:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c45a:	4652      	mov	r2, sl
 800c45c:	465b      	mov	r3, fp
 800c45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c462:	f7f4 f8f1 	bl	8000648 <__aeabi_dmul>
 800c466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c468:	1b5d      	subs	r5, r3, r5
 800c46a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c46e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c472:	e78f      	b.n	800c394 <_strtod_l+0x3cc>
 800c474:	3316      	adds	r3, #22
 800c476:	dba8      	blt.n	800c3ca <_strtod_l+0x402>
 800c478:	4b37      	ldr	r3, [pc, #220]	@ (800c558 <_strtod_l+0x590>)
 800c47a:	eba9 0808 	sub.w	r8, r9, r8
 800c47e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c482:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c486:	4650      	mov	r0, sl
 800c488:	4659      	mov	r1, fp
 800c48a:	f7f4 fa07 	bl	800089c <__aeabi_ddiv>
 800c48e:	e783      	b.n	800c398 <_strtod_l+0x3d0>
 800c490:	4b32      	ldr	r3, [pc, #200]	@ (800c55c <_strtod_l+0x594>)
 800c492:	9308      	str	r3, [sp, #32]
 800c494:	2300      	movs	r3, #0
 800c496:	1124      	asrs	r4, r4, #4
 800c498:	4650      	mov	r0, sl
 800c49a:	4659      	mov	r1, fp
 800c49c:	461e      	mov	r6, r3
 800c49e:	2c01      	cmp	r4, #1
 800c4a0:	dc21      	bgt.n	800c4e6 <_strtod_l+0x51e>
 800c4a2:	b10b      	cbz	r3, 800c4a8 <_strtod_l+0x4e0>
 800c4a4:	4682      	mov	sl, r0
 800c4a6:	468b      	mov	fp, r1
 800c4a8:	492c      	ldr	r1, [pc, #176]	@ (800c55c <_strtod_l+0x594>)
 800c4aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c4ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c4b2:	4652      	mov	r2, sl
 800c4b4:	465b      	mov	r3, fp
 800c4b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4ba:	f7f4 f8c5 	bl	8000648 <__aeabi_dmul>
 800c4be:	4b28      	ldr	r3, [pc, #160]	@ (800c560 <_strtod_l+0x598>)
 800c4c0:	460a      	mov	r2, r1
 800c4c2:	400b      	ands	r3, r1
 800c4c4:	4927      	ldr	r1, [pc, #156]	@ (800c564 <_strtod_l+0x59c>)
 800c4c6:	428b      	cmp	r3, r1
 800c4c8:	4682      	mov	sl, r0
 800c4ca:	d898      	bhi.n	800c3fe <_strtod_l+0x436>
 800c4cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c4d0:	428b      	cmp	r3, r1
 800c4d2:	bf86      	itte	hi
 800c4d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c568 <_strtod_l+0x5a0>
 800c4d8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800c4dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	9308      	str	r3, [sp, #32]
 800c4e4:	e07a      	b.n	800c5dc <_strtod_l+0x614>
 800c4e6:	07e2      	lsls	r2, r4, #31
 800c4e8:	d505      	bpl.n	800c4f6 <_strtod_l+0x52e>
 800c4ea:	9b08      	ldr	r3, [sp, #32]
 800c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f0:	f7f4 f8aa 	bl	8000648 <__aeabi_dmul>
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	9a08      	ldr	r2, [sp, #32]
 800c4f8:	3208      	adds	r2, #8
 800c4fa:	3601      	adds	r6, #1
 800c4fc:	1064      	asrs	r4, r4, #1
 800c4fe:	9208      	str	r2, [sp, #32]
 800c500:	e7cd      	b.n	800c49e <_strtod_l+0x4d6>
 800c502:	d0ed      	beq.n	800c4e0 <_strtod_l+0x518>
 800c504:	4264      	negs	r4, r4
 800c506:	f014 020f 	ands.w	r2, r4, #15
 800c50a:	d00a      	beq.n	800c522 <_strtod_l+0x55a>
 800c50c:	4b12      	ldr	r3, [pc, #72]	@ (800c558 <_strtod_l+0x590>)
 800c50e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c512:	4650      	mov	r0, sl
 800c514:	4659      	mov	r1, fp
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f4 f9bf 	bl	800089c <__aeabi_ddiv>
 800c51e:	4682      	mov	sl, r0
 800c520:	468b      	mov	fp, r1
 800c522:	1124      	asrs	r4, r4, #4
 800c524:	d0dc      	beq.n	800c4e0 <_strtod_l+0x518>
 800c526:	2c1f      	cmp	r4, #31
 800c528:	dd20      	ble.n	800c56c <_strtod_l+0x5a4>
 800c52a:	2400      	movs	r4, #0
 800c52c:	46a0      	mov	r8, r4
 800c52e:	940a      	str	r4, [sp, #40]	@ 0x28
 800c530:	46a1      	mov	r9, r4
 800c532:	9a05      	ldr	r2, [sp, #20]
 800c534:	2322      	movs	r3, #34	@ 0x22
 800c536:	f04f 0a00 	mov.w	sl, #0
 800c53a:	f04f 0b00 	mov.w	fp, #0
 800c53e:	6013      	str	r3, [r2, #0]
 800c540:	e768      	b.n	800c414 <_strtod_l+0x44c>
 800c542:	bf00      	nop
 800c544:	0800e3fd 	.word	0x0800e3fd
 800c548:	0800e614 	.word	0x0800e614
 800c54c:	0800e3f5 	.word	0x0800e3f5
 800c550:	0800e42c 	.word	0x0800e42c
 800c554:	0800e7bd 	.word	0x0800e7bd
 800c558:	0800e548 	.word	0x0800e548
 800c55c:	0800e520 	.word	0x0800e520
 800c560:	7ff00000 	.word	0x7ff00000
 800c564:	7ca00000 	.word	0x7ca00000
 800c568:	7fefffff 	.word	0x7fefffff
 800c56c:	f014 0310 	ands.w	r3, r4, #16
 800c570:	bf18      	it	ne
 800c572:	236a      	movne	r3, #106	@ 0x6a
 800c574:	4ea9      	ldr	r6, [pc, #676]	@ (800c81c <_strtod_l+0x854>)
 800c576:	9308      	str	r3, [sp, #32]
 800c578:	4650      	mov	r0, sl
 800c57a:	4659      	mov	r1, fp
 800c57c:	2300      	movs	r3, #0
 800c57e:	07e2      	lsls	r2, r4, #31
 800c580:	d504      	bpl.n	800c58c <_strtod_l+0x5c4>
 800c582:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c586:	f7f4 f85f 	bl	8000648 <__aeabi_dmul>
 800c58a:	2301      	movs	r3, #1
 800c58c:	1064      	asrs	r4, r4, #1
 800c58e:	f106 0608 	add.w	r6, r6, #8
 800c592:	d1f4      	bne.n	800c57e <_strtod_l+0x5b6>
 800c594:	b10b      	cbz	r3, 800c59a <_strtod_l+0x5d2>
 800c596:	4682      	mov	sl, r0
 800c598:	468b      	mov	fp, r1
 800c59a:	9b08      	ldr	r3, [sp, #32]
 800c59c:	b1b3      	cbz	r3, 800c5cc <_strtod_l+0x604>
 800c59e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c5a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	4659      	mov	r1, fp
 800c5aa:	dd0f      	ble.n	800c5cc <_strtod_l+0x604>
 800c5ac:	2b1f      	cmp	r3, #31
 800c5ae:	dd55      	ble.n	800c65c <_strtod_l+0x694>
 800c5b0:	2b34      	cmp	r3, #52	@ 0x34
 800c5b2:	bfde      	ittt	le
 800c5b4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800c5b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c5bc:	4093      	lslle	r3, r2
 800c5be:	f04f 0a00 	mov.w	sl, #0
 800c5c2:	bfcc      	ite	gt
 800c5c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c5c8:	ea03 0b01 	andle.w	fp, r3, r1
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	4650      	mov	r0, sl
 800c5d2:	4659      	mov	r1, fp
 800c5d4:	f7f4 faa0 	bl	8000b18 <__aeabi_dcmpeq>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d1a6      	bne.n	800c52a <_strtod_l+0x562>
 800c5dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c5e2:	9805      	ldr	r0, [sp, #20]
 800c5e4:	462b      	mov	r3, r5
 800c5e6:	463a      	mov	r2, r7
 800c5e8:	f7ff f8c6 	bl	800b778 <__s2b>
 800c5ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	f43f af05 	beq.w	800c3fe <_strtod_l+0x436>
 800c5f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5f6:	2a00      	cmp	r2, #0
 800c5f8:	eba9 0308 	sub.w	r3, r9, r8
 800c5fc:	bfa8      	it	ge
 800c5fe:	2300      	movge	r3, #0
 800c600:	9312      	str	r3, [sp, #72]	@ 0x48
 800c602:	2400      	movs	r4, #0
 800c604:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c608:	9316      	str	r3, [sp, #88]	@ 0x58
 800c60a:	46a0      	mov	r8, r4
 800c60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c60e:	9805      	ldr	r0, [sp, #20]
 800c610:	6859      	ldr	r1, [r3, #4]
 800c612:	f7ff f809 	bl	800b628 <_Balloc>
 800c616:	4681      	mov	r9, r0
 800c618:	2800      	cmp	r0, #0
 800c61a:	f43f aef4 	beq.w	800c406 <_strtod_l+0x43e>
 800c61e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c620:	691a      	ldr	r2, [r3, #16]
 800c622:	3202      	adds	r2, #2
 800c624:	f103 010c 	add.w	r1, r3, #12
 800c628:	0092      	lsls	r2, r2, #2
 800c62a:	300c      	adds	r0, #12
 800c62c:	f000 ff1e 	bl	800d46c <memcpy>
 800c630:	ec4b ab10 	vmov	d0, sl, fp
 800c634:	9805      	ldr	r0, [sp, #20]
 800c636:	aa1c      	add	r2, sp, #112	@ 0x70
 800c638:	a91b      	add	r1, sp, #108	@ 0x6c
 800c63a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c63e:	f7ff fbd7 	bl	800bdf0 <__d2b>
 800c642:	901a      	str	r0, [sp, #104]	@ 0x68
 800c644:	2800      	cmp	r0, #0
 800c646:	f43f aede 	beq.w	800c406 <_strtod_l+0x43e>
 800c64a:	9805      	ldr	r0, [sp, #20]
 800c64c:	2101      	movs	r1, #1
 800c64e:	f7ff f929 	bl	800b8a4 <__i2b>
 800c652:	4680      	mov	r8, r0
 800c654:	b948      	cbnz	r0, 800c66a <_strtod_l+0x6a2>
 800c656:	f04f 0800 	mov.w	r8, #0
 800c65a:	e6d4      	b.n	800c406 <_strtod_l+0x43e>
 800c65c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c660:	fa02 f303 	lsl.w	r3, r2, r3
 800c664:	ea03 0a0a 	and.w	sl, r3, sl
 800c668:	e7b0      	b.n	800c5cc <_strtod_l+0x604>
 800c66a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c66c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c66e:	2d00      	cmp	r5, #0
 800c670:	bfab      	itete	ge
 800c672:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c674:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c676:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c678:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c67a:	bfac      	ite	ge
 800c67c:	18ef      	addge	r7, r5, r3
 800c67e:	1b5e      	sublt	r6, r3, r5
 800c680:	9b08      	ldr	r3, [sp, #32]
 800c682:	1aed      	subs	r5, r5, r3
 800c684:	4415      	add	r5, r2
 800c686:	4b66      	ldr	r3, [pc, #408]	@ (800c820 <_strtod_l+0x858>)
 800c688:	3d01      	subs	r5, #1
 800c68a:	429d      	cmp	r5, r3
 800c68c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c690:	da50      	bge.n	800c734 <_strtod_l+0x76c>
 800c692:	1b5b      	subs	r3, r3, r5
 800c694:	2b1f      	cmp	r3, #31
 800c696:	eba2 0203 	sub.w	r2, r2, r3
 800c69a:	f04f 0101 	mov.w	r1, #1
 800c69e:	dc3d      	bgt.n	800c71c <_strtod_l+0x754>
 800c6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800c6a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c6aa:	18bd      	adds	r5, r7, r2
 800c6ac:	9b08      	ldr	r3, [sp, #32]
 800c6ae:	42af      	cmp	r7, r5
 800c6b0:	4416      	add	r6, r2
 800c6b2:	441e      	add	r6, r3
 800c6b4:	463b      	mov	r3, r7
 800c6b6:	bfa8      	it	ge
 800c6b8:	462b      	movge	r3, r5
 800c6ba:	42b3      	cmp	r3, r6
 800c6bc:	bfa8      	it	ge
 800c6be:	4633      	movge	r3, r6
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bfc2      	ittt	gt
 800c6c4:	1aed      	subgt	r5, r5, r3
 800c6c6:	1af6      	subgt	r6, r6, r3
 800c6c8:	1aff      	subgt	r7, r7, r3
 800c6ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dd16      	ble.n	800c6fe <_strtod_l+0x736>
 800c6d0:	4641      	mov	r1, r8
 800c6d2:	9805      	ldr	r0, [sp, #20]
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	f7ff f9a5 	bl	800ba24 <__pow5mult>
 800c6da:	4680      	mov	r8, r0
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d0ba      	beq.n	800c656 <_strtod_l+0x68e>
 800c6e0:	4601      	mov	r1, r0
 800c6e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c6e4:	9805      	ldr	r0, [sp, #20]
 800c6e6:	f7ff f8f3 	bl	800b8d0 <__multiply>
 800c6ea:	900e      	str	r0, [sp, #56]	@ 0x38
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	f43f ae8a 	beq.w	800c406 <_strtod_l+0x43e>
 800c6f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6f4:	9805      	ldr	r0, [sp, #20]
 800c6f6:	f7fe ffd7 	bl	800b6a8 <_Bfree>
 800c6fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6fe:	2d00      	cmp	r5, #0
 800c700:	dc1d      	bgt.n	800c73e <_strtod_l+0x776>
 800c702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c704:	2b00      	cmp	r3, #0
 800c706:	dd23      	ble.n	800c750 <_strtod_l+0x788>
 800c708:	4649      	mov	r1, r9
 800c70a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c70c:	9805      	ldr	r0, [sp, #20]
 800c70e:	f7ff f989 	bl	800ba24 <__pow5mult>
 800c712:	4681      	mov	r9, r0
 800c714:	b9e0      	cbnz	r0, 800c750 <_strtod_l+0x788>
 800c716:	f04f 0900 	mov.w	r9, #0
 800c71a:	e674      	b.n	800c406 <_strtod_l+0x43e>
 800c71c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c720:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c724:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c728:	35e2      	adds	r5, #226	@ 0xe2
 800c72a:	fa01 f305 	lsl.w	r3, r1, r5
 800c72e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c730:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c732:	e7ba      	b.n	800c6aa <_strtod_l+0x6e2>
 800c734:	2300      	movs	r3, #0
 800c736:	9310      	str	r3, [sp, #64]	@ 0x40
 800c738:	2301      	movs	r3, #1
 800c73a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c73c:	e7b5      	b.n	800c6aa <_strtod_l+0x6e2>
 800c73e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c740:	9805      	ldr	r0, [sp, #20]
 800c742:	462a      	mov	r2, r5
 800c744:	f7ff f9c8 	bl	800bad8 <__lshift>
 800c748:	901a      	str	r0, [sp, #104]	@ 0x68
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d1d9      	bne.n	800c702 <_strtod_l+0x73a>
 800c74e:	e65a      	b.n	800c406 <_strtod_l+0x43e>
 800c750:	2e00      	cmp	r6, #0
 800c752:	dd07      	ble.n	800c764 <_strtod_l+0x79c>
 800c754:	4649      	mov	r1, r9
 800c756:	9805      	ldr	r0, [sp, #20]
 800c758:	4632      	mov	r2, r6
 800c75a:	f7ff f9bd 	bl	800bad8 <__lshift>
 800c75e:	4681      	mov	r9, r0
 800c760:	2800      	cmp	r0, #0
 800c762:	d0d8      	beq.n	800c716 <_strtod_l+0x74e>
 800c764:	2f00      	cmp	r7, #0
 800c766:	dd08      	ble.n	800c77a <_strtod_l+0x7b2>
 800c768:	4641      	mov	r1, r8
 800c76a:	9805      	ldr	r0, [sp, #20]
 800c76c:	463a      	mov	r2, r7
 800c76e:	f7ff f9b3 	bl	800bad8 <__lshift>
 800c772:	4680      	mov	r8, r0
 800c774:	2800      	cmp	r0, #0
 800c776:	f43f ae46 	beq.w	800c406 <_strtod_l+0x43e>
 800c77a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c77c:	9805      	ldr	r0, [sp, #20]
 800c77e:	464a      	mov	r2, r9
 800c780:	f7ff fa32 	bl	800bbe8 <__mdiff>
 800c784:	4604      	mov	r4, r0
 800c786:	2800      	cmp	r0, #0
 800c788:	f43f ae3d 	beq.w	800c406 <_strtod_l+0x43e>
 800c78c:	68c3      	ldr	r3, [r0, #12]
 800c78e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c790:	2300      	movs	r3, #0
 800c792:	60c3      	str	r3, [r0, #12]
 800c794:	4641      	mov	r1, r8
 800c796:	f7ff fa0b 	bl	800bbb0 <__mcmp>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	da46      	bge.n	800c82c <_strtod_l+0x864>
 800c79e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7a0:	ea53 030a 	orrs.w	r3, r3, sl
 800c7a4:	d16c      	bne.n	800c880 <_strtod_l+0x8b8>
 800c7a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d168      	bne.n	800c880 <_strtod_l+0x8b8>
 800c7ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c7b2:	0d1b      	lsrs	r3, r3, #20
 800c7b4:	051b      	lsls	r3, r3, #20
 800c7b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c7ba:	d961      	bls.n	800c880 <_strtod_l+0x8b8>
 800c7bc:	6963      	ldr	r3, [r4, #20]
 800c7be:	b913      	cbnz	r3, 800c7c6 <_strtod_l+0x7fe>
 800c7c0:	6923      	ldr	r3, [r4, #16]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	dd5c      	ble.n	800c880 <_strtod_l+0x8b8>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	9805      	ldr	r0, [sp, #20]
 800c7cc:	f7ff f984 	bl	800bad8 <__lshift>
 800c7d0:	4641      	mov	r1, r8
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	f7ff f9ec 	bl	800bbb0 <__mcmp>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	dd51      	ble.n	800c880 <_strtod_l+0x8b8>
 800c7dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c7e0:	9a08      	ldr	r2, [sp, #32]
 800c7e2:	0d1b      	lsrs	r3, r3, #20
 800c7e4:	051b      	lsls	r3, r3, #20
 800c7e6:	2a00      	cmp	r2, #0
 800c7e8:	d06b      	beq.n	800c8c2 <_strtod_l+0x8fa>
 800c7ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c7ee:	d868      	bhi.n	800c8c2 <_strtod_l+0x8fa>
 800c7f0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c7f4:	f67f ae9d 	bls.w	800c532 <_strtod_l+0x56a>
 800c7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c824 <_strtod_l+0x85c>)
 800c7fa:	4650      	mov	r0, sl
 800c7fc:	4659      	mov	r1, fp
 800c7fe:	2200      	movs	r2, #0
 800c800:	f7f3 ff22 	bl	8000648 <__aeabi_dmul>
 800c804:	4b08      	ldr	r3, [pc, #32]	@ (800c828 <_strtod_l+0x860>)
 800c806:	400b      	ands	r3, r1
 800c808:	4682      	mov	sl, r0
 800c80a:	468b      	mov	fp, r1
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f47f ae05 	bne.w	800c41c <_strtod_l+0x454>
 800c812:	9a05      	ldr	r2, [sp, #20]
 800c814:	2322      	movs	r3, #34	@ 0x22
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	e600      	b.n	800c41c <_strtod_l+0x454>
 800c81a:	bf00      	nop
 800c81c:	0800e640 	.word	0x0800e640
 800c820:	fffffc02 	.word	0xfffffc02
 800c824:	39500000 	.word	0x39500000
 800c828:	7ff00000 	.word	0x7ff00000
 800c82c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c830:	d165      	bne.n	800c8fe <_strtod_l+0x936>
 800c832:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c834:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c838:	b35a      	cbz	r2, 800c892 <_strtod_l+0x8ca>
 800c83a:	4a9f      	ldr	r2, [pc, #636]	@ (800cab8 <_strtod_l+0xaf0>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d12b      	bne.n	800c898 <_strtod_l+0x8d0>
 800c840:	9b08      	ldr	r3, [sp, #32]
 800c842:	4651      	mov	r1, sl
 800c844:	b303      	cbz	r3, 800c888 <_strtod_l+0x8c0>
 800c846:	4b9d      	ldr	r3, [pc, #628]	@ (800cabc <_strtod_l+0xaf4>)
 800c848:	465a      	mov	r2, fp
 800c84a:	4013      	ands	r3, r2
 800c84c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c854:	d81b      	bhi.n	800c88e <_strtod_l+0x8c6>
 800c856:	0d1b      	lsrs	r3, r3, #20
 800c858:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c85c:	fa02 f303 	lsl.w	r3, r2, r3
 800c860:	4299      	cmp	r1, r3
 800c862:	d119      	bne.n	800c898 <_strtod_l+0x8d0>
 800c864:	4b96      	ldr	r3, [pc, #600]	@ (800cac0 <_strtod_l+0xaf8>)
 800c866:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c868:	429a      	cmp	r2, r3
 800c86a:	d102      	bne.n	800c872 <_strtod_l+0x8aa>
 800c86c:	3101      	adds	r1, #1
 800c86e:	f43f adca 	beq.w	800c406 <_strtod_l+0x43e>
 800c872:	4b92      	ldr	r3, [pc, #584]	@ (800cabc <_strtod_l+0xaf4>)
 800c874:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c876:	401a      	ands	r2, r3
 800c878:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c87c:	f04f 0a00 	mov.w	sl, #0
 800c880:	9b08      	ldr	r3, [sp, #32]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1b8      	bne.n	800c7f8 <_strtod_l+0x830>
 800c886:	e5c9      	b.n	800c41c <_strtod_l+0x454>
 800c888:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c88c:	e7e8      	b.n	800c860 <_strtod_l+0x898>
 800c88e:	4613      	mov	r3, r2
 800c890:	e7e6      	b.n	800c860 <_strtod_l+0x898>
 800c892:	ea53 030a 	orrs.w	r3, r3, sl
 800c896:	d0a1      	beq.n	800c7dc <_strtod_l+0x814>
 800c898:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c89a:	b1db      	cbz	r3, 800c8d4 <_strtod_l+0x90c>
 800c89c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c89e:	4213      	tst	r3, r2
 800c8a0:	d0ee      	beq.n	800c880 <_strtod_l+0x8b8>
 800c8a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8a4:	9a08      	ldr	r2, [sp, #32]
 800c8a6:	4650      	mov	r0, sl
 800c8a8:	4659      	mov	r1, fp
 800c8aa:	b1bb      	cbz	r3, 800c8dc <_strtod_l+0x914>
 800c8ac:	f7ff fb6e 	bl	800bf8c <sulp>
 800c8b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8b4:	ec53 2b10 	vmov	r2, r3, d0
 800c8b8:	f7f3 fd10 	bl	80002dc <__adddf3>
 800c8bc:	4682      	mov	sl, r0
 800c8be:	468b      	mov	fp, r1
 800c8c0:	e7de      	b.n	800c880 <_strtod_l+0x8b8>
 800c8c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c8c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c8ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c8ce:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c8d2:	e7d5      	b.n	800c880 <_strtod_l+0x8b8>
 800c8d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c8d6:	ea13 0f0a 	tst.w	r3, sl
 800c8da:	e7e1      	b.n	800c8a0 <_strtod_l+0x8d8>
 800c8dc:	f7ff fb56 	bl	800bf8c <sulp>
 800c8e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8e4:	ec53 2b10 	vmov	r2, r3, d0
 800c8e8:	f7f3 fcf6 	bl	80002d8 <__aeabi_dsub>
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	4682      	mov	sl, r0
 800c8f2:	468b      	mov	fp, r1
 800c8f4:	f7f4 f910 	bl	8000b18 <__aeabi_dcmpeq>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d0c1      	beq.n	800c880 <_strtod_l+0x8b8>
 800c8fc:	e619      	b.n	800c532 <_strtod_l+0x56a>
 800c8fe:	4641      	mov	r1, r8
 800c900:	4620      	mov	r0, r4
 800c902:	f7ff facd 	bl	800bea0 <__ratio>
 800c906:	ec57 6b10 	vmov	r6, r7, d0
 800c90a:	2200      	movs	r2, #0
 800c90c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c910:	4630      	mov	r0, r6
 800c912:	4639      	mov	r1, r7
 800c914:	f7f4 f914 	bl	8000b40 <__aeabi_dcmple>
 800c918:	2800      	cmp	r0, #0
 800c91a:	d06f      	beq.n	800c9fc <_strtod_l+0xa34>
 800c91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d17a      	bne.n	800ca18 <_strtod_l+0xa50>
 800c922:	f1ba 0f00 	cmp.w	sl, #0
 800c926:	d158      	bne.n	800c9da <_strtod_l+0xa12>
 800c928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c92a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d15a      	bne.n	800c9e8 <_strtod_l+0xa20>
 800c932:	4b64      	ldr	r3, [pc, #400]	@ (800cac4 <_strtod_l+0xafc>)
 800c934:	2200      	movs	r2, #0
 800c936:	4630      	mov	r0, r6
 800c938:	4639      	mov	r1, r7
 800c93a:	f7f4 f8f7 	bl	8000b2c <__aeabi_dcmplt>
 800c93e:	2800      	cmp	r0, #0
 800c940:	d159      	bne.n	800c9f6 <_strtod_l+0xa2e>
 800c942:	4630      	mov	r0, r6
 800c944:	4639      	mov	r1, r7
 800c946:	4b60      	ldr	r3, [pc, #384]	@ (800cac8 <_strtod_l+0xb00>)
 800c948:	2200      	movs	r2, #0
 800c94a:	f7f3 fe7d 	bl	8000648 <__aeabi_dmul>
 800c94e:	4606      	mov	r6, r0
 800c950:	460f      	mov	r7, r1
 800c952:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c956:	9606      	str	r6, [sp, #24]
 800c958:	9307      	str	r3, [sp, #28]
 800c95a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c95e:	4d57      	ldr	r5, [pc, #348]	@ (800cabc <_strtod_l+0xaf4>)
 800c960:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c966:	401d      	ands	r5, r3
 800c968:	4b58      	ldr	r3, [pc, #352]	@ (800cacc <_strtod_l+0xb04>)
 800c96a:	429d      	cmp	r5, r3
 800c96c:	f040 80b2 	bne.w	800cad4 <_strtod_l+0xb0c>
 800c970:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c972:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c976:	ec4b ab10 	vmov	d0, sl, fp
 800c97a:	f7ff f9c9 	bl	800bd10 <__ulp>
 800c97e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c982:	ec51 0b10 	vmov	r0, r1, d0
 800c986:	f7f3 fe5f 	bl	8000648 <__aeabi_dmul>
 800c98a:	4652      	mov	r2, sl
 800c98c:	465b      	mov	r3, fp
 800c98e:	f7f3 fca5 	bl	80002dc <__adddf3>
 800c992:	460b      	mov	r3, r1
 800c994:	4949      	ldr	r1, [pc, #292]	@ (800cabc <_strtod_l+0xaf4>)
 800c996:	4a4e      	ldr	r2, [pc, #312]	@ (800cad0 <_strtod_l+0xb08>)
 800c998:	4019      	ands	r1, r3
 800c99a:	4291      	cmp	r1, r2
 800c99c:	4682      	mov	sl, r0
 800c99e:	d942      	bls.n	800ca26 <_strtod_l+0xa5e>
 800c9a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c9a2:	4b47      	ldr	r3, [pc, #284]	@ (800cac0 <_strtod_l+0xaf8>)
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d103      	bne.n	800c9b0 <_strtod_l+0x9e8>
 800c9a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	f43f ad2b 	beq.w	800c406 <_strtod_l+0x43e>
 800c9b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cac0 <_strtod_l+0xaf8>
 800c9b4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c9b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9ba:	9805      	ldr	r0, [sp, #20]
 800c9bc:	f7fe fe74 	bl	800b6a8 <_Bfree>
 800c9c0:	9805      	ldr	r0, [sp, #20]
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	f7fe fe70 	bl	800b6a8 <_Bfree>
 800c9c8:	9805      	ldr	r0, [sp, #20]
 800c9ca:	4641      	mov	r1, r8
 800c9cc:	f7fe fe6c 	bl	800b6a8 <_Bfree>
 800c9d0:	9805      	ldr	r0, [sp, #20]
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	f7fe fe68 	bl	800b6a8 <_Bfree>
 800c9d8:	e618      	b.n	800c60c <_strtod_l+0x644>
 800c9da:	f1ba 0f01 	cmp.w	sl, #1
 800c9de:	d103      	bne.n	800c9e8 <_strtod_l+0xa20>
 800c9e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f43f ada5 	beq.w	800c532 <_strtod_l+0x56a>
 800c9e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ca98 <_strtod_l+0xad0>
 800c9ec:	4f35      	ldr	r7, [pc, #212]	@ (800cac4 <_strtod_l+0xafc>)
 800c9ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9f2:	2600      	movs	r6, #0
 800c9f4:	e7b1      	b.n	800c95a <_strtod_l+0x992>
 800c9f6:	4f34      	ldr	r7, [pc, #208]	@ (800cac8 <_strtod_l+0xb00>)
 800c9f8:	2600      	movs	r6, #0
 800c9fa:	e7aa      	b.n	800c952 <_strtod_l+0x98a>
 800c9fc:	4b32      	ldr	r3, [pc, #200]	@ (800cac8 <_strtod_l+0xb00>)
 800c9fe:	4630      	mov	r0, r6
 800ca00:	4639      	mov	r1, r7
 800ca02:	2200      	movs	r2, #0
 800ca04:	f7f3 fe20 	bl	8000648 <__aeabi_dmul>
 800ca08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	460f      	mov	r7, r1
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d09f      	beq.n	800c952 <_strtod_l+0x98a>
 800ca12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ca16:	e7a0      	b.n	800c95a <_strtod_l+0x992>
 800ca18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800caa0 <_strtod_l+0xad8>
 800ca1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ca20:	ec57 6b17 	vmov	r6, r7, d7
 800ca24:	e799      	b.n	800c95a <_strtod_l+0x992>
 800ca26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ca2a:	9b08      	ldr	r3, [sp, #32]
 800ca2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1c1      	bne.n	800c9b8 <_strtod_l+0x9f0>
 800ca34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca38:	0d1b      	lsrs	r3, r3, #20
 800ca3a:	051b      	lsls	r3, r3, #20
 800ca3c:	429d      	cmp	r5, r3
 800ca3e:	d1bb      	bne.n	800c9b8 <_strtod_l+0x9f0>
 800ca40:	4630      	mov	r0, r6
 800ca42:	4639      	mov	r1, r7
 800ca44:	f7f4 f960 	bl	8000d08 <__aeabi_d2lz>
 800ca48:	f7f3 fdd0 	bl	80005ec <__aeabi_l2d>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4630      	mov	r0, r6
 800ca52:	4639      	mov	r1, r7
 800ca54:	f7f3 fc40 	bl	80002d8 <__aeabi_dsub>
 800ca58:	460b      	mov	r3, r1
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ca60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ca64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca66:	ea46 060a 	orr.w	r6, r6, sl
 800ca6a:	431e      	orrs	r6, r3
 800ca6c:	d06f      	beq.n	800cb4e <_strtod_l+0xb86>
 800ca6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800caa8 <_strtod_l+0xae0>)
 800ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca74:	f7f4 f85a 	bl	8000b2c <__aeabi_dcmplt>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	f47f accf 	bne.w	800c41c <_strtod_l+0x454>
 800ca7e:	a30c      	add	r3, pc, #48	@ (adr r3, 800cab0 <_strtod_l+0xae8>)
 800ca80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca88:	f7f4 f86e 	bl	8000b68 <__aeabi_dcmpgt>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d093      	beq.n	800c9b8 <_strtod_l+0x9f0>
 800ca90:	e4c4      	b.n	800c41c <_strtod_l+0x454>
 800ca92:	bf00      	nop
 800ca94:	f3af 8000 	nop.w
 800ca98:	00000000 	.word	0x00000000
 800ca9c:	bff00000 	.word	0xbff00000
 800caa0:	00000000 	.word	0x00000000
 800caa4:	3ff00000 	.word	0x3ff00000
 800caa8:	94a03595 	.word	0x94a03595
 800caac:	3fdfffff 	.word	0x3fdfffff
 800cab0:	35afe535 	.word	0x35afe535
 800cab4:	3fe00000 	.word	0x3fe00000
 800cab8:	000fffff 	.word	0x000fffff
 800cabc:	7ff00000 	.word	0x7ff00000
 800cac0:	7fefffff 	.word	0x7fefffff
 800cac4:	3ff00000 	.word	0x3ff00000
 800cac8:	3fe00000 	.word	0x3fe00000
 800cacc:	7fe00000 	.word	0x7fe00000
 800cad0:	7c9fffff 	.word	0x7c9fffff
 800cad4:	9b08      	ldr	r3, [sp, #32]
 800cad6:	b323      	cbz	r3, 800cb22 <_strtod_l+0xb5a>
 800cad8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cadc:	d821      	bhi.n	800cb22 <_strtod_l+0xb5a>
 800cade:	a328      	add	r3, pc, #160	@ (adr r3, 800cb80 <_strtod_l+0xbb8>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	4630      	mov	r0, r6
 800cae6:	4639      	mov	r1, r7
 800cae8:	f7f4 f82a 	bl	8000b40 <__aeabi_dcmple>
 800caec:	b1a0      	cbz	r0, 800cb18 <_strtod_l+0xb50>
 800caee:	4639      	mov	r1, r7
 800caf0:	4630      	mov	r0, r6
 800caf2:	f7f4 f881 	bl	8000bf8 <__aeabi_d2uiz>
 800caf6:	2801      	cmp	r0, #1
 800caf8:	bf38      	it	cc
 800cafa:	2001      	movcc	r0, #1
 800cafc:	f7f3 fd2a 	bl	8000554 <__aeabi_ui2d>
 800cb00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb02:	4606      	mov	r6, r0
 800cb04:	460f      	mov	r7, r1
 800cb06:	b9fb      	cbnz	r3, 800cb48 <_strtod_l+0xb80>
 800cb08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cb0c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cb0e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cb10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cb14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cb18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cb1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cb1e:	1b5b      	subs	r3, r3, r5
 800cb20:	9311      	str	r3, [sp, #68]	@ 0x44
 800cb22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cb26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cb2a:	f7ff f8f1 	bl	800bd10 <__ulp>
 800cb2e:	4650      	mov	r0, sl
 800cb30:	ec53 2b10 	vmov	r2, r3, d0
 800cb34:	4659      	mov	r1, fp
 800cb36:	f7f3 fd87 	bl	8000648 <__aeabi_dmul>
 800cb3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cb3e:	f7f3 fbcd 	bl	80002dc <__adddf3>
 800cb42:	4682      	mov	sl, r0
 800cb44:	468b      	mov	fp, r1
 800cb46:	e770      	b.n	800ca2a <_strtod_l+0xa62>
 800cb48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cb4c:	e7e0      	b.n	800cb10 <_strtod_l+0xb48>
 800cb4e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cb88 <_strtod_l+0xbc0>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	f7f3 ffea 	bl	8000b2c <__aeabi_dcmplt>
 800cb58:	e798      	b.n	800ca8c <_strtod_l+0xac4>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cb60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb62:	6013      	str	r3, [r2, #0]
 800cb64:	f7ff ba6d 	b.w	800c042 <_strtod_l+0x7a>
 800cb68:	2a65      	cmp	r2, #101	@ 0x65
 800cb6a:	f43f ab66 	beq.w	800c23a <_strtod_l+0x272>
 800cb6e:	2a45      	cmp	r2, #69	@ 0x45
 800cb70:	f43f ab63 	beq.w	800c23a <_strtod_l+0x272>
 800cb74:	2301      	movs	r3, #1
 800cb76:	f7ff bb9e 	b.w	800c2b6 <_strtod_l+0x2ee>
 800cb7a:	bf00      	nop
 800cb7c:	f3af 8000 	nop.w
 800cb80:	ffc00000 	.word	0xffc00000
 800cb84:	41dfffff 	.word	0x41dfffff
 800cb88:	94a03595 	.word	0x94a03595
 800cb8c:	3fcfffff 	.word	0x3fcfffff

0800cb90 <_strtod_r>:
 800cb90:	4b01      	ldr	r3, [pc, #4]	@ (800cb98 <_strtod_r+0x8>)
 800cb92:	f7ff ba19 	b.w	800bfc8 <_strtod_l>
 800cb96:	bf00      	nop
 800cb98:	20000fac 	.word	0x20000fac

0800cb9c <_strtol_l.constprop.0>:
 800cb9c:	2b24      	cmp	r3, #36	@ 0x24
 800cb9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba2:	4686      	mov	lr, r0
 800cba4:	4690      	mov	r8, r2
 800cba6:	d801      	bhi.n	800cbac <_strtol_l.constprop.0+0x10>
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d106      	bne.n	800cbba <_strtol_l.constprop.0+0x1e>
 800cbac:	f7fd fdba 	bl	800a724 <__errno>
 800cbb0:	2316      	movs	r3, #22
 800cbb2:	6003      	str	r3, [r0, #0]
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbba:	4834      	ldr	r0, [pc, #208]	@ (800cc8c <_strtol_l.constprop.0+0xf0>)
 800cbbc:	460d      	mov	r5, r1
 800cbbe:	462a      	mov	r2, r5
 800cbc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbc4:	5d06      	ldrb	r6, [r0, r4]
 800cbc6:	f016 0608 	ands.w	r6, r6, #8
 800cbca:	d1f8      	bne.n	800cbbe <_strtol_l.constprop.0+0x22>
 800cbcc:	2c2d      	cmp	r4, #45	@ 0x2d
 800cbce:	d12d      	bne.n	800cc2c <_strtol_l.constprop.0+0x90>
 800cbd0:	782c      	ldrb	r4, [r5, #0]
 800cbd2:	2601      	movs	r6, #1
 800cbd4:	1c95      	adds	r5, r2, #2
 800cbd6:	f033 0210 	bics.w	r2, r3, #16
 800cbda:	d109      	bne.n	800cbf0 <_strtol_l.constprop.0+0x54>
 800cbdc:	2c30      	cmp	r4, #48	@ 0x30
 800cbde:	d12a      	bne.n	800cc36 <_strtol_l.constprop.0+0x9a>
 800cbe0:	782a      	ldrb	r2, [r5, #0]
 800cbe2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cbe6:	2a58      	cmp	r2, #88	@ 0x58
 800cbe8:	d125      	bne.n	800cc36 <_strtol_l.constprop.0+0x9a>
 800cbea:	786c      	ldrb	r4, [r5, #1]
 800cbec:	2310      	movs	r3, #16
 800cbee:	3502      	adds	r5, #2
 800cbf0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cbf4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	fbbc f9f3 	udiv	r9, ip, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	fb03 ca19 	mls	sl, r3, r9, ip
 800cc04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cc08:	2f09      	cmp	r7, #9
 800cc0a:	d81b      	bhi.n	800cc44 <_strtol_l.constprop.0+0xa8>
 800cc0c:	463c      	mov	r4, r7
 800cc0e:	42a3      	cmp	r3, r4
 800cc10:	dd27      	ble.n	800cc62 <_strtol_l.constprop.0+0xc6>
 800cc12:	1c57      	adds	r7, r2, #1
 800cc14:	d007      	beq.n	800cc26 <_strtol_l.constprop.0+0x8a>
 800cc16:	4581      	cmp	r9, r0
 800cc18:	d320      	bcc.n	800cc5c <_strtol_l.constprop.0+0xc0>
 800cc1a:	d101      	bne.n	800cc20 <_strtol_l.constprop.0+0x84>
 800cc1c:	45a2      	cmp	sl, r4
 800cc1e:	db1d      	blt.n	800cc5c <_strtol_l.constprop.0+0xc0>
 800cc20:	fb00 4003 	mla	r0, r0, r3, r4
 800cc24:	2201      	movs	r2, #1
 800cc26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc2a:	e7eb      	b.n	800cc04 <_strtol_l.constprop.0+0x68>
 800cc2c:	2c2b      	cmp	r4, #43	@ 0x2b
 800cc2e:	bf04      	itt	eq
 800cc30:	782c      	ldrbeq	r4, [r5, #0]
 800cc32:	1c95      	addeq	r5, r2, #2
 800cc34:	e7cf      	b.n	800cbd6 <_strtol_l.constprop.0+0x3a>
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1da      	bne.n	800cbf0 <_strtol_l.constprop.0+0x54>
 800cc3a:	2c30      	cmp	r4, #48	@ 0x30
 800cc3c:	bf0c      	ite	eq
 800cc3e:	2308      	moveq	r3, #8
 800cc40:	230a      	movne	r3, #10
 800cc42:	e7d5      	b.n	800cbf0 <_strtol_l.constprop.0+0x54>
 800cc44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cc48:	2f19      	cmp	r7, #25
 800cc4a:	d801      	bhi.n	800cc50 <_strtol_l.constprop.0+0xb4>
 800cc4c:	3c37      	subs	r4, #55	@ 0x37
 800cc4e:	e7de      	b.n	800cc0e <_strtol_l.constprop.0+0x72>
 800cc50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cc54:	2f19      	cmp	r7, #25
 800cc56:	d804      	bhi.n	800cc62 <_strtol_l.constprop.0+0xc6>
 800cc58:	3c57      	subs	r4, #87	@ 0x57
 800cc5a:	e7d8      	b.n	800cc0e <_strtol_l.constprop.0+0x72>
 800cc5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc60:	e7e1      	b.n	800cc26 <_strtol_l.constprop.0+0x8a>
 800cc62:	1c53      	adds	r3, r2, #1
 800cc64:	d108      	bne.n	800cc78 <_strtol_l.constprop.0+0xdc>
 800cc66:	2322      	movs	r3, #34	@ 0x22
 800cc68:	f8ce 3000 	str.w	r3, [lr]
 800cc6c:	4660      	mov	r0, ip
 800cc6e:	f1b8 0f00 	cmp.w	r8, #0
 800cc72:	d0a0      	beq.n	800cbb6 <_strtol_l.constprop.0+0x1a>
 800cc74:	1e69      	subs	r1, r5, #1
 800cc76:	e006      	b.n	800cc86 <_strtol_l.constprop.0+0xea>
 800cc78:	b106      	cbz	r6, 800cc7c <_strtol_l.constprop.0+0xe0>
 800cc7a:	4240      	negs	r0, r0
 800cc7c:	f1b8 0f00 	cmp.w	r8, #0
 800cc80:	d099      	beq.n	800cbb6 <_strtol_l.constprop.0+0x1a>
 800cc82:	2a00      	cmp	r2, #0
 800cc84:	d1f6      	bne.n	800cc74 <_strtol_l.constprop.0+0xd8>
 800cc86:	f8c8 1000 	str.w	r1, [r8]
 800cc8a:	e794      	b.n	800cbb6 <_strtol_l.constprop.0+0x1a>
 800cc8c:	0800e669 	.word	0x0800e669

0800cc90 <_strtol_r>:
 800cc90:	f7ff bf84 	b.w	800cb9c <_strtol_l.constprop.0>

0800cc94 <__ssputs_r>:
 800cc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc98:	688e      	ldr	r6, [r1, #8]
 800cc9a:	461f      	mov	r7, r3
 800cc9c:	42be      	cmp	r6, r7
 800cc9e:	680b      	ldr	r3, [r1, #0]
 800cca0:	4682      	mov	sl, r0
 800cca2:	460c      	mov	r4, r1
 800cca4:	4690      	mov	r8, r2
 800cca6:	d82d      	bhi.n	800cd04 <__ssputs_r+0x70>
 800cca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ccb0:	d026      	beq.n	800cd00 <__ssputs_r+0x6c>
 800ccb2:	6965      	ldr	r5, [r4, #20]
 800ccb4:	6909      	ldr	r1, [r1, #16]
 800ccb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccba:	eba3 0901 	sub.w	r9, r3, r1
 800ccbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccc2:	1c7b      	adds	r3, r7, #1
 800ccc4:	444b      	add	r3, r9
 800ccc6:	106d      	asrs	r5, r5, #1
 800ccc8:	429d      	cmp	r5, r3
 800ccca:	bf38      	it	cc
 800cccc:	461d      	movcc	r5, r3
 800ccce:	0553      	lsls	r3, r2, #21
 800ccd0:	d527      	bpl.n	800cd22 <__ssputs_r+0x8e>
 800ccd2:	4629      	mov	r1, r5
 800ccd4:	f7fe fc1c 	bl	800b510 <_malloc_r>
 800ccd8:	4606      	mov	r6, r0
 800ccda:	b360      	cbz	r0, 800cd36 <__ssputs_r+0xa2>
 800ccdc:	6921      	ldr	r1, [r4, #16]
 800ccde:	464a      	mov	r2, r9
 800cce0:	f000 fbc4 	bl	800d46c <memcpy>
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ccea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccee:	81a3      	strh	r3, [r4, #12]
 800ccf0:	6126      	str	r6, [r4, #16]
 800ccf2:	6165      	str	r5, [r4, #20]
 800ccf4:	444e      	add	r6, r9
 800ccf6:	eba5 0509 	sub.w	r5, r5, r9
 800ccfa:	6026      	str	r6, [r4, #0]
 800ccfc:	60a5      	str	r5, [r4, #8]
 800ccfe:	463e      	mov	r6, r7
 800cd00:	42be      	cmp	r6, r7
 800cd02:	d900      	bls.n	800cd06 <__ssputs_r+0x72>
 800cd04:	463e      	mov	r6, r7
 800cd06:	6820      	ldr	r0, [r4, #0]
 800cd08:	4632      	mov	r2, r6
 800cd0a:	4641      	mov	r1, r8
 800cd0c:	f7fd fc9e 	bl	800a64c <memmove>
 800cd10:	68a3      	ldr	r3, [r4, #8]
 800cd12:	1b9b      	subs	r3, r3, r6
 800cd14:	60a3      	str	r3, [r4, #8]
 800cd16:	6823      	ldr	r3, [r4, #0]
 800cd18:	4433      	add	r3, r6
 800cd1a:	6023      	str	r3, [r4, #0]
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd22:	462a      	mov	r2, r5
 800cd24:	f000 ff35 	bl	800db92 <_realloc_r>
 800cd28:	4606      	mov	r6, r0
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d1e0      	bne.n	800ccf0 <__ssputs_r+0x5c>
 800cd2e:	6921      	ldr	r1, [r4, #16]
 800cd30:	4650      	mov	r0, sl
 800cd32:	f7fe fb79 	bl	800b428 <_free_r>
 800cd36:	230c      	movs	r3, #12
 800cd38:	f8ca 3000 	str.w	r3, [sl]
 800cd3c:	89a3      	ldrh	r3, [r4, #12]
 800cd3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd42:	81a3      	strh	r3, [r4, #12]
 800cd44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd48:	e7e9      	b.n	800cd1e <__ssputs_r+0x8a>
	...

0800cd4c <_svfiprintf_r>:
 800cd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd50:	4698      	mov	r8, r3
 800cd52:	898b      	ldrh	r3, [r1, #12]
 800cd54:	061b      	lsls	r3, r3, #24
 800cd56:	b09d      	sub	sp, #116	@ 0x74
 800cd58:	4607      	mov	r7, r0
 800cd5a:	460d      	mov	r5, r1
 800cd5c:	4614      	mov	r4, r2
 800cd5e:	d510      	bpl.n	800cd82 <_svfiprintf_r+0x36>
 800cd60:	690b      	ldr	r3, [r1, #16]
 800cd62:	b973      	cbnz	r3, 800cd82 <_svfiprintf_r+0x36>
 800cd64:	2140      	movs	r1, #64	@ 0x40
 800cd66:	f7fe fbd3 	bl	800b510 <_malloc_r>
 800cd6a:	6028      	str	r0, [r5, #0]
 800cd6c:	6128      	str	r0, [r5, #16]
 800cd6e:	b930      	cbnz	r0, 800cd7e <_svfiprintf_r+0x32>
 800cd70:	230c      	movs	r3, #12
 800cd72:	603b      	str	r3, [r7, #0]
 800cd74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd78:	b01d      	add	sp, #116	@ 0x74
 800cd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7e:	2340      	movs	r3, #64	@ 0x40
 800cd80:	616b      	str	r3, [r5, #20]
 800cd82:	2300      	movs	r3, #0
 800cd84:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd86:	2320      	movs	r3, #32
 800cd88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd90:	2330      	movs	r3, #48	@ 0x30
 800cd92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf30 <_svfiprintf_r+0x1e4>
 800cd96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd9a:	f04f 0901 	mov.w	r9, #1
 800cd9e:	4623      	mov	r3, r4
 800cda0:	469a      	mov	sl, r3
 800cda2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cda6:	b10a      	cbz	r2, 800cdac <_svfiprintf_r+0x60>
 800cda8:	2a25      	cmp	r2, #37	@ 0x25
 800cdaa:	d1f9      	bne.n	800cda0 <_svfiprintf_r+0x54>
 800cdac:	ebba 0b04 	subs.w	fp, sl, r4
 800cdb0:	d00b      	beq.n	800cdca <_svfiprintf_r+0x7e>
 800cdb2:	465b      	mov	r3, fp
 800cdb4:	4622      	mov	r2, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	4638      	mov	r0, r7
 800cdba:	f7ff ff6b 	bl	800cc94 <__ssputs_r>
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	f000 80a7 	beq.w	800cf12 <_svfiprintf_r+0x1c6>
 800cdc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdc6:	445a      	add	r2, fp
 800cdc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdca:	f89a 3000 	ldrb.w	r3, [sl]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 809f 	beq.w	800cf12 <_svfiprintf_r+0x1c6>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdde:	f10a 0a01 	add.w	sl, sl, #1
 800cde2:	9304      	str	r3, [sp, #16]
 800cde4:	9307      	str	r3, [sp, #28]
 800cde6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdea:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdec:	4654      	mov	r4, sl
 800cdee:	2205      	movs	r2, #5
 800cdf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf4:	484e      	ldr	r0, [pc, #312]	@ (800cf30 <_svfiprintf_r+0x1e4>)
 800cdf6:	f7f3 fa13 	bl	8000220 <memchr>
 800cdfa:	9a04      	ldr	r2, [sp, #16]
 800cdfc:	b9d8      	cbnz	r0, 800ce36 <_svfiprintf_r+0xea>
 800cdfe:	06d0      	lsls	r0, r2, #27
 800ce00:	bf44      	itt	mi
 800ce02:	2320      	movmi	r3, #32
 800ce04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce08:	0711      	lsls	r1, r2, #28
 800ce0a:	bf44      	itt	mi
 800ce0c:	232b      	movmi	r3, #43	@ 0x2b
 800ce0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce12:	f89a 3000 	ldrb.w	r3, [sl]
 800ce16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce18:	d015      	beq.n	800ce46 <_svfiprintf_r+0xfa>
 800ce1a:	9a07      	ldr	r2, [sp, #28]
 800ce1c:	4654      	mov	r4, sl
 800ce1e:	2000      	movs	r0, #0
 800ce20:	f04f 0c0a 	mov.w	ip, #10
 800ce24:	4621      	mov	r1, r4
 800ce26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce2a:	3b30      	subs	r3, #48	@ 0x30
 800ce2c:	2b09      	cmp	r3, #9
 800ce2e:	d94b      	bls.n	800cec8 <_svfiprintf_r+0x17c>
 800ce30:	b1b0      	cbz	r0, 800ce60 <_svfiprintf_r+0x114>
 800ce32:	9207      	str	r2, [sp, #28]
 800ce34:	e014      	b.n	800ce60 <_svfiprintf_r+0x114>
 800ce36:	eba0 0308 	sub.w	r3, r0, r8
 800ce3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	9304      	str	r3, [sp, #16]
 800ce42:	46a2      	mov	sl, r4
 800ce44:	e7d2      	b.n	800cdec <_svfiprintf_r+0xa0>
 800ce46:	9b03      	ldr	r3, [sp, #12]
 800ce48:	1d19      	adds	r1, r3, #4
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	9103      	str	r1, [sp, #12]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	bfbb      	ittet	lt
 800ce52:	425b      	neglt	r3, r3
 800ce54:	f042 0202 	orrlt.w	r2, r2, #2
 800ce58:	9307      	strge	r3, [sp, #28]
 800ce5a:	9307      	strlt	r3, [sp, #28]
 800ce5c:	bfb8      	it	lt
 800ce5e:	9204      	strlt	r2, [sp, #16]
 800ce60:	7823      	ldrb	r3, [r4, #0]
 800ce62:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce64:	d10a      	bne.n	800ce7c <_svfiprintf_r+0x130>
 800ce66:	7863      	ldrb	r3, [r4, #1]
 800ce68:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce6a:	d132      	bne.n	800ced2 <_svfiprintf_r+0x186>
 800ce6c:	9b03      	ldr	r3, [sp, #12]
 800ce6e:	1d1a      	adds	r2, r3, #4
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	9203      	str	r2, [sp, #12]
 800ce74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce78:	3402      	adds	r4, #2
 800ce7a:	9305      	str	r3, [sp, #20]
 800ce7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf40 <_svfiprintf_r+0x1f4>
 800ce80:	7821      	ldrb	r1, [r4, #0]
 800ce82:	2203      	movs	r2, #3
 800ce84:	4650      	mov	r0, sl
 800ce86:	f7f3 f9cb 	bl	8000220 <memchr>
 800ce8a:	b138      	cbz	r0, 800ce9c <_svfiprintf_r+0x150>
 800ce8c:	9b04      	ldr	r3, [sp, #16]
 800ce8e:	eba0 000a 	sub.w	r0, r0, sl
 800ce92:	2240      	movs	r2, #64	@ 0x40
 800ce94:	4082      	lsls	r2, r0
 800ce96:	4313      	orrs	r3, r2
 800ce98:	3401      	adds	r4, #1
 800ce9a:	9304      	str	r3, [sp, #16]
 800ce9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cea0:	4824      	ldr	r0, [pc, #144]	@ (800cf34 <_svfiprintf_r+0x1e8>)
 800cea2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cea6:	2206      	movs	r2, #6
 800cea8:	f7f3 f9ba 	bl	8000220 <memchr>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d036      	beq.n	800cf1e <_svfiprintf_r+0x1d2>
 800ceb0:	4b21      	ldr	r3, [pc, #132]	@ (800cf38 <_svfiprintf_r+0x1ec>)
 800ceb2:	bb1b      	cbnz	r3, 800cefc <_svfiprintf_r+0x1b0>
 800ceb4:	9b03      	ldr	r3, [sp, #12]
 800ceb6:	3307      	adds	r3, #7
 800ceb8:	f023 0307 	bic.w	r3, r3, #7
 800cebc:	3308      	adds	r3, #8
 800cebe:	9303      	str	r3, [sp, #12]
 800cec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec2:	4433      	add	r3, r6
 800cec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cec6:	e76a      	b.n	800cd9e <_svfiprintf_r+0x52>
 800cec8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cecc:	460c      	mov	r4, r1
 800cece:	2001      	movs	r0, #1
 800ced0:	e7a8      	b.n	800ce24 <_svfiprintf_r+0xd8>
 800ced2:	2300      	movs	r3, #0
 800ced4:	3401      	adds	r4, #1
 800ced6:	9305      	str	r3, [sp, #20]
 800ced8:	4619      	mov	r1, r3
 800ceda:	f04f 0c0a 	mov.w	ip, #10
 800cede:	4620      	mov	r0, r4
 800cee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cee4:	3a30      	subs	r2, #48	@ 0x30
 800cee6:	2a09      	cmp	r2, #9
 800cee8:	d903      	bls.n	800cef2 <_svfiprintf_r+0x1a6>
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d0c6      	beq.n	800ce7c <_svfiprintf_r+0x130>
 800ceee:	9105      	str	r1, [sp, #20]
 800cef0:	e7c4      	b.n	800ce7c <_svfiprintf_r+0x130>
 800cef2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cef6:	4604      	mov	r4, r0
 800cef8:	2301      	movs	r3, #1
 800cefa:	e7f0      	b.n	800cede <_svfiprintf_r+0x192>
 800cefc:	ab03      	add	r3, sp, #12
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	462a      	mov	r2, r5
 800cf02:	4b0e      	ldr	r3, [pc, #56]	@ (800cf3c <_svfiprintf_r+0x1f0>)
 800cf04:	a904      	add	r1, sp, #16
 800cf06:	4638      	mov	r0, r7
 800cf08:	f7fc fbaa 	bl	8009660 <_printf_float>
 800cf0c:	1c42      	adds	r2, r0, #1
 800cf0e:	4606      	mov	r6, r0
 800cf10:	d1d6      	bne.n	800cec0 <_svfiprintf_r+0x174>
 800cf12:	89ab      	ldrh	r3, [r5, #12]
 800cf14:	065b      	lsls	r3, r3, #25
 800cf16:	f53f af2d 	bmi.w	800cd74 <_svfiprintf_r+0x28>
 800cf1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf1c:	e72c      	b.n	800cd78 <_svfiprintf_r+0x2c>
 800cf1e:	ab03      	add	r3, sp, #12
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	462a      	mov	r2, r5
 800cf24:	4b05      	ldr	r3, [pc, #20]	@ (800cf3c <_svfiprintf_r+0x1f0>)
 800cf26:	a904      	add	r1, sp, #16
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7fc fe31 	bl	8009b90 <_printf_i>
 800cf2e:	e7ed      	b.n	800cf0c <_svfiprintf_r+0x1c0>
 800cf30:	0800e769 	.word	0x0800e769
 800cf34:	0800e773 	.word	0x0800e773
 800cf38:	08009661 	.word	0x08009661
 800cf3c:	0800cc95 	.word	0x0800cc95
 800cf40:	0800e76f 	.word	0x0800e76f

0800cf44 <__sfputc_r>:
 800cf44:	6893      	ldr	r3, [r2, #8]
 800cf46:	3b01      	subs	r3, #1
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	b410      	push	{r4}
 800cf4c:	6093      	str	r3, [r2, #8]
 800cf4e:	da08      	bge.n	800cf62 <__sfputc_r+0x1e>
 800cf50:	6994      	ldr	r4, [r2, #24]
 800cf52:	42a3      	cmp	r3, r4
 800cf54:	db01      	blt.n	800cf5a <__sfputc_r+0x16>
 800cf56:	290a      	cmp	r1, #10
 800cf58:	d103      	bne.n	800cf62 <__sfputc_r+0x1e>
 800cf5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf5e:	f7fd bae0 	b.w	800a522 <__swbuf_r>
 800cf62:	6813      	ldr	r3, [r2, #0]
 800cf64:	1c58      	adds	r0, r3, #1
 800cf66:	6010      	str	r0, [r2, #0]
 800cf68:	7019      	strb	r1, [r3, #0]
 800cf6a:	4608      	mov	r0, r1
 800cf6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <__sfputs_r>:
 800cf72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf74:	4606      	mov	r6, r0
 800cf76:	460f      	mov	r7, r1
 800cf78:	4614      	mov	r4, r2
 800cf7a:	18d5      	adds	r5, r2, r3
 800cf7c:	42ac      	cmp	r4, r5
 800cf7e:	d101      	bne.n	800cf84 <__sfputs_r+0x12>
 800cf80:	2000      	movs	r0, #0
 800cf82:	e007      	b.n	800cf94 <__sfputs_r+0x22>
 800cf84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf88:	463a      	mov	r2, r7
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f7ff ffda 	bl	800cf44 <__sfputc_r>
 800cf90:	1c43      	adds	r3, r0, #1
 800cf92:	d1f3      	bne.n	800cf7c <__sfputs_r+0xa>
 800cf94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf98 <_vfiprintf_r>:
 800cf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf9c:	460d      	mov	r5, r1
 800cf9e:	b09d      	sub	sp, #116	@ 0x74
 800cfa0:	4614      	mov	r4, r2
 800cfa2:	4698      	mov	r8, r3
 800cfa4:	4606      	mov	r6, r0
 800cfa6:	b118      	cbz	r0, 800cfb0 <_vfiprintf_r+0x18>
 800cfa8:	6a03      	ldr	r3, [r0, #32]
 800cfaa:	b90b      	cbnz	r3, 800cfb0 <_vfiprintf_r+0x18>
 800cfac:	f7fd f9b0 	bl	800a310 <__sinit>
 800cfb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfb2:	07d9      	lsls	r1, r3, #31
 800cfb4:	d405      	bmi.n	800cfc2 <_vfiprintf_r+0x2a>
 800cfb6:	89ab      	ldrh	r3, [r5, #12]
 800cfb8:	059a      	lsls	r2, r3, #22
 800cfba:	d402      	bmi.n	800cfc2 <_vfiprintf_r+0x2a>
 800cfbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfbe:	f7fd fbdc 	bl	800a77a <__retarget_lock_acquire_recursive>
 800cfc2:	89ab      	ldrh	r3, [r5, #12]
 800cfc4:	071b      	lsls	r3, r3, #28
 800cfc6:	d501      	bpl.n	800cfcc <_vfiprintf_r+0x34>
 800cfc8:	692b      	ldr	r3, [r5, #16]
 800cfca:	b99b      	cbnz	r3, 800cff4 <_vfiprintf_r+0x5c>
 800cfcc:	4629      	mov	r1, r5
 800cfce:	4630      	mov	r0, r6
 800cfd0:	f7fd fae6 	bl	800a5a0 <__swsetup_r>
 800cfd4:	b170      	cbz	r0, 800cff4 <_vfiprintf_r+0x5c>
 800cfd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfd8:	07dc      	lsls	r4, r3, #31
 800cfda:	d504      	bpl.n	800cfe6 <_vfiprintf_r+0x4e>
 800cfdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfe0:	b01d      	add	sp, #116	@ 0x74
 800cfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe6:	89ab      	ldrh	r3, [r5, #12]
 800cfe8:	0598      	lsls	r0, r3, #22
 800cfea:	d4f7      	bmi.n	800cfdc <_vfiprintf_r+0x44>
 800cfec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfee:	f7fd fbc5 	bl	800a77c <__retarget_lock_release_recursive>
 800cff2:	e7f3      	b.n	800cfdc <_vfiprintf_r+0x44>
 800cff4:	2300      	movs	r3, #0
 800cff6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cff8:	2320      	movs	r3, #32
 800cffa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cffe:	f8cd 800c 	str.w	r8, [sp, #12]
 800d002:	2330      	movs	r3, #48	@ 0x30
 800d004:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d1b4 <_vfiprintf_r+0x21c>
 800d008:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d00c:	f04f 0901 	mov.w	r9, #1
 800d010:	4623      	mov	r3, r4
 800d012:	469a      	mov	sl, r3
 800d014:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d018:	b10a      	cbz	r2, 800d01e <_vfiprintf_r+0x86>
 800d01a:	2a25      	cmp	r2, #37	@ 0x25
 800d01c:	d1f9      	bne.n	800d012 <_vfiprintf_r+0x7a>
 800d01e:	ebba 0b04 	subs.w	fp, sl, r4
 800d022:	d00b      	beq.n	800d03c <_vfiprintf_r+0xa4>
 800d024:	465b      	mov	r3, fp
 800d026:	4622      	mov	r2, r4
 800d028:	4629      	mov	r1, r5
 800d02a:	4630      	mov	r0, r6
 800d02c:	f7ff ffa1 	bl	800cf72 <__sfputs_r>
 800d030:	3001      	adds	r0, #1
 800d032:	f000 80a7 	beq.w	800d184 <_vfiprintf_r+0x1ec>
 800d036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d038:	445a      	add	r2, fp
 800d03a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d03c:	f89a 3000 	ldrb.w	r3, [sl]
 800d040:	2b00      	cmp	r3, #0
 800d042:	f000 809f 	beq.w	800d184 <_vfiprintf_r+0x1ec>
 800d046:	2300      	movs	r3, #0
 800d048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d04c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d050:	f10a 0a01 	add.w	sl, sl, #1
 800d054:	9304      	str	r3, [sp, #16]
 800d056:	9307      	str	r3, [sp, #28]
 800d058:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d05c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d05e:	4654      	mov	r4, sl
 800d060:	2205      	movs	r2, #5
 800d062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d066:	4853      	ldr	r0, [pc, #332]	@ (800d1b4 <_vfiprintf_r+0x21c>)
 800d068:	f7f3 f8da 	bl	8000220 <memchr>
 800d06c:	9a04      	ldr	r2, [sp, #16]
 800d06e:	b9d8      	cbnz	r0, 800d0a8 <_vfiprintf_r+0x110>
 800d070:	06d1      	lsls	r1, r2, #27
 800d072:	bf44      	itt	mi
 800d074:	2320      	movmi	r3, #32
 800d076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d07a:	0713      	lsls	r3, r2, #28
 800d07c:	bf44      	itt	mi
 800d07e:	232b      	movmi	r3, #43	@ 0x2b
 800d080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d084:	f89a 3000 	ldrb.w	r3, [sl]
 800d088:	2b2a      	cmp	r3, #42	@ 0x2a
 800d08a:	d015      	beq.n	800d0b8 <_vfiprintf_r+0x120>
 800d08c:	9a07      	ldr	r2, [sp, #28]
 800d08e:	4654      	mov	r4, sl
 800d090:	2000      	movs	r0, #0
 800d092:	f04f 0c0a 	mov.w	ip, #10
 800d096:	4621      	mov	r1, r4
 800d098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d09c:	3b30      	subs	r3, #48	@ 0x30
 800d09e:	2b09      	cmp	r3, #9
 800d0a0:	d94b      	bls.n	800d13a <_vfiprintf_r+0x1a2>
 800d0a2:	b1b0      	cbz	r0, 800d0d2 <_vfiprintf_r+0x13a>
 800d0a4:	9207      	str	r2, [sp, #28]
 800d0a6:	e014      	b.n	800d0d2 <_vfiprintf_r+0x13a>
 800d0a8:	eba0 0308 	sub.w	r3, r0, r8
 800d0ac:	fa09 f303 	lsl.w	r3, r9, r3
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	9304      	str	r3, [sp, #16]
 800d0b4:	46a2      	mov	sl, r4
 800d0b6:	e7d2      	b.n	800d05e <_vfiprintf_r+0xc6>
 800d0b8:	9b03      	ldr	r3, [sp, #12]
 800d0ba:	1d19      	adds	r1, r3, #4
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	9103      	str	r1, [sp, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	bfbb      	ittet	lt
 800d0c4:	425b      	neglt	r3, r3
 800d0c6:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ca:	9307      	strge	r3, [sp, #28]
 800d0cc:	9307      	strlt	r3, [sp, #28]
 800d0ce:	bfb8      	it	lt
 800d0d0:	9204      	strlt	r2, [sp, #16]
 800d0d2:	7823      	ldrb	r3, [r4, #0]
 800d0d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0d6:	d10a      	bne.n	800d0ee <_vfiprintf_r+0x156>
 800d0d8:	7863      	ldrb	r3, [r4, #1]
 800d0da:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0dc:	d132      	bne.n	800d144 <_vfiprintf_r+0x1ac>
 800d0de:	9b03      	ldr	r3, [sp, #12]
 800d0e0:	1d1a      	adds	r2, r3, #4
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	9203      	str	r2, [sp, #12]
 800d0e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0ea:	3402      	adds	r4, #2
 800d0ec:	9305      	str	r3, [sp, #20]
 800d0ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d1c4 <_vfiprintf_r+0x22c>
 800d0f2:	7821      	ldrb	r1, [r4, #0]
 800d0f4:	2203      	movs	r2, #3
 800d0f6:	4650      	mov	r0, sl
 800d0f8:	f7f3 f892 	bl	8000220 <memchr>
 800d0fc:	b138      	cbz	r0, 800d10e <_vfiprintf_r+0x176>
 800d0fe:	9b04      	ldr	r3, [sp, #16]
 800d100:	eba0 000a 	sub.w	r0, r0, sl
 800d104:	2240      	movs	r2, #64	@ 0x40
 800d106:	4082      	lsls	r2, r0
 800d108:	4313      	orrs	r3, r2
 800d10a:	3401      	adds	r4, #1
 800d10c:	9304      	str	r3, [sp, #16]
 800d10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d112:	4829      	ldr	r0, [pc, #164]	@ (800d1b8 <_vfiprintf_r+0x220>)
 800d114:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d118:	2206      	movs	r2, #6
 800d11a:	f7f3 f881 	bl	8000220 <memchr>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d03f      	beq.n	800d1a2 <_vfiprintf_r+0x20a>
 800d122:	4b26      	ldr	r3, [pc, #152]	@ (800d1bc <_vfiprintf_r+0x224>)
 800d124:	bb1b      	cbnz	r3, 800d16e <_vfiprintf_r+0x1d6>
 800d126:	9b03      	ldr	r3, [sp, #12]
 800d128:	3307      	adds	r3, #7
 800d12a:	f023 0307 	bic.w	r3, r3, #7
 800d12e:	3308      	adds	r3, #8
 800d130:	9303      	str	r3, [sp, #12]
 800d132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d134:	443b      	add	r3, r7
 800d136:	9309      	str	r3, [sp, #36]	@ 0x24
 800d138:	e76a      	b.n	800d010 <_vfiprintf_r+0x78>
 800d13a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d13e:	460c      	mov	r4, r1
 800d140:	2001      	movs	r0, #1
 800d142:	e7a8      	b.n	800d096 <_vfiprintf_r+0xfe>
 800d144:	2300      	movs	r3, #0
 800d146:	3401      	adds	r4, #1
 800d148:	9305      	str	r3, [sp, #20]
 800d14a:	4619      	mov	r1, r3
 800d14c:	f04f 0c0a 	mov.w	ip, #10
 800d150:	4620      	mov	r0, r4
 800d152:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d156:	3a30      	subs	r2, #48	@ 0x30
 800d158:	2a09      	cmp	r2, #9
 800d15a:	d903      	bls.n	800d164 <_vfiprintf_r+0x1cc>
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d0c6      	beq.n	800d0ee <_vfiprintf_r+0x156>
 800d160:	9105      	str	r1, [sp, #20]
 800d162:	e7c4      	b.n	800d0ee <_vfiprintf_r+0x156>
 800d164:	fb0c 2101 	mla	r1, ip, r1, r2
 800d168:	4604      	mov	r4, r0
 800d16a:	2301      	movs	r3, #1
 800d16c:	e7f0      	b.n	800d150 <_vfiprintf_r+0x1b8>
 800d16e:	ab03      	add	r3, sp, #12
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	462a      	mov	r2, r5
 800d174:	4b12      	ldr	r3, [pc, #72]	@ (800d1c0 <_vfiprintf_r+0x228>)
 800d176:	a904      	add	r1, sp, #16
 800d178:	4630      	mov	r0, r6
 800d17a:	f7fc fa71 	bl	8009660 <_printf_float>
 800d17e:	4607      	mov	r7, r0
 800d180:	1c78      	adds	r0, r7, #1
 800d182:	d1d6      	bne.n	800d132 <_vfiprintf_r+0x19a>
 800d184:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d186:	07d9      	lsls	r1, r3, #31
 800d188:	d405      	bmi.n	800d196 <_vfiprintf_r+0x1fe>
 800d18a:	89ab      	ldrh	r3, [r5, #12]
 800d18c:	059a      	lsls	r2, r3, #22
 800d18e:	d402      	bmi.n	800d196 <_vfiprintf_r+0x1fe>
 800d190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d192:	f7fd faf3 	bl	800a77c <__retarget_lock_release_recursive>
 800d196:	89ab      	ldrh	r3, [r5, #12]
 800d198:	065b      	lsls	r3, r3, #25
 800d19a:	f53f af1f 	bmi.w	800cfdc <_vfiprintf_r+0x44>
 800d19e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1a0:	e71e      	b.n	800cfe0 <_vfiprintf_r+0x48>
 800d1a2:	ab03      	add	r3, sp, #12
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	462a      	mov	r2, r5
 800d1a8:	4b05      	ldr	r3, [pc, #20]	@ (800d1c0 <_vfiprintf_r+0x228>)
 800d1aa:	a904      	add	r1, sp, #16
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f7fc fcef 	bl	8009b90 <_printf_i>
 800d1b2:	e7e4      	b.n	800d17e <_vfiprintf_r+0x1e6>
 800d1b4:	0800e769 	.word	0x0800e769
 800d1b8:	0800e773 	.word	0x0800e773
 800d1bc:	08009661 	.word	0x08009661
 800d1c0:	0800cf73 	.word	0x0800cf73
 800d1c4:	0800e76f 	.word	0x0800e76f

0800d1c8 <__sflush_r>:
 800d1c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d0:	0716      	lsls	r6, r2, #28
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	d454      	bmi.n	800d282 <__sflush_r+0xba>
 800d1d8:	684b      	ldr	r3, [r1, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	dc02      	bgt.n	800d1e4 <__sflush_r+0x1c>
 800d1de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	dd48      	ble.n	800d276 <__sflush_r+0xae>
 800d1e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1e6:	2e00      	cmp	r6, #0
 800d1e8:	d045      	beq.n	800d276 <__sflush_r+0xae>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1f0:	682f      	ldr	r7, [r5, #0]
 800d1f2:	6a21      	ldr	r1, [r4, #32]
 800d1f4:	602b      	str	r3, [r5, #0]
 800d1f6:	d030      	beq.n	800d25a <__sflush_r+0x92>
 800d1f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1fa:	89a3      	ldrh	r3, [r4, #12]
 800d1fc:	0759      	lsls	r1, r3, #29
 800d1fe:	d505      	bpl.n	800d20c <__sflush_r+0x44>
 800d200:	6863      	ldr	r3, [r4, #4]
 800d202:	1ad2      	subs	r2, r2, r3
 800d204:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d206:	b10b      	cbz	r3, 800d20c <__sflush_r+0x44>
 800d208:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d20a:	1ad2      	subs	r2, r2, r3
 800d20c:	2300      	movs	r3, #0
 800d20e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d210:	6a21      	ldr	r1, [r4, #32]
 800d212:	4628      	mov	r0, r5
 800d214:	47b0      	blx	r6
 800d216:	1c43      	adds	r3, r0, #1
 800d218:	89a3      	ldrh	r3, [r4, #12]
 800d21a:	d106      	bne.n	800d22a <__sflush_r+0x62>
 800d21c:	6829      	ldr	r1, [r5, #0]
 800d21e:	291d      	cmp	r1, #29
 800d220:	d82b      	bhi.n	800d27a <__sflush_r+0xb2>
 800d222:	4a2a      	ldr	r2, [pc, #168]	@ (800d2cc <__sflush_r+0x104>)
 800d224:	410a      	asrs	r2, r1
 800d226:	07d6      	lsls	r6, r2, #31
 800d228:	d427      	bmi.n	800d27a <__sflush_r+0xb2>
 800d22a:	2200      	movs	r2, #0
 800d22c:	6062      	str	r2, [r4, #4]
 800d22e:	04d9      	lsls	r1, r3, #19
 800d230:	6922      	ldr	r2, [r4, #16]
 800d232:	6022      	str	r2, [r4, #0]
 800d234:	d504      	bpl.n	800d240 <__sflush_r+0x78>
 800d236:	1c42      	adds	r2, r0, #1
 800d238:	d101      	bne.n	800d23e <__sflush_r+0x76>
 800d23a:	682b      	ldr	r3, [r5, #0]
 800d23c:	b903      	cbnz	r3, 800d240 <__sflush_r+0x78>
 800d23e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d242:	602f      	str	r7, [r5, #0]
 800d244:	b1b9      	cbz	r1, 800d276 <__sflush_r+0xae>
 800d246:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d24a:	4299      	cmp	r1, r3
 800d24c:	d002      	beq.n	800d254 <__sflush_r+0x8c>
 800d24e:	4628      	mov	r0, r5
 800d250:	f7fe f8ea 	bl	800b428 <_free_r>
 800d254:	2300      	movs	r3, #0
 800d256:	6363      	str	r3, [r4, #52]	@ 0x34
 800d258:	e00d      	b.n	800d276 <__sflush_r+0xae>
 800d25a:	2301      	movs	r3, #1
 800d25c:	4628      	mov	r0, r5
 800d25e:	47b0      	blx	r6
 800d260:	4602      	mov	r2, r0
 800d262:	1c50      	adds	r0, r2, #1
 800d264:	d1c9      	bne.n	800d1fa <__sflush_r+0x32>
 800d266:	682b      	ldr	r3, [r5, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d0c6      	beq.n	800d1fa <__sflush_r+0x32>
 800d26c:	2b1d      	cmp	r3, #29
 800d26e:	d001      	beq.n	800d274 <__sflush_r+0xac>
 800d270:	2b16      	cmp	r3, #22
 800d272:	d11e      	bne.n	800d2b2 <__sflush_r+0xea>
 800d274:	602f      	str	r7, [r5, #0]
 800d276:	2000      	movs	r0, #0
 800d278:	e022      	b.n	800d2c0 <__sflush_r+0xf8>
 800d27a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d27e:	b21b      	sxth	r3, r3
 800d280:	e01b      	b.n	800d2ba <__sflush_r+0xf2>
 800d282:	690f      	ldr	r7, [r1, #16]
 800d284:	2f00      	cmp	r7, #0
 800d286:	d0f6      	beq.n	800d276 <__sflush_r+0xae>
 800d288:	0793      	lsls	r3, r2, #30
 800d28a:	680e      	ldr	r6, [r1, #0]
 800d28c:	bf08      	it	eq
 800d28e:	694b      	ldreq	r3, [r1, #20]
 800d290:	600f      	str	r7, [r1, #0]
 800d292:	bf18      	it	ne
 800d294:	2300      	movne	r3, #0
 800d296:	eba6 0807 	sub.w	r8, r6, r7
 800d29a:	608b      	str	r3, [r1, #8]
 800d29c:	f1b8 0f00 	cmp.w	r8, #0
 800d2a0:	dde9      	ble.n	800d276 <__sflush_r+0xae>
 800d2a2:	6a21      	ldr	r1, [r4, #32]
 800d2a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d2a6:	4643      	mov	r3, r8
 800d2a8:	463a      	mov	r2, r7
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	47b0      	blx	r6
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	dc08      	bgt.n	800d2c4 <__sflush_r+0xfc>
 800d2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2ba:	81a3      	strh	r3, [r4, #12]
 800d2bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c4:	4407      	add	r7, r0
 800d2c6:	eba8 0800 	sub.w	r8, r8, r0
 800d2ca:	e7e7      	b.n	800d29c <__sflush_r+0xd4>
 800d2cc:	dfbffffe 	.word	0xdfbffffe

0800d2d0 <_fflush_r>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	690b      	ldr	r3, [r1, #16]
 800d2d4:	4605      	mov	r5, r0
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	b913      	cbnz	r3, 800d2e0 <_fflush_r+0x10>
 800d2da:	2500      	movs	r5, #0
 800d2dc:	4628      	mov	r0, r5
 800d2de:	bd38      	pop	{r3, r4, r5, pc}
 800d2e0:	b118      	cbz	r0, 800d2ea <_fflush_r+0x1a>
 800d2e2:	6a03      	ldr	r3, [r0, #32]
 800d2e4:	b90b      	cbnz	r3, 800d2ea <_fflush_r+0x1a>
 800d2e6:	f7fd f813 	bl	800a310 <__sinit>
 800d2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d0f3      	beq.n	800d2da <_fflush_r+0xa>
 800d2f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2f4:	07d0      	lsls	r0, r2, #31
 800d2f6:	d404      	bmi.n	800d302 <_fflush_r+0x32>
 800d2f8:	0599      	lsls	r1, r3, #22
 800d2fa:	d402      	bmi.n	800d302 <_fflush_r+0x32>
 800d2fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2fe:	f7fd fa3c 	bl	800a77a <__retarget_lock_acquire_recursive>
 800d302:	4628      	mov	r0, r5
 800d304:	4621      	mov	r1, r4
 800d306:	f7ff ff5f 	bl	800d1c8 <__sflush_r>
 800d30a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d30c:	07da      	lsls	r2, r3, #31
 800d30e:	4605      	mov	r5, r0
 800d310:	d4e4      	bmi.n	800d2dc <_fflush_r+0xc>
 800d312:	89a3      	ldrh	r3, [r4, #12]
 800d314:	059b      	lsls	r3, r3, #22
 800d316:	d4e1      	bmi.n	800d2dc <_fflush_r+0xc>
 800d318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d31a:	f7fd fa2f 	bl	800a77c <__retarget_lock_release_recursive>
 800d31e:	e7dd      	b.n	800d2dc <_fflush_r+0xc>

0800d320 <__swhatbuf_r>:
 800d320:	b570      	push	{r4, r5, r6, lr}
 800d322:	460c      	mov	r4, r1
 800d324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d328:	2900      	cmp	r1, #0
 800d32a:	b096      	sub	sp, #88	@ 0x58
 800d32c:	4615      	mov	r5, r2
 800d32e:	461e      	mov	r6, r3
 800d330:	da0d      	bge.n	800d34e <__swhatbuf_r+0x2e>
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d338:	f04f 0100 	mov.w	r1, #0
 800d33c:	bf14      	ite	ne
 800d33e:	2340      	movne	r3, #64	@ 0x40
 800d340:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d344:	2000      	movs	r0, #0
 800d346:	6031      	str	r1, [r6, #0]
 800d348:	602b      	str	r3, [r5, #0]
 800d34a:	b016      	add	sp, #88	@ 0x58
 800d34c:	bd70      	pop	{r4, r5, r6, pc}
 800d34e:	466a      	mov	r2, sp
 800d350:	f000 f85a 	bl	800d408 <_fstat_r>
 800d354:	2800      	cmp	r0, #0
 800d356:	dbec      	blt.n	800d332 <__swhatbuf_r+0x12>
 800d358:	9901      	ldr	r1, [sp, #4]
 800d35a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d35e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d362:	4259      	negs	r1, r3
 800d364:	4159      	adcs	r1, r3
 800d366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d36a:	e7eb      	b.n	800d344 <__swhatbuf_r+0x24>

0800d36c <__smakebuf_r>:
 800d36c:	898b      	ldrh	r3, [r1, #12]
 800d36e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d370:	079d      	lsls	r5, r3, #30
 800d372:	4606      	mov	r6, r0
 800d374:	460c      	mov	r4, r1
 800d376:	d507      	bpl.n	800d388 <__smakebuf_r+0x1c>
 800d378:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d37c:	6023      	str	r3, [r4, #0]
 800d37e:	6123      	str	r3, [r4, #16]
 800d380:	2301      	movs	r3, #1
 800d382:	6163      	str	r3, [r4, #20]
 800d384:	b003      	add	sp, #12
 800d386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d388:	ab01      	add	r3, sp, #4
 800d38a:	466a      	mov	r2, sp
 800d38c:	f7ff ffc8 	bl	800d320 <__swhatbuf_r>
 800d390:	9f00      	ldr	r7, [sp, #0]
 800d392:	4605      	mov	r5, r0
 800d394:	4639      	mov	r1, r7
 800d396:	4630      	mov	r0, r6
 800d398:	f7fe f8ba 	bl	800b510 <_malloc_r>
 800d39c:	b948      	cbnz	r0, 800d3b2 <__smakebuf_r+0x46>
 800d39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3a2:	059a      	lsls	r2, r3, #22
 800d3a4:	d4ee      	bmi.n	800d384 <__smakebuf_r+0x18>
 800d3a6:	f023 0303 	bic.w	r3, r3, #3
 800d3aa:	f043 0302 	orr.w	r3, r3, #2
 800d3ae:	81a3      	strh	r3, [r4, #12]
 800d3b0:	e7e2      	b.n	800d378 <__smakebuf_r+0xc>
 800d3b2:	89a3      	ldrh	r3, [r4, #12]
 800d3b4:	6020      	str	r0, [r4, #0]
 800d3b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3ba:	81a3      	strh	r3, [r4, #12]
 800d3bc:	9b01      	ldr	r3, [sp, #4]
 800d3be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d3c2:	b15b      	cbz	r3, 800d3dc <__smakebuf_r+0x70>
 800d3c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f000 f82f 	bl	800d42c <_isatty_r>
 800d3ce:	b128      	cbz	r0, 800d3dc <__smakebuf_r+0x70>
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	f023 0303 	bic.w	r3, r3, #3
 800d3d6:	f043 0301 	orr.w	r3, r3, #1
 800d3da:	81a3      	strh	r3, [r4, #12]
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	431d      	orrs	r5, r3
 800d3e0:	81a5      	strh	r5, [r4, #12]
 800d3e2:	e7cf      	b.n	800d384 <__smakebuf_r+0x18>

0800d3e4 <strncmp>:
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	b16a      	cbz	r2, 800d404 <strncmp+0x20>
 800d3e8:	3901      	subs	r1, #1
 800d3ea:	1884      	adds	r4, r0, r2
 800d3ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d103      	bne.n	800d400 <strncmp+0x1c>
 800d3f8:	42a0      	cmp	r0, r4
 800d3fa:	d001      	beq.n	800d400 <strncmp+0x1c>
 800d3fc:	2a00      	cmp	r2, #0
 800d3fe:	d1f5      	bne.n	800d3ec <strncmp+0x8>
 800d400:	1ad0      	subs	r0, r2, r3
 800d402:	bd10      	pop	{r4, pc}
 800d404:	4610      	mov	r0, r2
 800d406:	e7fc      	b.n	800d402 <strncmp+0x1e>

0800d408 <_fstat_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4d07      	ldr	r5, [pc, #28]	@ (800d428 <_fstat_r+0x20>)
 800d40c:	2300      	movs	r3, #0
 800d40e:	4604      	mov	r4, r0
 800d410:	4608      	mov	r0, r1
 800d412:	4611      	mov	r1, r2
 800d414:	602b      	str	r3, [r5, #0]
 800d416:	f7f4 fa13 	bl	8001840 <_fstat>
 800d41a:	1c43      	adds	r3, r0, #1
 800d41c:	d102      	bne.n	800d424 <_fstat_r+0x1c>
 800d41e:	682b      	ldr	r3, [r5, #0]
 800d420:	b103      	cbz	r3, 800d424 <_fstat_r+0x1c>
 800d422:	6023      	str	r3, [r4, #0]
 800d424:	bd38      	pop	{r3, r4, r5, pc}
 800d426:	bf00      	nop
 800d428:	2000197c 	.word	0x2000197c

0800d42c <_isatty_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4d06      	ldr	r5, [pc, #24]	@ (800d448 <_isatty_r+0x1c>)
 800d430:	2300      	movs	r3, #0
 800d432:	4604      	mov	r4, r0
 800d434:	4608      	mov	r0, r1
 800d436:	602b      	str	r3, [r5, #0]
 800d438:	f7f4 fa12 	bl	8001860 <_isatty>
 800d43c:	1c43      	adds	r3, r0, #1
 800d43e:	d102      	bne.n	800d446 <_isatty_r+0x1a>
 800d440:	682b      	ldr	r3, [r5, #0]
 800d442:	b103      	cbz	r3, 800d446 <_isatty_r+0x1a>
 800d444:	6023      	str	r3, [r4, #0]
 800d446:	bd38      	pop	{r3, r4, r5, pc}
 800d448:	2000197c 	.word	0x2000197c

0800d44c <_sbrk_r>:
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	4d06      	ldr	r5, [pc, #24]	@ (800d468 <_sbrk_r+0x1c>)
 800d450:	2300      	movs	r3, #0
 800d452:	4604      	mov	r4, r0
 800d454:	4608      	mov	r0, r1
 800d456:	602b      	str	r3, [r5, #0]
 800d458:	f7f4 fa1a 	bl	8001890 <_sbrk>
 800d45c:	1c43      	adds	r3, r0, #1
 800d45e:	d102      	bne.n	800d466 <_sbrk_r+0x1a>
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	b103      	cbz	r3, 800d466 <_sbrk_r+0x1a>
 800d464:	6023      	str	r3, [r4, #0]
 800d466:	bd38      	pop	{r3, r4, r5, pc}
 800d468:	2000197c 	.word	0x2000197c

0800d46c <memcpy>:
 800d46c:	440a      	add	r2, r1
 800d46e:	4291      	cmp	r1, r2
 800d470:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d474:	d100      	bne.n	800d478 <memcpy+0xc>
 800d476:	4770      	bx	lr
 800d478:	b510      	push	{r4, lr}
 800d47a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d47e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d482:	4291      	cmp	r1, r2
 800d484:	d1f9      	bne.n	800d47a <memcpy+0xe>
 800d486:	bd10      	pop	{r4, pc}

0800d488 <nan>:
 800d488:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d490 <nan+0x8>
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	00000000 	.word	0x00000000
 800d494:	7ff80000 	.word	0x7ff80000

0800d498 <__assert_func>:
 800d498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d49a:	4614      	mov	r4, r2
 800d49c:	461a      	mov	r2, r3
 800d49e:	4b09      	ldr	r3, [pc, #36]	@ (800d4c4 <__assert_func+0x2c>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4605      	mov	r5, r0
 800d4a4:	68d8      	ldr	r0, [r3, #12]
 800d4a6:	b954      	cbnz	r4, 800d4be <__assert_func+0x26>
 800d4a8:	4b07      	ldr	r3, [pc, #28]	@ (800d4c8 <__assert_func+0x30>)
 800d4aa:	461c      	mov	r4, r3
 800d4ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4b0:	9100      	str	r1, [sp, #0]
 800d4b2:	462b      	mov	r3, r5
 800d4b4:	4905      	ldr	r1, [pc, #20]	@ (800d4cc <__assert_func+0x34>)
 800d4b6:	f000 fba7 	bl	800dc08 <fiprintf>
 800d4ba:	f000 fbb7 	bl	800dc2c <abort>
 800d4be:	4b04      	ldr	r3, [pc, #16]	@ (800d4d0 <__assert_func+0x38>)
 800d4c0:	e7f4      	b.n	800d4ac <__assert_func+0x14>
 800d4c2:	bf00      	nop
 800d4c4:	20000f5c 	.word	0x20000f5c
 800d4c8:	0800e7bd 	.word	0x0800e7bd
 800d4cc:	0800e78f 	.word	0x0800e78f
 800d4d0:	0800e782 	.word	0x0800e782

0800d4d4 <_calloc_r>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	fba1 5402 	umull	r5, r4, r1, r2
 800d4da:	b93c      	cbnz	r4, 800d4ec <_calloc_r+0x18>
 800d4dc:	4629      	mov	r1, r5
 800d4de:	f7fe f817 	bl	800b510 <_malloc_r>
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	b928      	cbnz	r0, 800d4f2 <_calloc_r+0x1e>
 800d4e6:	2600      	movs	r6, #0
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	bd70      	pop	{r4, r5, r6, pc}
 800d4ec:	220c      	movs	r2, #12
 800d4ee:	6002      	str	r2, [r0, #0]
 800d4f0:	e7f9      	b.n	800d4e6 <_calloc_r+0x12>
 800d4f2:	462a      	mov	r2, r5
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	f7fd f8c3 	bl	800a680 <memset>
 800d4fa:	e7f5      	b.n	800d4e8 <_calloc_r+0x14>

0800d4fc <rshift>:
 800d4fc:	6903      	ldr	r3, [r0, #16]
 800d4fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d502:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d506:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d50a:	f100 0414 	add.w	r4, r0, #20
 800d50e:	dd45      	ble.n	800d59c <rshift+0xa0>
 800d510:	f011 011f 	ands.w	r1, r1, #31
 800d514:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d518:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d51c:	d10c      	bne.n	800d538 <rshift+0x3c>
 800d51e:	f100 0710 	add.w	r7, r0, #16
 800d522:	4629      	mov	r1, r5
 800d524:	42b1      	cmp	r1, r6
 800d526:	d334      	bcc.n	800d592 <rshift+0x96>
 800d528:	1a9b      	subs	r3, r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	1eea      	subs	r2, r5, #3
 800d52e:	4296      	cmp	r6, r2
 800d530:	bf38      	it	cc
 800d532:	2300      	movcc	r3, #0
 800d534:	4423      	add	r3, r4
 800d536:	e015      	b.n	800d564 <rshift+0x68>
 800d538:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d53c:	f1c1 0820 	rsb	r8, r1, #32
 800d540:	40cf      	lsrs	r7, r1
 800d542:	f105 0e04 	add.w	lr, r5, #4
 800d546:	46a1      	mov	r9, r4
 800d548:	4576      	cmp	r6, lr
 800d54a:	46f4      	mov	ip, lr
 800d54c:	d815      	bhi.n	800d57a <rshift+0x7e>
 800d54e:	1a9a      	subs	r2, r3, r2
 800d550:	0092      	lsls	r2, r2, #2
 800d552:	3a04      	subs	r2, #4
 800d554:	3501      	adds	r5, #1
 800d556:	42ae      	cmp	r6, r5
 800d558:	bf38      	it	cc
 800d55a:	2200      	movcc	r2, #0
 800d55c:	18a3      	adds	r3, r4, r2
 800d55e:	50a7      	str	r7, [r4, r2]
 800d560:	b107      	cbz	r7, 800d564 <rshift+0x68>
 800d562:	3304      	adds	r3, #4
 800d564:	1b1a      	subs	r2, r3, r4
 800d566:	42a3      	cmp	r3, r4
 800d568:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d56c:	bf08      	it	eq
 800d56e:	2300      	moveq	r3, #0
 800d570:	6102      	str	r2, [r0, #16]
 800d572:	bf08      	it	eq
 800d574:	6143      	streq	r3, [r0, #20]
 800d576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d57a:	f8dc c000 	ldr.w	ip, [ip]
 800d57e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d582:	ea4c 0707 	orr.w	r7, ip, r7
 800d586:	f849 7b04 	str.w	r7, [r9], #4
 800d58a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d58e:	40cf      	lsrs	r7, r1
 800d590:	e7da      	b.n	800d548 <rshift+0x4c>
 800d592:	f851 cb04 	ldr.w	ip, [r1], #4
 800d596:	f847 cf04 	str.w	ip, [r7, #4]!
 800d59a:	e7c3      	b.n	800d524 <rshift+0x28>
 800d59c:	4623      	mov	r3, r4
 800d59e:	e7e1      	b.n	800d564 <rshift+0x68>

0800d5a0 <__hexdig_fun>:
 800d5a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d5a4:	2b09      	cmp	r3, #9
 800d5a6:	d802      	bhi.n	800d5ae <__hexdig_fun+0xe>
 800d5a8:	3820      	subs	r0, #32
 800d5aa:	b2c0      	uxtb	r0, r0
 800d5ac:	4770      	bx	lr
 800d5ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d5b2:	2b05      	cmp	r3, #5
 800d5b4:	d801      	bhi.n	800d5ba <__hexdig_fun+0x1a>
 800d5b6:	3847      	subs	r0, #71	@ 0x47
 800d5b8:	e7f7      	b.n	800d5aa <__hexdig_fun+0xa>
 800d5ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d5be:	2b05      	cmp	r3, #5
 800d5c0:	d801      	bhi.n	800d5c6 <__hexdig_fun+0x26>
 800d5c2:	3827      	subs	r0, #39	@ 0x27
 800d5c4:	e7f1      	b.n	800d5aa <__hexdig_fun+0xa>
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	4770      	bx	lr
	...

0800d5cc <__gethex>:
 800d5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d0:	b085      	sub	sp, #20
 800d5d2:	468a      	mov	sl, r1
 800d5d4:	9302      	str	r3, [sp, #8]
 800d5d6:	680b      	ldr	r3, [r1, #0]
 800d5d8:	9001      	str	r0, [sp, #4]
 800d5da:	4690      	mov	r8, r2
 800d5dc:	1c9c      	adds	r4, r3, #2
 800d5de:	46a1      	mov	r9, r4
 800d5e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d5e4:	2830      	cmp	r0, #48	@ 0x30
 800d5e6:	d0fa      	beq.n	800d5de <__gethex+0x12>
 800d5e8:	eba9 0303 	sub.w	r3, r9, r3
 800d5ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800d5f0:	f7ff ffd6 	bl	800d5a0 <__hexdig_fun>
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d168      	bne.n	800d6cc <__gethex+0x100>
 800d5fa:	49a0      	ldr	r1, [pc, #640]	@ (800d87c <__gethex+0x2b0>)
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	4648      	mov	r0, r9
 800d600:	f7ff fef0 	bl	800d3e4 <strncmp>
 800d604:	4607      	mov	r7, r0
 800d606:	2800      	cmp	r0, #0
 800d608:	d167      	bne.n	800d6da <__gethex+0x10e>
 800d60a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d60e:	4626      	mov	r6, r4
 800d610:	f7ff ffc6 	bl	800d5a0 <__hexdig_fun>
 800d614:	2800      	cmp	r0, #0
 800d616:	d062      	beq.n	800d6de <__gethex+0x112>
 800d618:	4623      	mov	r3, r4
 800d61a:	7818      	ldrb	r0, [r3, #0]
 800d61c:	2830      	cmp	r0, #48	@ 0x30
 800d61e:	4699      	mov	r9, r3
 800d620:	f103 0301 	add.w	r3, r3, #1
 800d624:	d0f9      	beq.n	800d61a <__gethex+0x4e>
 800d626:	f7ff ffbb 	bl	800d5a0 <__hexdig_fun>
 800d62a:	fab0 f580 	clz	r5, r0
 800d62e:	096d      	lsrs	r5, r5, #5
 800d630:	f04f 0b01 	mov.w	fp, #1
 800d634:	464a      	mov	r2, r9
 800d636:	4616      	mov	r6, r2
 800d638:	3201      	adds	r2, #1
 800d63a:	7830      	ldrb	r0, [r6, #0]
 800d63c:	f7ff ffb0 	bl	800d5a0 <__hexdig_fun>
 800d640:	2800      	cmp	r0, #0
 800d642:	d1f8      	bne.n	800d636 <__gethex+0x6a>
 800d644:	498d      	ldr	r1, [pc, #564]	@ (800d87c <__gethex+0x2b0>)
 800d646:	2201      	movs	r2, #1
 800d648:	4630      	mov	r0, r6
 800d64a:	f7ff fecb 	bl	800d3e4 <strncmp>
 800d64e:	2800      	cmp	r0, #0
 800d650:	d13f      	bne.n	800d6d2 <__gethex+0x106>
 800d652:	b944      	cbnz	r4, 800d666 <__gethex+0x9a>
 800d654:	1c74      	adds	r4, r6, #1
 800d656:	4622      	mov	r2, r4
 800d658:	4616      	mov	r6, r2
 800d65a:	3201      	adds	r2, #1
 800d65c:	7830      	ldrb	r0, [r6, #0]
 800d65e:	f7ff ff9f 	bl	800d5a0 <__hexdig_fun>
 800d662:	2800      	cmp	r0, #0
 800d664:	d1f8      	bne.n	800d658 <__gethex+0x8c>
 800d666:	1ba4      	subs	r4, r4, r6
 800d668:	00a7      	lsls	r7, r4, #2
 800d66a:	7833      	ldrb	r3, [r6, #0]
 800d66c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d670:	2b50      	cmp	r3, #80	@ 0x50
 800d672:	d13e      	bne.n	800d6f2 <__gethex+0x126>
 800d674:	7873      	ldrb	r3, [r6, #1]
 800d676:	2b2b      	cmp	r3, #43	@ 0x2b
 800d678:	d033      	beq.n	800d6e2 <__gethex+0x116>
 800d67a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d67c:	d034      	beq.n	800d6e8 <__gethex+0x11c>
 800d67e:	1c71      	adds	r1, r6, #1
 800d680:	2400      	movs	r4, #0
 800d682:	7808      	ldrb	r0, [r1, #0]
 800d684:	f7ff ff8c 	bl	800d5a0 <__hexdig_fun>
 800d688:	1e43      	subs	r3, r0, #1
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	2b18      	cmp	r3, #24
 800d68e:	d830      	bhi.n	800d6f2 <__gethex+0x126>
 800d690:	f1a0 0210 	sub.w	r2, r0, #16
 800d694:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d698:	f7ff ff82 	bl	800d5a0 <__hexdig_fun>
 800d69c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d6a0:	fa5f fc8c 	uxtb.w	ip, ip
 800d6a4:	f1bc 0f18 	cmp.w	ip, #24
 800d6a8:	f04f 030a 	mov.w	r3, #10
 800d6ac:	d91e      	bls.n	800d6ec <__gethex+0x120>
 800d6ae:	b104      	cbz	r4, 800d6b2 <__gethex+0xe6>
 800d6b0:	4252      	negs	r2, r2
 800d6b2:	4417      	add	r7, r2
 800d6b4:	f8ca 1000 	str.w	r1, [sl]
 800d6b8:	b1ed      	cbz	r5, 800d6f6 <__gethex+0x12a>
 800d6ba:	f1bb 0f00 	cmp.w	fp, #0
 800d6be:	bf0c      	ite	eq
 800d6c0:	2506      	moveq	r5, #6
 800d6c2:	2500      	movne	r5, #0
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	b005      	add	sp, #20
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	2500      	movs	r5, #0
 800d6ce:	462c      	mov	r4, r5
 800d6d0:	e7b0      	b.n	800d634 <__gethex+0x68>
 800d6d2:	2c00      	cmp	r4, #0
 800d6d4:	d1c7      	bne.n	800d666 <__gethex+0x9a>
 800d6d6:	4627      	mov	r7, r4
 800d6d8:	e7c7      	b.n	800d66a <__gethex+0x9e>
 800d6da:	464e      	mov	r6, r9
 800d6dc:	462f      	mov	r7, r5
 800d6de:	2501      	movs	r5, #1
 800d6e0:	e7c3      	b.n	800d66a <__gethex+0x9e>
 800d6e2:	2400      	movs	r4, #0
 800d6e4:	1cb1      	adds	r1, r6, #2
 800d6e6:	e7cc      	b.n	800d682 <__gethex+0xb6>
 800d6e8:	2401      	movs	r4, #1
 800d6ea:	e7fb      	b.n	800d6e4 <__gethex+0x118>
 800d6ec:	fb03 0002 	mla	r0, r3, r2, r0
 800d6f0:	e7ce      	b.n	800d690 <__gethex+0xc4>
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	e7de      	b.n	800d6b4 <__gethex+0xe8>
 800d6f6:	eba6 0309 	sub.w	r3, r6, r9
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	4629      	mov	r1, r5
 800d6fe:	2b07      	cmp	r3, #7
 800d700:	dc0a      	bgt.n	800d718 <__gethex+0x14c>
 800d702:	9801      	ldr	r0, [sp, #4]
 800d704:	f7fd ff90 	bl	800b628 <_Balloc>
 800d708:	4604      	mov	r4, r0
 800d70a:	b940      	cbnz	r0, 800d71e <__gethex+0x152>
 800d70c:	4b5c      	ldr	r3, [pc, #368]	@ (800d880 <__gethex+0x2b4>)
 800d70e:	4602      	mov	r2, r0
 800d710:	21e4      	movs	r1, #228	@ 0xe4
 800d712:	485c      	ldr	r0, [pc, #368]	@ (800d884 <__gethex+0x2b8>)
 800d714:	f7ff fec0 	bl	800d498 <__assert_func>
 800d718:	3101      	adds	r1, #1
 800d71a:	105b      	asrs	r3, r3, #1
 800d71c:	e7ef      	b.n	800d6fe <__gethex+0x132>
 800d71e:	f100 0a14 	add.w	sl, r0, #20
 800d722:	2300      	movs	r3, #0
 800d724:	4655      	mov	r5, sl
 800d726:	469b      	mov	fp, r3
 800d728:	45b1      	cmp	r9, r6
 800d72a:	d337      	bcc.n	800d79c <__gethex+0x1d0>
 800d72c:	f845 bb04 	str.w	fp, [r5], #4
 800d730:	eba5 050a 	sub.w	r5, r5, sl
 800d734:	10ad      	asrs	r5, r5, #2
 800d736:	6125      	str	r5, [r4, #16]
 800d738:	4658      	mov	r0, fp
 800d73a:	f7fe f867 	bl	800b80c <__hi0bits>
 800d73e:	016d      	lsls	r5, r5, #5
 800d740:	f8d8 6000 	ldr.w	r6, [r8]
 800d744:	1a2d      	subs	r5, r5, r0
 800d746:	42b5      	cmp	r5, r6
 800d748:	dd54      	ble.n	800d7f4 <__gethex+0x228>
 800d74a:	1bad      	subs	r5, r5, r6
 800d74c:	4629      	mov	r1, r5
 800d74e:	4620      	mov	r0, r4
 800d750:	f7fe fbfb 	bl	800bf4a <__any_on>
 800d754:	4681      	mov	r9, r0
 800d756:	b178      	cbz	r0, 800d778 <__gethex+0x1ac>
 800d758:	1e6b      	subs	r3, r5, #1
 800d75a:	1159      	asrs	r1, r3, #5
 800d75c:	f003 021f 	and.w	r2, r3, #31
 800d760:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d764:	f04f 0901 	mov.w	r9, #1
 800d768:	fa09 f202 	lsl.w	r2, r9, r2
 800d76c:	420a      	tst	r2, r1
 800d76e:	d003      	beq.n	800d778 <__gethex+0x1ac>
 800d770:	454b      	cmp	r3, r9
 800d772:	dc36      	bgt.n	800d7e2 <__gethex+0x216>
 800d774:	f04f 0902 	mov.w	r9, #2
 800d778:	4629      	mov	r1, r5
 800d77a:	4620      	mov	r0, r4
 800d77c:	f7ff febe 	bl	800d4fc <rshift>
 800d780:	442f      	add	r7, r5
 800d782:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d786:	42bb      	cmp	r3, r7
 800d788:	da42      	bge.n	800d810 <__gethex+0x244>
 800d78a:	9801      	ldr	r0, [sp, #4]
 800d78c:	4621      	mov	r1, r4
 800d78e:	f7fd ff8b 	bl	800b6a8 <_Bfree>
 800d792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d794:	2300      	movs	r3, #0
 800d796:	6013      	str	r3, [r2, #0]
 800d798:	25a3      	movs	r5, #163	@ 0xa3
 800d79a:	e793      	b.n	800d6c4 <__gethex+0xf8>
 800d79c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d7a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d7a2:	d012      	beq.n	800d7ca <__gethex+0x1fe>
 800d7a4:	2b20      	cmp	r3, #32
 800d7a6:	d104      	bne.n	800d7b2 <__gethex+0x1e6>
 800d7a8:	f845 bb04 	str.w	fp, [r5], #4
 800d7ac:	f04f 0b00 	mov.w	fp, #0
 800d7b0:	465b      	mov	r3, fp
 800d7b2:	7830      	ldrb	r0, [r6, #0]
 800d7b4:	9303      	str	r3, [sp, #12]
 800d7b6:	f7ff fef3 	bl	800d5a0 <__hexdig_fun>
 800d7ba:	9b03      	ldr	r3, [sp, #12]
 800d7bc:	f000 000f 	and.w	r0, r0, #15
 800d7c0:	4098      	lsls	r0, r3
 800d7c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	e7ae      	b.n	800d728 <__gethex+0x15c>
 800d7ca:	45b1      	cmp	r9, r6
 800d7cc:	d8ea      	bhi.n	800d7a4 <__gethex+0x1d8>
 800d7ce:	492b      	ldr	r1, [pc, #172]	@ (800d87c <__gethex+0x2b0>)
 800d7d0:	9303      	str	r3, [sp, #12]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	f7ff fe05 	bl	800d3e4 <strncmp>
 800d7da:	9b03      	ldr	r3, [sp, #12]
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d1e1      	bne.n	800d7a4 <__gethex+0x1d8>
 800d7e0:	e7a2      	b.n	800d728 <__gethex+0x15c>
 800d7e2:	1ea9      	subs	r1, r5, #2
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f7fe fbb0 	bl	800bf4a <__any_on>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d0c2      	beq.n	800d774 <__gethex+0x1a8>
 800d7ee:	f04f 0903 	mov.w	r9, #3
 800d7f2:	e7c1      	b.n	800d778 <__gethex+0x1ac>
 800d7f4:	da09      	bge.n	800d80a <__gethex+0x23e>
 800d7f6:	1b75      	subs	r5, r6, r5
 800d7f8:	4621      	mov	r1, r4
 800d7fa:	9801      	ldr	r0, [sp, #4]
 800d7fc:	462a      	mov	r2, r5
 800d7fe:	f7fe f96b 	bl	800bad8 <__lshift>
 800d802:	1b7f      	subs	r7, r7, r5
 800d804:	4604      	mov	r4, r0
 800d806:	f100 0a14 	add.w	sl, r0, #20
 800d80a:	f04f 0900 	mov.w	r9, #0
 800d80e:	e7b8      	b.n	800d782 <__gethex+0x1b6>
 800d810:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d814:	42bd      	cmp	r5, r7
 800d816:	dd6f      	ble.n	800d8f8 <__gethex+0x32c>
 800d818:	1bed      	subs	r5, r5, r7
 800d81a:	42ae      	cmp	r6, r5
 800d81c:	dc34      	bgt.n	800d888 <__gethex+0x2bc>
 800d81e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d822:	2b02      	cmp	r3, #2
 800d824:	d022      	beq.n	800d86c <__gethex+0x2a0>
 800d826:	2b03      	cmp	r3, #3
 800d828:	d024      	beq.n	800d874 <__gethex+0x2a8>
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d115      	bne.n	800d85a <__gethex+0x28e>
 800d82e:	42ae      	cmp	r6, r5
 800d830:	d113      	bne.n	800d85a <__gethex+0x28e>
 800d832:	2e01      	cmp	r6, #1
 800d834:	d10b      	bne.n	800d84e <__gethex+0x282>
 800d836:	9a02      	ldr	r2, [sp, #8]
 800d838:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d83c:	6013      	str	r3, [r2, #0]
 800d83e:	2301      	movs	r3, #1
 800d840:	6123      	str	r3, [r4, #16]
 800d842:	f8ca 3000 	str.w	r3, [sl]
 800d846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d848:	2562      	movs	r5, #98	@ 0x62
 800d84a:	601c      	str	r4, [r3, #0]
 800d84c:	e73a      	b.n	800d6c4 <__gethex+0xf8>
 800d84e:	1e71      	subs	r1, r6, #1
 800d850:	4620      	mov	r0, r4
 800d852:	f7fe fb7a 	bl	800bf4a <__any_on>
 800d856:	2800      	cmp	r0, #0
 800d858:	d1ed      	bne.n	800d836 <__gethex+0x26a>
 800d85a:	9801      	ldr	r0, [sp, #4]
 800d85c:	4621      	mov	r1, r4
 800d85e:	f7fd ff23 	bl	800b6a8 <_Bfree>
 800d862:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d864:	2300      	movs	r3, #0
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	2550      	movs	r5, #80	@ 0x50
 800d86a:	e72b      	b.n	800d6c4 <__gethex+0xf8>
 800d86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1f3      	bne.n	800d85a <__gethex+0x28e>
 800d872:	e7e0      	b.n	800d836 <__gethex+0x26a>
 800d874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d876:	2b00      	cmp	r3, #0
 800d878:	d1dd      	bne.n	800d836 <__gethex+0x26a>
 800d87a:	e7ee      	b.n	800d85a <__gethex+0x28e>
 800d87c:	0800e610 	.word	0x0800e610
 800d880:	0800e4a5 	.word	0x0800e4a5
 800d884:	0800e7be 	.word	0x0800e7be
 800d888:	1e6f      	subs	r7, r5, #1
 800d88a:	f1b9 0f00 	cmp.w	r9, #0
 800d88e:	d130      	bne.n	800d8f2 <__gethex+0x326>
 800d890:	b127      	cbz	r7, 800d89c <__gethex+0x2d0>
 800d892:	4639      	mov	r1, r7
 800d894:	4620      	mov	r0, r4
 800d896:	f7fe fb58 	bl	800bf4a <__any_on>
 800d89a:	4681      	mov	r9, r0
 800d89c:	117a      	asrs	r2, r7, #5
 800d89e:	2301      	movs	r3, #1
 800d8a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d8a4:	f007 071f 	and.w	r7, r7, #31
 800d8a8:	40bb      	lsls	r3, r7
 800d8aa:	4213      	tst	r3, r2
 800d8ac:	4629      	mov	r1, r5
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	bf18      	it	ne
 800d8b2:	f049 0902 	orrne.w	r9, r9, #2
 800d8b6:	f7ff fe21 	bl	800d4fc <rshift>
 800d8ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d8be:	1b76      	subs	r6, r6, r5
 800d8c0:	2502      	movs	r5, #2
 800d8c2:	f1b9 0f00 	cmp.w	r9, #0
 800d8c6:	d047      	beq.n	800d958 <__gethex+0x38c>
 800d8c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d8cc:	2b02      	cmp	r3, #2
 800d8ce:	d015      	beq.n	800d8fc <__gethex+0x330>
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d017      	beq.n	800d904 <__gethex+0x338>
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d109      	bne.n	800d8ec <__gethex+0x320>
 800d8d8:	f019 0f02 	tst.w	r9, #2
 800d8dc:	d006      	beq.n	800d8ec <__gethex+0x320>
 800d8de:	f8da 3000 	ldr.w	r3, [sl]
 800d8e2:	ea49 0903 	orr.w	r9, r9, r3
 800d8e6:	f019 0f01 	tst.w	r9, #1
 800d8ea:	d10e      	bne.n	800d90a <__gethex+0x33e>
 800d8ec:	f045 0510 	orr.w	r5, r5, #16
 800d8f0:	e032      	b.n	800d958 <__gethex+0x38c>
 800d8f2:	f04f 0901 	mov.w	r9, #1
 800d8f6:	e7d1      	b.n	800d89c <__gethex+0x2d0>
 800d8f8:	2501      	movs	r5, #1
 800d8fa:	e7e2      	b.n	800d8c2 <__gethex+0x2f6>
 800d8fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8fe:	f1c3 0301 	rsb	r3, r3, #1
 800d902:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d906:	2b00      	cmp	r3, #0
 800d908:	d0f0      	beq.n	800d8ec <__gethex+0x320>
 800d90a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d90e:	f104 0314 	add.w	r3, r4, #20
 800d912:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d916:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d91a:	f04f 0c00 	mov.w	ip, #0
 800d91e:	4618      	mov	r0, r3
 800d920:	f853 2b04 	ldr.w	r2, [r3], #4
 800d924:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d928:	d01b      	beq.n	800d962 <__gethex+0x396>
 800d92a:	3201      	adds	r2, #1
 800d92c:	6002      	str	r2, [r0, #0]
 800d92e:	2d02      	cmp	r5, #2
 800d930:	f104 0314 	add.w	r3, r4, #20
 800d934:	d13c      	bne.n	800d9b0 <__gethex+0x3e4>
 800d936:	f8d8 2000 	ldr.w	r2, [r8]
 800d93a:	3a01      	subs	r2, #1
 800d93c:	42b2      	cmp	r2, r6
 800d93e:	d109      	bne.n	800d954 <__gethex+0x388>
 800d940:	1171      	asrs	r1, r6, #5
 800d942:	2201      	movs	r2, #1
 800d944:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d948:	f006 061f 	and.w	r6, r6, #31
 800d94c:	fa02 f606 	lsl.w	r6, r2, r6
 800d950:	421e      	tst	r6, r3
 800d952:	d13a      	bne.n	800d9ca <__gethex+0x3fe>
 800d954:	f045 0520 	orr.w	r5, r5, #32
 800d958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d95a:	601c      	str	r4, [r3, #0]
 800d95c:	9b02      	ldr	r3, [sp, #8]
 800d95e:	601f      	str	r7, [r3, #0]
 800d960:	e6b0      	b.n	800d6c4 <__gethex+0xf8>
 800d962:	4299      	cmp	r1, r3
 800d964:	f843 cc04 	str.w	ip, [r3, #-4]
 800d968:	d8d9      	bhi.n	800d91e <__gethex+0x352>
 800d96a:	68a3      	ldr	r3, [r4, #8]
 800d96c:	459b      	cmp	fp, r3
 800d96e:	db17      	blt.n	800d9a0 <__gethex+0x3d4>
 800d970:	6861      	ldr	r1, [r4, #4]
 800d972:	9801      	ldr	r0, [sp, #4]
 800d974:	3101      	adds	r1, #1
 800d976:	f7fd fe57 	bl	800b628 <_Balloc>
 800d97a:	4681      	mov	r9, r0
 800d97c:	b918      	cbnz	r0, 800d986 <__gethex+0x3ba>
 800d97e:	4b1a      	ldr	r3, [pc, #104]	@ (800d9e8 <__gethex+0x41c>)
 800d980:	4602      	mov	r2, r0
 800d982:	2184      	movs	r1, #132	@ 0x84
 800d984:	e6c5      	b.n	800d712 <__gethex+0x146>
 800d986:	6922      	ldr	r2, [r4, #16]
 800d988:	3202      	adds	r2, #2
 800d98a:	f104 010c 	add.w	r1, r4, #12
 800d98e:	0092      	lsls	r2, r2, #2
 800d990:	300c      	adds	r0, #12
 800d992:	f7ff fd6b 	bl	800d46c <memcpy>
 800d996:	4621      	mov	r1, r4
 800d998:	9801      	ldr	r0, [sp, #4]
 800d99a:	f7fd fe85 	bl	800b6a8 <_Bfree>
 800d99e:	464c      	mov	r4, r9
 800d9a0:	6923      	ldr	r3, [r4, #16]
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d9a8:	6122      	str	r2, [r4, #16]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	615a      	str	r2, [r3, #20]
 800d9ae:	e7be      	b.n	800d92e <__gethex+0x362>
 800d9b0:	6922      	ldr	r2, [r4, #16]
 800d9b2:	455a      	cmp	r2, fp
 800d9b4:	dd0b      	ble.n	800d9ce <__gethex+0x402>
 800d9b6:	2101      	movs	r1, #1
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f7ff fd9f 	bl	800d4fc <rshift>
 800d9be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9c2:	3701      	adds	r7, #1
 800d9c4:	42bb      	cmp	r3, r7
 800d9c6:	f6ff aee0 	blt.w	800d78a <__gethex+0x1be>
 800d9ca:	2501      	movs	r5, #1
 800d9cc:	e7c2      	b.n	800d954 <__gethex+0x388>
 800d9ce:	f016 061f 	ands.w	r6, r6, #31
 800d9d2:	d0fa      	beq.n	800d9ca <__gethex+0x3fe>
 800d9d4:	4453      	add	r3, sl
 800d9d6:	f1c6 0620 	rsb	r6, r6, #32
 800d9da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d9de:	f7fd ff15 	bl	800b80c <__hi0bits>
 800d9e2:	42b0      	cmp	r0, r6
 800d9e4:	dbe7      	blt.n	800d9b6 <__gethex+0x3ea>
 800d9e6:	e7f0      	b.n	800d9ca <__gethex+0x3fe>
 800d9e8:	0800e4a5 	.word	0x0800e4a5

0800d9ec <L_shift>:
 800d9ec:	f1c2 0208 	rsb	r2, r2, #8
 800d9f0:	0092      	lsls	r2, r2, #2
 800d9f2:	b570      	push	{r4, r5, r6, lr}
 800d9f4:	f1c2 0620 	rsb	r6, r2, #32
 800d9f8:	6843      	ldr	r3, [r0, #4]
 800d9fa:	6804      	ldr	r4, [r0, #0]
 800d9fc:	fa03 f506 	lsl.w	r5, r3, r6
 800da00:	432c      	orrs	r4, r5
 800da02:	40d3      	lsrs	r3, r2
 800da04:	6004      	str	r4, [r0, #0]
 800da06:	f840 3f04 	str.w	r3, [r0, #4]!
 800da0a:	4288      	cmp	r0, r1
 800da0c:	d3f4      	bcc.n	800d9f8 <L_shift+0xc>
 800da0e:	bd70      	pop	{r4, r5, r6, pc}

0800da10 <__match>:
 800da10:	b530      	push	{r4, r5, lr}
 800da12:	6803      	ldr	r3, [r0, #0]
 800da14:	3301      	adds	r3, #1
 800da16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da1a:	b914      	cbnz	r4, 800da22 <__match+0x12>
 800da1c:	6003      	str	r3, [r0, #0]
 800da1e:	2001      	movs	r0, #1
 800da20:	bd30      	pop	{r4, r5, pc}
 800da22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800da2a:	2d19      	cmp	r5, #25
 800da2c:	bf98      	it	ls
 800da2e:	3220      	addls	r2, #32
 800da30:	42a2      	cmp	r2, r4
 800da32:	d0f0      	beq.n	800da16 <__match+0x6>
 800da34:	2000      	movs	r0, #0
 800da36:	e7f3      	b.n	800da20 <__match+0x10>

0800da38 <__hexnan>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	680b      	ldr	r3, [r1, #0]
 800da3e:	6801      	ldr	r1, [r0, #0]
 800da40:	115e      	asrs	r6, r3, #5
 800da42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da46:	f013 031f 	ands.w	r3, r3, #31
 800da4a:	b087      	sub	sp, #28
 800da4c:	bf18      	it	ne
 800da4e:	3604      	addne	r6, #4
 800da50:	2500      	movs	r5, #0
 800da52:	1f37      	subs	r7, r6, #4
 800da54:	4682      	mov	sl, r0
 800da56:	4690      	mov	r8, r2
 800da58:	9301      	str	r3, [sp, #4]
 800da5a:	f846 5c04 	str.w	r5, [r6, #-4]
 800da5e:	46b9      	mov	r9, r7
 800da60:	463c      	mov	r4, r7
 800da62:	9502      	str	r5, [sp, #8]
 800da64:	46ab      	mov	fp, r5
 800da66:	784a      	ldrb	r2, [r1, #1]
 800da68:	1c4b      	adds	r3, r1, #1
 800da6a:	9303      	str	r3, [sp, #12]
 800da6c:	b342      	cbz	r2, 800dac0 <__hexnan+0x88>
 800da6e:	4610      	mov	r0, r2
 800da70:	9105      	str	r1, [sp, #20]
 800da72:	9204      	str	r2, [sp, #16]
 800da74:	f7ff fd94 	bl	800d5a0 <__hexdig_fun>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d151      	bne.n	800db20 <__hexnan+0xe8>
 800da7c:	9a04      	ldr	r2, [sp, #16]
 800da7e:	9905      	ldr	r1, [sp, #20]
 800da80:	2a20      	cmp	r2, #32
 800da82:	d818      	bhi.n	800dab6 <__hexnan+0x7e>
 800da84:	9b02      	ldr	r3, [sp, #8]
 800da86:	459b      	cmp	fp, r3
 800da88:	dd13      	ble.n	800dab2 <__hexnan+0x7a>
 800da8a:	454c      	cmp	r4, r9
 800da8c:	d206      	bcs.n	800da9c <__hexnan+0x64>
 800da8e:	2d07      	cmp	r5, #7
 800da90:	dc04      	bgt.n	800da9c <__hexnan+0x64>
 800da92:	462a      	mov	r2, r5
 800da94:	4649      	mov	r1, r9
 800da96:	4620      	mov	r0, r4
 800da98:	f7ff ffa8 	bl	800d9ec <L_shift>
 800da9c:	4544      	cmp	r4, r8
 800da9e:	d952      	bls.n	800db46 <__hexnan+0x10e>
 800daa0:	2300      	movs	r3, #0
 800daa2:	f1a4 0904 	sub.w	r9, r4, #4
 800daa6:	f844 3c04 	str.w	r3, [r4, #-4]
 800daaa:	f8cd b008 	str.w	fp, [sp, #8]
 800daae:	464c      	mov	r4, r9
 800dab0:	461d      	mov	r5, r3
 800dab2:	9903      	ldr	r1, [sp, #12]
 800dab4:	e7d7      	b.n	800da66 <__hexnan+0x2e>
 800dab6:	2a29      	cmp	r2, #41	@ 0x29
 800dab8:	d157      	bne.n	800db6a <__hexnan+0x132>
 800daba:	3102      	adds	r1, #2
 800dabc:	f8ca 1000 	str.w	r1, [sl]
 800dac0:	f1bb 0f00 	cmp.w	fp, #0
 800dac4:	d051      	beq.n	800db6a <__hexnan+0x132>
 800dac6:	454c      	cmp	r4, r9
 800dac8:	d206      	bcs.n	800dad8 <__hexnan+0xa0>
 800daca:	2d07      	cmp	r5, #7
 800dacc:	dc04      	bgt.n	800dad8 <__hexnan+0xa0>
 800dace:	462a      	mov	r2, r5
 800dad0:	4649      	mov	r1, r9
 800dad2:	4620      	mov	r0, r4
 800dad4:	f7ff ff8a 	bl	800d9ec <L_shift>
 800dad8:	4544      	cmp	r4, r8
 800dada:	d936      	bls.n	800db4a <__hexnan+0x112>
 800dadc:	f1a8 0204 	sub.w	r2, r8, #4
 800dae0:	4623      	mov	r3, r4
 800dae2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dae6:	f842 1f04 	str.w	r1, [r2, #4]!
 800daea:	429f      	cmp	r7, r3
 800daec:	d2f9      	bcs.n	800dae2 <__hexnan+0xaa>
 800daee:	1b3b      	subs	r3, r7, r4
 800daf0:	f023 0303 	bic.w	r3, r3, #3
 800daf4:	3304      	adds	r3, #4
 800daf6:	3401      	adds	r4, #1
 800daf8:	3e03      	subs	r6, #3
 800dafa:	42b4      	cmp	r4, r6
 800dafc:	bf88      	it	hi
 800dafe:	2304      	movhi	r3, #4
 800db00:	4443      	add	r3, r8
 800db02:	2200      	movs	r2, #0
 800db04:	f843 2b04 	str.w	r2, [r3], #4
 800db08:	429f      	cmp	r7, r3
 800db0a:	d2fb      	bcs.n	800db04 <__hexnan+0xcc>
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	b91b      	cbnz	r3, 800db18 <__hexnan+0xe0>
 800db10:	4547      	cmp	r7, r8
 800db12:	d128      	bne.n	800db66 <__hexnan+0x12e>
 800db14:	2301      	movs	r3, #1
 800db16:	603b      	str	r3, [r7, #0]
 800db18:	2005      	movs	r0, #5
 800db1a:	b007      	add	sp, #28
 800db1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db20:	3501      	adds	r5, #1
 800db22:	2d08      	cmp	r5, #8
 800db24:	f10b 0b01 	add.w	fp, fp, #1
 800db28:	dd06      	ble.n	800db38 <__hexnan+0x100>
 800db2a:	4544      	cmp	r4, r8
 800db2c:	d9c1      	bls.n	800dab2 <__hexnan+0x7a>
 800db2e:	2300      	movs	r3, #0
 800db30:	f844 3c04 	str.w	r3, [r4, #-4]
 800db34:	2501      	movs	r5, #1
 800db36:	3c04      	subs	r4, #4
 800db38:	6822      	ldr	r2, [r4, #0]
 800db3a:	f000 000f 	and.w	r0, r0, #15
 800db3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db42:	6020      	str	r0, [r4, #0]
 800db44:	e7b5      	b.n	800dab2 <__hexnan+0x7a>
 800db46:	2508      	movs	r5, #8
 800db48:	e7b3      	b.n	800dab2 <__hexnan+0x7a>
 800db4a:	9b01      	ldr	r3, [sp, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d0dd      	beq.n	800db0c <__hexnan+0xd4>
 800db50:	f1c3 0320 	rsb	r3, r3, #32
 800db54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db58:	40da      	lsrs	r2, r3
 800db5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db5e:	4013      	ands	r3, r2
 800db60:	f846 3c04 	str.w	r3, [r6, #-4]
 800db64:	e7d2      	b.n	800db0c <__hexnan+0xd4>
 800db66:	3f04      	subs	r7, #4
 800db68:	e7d0      	b.n	800db0c <__hexnan+0xd4>
 800db6a:	2004      	movs	r0, #4
 800db6c:	e7d5      	b.n	800db1a <__hexnan+0xe2>

0800db6e <__ascii_mbtowc>:
 800db6e:	b082      	sub	sp, #8
 800db70:	b901      	cbnz	r1, 800db74 <__ascii_mbtowc+0x6>
 800db72:	a901      	add	r1, sp, #4
 800db74:	b142      	cbz	r2, 800db88 <__ascii_mbtowc+0x1a>
 800db76:	b14b      	cbz	r3, 800db8c <__ascii_mbtowc+0x1e>
 800db78:	7813      	ldrb	r3, [r2, #0]
 800db7a:	600b      	str	r3, [r1, #0]
 800db7c:	7812      	ldrb	r2, [r2, #0]
 800db7e:	1e10      	subs	r0, r2, #0
 800db80:	bf18      	it	ne
 800db82:	2001      	movne	r0, #1
 800db84:	b002      	add	sp, #8
 800db86:	4770      	bx	lr
 800db88:	4610      	mov	r0, r2
 800db8a:	e7fb      	b.n	800db84 <__ascii_mbtowc+0x16>
 800db8c:	f06f 0001 	mvn.w	r0, #1
 800db90:	e7f8      	b.n	800db84 <__ascii_mbtowc+0x16>

0800db92 <_realloc_r>:
 800db92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db96:	4680      	mov	r8, r0
 800db98:	4615      	mov	r5, r2
 800db9a:	460c      	mov	r4, r1
 800db9c:	b921      	cbnz	r1, 800dba8 <_realloc_r+0x16>
 800db9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dba2:	4611      	mov	r1, r2
 800dba4:	f7fd bcb4 	b.w	800b510 <_malloc_r>
 800dba8:	b92a      	cbnz	r2, 800dbb6 <_realloc_r+0x24>
 800dbaa:	f7fd fc3d 	bl	800b428 <_free_r>
 800dbae:	2400      	movs	r4, #0
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb6:	f000 f840 	bl	800dc3a <_malloc_usable_size_r>
 800dbba:	4285      	cmp	r5, r0
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	d802      	bhi.n	800dbc6 <_realloc_r+0x34>
 800dbc0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dbc4:	d8f4      	bhi.n	800dbb0 <_realloc_r+0x1e>
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	4640      	mov	r0, r8
 800dbca:	f7fd fca1 	bl	800b510 <_malloc_r>
 800dbce:	4607      	mov	r7, r0
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d0ec      	beq.n	800dbae <_realloc_r+0x1c>
 800dbd4:	42b5      	cmp	r5, r6
 800dbd6:	462a      	mov	r2, r5
 800dbd8:	4621      	mov	r1, r4
 800dbda:	bf28      	it	cs
 800dbdc:	4632      	movcs	r2, r6
 800dbde:	f7ff fc45 	bl	800d46c <memcpy>
 800dbe2:	4621      	mov	r1, r4
 800dbe4:	4640      	mov	r0, r8
 800dbe6:	f7fd fc1f 	bl	800b428 <_free_r>
 800dbea:	463c      	mov	r4, r7
 800dbec:	e7e0      	b.n	800dbb0 <_realloc_r+0x1e>

0800dbee <__ascii_wctomb>:
 800dbee:	4603      	mov	r3, r0
 800dbf0:	4608      	mov	r0, r1
 800dbf2:	b141      	cbz	r1, 800dc06 <__ascii_wctomb+0x18>
 800dbf4:	2aff      	cmp	r2, #255	@ 0xff
 800dbf6:	d904      	bls.n	800dc02 <__ascii_wctomb+0x14>
 800dbf8:	228a      	movs	r2, #138	@ 0x8a
 800dbfa:	601a      	str	r2, [r3, #0]
 800dbfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc00:	4770      	bx	lr
 800dc02:	700a      	strb	r2, [r1, #0]
 800dc04:	2001      	movs	r0, #1
 800dc06:	4770      	bx	lr

0800dc08 <fiprintf>:
 800dc08:	b40e      	push	{r1, r2, r3}
 800dc0a:	b503      	push	{r0, r1, lr}
 800dc0c:	4601      	mov	r1, r0
 800dc0e:	ab03      	add	r3, sp, #12
 800dc10:	4805      	ldr	r0, [pc, #20]	@ (800dc28 <fiprintf+0x20>)
 800dc12:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc16:	6800      	ldr	r0, [r0, #0]
 800dc18:	9301      	str	r3, [sp, #4]
 800dc1a:	f7ff f9bd 	bl	800cf98 <_vfiprintf_r>
 800dc1e:	b002      	add	sp, #8
 800dc20:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc24:	b003      	add	sp, #12
 800dc26:	4770      	bx	lr
 800dc28:	20000f5c 	.word	0x20000f5c

0800dc2c <abort>:
 800dc2c:	b508      	push	{r3, lr}
 800dc2e:	2006      	movs	r0, #6
 800dc30:	f000 f834 	bl	800dc9c <raise>
 800dc34:	2001      	movs	r0, #1
 800dc36:	f7f3 fdb3 	bl	80017a0 <_exit>

0800dc3a <_malloc_usable_size_r>:
 800dc3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc3e:	1f18      	subs	r0, r3, #4
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	bfbc      	itt	lt
 800dc44:	580b      	ldrlt	r3, [r1, r0]
 800dc46:	18c0      	addlt	r0, r0, r3
 800dc48:	4770      	bx	lr

0800dc4a <_raise_r>:
 800dc4a:	291f      	cmp	r1, #31
 800dc4c:	b538      	push	{r3, r4, r5, lr}
 800dc4e:	4605      	mov	r5, r0
 800dc50:	460c      	mov	r4, r1
 800dc52:	d904      	bls.n	800dc5e <_raise_r+0x14>
 800dc54:	2316      	movs	r3, #22
 800dc56:	6003      	str	r3, [r0, #0]
 800dc58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc5c:	bd38      	pop	{r3, r4, r5, pc}
 800dc5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc60:	b112      	cbz	r2, 800dc68 <_raise_r+0x1e>
 800dc62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc66:	b94b      	cbnz	r3, 800dc7c <_raise_r+0x32>
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f000 f831 	bl	800dcd0 <_getpid_r>
 800dc6e:	4622      	mov	r2, r4
 800dc70:	4601      	mov	r1, r0
 800dc72:	4628      	mov	r0, r5
 800dc74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc78:	f000 b818 	b.w	800dcac <_kill_r>
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d00a      	beq.n	800dc96 <_raise_r+0x4c>
 800dc80:	1c59      	adds	r1, r3, #1
 800dc82:	d103      	bne.n	800dc8c <_raise_r+0x42>
 800dc84:	2316      	movs	r3, #22
 800dc86:	6003      	str	r3, [r0, #0]
 800dc88:	2001      	movs	r0, #1
 800dc8a:	e7e7      	b.n	800dc5c <_raise_r+0x12>
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc92:	4620      	mov	r0, r4
 800dc94:	4798      	blx	r3
 800dc96:	2000      	movs	r0, #0
 800dc98:	e7e0      	b.n	800dc5c <_raise_r+0x12>
	...

0800dc9c <raise>:
 800dc9c:	4b02      	ldr	r3, [pc, #8]	@ (800dca8 <raise+0xc>)
 800dc9e:	4601      	mov	r1, r0
 800dca0:	6818      	ldr	r0, [r3, #0]
 800dca2:	f7ff bfd2 	b.w	800dc4a <_raise_r>
 800dca6:	bf00      	nop
 800dca8:	20000f5c 	.word	0x20000f5c

0800dcac <_kill_r>:
 800dcac:	b538      	push	{r3, r4, r5, lr}
 800dcae:	4d07      	ldr	r5, [pc, #28]	@ (800dccc <_kill_r+0x20>)
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	4608      	mov	r0, r1
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	602b      	str	r3, [r5, #0]
 800dcba:	f7f3 fd61 	bl	8001780 <_kill>
 800dcbe:	1c43      	adds	r3, r0, #1
 800dcc0:	d102      	bne.n	800dcc8 <_kill_r+0x1c>
 800dcc2:	682b      	ldr	r3, [r5, #0]
 800dcc4:	b103      	cbz	r3, 800dcc8 <_kill_r+0x1c>
 800dcc6:	6023      	str	r3, [r4, #0]
 800dcc8:	bd38      	pop	{r3, r4, r5, pc}
 800dcca:	bf00      	nop
 800dccc:	2000197c 	.word	0x2000197c

0800dcd0 <_getpid_r>:
 800dcd0:	f7f3 bd4e 	b.w	8001770 <_getpid>
 800dcd4:	0000      	movs	r0, r0
	...

0800dcd8 <atan>:
 800dcd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcdc:	ec55 4b10 	vmov	r4, r5, d0
 800dce0:	4bbf      	ldr	r3, [pc, #764]	@ (800dfe0 <atan+0x308>)
 800dce2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800dce6:	429e      	cmp	r6, r3
 800dce8:	46ab      	mov	fp, r5
 800dcea:	d918      	bls.n	800dd1e <atan+0x46>
 800dcec:	4bbd      	ldr	r3, [pc, #756]	@ (800dfe4 <atan+0x30c>)
 800dcee:	429e      	cmp	r6, r3
 800dcf0:	d801      	bhi.n	800dcf6 <atan+0x1e>
 800dcf2:	d109      	bne.n	800dd08 <atan+0x30>
 800dcf4:	b144      	cbz	r4, 800dd08 <atan+0x30>
 800dcf6:	4622      	mov	r2, r4
 800dcf8:	462b      	mov	r3, r5
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	f7f2 faed 	bl	80002dc <__adddf3>
 800dd02:	4604      	mov	r4, r0
 800dd04:	460d      	mov	r5, r1
 800dd06:	e006      	b.n	800dd16 <atan+0x3e>
 800dd08:	f1bb 0f00 	cmp.w	fp, #0
 800dd0c:	f340 812b 	ble.w	800df66 <atan+0x28e>
 800dd10:	a597      	add	r5, pc, #604	@ (adr r5, 800df70 <atan+0x298>)
 800dd12:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd16:	ec45 4b10 	vmov	d0, r4, r5
 800dd1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd1e:	4bb2      	ldr	r3, [pc, #712]	@ (800dfe8 <atan+0x310>)
 800dd20:	429e      	cmp	r6, r3
 800dd22:	d813      	bhi.n	800dd4c <atan+0x74>
 800dd24:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800dd28:	429e      	cmp	r6, r3
 800dd2a:	d80c      	bhi.n	800dd46 <atan+0x6e>
 800dd2c:	a392      	add	r3, pc, #584	@ (adr r3, 800df78 <atan+0x2a0>)
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	4620      	mov	r0, r4
 800dd34:	4629      	mov	r1, r5
 800dd36:	f7f2 fad1 	bl	80002dc <__adddf3>
 800dd3a:	4bac      	ldr	r3, [pc, #688]	@ (800dfec <atan+0x314>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f7f2 ff13 	bl	8000b68 <__aeabi_dcmpgt>
 800dd42:	2800      	cmp	r0, #0
 800dd44:	d1e7      	bne.n	800dd16 <atan+0x3e>
 800dd46:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800dd4a:	e029      	b.n	800dda0 <atan+0xc8>
 800dd4c:	f000 f95c 	bl	800e008 <fabs>
 800dd50:	4ba7      	ldr	r3, [pc, #668]	@ (800dff0 <atan+0x318>)
 800dd52:	429e      	cmp	r6, r3
 800dd54:	ec55 4b10 	vmov	r4, r5, d0
 800dd58:	f200 80bc 	bhi.w	800ded4 <atan+0x1fc>
 800dd5c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800dd60:	429e      	cmp	r6, r3
 800dd62:	f200 809e 	bhi.w	800dea2 <atan+0x1ca>
 800dd66:	4622      	mov	r2, r4
 800dd68:	462b      	mov	r3, r5
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	f7f2 fab5 	bl	80002dc <__adddf3>
 800dd72:	4b9e      	ldr	r3, [pc, #632]	@ (800dfec <atan+0x314>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	f7f2 faaf 	bl	80002d8 <__aeabi_dsub>
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	4606      	mov	r6, r0
 800dd7e:	460f      	mov	r7, r1
 800dd80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dd84:	4620      	mov	r0, r4
 800dd86:	4629      	mov	r1, r5
 800dd88:	f7f2 faa8 	bl	80002dc <__adddf3>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4630      	mov	r0, r6
 800dd92:	4639      	mov	r1, r7
 800dd94:	f7f2 fd82 	bl	800089c <__aeabi_ddiv>
 800dd98:	f04f 0a00 	mov.w	sl, #0
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	460d      	mov	r5, r1
 800dda0:	4622      	mov	r2, r4
 800dda2:	462b      	mov	r3, r5
 800dda4:	4620      	mov	r0, r4
 800dda6:	4629      	mov	r1, r5
 800dda8:	f7f2 fc4e 	bl	8000648 <__aeabi_dmul>
 800ddac:	4602      	mov	r2, r0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	4680      	mov	r8, r0
 800ddb2:	4689      	mov	r9, r1
 800ddb4:	f7f2 fc48 	bl	8000648 <__aeabi_dmul>
 800ddb8:	a371      	add	r3, pc, #452	@ (adr r3, 800df80 <atan+0x2a8>)
 800ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	460f      	mov	r7, r1
 800ddc2:	f7f2 fc41 	bl	8000648 <__aeabi_dmul>
 800ddc6:	a370      	add	r3, pc, #448	@ (adr r3, 800df88 <atan+0x2b0>)
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	f7f2 fa86 	bl	80002dc <__adddf3>
 800ddd0:	4632      	mov	r2, r6
 800ddd2:	463b      	mov	r3, r7
 800ddd4:	f7f2 fc38 	bl	8000648 <__aeabi_dmul>
 800ddd8:	a36d      	add	r3, pc, #436	@ (adr r3, 800df90 <atan+0x2b8>)
 800ddda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddde:	f7f2 fa7d 	bl	80002dc <__adddf3>
 800dde2:	4632      	mov	r2, r6
 800dde4:	463b      	mov	r3, r7
 800dde6:	f7f2 fc2f 	bl	8000648 <__aeabi_dmul>
 800ddea:	a36b      	add	r3, pc, #428	@ (adr r3, 800df98 <atan+0x2c0>)
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	f7f2 fa74 	bl	80002dc <__adddf3>
 800ddf4:	4632      	mov	r2, r6
 800ddf6:	463b      	mov	r3, r7
 800ddf8:	f7f2 fc26 	bl	8000648 <__aeabi_dmul>
 800ddfc:	a368      	add	r3, pc, #416	@ (adr r3, 800dfa0 <atan+0x2c8>)
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	f7f2 fa6b 	bl	80002dc <__adddf3>
 800de06:	4632      	mov	r2, r6
 800de08:	463b      	mov	r3, r7
 800de0a:	f7f2 fc1d 	bl	8000648 <__aeabi_dmul>
 800de0e:	a366      	add	r3, pc, #408	@ (adr r3, 800dfa8 <atan+0x2d0>)
 800de10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de14:	f7f2 fa62 	bl	80002dc <__adddf3>
 800de18:	4642      	mov	r2, r8
 800de1a:	464b      	mov	r3, r9
 800de1c:	f7f2 fc14 	bl	8000648 <__aeabi_dmul>
 800de20:	a363      	add	r3, pc, #396	@ (adr r3, 800dfb0 <atan+0x2d8>)
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	4680      	mov	r8, r0
 800de28:	4689      	mov	r9, r1
 800de2a:	4630      	mov	r0, r6
 800de2c:	4639      	mov	r1, r7
 800de2e:	f7f2 fc0b 	bl	8000648 <__aeabi_dmul>
 800de32:	a361      	add	r3, pc, #388	@ (adr r3, 800dfb8 <atan+0x2e0>)
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	f7f2 fa4e 	bl	80002d8 <__aeabi_dsub>
 800de3c:	4632      	mov	r2, r6
 800de3e:	463b      	mov	r3, r7
 800de40:	f7f2 fc02 	bl	8000648 <__aeabi_dmul>
 800de44:	a35e      	add	r3, pc, #376	@ (adr r3, 800dfc0 <atan+0x2e8>)
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	f7f2 fa45 	bl	80002d8 <__aeabi_dsub>
 800de4e:	4632      	mov	r2, r6
 800de50:	463b      	mov	r3, r7
 800de52:	f7f2 fbf9 	bl	8000648 <__aeabi_dmul>
 800de56:	a35c      	add	r3, pc, #368	@ (adr r3, 800dfc8 <atan+0x2f0>)
 800de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5c:	f7f2 fa3c 	bl	80002d8 <__aeabi_dsub>
 800de60:	4632      	mov	r2, r6
 800de62:	463b      	mov	r3, r7
 800de64:	f7f2 fbf0 	bl	8000648 <__aeabi_dmul>
 800de68:	a359      	add	r3, pc, #356	@ (adr r3, 800dfd0 <atan+0x2f8>)
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	f7f2 fa33 	bl	80002d8 <__aeabi_dsub>
 800de72:	4632      	mov	r2, r6
 800de74:	463b      	mov	r3, r7
 800de76:	f7f2 fbe7 	bl	8000648 <__aeabi_dmul>
 800de7a:	4602      	mov	r2, r0
 800de7c:	460b      	mov	r3, r1
 800de7e:	4640      	mov	r0, r8
 800de80:	4649      	mov	r1, r9
 800de82:	f7f2 fa2b 	bl	80002dc <__adddf3>
 800de86:	4622      	mov	r2, r4
 800de88:	462b      	mov	r3, r5
 800de8a:	f7f2 fbdd 	bl	8000648 <__aeabi_dmul>
 800de8e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	d148      	bne.n	800df2a <atan+0x252>
 800de98:	4620      	mov	r0, r4
 800de9a:	4629      	mov	r1, r5
 800de9c:	f7f2 fa1c 	bl	80002d8 <__aeabi_dsub>
 800dea0:	e72f      	b.n	800dd02 <atan+0x2a>
 800dea2:	4b52      	ldr	r3, [pc, #328]	@ (800dfec <atan+0x314>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	4620      	mov	r0, r4
 800dea8:	4629      	mov	r1, r5
 800deaa:	f7f2 fa15 	bl	80002d8 <__aeabi_dsub>
 800deae:	4b4f      	ldr	r3, [pc, #316]	@ (800dfec <atan+0x314>)
 800deb0:	4606      	mov	r6, r0
 800deb2:	460f      	mov	r7, r1
 800deb4:	2200      	movs	r2, #0
 800deb6:	4620      	mov	r0, r4
 800deb8:	4629      	mov	r1, r5
 800deba:	f7f2 fa0f 	bl	80002dc <__adddf3>
 800debe:	4602      	mov	r2, r0
 800dec0:	460b      	mov	r3, r1
 800dec2:	4630      	mov	r0, r6
 800dec4:	4639      	mov	r1, r7
 800dec6:	f7f2 fce9 	bl	800089c <__aeabi_ddiv>
 800deca:	f04f 0a01 	mov.w	sl, #1
 800dece:	4604      	mov	r4, r0
 800ded0:	460d      	mov	r5, r1
 800ded2:	e765      	b.n	800dda0 <atan+0xc8>
 800ded4:	4b47      	ldr	r3, [pc, #284]	@ (800dff4 <atan+0x31c>)
 800ded6:	429e      	cmp	r6, r3
 800ded8:	d21c      	bcs.n	800df14 <atan+0x23c>
 800deda:	4b47      	ldr	r3, [pc, #284]	@ (800dff8 <atan+0x320>)
 800dedc:	2200      	movs	r2, #0
 800dede:	4620      	mov	r0, r4
 800dee0:	4629      	mov	r1, r5
 800dee2:	f7f2 f9f9 	bl	80002d8 <__aeabi_dsub>
 800dee6:	4b44      	ldr	r3, [pc, #272]	@ (800dff8 <atan+0x320>)
 800dee8:	4606      	mov	r6, r0
 800deea:	460f      	mov	r7, r1
 800deec:	2200      	movs	r2, #0
 800deee:	4620      	mov	r0, r4
 800def0:	4629      	mov	r1, r5
 800def2:	f7f2 fba9 	bl	8000648 <__aeabi_dmul>
 800def6:	4b3d      	ldr	r3, [pc, #244]	@ (800dfec <atan+0x314>)
 800def8:	2200      	movs	r2, #0
 800defa:	f7f2 f9ef 	bl	80002dc <__adddf3>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	4630      	mov	r0, r6
 800df04:	4639      	mov	r1, r7
 800df06:	f7f2 fcc9 	bl	800089c <__aeabi_ddiv>
 800df0a:	f04f 0a02 	mov.w	sl, #2
 800df0e:	4604      	mov	r4, r0
 800df10:	460d      	mov	r5, r1
 800df12:	e745      	b.n	800dda0 <atan+0xc8>
 800df14:	4622      	mov	r2, r4
 800df16:	462b      	mov	r3, r5
 800df18:	4938      	ldr	r1, [pc, #224]	@ (800dffc <atan+0x324>)
 800df1a:	2000      	movs	r0, #0
 800df1c:	f7f2 fcbe 	bl	800089c <__aeabi_ddiv>
 800df20:	f04f 0a03 	mov.w	sl, #3
 800df24:	4604      	mov	r4, r0
 800df26:	460d      	mov	r5, r1
 800df28:	e73a      	b.n	800dda0 <atan+0xc8>
 800df2a:	4b35      	ldr	r3, [pc, #212]	@ (800e000 <atan+0x328>)
 800df2c:	4e35      	ldr	r6, [pc, #212]	@ (800e004 <atan+0x32c>)
 800df2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df36:	f7f2 f9cf 	bl	80002d8 <__aeabi_dsub>
 800df3a:	4622      	mov	r2, r4
 800df3c:	462b      	mov	r3, r5
 800df3e:	f7f2 f9cb 	bl	80002d8 <__aeabi_dsub>
 800df42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800df46:	4602      	mov	r2, r0
 800df48:	460b      	mov	r3, r1
 800df4a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800df4e:	f7f2 f9c3 	bl	80002d8 <__aeabi_dsub>
 800df52:	f1bb 0f00 	cmp.w	fp, #0
 800df56:	4604      	mov	r4, r0
 800df58:	460d      	mov	r5, r1
 800df5a:	f6bf aedc 	bge.w	800dd16 <atan+0x3e>
 800df5e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df62:	461d      	mov	r5, r3
 800df64:	e6d7      	b.n	800dd16 <atan+0x3e>
 800df66:	a51c      	add	r5, pc, #112	@ (adr r5, 800dfd8 <atan+0x300>)
 800df68:	e9d5 4500 	ldrd	r4, r5, [r5]
 800df6c:	e6d3      	b.n	800dd16 <atan+0x3e>
 800df6e:	bf00      	nop
 800df70:	54442d18 	.word	0x54442d18
 800df74:	3ff921fb 	.word	0x3ff921fb
 800df78:	8800759c 	.word	0x8800759c
 800df7c:	7e37e43c 	.word	0x7e37e43c
 800df80:	e322da11 	.word	0xe322da11
 800df84:	3f90ad3a 	.word	0x3f90ad3a
 800df88:	24760deb 	.word	0x24760deb
 800df8c:	3fa97b4b 	.word	0x3fa97b4b
 800df90:	a0d03d51 	.word	0xa0d03d51
 800df94:	3fb10d66 	.word	0x3fb10d66
 800df98:	c54c206e 	.word	0xc54c206e
 800df9c:	3fb745cd 	.word	0x3fb745cd
 800dfa0:	920083ff 	.word	0x920083ff
 800dfa4:	3fc24924 	.word	0x3fc24924
 800dfa8:	5555550d 	.word	0x5555550d
 800dfac:	3fd55555 	.word	0x3fd55555
 800dfb0:	2c6a6c2f 	.word	0x2c6a6c2f
 800dfb4:	bfa2b444 	.word	0xbfa2b444
 800dfb8:	52defd9a 	.word	0x52defd9a
 800dfbc:	3fadde2d 	.word	0x3fadde2d
 800dfc0:	af749a6d 	.word	0xaf749a6d
 800dfc4:	3fb3b0f2 	.word	0x3fb3b0f2
 800dfc8:	fe231671 	.word	0xfe231671
 800dfcc:	3fbc71c6 	.word	0x3fbc71c6
 800dfd0:	9998ebc4 	.word	0x9998ebc4
 800dfd4:	3fc99999 	.word	0x3fc99999
 800dfd8:	54442d18 	.word	0x54442d18
 800dfdc:	bff921fb 	.word	0xbff921fb
 800dfe0:	440fffff 	.word	0x440fffff
 800dfe4:	7ff00000 	.word	0x7ff00000
 800dfe8:	3fdbffff 	.word	0x3fdbffff
 800dfec:	3ff00000 	.word	0x3ff00000
 800dff0:	3ff2ffff 	.word	0x3ff2ffff
 800dff4:	40038000 	.word	0x40038000
 800dff8:	3ff80000 	.word	0x3ff80000
 800dffc:	bff00000 	.word	0xbff00000
 800e000:	0800e820 	.word	0x0800e820
 800e004:	0800e840 	.word	0x0800e840

0800e008 <fabs>:
 800e008:	ec51 0b10 	vmov	r0, r1, d0
 800e00c:	4602      	mov	r2, r0
 800e00e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e012:	ec43 2b10 	vmov	d0, r2, r3
 800e016:	4770      	bx	lr

0800e018 <_init>:
 800e018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e01a:	bf00      	nop
 800e01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e01e:	bc08      	pop	{r3}
 800e020:	469e      	mov	lr, r3
 800e022:	4770      	bx	lr

0800e024 <_fini>:
 800e024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e026:	bf00      	nop
 800e028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e02a:	bc08      	pop	{r3}
 800e02c:	469e      	mov	lr, r3
 800e02e:	4770      	bx	lr
