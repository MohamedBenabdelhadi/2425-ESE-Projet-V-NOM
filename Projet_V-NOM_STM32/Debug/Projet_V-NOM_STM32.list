
Projet_V-NOM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800e7e0  0800e7e0  0000f7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ede8  0800ede8  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ede8  0800ede8  0000fde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edf0  0800edf0  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edf0  0800edf0  0000fdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800edf4  0800edf4  0000fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800edf8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a0  200001d8  0800efd0  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001478  0800efd0  00010478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c7b  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c6b  00000000  00000000  00032e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d80  00000000  00000000  00037af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c7  00000000  00000000  00039870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251cf  00000000  00000000  0003af37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022587  00000000  00000000  00060106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9261  00000000  00000000  0008268d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b8ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091b8  00000000  00000000  0016b934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00174aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e7c4 	.word	0x0800e7c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800e7c4 	.word	0x0800e7c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00a f81f 	bl	800b090 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2201      	movs	r2, #1
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 feed 	bl	8002e9c <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fc04 	bl	80018d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f003 f894 	bl	8004204 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fbf7 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f002 fbb0 	bl	8003868 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 fbe1 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f4 	.word	0x200001f4
 8001120:	0c900008 	.word	0x0c900008

08001124 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	2220      	movs	r2, #32
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f009 ffad 	bl	800b090 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001136:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001138:	4a2b      	ldr	r2, [pc, #172]	@ (80011e8 <MX_ADC2_Init+0xc4>)
 800113a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800113e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001142:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115c:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800115e:	2204      	movs	r2, #4
 8001160:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001164:	2200      	movs	r2, #0
 8001166:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800116a:	2201      	movs	r2, #1
 800116c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001170:	2201      	movs	r2, #1
 8001172:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001184:	2200      	movs	r2, #0
 8001186:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800119e:	4811      	ldr	r0, [pc, #68]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 80011a0:	f001 fe7c 	bl	8002e9c <HAL_ADC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011aa:	f000 fb93 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_ADC2_Init+0xc8>)
 80011b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b2:	2306      	movs	r3, #6
 80011b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ba:	237f      	movs	r3, #127	@ 0x7f
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011be:	2304      	movs	r3, #4
 80011c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 80011cc:	f002 fb4c 	bl	8003868 <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011d6:	f000 fb7d 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000260 	.word	0x20000260
 80011e8:	50000100 	.word	0x50000100
 80011ec:	04300002 	.word	0x04300002

080011f0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b09c      	sub	sp, #112	@ 0x70
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	2244      	movs	r2, #68	@ 0x44
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f009 ff3d 	bl	800b090 <memset>
  if(adcHandle->Instance==ADC1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800121e:	d146      	bne.n	80012ae <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001220:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001224:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001226:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800122a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	4618      	mov	r0, r3
 8001232:	f004 f9d5 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800123c:	f000 fb4a 	bl	80018d4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001240:	4b42      	ldr	r3, [pc, #264]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a41      	ldr	r2, [pc, #260]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 8001248:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800124a:	4b40      	ldr	r3, [pc, #256]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10b      	bne.n	800126a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001252:	4b3f      	ldr	r3, [pc, #252]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a3e      	ldr	r2, [pc, #248]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001258:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b3c      	ldr	r3, [pc, #240]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a38      	ldr	r2, [pc, #224]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ToF2_Pin|GPIO_PIN_2;
 8001282:	2305      	movs	r3, #5
 8001284:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001298:	f003 f9f8 	bl	800468c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2105      	movs	r1, #5
 80012a0:	2012      	movs	r0, #18
 80012a2:	f003 f90b 	bl	80044bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012a6:	2012      	movs	r0, #18
 80012a8:	f003 f922 	bl	80044f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012ac:	e04a      	b.n	8001344 <HAL_ADC_MspInit+0x154>
  else if(adcHandle->Instance==ADC2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a28      	ldr	r2, [pc, #160]	@ (8001354 <HAL_ADC_MspInit+0x164>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d145      	bne.n	8001344 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 f989 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80012d4:	f000 fafe 	bl	80018d4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 80012e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d10b      	bne.n	8001302 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 80012f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ToF2_Pin;
 800131a:	2301      	movs	r3, #1
 800131c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ToF2_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001330:	f003 f9ac 	bl	800468c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2105      	movs	r1, #5
 8001338:	2012      	movs	r0, #18
 800133a:	f003 f8bf 	bl	80044bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800133e:	2012      	movs	r0, #18
 8001340:	f003 f8d6 	bl	80044f0 <HAL_NVIC_EnableIRQ>
}
 8001344:	bf00      	nop
 8001346:	3770      	adds	r7, #112	@ 0x70
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200002cc 	.word	0x200002cc
 8001350:	40021000 	.word	0x40021000
 8001354:	50000100 	.word	0x50000100

08001358 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_FREERTOS_Init+0x2c>)
 8001360:	1d3c      	adds	r4, r7, #4
 8001362:	461d      	mov	r5, r3
 8001364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f007 fc46 	bl	8008c02 <osThreadCreate>
 8001376:	4603      	mov	r3, r0
 8001378:	4a03      	ldr	r2, [pc, #12]	@ (8001388 <MX_FREERTOS_Init+0x30>)
 800137a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	0800e7ec 	.word	0x0800e7ec
 8001388:	200002d0 	.word	0x200002d0

0800138c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001394:	2001      	movs	r0, #1
 8001396:	f007 fc5b 	bl	8008c50 <osDelay>
 800139a:	e7fb      	b.n	8001394 <StartDefaultTask+0x8>

0800139c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4b42      	ldr	r3, [pc, #264]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	4a41      	ldr	r2, [pc, #260]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013be:	4b3f      	ldr	r3, [pc, #252]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ca:	4b3c      	ldr	r3, [pc, #240]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a3b      	ldr	r2, [pc, #236]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b39      	ldr	r3, [pc, #228]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b36      	ldr	r3, [pc, #216]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	4a35      	ldr	r2, [pc, #212]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ee:	4b33      	ldr	r3, [pc, #204]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	4a2f      	ldr	r2, [pc, #188]	@ (80014bc <MX_GPIO_Init+0x120>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001406:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <MX_GPIO_Init+0x120>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8001418:	4829      	ldr	r0, [pc, #164]	@ (80014c0 <MX_GPIO_Init+0x124>)
 800141a:	f003 fab9 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2103      	movs	r1, #3
 8001422:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <MX_GPIO_Init+0x128>)
 8001424:	f003 fab4 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 8001428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4820      	ldr	r0, [pc, #128]	@ (80014c0 <MX_GPIO_Init+0x124>)
 800143e:	f003 f925 	bl	800468c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AG_INT1_Pin|AG_INT2_Pin;
 8001442:	2318      	movs	r3, #24
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001446:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145a:	f003 f917 	bl	800468c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin;
 800145e:	f44f 6341 	mov.w	r3, #3088	@ 0xc10
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4812      	ldr	r0, [pc, #72]	@ (80014c0 <MX_GPIO_Init+0x124>)
 8001478:	f003 f908 	bl	800468c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 800147c:	2303      	movs	r3, #3
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <MX_GPIO_Init+0x128>)
 8001494:	f003 f8fa 	bl	800468c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin;
 8001498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_MODE_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_GPIO_Init+0x128>)
 80014ae:	f003 f8ed 	bl	800468c <HAL_GPIO_Init>

}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	@ 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000800 	.word	0x48000800
 80014c4:	48000400 	.word	0x48000400

080014c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014cc:	f3bf 8f4f 	dsb	sy
}
 80014d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <__NVIC_SystemReset+0x24>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014da:	4904      	ldr	r1, [pc, #16]	@ (80014ec <__NVIC_SystemReset+0x24>)
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__NVIC_SystemReset+0x28>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014e2:	f3bf 8f4f 	dsb	sy
}
 80014e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <__NVIC_SystemReset+0x20>
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	05fa0004 	.word	0x05fa0004

080014f4 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014fc:	1d39      	adds	r1, r7, #4
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001502:	2201      	movs	r2, #1
 8001504:	4803      	ldr	r0, [pc, #12]	@ (8001514 <__io_putchar+0x20>)
 8001506:	f006 f91a 	bl	800773e <HAL_UART_Transmit>

	return ch;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200004ac 	.word	0x200004ac

08001518 <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	@ (800158c <HAL_UART_ErrorCallback+0x74>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d12b      	bne.n	8001582 <HAL_UART_ErrorCallback+0x6a>
	{
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f006 fcee 	bl	8007f0c <HAL_UART_GetError>
 8001530:	4603      	mov	r3, r0
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <HAL_UART_ErrorCallback+0x28>
			DEBUG_PRINT("Parity Error!\r\n");
 800153a:	4815      	ldr	r0, [pc, #84]	@ (8001590 <HAL_UART_ErrorCallback+0x78>)
 800153c:	f009 fca8 	bl	800ae90 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f006 fce3 	bl	8007f0c <HAL_UART_GetError>
 8001546:	4603      	mov	r3, r0
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HAL_UART_ErrorCallback+0x3e>
			DEBUG_PRINT("Noise Error!\r\n");
 8001550:	4810      	ldr	r0, [pc, #64]	@ (8001594 <HAL_UART_ErrorCallback+0x7c>)
 8001552:	f009 fc9d 	bl	800ae90 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f006 fcd8 	bl	8007f0c <HAL_UART_GetError>
 800155c:	4603      	mov	r3, r0
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <HAL_UART_ErrorCallback+0x54>
			DEBUG_PRINT("Framing Error!\r\n");
 8001566:	480c      	ldr	r0, [pc, #48]	@ (8001598 <HAL_UART_ErrorCallback+0x80>)
 8001568:	f009 fc92 	bl	800ae90 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f006 fccd 	bl	8007f0c <HAL_UART_GetError>
 8001572:	4603      	mov	r3, r0
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HAL_UART_ErrorCallback+0x6a>
			DEBUG_PRINT("Overrun Error!\r\n");
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <HAL_UART_ErrorCallback+0x84>)
 800157e:	f009 fc87 	bl	800ae90 <puts>

		//YLIDARX2_RestartDMA(&hlidar);
	}
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40004400 	.word	0x40004400
 8001590:	0800e800 	.word	0x0800e800
 8001594:	0800e810 	.word	0x0800e810
 8001598:	0800e820 	.word	0x0800e820
 800159c:	0800e830 	.word	0x0800e830

080015a0 <HAL_ADC_ConvCpltCallback>:
/**
 * @brief ADC conversion complete callback.
 * This function is called when an ADC conversion is complete.
 * It retrieves the ADC value and processes the data.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_ConvCpltCallback+0x26>
		hTof.adc_val_tof1 = HAL_ADC_GetValue(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f001 ff26 	bl	8003404 <HAL_ADC_GetValue>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015bc:	6093      	str	r3, [r2, #8]
		GP2Y0A41SK0F_get_distance1(&hTof);
 80015be:	480b      	ldr	r0, [pc, #44]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015c0:	f000 ffee 	bl	80025a0 <GP2Y0A41SK0F_get_distance1>
	} else if (hadc->Instance == ADC2) {
		hTof.adc_val_tof2 = HAL_ADC_GetValue(hadc);
		GP2Y0A41SK0F_get_distance2(&hTof);
	}
}
 80015c4:	e00d      	b.n	80015e2 <HAL_ADC_ConvCpltCallback+0x42>
	} else if (hadc->Instance == ADC2) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x50>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d108      	bne.n	80015e2 <HAL_ADC_ConvCpltCallback+0x42>
		hTof.adc_val_tof2 = HAL_ADC_GetValue(hadc);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f001 ff17 	bl	8003404 <HAL_ADC_GetValue>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015da:	60d3      	str	r3, [r2, #12]
		GP2Y0A41SK0F_get_distance2(&hTof);
 80015dc:	4803      	ldr	r0, [pc, #12]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015de:	f001 f833 	bl	8002648 <GP2Y0A41SK0F_get_distance2>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002f4 	.word	0x200002f4
 80015f0:	50000100 	.word	0x50000100

080015f4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	if (hadc->ErrorCode != HAL_ADC_ERROR_NONE) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <HAL_ADC_ErrorCallback+0x22>
		printf("ADC Error Code: %lx\n", hadc->ErrorCode);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001608:	4619      	mov	r1, r3
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <HAL_ADC_ErrorCallback+0x2c>)
 800160c:	f009 fbd8 	bl	800adc0 <iprintf>

		GP2Y0A41SK0F_Start_Interrupt(&hTof);
 8001610:	4804      	ldr	r0, [pc, #16]	@ (8001624 <HAL_ADC_ErrorCallback+0x30>)
 8001612:	f000 ff95 	bl	8002540 <GP2Y0A41SK0F_Start_Interrupt>
	}
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	0800e840 	.word	0x0800e840
 8001624:	200002f4 	.word	0x200002f4

08001628 <errHandler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void errHandler_xTaskCreate(BaseType_t r)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d103      	bne.n	800163e <errHandler_xTaskCreate+0x16>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
		printf("Tâche crée avec succès\r\n");
 8001636:	480c      	ldr	r0, [pc, #48]	@ (8001668 <errHandler_xTaskCreate+0x40>)
 8001638:	f009 fc2a 	bl	800ae90 <puts>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 800163c:	e010      	b.n	8001660 <errHandler_xTaskCreate+0x38>
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001644:	d105      	bne.n	8001652 <errHandler_xTaskCreate+0x2a>
		printf("Erreur: Mémoire insuffisante\r\n");
 8001646:	4809      	ldr	r0, [pc, #36]	@ (800166c <errHandler_xTaskCreate+0x44>)
 8001648:	f009 fc22 	bl	800ae90 <puts>
		Error_Handler();
 800164c:	f000 f942 	bl	80018d4 <Error_Handler>
}
 8001650:	e006      	b.n	8001660 <errHandler_xTaskCreate+0x38>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 8001652:	4807      	ldr	r0, [pc, #28]	@ (8001670 <errHandler_xTaskCreate+0x48>)
 8001654:	f009 fc1c 	bl	800ae90 <puts>
		Error_Handler();  	// Gestion d'erreur générique
 8001658:	f000 f93c 	bl	80018d4 <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 800165c:	f7ff ff34 	bl	80014c8 <__NVIC_SystemReset>
}
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	0800e858 	.word	0x0800e858
 800166c:	0800e874 	.word	0x0800e874
 8001670:	0800e894 	.word	0x0800e894

08001674 <task_Motors>:

#define TOF_TRESHHOLD 40

void task_Motors(void * unsused)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	/* Motors test */
	Motor_Init(&hMotors, &htim1);
 800167c:	4903      	ldr	r1, [pc, #12]	@ (800168c <task_Motors+0x18>)
 800167e:	4804      	ldr	r0, [pc, #16]	@ (8001690 <task_Motors+0x1c>)
 8001680:	f001 f834 	bl	80026ec <Motor_Init>

	while (1)
	{
		//Motor_SetSpeed_percent(&hMotors, (hTof.distance_tof2 > 40 ? 0 : 80), (hTof.distance_tof1 > 40 ? 0 : 80));
		//DEBUG_PRINT("Mot1 speed: %d, Mot2 speed: %d\r\n", hMotors.current_speed1, hMotors.current_speed2);
		Motor_UpdateSpeed(&hMotors);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <task_Motors+0x1c>)
 8001686:	f001 f949 	bl	800291c <Motor_UpdateSpeed>
 800168a:	e7fb      	b.n	8001684 <task_Motors+0x10>
 800168c:	200003c8 	.word	0x200003c8
 8001690:	200002d4 	.word	0x200002d4

08001694 <task_Behaviour>:
	}
}

void task_Behaviour(void * unsused)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		DEBUG_PRINT("ToF1 distance: %d mm, ToF2 distance: %d mm\r\n", hTof.distance_tof1, hTof.distance_tof2);
 800169c:	4b32      	ldr	r3, [pc, #200]	@ (8001768 <task_Behaviour+0xd4>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a31      	ldr	r2, [pc, #196]	@ (8001768 <task_Behaviour+0xd4>)
 80016a2:	6952      	ldr	r2, [r2, #20]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4831      	ldr	r0, [pc, #196]	@ (800176c <task_Behaviour+0xd8>)
 80016a8:	f009 fb8a 	bl	800adc0 <iprintf>

		/* Motors test */
		if (hTof.distance_tof2 > TOF_TRESHHOLD && hTof.distance_tof1 > TOF_TRESHHOLD)
 80016ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <task_Behaviour+0xd4>)
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	2b28      	cmp	r3, #40	@ 0x28
 80016b2:	dd18      	ble.n	80016e6 <task_Behaviour+0x52>
 80016b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001768 <task_Behaviour+0xd4>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b28      	cmp	r3, #40	@ 0x28
 80016ba:	dd14      	ble.n	80016e6 <task_Behaviour+0x52>
		{
			hMotors.mode_mot1 = FORWARD_MODE;
 80016bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001770 <task_Behaviour+0xdc>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = FORWARD_MODE;
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <task_Behaviour+0xdc>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	705a      	strb	r2, [r3, #1]

			Motor_SetMode(&hMotors);
 80016c8:	4829      	ldr	r0, [pc, #164]	@ (8001770 <task_Behaviour+0xdc>)
 80016ca:	f001 f85f 	bl	800278c <Motor_SetMode>
			Motor_SetSpeed_percent(&hMotors, 40, 40);
 80016ce:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001774 <task_Behaviour+0xe0>
 80016d2:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001774 <task_Behaviour+0xe0>
 80016d6:	4826      	ldr	r0, [pc, #152]	@ (8001770 <task_Behaviour+0xdc>)
 80016d8:	f001 f8c6 	bl	8002868 <Motor_SetSpeed_percent>
			vTaskDelay(1000 / portTICK_PERIOD_MS);
 80016dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016e0:	f007 fcca 	bl	8009078 <vTaskDelay>
 80016e4:	e032      	b.n	800174c <task_Behaviour+0xb8>
		}
		else if (hTof.distance_tof2 > TOF_TRESHHOLD && hTof.distance_tof1 <= TOF_TRESHHOLD)
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <task_Behaviour+0xd4>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b28      	cmp	r3, #40	@ 0x28
 80016ec:	dd0a      	ble.n	8001704 <task_Behaviour+0x70>
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <task_Behaviour+0xd4>)
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b28      	cmp	r3, #40	@ 0x28
 80016f4:	dc06      	bgt.n	8001704 <task_Behaviour+0x70>
		{
			hMotors.mode_mot1 = FORWARD_MODE;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <task_Behaviour+0xdc>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = REVERSE_MODE;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <task_Behaviour+0xdc>)
 80016fe:	2202      	movs	r2, #2
 8001700:	705a      	strb	r2, [r3, #1]
 8001702:	e023      	b.n	800174c <task_Behaviour+0xb8>
		}
		else if (hTof.distance_tof2 <= TOF_TRESHHOLD && hTof.distance_tof1 > TOF_TRESHHOLD)
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <task_Behaviour+0xd4>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	2b28      	cmp	r3, #40	@ 0x28
 800170a:	dc0a      	bgt.n	8001722 <task_Behaviour+0x8e>
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <task_Behaviour+0xd4>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2b28      	cmp	r3, #40	@ 0x28
 8001712:	dd06      	ble.n	8001722 <task_Behaviour+0x8e>
		{
			hMotors.mode_mot1 = REVERSE_MODE;
 8001714:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <task_Behaviour+0xdc>)
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = FORWARD_MODE;
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <task_Behaviour+0xdc>)
 800171c:	2201      	movs	r2, #1
 800171e:	705a      	strb	r2, [r3, #1]
 8001720:	e014      	b.n	800174c <task_Behaviour+0xb8>
		}
		else if (hTof.distance_tof2 <= TOF_TRESHHOLD && hTof.distance_tof1 <= TOF_TRESHHOLD)
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <task_Behaviour+0xd4>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2b28      	cmp	r3, #40	@ 0x28
 8001728:	dc0a      	bgt.n	8001740 <task_Behaviour+0xac>
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <task_Behaviour+0xd4>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b28      	cmp	r3, #40	@ 0x28
 8001730:	dc06      	bgt.n	8001740 <task_Behaviour+0xac>
		{
			hMotors.mode_mot1 = REVERSE_MODE;
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <task_Behaviour+0xdc>)
 8001734:	2202      	movs	r2, #2
 8001736:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = REVERSE_MODE;
 8001738:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <task_Behaviour+0xdc>)
 800173a:	2202      	movs	r2, #2
 800173c:	705a      	strb	r2, [r3, #1]
 800173e:	e005      	b.n	800174c <task_Behaviour+0xb8>
		}
		else
		{
			hMotors.mode_mot1 = REVERSE_MODE;
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <task_Behaviour+0xdc>)
 8001742:	2202      	movs	r2, #2
 8001744:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = FORWARD_MODE;
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <task_Behaviour+0xdc>)
 8001748:	2201      	movs	r2, #1
 800174a:	705a      	strb	r2, [r3, #1]
		}

		Motor_SetMode(&hMotors);
 800174c:	4808      	ldr	r0, [pc, #32]	@ (8001770 <task_Behaviour+0xdc>)
 800174e:	f001 f81d 	bl	800278c <Motor_SetMode>
		Motor_SetSpeed_percent(&hMotors, 40, 40);
 8001752:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001774 <task_Behaviour+0xe0>
 8001756:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001774 <task_Behaviour+0xe0>
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <task_Behaviour+0xdc>)
 800175c:	f001 f884 	bl	8002868 <Motor_SetSpeed_percent>

		vTaskDelay(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f007 fc89 	bl	8009078 <vTaskDelay>
		DEBUG_PRINT("ToF1 distance: %d mm, ToF2 distance: %d mm\r\n", hTof.distance_tof1, hTof.distance_tof2);
 8001766:	e799      	b.n	800169c <task_Behaviour+0x8>
 8001768:	200002f4 	.word	0x200002f4
 800176c:	0800e8c8 	.word	0x0800e8c8
 8001770:	200002d4 	.word	0x200002d4
 8001774:	42200000 	.word	0x42200000

08001778 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800177e:	f001 f917 	bl	80029b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001782:	f000 f84d 	bl	8001820 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001786:	f7ff fe09 	bl	800139c <MX_GPIO_Init>
	MX_SPI1_Init();
 800178a:	f000 f8a9 	bl	80018e0 <MX_SPI1_Init>
	MX_TIM1_Init();
 800178e:	f000 fad3 	bl	8001d38 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001792:	f000 fb99 	bl	8001ec8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001796:	f000 fbed 	bl	8001f74 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 800179a:	f000 fd79 	bl	8002290 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800179e:	f000 fd2b 	bl	80021f8 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 80017a2:	f7ff fc47 	bl	8001034 <MX_ADC1_Init>
	MX_ADC2_Init();
 80017a6:	f7ff fcbd 	bl	8001124 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n*** Waking up V-NOM ***\r\n");
 80017aa:	4815      	ldr	r0, [pc, #84]	@ (8001800 <main+0x88>)
 80017ac:	f009 fb70 	bl	800ae90 <puts>
	//printf("%s", jumbo_logo_msg);

	/* ToF sensors Initialization */
	GP2Y0A41SK0F_Init(&hTof);
 80017b0:	4814      	ldr	r0, [pc, #80]	@ (8001804 <main+0x8c>)
 80017b2:	f000 fe9f 	bl	80024f4 <GP2Y0A41SK0F_Init>

	/* Motors task */
	xReturned = xTaskCreate(
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <main+0x90>)
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2301      	movs	r3, #1
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017c4:	4911      	ldr	r1, [pc, #68]	@ (800180c <main+0x94>)
 80017c6:	4812      	ldr	r0, [pc, #72]	@ (8001810 <main+0x98>)
 80017c8:	f007 fb0a 	bl	8008de0 <xTaskCreate>
 80017cc:	6078      	str	r0, [r7, #4]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) 0, // Parameter passed into the task.
			TASK_PRIORITY_MOTOR,// Priority at which the task is created.
			&xHandle1); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff2a 	bl	8001628 <errHandler_xTaskCreate>

	/* Motors task */
	xReturned = xTaskCreate(
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <main+0x9c>)
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	2301      	movs	r3, #1
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <main+0xa0>)
 80017e4:	480d      	ldr	r0, [pc, #52]	@ (800181c <main+0xa4>)
 80017e6:	f007 fafb 	bl	8008de0 <xTaskCreate>
 80017ea:	6078      	str	r0, [r7, #4]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) 0, // Parameter passed into the task.
			TASK_PRIORITY_MOTOR,// Priority at which the task is created.
			&xHandle2); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff1b 	bl	8001628 <errHandler_xTaskCreate>
	ADXL343_Init(&hADXL);*/

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80017f2:	f7ff fdb1 	bl	8001358 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80017f6:	f007 f9fd 	bl	8008bf4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80017fa:	bf00      	nop
 80017fc:	e7fd      	b.n	80017fa <main+0x82>
 80017fe:	bf00      	nop
 8001800:	0800e8f8 	.word	0x0800e8f8
 8001804:	200002f4 	.word	0x200002f4
 8001808:	2000030c 	.word	0x2000030c
 800180c:	0800e914 	.word	0x0800e914
 8001810:	08001675 	.word	0x08001675
 8001814:	20000310 	.word	0x20000310
 8001818:	0800e920 	.word	0x0800e920
 800181c:	08001695 	.word	0x08001695

08001820 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b094      	sub	sp, #80	@ 0x50
 8001824:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 0318 	add.w	r3, r7, #24
 800182a:	2238      	movs	r2, #56	@ 0x38
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f009 fc2e 	bl	800b090 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001842:	2000      	movs	r0, #0
 8001844:	f003 f8bc 	bl	80049c0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001852:	2340      	movs	r3, #64	@ 0x40
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800185a:	2302      	movs	r3, #2
 800185c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800185e:	2304      	movs	r3, #4
 8001860:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001862:	2355      	movs	r3, #85	@ 0x55
 8001864:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001866:	2302      	movs	r3, #2
 8001868:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800186a:	2302      	movs	r3, #2
 800186c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800186e:	2302      	movs	r3, #2
 8001870:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001872:	f107 0318 	add.w	r3, r7, #24
 8001876:	4618      	mov	r0, r3
 8001878:	f003 f956 	bl	8004b28 <HAL_RCC_OscConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001882:	f000 f827 	bl	80018d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001886:	230f      	movs	r3, #15
 8001888:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188a:	2303      	movs	r3, #3
 800188c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2104      	movs	r1, #4
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fc54 	bl	800514c <HAL_RCC_ClockConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80018aa:	f000 f813 	bl	80018d4 <Error_Handler>
	}
}
 80018ae:	bf00      	nop
 80018b0:	3750      	adds	r7, #80	@ 0x50
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c6:	d101      	bne.n	80018cc <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80018c8:	f001 f88a 	bl	80029e0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <Error_Handler+0x8>

080018e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <MX_SPI1_Init+0x74>)
 80018e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001958 <MX_SPI1_Init+0x78>)
 80018e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <MX_SPI1_Init+0x74>)
 80018ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018f2:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <MX_SPI1_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f8:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <MX_SPI1_Init+0x74>)
 80018fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_SPI1_Init+0x74>)
 800190e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001912:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001916:	2228      	movs	r2, #40	@ 0x28
 8001918:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_SPI1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_SPI1_Init+0x74>)
 800192e:	2207      	movs	r2, #7
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_SPI1_Init+0x74>)
 800193a:	2208      	movs	r2, #8
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001940:	f004 f83e 	bl	80059c0 <HAL_SPI_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800194a:	f7ff ffc3 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000314 	.word	0x20000314
 8001958:	40013000 	.word	0x40013000

0800195c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a17      	ldr	r2, [pc, #92]	@ (80019d8 <HAL_SPI_MspInit+0x7c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d128      	bne.n	80019d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <HAL_SPI_MspInit+0x80>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001982:	4a16      	ldr	r2, [pc, #88]	@ (80019dc <HAL_SPI_MspInit+0x80>)
 8001984:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001988:	6613      	str	r3, [r2, #96]	@ 0x60
 800198a:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <HAL_SPI_MspInit+0x80>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_SPI_MspInit+0x80>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	4a10      	ldr	r2, [pc, #64]	@ (80019dc <HAL_SPI_MspInit+0x80>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <HAL_SPI_MspInit+0x80>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019ae:	23e0      	movs	r3, #224	@ 0xe0
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019be:	2305      	movs	r3, #5
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019cc:	f002 fe5e 	bl	800468c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	@ 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40013000 	.word	0x40013000
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_MspInit+0x50>)
 80019e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ea:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <HAL_MspInit+0x50>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_MspInit+0x50>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_MspInit+0x50>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a02:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_MspInit+0x50>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_MspInit+0x50>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	210f      	movs	r1, #15
 8001a1a:	f06f 0001 	mvn.w	r0, #1
 8001a1e:	f002 fd4d 	bl	80044bc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a22:	f003 f871 	bl	8004b08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	@ 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001a44:	4b2d      	ldr	r3, [pc, #180]	@ (8001afc <HAL_InitTick+0xc8>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a48:	4a2c      	ldr	r2, [pc, #176]	@ (8001afc <HAL_InitTick+0xc8>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <HAL_InitTick+0xc8>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a5c:	f107 020c 	add.w	r2, r7, #12
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fd44 	bl	80054f4 <HAL_RCC_GetClockConfig>
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a6c:	f003 fd16 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8001a70:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a74:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <HAL_InitTick+0xcc>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0c9b      	lsrs	r3, r3, #18
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a80:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <HAL_InitTick+0xd0>)
 8001a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001a88:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <HAL_InitTick+0xd0>)
 8001a8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a90:	4a1c      	ldr	r2, [pc, #112]	@ (8001b04 <HAL_InitTick+0xd0>)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_InitTick+0xd0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_InitTick+0xd0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8001aa2:	4818      	ldr	r0, [pc, #96]	@ (8001b04 <HAL_InitTick+0xd0>)
 8001aa4:	f004 f837 	bl	8005b16 <HAL_TIM_Base_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001aae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d11b      	bne.n	8001aee <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001ab6:	4813      	ldr	r0, [pc, #76]	@ (8001b04 <HAL_InitTick+0xd0>)
 8001ab8:	f004 f884 	bl	8005bc4 <HAL_TIM_Base_Start_IT>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d111      	bne.n	8001aee <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aca:	201c      	movs	r0, #28
 8001acc:	f002 fd10 	bl	80044f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	d808      	bhi.n	8001ae8 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	201c      	movs	r0, #28
 8001adc:	f002 fcee 	bl	80044bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae0:	4a09      	ldr	r2, [pc, #36]	@ (8001b08 <HAL_InitTick+0xd4>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e002      	b.n	8001aee <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001aee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3730      	adds	r7, #48	@ 0x30
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	431bde83 	.word	0x431bde83
 8001b04:	20000378 	.word	0x20000378
 8001b08:	20000004 	.word	0x20000004

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <NMI_Handler+0x4>

08001b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <MemManage_Handler+0x4>

08001b24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b48:	4803      	ldr	r0, [pc, #12]	@ (8001b58 <ADC1_2_IRQHandler+0x14>)
 8001b4a:	f001 fc69 	bl	8003420 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001b4e:	4803      	ldr	r0, [pc, #12]	@ (8001b5c <ADC1_2_IRQHandler+0x18>)
 8001b50:	f001 fc66 	bl	8003420 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200001f4 	.word	0x200001f4
 8001b5c:	20000260 	.word	0x20000260

08001b60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b64:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <TIM2_IRQHandler+0x10>)
 8001b66:	f004 fb35 	bl	80061d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000378 	.word	0x20000378

08001b74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b78:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <USART2_IRQHandler+0x10>)
 8001b7a:	f005 fe6f 	bl	800785c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000540 	.word	0x20000540

08001b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_kill>:

int _kill(int pid, int sig)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba2:	f009 fb1d 	bl	800b1e0 <__errno>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2216      	movs	r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_exit>:

void _exit (int status)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffe7 	bl	8001b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bca:	bf00      	nop
 8001bcc:	e7fd      	b.n	8001bca <_exit+0x12>

08001bce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e00a      	b.n	8001bf6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be0:	f3af 8000 	nop.w
 8001be4:	4601      	mov	r1, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	60ba      	str	r2, [r7, #8]
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dbf0      	blt.n	8001be0 <_read+0x12>
  }

  return len;
 8001bfe:	687b      	ldr	r3, [r7, #4]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e009      	b.n	8001c2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	60ba      	str	r2, [r7, #8]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fc66 	bl	80014f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbf1      	blt.n	8001c1a <_write+0x12>
  }
  return len;
 8001c36:	687b      	ldr	r3, [r7, #4]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_close>:

int _close(int file)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c68:	605a      	str	r2, [r3, #4]
  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_isatty>:

int _isatty(int file)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	@ (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f009 fa82 	bl	800b1e0 <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20008000 	.word	0x20008000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	200003c4 	.word	0x200003c4
 8001d10:	20001478 	.word	0x20001478

08001d14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <SystemInit+0x20>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <SystemInit+0x20>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b09c      	sub	sp, #112	@ 0x70
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
 8001d68:	615a      	str	r2, [r3, #20]
 8001d6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2234      	movs	r2, #52	@ 0x34
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f009 f98c 	bl	800b090 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d78:	4b51      	ldr	r3, [pc, #324]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001d7a:	4a52      	ldr	r2, [pc, #328]	@ (8001ec4 <MX_TIM1_Init+0x18c>)
 8001d7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d7e:	4b50      	ldr	r3, [pc, #320]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001d8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d98:	4b49      	ldr	r3, [pc, #292]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9e:	4b48      	ldr	r3, [pc, #288]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001da4:	4846      	ldr	r0, [pc, #280]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001da6:	f003 feb6 	bl	8005b16 <HAL_TIM_Base_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001db0:	f7ff fd90 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	483f      	ldr	r0, [pc, #252]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001dc2:	f004 fc6b 	bl	800669c <HAL_TIM_ConfigClockSource>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001dcc:	f7ff fd82 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dd0:	483b      	ldr	r0, [pc, #236]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001dd2:	f003 ff61 	bl	8005c98 <HAL_TIM_PWM_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ddc:	f7ff fd7a 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001df0:	4619      	mov	r1, r3
 8001df2:	4833      	ldr	r0, [pc, #204]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001df4:	f005 fada 	bl	80073ac <HAL_TIMEx_MasterConfigSynchronization>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001dfe:	f7ff fd69 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e02:	2360      	movs	r3, #96	@ 0x60
 8001e04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e22:	2200      	movs	r2, #0
 8001e24:	4619      	mov	r1, r3
 8001e26:	4826      	ldr	r0, [pc, #152]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001e28:	f004 fb24 	bl	8006474 <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e32:	f7ff fd4f 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4820      	ldr	r0, [pc, #128]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001e40:	f004 fb18 	bl	8006474 <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001e4a:	f7ff fd43 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e52:	2208      	movs	r2, #8
 8001e54:	4619      	mov	r1, r3
 8001e56:	481a      	ldr	r0, [pc, #104]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001e58:	f004 fb0c 	bl	8006474 <HAL_TIM_PWM_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001e62:	f7ff fd37 	bl	80018d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e96:	2300      	movs	r3, #0
 8001e98:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001ea4:	f005 fb04 	bl	80074b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001eae:	f7ff fd11 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001eb2:	4803      	ldr	r0, [pc, #12]	@ (8001ec0 <MX_TIM1_Init+0x188>)
 8001eb4:	f000 f94a 	bl	800214c <HAL_TIM_MspPostInit>

}
 8001eb8:	bf00      	nop
 8001eba:	3770      	adds	r7, #112	@ 0x70
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200003c8 	.word	0x200003c8
 8001ec4:	40012c00 	.word	0x40012c00

08001ec8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08c      	sub	sp, #48	@ 0x30
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	2224      	movs	r2, #36	@ 0x24
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 f8da 	bl	800b090 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001edc:	463b      	mov	r3, r7
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ee6:	4b21      	ldr	r3, [pc, #132]	@ (8001f6c <MX_TIM3_Init+0xa4>)
 8001ee8:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <MX_TIM3_Init+0xa8>)
 8001eea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <MX_TIM3_Init+0xa4>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <MX_TIM3_Init+0xa4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <MX_TIM3_Init+0xa4>)
 8001efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001efe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <MX_TIM3_Init+0xa4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <MX_TIM3_Init+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f14:	2301      	movs	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f24:	2301      	movs	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	4619      	mov	r1, r3
 8001f36:	480d      	ldr	r0, [pc, #52]	@ (8001f6c <MX_TIM3_Init+0xa4>)
 8001f38:	f004 f8a6 	bl	8006088 <HAL_TIM_Encoder_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001f42:	f7ff fcc7 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <MX_TIM3_Init+0xa4>)
 8001f54:	f005 fa2a 	bl	80073ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001f5e:	f7ff fcb9 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3730      	adds	r7, #48	@ 0x30
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000414 	.word	0x20000414
 8001f70:	40000400 	.word	0x40000400

08001f74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	@ 0x30
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	2224      	movs	r2, #36	@ 0x24
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f009 f884 	bl	800b090 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f92:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <MX_TIM4_Init+0xa4>)
 8001f94:	4a21      	ldr	r2, [pc, #132]	@ (800201c <MX_TIM4_Init+0xa8>)
 8001f96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f98:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <MX_TIM4_Init+0xa4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <MX_TIM4_Init+0xa4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <MX_TIM4_Init+0xa4>)
 8001fa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001faa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <MX_TIM4_Init+0xa4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <MX_TIM4_Init+0xa4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480d      	ldr	r0, [pc, #52]	@ (8002018 <MX_TIM4_Init+0xa4>)
 8001fe4:	f004 f850 	bl	8006088 <HAL_TIM_Encoder_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001fee:	f7ff fc71 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	@ (8002018 <MX_TIM4_Init+0xa4>)
 8002000:	f005 f9d4 	bl	80073ac <HAL_TIMEx_MasterConfigSynchronization>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800200a:	f7ff fc63 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	3730      	adds	r7, #48	@ 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000460 	.word	0x20000460
 800201c:	40000800 	.word	0x40000800

08002020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <HAL_TIM_Base_MspInit+0x38>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10b      	bne.n	800204a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_TIM_Base_MspInit+0x3c>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002036:	4a09      	ldr	r2, [pc, #36]	@ (800205c <HAL_TIM_Base_MspInit+0x3c>)
 8002038:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800203c:	6613      	str	r3, [r2, #96]	@ 0x60
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_TIM_Base_MspInit+0x3c>)
 8002040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	@ 0x30
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <HAL_TIM_Encoder_MspInit+0xdc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d128      	bne.n	80020d4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002082:	4b2f      	ldr	r3, [pc, #188]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	4a2e      	ldr	r2, [pc, #184]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6593      	str	r3, [r2, #88]	@ 0x58
 800208e:	4b2c      	ldr	r3, [pc, #176]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a6:	4b26      	ldr	r3, [pc, #152]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020b2:	2330      	movs	r3, #48	@ 0x30
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020c2:	2302      	movs	r3, #2
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	481d      	ldr	r0, [pc, #116]	@ (8002144 <HAL_TIM_Encoder_MspInit+0xe4>)
 80020ce:	f002 fadd 	bl	800468c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020d2:	e02e      	b.n	8002132 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002148 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d129      	bne.n	8002132 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020de:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	4a17      	ldr	r2, [pc, #92]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002102:	4b0f      	ldr	r3, [pc, #60]	@ (8002140 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800210e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002120:	230a      	movs	r3, #10
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	4619      	mov	r1, r3
 800212a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800212e:	f002 faad 	bl	800468c <HAL_GPIO_Init>
}
 8002132:	bf00      	nop
 8002134:	3730      	adds	r7, #48	@ 0x30
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40000400 	.word	0x40000400
 8002140:	40021000 	.word	0x40021000
 8002144:	48000400 	.word	0x48000400
 8002148:	40000800 	.word	0x40000800

0800214c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a20      	ldr	r2, [pc, #128]	@ (80021ec <HAL_TIM_MspPostInit+0xa0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d13a      	bne.n	80021e4 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216e:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <HAL_TIM_MspPostInit+0xa4>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	4a1f      	ldr	r2, [pc, #124]	@ (80021f0 <HAL_TIM_MspPostInit+0xa4>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217a:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_TIM_MspPostInit+0xa4>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <HAL_TIM_MspPostInit+0xa4>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	4a19      	ldr	r2, [pc, #100]	@ (80021f0 <HAL_TIM_MspPostInit+0xa4>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002192:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <HAL_TIM_MspPostInit+0xa4>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800219e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021b0:	2306      	movs	r3, #6
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	480e      	ldr	r0, [pc, #56]	@ (80021f4 <HAL_TIM_MspPostInit+0xa8>)
 80021bc:	f002 fa66 	bl	800468c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80021c0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021d2:	2306      	movs	r3, #6
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e0:	f002 fa54 	bl	800468c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021e4:	bf00      	nop
 80021e6:	3728      	adds	r7, #40	@ 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40012c00 	.word	0x40012c00
 80021f0:	40021000 	.word	0x40021000
 80021f4:	48000400 	.word	0x48000400

080021f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021fc:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 80021fe:	4a23      	ldr	r2, [pc, #140]	@ (800228c <MX_USART1_UART_Init+0x94>)
 8002200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002202:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 8002204:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800220a:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002210:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002216:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b1a      	ldr	r3, [pc, #104]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223a:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002240:	4811      	ldr	r0, [pc, #68]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 8002242:	f005 fa2c 	bl	800769e <HAL_UART_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800224c:	f7ff fb42 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002250:	2100      	movs	r1, #0
 8002252:	480d      	ldr	r0, [pc, #52]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 8002254:	f006 fbeb 	bl	8008a2e <HAL_UARTEx_SetTxFifoThreshold>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800225e:	f7ff fb39 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002262:	2100      	movs	r1, #0
 8002264:	4808      	ldr	r0, [pc, #32]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 8002266:	f006 fc20 	bl	8008aaa <HAL_UARTEx_SetRxFifoThreshold>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002270:	f7ff fb30 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	@ (8002288 <MX_USART1_UART_Init+0x90>)
 8002276:	f006 fba1 	bl	80089bc <HAL_UARTEx_DisableFifoMode>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002280:	f7ff fb28 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200004ac 	.word	0x200004ac
 800228c:	40013800 	.word	0x40013800

08002290 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002294:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 8002296:	4a23      	ldr	r2, [pc, #140]	@ (8002324 <MX_USART2_UART_Init+0x94>)
 8002298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800229a:	4b21      	ldr	r3, [pc, #132]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 800229c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022b6:	2204      	movs	r2, #4
 80022b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ba:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c0:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022c6:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022cc:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d2:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d8:	4811      	ldr	r0, [pc, #68]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022da:	f005 f9e0 	bl	800769e <HAL_UART_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80022e4:	f7ff faf6 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022e8:	2100      	movs	r1, #0
 80022ea:	480d      	ldr	r0, [pc, #52]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022ec:	f006 fb9f 	bl	8008a2e <HAL_UARTEx_SetTxFifoThreshold>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80022f6:	f7ff faed 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022fa:	2100      	movs	r1, #0
 80022fc:	4808      	ldr	r0, [pc, #32]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 80022fe:	f006 fbd4 	bl	8008aaa <HAL_UARTEx_SetRxFifoThreshold>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002308:	f7ff fae4 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800230c:	4804      	ldr	r0, [pc, #16]	@ (8002320 <MX_USART2_UART_Init+0x90>)
 800230e:	f006 fb55 	bl	80089bc <HAL_UARTEx_DisableFifoMode>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002318:	f7ff fadc 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000540 	.word	0x20000540
 8002324:	40004400 	.word	0x40004400

08002328 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b09e      	sub	sp, #120	@ 0x78
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002340:	f107 0320 	add.w	r3, r7, #32
 8002344:	2244      	movs	r2, #68	@ 0x44
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f008 fea1 	bl	800b090 <memset>
  if(uartHandle->Instance==USART1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a4f      	ldr	r2, [pc, #316]	@ (8002490 <HAL_UART_MspInit+0x168>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d136      	bne.n	80023c6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002358:	2301      	movs	r3, #1
 800235a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002360:	f107 0320 	add.w	r3, r7, #32
 8002364:	4618      	mov	r0, r3
 8002366:	f003 f93b 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002370:	f7ff fab0 	bl	80018d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002374:	4b47      	ldr	r3, [pc, #284]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 8002376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002378:	4a46      	ldr	r2, [pc, #280]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 800237a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800237e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002380:	4b44      	ldr	r3, [pc, #272]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 8002382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 800238e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002390:	4a40      	ldr	r2, [pc, #256]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002398:	4b3e      	ldr	r3, [pc, #248]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 800239a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80023a4:	23c0      	movs	r3, #192	@ 0xc0
 80023a6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b4:	2307      	movs	r3, #7
 80023b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023bc:	4619      	mov	r1, r3
 80023be:	4836      	ldr	r0, [pc, #216]	@ (8002498 <HAL_UART_MspInit+0x170>)
 80023c0:	f002 f964 	bl	800468c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023c4:	e060      	b.n	8002488 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a34      	ldr	r2, [pc, #208]	@ (800249c <HAL_UART_MspInit+0x174>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d15b      	bne.n	8002488 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d8:	f107 0320 	add.w	r3, r7, #32
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 f8ff 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_UART_MspInit+0xc4>
      Error_Handler();
 80023e8:	f7ff fa74 	bl	80018d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ec:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	4a28      	ldr	r2, [pc, #160]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 80023f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f8:	4b26      	ldr	r3, [pc, #152]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 8002406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002408:	4a22      	ldr	r2, [pc, #136]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002410:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241c:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002420:	4a1c      	ldr	r2, [pc, #112]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 8002422:	f043 0302 	orr.w	r3, r3, #2
 8002426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002428:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 800242a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8002434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002438:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002446:	2307      	movs	r3, #7
 8002448:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800244e:	4619      	mov	r1, r3
 8002450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002454:	f002 f91a 	bl	800468c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 8002458:	2308      	movs	r3, #8
 800245a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002468:	2307      	movs	r3, #7
 800246a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002470:	4619      	mov	r1, r3
 8002472:	4809      	ldr	r0, [pc, #36]	@ (8002498 <HAL_UART_MspInit+0x170>)
 8002474:	f002 f90a 	bl	800468c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	2105      	movs	r1, #5
 800247c:	2026      	movs	r0, #38	@ 0x26
 800247e:	f002 f81d 	bl	80044bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002482:	2026      	movs	r0, #38	@ 0x26
 8002484:	f002 f834 	bl	80044f0 <HAL_NVIC_EnableIRQ>
}
 8002488:	bf00      	nop
 800248a:	3778      	adds	r7, #120	@ 0x78
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40013800 	.word	0x40013800
 8002494:	40021000 	.word	0x40021000
 8002498:	48000400 	.word	0x48000400
 800249c:	40004400 	.word	0x40004400

080024a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024a0:	480d      	ldr	r0, [pc, #52]	@ (80024d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a4:	f7ff fc36 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <LoopForever+0x6>)
  ldr r1, =_edata
 80024aa:	490d      	ldr	r1, [pc, #52]	@ (80024e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <LoopForever+0xe>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024be:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024c0:	4c0a      	ldr	r4, [pc, #40]	@ (80024ec <LoopForever+0x16>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80024ce:	f008 fe8d 	bl	800b1ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024d2:	f7ff f951 	bl	8001778 <main>

080024d6 <LoopForever>:

LoopForever:
    b LoopForever
 80024d6:	e7fe      	b.n	80024d6 <LoopForever>
  ldr   r0, =_estack
 80024d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80024e4:	0800edf8 	.word	0x0800edf8
  ldr r2, =_sbss
 80024e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80024ec:	20001478 	.word	0x20001478

080024f0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <COMP1_2_3_IRQHandler>
	...

080024f4 <GP2Y0A41SK0F_Init>:

/**
 * @brief Initialize the GP2Y0A41SK0F sensors.
 * @param htof Pointer to the GP2Y0A41SK0F handle structure.
 */
void GP2Y0A41SK0F_Init(h_GP2Y0A41SK0F_t *htof) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
    // Assign ADC handles
    htof->hadc1 = &hadc1; // For ToF1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002538 <GP2Y0A41SK0F_Init+0x44>)
 8002500:	601a      	str	r2, [r3, #0]
    htof->hadc2 = &hadc2; // For ToF2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a0d      	ldr	r2, [pc, #52]	@ (800253c <GP2Y0A41SK0F_Init+0x48>)
 8002506:	605a      	str	r2, [r3, #4]

    // Initialize ADC1
    if (HAL_ADC_Init(htof->hadc1) != HAL_OK) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fcc5 	bl	8002e9c <HAL_ADC_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <GP2Y0A41SK0F_Init+0x28>
        Error_Handler();
 8002518:	f7ff f9dc 	bl	80018d4 <Error_Handler>
    }

    // Initialize ADC2
    if (HAL_ADC_Init(htof->hadc2) != HAL_OK) {
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fcbb 	bl	8002e9c <HAL_ADC_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <GP2Y0A41SK0F_Init+0x3c>
        Error_Handler();
 800252c:	f7ff f9d2 	bl	80018d4 <Error_Handler>
    }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200001f4 	.word	0x200001f4
 800253c:	20000260 	.word	0x20000260

08002540 <GP2Y0A41SK0F_Start_Interrupt>:

/**
 * @brief Start ADC conversion using interrupts.
 * @param htof Pointer to the GP2Y0A41SK0F handle structure.
 */
void GP2Y0A41SK0F_Start_Interrupt(h_GP2Y0A41SK0F_t *htof) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Start ADC1 in interrupt mode
    status = HAL_ADC_Start_IT(htof->hadc1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fe29 	bl	80031a4 <HAL_ADC_Start_IT>
 8002552:	4603      	mov	r3, r0
 8002554:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <GP2Y0A41SK0F_Start_Interrupt+0x2a>
        printf("ADC1 Interrupt Start Error: %d\n", status);
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	4619      	mov	r1, r3
 8002560:	480c      	ldr	r0, [pc, #48]	@ (8002594 <GP2Y0A41SK0F_Start_Interrupt+0x54>)
 8002562:	f008 fc2d 	bl	800adc0 <iprintf>
        Error_Handler();
 8002566:	f7ff f9b5 	bl	80018d4 <Error_Handler>
    }

    // Start ADC2 in interrupt mode
    status = HAL_ADC_Start_IT(htof->hadc2);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fe18 	bl	80031a4 <HAL_ADC_Start_IT>
 8002574:	4603      	mov	r3, r0
 8002576:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <GP2Y0A41SK0F_Start_Interrupt+0x4c>
        printf("ADC2 Interrupt Start Error: %d\n", status);
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	4619      	mov	r1, r3
 8002582:	4805      	ldr	r0, [pc, #20]	@ (8002598 <GP2Y0A41SK0F_Start_Interrupt+0x58>)
 8002584:	f008 fc1c 	bl	800adc0 <iprintf>
        Error_Handler();
 8002588:	f7ff f9a4 	bl	80018d4 <Error_Handler>
    }
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	0800e930 	.word	0x0800e930
 8002598:	0800e950 	.word	0x0800e950
 800259c:	00000000 	.word	0x00000000

080025a0 <GP2Y0A41SK0F_get_distance1>:
}

/**
 * @brief Compute distances for ToF1 based on ADC readings.
 */
void GP2Y0A41SK0F_get_distance1(h_GP2Y0A41SK0F_t *htof) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
    const float a = 120;
 80025a8:	4b23      	ldr	r3, [pc, #140]	@ (8002638 <GP2Y0A41SK0F_get_distance1+0x98>)
 80025aa:	617b      	str	r3, [r7, #20]
    const float b = 0.03;
 80025ac:	4b23      	ldr	r3, [pc, #140]	@ (800263c <GP2Y0A41SK0F_get_distance1+0x9c>)
 80025ae:	613b      	str	r3, [r7, #16]

    float Vo1 = (GP2Y0A41SK0F_ADC_VCC * htof->adc_val_tof1) / GP2Y0A41SK0F_ADC_MAX_VALUE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ffcd 	bl	8000554 <__aeabi_ui2d>
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <GP2Y0A41SK0F_get_distance1+0xa0>)
 80025c0:	f7fe f842 	bl	8000648 <__aeabi_dmul>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	a318      	add	r3, pc, #96	@ (adr r3, 8002630 <GP2Y0A41SK0F_get_distance1+0x90>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fe f963 	bl	800089c <__aeabi_ddiv>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe fb2b 	bl	8000c38 <__aeabi_d2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	60fb      	str	r3, [r7, #12]
    if (Vo1 > b) {
 80025e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80025ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80025ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	dd10      	ble.n	800261a <GP2Y0A41SK0F_get_distance1+0x7a>
        htof->distance_tof1 = (int)(a / (Vo1 - b));
 80025f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80025fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002604:	edd7 6a05 	vldr	s13, [r7, #20]
 8002608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002610:	ee17 2a90 	vmov	r2, s15
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]
    } else {
        htof->distance_tof1 = -1; // Invalid distance
    }
}
 8002618:	e003      	b.n	8002622 <GP2Y0A41SK0F_get_distance1+0x82>
        htof->distance_tof1 = -1; // Invalid distance
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002620:	611a      	str	r2, [r3, #16]
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	f3af 8000 	nop.w
 8002630:	00000000 	.word	0x00000000
 8002634:	40affe00 	.word	0x40affe00
 8002638:	42f00000 	.word	0x42f00000
 800263c:	3cf5c28f 	.word	0x3cf5c28f
 8002640:	40140000 	.word	0x40140000
 8002644:	00000000 	.word	0x00000000

08002648 <GP2Y0A41SK0F_get_distance2>:

/**
 * @brief Compute distances for ToF2 based on ADC readings.
 */
void GP2Y0A41SK0F_get_distance2(h_GP2Y0A41SK0F_t *htof) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    const float a = 120;
 8002650:	4b23      	ldr	r3, [pc, #140]	@ (80026e0 <GP2Y0A41SK0F_get_distance2+0x98>)
 8002652:	617b      	str	r3, [r7, #20]
    const float b = 0.03;
 8002654:	4b23      	ldr	r3, [pc, #140]	@ (80026e4 <GP2Y0A41SK0F_get_distance2+0x9c>)
 8002656:	613b      	str	r3, [r7, #16]

    float Vo2 = (GP2Y0A41SK0F_ADC_VCC * htof->adc_val_tof2) / GP2Y0A41SK0F_ADC_MAX_VALUE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff79 	bl	8000554 <__aeabi_ui2d>
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	4b20      	ldr	r3, [pc, #128]	@ (80026e8 <GP2Y0A41SK0F_get_distance2+0xa0>)
 8002668:	f7fd ffee 	bl	8000648 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	a318      	add	r3, pc, #96	@ (adr r3, 80026d8 <GP2Y0A41SK0F_get_distance2+0x90>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fe f90f 	bl	800089c <__aeabi_ddiv>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f7fe fad7 	bl	8000c38 <__aeabi_d2f>
 800268a:	4603      	mov	r3, r0
 800268c:	60fb      	str	r3, [r7, #12]
    if (Vo2 > b) {
 800268e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002692:	edd7 7a04 	vldr	s15, [r7, #16]
 8002696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269e:	dd10      	ble.n	80026c2 <GP2Y0A41SK0F_get_distance2+0x7a>
        htof->distance_tof2 = (int)(a / (Vo2 - b));
 80026a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80026a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026ac:	edd7 6a05 	vldr	s13, [r7, #20]
 80026b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b8:	ee17 2a90 	vmov	r2, s15
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	615a      	str	r2, [r3, #20]
    } else {
        htof->distance_tof2 = -1; // Invalid distance
    }
}
 80026c0:	e003      	b.n	80026ca <GP2Y0A41SK0F_get_distance2+0x82>
        htof->distance_tof2 = -1; // Invalid distance
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026c8:	615a      	str	r2, [r3, #20]
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	f3af 8000 	nop.w
 80026d8:	00000000 	.word	0x00000000
 80026dc:	40affe00 	.word	0x40affe00
 80026e0:	42f00000 	.word	0x42f00000
 80026e4:	3cf5c28f 	.word	0x3cf5c28f
 80026e8:	40140000 	.word	0x40140000

080026ec <Motor_Init>:
/**
 * @brief Initialize the motors.
 * @param hMotors Pointer to the motor handle structure.
 * @param htim Pointer to the timer handle used for PWM control.
 */
void Motor_Init(h_Motor_t * hMotors, TIM_HandleTypeDef * htim) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
	// Allows to get direct parameters from the timer used
	hMotors->htim = htim;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	61da      	str	r2, [r3, #28]
	hMotors->speed_increase_rate1 = 10;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	220a      	movs	r2, #10
 8002700:	615a      	str	r2, [r3, #20]
	hMotors->speed_increase_rate2 = 10;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	220a      	movs	r2, #10
 8002706:	619a      	str	r2, [r3, #24]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002708:	4b1f      	ldr	r3, [pc, #124]	@ (8002788 <Motor_Init+0x9c>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270c:	4a1e      	ldr	r2, [pc, #120]	@ (8002788 <Motor_Init+0x9c>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002714:	4b1c      	ldr	r3, [pc, #112]	@ (8002788 <Motor_Init+0x9c>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <Motor_Init+0x9c>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002724:	4a18      	ldr	r2, [pc, #96]	@ (8002788 <Motor_Init+0x9c>)
 8002726:	f043 0302 	orr.w	r3, r3, #2
 800272a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800272c:	4b16      	ldr	r3, [pc, #88]	@ (8002788 <Motor_Init+0x9c>)
 800272e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]

	MX_TIM1_Init();
 8002738:	f7ff fafe 	bl	8001d38 <MX_TIM1_Init>
	//MX_TIM2_Init();

	HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fb0a 	bl	8005d5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_2);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2104      	movs	r1, #4
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fb04 	bl	8005d5c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fd14 	bl	8007188 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_2);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2104      	movs	r1, #4
 8002766:	4618      	mov	r0, r3
 8002768:	f004 fd0e 	bl	8007188 <HAL_TIMEx_PWMN_Start>

	hMotors->mode_mot1 = STANDBY_MODE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
	hMotors->mode_mot2 = STANDBY_MODE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	705a      	strb	r2, [r3, #1]
	Motor_SetMode(hMotors);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f807 	bl	800278c <Motor_SetMode>
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000

0800278c <Motor_SetMode>:
/**
 * @brief Set the operating mode of the motors.
 * @param hMotors Pointer to the motor handle structure.
 */
void Motor_SetMode(h_Motor_t * hMotors)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	switch (hMotors->mode_mot1) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d002      	beq.n	80027a2 <Motor_SetMode+0x16>
 800279c:	2b02      	cmp	r3, #2
 800279e:	d00d      	beq.n	80027bc <Motor_SetMode+0x30>
 80027a0:	e019      	b.n	80027d6 <Motor_SetMode+0x4a>
	case FORWARD_MODE:
		DEBUG_PRINT("Mot1: FORWARD_MODE\r\n");
		HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_1);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fad7 	bl	8005d5c <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f004 fd9b 	bl	80072f0 <HAL_TIMEx_PWMN_Stop>
		break;
 80027ba:	e01e      	b.n	80027fa <Motor_SetMode+0x6e>

	case REVERSE_MODE:
		DEBUG_PRINT("Mot1: REVERSE_MODE\r\n");
		HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_1);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 fce0 	bl	8007188 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 fbc4 	bl	8005f5c <HAL_TIM_PWM_Stop>
		break;
 80027d4:	e011      	b.n	80027fa <Motor_SetMode+0x6e>

	case STANDBY_MODE:
	default:
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f004 fd87 	bl	80072f0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f003 fbb7 	bl	8005f5c <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_1, 0);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2200      	movs	r2, #0
 80027f6:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 80027f8:	bf00      	nop
	}

	switch (hMotors->mode_mot2) {
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d002      	beq.n	8002808 <Motor_SetMode+0x7c>
 8002802:	2b02      	cmp	r3, #2
 8002804:	d00d      	beq.n	8002822 <Motor_SetMode+0x96>
 8002806:	e019      	b.n	800283c <Motor_SetMode+0xb0>
	case FORWARD_MODE:
		DEBUG_PRINT("Mot2: FORWARD_MODE\r\n");
		HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2104      	movs	r1, #4
 800280e:	4618      	mov	r0, r3
 8002810:	f003 faa4 	bl	8005d5c <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2104      	movs	r1, #4
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fd68 	bl	80072f0 <HAL_TIMEx_PWMN_Stop>
		break;
 8002820:	e01e      	b.n	8002860 <Motor_SetMode+0xd4>

	case REVERSE_MODE:
		DEBUG_PRINT("Mot2: REVERSE_MODE\r\n");
		HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_2);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	2104      	movs	r1, #4
 8002828:	4618      	mov	r0, r3
 800282a:	f004 fcad 	bl	8007188 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_2);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	2104      	movs	r1, #4
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fb91 	bl	8005f5c <HAL_TIM_PWM_Stop>
		break;
 800283a:	e011      	b.n	8002860 <Motor_SetMode+0xd4>

	case STANDBY_MODE:
	default:
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_2);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	2104      	movs	r1, #4
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fd54 	bl	80072f0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2104      	movs	r1, #4
 800284e:	4618      	mov	r0, r3
 8002850:	f003 fb84 	bl	8005f5c <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_2, 0);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 800285e:	bf00      	nop
	}
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <Motor_SetSpeed_percent>:
 * @brief Set the speed of the motors as a percentage of maximum speed.
 * @param hMotor Pointer to the motor handle structure.
 * @param percent1 Speed percentage for motor 1 (0.0 to 100.0).
 * @param percent2 Speed percentage for motor 2 (0.0 to 100.0).
 */
void Motor_SetSpeed_percent(h_Motor_t * hMotor, float percent1, float percent2) {
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	ed87 0a02 	vstr	s0, [r7, #8]
 8002874:	edc7 0a01 	vstr	s1, [r7, #4]
	hMotor->speed1 = (int)(MOTOR1_REV_DIFF * hMotor->htim->Init.Period * percent1/100.0);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fe68 	bl	8000554 <__aeabi_ui2d>
 8002884:	a323      	add	r3, pc, #140	@ (adr r3, 8002914 <Motor_SetSpeed_percent+0xac>)
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f7fd fedd 	bl	8000648 <__aeabi_dmul>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4614      	mov	r4, r2
 8002894:	461d      	mov	r5, r3
 8002896:	68b8      	ldr	r0, [r7, #8]
 8002898:	f7fd fe7e 	bl	8000598 <__aeabi_f2d>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4620      	mov	r0, r4
 80028a2:	4629      	mov	r1, r5
 80028a4:	f7fd fed0 	bl	8000648 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	4b16      	ldr	r3, [pc, #88]	@ (8002910 <Motor_SetSpeed_percent+0xa8>)
 80028b6:	f7fd fff1 	bl	800089c <__aeabi_ddiv>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f7fe f971 	bl	8000ba8 <__aeabi_d2iz>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
	hMotor->speed2 = (int)(hMotor->htim->Init.Period * percent2/100.0);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028da:	edd7 7a01 	vldr	s15, [r7, #4]
 80028de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e2:	ee17 0a90 	vmov	r0, s15
 80028e6:	f7fd fe57 	bl	8000598 <__aeabi_f2d>
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <Motor_SetSpeed_percent+0xa8>)
 80028f0:	f7fd ffd4 	bl	800089c <__aeabi_ddiv>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f7fe f954 	bl	8000ba8 <__aeabi_d2iz>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	609a      	str	r2, [r3, #8]
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bdb0      	pop	{r4, r5, r7, pc}
 800290e:	bf00      	nop
 8002910:	40590000 	.word	0x40590000
 8002914:	33333333 	.word	0x33333333
 8002918:	3feb3333 	.word	0x3feb3333

0800291c <Motor_UpdateSpeed>:

/**
 * @brief Update motor speeds gradually to achieve smoother transitions.
 * @param hMotor Pointer to the motor handle structure.
 */
void Motor_UpdateSpeed(h_Motor_t * hMotors) {
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	// Increase speed progressively
	if (hMotors->speed1 > hMotors->current_speed1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	429a      	cmp	r2, r3
 800292e:	dd06      	ble.n	800293e <Motor_UpdateSpeed+0x22>
		hMotors->current_speed1 += hMotors->speed_increase_rate1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	441a      	add	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60da      	str	r2, [r3, #12]
	if (hMotors->speed2 > hMotors->current_speed2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	429a      	cmp	r2, r3
 8002948:	dd06      	ble.n	8002958 <Motor_UpdateSpeed+0x3c>
		hMotors->current_speed2 += hMotors->speed_increase_rate2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	441a      	add	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	611a      	str	r2, [r3, #16]

	// Decrease speed progressively
	if (hMotors->speed1 < hMotors->current_speed1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	da06      	bge.n	8002972 <Motor_UpdateSpeed+0x56>
		hMotors->current_speed1 -= hMotors->speed_increase_rate1;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	1ad2      	subs	r2, r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60da      	str	r2, [r3, #12]
	if (hMotors->speed2 < hMotors->current_speed2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	429a      	cmp	r2, r3
 800297c:	da06      	bge.n	800298c <Motor_UpdateSpeed+0x70>
		hMotors->current_speed2 -= hMotors->speed_increase_rate2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	1ad2      	subs	r2, r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	611a      	str	r2, [r3, #16]

	__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_1, hMotors->current_speed1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_2, hMotors->current_speed2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ba:	2003      	movs	r0, #3
 80029bc:	f001 fd73 	bl	80044a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029c0:	200f      	movs	r0, #15
 80029c2:	f7ff f837 	bl	8001a34 <HAL_InitTick>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	71fb      	strb	r3, [r7, #7]
 80029d0:	e001      	b.n	80029d6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029d2:	f7ff f805 	bl	80019e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029d6:	79fb      	ldrb	r3, [r7, #7]

}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <HAL_IncTick+0x1c>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_IncTick+0x20>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a03      	ldr	r2, [pc, #12]	@ (80029fc <HAL_IncTick+0x1c>)
 80029f0:	6013      	str	r3, [r2, #0]
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	200005d4 	.word	0x200005d4
 8002a00:	20000008 	.word	0x20000008

08002a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return uwTick;
 8002a08:	4b03      	ldr	r3, [pc, #12]	@ (8002a18 <HAL_GetTick+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	200005d4 	.word	0x200005d4

08002a1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	609a      	str	r2, [r3, #8]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3360      	adds	r3, #96	@ 0x60
 8002a96:	461a      	mov	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <LL_ADC_SetOffset+0x44>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002abc:	bf00      	nop
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	03fff000 	.word	0x03fff000

08002acc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3360      	adds	r3, #96	@ 0x60
 8002ada:	461a      	mov	r2, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3360      	adds	r3, #96	@ 0x60
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b087      	sub	sp, #28
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3360      	adds	r3, #96	@ 0x60
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3360      	adds	r3, #96	@ 0x60
 8002b74:	461a      	mov	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	615a      	str	r2, [r3, #20]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b087      	sub	sp, #28
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3330      	adds	r3, #48	@ 0x30
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	4413      	add	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	211f      	movs	r1, #31
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	401a      	ands	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	f003 011f 	and.w	r1, r3, #31
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3314      	adds	r3, #20
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	0e5b      	lsrs	r3, r3, #25
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	4413      	add	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	0d1b      	lsrs	r3, r3, #20
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	2107      	movs	r1, #7
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	401a      	ands	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	0d1b      	lsrs	r3, r3, #20
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0318 	and.w	r3, r3, #24
 8002cde:	4908      	ldr	r1, [pc, #32]	@ (8002d00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ce0:	40d9      	lsrs	r1, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	400b      	ands	r3, r1
 8002ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cea:	431a      	orrs	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	0007ffff 	.word	0x0007ffff

08002d04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 031f 	and.w	r3, r3, #31
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6093      	str	r3, [r2, #8]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d74:	d101      	bne.n	8002d7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dc4:	d101      	bne.n	8002dca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002de8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <LL_ADC_IsEnabled+0x18>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <LL_ADC_IsEnabled+0x1a>
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d101      	bne.n	8002e66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d101      	bne.n	8002e8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b089      	sub	sp, #36	@ 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e167      	b.n	8003186 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7fe f993 	bl	80011f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff3f 	bl	8002d60 <LL_ADC_IsDeepPowerDownEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d004      	beq.n	8002ef2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff25 	bl	8002d3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff5a 	bl	8002db0 <LL_ADC_IsInternalRegulatorEnabled>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d115      	bne.n	8002f2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff3e 	bl	8002d88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f0c:	4ba0      	ldr	r3, [pc, #640]	@ (8003190 <HAL_ADC_Init+0x2f4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	4aa0      	ldr	r2, [pc, #640]	@ (8003194 <HAL_ADC_Init+0x2f8>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f20:	e002      	b.n	8002f28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f9      	bne.n	8002f22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ff3c 	bl	8002db0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10d      	bne.n	8002f5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	f043 0210 	orr.w	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff75 	bl	8002e4e <LL_ADC_REG_IsConversionOngoing>
 8002f64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 8100 	bne.w	8003174 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 80fc 	bne.w	8003174 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f84:	f043 0202 	orr.w	r2, r3, #2
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff35 	bl	8002e00 <LL_ADC_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d111      	bne.n	8002fc0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fa0:	f7ff ff2e 	bl	8002e00 <LL_ADC_IsEnabled>
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	487c      	ldr	r0, [pc, #496]	@ (8003198 <HAL_ADC_Init+0x2fc>)
 8002fa8:	f7ff ff2a 	bl	8002e00 <LL_ADC_IsEnabled>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4323      	orrs	r3, r4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4878      	ldr	r0, [pc, #480]	@ (800319c <HAL_ADC_Init+0x300>)
 8002fbc:	f7ff fd2e 	bl	8002a1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7f5b      	ldrb	r3, [r3, #29]
 8002fc4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fd0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fd6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fde:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d106      	bne.n	8002ffc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	045b      	lsls	r3, r3, #17
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	4b60      	ldr	r3, [pc, #384]	@ (80031a0 <HAL_ADC_Init+0x304>)
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	430b      	orrs	r3, r1
 800302a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff14 	bl	8002e74 <LL_ADC_INJ_IsConversionOngoing>
 800304c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d16d      	bne.n	8003130 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d16a      	bne.n	8003130 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800305e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003066:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003076:	f023 0302 	bic.w	r3, r3, #2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	430b      	orrs	r3, r1
 8003082:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d017      	beq.n	80030bc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800309a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6911      	ldr	r1, [r2, #16]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030ba:	e013      	b.n	80030e4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d118      	bne.n	8003120 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003110:	430a      	orrs	r2, r1
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e007      	b.n	8003130 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10c      	bne.n	8003152 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f023 010f 	bic.w	r1, r3, #15
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	1e5a      	subs	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003150:	e007      	b.n	8003162 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 020f 	bic.w	r2, r2, #15
 8003160:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003172:	e007      	b.n	8003184 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	f043 0210 	orr.w	r2, r3, #16
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003184:	7ffb      	ldrb	r3, [r7, #31]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	@ 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	bf00      	nop
 8003190:	20000000 	.word	0x20000000
 8003194:	053e2d63 	.word	0x053e2d63
 8003198:	50000100 	.word	0x50000100
 800319c:	50000300 	.word	0x50000300
 80031a0:	fff04007 	.word	0xfff04007

080031a4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031ac:	4893      	ldr	r0, [pc, #588]	@ (80033fc <HAL_ADC_Start_IT+0x258>)
 80031ae:	f7ff fda9 	bl	8002d04 <LL_ADC_GetMultimode>
 80031b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fe48 	bl	8002e4e <LL_ADC_REG_IsConversionOngoing>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 8113 	bne.w	80033ec <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_ADC_Start_IT+0x30>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e10e      	b.n	80033f2 <HAL_ADC_Start_IT+0x24e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 ff33 	bl	8004048 <ADC_Enable>
 80031e2:	4603      	mov	r3, r0
 80031e4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f040 80fa 	bne.w	80033e2 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7e      	ldr	r2, [pc, #504]	@ (8003400 <HAL_ADC_Start_IT+0x25c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d002      	beq.n	8003212 <HAL_ADC_Start_IT+0x6e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	e001      	b.n	8003216 <HAL_ADC_Start_IT+0x72>
 8003212:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	4293      	cmp	r3, r2
 800321c:	d002      	beq.n	8003224 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003228:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d006      	beq.n	800324a <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003240:	f023 0206 	bic.w	r2, r3, #6
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	661a      	str	r2, [r3, #96]	@ 0x60
 8003248:	e002      	b.n	8003250 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	221c      	movs	r2, #28
 8003256:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 021c 	bic.w	r2, r2, #28
 800326e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d108      	bne.n	800328a <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0208 	orr.w	r2, r2, #8
 8003286:	605a      	str	r2, [r3, #4]
          break;
 8003288:	e008      	b.n	800329c <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0204 	orr.w	r2, r2, #4
 8003298:	605a      	str	r2, [r3, #4]
          break;
 800329a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0210 	orr.w	r2, r2, #16
 80032b2:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a51      	ldr	r2, [pc, #324]	@ (8003400 <HAL_ADC_Start_IT+0x25c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d002      	beq.n	80032c4 <HAL_ADC_Start_IT+0x120>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	e001      	b.n	80032c8 <HAL_ADC_Start_IT+0x124>
 80032c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d008      	beq.n	80032e2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d002      	beq.n	80032e2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b09      	cmp	r3, #9
 80032e0:	d13a      	bne.n	8003358 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02d      	beq.n	800334c <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d110      	bne.n	800332a <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0220 	bic.w	r2, r2, #32
 8003316:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003326:	605a      	str	r2, [r3, #4]
              break;
 8003328:	e010      	b.n	800334c <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003338:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0220 	orr.w	r2, r2, #32
 8003348:	605a      	str	r2, [r3, #4]
              break;
 800334a:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fd68 	bl	8002e26 <LL_ADC_REG_StartConversion>
 8003356:	e04b      	b.n	80033f0 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a25      	ldr	r2, [pc, #148]	@ (8003400 <HAL_ADC_Start_IT+0x25c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d002      	beq.n	8003374 <HAL_ADC_Start_IT+0x1d0>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	e001      	b.n	8003378 <HAL_ADC_Start_IT+0x1d4>
 8003374:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003378:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d034      	beq.n	80033f0 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800338e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b08      	cmp	r3, #8
 800339c:	d110      	bne.n	80033c0 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0220 	bic.w	r2, r2, #32
 80033ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033bc:	605a      	str	r2, [r3, #4]
              break;
 80033be:	e017      	b.n	80033f0 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ce:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0220 	orr.w	r2, r2, #32
 80033de:	605a      	str	r2, [r3, #4]
              break;
 80033e0:	e006      	b.n	80033f0 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80033ea:	e001      	b.n	80033f0 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
 80033ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	50000300 	.word	0x50000300
 8003400:	50000100 	.word	0x50000100

08003404 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	@ 0x28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800343c:	4883      	ldr	r0, [pc, #524]	@ (800364c <HAL_ADC_IRQHandler+0x22c>)
 800343e:	f7ff fc61 	bl	8002d04 <LL_ADC_GetMultimode>
 8003442:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d017      	beq.n	800347e <HAL_ADC_IRQHandler+0x5e>
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d012      	beq.n	800347e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 febd 	bl	80041f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2202      	movs	r2, #2
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d004      	beq.n	8003492 <HAL_ADC_IRQHandler+0x72>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8085 	beq.w	80035a8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d07f      	beq.n	80035a8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fb7b 	bl	8002bc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d064      	beq.n	800359a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a5e      	ldr	r2, [pc, #376]	@ (8003650 <HAL_ADC_IRQHandler+0x230>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d002      	beq.n	80034e0 <HAL_ADC_IRQHandler+0xc0>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e001      	b.n	80034e4 <HAL_ADC_IRQHandler+0xc4>
 80034e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d008      	beq.n	80034fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b05      	cmp	r3, #5
 80034f6:	d002      	beq.n	80034fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b09      	cmp	r3, #9
 80034fc:	d104      	bne.n	8003508 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	e00d      	b.n	8003524 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a50      	ldr	r2, [pc, #320]	@ (8003650 <HAL_ADC_IRQHandler+0x230>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d002      	beq.n	8003518 <HAL_ADC_IRQHandler+0xf8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	e001      	b.n	800351c <HAL_ADC_IRQHandler+0xfc>
 8003518:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800351c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d135      	bne.n	800359a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d12e      	bne.n	800359a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fc84 	bl	8002e4e <LL_ADC_REG_IsConversionOngoing>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11a      	bne.n	8003582 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 020c 	bic.w	r2, r2, #12
 800355a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d112      	bne.n	800359a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003580:	e00b      	b.n	800359a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003586:	f043 0210 	orr.w	r2, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003592:	f043 0201 	orr.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe f800 	bl	80015a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	220c      	movs	r2, #12
 80035a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d004      	beq.n	80035bc <HAL_ADC_IRQHandler+0x19c>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 809e 	beq.w	8003704 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8098 	beq.w	8003704 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fb24 	bl	8002c3e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035f6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fadf 	bl	8002bc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003602:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a11      	ldr	r2, [pc, #68]	@ (8003650 <HAL_ADC_IRQHandler+0x230>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d002      	beq.n	8003614 <HAL_ADC_IRQHandler+0x1f4>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	e001      	b.n	8003618 <HAL_ADC_IRQHandler+0x1f8>
 8003614:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	4293      	cmp	r3, r2
 800361e:	d008      	beq.n	8003632 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b06      	cmp	r3, #6
 800362a:	d002      	beq.n	8003632 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2b07      	cmp	r3, #7
 8003630:	d104      	bne.n	800363c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	623b      	str	r3, [r7, #32]
 800363a:	e011      	b.n	8003660 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a03      	ldr	r2, [pc, #12]	@ (8003650 <HAL_ADC_IRQHandler+0x230>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d006      	beq.n	8003654 <HAL_ADC_IRQHandler+0x234>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	e005      	b.n	8003658 <HAL_ADC_IRQHandler+0x238>
 800364c:	50000300 	.word	0x50000300
 8003650:	50000100 	.word	0x50000100
 8003654:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003658:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d047      	beq.n	80036f6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <HAL_ADC_IRQHandler+0x260>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d03f      	beq.n	80036f6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800367c:	2b00      	cmp	r3, #0
 800367e:	d13a      	bne.n	80036f6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368a:	2b40      	cmp	r3, #64	@ 0x40
 800368c:	d133      	bne.n	80036f6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d12e      	bne.n	80036f6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fbe9 	bl	8002e74 <LL_ADC_INJ_IsConversionOngoing>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d11a      	bne.n	80036de <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036b6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d112      	bne.n	80036f6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036dc:	e00b      	b.n	80036f6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e2:	f043 0210 	orr.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fd52 	bl	80041a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2260      	movs	r2, #96	@ 0x60
 8003702:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d011      	beq.n	8003732 <HAL_ADC_IRQHandler+0x312>
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00c      	beq.n	8003732 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f895 	bl	8003854 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2280      	movs	r2, #128	@ 0x80
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <HAL_ADC_IRQHandler+0x342>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fd38 	bl	80041c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <HAL_ADC_IRQHandler+0x372>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00d      	beq.n	8003792 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fd2a 	bl	80041dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003790:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	d036      	beq.n	800380a <HAL_ADC_IRQHandler+0x3ea>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d031      	beq.n	800380a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80037ae:	2301      	movs	r3, #1
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b2:	e014      	b.n	80037de <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037ba:	4825      	ldr	r0, [pc, #148]	@ (8003850 <HAL_ADC_IRQHandler+0x430>)
 80037bc:	f7ff fab0 	bl	8002d20 <LL_ADC_GetMultiDMATransfer>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80037c6:	2301      	movs	r3, #1
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ca:	e008      	b.n	80037de <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80037da:	2301      	movs	r3, #1
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10e      	bne.n	8003802 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	f043 0202 	orr.w	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7fd fef9 	bl	80015f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2210      	movs	r2, #16
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d018      	beq.n	8003846 <HAL_ADC_IRQHandler+0x426>
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381a:	2b00      	cmp	r3, #0
 800381c:	d013      	beq.n	8003846 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382e:	f043 0208 	orr.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800383e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fcb7 	bl	80041b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003846:	bf00      	nop
 8003848:	3728      	adds	r7, #40	@ 0x28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	50000300 	.word	0x50000300

08003854 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b0b6      	sub	sp, #216	@ 0xd8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x22>
 8003886:	2302      	movs	r3, #2
 8003888:	e3c8      	b.n	800401c <HAL_ADC_ConfigChannel+0x7b4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fad9 	bl	8002e4e <LL_ADC_REG_IsConversionOngoing>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 83ad 	bne.w	8003ffe <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f7ff f998 	bl	8002be6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fac7 	bl	8002e4e <LL_ADC_REG_IsConversionOngoing>
 80038c0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fad3 	bl	8002e74 <LL_ADC_INJ_IsConversionOngoing>
 80038ce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 81d9 	bne.w	8003c8e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 81d4 	bne.w	8003c8e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038ee:	d10f      	bne.n	8003910 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2200      	movs	r2, #0
 80038fa:	4619      	mov	r1, r3
 80038fc:	f7ff f9b2 	bl	8002c64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff f946 	bl	8002b9a <LL_ADC_SetSamplingTimeCommonConfig>
 800390e:	e00e      	b.n	800392e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	461a      	mov	r2, r3
 800391e:	f7ff f9a1 	bl	8002c64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff f936 	bl	8002b9a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	08db      	lsrs	r3, r3, #3
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d022      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6919      	ldr	r1, [r3, #16]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003960:	f7ff f890 	bl	8002a84 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6919      	ldr	r1, [r3, #16]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	461a      	mov	r2, r3
 8003972:	f7ff f8dc 	bl	8002b2e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003982:	2b01      	cmp	r3, #1
 8003984:	d102      	bne.n	800398c <HAL_ADC_ConfigChannel+0x124>
 8003986:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800398a:	e000      	b.n	800398e <HAL_ADC_ConfigChannel+0x126>
 800398c:	2300      	movs	r3, #0
 800398e:	461a      	mov	r2, r3
 8003990:	f7ff f8e8 	bl	8002b64 <LL_ADC_SetOffsetSaturation>
 8003994:	e17b      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff f895 	bl	8002acc <LL_ADC_GetOffsetChannel>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x15a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff f88a 	bl	8002acc <LL_ADC_GetOffsetChannel>
 80039b8:	4603      	mov	r3, r0
 80039ba:	0e9b      	lsrs	r3, r3, #26
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	e01e      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x198>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f87f 	bl	8002acc <LL_ADC_GetOffsetChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	e004      	b.n	80039fe <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80039f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x1b0>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0e9b      	lsrs	r3, r3, #26
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	e018      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x1e2>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003a34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	e004      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003a40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a44:	fab3 f383 	clz	r3, r3
 8003a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d106      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2200      	movs	r2, #0
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff f84e 	bl	8002af8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2101      	movs	r1, #1
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff f832 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x220>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2101      	movs	r1, #1
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff f827 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	0e9b      	lsrs	r3, r3, #26
 8003a82:	f003 021f 	and.w	r2, r3, #31
 8003a86:	e01e      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x25e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff f81c 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	e004      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003aba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x276>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	0e9b      	lsrs	r3, r3, #26
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	e018      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x2a8>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003af2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003af6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003afa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003b02:	2320      	movs	r3, #32
 8003b04:	e004      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d106      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe ffeb 	bl	8002af8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2102      	movs	r1, #2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe ffcf 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x2e6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe ffc4 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003b44:	4603      	mov	r3, r0
 8003b46:	0e9b      	lsrs	r3, r3, #26
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	e01e      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x324>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2102      	movs	r1, #2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe ffb9 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003b74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	e004      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003b80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b84:	fab3 f383 	clz	r3, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x33c>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	0e9b      	lsrs	r3, r3, #26
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	e016      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x36a>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003bb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e004      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bcc:	fab3 f383 	clz	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d106      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2102      	movs	r1, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe ff8a 	bl	8002af8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2103      	movs	r1, #3
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe ff6e 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x3a8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2103      	movs	r1, #3
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe ff63 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003c06:	4603      	mov	r3, r0
 8003c08:	0e9b      	lsrs	r3, r3, #26
 8003c0a:	f003 021f 	and.w	r2, r3, #31
 8003c0e:	e017      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x3d8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2103      	movs	r1, #3
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe ff58 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003c28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003c2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003c32:	2320      	movs	r3, #32
 8003c34:	e003      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003c36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c38:	fab3 f383 	clz	r3, r3
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x3f0>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0e9b      	lsrs	r3, r3, #26
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	e011      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x414>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003c66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	e003      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d106      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2103      	movs	r1, #3
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe ff35 	bl	8002af8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff f8b4 	bl	8002e00 <LL_ADC_IsEnabled>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 8140 	bne.w	8003f20 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6819      	ldr	r1, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	461a      	mov	r2, r3
 8003cae:	f7ff f805 	bl	8002cbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	4a8f      	ldr	r2, [pc, #572]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x68c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	f040 8131 	bne.w	8003f20 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x47e>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	0e9b      	lsrs	r3, r3, #26
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	2b09      	cmp	r3, #9
 8003cdc:	bf94      	ite	ls
 8003cde:	2301      	movls	r3, #1
 8003ce0:	2300      	movhi	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e019      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x4b2>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cf6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003cf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003cfe:	2320      	movs	r3, #32
 8003d00:	e003      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d04:	fab3 f383 	clz	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2b09      	cmp	r3, #9
 8003d12:	bf94      	ite	ls
 8003d14:	2301      	movls	r3, #1
 8003d16:	2300      	movhi	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d079      	beq.n	8003e12 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x4d2>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	0e9b      	lsrs	r3, r3, #26
 8003d30:	3301      	adds	r3, #1
 8003d32:	069b      	lsls	r3, r3, #26
 8003d34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d38:	e015      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x4fe>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d4a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003d52:	2320      	movs	r3, #32
 8003d54:	e003      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d58:	fab3 f383 	clz	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	069b      	lsls	r3, r3, #26
 8003d62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x51e>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	0e9b      	lsrs	r3, r3, #26
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	e017      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x54e>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003d9e:	2320      	movs	r3, #32
 8003da0:	e003      	b.n	8003daa <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	3301      	adds	r3, #1
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2101      	movs	r1, #1
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	ea42 0103 	orr.w	r1, r2, r3
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x574>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	0e9b      	lsrs	r3, r3, #26
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f003 021f 	and.w	r2, r3, #31
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	051b      	lsls	r3, r3, #20
 8003dda:	e018      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x5a6>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003df4:	2320      	movs	r3, #32
 8003df6:	e003      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	3301      	adds	r3, #1
 8003e02:	f003 021f 	and.w	r2, r3, #31
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	e081      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x5c6>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	0e9b      	lsrs	r3, r3, #26
 8003e24:	3301      	adds	r3, #1
 8003e26:	069b      	lsls	r3, r3, #26
 8003e28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e2c:	e015      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x5f2>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003e46:	2320      	movs	r3, #32
 8003e48:	e003      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	3301      	adds	r3, #1
 8003e54:	069b      	lsls	r3, r3, #26
 8003e56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x612>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	0e9b      	lsrs	r3, r3, #26
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	e017      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x642>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	61fb      	str	r3, [r7, #28]
  return result;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003e92:	2320      	movs	r3, #32
 8003e94:	e003      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	ea42 0103 	orr.w	r1, r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x66e>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	0e9b      	lsrs	r3, r3, #26
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	f003 021f 	and.w	r2, r3, #31
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	3b1e      	subs	r3, #30
 8003ece:	051b      	lsls	r3, r3, #20
 8003ed0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ed4:	e01e      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x6ac>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	613b      	str	r3, [r7, #16]
  return result;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003eee:	2320      	movs	r3, #32
 8003ef0:	e006      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x698>
 8003ef2:	bf00      	nop
 8003ef4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	3301      	adds	r3, #1
 8003f02:	f003 021f 	and.w	r2, r3, #31
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3b1e      	subs	r3, #30
 8003f0e:	051b      	lsls	r3, r3, #20
 8003f10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f14:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f7fe fea2 	bl	8002c64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b3f      	ldr	r3, [pc, #252]	@ (8004024 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d071      	beq.n	8004010 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f2c:	483e      	ldr	r0, [pc, #248]	@ (8004028 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f2e:	f7fe fd9b 	bl	8002a68 <LL_ADC_GetCommonPathInternalCh>
 8003f32:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a3c      	ldr	r2, [pc, #240]	@ (800402c <HAL_ADC_ConfigChannel+0x7c4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_ADC_ConfigChannel+0x6e2>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a3a      	ldr	r2, [pc, #232]	@ (8004030 <HAL_ADC_ConfigChannel+0x7c8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d127      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d121      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f5e:	d157      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f68:	4619      	mov	r1, r3
 8003f6a:	482f      	ldr	r0, [pc, #188]	@ (8004028 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f6c:	f7fe fd69 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f70:	4b30      	ldr	r3, [pc, #192]	@ (8004034 <HAL_ADC_ConfigChannel+0x7cc>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	4a30      	ldr	r2, [pc, #192]	@ (8004038 <HAL_ADC_ConfigChannel+0x7d0>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f8a:	e002      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f9      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f98:	e03a      	b.n	8004010 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a27      	ldr	r2, [pc, #156]	@ (800403c <HAL_ADC_ConfigChannel+0x7d4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d113      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10d      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a22      	ldr	r2, [pc, #136]	@ (8004040 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d02a      	beq.n	8004010 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4818      	ldr	r0, [pc, #96]	@ (8004028 <HAL_ADC_ConfigChannel+0x7c0>)
 8003fc6:	f7fe fd3c 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fca:	e021      	b.n	8004010 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8004044 <HAL_ADC_ConfigChannel+0x7dc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d11c      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d116      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a16      	ldr	r2, [pc, #88]	@ (8004040 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d011      	beq.n	8004010 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ff0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	480c      	ldr	r0, [pc, #48]	@ (8004028 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ff8:	f7fe fd23 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
 8003ffc:	e008      	b.n	8004010 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004018:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800401c:	4618      	mov	r0, r3
 800401e:	37d8      	adds	r7, #216	@ 0xd8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	80080000 	.word	0x80080000
 8004028:	50000300 	.word	0x50000300
 800402c:	c3210000 	.word	0xc3210000
 8004030:	90c00010 	.word	0x90c00010
 8004034:	20000000 	.word	0x20000000
 8004038:	053e2d63 	.word	0x053e2d63
 800403c:	c7520000 	.word	0xc7520000
 8004040:	50000100 	.word	0x50000100
 8004044:	cb840000 	.word	0xcb840000

08004048 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe fed1 	bl	8002e00 <LL_ADC_IsEnabled>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d169      	bne.n	8004138 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	4b36      	ldr	r3, [pc, #216]	@ (8004144 <ADC_Enable+0xfc>)
 800406c:	4013      	ands	r3, r2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004076:	f043 0210 	orr.w	r2, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e055      	b.n	800413a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fea0 	bl	8002dd8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004098:	482b      	ldr	r0, [pc, #172]	@ (8004148 <ADC_Enable+0x100>)
 800409a:	f7fe fce5 	bl	8002a68 <LL_ADC_GetCommonPathInternalCh>
 800409e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80040a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040a8:	4b28      	ldr	r3, [pc, #160]	@ (800414c <ADC_Enable+0x104>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	099b      	lsrs	r3, r3, #6
 80040ae:	4a28      	ldr	r2, [pc, #160]	@ (8004150 <ADC_Enable+0x108>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	099b      	lsrs	r3, r3, #6
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	4613      	mov	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040c2:	e002      	b.n	80040ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f9      	bne.n	80040c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040d0:	f7fe fc98 	bl	8002a04 <HAL_GetTick>
 80040d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040d6:	e028      	b.n	800412a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe fe8f 	bl	8002e00 <LL_ADC_IsEnabled>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fe fe73 	bl	8002dd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040f2:	f7fe fc87 	bl	8002a04 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d914      	bls.n	800412a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d00d      	beq.n	800412a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	f043 0210 	orr.w	r2, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411e:	f043 0201 	orr.w	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e007      	b.n	800413a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d1cf      	bne.n	80040d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	8000003f 	.word	0x8000003f
 8004148:	50000300 	.word	0x50000300
 800414c:	20000000 	.word	0x20000000
 8004150:	053e2d63 	.word	0x053e2d63

08004154 <LL_ADC_IsEnabled>:
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <LL_ADC_IsEnabled+0x18>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <LL_ADC_IsEnabled+0x1a>
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_ADC_REG_IsConversionOngoing>:
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b04      	cmp	r3, #4
 800418c:	d101      	bne.n	8004192 <LL_ADC_REG_IsConversionOngoing+0x18>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b0a1      	sub	sp, #132	@ 0x84
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800421e:	2302      	movs	r3, #2
 8004220:	e08b      	b.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800422a:	2300      	movs	r3, #0
 800422c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800422e:	2300      	movs	r3, #0
 8004230:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800423a:	d102      	bne.n	8004242 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800423c:	4b41      	ldr	r3, [pc, #260]	@ (8004344 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	e001      	b.n	8004246 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e06a      	b.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff ff87 	bl	800417a <LL_ADC_REG_IsConversionOngoing>
 800426c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff ff81 	bl	800417a <LL_ADC_REG_IsConversionOngoing>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d14c      	bne.n	8004318 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800427e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004280:	2b00      	cmp	r3, #0
 8004282:	d149      	bne.n	8004318 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004284:	4b30      	ldr	r3, [pc, #192]	@ (8004348 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004286:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d028      	beq.n	80042e2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004290:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	6859      	ldr	r1, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042a2:	035b      	lsls	r3, r3, #13
 80042a4:	430b      	orrs	r3, r1
 80042a6:	431a      	orrs	r2, r3
 80042a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80042b0:	f7ff ff50 	bl	8004154 <LL_ADC_IsEnabled>
 80042b4:	4604      	mov	r4, r0
 80042b6:	4823      	ldr	r0, [pc, #140]	@ (8004344 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80042b8:	f7ff ff4c 	bl	8004154 <LL_ADC_IsEnabled>
 80042bc:	4603      	mov	r3, r0
 80042be:	4323      	orrs	r3, r4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d133      	bne.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80042cc:	f023 030f 	bic.w	r3, r3, #15
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	6811      	ldr	r1, [r2, #0]
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	6892      	ldr	r2, [r2, #8]
 80042d8:	430a      	orrs	r2, r1
 80042da:	431a      	orrs	r2, r3
 80042dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042de:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042e0:	e024      	b.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80042e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042ee:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80042f2:	f7ff ff2f 	bl	8004154 <LL_ADC_IsEnabled>
 80042f6:	4604      	mov	r4, r0
 80042f8:	4812      	ldr	r0, [pc, #72]	@ (8004344 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80042fa:	f7ff ff2b 	bl	8004154 <LL_ADC_IsEnabled>
 80042fe:	4603      	mov	r3, r0
 8004300:	4323      	orrs	r3, r4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d112      	bne.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800430e:	f023 030f 	bic.w	r3, r3, #15
 8004312:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004314:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004316:	e009      	b.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800432a:	e000      	b.n	800432e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800432c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004336:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800433a:	4618      	mov	r0, r3
 800433c:	3784      	adds	r7, #132	@ 0x84
 800433e:	46bd      	mov	sp, r7
 8004340:	bd90      	pop	{r4, r7, pc}
 8004342:	bf00      	nop
 8004344:	50000100 	.word	0x50000100
 8004348:	50000300 	.word	0x50000300

0800434c <__NVIC_SetPriorityGrouping>:
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800435c:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <__NVIC_SetPriorityGrouping+0x44>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004368:	4013      	ands	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800437c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800437e:	4a04      	ldr	r2, [pc, #16]	@ (8004390 <__NVIC_SetPriorityGrouping+0x44>)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	60d3      	str	r3, [r2, #12]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <__NVIC_GetPriorityGrouping>:
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004398:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <__NVIC_GetPriorityGrouping+0x18>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	f003 0307 	and.w	r3, r3, #7
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <__NVIC_EnableIRQ>:
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	db0b      	blt.n	80043da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	4907      	ldr	r1, [pc, #28]	@ (80043e8 <__NVIC_EnableIRQ+0x38>)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2001      	movs	r0, #1
 80043d2:	fa00 f202 	lsl.w	r2, r0, r2
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000e100 	.word	0xe000e100

080043ec <__NVIC_SetPriority>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	db0a      	blt.n	8004416 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	490c      	ldr	r1, [pc, #48]	@ (8004438 <__NVIC_SetPriority+0x4c>)
 8004406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440a:	0112      	lsls	r2, r2, #4
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	440b      	add	r3, r1
 8004410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004414:	e00a      	b.n	800442c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	4908      	ldr	r1, [pc, #32]	@ (800443c <__NVIC_SetPriority+0x50>)
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	3b04      	subs	r3, #4
 8004424:	0112      	lsls	r2, r2, #4
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	440b      	add	r3, r1
 800442a:	761a      	strb	r2, [r3, #24]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	e000e100 	.word	0xe000e100
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <NVIC_EncodePriority>:
{
 8004440:	b480      	push	{r7}
 8004442:	b089      	sub	sp, #36	@ 0x24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f1c3 0307 	rsb	r3, r3, #7
 800445a:	2b04      	cmp	r3, #4
 800445c:	bf28      	it	cs
 800445e:	2304      	movcs	r3, #4
 8004460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	3304      	adds	r3, #4
 8004466:	2b06      	cmp	r3, #6
 8004468:	d902      	bls.n	8004470 <NVIC_EncodePriority+0x30>
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	3b03      	subs	r3, #3
 800446e:	e000      	b.n	8004472 <NVIC_EncodePriority+0x32>
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004474:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43da      	mvns	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	401a      	ands	r2, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004488:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	fa01 f303 	lsl.w	r3, r1, r3
 8004492:	43d9      	mvns	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004498:	4313      	orrs	r3, r2
}
 800449a:	4618      	mov	r0, r3
 800449c:	3724      	adds	r7, #36	@ 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ff4c 	bl	800434c <__NVIC_SetPriorityGrouping>
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044ca:	f7ff ff63 	bl	8004394 <__NVIC_GetPriorityGrouping>
 80044ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	6978      	ldr	r0, [r7, #20]
 80044d6:	f7ff ffb3 	bl	8004440 <NVIC_EncodePriority>
 80044da:	4602      	mov	r2, r0
 80044dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ff82 	bl	80043ec <__NVIC_SetPriority>
}
 80044e8:	bf00      	nop
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff ff56 	bl	80043b0 <__NVIC_EnableIRQ>
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d005      	beq.n	8004530 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2204      	movs	r2, #4
 8004528:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	e037      	b.n	80045a0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 020e 	bic.w	r2, r2, #14
 800453e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800454e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004564:	f003 021f 	and.w	r2, r3, #31
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	2101      	movs	r1, #1
 800456e:	fa01 f202 	lsl.w	r2, r1, r2
 8004572:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800457c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00c      	beq.n	80045a0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004594:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800459e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d00d      	beq.n	80045f2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2204      	movs	r2, #4
 80045da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	73fb      	strb	r3, [r7, #15]
 80045f0:	e047      	b.n	8004682 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 020e 	bic.w	r2, r2, #14
 8004600:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800461c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	f003 021f 	and.w	r2, r3, #31
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	2101      	movs	r1, #1
 8004630:	fa01 f202 	lsl.w	r2, r1, r2
 8004634:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800463e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004652:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004656:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004660:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
    }
  }
  return status;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800469a:	e15a      	b.n	8004952 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	2101      	movs	r1, #1
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	4013      	ands	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 814c 	beq.w	800494c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d005      	beq.n	80046cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d130      	bne.n	800472e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	2203      	movs	r2, #3
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4013      	ands	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004702:	2201      	movs	r2, #1
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4013      	ands	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	f003 0201 	and.w	r2, r3, #1
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b03      	cmp	r3, #3
 8004738:	d017      	beq.n	800476a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	2203      	movs	r2, #3
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d123      	bne.n	80047be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	08da      	lsrs	r2, r3, #3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3208      	adds	r2, #8
 800477e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	220f      	movs	r2, #15
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4013      	ands	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	08da      	lsrs	r2, r3, #3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3208      	adds	r2, #8
 80047b8:	6939      	ldr	r1, [r7, #16]
 80047ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	2203      	movs	r2, #3
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f003 0203 	and.w	r2, r3, #3
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80a6 	beq.w	800494c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004800:	4b5b      	ldr	r3, [pc, #364]	@ (8004970 <HAL_GPIO_Init+0x2e4>)
 8004802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004804:	4a5a      	ldr	r2, [pc, #360]	@ (8004970 <HAL_GPIO_Init+0x2e4>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6613      	str	r3, [r2, #96]	@ 0x60
 800480c:	4b58      	ldr	r3, [pc, #352]	@ (8004970 <HAL_GPIO_Init+0x2e4>)
 800480e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004818:	4a56      	ldr	r2, [pc, #344]	@ (8004974 <HAL_GPIO_Init+0x2e8>)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	3302      	adds	r3, #2
 8004820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	220f      	movs	r2, #15
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004842:	d01f      	beq.n	8004884 <HAL_GPIO_Init+0x1f8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a4c      	ldr	r2, [pc, #304]	@ (8004978 <HAL_GPIO_Init+0x2ec>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d019      	beq.n	8004880 <HAL_GPIO_Init+0x1f4>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a4b      	ldr	r2, [pc, #300]	@ (800497c <HAL_GPIO_Init+0x2f0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <HAL_GPIO_Init+0x1f0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a4a      	ldr	r2, [pc, #296]	@ (8004980 <HAL_GPIO_Init+0x2f4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00d      	beq.n	8004878 <HAL_GPIO_Init+0x1ec>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a49      	ldr	r2, [pc, #292]	@ (8004984 <HAL_GPIO_Init+0x2f8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <HAL_GPIO_Init+0x1e8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a48      	ldr	r2, [pc, #288]	@ (8004988 <HAL_GPIO_Init+0x2fc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d101      	bne.n	8004870 <HAL_GPIO_Init+0x1e4>
 800486c:	2305      	movs	r3, #5
 800486e:	e00a      	b.n	8004886 <HAL_GPIO_Init+0x1fa>
 8004870:	2306      	movs	r3, #6
 8004872:	e008      	b.n	8004886 <HAL_GPIO_Init+0x1fa>
 8004874:	2304      	movs	r3, #4
 8004876:	e006      	b.n	8004886 <HAL_GPIO_Init+0x1fa>
 8004878:	2303      	movs	r3, #3
 800487a:	e004      	b.n	8004886 <HAL_GPIO_Init+0x1fa>
 800487c:	2302      	movs	r3, #2
 800487e:	e002      	b.n	8004886 <HAL_GPIO_Init+0x1fa>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_GPIO_Init+0x1fa>
 8004884:	2300      	movs	r3, #0
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	f002 0203 	and.w	r2, r2, #3
 800488c:	0092      	lsls	r2, r2, #2
 800488e:	4093      	lsls	r3, r2
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004896:	4937      	ldr	r1, [pc, #220]	@ (8004974 <HAL_GPIO_Init+0x2e8>)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	089b      	lsrs	r3, r3, #2
 800489c:	3302      	adds	r3, #2
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048a4:	4b39      	ldr	r3, [pc, #228]	@ (800498c <HAL_GPIO_Init+0x300>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048c8:	4a30      	ldr	r2, [pc, #192]	@ (800498c <HAL_GPIO_Init+0x300>)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048ce:	4b2f      	ldr	r3, [pc, #188]	@ (800498c <HAL_GPIO_Init+0x300>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	43db      	mvns	r3, r3
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4013      	ands	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048f2:	4a26      	ldr	r2, [pc, #152]	@ (800498c <HAL_GPIO_Init+0x300>)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80048f8:	4b24      	ldr	r3, [pc, #144]	@ (800498c <HAL_GPIO_Init+0x300>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	43db      	mvns	r3, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4013      	ands	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800491c:	4a1b      	ldr	r2, [pc, #108]	@ (800498c <HAL_GPIO_Init+0x300>)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004922:	4b1a      	ldr	r3, [pc, #104]	@ (800498c <HAL_GPIO_Init+0x300>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004946:	4a11      	ldr	r2, [pc, #68]	@ (800498c <HAL_GPIO_Init+0x300>)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	3301      	adds	r3, #1
 8004950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	f47f ae9d 	bne.w	800469c <HAL_GPIO_Init+0x10>
  }
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40021000 	.word	0x40021000
 8004974:	40010000 	.word	0x40010000
 8004978:	48000400 	.word	0x48000400
 800497c:	48000800 	.word	0x48000800
 8004980:	48000c00 	.word	0x48000c00
 8004984:	48001000 	.word	0x48001000
 8004988:	48001400 	.word	0x48001400
 800498c:	40010400 	.word	0x40010400

08004990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
 800499c:	4613      	mov	r3, r2
 800499e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049a0:	787b      	ldrb	r3, [r7, #1]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049ac:	e002      	b.n	80049b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049ae:	887a      	ldrh	r2, [r7, #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d141      	bne.n	8004a52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ce:	4b4b      	ldr	r3, [pc, #300]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049da:	d131      	bne.n	8004a40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049dc:	4b47      	ldr	r3, [pc, #284]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e2:	4a46      	ldr	r2, [pc, #280]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049ec:	4b43      	ldr	r3, [pc, #268]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049f4:	4a41      	ldr	r2, [pc, #260]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049fc:	4b40      	ldr	r3, [pc, #256]	@ (8004b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2232      	movs	r2, #50	@ 0x32
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
 8004a06:	4a3f      	ldr	r2, [pc, #252]	@ (8004b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	0c9b      	lsrs	r3, r3, #18
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a12:	e002      	b.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a1a:	4b38      	ldr	r3, [pc, #224]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a26:	d102      	bne.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f2      	bne.n	8004a14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a2e:	4b33      	ldr	r3, [pc, #204]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3a:	d158      	bne.n	8004aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e057      	b.n	8004af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a40:	4b2e      	ldr	r3, [pc, #184]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a46:	4a2d      	ldr	r2, [pc, #180]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a50:	e04d      	b.n	8004aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a58:	d141      	bne.n	8004ade <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a5a:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a66:	d131      	bne.n	8004acc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a68:	4b24      	ldr	r3, [pc, #144]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a6e:	4a23      	ldr	r2, [pc, #140]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a78:	4b20      	ldr	r3, [pc, #128]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a80:	4a1e      	ldr	r2, [pc, #120]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a88:	4b1d      	ldr	r3, [pc, #116]	@ (8004b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2232      	movs	r2, #50	@ 0x32
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	0c9b      	lsrs	r3, r3, #18
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a9e:	e002      	b.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aa6:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab2:	d102      	bne.n	8004aba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f2      	bne.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aba:	4b10      	ldr	r3, [pc, #64]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac6:	d112      	bne.n	8004aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e011      	b.n	8004af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004acc:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004adc:	e007      	b.n	8004aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ade:	4b07      	ldr	r3, [pc, #28]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ae6:	4a05      	ldr	r2, [pc, #20]	@ (8004afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004aec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	40007000 	.word	0x40007000
 8004b00:	20000000 	.word	0x20000000
 8004b04:	431bde83 	.word	0x431bde83

08004b08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b0c:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a04      	ldr	r2, [pc, #16]	@ (8004b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b16:	6093      	str	r3, [r2, #8]
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40007000 	.word	0x40007000

08004b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e2fe      	b.n	8005138 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d075      	beq.n	8004c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b46:	4b97      	ldr	r3, [pc, #604]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b50:	4b94      	ldr	r3, [pc, #592]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b0c      	cmp	r3, #12
 8004b5e:	d102      	bne.n	8004b66 <HAL_RCC_OscConfig+0x3e>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d002      	beq.n	8004b6c <HAL_RCC_OscConfig+0x44>
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d10b      	bne.n	8004b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d05b      	beq.n	8004c30 <HAL_RCC_OscConfig+0x108>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d157      	bne.n	8004c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e2d9      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8c:	d106      	bne.n	8004b9c <HAL_RCC_OscConfig+0x74>
 8004b8e:	4b85      	ldr	r3, [pc, #532]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a84      	ldr	r2, [pc, #528]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e01d      	b.n	8004bd8 <HAL_RCC_OscConfig+0xb0>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x98>
 8004ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7e      	ldr	r2, [pc, #504]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a7b      	ldr	r2, [pc, #492]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0xb0>
 8004bc0:	4b78      	ldr	r3, [pc, #480]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a77      	ldr	r2, [pc, #476]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4b75      	ldr	r3, [pc, #468]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a74      	ldr	r2, [pc, #464]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d013      	beq.n	8004c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fd ff10 	bl	8002a04 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fd ff0c 	bl	8002a04 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	@ 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e29e      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0xc0>
 8004c06:	e014      	b.n	8004c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fd fefc 	bl	8002a04 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c10:	f7fd fef8 	bl	8002a04 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	@ 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e28a      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c22:	4b60      	ldr	r3, [pc, #384]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0xe8>
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d075      	beq.n	8004d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c3e:	4b59      	ldr	r3, [pc, #356]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c48:	4b56      	ldr	r3, [pc, #344]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b0c      	cmp	r3, #12
 8004c56:	d102      	bne.n	8004c5e <HAL_RCC_OscConfig+0x136>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d002      	beq.n	8004c64 <HAL_RCC_OscConfig+0x13c>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d11f      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c64:	4b4f      	ldr	r3, [pc, #316]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_OscConfig+0x154>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e25d      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7c:	4b49      	ldr	r3, [pc, #292]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	4946      	ldr	r1, [pc, #280]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c90:	4b45      	ldr	r3, [pc, #276]	@ (8004da8 <HAL_RCC_OscConfig+0x280>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fc fecd 	bl	8001a34 <HAL_InitTick>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d043      	beq.n	8004d28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e249      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d023      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cac:	4b3d      	ldr	r3, [pc, #244]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd fea4 	bl	8002a04 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc0:	f7fd fea0 	bl	8002a04 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e232      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd2:	4b34      	ldr	r3, [pc, #208]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cde:	4b31      	ldr	r3, [pc, #196]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	492d      	ldr	r1, [pc, #180]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
 8004cf2:	e01a      	b.n	8004d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004cfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd fe80 	bl	8002a04 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d08:	f7fd fe7c 	bl	8002a04 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e20e      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d1a:	4b22      	ldr	r3, [pc, #136]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x1e0>
 8004d26:	e000      	b.n	8004d2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d041      	beq.n	8004dba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01c      	beq.n	8004d78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d3e:	4b19      	ldr	r3, [pc, #100]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d44:	4a17      	ldr	r2, [pc, #92]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4e:	f7fd fe59 	bl	8002a04 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d56:	f7fd fe55 	bl	8002a04 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e1e7      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d68:	4b0e      	ldr	r3, [pc, #56]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0ef      	beq.n	8004d56 <HAL_RCC_OscConfig+0x22e>
 8004d76:	e020      	b.n	8004dba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d78:	4b0a      	ldr	r3, [pc, #40]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d7e:	4a09      	ldr	r2, [pc, #36]	@ (8004da4 <HAL_RCC_OscConfig+0x27c>)
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d88:	f7fd fe3c 	bl	8002a04 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d8e:	e00d      	b.n	8004dac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d90:	f7fd fe38 	bl	8002a04 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d906      	bls.n	8004dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e1ca      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
 8004da2:	bf00      	nop
 8004da4:	40021000 	.word	0x40021000
 8004da8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dac:	4b8c      	ldr	r3, [pc, #560]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1ea      	bne.n	8004d90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80a6 	beq.w	8004f14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dcc:	4b84      	ldr	r3, [pc, #528]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_OscConfig+0x2b4>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x2b6>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de2:	4b7f      	ldr	r3, [pc, #508]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de6:	4a7e      	ldr	r2, [pc, #504]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dee:	4b7c      	ldr	r3, [pc, #496]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dfe:	4b79      	ldr	r3, [pc, #484]	@ (8004fe4 <HAL_RCC_OscConfig+0x4bc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d118      	bne.n	8004e3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e0a:	4b76      	ldr	r3, [pc, #472]	@ (8004fe4 <HAL_RCC_OscConfig+0x4bc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a75      	ldr	r2, [pc, #468]	@ (8004fe4 <HAL_RCC_OscConfig+0x4bc>)
 8004e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e16:	f7fd fdf5 	bl	8002a04 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1e:	f7fd fdf1 	bl	8002a04 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e183      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e30:	4b6c      	ldr	r3, [pc, #432]	@ (8004fe4 <HAL_RCC_OscConfig+0x4bc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d108      	bne.n	8004e56 <HAL_RCC_OscConfig+0x32e>
 8004e44:	4b66      	ldr	r3, [pc, #408]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4a:	4a65      	ldr	r2, [pc, #404]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e54:	e024      	b.n	8004ea0 <HAL_RCC_OscConfig+0x378>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b05      	cmp	r3, #5
 8004e5c:	d110      	bne.n	8004e80 <HAL_RCC_OscConfig+0x358>
 8004e5e:	4b60      	ldr	r3, [pc, #384]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e64:	4a5e      	ldr	r2, [pc, #376]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004e66:	f043 0304 	orr.w	r3, r3, #4
 8004e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e74:	4a5a      	ldr	r2, [pc, #360]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e7e:	e00f      	b.n	8004ea0 <HAL_RCC_OscConfig+0x378>
 8004e80:	4b57      	ldr	r3, [pc, #348]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e86:	4a56      	ldr	r2, [pc, #344]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e90:	4b53      	ldr	r3, [pc, #332]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	4a52      	ldr	r2, [pc, #328]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004e98:	f023 0304 	bic.w	r3, r3, #4
 8004e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d016      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea8:	f7fd fdac 	bl	8002a04 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb0:	f7fd fda8 	bl	8002a04 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e138      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec6:	4b46      	ldr	r3, [pc, #280]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ed      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x388>
 8004ed4:	e015      	b.n	8004f02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed6:	f7fd fd95 	bl	8002a04 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fd fd91 	bl	8002a04 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e121      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1ed      	bne.n	8004ede <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f02:	7ffb      	ldrb	r3, [r7, #31]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d105      	bne.n	8004f14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f08:	4b35      	ldr	r3, [pc, #212]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0c:	4a34      	ldr	r2, [pc, #208]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f12:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d03c      	beq.n	8004f9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01c      	beq.n	8004f62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f28:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fd fd64 	bl	8002a04 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f40:	f7fd fd60 	bl	8002a04 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e0f2      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f52:	4b23      	ldr	r3, [pc, #140]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ef      	beq.n	8004f40 <HAL_RCC_OscConfig+0x418>
 8004f60:	e01b      	b.n	8004f9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f62:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f68:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f72:	f7fd fd47 	bl	8002a04 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f7a:	f7fd fd43 	bl	8002a04 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e0d5      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f8c:	4b14      	ldr	r3, [pc, #80]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1ef      	bne.n	8004f7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 80c9 	beq.w	8005136 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 030c 	and.w	r3, r3, #12
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	f000 8083 	beq.w	80050b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d15e      	bne.n	8005078 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fba:	4b09      	ldr	r3, [pc, #36]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a08      	ldr	r2, [pc, #32]	@ (8004fe0 <HAL_RCC_OscConfig+0x4b8>)
 8004fc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc6:	f7fd fd1d 	bl	8002a04 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fcc:	e00c      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fce:	f7fd fd19 	bl	8002a04 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d905      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0ab      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe8:	4b55      	ldr	r3, [pc, #340]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1ec      	bne.n	8004fce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff4:	4b52      	ldr	r3, [pc, #328]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	4b52      	ldr	r3, [pc, #328]	@ (8005144 <HAL_RCC_OscConfig+0x61c>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6a11      	ldr	r1, [r2, #32]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005004:	3a01      	subs	r2, #1
 8005006:	0112      	lsls	r2, r2, #4
 8005008:	4311      	orrs	r1, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800500e:	0212      	lsls	r2, r2, #8
 8005010:	4311      	orrs	r1, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005016:	0852      	lsrs	r2, r2, #1
 8005018:	3a01      	subs	r2, #1
 800501a:	0552      	lsls	r2, r2, #21
 800501c:	4311      	orrs	r1, r2
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005022:	0852      	lsrs	r2, r2, #1
 8005024:	3a01      	subs	r2, #1
 8005026:	0652      	lsls	r2, r2, #25
 8005028:	4311      	orrs	r1, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800502e:	06d2      	lsls	r2, r2, #27
 8005030:	430a      	orrs	r2, r1
 8005032:	4943      	ldr	r1, [pc, #268]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 8005034:	4313      	orrs	r3, r2
 8005036:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005038:	4b41      	ldr	r3, [pc, #260]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a40      	ldr	r2, [pc, #256]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 800503e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005042:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005044:	4b3e      	ldr	r3, [pc, #248]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	4a3d      	ldr	r2, [pc, #244]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 800504a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800504e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fd fcd8 	bl	8002a04 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005058:	f7fd fcd4 	bl	8002a04 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e066      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506a:	4b35      	ldr	r3, [pc, #212]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x530>
 8005076:	e05e      	b.n	8005136 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005078:	4b31      	ldr	r3, [pc, #196]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a30      	ldr	r2, [pc, #192]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 800507e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fd fcbe 	bl	8002a04 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508c:	f7fd fcba 	bl	8002a04 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e04c      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800509e:	4b28      	ldr	r3, [pc, #160]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050aa:	4b25      	ldr	r3, [pc, #148]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	4924      	ldr	r1, [pc, #144]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 80050b0:	4b25      	ldr	r3, [pc, #148]	@ (8005148 <HAL_RCC_OscConfig+0x620>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	60cb      	str	r3, [r1, #12]
 80050b6:	e03e      	b.n	8005136 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e039      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80050c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005140 <HAL_RCC_OscConfig+0x618>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f003 0203 	and.w	r2, r3, #3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d12c      	bne.n	8005132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	3b01      	subs	r3, #1
 80050e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d123      	bne.n	8005132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d11b      	bne.n	8005132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d113      	bne.n	8005132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005114:	085b      	lsrs	r3, r3, #1
 8005116:	3b01      	subs	r3, #1
 8005118:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800511a:	429a      	cmp	r2, r3
 800511c:	d109      	bne.n	8005132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	3b01      	subs	r3, #1
 800512c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d001      	beq.n	8005136 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40021000 	.word	0x40021000
 8005144:	019f800c 	.word	0x019f800c
 8005148:	feeefffc 	.word	0xfeeefffc

0800514c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e11e      	b.n	80053a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005164:	4b91      	ldr	r3, [pc, #580]	@ (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d910      	bls.n	8005194 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b8e      	ldr	r3, [pc, #568]	@ (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 020f 	bic.w	r2, r3, #15
 800517a:	498c      	ldr	r1, [pc, #560]	@ (80053ac <HAL_RCC_ClockConfig+0x260>)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b8a      	ldr	r3, [pc, #552]	@ (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e106      	b.n	80053a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d073      	beq.n	8005288 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d129      	bne.n	80051fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a8:	4b81      	ldr	r3, [pc, #516]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0f4      	b.n	80053a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80051b8:	f000 f9ce 	bl	8005558 <RCC_GetSysClockFreqFromPLLSource>
 80051bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	4a7c      	ldr	r2, [pc, #496]	@ (80053b4 <HAL_RCC_ClockConfig+0x268>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d93f      	bls.n	8005246 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051c6:	4b7a      	ldr	r3, [pc, #488]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d033      	beq.n	8005246 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d12f      	bne.n	8005246 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051e6:	4b72      	ldr	r3, [pc, #456]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051ee:	4a70      	ldr	r2, [pc, #448]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80051f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051f6:	2380      	movs	r3, #128	@ 0x80
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	e024      	b.n	8005246 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d107      	bne.n	8005214 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005204:	4b6a      	ldr	r3, [pc, #424]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0c6      	b.n	80053a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005214:	4b66      	ldr	r3, [pc, #408]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0be      	b.n	80053a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005224:	f000 f8ce 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 8005228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	4a61      	ldr	r2, [pc, #388]	@ (80053b4 <HAL_RCC_ClockConfig+0x268>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d909      	bls.n	8005246 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005232:	4b5f      	ldr	r3, [pc, #380]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800523a:	4a5d      	ldr	r2, [pc, #372]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 800523c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005240:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005242:	2380      	movs	r3, #128	@ 0x80
 8005244:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005246:	4b5a      	ldr	r3, [pc, #360]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f023 0203 	bic.w	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4957      	ldr	r1, [pc, #348]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 8005254:	4313      	orrs	r3, r2
 8005256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005258:	f7fd fbd4 	bl	8002a04 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	e00a      	b.n	8005276 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005260:	f7fd fbd0 	bl	8002a04 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e095      	b.n	80053a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005276:	4b4e      	ldr	r3, [pc, #312]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 020c 	and.w	r2, r3, #12
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	429a      	cmp	r2, r3
 8005286:	d1eb      	bne.n	8005260 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d023      	beq.n	80052dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a0:	4b43      	ldr	r3, [pc, #268]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4a42      	ldr	r2, [pc, #264]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80052a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052b8:	4b3d      	ldr	r3, [pc, #244]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052c0:	4a3b      	ldr	r2, [pc, #236]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80052c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c8:	4b39      	ldr	r3, [pc, #228]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4936      	ldr	r1, [pc, #216]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	608b      	str	r3, [r1, #8]
 80052da:	e008      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2b80      	cmp	r3, #128	@ 0x80
 80052e0:	d105      	bne.n	80052ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052e2:	4b33      	ldr	r3, [pc, #204]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	4a32      	ldr	r2, [pc, #200]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 80052e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052ee:	4b2f      	ldr	r3, [pc, #188]	@ (80053ac <HAL_RCC_ClockConfig+0x260>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d21d      	bcs.n	8005338 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fc:	4b2b      	ldr	r3, [pc, #172]	@ (80053ac <HAL_RCC_ClockConfig+0x260>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f023 020f 	bic.w	r2, r3, #15
 8005304:	4929      	ldr	r1, [pc, #164]	@ (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800530c:	f7fd fb7a 	bl	8002a04 <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005312:	e00a      	b.n	800532a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005314:	f7fd fb76 	bl	8002a04 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d901      	bls.n	800532a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e03b      	b.n	80053a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b20      	ldr	r3, [pc, #128]	@ (80053ac <HAL_RCC_ClockConfig+0x260>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d1ed      	bne.n	8005314 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005344:	4b1a      	ldr	r3, [pc, #104]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4917      	ldr	r1, [pc, #92]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005362:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	490f      	ldr	r1, [pc, #60]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005376:	f000 f825 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 800537a:	4602      	mov	r2, r0
 800537c:	4b0c      	ldr	r3, [pc, #48]	@ (80053b0 <HAL_RCC_ClockConfig+0x264>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	490c      	ldr	r1, [pc, #48]	@ (80053b8 <HAL_RCC_ClockConfig+0x26c>)
 8005388:	5ccb      	ldrb	r3, [r1, r3]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	fa22 f303 	lsr.w	r3, r2, r3
 8005392:	4a0a      	ldr	r2, [pc, #40]	@ (80053bc <HAL_RCC_ClockConfig+0x270>)
 8005394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005396:	4b0a      	ldr	r3, [pc, #40]	@ (80053c0 <HAL_RCC_ClockConfig+0x274>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fc fb4a 	bl	8001a34 <HAL_InitTick>
 80053a0:	4603      	mov	r3, r0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40022000 	.word	0x40022000
 80053b0:	40021000 	.word	0x40021000
 80053b4:	04c4b400 	.word	0x04c4b400
 80053b8:	0800e978 	.word	0x0800e978
 80053bc:	20000000 	.word	0x20000000
 80053c0:	20000004 	.word	0x20000004

080053c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053ca:	4b2c      	ldr	r3, [pc, #176]	@ (800547c <HAL_RCC_GetSysClockFreq+0xb8>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d102      	bne.n	80053dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005480 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e047      	b.n	800546c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053dc:	4b27      	ldr	r3, [pc, #156]	@ (800547c <HAL_RCC_GetSysClockFreq+0xb8>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d102      	bne.n	80053ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053e8:	4b25      	ldr	r3, [pc, #148]	@ (8005480 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	e03e      	b.n	800546c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80053ee:	4b23      	ldr	r3, [pc, #140]	@ (800547c <HAL_RCC_GetSysClockFreq+0xb8>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d136      	bne.n	8005468 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053fa:	4b20      	ldr	r3, [pc, #128]	@ (800547c <HAL_RCC_GetSysClockFreq+0xb8>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005404:	4b1d      	ldr	r3, [pc, #116]	@ (800547c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	3301      	adds	r3, #1
 8005410:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b03      	cmp	r3, #3
 8005416:	d10c      	bne.n	8005432 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005418:	4a19      	ldr	r2, [pc, #100]	@ (8005480 <HAL_RCC_GetSysClockFreq+0xbc>)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005420:	4a16      	ldr	r2, [pc, #88]	@ (800547c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005422:	68d2      	ldr	r2, [r2, #12]
 8005424:	0a12      	lsrs	r2, r2, #8
 8005426:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	617b      	str	r3, [r7, #20]
      break;
 8005430:	e00c      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005432:	4a13      	ldr	r2, [pc, #76]	@ (8005480 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	fbb2 f3f3 	udiv	r3, r2, r3
 800543a:	4a10      	ldr	r2, [pc, #64]	@ (800547c <HAL_RCC_GetSysClockFreq+0xb8>)
 800543c:	68d2      	ldr	r2, [r2, #12]
 800543e:	0a12      	lsrs	r2, r2, #8
 8005440:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005444:	fb02 f303 	mul.w	r3, r2, r3
 8005448:	617b      	str	r3, [r7, #20]
      break;
 800544a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800544c:	4b0b      	ldr	r3, [pc, #44]	@ (800547c <HAL_RCC_GetSysClockFreq+0xb8>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	0e5b      	lsrs	r3, r3, #25
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	3301      	adds	r3, #1
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	fbb2 f3f3 	udiv	r3, r2, r3
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	e001      	b.n	800546c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800546c:	693b      	ldr	r3, [r7, #16]
}
 800546e:	4618      	mov	r0, r3
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40021000 	.word	0x40021000
 8005480:	00f42400 	.word	0x00f42400

08005484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005488:	4b03      	ldr	r3, [pc, #12]	@ (8005498 <HAL_RCC_GetHCLKFreq+0x14>)
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000000 	.word	0x20000000

0800549c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054a0:	f7ff fff0 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4904      	ldr	r1, [pc, #16]	@ (80054c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	0800e988 	.word	0x0800e988

080054c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054cc:	f7ff ffda 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	0adb      	lsrs	r3, r3, #11
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	4904      	ldr	r1, [pc, #16]	@ (80054f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054de:	5ccb      	ldrb	r3, [r1, r3]
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40021000 	.word	0x40021000
 80054f0:	0800e988 	.word	0x0800e988

080054f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	220f      	movs	r2, #15
 8005502:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005504:	4b12      	ldr	r3, [pc, #72]	@ (8005550 <HAL_RCC_GetClockConfig+0x5c>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 0203 	and.w	r2, r3, #3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005510:	4b0f      	ldr	r3, [pc, #60]	@ (8005550 <HAL_RCC_GetClockConfig+0x5c>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800551c:	4b0c      	ldr	r3, [pc, #48]	@ (8005550 <HAL_RCC_GetClockConfig+0x5c>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005528:	4b09      	ldr	r3, [pc, #36]	@ (8005550 <HAL_RCC_GetClockConfig+0x5c>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005536:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <HAL_RCC_GetClockConfig+0x60>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	601a      	str	r2, [r3, #0]
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40021000 	.word	0x40021000
 8005554:	40022000 	.word	0x40022000

08005558 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800555e:	4b1e      	ldr	r3, [pc, #120]	@ (80055d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005568:	4b1b      	ldr	r3, [pc, #108]	@ (80055d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	3301      	adds	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d10c      	bne.n	8005596 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800557c:	4a17      	ldr	r2, [pc, #92]	@ (80055dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	4a14      	ldr	r2, [pc, #80]	@ (80055d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005586:	68d2      	ldr	r2, [r2, #12]
 8005588:	0a12      	lsrs	r2, r2, #8
 800558a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	617b      	str	r3, [r7, #20]
    break;
 8005594:	e00c      	b.n	80055b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005596:	4a11      	ldr	r2, [pc, #68]	@ (80055dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	4a0e      	ldr	r2, [pc, #56]	@ (80055d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055a0:	68d2      	ldr	r2, [r2, #12]
 80055a2:	0a12      	lsrs	r2, r2, #8
 80055a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]
    break;
 80055ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055b0:	4b09      	ldr	r3, [pc, #36]	@ (80055d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	0e5b      	lsrs	r3, r3, #25
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	3301      	adds	r3, #1
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80055ca:	687b      	ldr	r3, [r7, #4]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	40021000 	.word	0x40021000
 80055dc:	00f42400 	.word	0x00f42400

080055e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055e8:	2300      	movs	r3, #0
 80055ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055ec:	2300      	movs	r3, #0
 80055ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8098 	beq.w	800572e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fe:	2300      	movs	r3, #0
 8005600:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005602:	4b43      	ldr	r3, [pc, #268]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10d      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800560e:	4b40      	ldr	r3, [pc, #256]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005612:	4a3f      	ldr	r2, [pc, #252]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005618:	6593      	str	r3, [r2, #88]	@ 0x58
 800561a:	4b3d      	ldr	r3, [pc, #244]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800561c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005626:	2301      	movs	r3, #1
 8005628:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800562a:	4b3a      	ldr	r3, [pc, #232]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a39      	ldr	r2, [pc, #228]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005634:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005636:	f7fd f9e5 	bl	8002a04 <HAL_GetTick>
 800563a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800563c:	e009      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563e:	f7fd f9e1 	bl	8002a04 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d902      	bls.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	74fb      	strb	r3, [r7, #19]
        break;
 8005650:	e005      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005652:	4b30      	ldr	r3, [pc, #192]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0ef      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d159      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005664:	4b2a      	ldr	r3, [pc, #168]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800566a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800566e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d01e      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	429a      	cmp	r2, r3
 800567e:	d019      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005680:	4b23      	ldr	r3, [pc, #140]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800568a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800568c:	4b20      	ldr	r3, [pc, #128]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005692:	4a1f      	ldr	r2, [pc, #124]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800569c:	4b1c      	ldr	r3, [pc, #112]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056ac:	4a18      	ldr	r2, [pc, #96]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d016      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fd f9a1 	bl	8002a04 <HAL_GetTick>
 80056c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056c4:	e00b      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7fd f99d 	bl	8002a04 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d902      	bls.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	74fb      	strb	r3, [r7, #19]
            break;
 80056dc:	e006      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056de:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0ec      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80056ec:	7cfb      	ldrb	r3, [r7, #19]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10b      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056f2:	4b07      	ldr	r3, [pc, #28]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	4903      	ldr	r1, [pc, #12]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005708:	e008      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800570a:	7cfb      	ldrb	r3, [r7, #19]
 800570c:	74bb      	strb	r3, [r7, #18]
 800570e:	e005      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005710:	40021000 	.word	0x40021000
 8005714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005718:	7cfb      	ldrb	r3, [r7, #19]
 800571a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800571c:	7c7b      	ldrb	r3, [r7, #17]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d105      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005722:	4ba6      	ldr	r3, [pc, #664]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	4aa5      	ldr	r2, [pc, #660]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005728:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800572c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800573a:	4ba0      	ldr	r3, [pc, #640]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800573c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005740:	f023 0203 	bic.w	r2, r3, #3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	499c      	ldr	r1, [pc, #624]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800575c:	4b97      	ldr	r3, [pc, #604]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005762:	f023 020c 	bic.w	r2, r3, #12
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	4994      	ldr	r1, [pc, #592]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800577e:	4b8f      	ldr	r3, [pc, #572]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005784:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	498b      	ldr	r1, [pc, #556]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057a0:	4b86      	ldr	r3, [pc, #536]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	4983      	ldr	r1, [pc, #524]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057c2:	4b7e      	ldr	r3, [pc, #504]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	497a      	ldr	r1, [pc, #488]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057e4:	4b75      	ldr	r3, [pc, #468]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	4972      	ldr	r1, [pc, #456]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005806:	4b6d      	ldr	r3, [pc, #436]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	4969      	ldr	r1, [pc, #420]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005828:	4b64      	ldr	r3, [pc, #400]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	4961      	ldr	r1, [pc, #388]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800584a:	4b5c      	ldr	r3, [pc, #368]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005850:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	4958      	ldr	r1, [pc, #352]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005868:	2b00      	cmp	r3, #0
 800586a:	d015      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800586c:	4b53      	ldr	r3, [pc, #332]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005872:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587a:	4950      	ldr	r1, [pc, #320]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800588a:	d105      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800588c:	4b4b      	ldr	r3, [pc, #300]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4a4a      	ldr	r2, [pc, #296]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005896:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d015      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058a4:	4b45      	ldr	r3, [pc, #276]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	4942      	ldr	r1, [pc, #264]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058c2:	d105      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c4:	4b3d      	ldr	r3, [pc, #244]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4a3c      	ldr	r2, [pc, #240]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d015      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058dc:	4b37      	ldr	r3, [pc, #220]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ea:	4934      	ldr	r1, [pc, #208]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058fa:	d105      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058fc:	4b2f      	ldr	r3, [pc, #188]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	4a2e      	ldr	r2, [pc, #184]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005906:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d015      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005914:	4b29      	ldr	r3, [pc, #164]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005922:	4926      	ldr	r1, [pc, #152]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005932:	d105      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005934:	4b21      	ldr	r3, [pc, #132]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4a20      	ldr	r2, [pc, #128]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800593a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800593e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800594c:	4b1b      	ldr	r3, [pc, #108]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005952:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595a:	4918      	ldr	r1, [pc, #96]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800596a:	d105      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800596c:	4b13      	ldr	r3, [pc, #76]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4a12      	ldr	r2, [pc, #72]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005976:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d015      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005984:	4b0d      	ldr	r3, [pc, #52]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005992:	490a      	ldr	r1, [pc, #40]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059a2:	d105      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059a4:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a04      	ldr	r2, [pc, #16]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80059b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000

080059c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e09d      	b.n	8005b0e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d108      	bne.n	80059ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059e2:	d009      	beq.n	80059f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	61da      	str	r2, [r3, #28]
 80059ea:	e005      	b.n	80059f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fb ffa2 	bl	800195c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a38:	d902      	bls.n	8005a40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e002      	b.n	8005a46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a4e:	d007      	beq.n	8005a60 <HAL_SPI_Init+0xa0>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa2:	ea42 0103 	orr.w	r1, r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aaa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	0c1b      	lsrs	r3, r3, #16
 8005abc:	f003 0204 	and.w	r2, r3, #4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005adc:	ea42 0103 	orr.w	r1, r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005afc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e049      	b.n	8005bbc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d106      	bne.n	8005b42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7fc fa6f 	bl	8002020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3304      	adds	r3, #4
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f000 fec3 	bl	80068e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d001      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e04a      	b.n	8005c72 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a21      	ldr	r2, [pc, #132]	@ (8005c80 <HAL_TIM_Base_Start_IT+0xbc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d018      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x6c>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c06:	d013      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x6c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c84 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00e      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x6c>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1c      	ldr	r2, [pc, #112]	@ (8005c88 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d009      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x6c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1a      	ldr	r2, [pc, #104]	@ (8005c8c <HAL_TIM_Base_Start_IT+0xc8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x6c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a19      	ldr	r2, [pc, #100]	@ (8005c90 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d115      	bne.n	8005c5c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	4b17      	ldr	r3, [pc, #92]	@ (8005c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b06      	cmp	r3, #6
 8005c40:	d015      	beq.n	8005c6e <HAL_TIM_Base_Start_IT+0xaa>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c48:	d011      	beq.n	8005c6e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0201 	orr.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5a:	e008      	b.n	8005c6e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e000      	b.n	8005c70 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40013400 	.word	0x40013400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	00010007 	.word	0x00010007

08005c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e049      	b.n	8005d3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f841 	bl	8005d46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f000 fe02 	bl	80068e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <HAL_TIM_PWM_Start+0x24>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	bf14      	ite	ne
 8005d78:	2301      	movne	r3, #1
 8005d7a:	2300      	moveq	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	e03c      	b.n	8005dfa <HAL_TIM_PWM_Start+0x9e>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d109      	bne.n	8005d9a <HAL_TIM_PWM_Start+0x3e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	bf14      	ite	ne
 8005d92:	2301      	movne	r3, #1
 8005d94:	2300      	moveq	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	e02f      	b.n	8005dfa <HAL_TIM_PWM_Start+0x9e>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d109      	bne.n	8005db4 <HAL_TIM_PWM_Start+0x58>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	bf14      	ite	ne
 8005dac:	2301      	movne	r3, #1
 8005dae:	2300      	moveq	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	e022      	b.n	8005dfa <HAL_TIM_PWM_Start+0x9e>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b0c      	cmp	r3, #12
 8005db8:	d109      	bne.n	8005dce <HAL_TIM_PWM_Start+0x72>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	bf14      	ite	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	2300      	moveq	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	e015      	b.n	8005dfa <HAL_TIM_PWM_Start+0x9e>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	d109      	bne.n	8005de8 <HAL_TIM_PWM_Start+0x8c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	bf14      	ite	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	2300      	moveq	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	e008      	b.n	8005dfa <HAL_TIM_PWM_Start+0x9e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	bf14      	ite	ne
 8005df4:	2301      	movne	r3, #1
 8005df6:	2300      	moveq	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e097      	b.n	8005f32 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_PWM_Start+0xb6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e10:	e023      	b.n	8005e5a <HAL_TIM_PWM_Start+0xfe>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d104      	bne.n	8005e22 <HAL_TIM_PWM_Start+0xc6>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e20:	e01b      	b.n	8005e5a <HAL_TIM_PWM_Start+0xfe>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d104      	bne.n	8005e32 <HAL_TIM_PWM_Start+0xd6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e30:	e013      	b.n	8005e5a <HAL_TIM_PWM_Start+0xfe>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b0c      	cmp	r3, #12
 8005e36:	d104      	bne.n	8005e42 <HAL_TIM_PWM_Start+0xe6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e40:	e00b      	b.n	8005e5a <HAL_TIM_PWM_Start+0xfe>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b10      	cmp	r3, #16
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0xf6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e50:	e003      	b.n	8005e5a <HAL_TIM_PWM_Start+0xfe>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 f96a 	bl	800713c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a33      	ldr	r2, [pc, #204]	@ (8005f3c <HAL_TIM_PWM_Start+0x1e0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_TIM_PWM_Start+0x13e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a32      	ldr	r2, [pc, #200]	@ (8005f40 <HAL_TIM_PWM_Start+0x1e4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_TIM_PWM_Start+0x13e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a30      	ldr	r2, [pc, #192]	@ (8005f44 <HAL_TIM_PWM_Start+0x1e8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_TIM_PWM_Start+0x13e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8005f48 <HAL_TIM_PWM_Start+0x1ec>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_TIM_PWM_Start+0x13e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2d      	ldr	r2, [pc, #180]	@ (8005f4c <HAL_TIM_PWM_Start+0x1f0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <HAL_TIM_PWM_Start+0x142>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <HAL_TIM_PWM_Start+0x144>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a20      	ldr	r2, [pc, #128]	@ (8005f3c <HAL_TIM_PWM_Start+0x1e0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d018      	beq.n	8005ef0 <HAL_TIM_PWM_Start+0x194>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec6:	d013      	beq.n	8005ef0 <HAL_TIM_PWM_Start+0x194>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a20      	ldr	r2, [pc, #128]	@ (8005f50 <HAL_TIM_PWM_Start+0x1f4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_TIM_PWM_Start+0x194>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8005f54 <HAL_TIM_PWM_Start+0x1f8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_TIM_PWM_Start+0x194>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a17      	ldr	r2, [pc, #92]	@ (8005f40 <HAL_TIM_PWM_Start+0x1e4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIM_PWM_Start+0x194>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a16      	ldr	r2, [pc, #88]	@ (8005f44 <HAL_TIM_PWM_Start+0x1e8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d115      	bne.n	8005f1c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	4b18      	ldr	r3, [pc, #96]	@ (8005f58 <HAL_TIM_PWM_Start+0x1fc>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b06      	cmp	r3, #6
 8005f00:	d015      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x1d2>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f08:	d011      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f042 0201 	orr.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1a:	e008      	b.n	8005f2e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e000      	b.n	8005f30 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40013400 	.word	0x40013400
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40014400 	.word	0x40014400
 8005f4c:	40014800 	.word	0x40014800
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	00010007 	.word	0x00010007

08005f5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 f8e4 	bl	800713c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a3e      	ldr	r2, [pc, #248]	@ (8006074 <HAL_TIM_PWM_Stop+0x118>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d013      	beq.n	8005fa6 <HAL_TIM_PWM_Stop+0x4a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a3d      	ldr	r2, [pc, #244]	@ (8006078 <HAL_TIM_PWM_Stop+0x11c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00e      	beq.n	8005fa6 <HAL_TIM_PWM_Stop+0x4a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a3b      	ldr	r2, [pc, #236]	@ (800607c <HAL_TIM_PWM_Stop+0x120>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d009      	beq.n	8005fa6 <HAL_TIM_PWM_Stop+0x4a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a3a      	ldr	r2, [pc, #232]	@ (8006080 <HAL_TIM_PWM_Stop+0x124>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d004      	beq.n	8005fa6 <HAL_TIM_PWM_Stop+0x4a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a38      	ldr	r2, [pc, #224]	@ (8006084 <HAL_TIM_PWM_Stop+0x128>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d101      	bne.n	8005faa <HAL_TIM_PWM_Stop+0x4e>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <HAL_TIM_PWM_Stop+0x50>
 8005faa:	2300      	movs	r3, #0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d017      	beq.n	8005fe0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6a1a      	ldr	r2, [r3, #32]
 8005fb6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10f      	bne.n	8005fe0 <HAL_TIM_PWM_Stop+0x84>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6a1a      	ldr	r2, [r3, #32]
 8005fc6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <HAL_TIM_PWM_Stop+0x84>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fde:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6a1a      	ldr	r2, [r3, #32]
 8005fe6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005fea:	4013      	ands	r3, r2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10f      	bne.n	8006010 <HAL_TIM_PWM_Stop+0xb4>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6a1a      	ldr	r2, [r3, #32]
 8005ff6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d107      	bne.n	8006010 <HAL_TIM_PWM_Stop+0xb4>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d104      	bne.n	8006020 <HAL_TIM_PWM_Stop+0xc4>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800601e:	e023      	b.n	8006068 <HAL_TIM_PWM_Stop+0x10c>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b04      	cmp	r3, #4
 8006024:	d104      	bne.n	8006030 <HAL_TIM_PWM_Stop+0xd4>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800602e:	e01b      	b.n	8006068 <HAL_TIM_PWM_Stop+0x10c>
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b08      	cmp	r3, #8
 8006034:	d104      	bne.n	8006040 <HAL_TIM_PWM_Stop+0xe4>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800603e:	e013      	b.n	8006068 <HAL_TIM_PWM_Stop+0x10c>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b0c      	cmp	r3, #12
 8006044:	d104      	bne.n	8006050 <HAL_TIM_PWM_Stop+0xf4>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800604e:	e00b      	b.n	8006068 <HAL_TIM_PWM_Stop+0x10c>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b10      	cmp	r3, #16
 8006054:	d104      	bne.n	8006060 <HAL_TIM_PWM_Stop+0x104>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800605e:	e003      	b.n	8006068 <HAL_TIM_PWM_Stop+0x10c>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800

08006088 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e097      	b.n	80061cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7fb ffd5 	bl	8002060 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80060cc:	f023 0307 	bic.w	r3, r3, #7
 80060d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3304      	adds	r3, #4
 80060da:	4619      	mov	r1, r3
 80060dc:	4610      	mov	r0, r2
 80060de:	f000 fbff 	bl	80068e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	4313      	orrs	r3, r2
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006128:	f023 030c 	bic.w	r3, r3, #12
 800612c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006134:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	4313      	orrs	r3, r2
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	011a      	lsls	r2, r3, #4
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	031b      	lsls	r3, r3, #12
 8006158:	4313      	orrs	r3, r2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006166:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	4313      	orrs	r3, r2
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d020      	beq.n	8006238 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01b      	beq.n	8006238 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0202 	mvn.w	r2, #2
 8006208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fb40 	bl	80068a4 <HAL_TIM_IC_CaptureCallback>
 8006224:	e005      	b.n	8006232 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fb32 	bl	8006890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fb43 	bl	80068b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d020      	beq.n	8006284 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01b      	beq.n	8006284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f06f 0204 	mvn.w	r2, #4
 8006254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2202      	movs	r2, #2
 800625a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fb1a 	bl	80068a4 <HAL_TIM_IC_CaptureCallback>
 8006270:	e005      	b.n	800627e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fb0c 	bl	8006890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fb1d 	bl	80068b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d020      	beq.n	80062d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01b      	beq.n	80062d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0208 	mvn.w	r2, #8
 80062a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2204      	movs	r2, #4
 80062a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 faf4 	bl	80068a4 <HAL_TIM_IC_CaptureCallback>
 80062bc:	e005      	b.n	80062ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fae6 	bl	8006890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 faf7 	bl	80068b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d020      	beq.n	800631c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01b      	beq.n	800631c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0210 	mvn.w	r2, #16
 80062ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2208      	movs	r2, #8
 80062f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 face 	bl	80068a4 <HAL_TIM_IC_CaptureCallback>
 8006308:	e005      	b.n	8006316 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fac0 	bl	8006890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fad1 	bl	80068b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00c      	beq.n	8006340 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d007      	beq.n	8006340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0201 	mvn.w	r2, #1
 8006338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fb fabb 	bl	80018b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00c      	beq.n	800636e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 f937 	bl	80075dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00c      	beq.n	8006392 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800638a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 f92f 	bl	80075f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00c      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fa8b 	bl	80068cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00c      	beq.n	80063da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f06f 0220 	mvn.w	r2, #32
 80063d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 f8f7 	bl	80075c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00c      	beq.n	80063fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80063f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 f903 	bl	8007604 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00c      	beq.n	8006422 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800641a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 f8fb 	bl	8007618 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00c      	beq.n	8006446 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800643e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 f8f3 	bl	800762c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00c      	beq.n	800646a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 f8eb 	bl	8007640 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800646a:	bf00      	nop
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800648e:	2302      	movs	r3, #2
 8006490:	e0ff      	b.n	8006692 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b14      	cmp	r3, #20
 800649e:	f200 80f0 	bhi.w	8006682 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064a2:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064fd 	.word	0x080064fd
 80064ac:	08006683 	.word	0x08006683
 80064b0:	08006683 	.word	0x08006683
 80064b4:	08006683 	.word	0x08006683
 80064b8:	0800653d 	.word	0x0800653d
 80064bc:	08006683 	.word	0x08006683
 80064c0:	08006683 	.word	0x08006683
 80064c4:	08006683 	.word	0x08006683
 80064c8:	0800657f 	.word	0x0800657f
 80064cc:	08006683 	.word	0x08006683
 80064d0:	08006683 	.word	0x08006683
 80064d4:	08006683 	.word	0x08006683
 80064d8:	080065bf 	.word	0x080065bf
 80064dc:	08006683 	.word	0x08006683
 80064e0:	08006683 	.word	0x08006683
 80064e4:	08006683 	.word	0x08006683
 80064e8:	08006601 	.word	0x08006601
 80064ec:	08006683 	.word	0x08006683
 80064f0:	08006683 	.word	0x08006683
 80064f4:	08006683 	.word	0x08006683
 80064f8:	08006641 	.word	0x08006641
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fa88 	bl	8006a18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699a      	ldr	r2, [r3, #24]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0208 	orr.w	r2, r2, #8
 8006516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0204 	bic.w	r2, r2, #4
 8006526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6999      	ldr	r1, [r3, #24]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	691a      	ldr	r2, [r3, #16]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	619a      	str	r2, [r3, #24]
      break;
 800653a:	e0a5      	b.n	8006688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 faf8 	bl	8006b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6999      	ldr	r1, [r3, #24]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	021a      	lsls	r2, r3, #8
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	619a      	str	r2, [r3, #24]
      break;
 800657c:	e084      	b.n	8006688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fb61 	bl	8006c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0208 	orr.w	r2, r2, #8
 8006598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0204 	bic.w	r2, r2, #4
 80065a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69d9      	ldr	r1, [r3, #28]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	61da      	str	r2, [r3, #28]
      break;
 80065bc:	e064      	b.n	8006688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fbc9 	bl	8006d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69d9      	ldr	r1, [r3, #28]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	021a      	lsls	r2, r3, #8
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	61da      	str	r2, [r3, #28]
      break;
 80065fe:	e043      	b.n	8006688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fc32 	bl	8006e70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0208 	orr.w	r2, r2, #8
 800661a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0204 	bic.w	r2, r2, #4
 800662a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	691a      	ldr	r2, [r3, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800663e:	e023      	b.n	8006688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fc76 	bl	8006f38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800665a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800666a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	021a      	lsls	r2, r3, #8
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006680:	e002      	b.n	8006688 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	75fb      	strb	r3, [r7, #23]
      break;
 8006686:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006690:	7dfb      	ldrb	r3, [r7, #23]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop

0800669c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_TIM_ConfigClockSource+0x1c>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e0de      	b.n	8006876 <HAL_TIM_ConfigClockSource+0x1da>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80066d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a63      	ldr	r2, [pc, #396]	@ (8006880 <HAL_TIM_ConfigClockSource+0x1e4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	f000 80a9 	beq.w	800684a <HAL_TIM_ConfigClockSource+0x1ae>
 80066f8:	4a61      	ldr	r2, [pc, #388]	@ (8006880 <HAL_TIM_ConfigClockSource+0x1e4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	f200 80ae 	bhi.w	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 8006700:	4a60      	ldr	r2, [pc, #384]	@ (8006884 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	f000 80a1 	beq.w	800684a <HAL_TIM_ConfigClockSource+0x1ae>
 8006708:	4a5e      	ldr	r2, [pc, #376]	@ (8006884 <HAL_TIM_ConfigClockSource+0x1e8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	f200 80a6 	bhi.w	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 8006710:	4a5d      	ldr	r2, [pc, #372]	@ (8006888 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006712:	4293      	cmp	r3, r2
 8006714:	f000 8099 	beq.w	800684a <HAL_TIM_ConfigClockSource+0x1ae>
 8006718:	4a5b      	ldr	r2, [pc, #364]	@ (8006888 <HAL_TIM_ConfigClockSource+0x1ec>)
 800671a:	4293      	cmp	r3, r2
 800671c:	f200 809e 	bhi.w	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 8006720:	4a5a      	ldr	r2, [pc, #360]	@ (800688c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	f000 8091 	beq.w	800684a <HAL_TIM_ConfigClockSource+0x1ae>
 8006728:	4a58      	ldr	r2, [pc, #352]	@ (800688c <HAL_TIM_ConfigClockSource+0x1f0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	f200 8096 	bhi.w	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 8006730:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006734:	f000 8089 	beq.w	800684a <HAL_TIM_ConfigClockSource+0x1ae>
 8006738:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800673c:	f200 808e 	bhi.w	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 8006740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006744:	d03e      	beq.n	80067c4 <HAL_TIM_ConfigClockSource+0x128>
 8006746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800674a:	f200 8087 	bhi.w	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006752:	f000 8086 	beq.w	8006862 <HAL_TIM_ConfigClockSource+0x1c6>
 8006756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675a:	d87f      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 800675c:	2b70      	cmp	r3, #112	@ 0x70
 800675e:	d01a      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0xfa>
 8006760:	2b70      	cmp	r3, #112	@ 0x70
 8006762:	d87b      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 8006764:	2b60      	cmp	r3, #96	@ 0x60
 8006766:	d050      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x16e>
 8006768:	2b60      	cmp	r3, #96	@ 0x60
 800676a:	d877      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 800676c:	2b50      	cmp	r3, #80	@ 0x50
 800676e:	d03c      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x14e>
 8006770:	2b50      	cmp	r3, #80	@ 0x50
 8006772:	d873      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 8006774:	2b40      	cmp	r3, #64	@ 0x40
 8006776:	d058      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x18e>
 8006778:	2b40      	cmp	r3, #64	@ 0x40
 800677a:	d86f      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 800677c:	2b30      	cmp	r3, #48	@ 0x30
 800677e:	d064      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x1ae>
 8006780:	2b30      	cmp	r3, #48	@ 0x30
 8006782:	d86b      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 8006784:	2b20      	cmp	r3, #32
 8006786:	d060      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x1ae>
 8006788:	2b20      	cmp	r3, #32
 800678a:	d867      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x1c0>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d05c      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x1ae>
 8006790:	2b10      	cmp	r3, #16
 8006792:	d05a      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x1ae>
 8006794:	e062      	b.n	800685c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067a6:	f000 fca9 	bl	80070fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	609a      	str	r2, [r3, #8]
      break;
 80067c2:	e04f      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067d4:	f000 fc92 	bl	80070fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067e6:	609a      	str	r2, [r3, #8]
      break;
 80067e8:	e03c      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f6:	461a      	mov	r2, r3
 80067f8:	f000 fc04 	bl	8007004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2150      	movs	r1, #80	@ 0x50
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fc5d 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006808:	e02c      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006816:	461a      	mov	r2, r3
 8006818:	f000 fc23 	bl	8007062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2160      	movs	r1, #96	@ 0x60
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fc4d 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006828:	e01c      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006836:	461a      	mov	r2, r3
 8006838:	f000 fbe4 	bl	8007004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2140      	movs	r1, #64	@ 0x40
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fc3d 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006848:	e00c      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f000 fc34 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 800685a:	e003      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
      break;
 8006860:	e000      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	00100070 	.word	0x00100070
 8006884:	00100040 	.word	0x00100040
 8006888:	00100030 	.word	0x00100030
 800688c:	00100020 	.word	0x00100020

08006890 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a42      	ldr	r2, [pc, #264]	@ (80069fc <TIM_Base_SetConfig+0x11c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00f      	beq.n	8006918 <TIM_Base_SetConfig+0x38>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fe:	d00b      	beq.n	8006918 <TIM_Base_SetConfig+0x38>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a3f      	ldr	r2, [pc, #252]	@ (8006a00 <TIM_Base_SetConfig+0x120>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d007      	beq.n	8006918 <TIM_Base_SetConfig+0x38>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a3e      	ldr	r2, [pc, #248]	@ (8006a04 <TIM_Base_SetConfig+0x124>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_Base_SetConfig+0x38>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a3d      	ldr	r2, [pc, #244]	@ (8006a08 <TIM_Base_SetConfig+0x128>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d108      	bne.n	800692a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a33      	ldr	r2, [pc, #204]	@ (80069fc <TIM_Base_SetConfig+0x11c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01b      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006938:	d017      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a30      	ldr	r2, [pc, #192]	@ (8006a00 <TIM_Base_SetConfig+0x120>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a2f      	ldr	r2, [pc, #188]	@ (8006a04 <TIM_Base_SetConfig+0x124>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00f      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a2e      	ldr	r2, [pc, #184]	@ (8006a08 <TIM_Base_SetConfig+0x128>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a2d      	ldr	r2, [pc, #180]	@ (8006a0c <TIM_Base_SetConfig+0x12c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d007      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2c      	ldr	r2, [pc, #176]	@ (8006a10 <TIM_Base_SetConfig+0x130>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_Base_SetConfig+0x8a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a2b      	ldr	r2, [pc, #172]	@ (8006a14 <TIM_Base_SetConfig+0x134>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a16      	ldr	r2, [pc, #88]	@ (80069fc <TIM_Base_SetConfig+0x11c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00f      	beq.n	80069c8 <TIM_Base_SetConfig+0xe8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a17      	ldr	r2, [pc, #92]	@ (8006a08 <TIM_Base_SetConfig+0x128>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00b      	beq.n	80069c8 <TIM_Base_SetConfig+0xe8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <TIM_Base_SetConfig+0x12c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_Base_SetConfig+0xe8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a15      	ldr	r2, [pc, #84]	@ (8006a10 <TIM_Base_SetConfig+0x130>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_Base_SetConfig+0xe8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a14      	ldr	r2, [pc, #80]	@ (8006a14 <TIM_Base_SetConfig+0x134>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d103      	bne.n	80069d0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d105      	bne.n	80069ee <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f023 0201 	bic.w	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	611a      	str	r2, [r3, #16]
  }
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40012c00 	.word	0x40012c00
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40013400 	.word	0x40013400
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40014400 	.word	0x40014400
 8006a14:	40014800 	.word	0x40014800

08006a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	f023 0201 	bic.w	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0303 	bic.w	r3, r3, #3
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f023 0302 	bic.w	r3, r3, #2
 8006a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a2c      	ldr	r2, [pc, #176]	@ (8006b24 <TIM_OC1_SetConfig+0x10c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00f      	beq.n	8006a98 <TIM_OC1_SetConfig+0x80>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a2b      	ldr	r2, [pc, #172]	@ (8006b28 <TIM_OC1_SetConfig+0x110>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00b      	beq.n	8006a98 <TIM_OC1_SetConfig+0x80>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a2a      	ldr	r2, [pc, #168]	@ (8006b2c <TIM_OC1_SetConfig+0x114>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d007      	beq.n	8006a98 <TIM_OC1_SetConfig+0x80>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a29      	ldr	r2, [pc, #164]	@ (8006b30 <TIM_OC1_SetConfig+0x118>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_OC1_SetConfig+0x80>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a28      	ldr	r2, [pc, #160]	@ (8006b34 <TIM_OC1_SetConfig+0x11c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d10c      	bne.n	8006ab2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f023 0308 	bic.w	r3, r3, #8
 8006a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f023 0304 	bic.w	r3, r3, #4
 8006ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b24 <TIM_OC1_SetConfig+0x10c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00f      	beq.n	8006ada <TIM_OC1_SetConfig+0xc2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a1a      	ldr	r2, [pc, #104]	@ (8006b28 <TIM_OC1_SetConfig+0x110>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00b      	beq.n	8006ada <TIM_OC1_SetConfig+0xc2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a19      	ldr	r2, [pc, #100]	@ (8006b2c <TIM_OC1_SetConfig+0x114>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d007      	beq.n	8006ada <TIM_OC1_SetConfig+0xc2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a18      	ldr	r2, [pc, #96]	@ (8006b30 <TIM_OC1_SetConfig+0x118>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d003      	beq.n	8006ada <TIM_OC1_SetConfig+0xc2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a17      	ldr	r2, [pc, #92]	@ (8006b34 <TIM_OC1_SetConfig+0x11c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d111      	bne.n	8006afe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	621a      	str	r2, [r3, #32]
}
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40013400 	.word	0x40013400
 8006b2c:	40014000 	.word	0x40014000
 8006b30:	40014400 	.word	0x40014400
 8006b34:	40014800 	.word	0x40014800

08006b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	f023 0210 	bic.w	r2, r3, #16
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f023 0320 	bic.w	r3, r3, #32
 8006b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a28      	ldr	r2, [pc, #160]	@ (8006c38 <TIM_OC2_SetConfig+0x100>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_OC2_SetConfig+0x6c>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a27      	ldr	r2, [pc, #156]	@ (8006c3c <TIM_OC2_SetConfig+0x104>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d10d      	bne.n	8006bc0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c38 <TIM_OC2_SetConfig+0x100>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00f      	beq.n	8006be8 <TIM_OC2_SetConfig+0xb0>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a1c      	ldr	r2, [pc, #112]	@ (8006c3c <TIM_OC2_SetConfig+0x104>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00b      	beq.n	8006be8 <TIM_OC2_SetConfig+0xb0>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c40 <TIM_OC2_SetConfig+0x108>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d007      	beq.n	8006be8 <TIM_OC2_SetConfig+0xb0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a1a      	ldr	r2, [pc, #104]	@ (8006c44 <TIM_OC2_SetConfig+0x10c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_OC2_SetConfig+0xb0>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a19      	ldr	r2, [pc, #100]	@ (8006c48 <TIM_OC2_SetConfig+0x110>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d113      	bne.n	8006c10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40012c00 	.word	0x40012c00
 8006c3c:	40013400 	.word	0x40013400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800

08006c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a27      	ldr	r2, [pc, #156]	@ (8006d48 <TIM_OC3_SetConfig+0xfc>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_OC3_SetConfig+0x6a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a26      	ldr	r2, [pc, #152]	@ (8006d4c <TIM_OC3_SetConfig+0x100>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d10d      	bne.n	8006cd2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d48 <TIM_OC3_SetConfig+0xfc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00f      	beq.n	8006cfa <TIM_OC3_SetConfig+0xae>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d4c <TIM_OC3_SetConfig+0x100>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00b      	beq.n	8006cfa <TIM_OC3_SetConfig+0xae>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8006d50 <TIM_OC3_SetConfig+0x104>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d007      	beq.n	8006cfa <TIM_OC3_SetConfig+0xae>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a19      	ldr	r2, [pc, #100]	@ (8006d54 <TIM_OC3_SetConfig+0x108>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d003      	beq.n	8006cfa <TIM_OC3_SetConfig+0xae>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a18      	ldr	r2, [pc, #96]	@ (8006d58 <TIM_OC3_SetConfig+0x10c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d113      	bne.n	8006d22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	621a      	str	r2, [r3, #32]
}
 8006d3c:	bf00      	nop
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40013400 	.word	0x40013400
 8006d50:	40014000 	.word	0x40014000
 8006d54:	40014400 	.word	0x40014400
 8006d58:	40014800 	.word	0x40014800

08006d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	031b      	lsls	r3, r3, #12
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a28      	ldr	r2, [pc, #160]	@ (8006e5c <TIM_OC4_SetConfig+0x100>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC4_SetConfig+0x6c>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a27      	ldr	r2, [pc, #156]	@ (8006e60 <TIM_OC4_SetConfig+0x104>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d10d      	bne.n	8006de4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	031b      	lsls	r3, r3, #12
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006de2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a1d      	ldr	r2, [pc, #116]	@ (8006e5c <TIM_OC4_SetConfig+0x100>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00f      	beq.n	8006e0c <TIM_OC4_SetConfig+0xb0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a1c      	ldr	r2, [pc, #112]	@ (8006e60 <TIM_OC4_SetConfig+0x104>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00b      	beq.n	8006e0c <TIM_OC4_SetConfig+0xb0>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e64 <TIM_OC4_SetConfig+0x108>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d007      	beq.n	8006e0c <TIM_OC4_SetConfig+0xb0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8006e68 <TIM_OC4_SetConfig+0x10c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_OC4_SetConfig+0xb0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a19      	ldr	r2, [pc, #100]	@ (8006e6c <TIM_OC4_SetConfig+0x110>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d113      	bne.n	8006e34 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	019b      	lsls	r3, r3, #6
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	019b      	lsls	r3, r3, #6
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40012c00 	.word	0x40012c00
 8006e60:	40013400 	.word	0x40013400
 8006e64:	40014000 	.word	0x40014000
 8006e68:	40014400 	.word	0x40014400
 8006e6c:	40014800 	.word	0x40014800

08006e70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006eb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	041b      	lsls	r3, r3, #16
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a17      	ldr	r2, [pc, #92]	@ (8006f24 <TIM_OC5_SetConfig+0xb4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00f      	beq.n	8006eea <TIM_OC5_SetConfig+0x7a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a16      	ldr	r2, [pc, #88]	@ (8006f28 <TIM_OC5_SetConfig+0xb8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <TIM_OC5_SetConfig+0x7a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a15      	ldr	r2, [pc, #84]	@ (8006f2c <TIM_OC5_SetConfig+0xbc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <TIM_OC5_SetConfig+0x7a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a14      	ldr	r2, [pc, #80]	@ (8006f30 <TIM_OC5_SetConfig+0xc0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_OC5_SetConfig+0x7a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a13      	ldr	r2, [pc, #76]	@ (8006f34 <TIM_OC5_SetConfig+0xc4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d109      	bne.n	8006efe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	621a      	str	r2, [r3, #32]
}
 8006f18:	bf00      	nop
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	40013400 	.word	0x40013400
 8006f2c:	40014000 	.word	0x40014000
 8006f30:	40014400 	.word	0x40014400
 8006f34:	40014800 	.word	0x40014800

08006f38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	021b      	lsls	r3, r3, #8
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	051b      	lsls	r3, r3, #20
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a18      	ldr	r2, [pc, #96]	@ (8006ff0 <TIM_OC6_SetConfig+0xb8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00f      	beq.n	8006fb4 <TIM_OC6_SetConfig+0x7c>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a17      	ldr	r2, [pc, #92]	@ (8006ff4 <TIM_OC6_SetConfig+0xbc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00b      	beq.n	8006fb4 <TIM_OC6_SetConfig+0x7c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a16      	ldr	r2, [pc, #88]	@ (8006ff8 <TIM_OC6_SetConfig+0xc0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d007      	beq.n	8006fb4 <TIM_OC6_SetConfig+0x7c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a15      	ldr	r2, [pc, #84]	@ (8006ffc <TIM_OC6_SetConfig+0xc4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d003      	beq.n	8006fb4 <TIM_OC6_SetConfig+0x7c>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a14      	ldr	r2, [pc, #80]	@ (8007000 <TIM_OC6_SetConfig+0xc8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d109      	bne.n	8006fc8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	029b      	lsls	r3, r3, #10
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	621a      	str	r2, [r3, #32]
}
 8006fe2:	bf00      	nop
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40013400 	.word	0x40013400
 8006ff8:	40014000 	.word	0x40014000
 8006ffc:	40014400 	.word	0x40014400
 8007000:	40014800 	.word	0x40014800

08007004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f023 0201 	bic.w	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800702e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f023 030a 	bic.w	r3, r3, #10
 8007040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007062:	b480      	push	{r7}
 8007064:	b087      	sub	sp, #28
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f023 0210 	bic.w	r2, r3, #16
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800708c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	031b      	lsls	r3, r3, #12
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800709e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80070d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f043 0307 	orr.w	r3, r3, #7
 80070e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	609a      	str	r2, [r3, #8]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	021a      	lsls	r2, r3, #8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	431a      	orrs	r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4313      	orrs	r3, r2
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	609a      	str	r2, [r3, #8]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2201      	movs	r2, #1
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a1a      	ldr	r2, [r3, #32]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	43db      	mvns	r3, r3
 800715e:	401a      	ands	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a1a      	ldr	r2, [r3, #32]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	fa01 f303 	lsl.w	r3, r1, r3
 8007174:	431a      	orrs	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d109      	bne.n	80071ac <HAL_TIMEx_PWMN_Start+0x24>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	bf14      	ite	ne
 80071a4:	2301      	movne	r3, #1
 80071a6:	2300      	moveq	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	e022      	b.n	80071f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d109      	bne.n	80071c6 <HAL_TIMEx_PWMN_Start+0x3e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	bf14      	ite	ne
 80071be:	2301      	movne	r3, #1
 80071c0:	2300      	moveq	r3, #0
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	e015      	b.n	80071f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d109      	bne.n	80071e0 <HAL_TIMEx_PWMN_Start+0x58>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	e008      	b.n	80071f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	bf14      	ite	ne
 80071ec:	2301      	movne	r3, #1
 80071ee:	2300      	moveq	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e069      	b.n	80072ce <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d104      	bne.n	800720a <HAL_TIMEx_PWMN_Start+0x82>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007208:	e013      	b.n	8007232 <HAL_TIMEx_PWMN_Start+0xaa>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b04      	cmp	r3, #4
 800720e:	d104      	bne.n	800721a <HAL_TIMEx_PWMN_Start+0x92>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007218:	e00b      	b.n	8007232 <HAL_TIMEx_PWMN_Start+0xaa>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b08      	cmp	r3, #8
 800721e:	d104      	bne.n	800722a <HAL_TIMEx_PWMN_Start+0xa2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007228:	e003      	b.n	8007232 <HAL_TIMEx_PWMN_Start+0xaa>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2204      	movs	r2, #4
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fa0a 	bl	8007654 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800724e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a20      	ldr	r2, [pc, #128]	@ (80072d8 <HAL_TIMEx_PWMN_Start+0x150>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d018      	beq.n	800728c <HAL_TIMEx_PWMN_Start+0x104>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007262:	d013      	beq.n	800728c <HAL_TIMEx_PWMN_Start+0x104>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1c      	ldr	r2, [pc, #112]	@ (80072dc <HAL_TIMEx_PWMN_Start+0x154>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00e      	beq.n	800728c <HAL_TIMEx_PWMN_Start+0x104>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1b      	ldr	r2, [pc, #108]	@ (80072e0 <HAL_TIMEx_PWMN_Start+0x158>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d009      	beq.n	800728c <HAL_TIMEx_PWMN_Start+0x104>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a19      	ldr	r2, [pc, #100]	@ (80072e4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <HAL_TIMEx_PWMN_Start+0x104>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a18      	ldr	r2, [pc, #96]	@ (80072e8 <HAL_TIMEx_PWMN_Start+0x160>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d115      	bne.n	80072b8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	4b16      	ldr	r3, [pc, #88]	@ (80072ec <HAL_TIMEx_PWMN_Start+0x164>)
 8007294:	4013      	ands	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b06      	cmp	r3, #6
 800729c:	d015      	beq.n	80072ca <HAL_TIMEx_PWMN_Start+0x142>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a4:	d011      	beq.n	80072ca <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f042 0201 	orr.w	r2, r2, #1
 80072b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b6:	e008      	b.n	80072ca <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	e000      	b.n	80072cc <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	40012c00 	.word	0x40012c00
 80072dc:	40000400 	.word	0x40000400
 80072e0:	40000800 	.word	0x40000800
 80072e4:	40013400 	.word	0x40013400
 80072e8:	40014000 	.word	0x40014000
 80072ec:	00010007 	.word	0x00010007

080072f0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2200      	movs	r2, #0
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f000 f9a6 	bl	8007654 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a1a      	ldr	r2, [r3, #32]
 800730e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007312:	4013      	ands	r3, r2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10f      	bne.n	8007338 <HAL_TIMEx_PWMN_Stop+0x48>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6a1a      	ldr	r2, [r3, #32]
 800731e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007322:	4013      	ands	r3, r2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d107      	bne.n	8007338 <HAL_TIMEx_PWMN_Stop+0x48>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007336:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6a1a      	ldr	r2, [r3, #32]
 800733e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007342:	4013      	ands	r3, r2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10f      	bne.n	8007368 <HAL_TIMEx_PWMN_Stop+0x78>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6a1a      	ldr	r2, [r3, #32]
 800734e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007352:	4013      	ands	r3, r2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d107      	bne.n	8007368 <HAL_TIMEx_PWMN_Stop+0x78>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0201 	bic.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d104      	bne.n	8007378 <HAL_TIMEx_PWMN_Stop+0x88>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007376:	e013      	b.n	80073a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b04      	cmp	r3, #4
 800737c:	d104      	bne.n	8007388 <HAL_TIMEx_PWMN_Stop+0x98>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007386:	e00b      	b.n	80073a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b08      	cmp	r3, #8
 800738c:	d104      	bne.n	8007398 <HAL_TIMEx_PWMN_Stop+0xa8>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007396:	e003      	b.n	80073a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e065      	b.n	8007490 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2c      	ldr	r2, [pc, #176]	@ (800749c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d004      	beq.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2b      	ldr	r2, [pc, #172]	@ (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d108      	bne.n	800740a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80073fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007414:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1b      	ldr	r2, [pc, #108]	@ (800749c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d018      	beq.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743a:	d013      	beq.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a18      	ldr	r2, [pc, #96]	@ (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00e      	beq.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a17      	ldr	r2, [pc, #92]	@ (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a12      	ldr	r2, [pc, #72]	@ (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a13      	ldr	r2, [pc, #76]	@ (80074ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d10c      	bne.n	800747e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800746a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	4313      	orrs	r3, r2
 8007474:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40013400 	.word	0x40013400
 80074a4:	40000400 	.word	0x40000400
 80074a8:	40000800 	.word	0x40000800
 80074ac:	40014000 	.word	0x40014000

080074b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e073      	b.n	80075b4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007532:	4313      	orrs	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	041b      	lsls	r3, r3, #16
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a19      	ldr	r2, [pc, #100]	@ (80075c0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d004      	beq.n	8007568 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a18      	ldr	r2, [pc, #96]	@ (80075c4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d11c      	bne.n	80075a2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007572:	051b      	lsls	r3, r3, #20
 8007574:	4313      	orrs	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007590:	4313      	orrs	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	4313      	orrs	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	40012c00 	.word	0x40012c00
 80075c4:	40013400 	.word	0x40013400

080075c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	2204      	movs	r2, #4
 8007668:	fa02 f303 	lsl.w	r3, r2, r3
 800766c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a1a      	ldr	r2, [r3, #32]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	43db      	mvns	r3, r3
 8007676:	401a      	ands	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a1a      	ldr	r2, [r3, #32]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	fa01 f303 	lsl.w	r3, r1, r3
 800768c:	431a      	orrs	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	621a      	str	r2, [r3, #32]
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e042      	b.n	8007736 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fa fe30 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2224      	movs	r2, #36	@ 0x24
 80076cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0201 	bic.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fee9 	bl	80084c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fc1a 	bl	8007f28 <UART_SetConfig>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e01b      	b.n	8007736 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800770c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800771c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f042 0201 	orr.w	r2, r2, #1
 800772c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 ff68 	bl	8008604 <UART_CheckIdleState>
 8007734:	4603      	mov	r3, r0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b08a      	sub	sp, #40	@ 0x28
 8007742:	af02      	add	r7, sp, #8
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007754:	2b20      	cmp	r3, #32
 8007756:	d17b      	bne.n	8007850 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_UART_Transmit+0x26>
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e074      	b.n	8007852 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2221      	movs	r2, #33	@ 0x21
 8007774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007778:	f7fb f944 	bl	8002a04 <HAL_GetTick>
 800777c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	88fa      	ldrh	r2, [r7, #6]
 8007782:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	88fa      	ldrh	r2, [r7, #6]
 800778a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007796:	d108      	bne.n	80077aa <HAL_UART_Transmit+0x6c>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d104      	bne.n	80077aa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077a0:	2300      	movs	r3, #0
 80077a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	61bb      	str	r3, [r7, #24]
 80077a8:	e003      	b.n	80077b2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077b2:	e030      	b.n	8007816 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2200      	movs	r2, #0
 80077bc:	2180      	movs	r1, #128	@ 0x80
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 ffca 	bl	8008758 <UART_WaitOnFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e03d      	b.n	8007852 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10b      	bne.n	80077f4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	461a      	mov	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	3302      	adds	r3, #2
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	e007      	b.n	8007804 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	3301      	adds	r3, #1
 8007802:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1c8      	bne.n	80077b4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2200      	movs	r2, #0
 800782a:	2140      	movs	r1, #64	@ 0x40
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 ff93 	bl	8008758 <UART_WaitOnFlagUntilTimeout>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2220      	movs	r2, #32
 800783c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e006      	b.n	8007852 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2220      	movs	r2, #32
 8007848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e000      	b.n	8007852 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007850:	2302      	movs	r3, #2
  }
}
 8007852:	4618      	mov	r0, r3
 8007854:	3720      	adds	r7, #32
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b0ba      	sub	sp, #232	@ 0xe8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007882:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007886:	f640 030f 	movw	r3, #2063	@ 0x80f
 800788a:	4013      	ands	r3, r2
 800788c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007894:	2b00      	cmp	r3, #0
 8007896:	d11b      	bne.n	80078d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d015      	beq.n	80078d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a8:	f003 0320 	and.w	r3, r3, #32
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d105      	bne.n	80078bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d009      	beq.n	80078d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8300 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	4798      	blx	r3
      }
      return;
 80078ce:	e2fa      	b.n	8007ec6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8123 	beq.w	8007b20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078de:	4b8d      	ldr	r3, [pc, #564]	@ (8007b14 <HAL_UART_IRQHandler+0x2b8>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80078ea:	4b8b      	ldr	r3, [pc, #556]	@ (8007b18 <HAL_UART_IRQHandler+0x2bc>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 8116 	beq.w	8007b20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d011      	beq.n	8007924 <HAL_UART_IRQHandler+0xc8>
 8007900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2201      	movs	r2, #1
 8007912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800791a:	f043 0201 	orr.w	r2, r3, #1
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d011      	beq.n	8007954 <HAL_UART_IRQHandler+0xf8>
 8007930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2202      	movs	r2, #2
 8007942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800794a:	f043 0204 	orr.w	r2, r3, #4
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d011      	beq.n	8007984 <HAL_UART_IRQHandler+0x128>
 8007960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2204      	movs	r2, #4
 8007972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800797a:	f043 0202 	orr.w	r2, r3, #2
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b00      	cmp	r3, #0
 800798e:	d017      	beq.n	80079c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d105      	bne.n	80079a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800799c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80079a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007b14 <HAL_UART_IRQHandler+0x2b8>)
 80079a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2208      	movs	r2, #8
 80079ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b6:	f043 0208 	orr.w	r2, r3, #8
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d012      	beq.n	80079f2 <HAL_UART_IRQHandler+0x196>
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00c      	beq.n	80079f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e8:	f043 0220 	orr.w	r2, r3, #32
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8266 	beq.w	8007eca <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d013      	beq.n	8007a32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d007      	beq.n	8007a32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a46:	2b40      	cmp	r3, #64	@ 0x40
 8007a48:	d005      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d054      	beq.n	8007b00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 feeb 	bl	8008832 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a66:	2b40      	cmp	r3, #64	@ 0x40
 8007a68:	d146      	bne.n	8007af8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3308      	adds	r3, #8
 8007a92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1d9      	bne.n	8007a6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d017      	beq.n	8007af0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac6:	4a15      	ldr	r2, [pc, #84]	@ (8007b1c <HAL_UART_IRQHandler+0x2c0>)
 8007ac8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fc fd74 	bl	80045be <HAL_DMA_Abort_IT>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d019      	beq.n	8007b10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007aea:	4610      	mov	r0, r2
 8007aec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aee:	e00f      	b.n	8007b10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7f9 fd11 	bl	8001518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af6:	e00b      	b.n	8007b10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7f9 fd0d 	bl	8001518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afe:	e007      	b.n	8007b10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7f9 fd09 	bl	8001518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007b0e:	e1dc      	b.n	8007eca <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b10:	bf00      	nop
    return;
 8007b12:	e1da      	b.n	8007eca <HAL_UART_IRQHandler+0x66e>
 8007b14:	10000001 	.word	0x10000001
 8007b18:	04000120 	.word	0x04000120
 8007b1c:	080088ff 	.word	0x080088ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	f040 8170 	bne.w	8007e0a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b2e:	f003 0310 	and.w	r3, r3, #16
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8169 	beq.w	8007e0a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b3c:	f003 0310 	and.w	r3, r3, #16
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 8162 	beq.w	8007e0a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2210      	movs	r2, #16
 8007b4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b58:	2b40      	cmp	r3, #64	@ 0x40
 8007b5a:	f040 80d8 	bne.w	8007d0e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 80af 	beq.w	8007cd4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b80:	429a      	cmp	r2, r3
 8007b82:	f080 80a7 	bcs.w	8007cd4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f040 8087 	bne.w	8007cb2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bd2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1da      	bne.n	8007ba4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c00:	f023 0301 	bic.w	r3, r3, #1
 8007c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e1      	bne.n	8007bee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e3      	bne.n	8007c2a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c80:	f023 0310 	bic.w	r3, r3, #16
 8007c84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e4      	bne.n	8007c70 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fc fc2d 	bl	800450c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f911 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007cd2:	e0fc      	b.n	8007ece <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	f040 80f5 	bne.w	8007ece <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	f040 80eb 	bne.w	8007ece <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f8f4 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
      return;
 8007d0c:	e0df      	b.n	8007ece <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80d1 	beq.w	8007ed2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 80cc 	beq.w	8007ed2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e4      	bne.n	8007d3a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d86:	f023 0301 	bic.w	r3, r3, #1
 8007d8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d98:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e1      	bne.n	8007d70 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f023 0310 	bic.w	r3, r3, #16
 8007dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007de2:	61fb      	str	r3, [r7, #28]
 8007de4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	69b9      	ldr	r1, [r7, #24]
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	617b      	str	r3, [r7, #20]
   return(result);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e4      	bne.n	8007dc0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f876 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e08:	e063      	b.n	8007ed2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00e      	beq.n	8007e34 <HAL_UART_IRQHandler+0x5d8>
 8007e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d008      	beq.n	8007e34 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fda7 	bl	8008980 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e32:	e051      	b.n	8007ed8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d014      	beq.n	8007e6a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d105      	bne.n	8007e58 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d008      	beq.n	8007e6a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d03a      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4798      	blx	r3
    }
    return;
 8007e68:	e035      	b.n	8007ed6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d009      	beq.n	8007e8a <HAL_UART_IRQHandler+0x62e>
 8007e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fd51 	bl	800892a <UART_EndTransmit_IT>
    return;
 8007e88:	e026      	b.n	8007ed8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <HAL_UART_IRQHandler+0x64e>
 8007e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fd80 	bl	80089a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ea8:	e016      	b.n	8007ed8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d010      	beq.n	8007ed8 <HAL_UART_IRQHandler+0x67c>
 8007eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	da0c      	bge.n	8007ed8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fd68 	bl	8008994 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ec4:	e008      	b.n	8007ed8 <HAL_UART_IRQHandler+0x67c>
      return;
 8007ec6:	bf00      	nop
 8007ec8:	e006      	b.n	8007ed8 <HAL_UART_IRQHandler+0x67c>
    return;
 8007eca:	bf00      	nop
 8007ecc:	e004      	b.n	8007ed8 <HAL_UART_IRQHandler+0x67c>
      return;
 8007ece:	bf00      	nop
 8007ed0:	e002      	b.n	8007ed8 <HAL_UART_IRQHandler+0x67c>
      return;
 8007ed2:	bf00      	nop
 8007ed4:	e000      	b.n	8007ed8 <HAL_UART_IRQHandler+0x67c>
    return;
 8007ed6:	bf00      	nop
  }
}
 8007ed8:	37e8      	adds	r7, #232	@ 0xe8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop

08007ee0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
	...

08007f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f2c:	b08c      	sub	sp, #48	@ 0x30
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	431a      	orrs	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	431a      	orrs	r2, r3
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4bab      	ldr	r3, [pc, #684]	@ (8008204 <UART_SetConfig+0x2dc>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	6812      	ldr	r2, [r2, #0]
 8007f5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f60:	430b      	orrs	r3, r1
 8007f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4aa0      	ldr	r2, [pc, #640]	@ (8008208 <UART_SetConfig+0x2e0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f90:	4313      	orrs	r3, r2
 8007f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb2:	f023 010f 	bic.w	r1, r3, #15
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a91      	ldr	r2, [pc, #580]	@ (800820c <UART_SetConfig+0x2e4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d125      	bne.n	8008018 <UART_SetConfig+0xf0>
 8007fcc:	4b90      	ldr	r3, [pc, #576]	@ (8008210 <UART_SetConfig+0x2e8>)
 8007fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d81a      	bhi.n	8008010 <UART_SetConfig+0xe8>
 8007fda:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe0 <UART_SetConfig+0xb8>)
 8007fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe0:	08007ff1 	.word	0x08007ff1
 8007fe4:	08008001 	.word	0x08008001
 8007fe8:	08007ff9 	.word	0x08007ff9
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff6:	e0d6      	b.n	80081a6 <UART_SetConfig+0x27e>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffe:	e0d2      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008000:	2304      	movs	r3, #4
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008006:	e0ce      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008008:	2308      	movs	r3, #8
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800e:	e0ca      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008010:	2310      	movs	r3, #16
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008016:	e0c6      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a7d      	ldr	r2, [pc, #500]	@ (8008214 <UART_SetConfig+0x2ec>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d138      	bne.n	8008094 <UART_SetConfig+0x16c>
 8008022:	4b7b      	ldr	r3, [pc, #492]	@ (8008210 <UART_SetConfig+0x2e8>)
 8008024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008028:	f003 030c 	and.w	r3, r3, #12
 800802c:	2b0c      	cmp	r3, #12
 800802e:	d82d      	bhi.n	800808c <UART_SetConfig+0x164>
 8008030:	a201      	add	r2, pc, #4	@ (adr r2, 8008038 <UART_SetConfig+0x110>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	0800806d 	.word	0x0800806d
 800803c:	0800808d 	.word	0x0800808d
 8008040:	0800808d 	.word	0x0800808d
 8008044:	0800808d 	.word	0x0800808d
 8008048:	0800807d 	.word	0x0800807d
 800804c:	0800808d 	.word	0x0800808d
 8008050:	0800808d 	.word	0x0800808d
 8008054:	0800808d 	.word	0x0800808d
 8008058:	08008075 	.word	0x08008075
 800805c:	0800808d 	.word	0x0800808d
 8008060:	0800808d 	.word	0x0800808d
 8008064:	0800808d 	.word	0x0800808d
 8008068:	08008085 	.word	0x08008085
 800806c:	2300      	movs	r3, #0
 800806e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008072:	e098      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008074:	2302      	movs	r3, #2
 8008076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807a:	e094      	b.n	80081a6 <UART_SetConfig+0x27e>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008082:	e090      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800808a:	e08c      	b.n	80081a6 <UART_SetConfig+0x27e>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008092:	e088      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a5f      	ldr	r2, [pc, #380]	@ (8008218 <UART_SetConfig+0x2f0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d125      	bne.n	80080ea <UART_SetConfig+0x1c2>
 800809e:	4b5c      	ldr	r3, [pc, #368]	@ (8008210 <UART_SetConfig+0x2e8>)
 80080a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80080a8:	2b30      	cmp	r3, #48	@ 0x30
 80080aa:	d016      	beq.n	80080da <UART_SetConfig+0x1b2>
 80080ac:	2b30      	cmp	r3, #48	@ 0x30
 80080ae:	d818      	bhi.n	80080e2 <UART_SetConfig+0x1ba>
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d00a      	beq.n	80080ca <UART_SetConfig+0x1a2>
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d814      	bhi.n	80080e2 <UART_SetConfig+0x1ba>
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <UART_SetConfig+0x19a>
 80080bc:	2b10      	cmp	r3, #16
 80080be:	d008      	beq.n	80080d2 <UART_SetConfig+0x1aa>
 80080c0:	e00f      	b.n	80080e2 <UART_SetConfig+0x1ba>
 80080c2:	2300      	movs	r3, #0
 80080c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c8:	e06d      	b.n	80081a6 <UART_SetConfig+0x27e>
 80080ca:	2302      	movs	r3, #2
 80080cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d0:	e069      	b.n	80081a6 <UART_SetConfig+0x27e>
 80080d2:	2304      	movs	r3, #4
 80080d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d8:	e065      	b.n	80081a6 <UART_SetConfig+0x27e>
 80080da:	2308      	movs	r3, #8
 80080dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e0:	e061      	b.n	80081a6 <UART_SetConfig+0x27e>
 80080e2:	2310      	movs	r3, #16
 80080e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e8:	e05d      	b.n	80081a6 <UART_SetConfig+0x27e>
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a4b      	ldr	r2, [pc, #300]	@ (800821c <UART_SetConfig+0x2f4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d125      	bne.n	8008140 <UART_SetConfig+0x218>
 80080f4:	4b46      	ldr	r3, [pc, #280]	@ (8008210 <UART_SetConfig+0x2e8>)
 80080f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80080fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008100:	d016      	beq.n	8008130 <UART_SetConfig+0x208>
 8008102:	2bc0      	cmp	r3, #192	@ 0xc0
 8008104:	d818      	bhi.n	8008138 <UART_SetConfig+0x210>
 8008106:	2b80      	cmp	r3, #128	@ 0x80
 8008108:	d00a      	beq.n	8008120 <UART_SetConfig+0x1f8>
 800810a:	2b80      	cmp	r3, #128	@ 0x80
 800810c:	d814      	bhi.n	8008138 <UART_SetConfig+0x210>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <UART_SetConfig+0x1f0>
 8008112:	2b40      	cmp	r3, #64	@ 0x40
 8008114:	d008      	beq.n	8008128 <UART_SetConfig+0x200>
 8008116:	e00f      	b.n	8008138 <UART_SetConfig+0x210>
 8008118:	2300      	movs	r3, #0
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811e:	e042      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008120:	2302      	movs	r3, #2
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008126:	e03e      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008128:	2304      	movs	r3, #4
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812e:	e03a      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008130:	2308      	movs	r3, #8
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008136:	e036      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008138:	2310      	movs	r3, #16
 800813a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813e:	e032      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a30      	ldr	r2, [pc, #192]	@ (8008208 <UART_SetConfig+0x2e0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d12a      	bne.n	80081a0 <UART_SetConfig+0x278>
 800814a:	4b31      	ldr	r3, [pc, #196]	@ (8008210 <UART_SetConfig+0x2e8>)
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008150:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008154:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008158:	d01a      	beq.n	8008190 <UART_SetConfig+0x268>
 800815a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800815e:	d81b      	bhi.n	8008198 <UART_SetConfig+0x270>
 8008160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008164:	d00c      	beq.n	8008180 <UART_SetConfig+0x258>
 8008166:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800816a:	d815      	bhi.n	8008198 <UART_SetConfig+0x270>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <UART_SetConfig+0x250>
 8008170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008174:	d008      	beq.n	8008188 <UART_SetConfig+0x260>
 8008176:	e00f      	b.n	8008198 <UART_SetConfig+0x270>
 8008178:	2300      	movs	r3, #0
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800817e:	e012      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008180:	2302      	movs	r3, #2
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008186:	e00e      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008188:	2304      	movs	r3, #4
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818e:	e00a      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008190:	2308      	movs	r3, #8
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008196:	e006      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008198:	2310      	movs	r3, #16
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800819e:	e002      	b.n	80081a6 <UART_SetConfig+0x27e>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a17      	ldr	r2, [pc, #92]	@ (8008208 <UART_SetConfig+0x2e0>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	f040 80a8 	bne.w	8008302 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081b6:	2b08      	cmp	r3, #8
 80081b8:	d834      	bhi.n	8008224 <UART_SetConfig+0x2fc>
 80081ba:	a201      	add	r2, pc, #4	@ (adr r2, 80081c0 <UART_SetConfig+0x298>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081e5 	.word	0x080081e5
 80081c4:	08008225 	.word	0x08008225
 80081c8:	080081ed 	.word	0x080081ed
 80081cc:	08008225 	.word	0x08008225
 80081d0:	080081f3 	.word	0x080081f3
 80081d4:	08008225 	.word	0x08008225
 80081d8:	08008225 	.word	0x08008225
 80081dc:	08008225 	.word	0x08008225
 80081e0:	080081fb 	.word	0x080081fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e4:	f7fd f95a 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 80081e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ea:	e021      	b.n	8008230 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008220 <UART_SetConfig+0x2f8>)
 80081ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081f0:	e01e      	b.n	8008230 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f2:	f7fd f8e7 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 80081f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081f8:	e01a      	b.n	8008230 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008200:	e016      	b.n	8008230 <UART_SetConfig+0x308>
 8008202:	bf00      	nop
 8008204:	cfff69f3 	.word	0xcfff69f3
 8008208:	40008000 	.word	0x40008000
 800820c:	40013800 	.word	0x40013800
 8008210:	40021000 	.word	0x40021000
 8008214:	40004400 	.word	0x40004400
 8008218:	40004800 	.word	0x40004800
 800821c:	40004c00 	.word	0x40004c00
 8008220:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800822e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 812a 	beq.w	800848c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823c:	4a9e      	ldr	r2, [pc, #632]	@ (80084b8 <UART_SetConfig+0x590>)
 800823e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008242:	461a      	mov	r2, r3
 8008244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008246:	fbb3 f3f2 	udiv	r3, r3, r2
 800824a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	4613      	mov	r3, r2
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	4413      	add	r3, r2
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	429a      	cmp	r2, r3
 800825a:	d305      	bcc.n	8008268 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	429a      	cmp	r2, r3
 8008266:	d903      	bls.n	8008270 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800826e:	e10d      	b.n	800848c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008272:	2200      	movs	r2, #0
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	60fa      	str	r2, [r7, #12]
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827c:	4a8e      	ldr	r2, [pc, #568]	@ (80084b8 <UART_SetConfig+0x590>)
 800827e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008282:	b29b      	uxth	r3, r3
 8008284:	2200      	movs	r2, #0
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008292:	f7f8 fd21 	bl	8000cd8 <__aeabi_uldivmod>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4610      	mov	r0, r2
 800829c:	4619      	mov	r1, r3
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	020b      	lsls	r3, r1, #8
 80082a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082ac:	0202      	lsls	r2, r0, #8
 80082ae:	6979      	ldr	r1, [r7, #20]
 80082b0:	6849      	ldr	r1, [r1, #4]
 80082b2:	0849      	lsrs	r1, r1, #1
 80082b4:	2000      	movs	r0, #0
 80082b6:	460c      	mov	r4, r1
 80082b8:	4605      	mov	r5, r0
 80082ba:	eb12 0804 	adds.w	r8, r2, r4
 80082be:	eb43 0905 	adc.w	r9, r3, r5
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	469a      	mov	sl, r3
 80082ca:	4693      	mov	fp, r2
 80082cc:	4652      	mov	r2, sl
 80082ce:	465b      	mov	r3, fp
 80082d0:	4640      	mov	r0, r8
 80082d2:	4649      	mov	r1, r9
 80082d4:	f7f8 fd00 	bl	8000cd8 <__aeabi_uldivmod>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4613      	mov	r3, r2
 80082de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082e6:	d308      	bcc.n	80082fa <UART_SetConfig+0x3d2>
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082ee:	d204      	bcs.n	80082fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6a3a      	ldr	r2, [r7, #32]
 80082f6:	60da      	str	r2, [r3, #12]
 80082f8:	e0c8      	b.n	800848c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008300:	e0c4      	b.n	800848c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800830a:	d167      	bne.n	80083dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800830c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008310:	2b08      	cmp	r3, #8
 8008312:	d828      	bhi.n	8008366 <UART_SetConfig+0x43e>
 8008314:	a201      	add	r2, pc, #4	@ (adr r2, 800831c <UART_SetConfig+0x3f4>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	08008341 	.word	0x08008341
 8008320:	08008349 	.word	0x08008349
 8008324:	08008351 	.word	0x08008351
 8008328:	08008367 	.word	0x08008367
 800832c:	08008357 	.word	0x08008357
 8008330:	08008367 	.word	0x08008367
 8008334:	08008367 	.word	0x08008367
 8008338:	08008367 	.word	0x08008367
 800833c:	0800835f 	.word	0x0800835f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008340:	f7fd f8ac 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8008344:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008346:	e014      	b.n	8008372 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008348:	f7fd f8be 	bl	80054c8 <HAL_RCC_GetPCLK2Freq>
 800834c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800834e:	e010      	b.n	8008372 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008350:	4b5a      	ldr	r3, [pc, #360]	@ (80084bc <UART_SetConfig+0x594>)
 8008352:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008354:	e00d      	b.n	8008372 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008356:	f7fd f835 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 800835a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800835c:	e009      	b.n	8008372 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008364:	e005      	b.n	8008372 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 8089 	beq.w	800848c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837e:	4a4e      	ldr	r2, [pc, #312]	@ (80084b8 <UART_SetConfig+0x590>)
 8008380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008384:	461a      	mov	r2, r3
 8008386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008388:	fbb3 f3f2 	udiv	r3, r3, r2
 800838c:	005a      	lsls	r2, r3, #1
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	441a      	add	r2, r3
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	fbb2 f3f3 	udiv	r3, r2, r3
 800839e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	2b0f      	cmp	r3, #15
 80083a4:	d916      	bls.n	80083d4 <UART_SetConfig+0x4ac>
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ac:	d212      	bcs.n	80083d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f023 030f 	bic.w	r3, r3, #15
 80083b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	085b      	lsrs	r3, r3, #1
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	8bfb      	ldrh	r3, [r7, #30]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	8bfa      	ldrh	r2, [r7, #30]
 80083d0:	60da      	str	r2, [r3, #12]
 80083d2:	e05b      	b.n	800848c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083da:	e057      	b.n	800848c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d828      	bhi.n	8008436 <UART_SetConfig+0x50e>
 80083e4:	a201      	add	r2, pc, #4	@ (adr r2, 80083ec <UART_SetConfig+0x4c4>)
 80083e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ea:	bf00      	nop
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008419 	.word	0x08008419
 80083f4:	08008421 	.word	0x08008421
 80083f8:	08008437 	.word	0x08008437
 80083fc:	08008427 	.word	0x08008427
 8008400:	08008437 	.word	0x08008437
 8008404:	08008437 	.word	0x08008437
 8008408:	08008437 	.word	0x08008437
 800840c:	0800842f 	.word	0x0800842f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008410:	f7fd f844 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8008414:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008416:	e014      	b.n	8008442 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008418:	f7fd f856 	bl	80054c8 <HAL_RCC_GetPCLK2Freq>
 800841c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800841e:	e010      	b.n	8008442 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008420:	4b26      	ldr	r3, [pc, #152]	@ (80084bc <UART_SetConfig+0x594>)
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008424:	e00d      	b.n	8008442 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008426:	f7fc ffcd 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 800842a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800842c:	e009      	b.n	8008442 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008434:	e005      	b.n	8008442 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008440:	bf00      	nop
    }

    if (pclk != 0U)
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d021      	beq.n	800848c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844c:	4a1a      	ldr	r2, [pc, #104]	@ (80084b8 <UART_SetConfig+0x590>)
 800844e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008452:	461a      	mov	r2, r3
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	fbb3 f2f2 	udiv	r2, r3, r2
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	441a      	add	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	fbb2 f3f3 	udiv	r3, r2, r3
 800846a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	2b0f      	cmp	r3, #15
 8008470:	d909      	bls.n	8008486 <UART_SetConfig+0x55e>
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008478:	d205      	bcs.n	8008486 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	b29a      	uxth	r2, r3
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	60da      	str	r2, [r3, #12]
 8008484:	e002      	b.n	800848c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2201      	movs	r2, #1
 8008490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2201      	movs	r2, #1
 8008498:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2200      	movs	r2, #0
 80084a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2200      	movs	r2, #0
 80084a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80084a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3730      	adds	r7, #48	@ 0x30
 80084b0:	46bd      	mov	sp, r7
 80084b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084b6:	bf00      	nop
 80084b8:	0800e990 	.word	0x0800e990
 80084bc:	00f42400 	.word	0x00f42400

080084c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084cc:	f003 0308 	and.w	r3, r3, #8
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00a      	beq.n	80084ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00a      	beq.n	800852e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008554:	f003 0310 	and.w	r3, r3, #16
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01a      	beq.n	80085d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085be:	d10a      	bne.n	80085d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	605a      	str	r2, [r3, #4]
  }
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b098      	sub	sp, #96	@ 0x60
 8008608:	af02      	add	r7, sp, #8
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008614:	f7fa f9f6 	bl	8002a04 <HAL_GetTick>
 8008618:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b08      	cmp	r3, #8
 8008626:	d12f      	bne.n	8008688 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008628:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008630:	2200      	movs	r2, #0
 8008632:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f88e 	bl	8008758 <UART_WaitOnFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d022      	beq.n	8008688 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008652:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008656:	653b      	str	r3, [r7, #80]	@ 0x50
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	461a      	mov	r2, r3
 800865e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008660:	647b      	str	r3, [r7, #68]	@ 0x44
 8008662:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800866e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e6      	bne.n	8008642 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e063      	b.n	8008750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0304 	and.w	r3, r3, #4
 8008692:	2b04      	cmp	r3, #4
 8008694:	d149      	bne.n	800872a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008696:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800869e:	2200      	movs	r2, #0
 80086a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f857 	bl	8008758 <UART_WaitOnFlagUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d03c      	beq.n	800872a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	623b      	str	r3, [r7, #32]
   return(result);
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80086d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e6      	bne.n	80086b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3308      	adds	r3, #8
 80086e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f023 0301 	bic.w	r3, r3, #1
 80086f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008702:	61fa      	str	r2, [r7, #28]
 8008704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	69b9      	ldr	r1, [r7, #24]
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	617b      	str	r3, [r7, #20]
   return(result);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e5      	bne.n	80086e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2220      	movs	r2, #32
 800871a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e012      	b.n	8008750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2220      	movs	r2, #32
 800872e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2220      	movs	r2, #32
 8008736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3758      	adds	r7, #88	@ 0x58
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	4613      	mov	r3, r2
 8008766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008768:	e04f      	b.n	800880a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008770:	d04b      	beq.n	800880a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008772:	f7fa f947 	bl	8002a04 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	429a      	cmp	r2, r3
 8008780:	d302      	bcc.n	8008788 <UART_WaitOnFlagUntilTimeout+0x30>
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e04e      	b.n	800882a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0304 	and.w	r3, r3, #4
 8008796:	2b00      	cmp	r3, #0
 8008798:	d037      	beq.n	800880a <UART_WaitOnFlagUntilTimeout+0xb2>
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2b80      	cmp	r3, #128	@ 0x80
 800879e:	d034      	beq.n	800880a <UART_WaitOnFlagUntilTimeout+0xb2>
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2b40      	cmp	r3, #64	@ 0x40
 80087a4:	d031      	beq.n	800880a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	f003 0308 	and.w	r3, r3, #8
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d110      	bne.n	80087d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2208      	movs	r2, #8
 80087ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 f838 	bl	8008832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2208      	movs	r2, #8
 80087c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e029      	b.n	800882a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087e4:	d111      	bne.n	800880a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 f81e 	bl	8008832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e00f      	b.n	800882a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69da      	ldr	r2, [r3, #28]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4013      	ands	r3, r2
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	429a      	cmp	r2, r3
 8008818:	bf0c      	ite	eq
 800881a:	2301      	moveq	r3, #1
 800881c:	2300      	movne	r3, #0
 800881e:	b2db      	uxtb	r3, r3
 8008820:	461a      	mov	r2, r3
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	429a      	cmp	r2, r3
 8008826:	d0a0      	beq.n	800876a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008832:	b480      	push	{r7}
 8008834:	b095      	sub	sp, #84	@ 0x54
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800884e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008858:	643b      	str	r3, [r7, #64]	@ 0x40
 800885a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800885e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e6      	bne.n	800883a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3308      	adds	r3, #8
 8008872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	61fb      	str	r3, [r7, #28]
   return(result);
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008882:	f023 0301 	bic.w	r3, r3, #1
 8008886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3308      	adds	r3, #8
 800888e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008890:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e3      	bne.n	800886c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d118      	bne.n	80088de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f023 0310 	bic.w	r3, r3, #16
 80088c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	6979      	ldr	r1, [r7, #20]
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	613b      	str	r3, [r7, #16]
   return(result);
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e6      	bne.n	80088ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80088f2:	bf00      	nop
 80088f4:	3754      	adds	r7, #84	@ 0x54
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f7f8 fdfb 	bl	8001518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008922:	bf00      	nop
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b088      	sub	sp, #32
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008946:	61fb      	str	r3, [r7, #28]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6979      	ldr	r1, [r7, #20]
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	613b      	str	r3, [r7, #16]
   return(result);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e6      	bne.n	8008932 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2220      	movs	r2, #32
 8008968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff fab4 	bl	8007ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008978:	bf00      	nop
 800897a:	3720      	adds	r7, #32
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d101      	bne.n	80089d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80089ce:	2302      	movs	r3, #2
 80089d0:	e027      	b.n	8008a22 <HAL_UARTEx_DisableFifoMode+0x66>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2224      	movs	r2, #36	@ 0x24
 80089de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0201 	bic.w	r2, r2, #1
 80089f8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2220      	movs	r2, #32
 8008a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d101      	bne.n	8008a46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a42:	2302      	movs	r3, #2
 8008a44:	e02d      	b.n	8008aa2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2224      	movs	r2, #36	@ 0x24
 8008a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 0201 	bic.w	r2, r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f850 	bl	8008b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e02d      	b.n	8008b1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2224      	movs	r2, #36	@ 0x24
 8008ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 0201 	bic.w	r2, r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f812 	bl	8008b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d108      	bne.n	8008b4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b48:	e031      	b.n	8008bae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b4e:	2308      	movs	r3, #8
 8008b50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	0e5b      	lsrs	r3, r3, #25
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	0f5b      	lsrs	r3, r3, #29
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 0307 	and.w	r3, r3, #7
 8008b70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	7b3a      	ldrb	r2, [r7, #12]
 8008b76:	4911      	ldr	r1, [pc, #68]	@ (8008bbc <UARTEx_SetNbDataToProcess+0x94>)
 8008b78:	5c8a      	ldrb	r2, [r1, r2]
 8008b7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b7e:	7b3a      	ldrb	r2, [r7, #12]
 8008b80:	490f      	ldr	r1, [pc, #60]	@ (8008bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8008b82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b84:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	7b7a      	ldrb	r2, [r7, #13]
 8008b94:	4909      	ldr	r1, [pc, #36]	@ (8008bbc <UARTEx_SetNbDataToProcess+0x94>)
 8008b96:	5c8a      	ldrb	r2, [r1, r2]
 8008b98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b9c:	7b7a      	ldrb	r2, [r7, #13]
 8008b9e:	4908      	ldr	r1, [pc, #32]	@ (8008bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8008ba0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ba2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	0800e9a8 	.word	0x0800e9a8
 8008bc0:	0800e9b0 	.word	0x0800e9b0

08008bc4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bd6:	2b84      	cmp	r3, #132	@ 0x84
 8008bd8:	d005      	beq.n	8008be6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008bda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4413      	add	r3, r2
 8008be2:	3303      	adds	r3, #3
 8008be4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008be6:	68fb      	ldr	r3, [r7, #12]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008bf8:	f000 fa74 	bl	80090e4 <vTaskStartScheduler>
  
  return osOK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008c02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c04:	b087      	sub	sp, #28
 8008c06:	af02      	add	r7, sp, #8
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685c      	ldr	r4, [r3, #4]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c18:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7ff ffcf 	bl	8008bc4 <makeFreeRtosPriority>
 8008c26:	4602      	mov	r2, r0
 8008c28:	f107 030c 	add.w	r3, r7, #12
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	9200      	str	r2, [sp, #0]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	4632      	mov	r2, r6
 8008c34:	4629      	mov	r1, r5
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 f8d2 	bl	8008de0 <xTaskCreate>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d001      	beq.n	8008c46 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	e000      	b.n	8008c48 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008c46:	68fb      	ldr	r3, [r7, #12]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <osDelay+0x16>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	e000      	b.n	8008c68 <osDelay+0x18>
 8008c66:	2301      	movs	r3, #1
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fa05 	bl	8009078 <vTaskDelay>
  
  return osOK;
 8008c6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f103 0208 	add.w	r2, r3, #8
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f103 0208 	add.w	r2, r3, #8
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f103 0208 	add.w	r2, r3, #8
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b085      	sub	sp, #20
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	601a      	str	r2, [r3, #0]
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b085      	sub	sp, #20
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d30:	d103      	bne.n	8008d3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	e00c      	b.n	8008d54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	e002      	b.n	8008d48 <vListInsert+0x2e>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d2f6      	bcs.n	8008d42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	601a      	str	r2, [r3, #0]
}
 8008d80:	bf00      	nop
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6892      	ldr	r2, [r2, #8]
 8008da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6852      	ldr	r2, [r2, #4]
 8008dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d103      	bne.n	8008dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	1e5a      	subs	r2, r3, #1
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08c      	sub	sp, #48	@ 0x30
 8008de4:	af04      	add	r7, sp, #16
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	4613      	mov	r3, r2
 8008dee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fec7 	bl	8009b88 <pvPortMalloc>
 8008dfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00e      	beq.n	8008e20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e02:	20a0      	movs	r0, #160	@ 0xa0
 8008e04:	f000 fec0 	bl	8009b88 <pvPortMalloc>
 8008e08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e16:	e005      	b.n	8008e24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e18:	6978      	ldr	r0, [r7, #20]
 8008e1a:	f000 ff83 	bl	8009d24 <vPortFree>
 8008e1e:	e001      	b.n	8008e24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e20:	2300      	movs	r3, #0
 8008e22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d013      	beq.n	8008e52 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e2a:	88fa      	ldrh	r2, [r7, #6]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9303      	str	r3, [sp, #12]
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f80f 	bl	8008e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e46:	69f8      	ldr	r0, [r7, #28]
 8008e48:	f000 f8ac 	bl	8008fa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	61bb      	str	r3, [r7, #24]
 8008e50:	e002      	b.n	8008e58 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e58:	69bb      	ldr	r3, [r7, #24]
	}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3720      	adds	r7, #32
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
	...

08008e64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	f023 0307 	bic.w	r3, r3, #7
 8008e8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00b      	beq.n	8008eae <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ea8:	bf00      	nop
 8008eaa:	bf00      	nop
 8008eac:	e7fd      	b.n	8008eaa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01f      	beq.n	8008ef4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	61fb      	str	r3, [r7, #28]
 8008eb8:	e012      	b.n	8008ee0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	7819      	ldrb	r1, [r3, #0]
 8008ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3334      	adds	r3, #52	@ 0x34
 8008eca:	460a      	mov	r2, r1
 8008ecc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d006      	beq.n	8008ee8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	3301      	adds	r3, #1
 8008ede:	61fb      	str	r3, [r7, #28]
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	2b0f      	cmp	r3, #15
 8008ee4:	d9e9      	bls.n	8008eba <prvInitialiseNewTask+0x56>
 8008ee6:	e000      	b.n	8008eea <prvInitialiseNewTask+0x86>
			{
				break;
 8008ee8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ef2:	e003      	b.n	8008efc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efe:	2b06      	cmp	r3, #6
 8008f00:	d901      	bls.n	8008f06 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f02:	2306      	movs	r3, #6
 8008f04:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f10:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	2200      	movs	r2, #0
 8008f16:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7ff fecb 	bl	8008cb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	3318      	adds	r3, #24
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff fec6 	bl	8008cb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f34:	f1c3 0207 	rsb	r2, r3, #7
 8008f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f40:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f54:	334c      	adds	r3, #76	@ 0x4c
 8008f56:	224c      	movs	r2, #76	@ 0x4c
 8008f58:	2100      	movs	r1, #0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f002 f898 	bl	800b090 <memset>
 8008f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f62:	4a0d      	ldr	r2, [pc, #52]	@ (8008f98 <prvInitialiseNewTask+0x134>)
 8008f64:	651a      	str	r2, [r3, #80]	@ 0x50
 8008f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f68:	4a0c      	ldr	r2, [pc, #48]	@ (8008f9c <prvInitialiseNewTask+0x138>)
 8008f6a:	655a      	str	r2, [r3, #84]	@ 0x54
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008fa0 <prvInitialiseNewTask+0x13c>)
 8008f70:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	68f9      	ldr	r1, [r7, #12]
 8008f76:	69b8      	ldr	r0, [r7, #24]
 8008f78:	f000 fbf2 	bl	8009760 <pxPortInitialiseStack>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f8e:	bf00      	nop
 8008f90:	3720      	adds	r7, #32
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	2000132c 	.word	0x2000132c
 8008f9c:	20001394 	.word	0x20001394
 8008fa0:	200013fc 	.word	0x200013fc

08008fa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fac:	f000 fd0c 	bl	80099c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800905c <prvAddNewTaskToReadyList+0xb8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	4a29      	ldr	r2, [pc, #164]	@ (800905c <prvAddNewTaskToReadyList+0xb8>)
 8008fb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fba:	4b29      	ldr	r3, [pc, #164]	@ (8009060 <prvAddNewTaskToReadyList+0xbc>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d109      	bne.n	8008fd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fc2:	4a27      	ldr	r2, [pc, #156]	@ (8009060 <prvAddNewTaskToReadyList+0xbc>)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fc8:	4b24      	ldr	r3, [pc, #144]	@ (800905c <prvAddNewTaskToReadyList+0xb8>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d110      	bne.n	8008ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fd0:	f000 fabc 	bl	800954c <prvInitialiseTaskLists>
 8008fd4:	e00d      	b.n	8008ff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008fd6:	4b23      	ldr	r3, [pc, #140]	@ (8009064 <prvAddNewTaskToReadyList+0xc0>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d109      	bne.n	8008ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fde:	4b20      	ldr	r3, [pc, #128]	@ (8009060 <prvAddNewTaskToReadyList+0xbc>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d802      	bhi.n	8008ff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008fec:	4a1c      	ldr	r2, [pc, #112]	@ (8009060 <prvAddNewTaskToReadyList+0xbc>)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8009068 <prvAddNewTaskToReadyList+0xc4>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8009068 <prvAddNewTaskToReadyList+0xc4>)
 8008ffa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009000:	2201      	movs	r2, #1
 8009002:	409a      	lsls	r2, r3
 8009004:	4b19      	ldr	r3, [pc, #100]	@ (800906c <prvAddNewTaskToReadyList+0xc8>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4313      	orrs	r3, r2
 800900a:	4a18      	ldr	r2, [pc, #96]	@ (800906c <prvAddNewTaskToReadyList+0xc8>)
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009012:	4613      	mov	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4a15      	ldr	r2, [pc, #84]	@ (8009070 <prvAddNewTaskToReadyList+0xcc>)
 800901c:	441a      	add	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	4619      	mov	r1, r3
 8009024:	4610      	mov	r0, r2
 8009026:	f7ff fe54 	bl	8008cd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800902a:	f000 fcff 	bl	8009a2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800902e:	4b0d      	ldr	r3, [pc, #52]	@ (8009064 <prvAddNewTaskToReadyList+0xc0>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00e      	beq.n	8009054 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009036:	4b0a      	ldr	r3, [pc, #40]	@ (8009060 <prvAddNewTaskToReadyList+0xbc>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009040:	429a      	cmp	r2, r3
 8009042:	d207      	bcs.n	8009054 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009044:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <prvAddNewTaskToReadyList+0xd0>)
 8009046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	200006d8 	.word	0x200006d8
 8009060:	200005d8 	.word	0x200005d8
 8009064:	200006e4 	.word	0x200006e4
 8009068:	200006f4 	.word	0x200006f4
 800906c:	200006e0 	.word	0x200006e0
 8009070:	200005dc 	.word	0x200005dc
 8009074:	e000ed04 	.word	0xe000ed04

08009078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d018      	beq.n	80090bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800908a:	4b14      	ldr	r3, [pc, #80]	@ (80090dc <vTaskDelay+0x64>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <vTaskDelay+0x32>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	60bb      	str	r3, [r7, #8]
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	e7fd      	b.n	80090a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090aa:	f000 f86d 	bl	8009188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090ae:	2100      	movs	r1, #0
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 faef 	bl	8009694 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090b6:	f000 f875 	bl	80091a4 <xTaskResumeAll>
 80090ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d107      	bne.n	80090d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80090c2:	4b07      	ldr	r3, [pc, #28]	@ (80090e0 <vTaskDelay+0x68>)
 80090c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20000700 	.word	0x20000700
 80090e0:	e000ed04 	.word	0xe000ed04

080090e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80090ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009168 <vTaskStartScheduler+0x84>)
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	2300      	movs	r3, #0
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	2300      	movs	r3, #0
 80090f4:	2280      	movs	r2, #128	@ 0x80
 80090f6:	491d      	ldr	r1, [pc, #116]	@ (800916c <vTaskStartScheduler+0x88>)
 80090f8:	481d      	ldr	r0, [pc, #116]	@ (8009170 <vTaskStartScheduler+0x8c>)
 80090fa:	f7ff fe71 	bl	8008de0 <xTaskCreate>
 80090fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d11b      	bne.n	800913e <vTaskStartScheduler+0x5a>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	60bb      	str	r3, [r7, #8]
}
 8009118:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800911a:	4b16      	ldr	r3, [pc, #88]	@ (8009174 <vTaskStartScheduler+0x90>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	334c      	adds	r3, #76	@ 0x4c
 8009120:	4a15      	ldr	r2, [pc, #84]	@ (8009178 <vTaskStartScheduler+0x94>)
 8009122:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009124:	4b15      	ldr	r3, [pc, #84]	@ (800917c <vTaskStartScheduler+0x98>)
 8009126:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800912a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800912c:	4b14      	ldr	r3, [pc, #80]	@ (8009180 <vTaskStartScheduler+0x9c>)
 800912e:	2201      	movs	r2, #1
 8009130:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009132:	4b14      	ldr	r3, [pc, #80]	@ (8009184 <vTaskStartScheduler+0xa0>)
 8009134:	2200      	movs	r2, #0
 8009136:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009138:	f000 fba2 	bl	8009880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800913c:	e00f      	b.n	800915e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009144:	d10b      	bne.n	800915e <vTaskStartScheduler+0x7a>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	607b      	str	r3, [r7, #4]
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	e7fd      	b.n	800915a <vTaskStartScheduler+0x76>
}
 800915e:	bf00      	nop
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	200006fc 	.word	0x200006fc
 800916c:	0800e970 	.word	0x0800e970
 8009170:	0800951d 	.word	0x0800951d
 8009174:	200005d8 	.word	0x200005d8
 8009178:	2000001c 	.word	0x2000001c
 800917c:	200006f8 	.word	0x200006f8
 8009180:	200006e4 	.word	0x200006e4
 8009184:	200006dc 	.word	0x200006dc

08009188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800918c:	4b04      	ldr	r3, [pc, #16]	@ (80091a0 <vTaskSuspendAll+0x18>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	4a03      	ldr	r2, [pc, #12]	@ (80091a0 <vTaskSuspendAll+0x18>)
 8009194:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009196:	bf00      	nop
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	20000700 	.word	0x20000700

080091a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091ae:	2300      	movs	r3, #0
 80091b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091b2:	4b42      	ldr	r3, [pc, #264]	@ (80092bc <xTaskResumeAll+0x118>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10b      	bne.n	80091d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	603b      	str	r3, [r7, #0]
}
 80091cc:	bf00      	nop
 80091ce:	bf00      	nop
 80091d0:	e7fd      	b.n	80091ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091d2:	f000 fbf9 	bl	80099c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091d6:	4b39      	ldr	r3, [pc, #228]	@ (80092bc <xTaskResumeAll+0x118>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3b01      	subs	r3, #1
 80091dc:	4a37      	ldr	r2, [pc, #220]	@ (80092bc <xTaskResumeAll+0x118>)
 80091de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e0:	4b36      	ldr	r3, [pc, #216]	@ (80092bc <xTaskResumeAll+0x118>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d161      	bne.n	80092ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091e8:	4b35      	ldr	r3, [pc, #212]	@ (80092c0 <xTaskResumeAll+0x11c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d05d      	beq.n	80092ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091f0:	e02e      	b.n	8009250 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091f2:	4b34      	ldr	r3, [pc, #208]	@ (80092c4 <xTaskResumeAll+0x120>)
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3318      	adds	r3, #24
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff fdc4 	bl	8008d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3304      	adds	r3, #4
 8009208:	4618      	mov	r0, r3
 800920a:	f7ff fdbf 	bl	8008d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009212:	2201      	movs	r2, #1
 8009214:	409a      	lsls	r2, r3
 8009216:	4b2c      	ldr	r3, [pc, #176]	@ (80092c8 <xTaskResumeAll+0x124>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4313      	orrs	r3, r2
 800921c:	4a2a      	ldr	r2, [pc, #168]	@ (80092c8 <xTaskResumeAll+0x124>)
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4a27      	ldr	r2, [pc, #156]	@ (80092cc <xTaskResumeAll+0x128>)
 800922e:	441a      	add	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3304      	adds	r3, #4
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f7ff fd4b 	bl	8008cd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009240:	4b23      	ldr	r3, [pc, #140]	@ (80092d0 <xTaskResumeAll+0x12c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009246:	429a      	cmp	r2, r3
 8009248:	d302      	bcc.n	8009250 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800924a:	4b22      	ldr	r3, [pc, #136]	@ (80092d4 <xTaskResumeAll+0x130>)
 800924c:	2201      	movs	r2, #1
 800924e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009250:	4b1c      	ldr	r3, [pc, #112]	@ (80092c4 <xTaskResumeAll+0x120>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1cc      	bne.n	80091f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800925e:	f000 f9f9 	bl	8009654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009262:	4b1d      	ldr	r3, [pc, #116]	@ (80092d8 <xTaskResumeAll+0x134>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d010      	beq.n	8009290 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800926e:	f000 f837 	bl	80092e0 <xTaskIncrementTick>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009278:	4b16      	ldr	r3, [pc, #88]	@ (80092d4 <xTaskResumeAll+0x130>)
 800927a:	2201      	movs	r2, #1
 800927c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	3b01      	subs	r3, #1
 8009282:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f1      	bne.n	800926e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800928a:	4b13      	ldr	r3, [pc, #76]	@ (80092d8 <xTaskResumeAll+0x134>)
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009290:	4b10      	ldr	r3, [pc, #64]	@ (80092d4 <xTaskResumeAll+0x130>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d009      	beq.n	80092ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009298:	2301      	movs	r3, #1
 800929a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800929c:	4b0f      	ldr	r3, [pc, #60]	@ (80092dc <xTaskResumeAll+0x138>)
 800929e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092ac:	f000 fbbe 	bl	8009a2c <vPortExitCritical>

	return xAlreadyYielded;
 80092b0:	68bb      	ldr	r3, [r7, #8]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20000700 	.word	0x20000700
 80092c0:	200006d8 	.word	0x200006d8
 80092c4:	20000698 	.word	0x20000698
 80092c8:	200006e0 	.word	0x200006e0
 80092cc:	200005dc 	.word	0x200005dc
 80092d0:	200005d8 	.word	0x200005d8
 80092d4:	200006ec 	.word	0x200006ec
 80092d8:	200006e8 	.word	0x200006e8
 80092dc:	e000ed04 	.word	0xe000ed04

080092e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ea:	4b4f      	ldr	r3, [pc, #316]	@ (8009428 <xTaskIncrementTick+0x148>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f040 808f 	bne.w	8009412 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092f4:	4b4d      	ldr	r3, [pc, #308]	@ (800942c <xTaskIncrementTick+0x14c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092fc:	4a4b      	ldr	r2, [pc, #300]	@ (800942c <xTaskIncrementTick+0x14c>)
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d121      	bne.n	800934c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009308:	4b49      	ldr	r3, [pc, #292]	@ (8009430 <xTaskIncrementTick+0x150>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	603b      	str	r3, [r7, #0]
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop
 8009328:	e7fd      	b.n	8009326 <xTaskIncrementTick+0x46>
 800932a:	4b41      	ldr	r3, [pc, #260]	@ (8009430 <xTaskIncrementTick+0x150>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	4b40      	ldr	r3, [pc, #256]	@ (8009434 <xTaskIncrementTick+0x154>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a3e      	ldr	r2, [pc, #248]	@ (8009430 <xTaskIncrementTick+0x150>)
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	4a3e      	ldr	r2, [pc, #248]	@ (8009434 <xTaskIncrementTick+0x154>)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	4b3e      	ldr	r3, [pc, #248]	@ (8009438 <xTaskIncrementTick+0x158>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3301      	adds	r3, #1
 8009344:	4a3c      	ldr	r2, [pc, #240]	@ (8009438 <xTaskIncrementTick+0x158>)
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	f000 f984 	bl	8009654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800934c:	4b3b      	ldr	r3, [pc, #236]	@ (800943c <xTaskIncrementTick+0x15c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	429a      	cmp	r2, r3
 8009354:	d348      	bcc.n	80093e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009356:	4b36      	ldr	r3, [pc, #216]	@ (8009430 <xTaskIncrementTick+0x150>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d104      	bne.n	800936a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009360:	4b36      	ldr	r3, [pc, #216]	@ (800943c <xTaskIncrementTick+0x15c>)
 8009362:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009366:	601a      	str	r2, [r3, #0]
					break;
 8009368:	e03e      	b.n	80093e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936a:	4b31      	ldr	r3, [pc, #196]	@ (8009430 <xTaskIncrementTick+0x150>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	429a      	cmp	r2, r3
 8009380:	d203      	bcs.n	800938a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009382:	4a2e      	ldr	r2, [pc, #184]	@ (800943c <xTaskIncrementTick+0x15c>)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009388:	e02e      	b.n	80093e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3304      	adds	r3, #4
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff fcfc 	bl	8008d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	3318      	adds	r3, #24
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7ff fcf3 	bl	8008d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093aa:	2201      	movs	r2, #1
 80093ac:	409a      	lsls	r2, r3
 80093ae:	4b24      	ldr	r3, [pc, #144]	@ (8009440 <xTaskIncrementTick+0x160>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	4a22      	ldr	r2, [pc, #136]	@ (8009440 <xTaskIncrementTick+0x160>)
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4a1f      	ldr	r2, [pc, #124]	@ (8009444 <xTaskIncrementTick+0x164>)
 80093c6:	441a      	add	r2, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f7ff fc7f 	bl	8008cd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009448 <xTaskIncrementTick+0x168>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093de:	429a      	cmp	r2, r3
 80093e0:	d3b9      	bcc.n	8009356 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80093e2:	2301      	movs	r3, #1
 80093e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093e6:	e7b6      	b.n	8009356 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093e8:	4b17      	ldr	r3, [pc, #92]	@ (8009448 <xTaskIncrementTick+0x168>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ee:	4915      	ldr	r1, [pc, #84]	@ (8009444 <xTaskIncrementTick+0x164>)
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d901      	bls.n	8009404 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009400:	2301      	movs	r3, #1
 8009402:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009404:	4b11      	ldr	r3, [pc, #68]	@ (800944c <xTaskIncrementTick+0x16c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d007      	beq.n	800941c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	617b      	str	r3, [r7, #20]
 8009410:	e004      	b.n	800941c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009412:	4b0f      	ldr	r3, [pc, #60]	@ (8009450 <xTaskIncrementTick+0x170>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3301      	adds	r3, #1
 8009418:	4a0d      	ldr	r2, [pc, #52]	@ (8009450 <xTaskIncrementTick+0x170>)
 800941a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800941c:	697b      	ldr	r3, [r7, #20]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20000700 	.word	0x20000700
 800942c:	200006dc 	.word	0x200006dc
 8009430:	20000690 	.word	0x20000690
 8009434:	20000694 	.word	0x20000694
 8009438:	200006f0 	.word	0x200006f0
 800943c:	200006f8 	.word	0x200006f8
 8009440:	200006e0 	.word	0x200006e0
 8009444:	200005dc 	.word	0x200005dc
 8009448:	200005d8 	.word	0x200005d8
 800944c:	200006ec 	.word	0x200006ec
 8009450:	200006e8 	.word	0x200006e8

08009454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800945a:	4b2a      	ldr	r3, [pc, #168]	@ (8009504 <vTaskSwitchContext+0xb0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009462:	4b29      	ldr	r3, [pc, #164]	@ (8009508 <vTaskSwitchContext+0xb4>)
 8009464:	2201      	movs	r2, #1
 8009466:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009468:	e045      	b.n	80094f6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800946a:	4b27      	ldr	r3, [pc, #156]	@ (8009508 <vTaskSwitchContext+0xb4>)
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009470:	4b26      	ldr	r3, [pc, #152]	@ (800950c <vTaskSwitchContext+0xb8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	fab3 f383 	clz	r3, r3
 800947c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800947e:	7afb      	ldrb	r3, [r7, #11]
 8009480:	f1c3 031f 	rsb	r3, r3, #31
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	4922      	ldr	r1, [pc, #136]	@ (8009510 <vTaskSwitchContext+0xbc>)
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	440b      	add	r3, r1
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10b      	bne.n	80094b2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	607b      	str	r3, [r7, #4]
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <vTaskSwitchContext+0x5a>
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4a14      	ldr	r2, [pc, #80]	@ (8009510 <vTaskSwitchContext+0xbc>)
 80094be:	4413      	add	r3, r2
 80094c0:	613b      	str	r3, [r7, #16]
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	605a      	str	r2, [r3, #4]
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	3308      	adds	r3, #8
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d104      	bne.n	80094e2 <vTaskSwitchContext+0x8e>
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	605a      	str	r2, [r3, #4]
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	4a0a      	ldr	r2, [pc, #40]	@ (8009514 <vTaskSwitchContext+0xc0>)
 80094ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094ec:	4b09      	ldr	r3, [pc, #36]	@ (8009514 <vTaskSwitchContext+0xc0>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	334c      	adds	r3, #76	@ 0x4c
 80094f2:	4a09      	ldr	r2, [pc, #36]	@ (8009518 <vTaskSwitchContext+0xc4>)
 80094f4:	6013      	str	r3, [r2, #0]
}
 80094f6:	bf00      	nop
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000700 	.word	0x20000700
 8009508:	200006ec 	.word	0x200006ec
 800950c:	200006e0 	.word	0x200006e0
 8009510:	200005dc 	.word	0x200005dc
 8009514:	200005d8 	.word	0x200005d8
 8009518:	2000001c 	.word	0x2000001c

0800951c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009524:	f000 f852 	bl	80095cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009528:	4b06      	ldr	r3, [pc, #24]	@ (8009544 <prvIdleTask+0x28>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d9f9      	bls.n	8009524 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009530:	4b05      	ldr	r3, [pc, #20]	@ (8009548 <prvIdleTask+0x2c>)
 8009532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009540:	e7f0      	b.n	8009524 <prvIdleTask+0x8>
 8009542:	bf00      	nop
 8009544:	200005dc 	.word	0x200005dc
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009552:	2300      	movs	r3, #0
 8009554:	607b      	str	r3, [r7, #4]
 8009556:	e00c      	b.n	8009572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4a12      	ldr	r2, [pc, #72]	@ (80095ac <prvInitialiseTaskLists+0x60>)
 8009564:	4413      	add	r3, r2
 8009566:	4618      	mov	r0, r3
 8009568:	f7ff fb86 	bl	8008c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3301      	adds	r3, #1
 8009570:	607b      	str	r3, [r7, #4]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b06      	cmp	r3, #6
 8009576:	d9ef      	bls.n	8009558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009578:	480d      	ldr	r0, [pc, #52]	@ (80095b0 <prvInitialiseTaskLists+0x64>)
 800957a:	f7ff fb7d 	bl	8008c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800957e:	480d      	ldr	r0, [pc, #52]	@ (80095b4 <prvInitialiseTaskLists+0x68>)
 8009580:	f7ff fb7a 	bl	8008c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009584:	480c      	ldr	r0, [pc, #48]	@ (80095b8 <prvInitialiseTaskLists+0x6c>)
 8009586:	f7ff fb77 	bl	8008c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800958a:	480c      	ldr	r0, [pc, #48]	@ (80095bc <prvInitialiseTaskLists+0x70>)
 800958c:	f7ff fb74 	bl	8008c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009590:	480b      	ldr	r0, [pc, #44]	@ (80095c0 <prvInitialiseTaskLists+0x74>)
 8009592:	f7ff fb71 	bl	8008c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009596:	4b0b      	ldr	r3, [pc, #44]	@ (80095c4 <prvInitialiseTaskLists+0x78>)
 8009598:	4a05      	ldr	r2, [pc, #20]	@ (80095b0 <prvInitialiseTaskLists+0x64>)
 800959a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800959c:	4b0a      	ldr	r3, [pc, #40]	@ (80095c8 <prvInitialiseTaskLists+0x7c>)
 800959e:	4a05      	ldr	r2, [pc, #20]	@ (80095b4 <prvInitialiseTaskLists+0x68>)
 80095a0:	601a      	str	r2, [r3, #0]
}
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	200005dc 	.word	0x200005dc
 80095b0:	20000668 	.word	0x20000668
 80095b4:	2000067c 	.word	0x2000067c
 80095b8:	20000698 	.word	0x20000698
 80095bc:	200006ac 	.word	0x200006ac
 80095c0:	200006c4 	.word	0x200006c4
 80095c4:	20000690 	.word	0x20000690
 80095c8:	20000694 	.word	0x20000694

080095cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095d2:	e019      	b.n	8009608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095d4:	f000 f9f8 	bl	80099c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d8:	4b10      	ldr	r3, [pc, #64]	@ (800961c <prvCheckTasksWaitingTermination+0x50>)
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7ff fbd1 	bl	8008d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009620 <prvCheckTasksWaitingTermination+0x54>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	4a0b      	ldr	r2, [pc, #44]	@ (8009620 <prvCheckTasksWaitingTermination+0x54>)
 80095f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009624 <prvCheckTasksWaitingTermination+0x58>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009624 <prvCheckTasksWaitingTermination+0x58>)
 80095fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095fe:	f000 fa15 	bl	8009a2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f810 	bl	8009628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009608:	4b06      	ldr	r3, [pc, #24]	@ (8009624 <prvCheckTasksWaitingTermination+0x58>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e1      	bne.n	80095d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200006ac 	.word	0x200006ac
 8009620:	200006d8 	.word	0x200006d8
 8009624:	200006c0 	.word	0x200006c0

08009628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	334c      	adds	r3, #76	@ 0x4c
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fd47 	bl	800b0c8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fb70 	bl	8009d24 <vPortFree>
			vPortFree( pxTCB );
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fb6d 	bl	8009d24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800964a:	bf00      	nop
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800965a:	4b0c      	ldr	r3, [pc, #48]	@ (800968c <prvResetNextTaskUnblockTime+0x38>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d104      	bne.n	800966e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009664:	4b0a      	ldr	r3, [pc, #40]	@ (8009690 <prvResetNextTaskUnblockTime+0x3c>)
 8009666:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800966a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800966c:	e008      	b.n	8009680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800966e:	4b07      	ldr	r3, [pc, #28]	@ (800968c <prvResetNextTaskUnblockTime+0x38>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	4a04      	ldr	r2, [pc, #16]	@ (8009690 <prvResetNextTaskUnblockTime+0x3c>)
 800967e:	6013      	str	r3, [r2, #0]
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20000690 	.word	0x20000690
 8009690:	200006f8 	.word	0x200006f8

08009694 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800969e:	4b29      	ldr	r3, [pc, #164]	@ (8009744 <prvAddCurrentTaskToDelayedList+0xb0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096a4:	4b28      	ldr	r3, [pc, #160]	@ (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3304      	adds	r3, #4
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff fb6e 	bl	8008d8c <uxListRemove>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10b      	bne.n	80096ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80096b6:	4b24      	ldr	r3, [pc, #144]	@ (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096bc:	2201      	movs	r2, #1
 80096be:	fa02 f303 	lsl.w	r3, r2, r3
 80096c2:	43da      	mvns	r2, r3
 80096c4:	4b21      	ldr	r3, [pc, #132]	@ (800974c <prvAddCurrentTaskToDelayedList+0xb8>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4013      	ands	r3, r2
 80096ca:	4a20      	ldr	r2, [pc, #128]	@ (800974c <prvAddCurrentTaskToDelayedList+0xb8>)
 80096cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096d4:	d10a      	bne.n	80096ec <prvAddCurrentTaskToDelayedList+0x58>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d007      	beq.n	80096ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3304      	adds	r3, #4
 80096e2:	4619      	mov	r1, r3
 80096e4:	481a      	ldr	r0, [pc, #104]	@ (8009750 <prvAddCurrentTaskToDelayedList+0xbc>)
 80096e6:	f7ff faf4 	bl	8008cd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096ea:	e026      	b.n	800973a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4413      	add	r3, r2
 80096f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096f4:	4b14      	ldr	r3, [pc, #80]	@ (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	429a      	cmp	r2, r3
 8009702:	d209      	bcs.n	8009718 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009704:	4b13      	ldr	r3, [pc, #76]	@ (8009754 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	4b0f      	ldr	r3, [pc, #60]	@ (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3304      	adds	r3, #4
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f7ff fb02 	bl	8008d1a <vListInsert>
}
 8009716:	e010      	b.n	800973a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009718:	4b0f      	ldr	r3, [pc, #60]	@ (8009758 <prvAddCurrentTaskToDelayedList+0xc4>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	4b0a      	ldr	r3, [pc, #40]	@ (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3304      	adds	r3, #4
 8009722:	4619      	mov	r1, r3
 8009724:	4610      	mov	r0, r2
 8009726:	f7ff faf8 	bl	8008d1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800972a:	4b0c      	ldr	r3, [pc, #48]	@ (800975c <prvAddCurrentTaskToDelayedList+0xc8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	429a      	cmp	r2, r3
 8009732:	d202      	bcs.n	800973a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009734:	4a09      	ldr	r2, [pc, #36]	@ (800975c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6013      	str	r3, [r2, #0]
}
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	200006dc 	.word	0x200006dc
 8009748:	200005d8 	.word	0x200005d8
 800974c:	200006e0 	.word	0x200006e0
 8009750:	200006c4 	.word	0x200006c4
 8009754:	20000694 	.word	0x20000694
 8009758:	20000690 	.word	0x20000690
 800975c:	200006f8 	.word	0x200006f8

08009760 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3b04      	subs	r3, #4
 8009770:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3b04      	subs	r3, #4
 800977e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	f023 0201 	bic.w	r2, r3, #1
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3b04      	subs	r3, #4
 800978e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009790:	4a0c      	ldr	r2, [pc, #48]	@ (80097c4 <pxPortInitialiseStack+0x64>)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3b14      	subs	r3, #20
 800979a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3b04      	subs	r3, #4
 80097a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f06f 0202 	mvn.w	r2, #2
 80097ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	3b20      	subs	r3, #32
 80097b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097b6:	68fb      	ldr	r3, [r7, #12]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	080097c9 	.word	0x080097c9

080097c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097d2:	4b13      	ldr	r3, [pc, #76]	@ (8009820 <prvTaskExitError+0x58>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097da:	d00b      	beq.n	80097f4 <prvTaskExitError+0x2c>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	60fb      	str	r3, [r7, #12]
}
 80097ee:	bf00      	nop
 80097f0:	bf00      	nop
 80097f2:	e7fd      	b.n	80097f0 <prvTaskExitError+0x28>
	__asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	60bb      	str	r3, [r7, #8]
}
 8009806:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009808:	bf00      	nop
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d0fc      	beq.n	800980a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	2000000c 	.word	0x2000000c
	...

08009830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009830:	4b07      	ldr	r3, [pc, #28]	@ (8009850 <pxCurrentTCBConst2>)
 8009832:	6819      	ldr	r1, [r3, #0]
 8009834:	6808      	ldr	r0, [r1, #0]
 8009836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983a:	f380 8809 	msr	PSP, r0
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f04f 0000 	mov.w	r0, #0
 8009846:	f380 8811 	msr	BASEPRI, r0
 800984a:	4770      	bx	lr
 800984c:	f3af 8000 	nop.w

08009850 <pxCurrentTCBConst2>:
 8009850:	200005d8 	.word	0x200005d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop

08009858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009858:	4808      	ldr	r0, [pc, #32]	@ (800987c <prvPortStartFirstTask+0x24>)
 800985a:	6800      	ldr	r0, [r0, #0]
 800985c:	6800      	ldr	r0, [r0, #0]
 800985e:	f380 8808 	msr	MSP, r0
 8009862:	f04f 0000 	mov.w	r0, #0
 8009866:	f380 8814 	msr	CONTROL, r0
 800986a:	b662      	cpsie	i
 800986c:	b661      	cpsie	f
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	df00      	svc	0
 8009878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800987a:	bf00      	nop
 800987c:	e000ed08 	.word	0xe000ed08

08009880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009886:	4b47      	ldr	r3, [pc, #284]	@ (80099a4 <xPortStartScheduler+0x124>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a47      	ldr	r2, [pc, #284]	@ (80099a8 <xPortStartScheduler+0x128>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d10b      	bne.n	80098a8 <xPortStartScheduler+0x28>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	613b      	str	r3, [r7, #16]
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098a8:	4b3e      	ldr	r3, [pc, #248]	@ (80099a4 <xPortStartScheduler+0x124>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a3f      	ldr	r2, [pc, #252]	@ (80099ac <xPortStartScheduler+0x12c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d10b      	bne.n	80098ca <xPortStartScheduler+0x4a>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	60fb      	str	r3, [r7, #12]
}
 80098c4:	bf00      	nop
 80098c6:	bf00      	nop
 80098c8:	e7fd      	b.n	80098c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098ca:	4b39      	ldr	r3, [pc, #228]	@ (80099b0 <xPortStartScheduler+0x130>)
 80098cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	22ff      	movs	r2, #255	@ 0xff
 80098da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	4b31      	ldr	r3, [pc, #196]	@ (80099b4 <xPortStartScheduler+0x134>)
 80098f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098f2:	4b31      	ldr	r3, [pc, #196]	@ (80099b8 <xPortStartScheduler+0x138>)
 80098f4:	2207      	movs	r2, #7
 80098f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098f8:	e009      	b.n	800990e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80098fa:	4b2f      	ldr	r3, [pc, #188]	@ (80099b8 <xPortStartScheduler+0x138>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3b01      	subs	r3, #1
 8009900:	4a2d      	ldr	r2, [pc, #180]	@ (80099b8 <xPortStartScheduler+0x138>)
 8009902:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	b2db      	uxtb	r3, r3
 800990c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009916:	2b80      	cmp	r3, #128	@ 0x80
 8009918:	d0ef      	beq.n	80098fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800991a:	4b27      	ldr	r3, [pc, #156]	@ (80099b8 <xPortStartScheduler+0x138>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f1c3 0307 	rsb	r3, r3, #7
 8009922:	2b04      	cmp	r3, #4
 8009924:	d00b      	beq.n	800993e <xPortStartScheduler+0xbe>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	60bb      	str	r3, [r7, #8]
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	e7fd      	b.n	800993a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800993e:	4b1e      	ldr	r3, [pc, #120]	@ (80099b8 <xPortStartScheduler+0x138>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	021b      	lsls	r3, r3, #8
 8009944:	4a1c      	ldr	r2, [pc, #112]	@ (80099b8 <xPortStartScheduler+0x138>)
 8009946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009948:	4b1b      	ldr	r3, [pc, #108]	@ (80099b8 <xPortStartScheduler+0x138>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009950:	4a19      	ldr	r2, [pc, #100]	@ (80099b8 <xPortStartScheduler+0x138>)
 8009952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	b2da      	uxtb	r2, r3
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800995c:	4b17      	ldr	r3, [pc, #92]	@ (80099bc <xPortStartScheduler+0x13c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a16      	ldr	r2, [pc, #88]	@ (80099bc <xPortStartScheduler+0x13c>)
 8009962:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009968:	4b14      	ldr	r3, [pc, #80]	@ (80099bc <xPortStartScheduler+0x13c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a13      	ldr	r2, [pc, #76]	@ (80099bc <xPortStartScheduler+0x13c>)
 800996e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009974:	f000 f8da 	bl	8009b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009978:	4b11      	ldr	r3, [pc, #68]	@ (80099c0 <xPortStartScheduler+0x140>)
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800997e:	f000 f8f9 	bl	8009b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009982:	4b10      	ldr	r3, [pc, #64]	@ (80099c4 <xPortStartScheduler+0x144>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a0f      	ldr	r2, [pc, #60]	@ (80099c4 <xPortStartScheduler+0x144>)
 8009988:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800998c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800998e:	f7ff ff63 	bl	8009858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009992:	f7ff fd5f 	bl	8009454 <vTaskSwitchContext>
	prvTaskExitError();
 8009996:	f7ff ff17 	bl	80097c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	e000ed00 	.word	0xe000ed00
 80099a8:	410fc271 	.word	0x410fc271
 80099ac:	410fc270 	.word	0x410fc270
 80099b0:	e000e400 	.word	0xe000e400
 80099b4:	20000704 	.word	0x20000704
 80099b8:	20000708 	.word	0x20000708
 80099bc:	e000ed20 	.word	0xe000ed20
 80099c0:	2000000c 	.word	0x2000000c
 80099c4:	e000ef34 	.word	0xe000ef34

080099c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	607b      	str	r3, [r7, #4]
}
 80099e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099e2:	4b10      	ldr	r3, [pc, #64]	@ (8009a24 <vPortEnterCritical+0x5c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3301      	adds	r3, #1
 80099e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009a24 <vPortEnterCritical+0x5c>)
 80099ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009a24 <vPortEnterCritical+0x5c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d110      	bne.n	8009a16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a28 <vPortEnterCritical+0x60>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <vPortEnterCritical+0x4e>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	603b      	str	r3, [r7, #0]
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	e7fd      	b.n	8009a12 <vPortEnterCritical+0x4a>
	}
}
 8009a16:	bf00      	nop
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	2000000c 	.word	0x2000000c
 8009a28:	e000ed04 	.word	0xe000ed04

08009a2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a32:	4b12      	ldr	r3, [pc, #72]	@ (8009a7c <vPortExitCritical+0x50>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10b      	bne.n	8009a52 <vPortExitCritical+0x26>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	607b      	str	r3, [r7, #4]
}
 8009a4c:	bf00      	nop
 8009a4e:	bf00      	nop
 8009a50:	e7fd      	b.n	8009a4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a52:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <vPortExitCritical+0x50>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	4a08      	ldr	r2, [pc, #32]	@ (8009a7c <vPortExitCritical+0x50>)
 8009a5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a5c:	4b07      	ldr	r3, [pc, #28]	@ (8009a7c <vPortExitCritical+0x50>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d105      	bne.n	8009a70 <vPortExitCritical+0x44>
 8009a64:	2300      	movs	r3, #0
 8009a66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	2000000c 	.word	0x2000000c

08009a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a80:	f3ef 8009 	mrs	r0, PSP
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	4b15      	ldr	r3, [pc, #84]	@ (8009ae0 <pxCurrentTCBConst>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	f01e 0f10 	tst.w	lr, #16
 8009a90:	bf08      	it	eq
 8009a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9a:	6010      	str	r0, [r2, #0]
 8009a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009aa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009aa4:	f380 8811 	msr	BASEPRI, r0
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f7ff fcd0 	bl	8009454 <vTaskSwitchContext>
 8009ab4:	f04f 0000 	mov.w	r0, #0
 8009ab8:	f380 8811 	msr	BASEPRI, r0
 8009abc:	bc09      	pop	{r0, r3}
 8009abe:	6819      	ldr	r1, [r3, #0]
 8009ac0:	6808      	ldr	r0, [r1, #0]
 8009ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac6:	f01e 0f10 	tst.w	lr, #16
 8009aca:	bf08      	it	eq
 8009acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ad0:	f380 8809 	msr	PSP, r0
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	f3af 8000 	nop.w

08009ae0 <pxCurrentTCBConst>:
 8009ae0:	200005d8 	.word	0x200005d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop

08009ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	607b      	str	r3, [r7, #4]
}
 8009b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b02:	f7ff fbed 	bl	80092e0 <xTaskIncrementTick>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b0c:	4b06      	ldr	r3, [pc, #24]	@ (8009b28 <SysTick_Handler+0x40>)
 8009b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	2300      	movs	r3, #0
 8009b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f383 8811 	msr	BASEPRI, r3
}
 8009b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	e000ed04 	.word	0xe000ed04

08009b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b30:	4b0b      	ldr	r3, [pc, #44]	@ (8009b60 <vPortSetupTimerInterrupt+0x34>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b36:	4b0b      	ldr	r3, [pc, #44]	@ (8009b64 <vPortSetupTimerInterrupt+0x38>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b68 <vPortSetupTimerInterrupt+0x3c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a0a      	ldr	r2, [pc, #40]	@ (8009b6c <vPortSetupTimerInterrupt+0x40>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	099b      	lsrs	r3, r3, #6
 8009b48:	4a09      	ldr	r2, [pc, #36]	@ (8009b70 <vPortSetupTimerInterrupt+0x44>)
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b4e:	4b04      	ldr	r3, [pc, #16]	@ (8009b60 <vPortSetupTimerInterrupt+0x34>)
 8009b50:	2207      	movs	r2, #7
 8009b52:	601a      	str	r2, [r3, #0]
}
 8009b54:	bf00      	nop
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	e000e010 	.word	0xe000e010
 8009b64:	e000e018 	.word	0xe000e018
 8009b68:	20000000 	.word	0x20000000
 8009b6c:	10624dd3 	.word	0x10624dd3
 8009b70:	e000e014 	.word	0xe000e014

08009b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b84 <vPortEnableVFP+0x10>
 8009b78:	6801      	ldr	r1, [r0, #0]
 8009b7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b7e:	6001      	str	r1, [r0, #0]
 8009b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b82:	bf00      	nop
 8009b84:	e000ed88 	.word	0xe000ed88

08009b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08a      	sub	sp, #40	@ 0x28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b90:	2300      	movs	r3, #0
 8009b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b94:	f7ff faf8 	bl	8009188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b98:	4b5c      	ldr	r3, [pc, #368]	@ (8009d0c <pvPortMalloc+0x184>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ba0:	f000 f924 	bl	8009dec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8009d10 <pvPortMalloc+0x188>)
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4013      	ands	r3, r2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f040 8095 	bne.w	8009cdc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d01e      	beq.n	8009bf6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009bb8:	2208      	movs	r2, #8
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f003 0307 	and.w	r3, r3, #7
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d015      	beq.n	8009bf6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f023 0307 	bic.w	r3, r3, #7
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <pvPortMalloc+0x6e>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	617b      	str	r3, [r7, #20]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d06f      	beq.n	8009cdc <pvPortMalloc+0x154>
 8009bfc:	4b45      	ldr	r3, [pc, #276]	@ (8009d14 <pvPortMalloc+0x18c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d86a      	bhi.n	8009cdc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c06:	4b44      	ldr	r3, [pc, #272]	@ (8009d18 <pvPortMalloc+0x190>)
 8009c08:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c0a:	4b43      	ldr	r3, [pc, #268]	@ (8009d18 <pvPortMalloc+0x190>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c10:	e004      	b.n	8009c1c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c14:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d903      	bls.n	8009c2e <pvPortMalloc+0xa6>
 8009c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1f1      	bne.n	8009c12 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c2e:	4b37      	ldr	r3, [pc, #220]	@ (8009d0c <pvPortMalloc+0x184>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d051      	beq.n	8009cdc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2208      	movs	r2, #8
 8009c3e:	4413      	add	r3, r2
 8009c40:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	1ad2      	subs	r2, r2, r3
 8009c52:	2308      	movs	r3, #8
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d920      	bls.n	8009c9c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4413      	add	r3, r2
 8009c60:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	f003 0307 	and.w	r3, r3, #7
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00b      	beq.n	8009c84 <pvPortMalloc+0xfc>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	613b      	str	r3, [r7, #16]
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	e7fd      	b.n	8009c80 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	1ad2      	subs	r2, r2, r3
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c96:	69b8      	ldr	r0, [r7, #24]
 8009c98:	f000 f90a 	bl	8009eb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009d14 <pvPortMalloc+0x18c>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8009d14 <pvPortMalloc+0x18c>)
 8009ca8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009caa:	4b1a      	ldr	r3, [pc, #104]	@ (8009d14 <pvPortMalloc+0x18c>)
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4b1b      	ldr	r3, [pc, #108]	@ (8009d1c <pvPortMalloc+0x194>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d203      	bcs.n	8009cbe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cb6:	4b17      	ldr	r3, [pc, #92]	@ (8009d14 <pvPortMalloc+0x18c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a18      	ldr	r2, [pc, #96]	@ (8009d1c <pvPortMalloc+0x194>)
 8009cbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	4b13      	ldr	r3, [pc, #76]	@ (8009d10 <pvPortMalloc+0x188>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cce:	2200      	movs	r2, #0
 8009cd0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009cd2:	4b13      	ldr	r3, [pc, #76]	@ (8009d20 <pvPortMalloc+0x198>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	4a11      	ldr	r2, [pc, #68]	@ (8009d20 <pvPortMalloc+0x198>)
 8009cda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cdc:	f7ff fa62 	bl	80091a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00b      	beq.n	8009d02 <pvPortMalloc+0x17a>
	__asm volatile
 8009cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	60fb      	str	r3, [r7, #12]
}
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	e7fd      	b.n	8009cfe <pvPortMalloc+0x176>
	return pvReturn;
 8009d02:	69fb      	ldr	r3, [r7, #28]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3728      	adds	r7, #40	@ 0x28
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	20001314 	.word	0x20001314
 8009d10:	20001328 	.word	0x20001328
 8009d14:	20001318 	.word	0x20001318
 8009d18:	2000130c 	.word	0x2000130c
 8009d1c:	2000131c 	.word	0x2000131c
 8009d20:	20001320 	.word	0x20001320

08009d24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d04f      	beq.n	8009dd6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d36:	2308      	movs	r3, #8
 8009d38:	425b      	negs	r3, r3
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	4b25      	ldr	r3, [pc, #148]	@ (8009de0 <vPortFree+0xbc>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10b      	bne.n	8009d6a <vPortFree+0x46>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	60fb      	str	r3, [r7, #12]
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop
 8009d68:	e7fd      	b.n	8009d66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00b      	beq.n	8009d8a <vPortFree+0x66>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	60bb      	str	r3, [r7, #8]
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	e7fd      	b.n	8009d86 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	4b14      	ldr	r3, [pc, #80]	@ (8009de0 <vPortFree+0xbc>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4013      	ands	r3, r2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01e      	beq.n	8009dd6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d11a      	bne.n	8009dd6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	4b0e      	ldr	r3, [pc, #56]	@ (8009de0 <vPortFree+0xbc>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	43db      	mvns	r3, r3
 8009daa:	401a      	ands	r2, r3
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009db0:	f7ff f9ea 	bl	8009188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	4b0a      	ldr	r3, [pc, #40]	@ (8009de4 <vPortFree+0xc0>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	4a09      	ldr	r2, [pc, #36]	@ (8009de4 <vPortFree+0xc0>)
 8009dc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dc2:	6938      	ldr	r0, [r7, #16]
 8009dc4:	f000 f874 	bl	8009eb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009dc8:	4b07      	ldr	r3, [pc, #28]	@ (8009de8 <vPortFree+0xc4>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	4a06      	ldr	r2, [pc, #24]	@ (8009de8 <vPortFree+0xc4>)
 8009dd0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009dd2:	f7ff f9e7 	bl	80091a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dd6:	bf00      	nop
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	20001328 	.word	0x20001328
 8009de4:	20001318 	.word	0x20001318
 8009de8:	20001324 	.word	0x20001324

08009dec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009df2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009df6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009df8:	4b27      	ldr	r3, [pc, #156]	@ (8009e98 <prvHeapInit+0xac>)
 8009dfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f003 0307 	and.w	r3, r3, #7
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00c      	beq.n	8009e20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3307      	adds	r3, #7
 8009e0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f023 0307 	bic.w	r3, r3, #7
 8009e12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8009e98 <prvHeapInit+0xac>)
 8009e1c:	4413      	add	r3, r2
 8009e1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e24:	4a1d      	ldr	r2, [pc, #116]	@ (8009e9c <prvHeapInit+0xb0>)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8009e9c <prvHeapInit+0xb0>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	4413      	add	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e38:	2208      	movs	r2, #8
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1a9b      	subs	r3, r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f023 0307 	bic.w	r3, r3, #7
 8009e46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4a15      	ldr	r2, [pc, #84]	@ (8009ea0 <prvHeapInit+0xb4>)
 8009e4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e4e:	4b14      	ldr	r3, [pc, #80]	@ (8009ea0 <prvHeapInit+0xb4>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2200      	movs	r2, #0
 8009e54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e56:	4b12      	ldr	r3, [pc, #72]	@ (8009ea0 <prvHeapInit+0xb4>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	1ad2      	subs	r2, r2, r3
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea0 <prvHeapInit+0xb4>)
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	4a0a      	ldr	r2, [pc, #40]	@ (8009ea4 <prvHeapInit+0xb8>)
 8009e7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	4a09      	ldr	r2, [pc, #36]	@ (8009ea8 <prvHeapInit+0xbc>)
 8009e82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e84:	4b09      	ldr	r3, [pc, #36]	@ (8009eac <prvHeapInit+0xc0>)
 8009e86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009e8a:	601a      	str	r2, [r3, #0]
}
 8009e8c:	bf00      	nop
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	2000070c 	.word	0x2000070c
 8009e9c:	2000130c 	.word	0x2000130c
 8009ea0:	20001314 	.word	0x20001314
 8009ea4:	2000131c 	.word	0x2000131c
 8009ea8:	20001318 	.word	0x20001318
 8009eac:	20001328 	.word	0x20001328

08009eb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009eb8:	4b28      	ldr	r3, [pc, #160]	@ (8009f5c <prvInsertBlockIntoFreeList+0xac>)
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e002      	b.n	8009ec4 <prvInsertBlockIntoFreeList+0x14>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d8f7      	bhi.n	8009ebe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	4413      	add	r3, r2
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d108      	bne.n	8009ef2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	441a      	add	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	441a      	add	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d118      	bne.n	8009f38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	4b15      	ldr	r3, [pc, #84]	@ (8009f60 <prvInsertBlockIntoFreeList+0xb0>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d00d      	beq.n	8009f2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	441a      	add	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	e008      	b.n	8009f40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009f60 <prvInsertBlockIntoFreeList+0xb0>)
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	e003      	b.n	8009f40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d002      	beq.n	8009f4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f4e:	bf00      	nop
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	2000130c 	.word	0x2000130c
 8009f60:	20001314 	.word	0x20001314

08009f64 <__cvt>:
 8009f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f68:	ec57 6b10 	vmov	r6, r7, d0
 8009f6c:	2f00      	cmp	r7, #0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	4619      	mov	r1, r3
 8009f72:	463b      	mov	r3, r7
 8009f74:	bfbb      	ittet	lt
 8009f76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f7a:	461f      	movlt	r7, r3
 8009f7c:	2300      	movge	r3, #0
 8009f7e:	232d      	movlt	r3, #45	@ 0x2d
 8009f80:	700b      	strb	r3, [r1, #0]
 8009f82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f88:	4691      	mov	r9, r2
 8009f8a:	f023 0820 	bic.w	r8, r3, #32
 8009f8e:	bfbc      	itt	lt
 8009f90:	4632      	movlt	r2, r6
 8009f92:	4616      	movlt	r6, r2
 8009f94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f98:	d005      	beq.n	8009fa6 <__cvt+0x42>
 8009f9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f9e:	d100      	bne.n	8009fa2 <__cvt+0x3e>
 8009fa0:	3401      	adds	r4, #1
 8009fa2:	2102      	movs	r1, #2
 8009fa4:	e000      	b.n	8009fa8 <__cvt+0x44>
 8009fa6:	2103      	movs	r1, #3
 8009fa8:	ab03      	add	r3, sp, #12
 8009faa:	9301      	str	r3, [sp, #4]
 8009fac:	ab02      	add	r3, sp, #8
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	ec47 6b10 	vmov	d0, r6, r7
 8009fb4:	4653      	mov	r3, sl
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	f001 f9de 	bl	800b378 <_dtoa_r>
 8009fbc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	d119      	bne.n	8009ff8 <__cvt+0x94>
 8009fc4:	f019 0f01 	tst.w	r9, #1
 8009fc8:	d00e      	beq.n	8009fe8 <__cvt+0x84>
 8009fca:	eb00 0904 	add.w	r9, r0, r4
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	f7f6 fd9f 	bl	8000b18 <__aeabi_dcmpeq>
 8009fda:	b108      	cbz	r0, 8009fe0 <__cvt+0x7c>
 8009fdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fe0:	2230      	movs	r2, #48	@ 0x30
 8009fe2:	9b03      	ldr	r3, [sp, #12]
 8009fe4:	454b      	cmp	r3, r9
 8009fe6:	d31e      	bcc.n	800a026 <__cvt+0xc2>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fec:	1b5b      	subs	r3, r3, r5
 8009fee:	4628      	mov	r0, r5
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	b004      	add	sp, #16
 8009ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ffc:	eb00 0904 	add.w	r9, r0, r4
 800a000:	d1e5      	bne.n	8009fce <__cvt+0x6a>
 800a002:	7803      	ldrb	r3, [r0, #0]
 800a004:	2b30      	cmp	r3, #48	@ 0x30
 800a006:	d10a      	bne.n	800a01e <__cvt+0xba>
 800a008:	2200      	movs	r2, #0
 800a00a:	2300      	movs	r3, #0
 800a00c:	4630      	mov	r0, r6
 800a00e:	4639      	mov	r1, r7
 800a010:	f7f6 fd82 	bl	8000b18 <__aeabi_dcmpeq>
 800a014:	b918      	cbnz	r0, 800a01e <__cvt+0xba>
 800a016:	f1c4 0401 	rsb	r4, r4, #1
 800a01a:	f8ca 4000 	str.w	r4, [sl]
 800a01e:	f8da 3000 	ldr.w	r3, [sl]
 800a022:	4499      	add	r9, r3
 800a024:	e7d3      	b.n	8009fce <__cvt+0x6a>
 800a026:	1c59      	adds	r1, r3, #1
 800a028:	9103      	str	r1, [sp, #12]
 800a02a:	701a      	strb	r2, [r3, #0]
 800a02c:	e7d9      	b.n	8009fe2 <__cvt+0x7e>

0800a02e <__exponent>:
 800a02e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a030:	2900      	cmp	r1, #0
 800a032:	bfba      	itte	lt
 800a034:	4249      	neglt	r1, r1
 800a036:	232d      	movlt	r3, #45	@ 0x2d
 800a038:	232b      	movge	r3, #43	@ 0x2b
 800a03a:	2909      	cmp	r1, #9
 800a03c:	7002      	strb	r2, [r0, #0]
 800a03e:	7043      	strb	r3, [r0, #1]
 800a040:	dd29      	ble.n	800a096 <__exponent+0x68>
 800a042:	f10d 0307 	add.w	r3, sp, #7
 800a046:	461d      	mov	r5, r3
 800a048:	270a      	movs	r7, #10
 800a04a:	461a      	mov	r2, r3
 800a04c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a050:	fb07 1416 	mls	r4, r7, r6, r1
 800a054:	3430      	adds	r4, #48	@ 0x30
 800a056:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a05a:	460c      	mov	r4, r1
 800a05c:	2c63      	cmp	r4, #99	@ 0x63
 800a05e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a062:	4631      	mov	r1, r6
 800a064:	dcf1      	bgt.n	800a04a <__exponent+0x1c>
 800a066:	3130      	adds	r1, #48	@ 0x30
 800a068:	1e94      	subs	r4, r2, #2
 800a06a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a06e:	1c41      	adds	r1, r0, #1
 800a070:	4623      	mov	r3, r4
 800a072:	42ab      	cmp	r3, r5
 800a074:	d30a      	bcc.n	800a08c <__exponent+0x5e>
 800a076:	f10d 0309 	add.w	r3, sp, #9
 800a07a:	1a9b      	subs	r3, r3, r2
 800a07c:	42ac      	cmp	r4, r5
 800a07e:	bf88      	it	hi
 800a080:	2300      	movhi	r3, #0
 800a082:	3302      	adds	r3, #2
 800a084:	4403      	add	r3, r0
 800a086:	1a18      	subs	r0, r3, r0
 800a088:	b003      	add	sp, #12
 800a08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a08c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a090:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a094:	e7ed      	b.n	800a072 <__exponent+0x44>
 800a096:	2330      	movs	r3, #48	@ 0x30
 800a098:	3130      	adds	r1, #48	@ 0x30
 800a09a:	7083      	strb	r3, [r0, #2]
 800a09c:	70c1      	strb	r1, [r0, #3]
 800a09e:	1d03      	adds	r3, r0, #4
 800a0a0:	e7f1      	b.n	800a086 <__exponent+0x58>
	...

0800a0a4 <_printf_float>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	b08d      	sub	sp, #52	@ 0x34
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a0b0:	4616      	mov	r6, r2
 800a0b2:	461f      	mov	r7, r3
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	f000 fff3 	bl	800b0a0 <_localeconv_r>
 800a0ba:	6803      	ldr	r3, [r0, #0]
 800a0bc:	9304      	str	r3, [sp, #16]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7f6 f8fe 	bl	80002c0 <strlen>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0cc:	9005      	str	r0, [sp, #20]
 800a0ce:	3307      	adds	r3, #7
 800a0d0:	f023 0307 	bic.w	r3, r3, #7
 800a0d4:	f103 0208 	add.w	r2, r3, #8
 800a0d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0dc:	f8d4 b000 	ldr.w	fp, [r4]
 800a0e0:	f8c8 2000 	str.w	r2, [r8]
 800a0e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0ec:	9307      	str	r3, [sp, #28]
 800a0ee:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a0f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0fa:	4b9c      	ldr	r3, [pc, #624]	@ (800a36c <_printf_float+0x2c8>)
 800a0fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a100:	f7f6 fd3c 	bl	8000b7c <__aeabi_dcmpun>
 800a104:	bb70      	cbnz	r0, 800a164 <_printf_float+0xc0>
 800a106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a10a:	4b98      	ldr	r3, [pc, #608]	@ (800a36c <_printf_float+0x2c8>)
 800a10c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a110:	f7f6 fd16 	bl	8000b40 <__aeabi_dcmple>
 800a114:	bb30      	cbnz	r0, 800a164 <_printf_float+0xc0>
 800a116:	2200      	movs	r2, #0
 800a118:	2300      	movs	r3, #0
 800a11a:	4640      	mov	r0, r8
 800a11c:	4649      	mov	r1, r9
 800a11e:	f7f6 fd05 	bl	8000b2c <__aeabi_dcmplt>
 800a122:	b110      	cbz	r0, 800a12a <_printf_float+0x86>
 800a124:	232d      	movs	r3, #45	@ 0x2d
 800a126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a12a:	4a91      	ldr	r2, [pc, #580]	@ (800a370 <_printf_float+0x2cc>)
 800a12c:	4b91      	ldr	r3, [pc, #580]	@ (800a374 <_printf_float+0x2d0>)
 800a12e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a132:	bf94      	ite	ls
 800a134:	4690      	movls	r8, r2
 800a136:	4698      	movhi	r8, r3
 800a138:	2303      	movs	r3, #3
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	f02b 0304 	bic.w	r3, fp, #4
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	f04f 0900 	mov.w	r9, #0
 800a146:	9700      	str	r7, [sp, #0]
 800a148:	4633      	mov	r3, r6
 800a14a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a14c:	4621      	mov	r1, r4
 800a14e:	4628      	mov	r0, r5
 800a150:	f000 f9d2 	bl	800a4f8 <_printf_common>
 800a154:	3001      	adds	r0, #1
 800a156:	f040 808d 	bne.w	800a274 <_printf_float+0x1d0>
 800a15a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a15e:	b00d      	add	sp, #52	@ 0x34
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a164:	4642      	mov	r2, r8
 800a166:	464b      	mov	r3, r9
 800a168:	4640      	mov	r0, r8
 800a16a:	4649      	mov	r1, r9
 800a16c:	f7f6 fd06 	bl	8000b7c <__aeabi_dcmpun>
 800a170:	b140      	cbz	r0, 800a184 <_printf_float+0xe0>
 800a172:	464b      	mov	r3, r9
 800a174:	2b00      	cmp	r3, #0
 800a176:	bfbc      	itt	lt
 800a178:	232d      	movlt	r3, #45	@ 0x2d
 800a17a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a17e:	4a7e      	ldr	r2, [pc, #504]	@ (800a378 <_printf_float+0x2d4>)
 800a180:	4b7e      	ldr	r3, [pc, #504]	@ (800a37c <_printf_float+0x2d8>)
 800a182:	e7d4      	b.n	800a12e <_printf_float+0x8a>
 800a184:	6863      	ldr	r3, [r4, #4]
 800a186:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a18a:	9206      	str	r2, [sp, #24]
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	d13b      	bne.n	800a208 <_printf_float+0x164>
 800a190:	2306      	movs	r3, #6
 800a192:	6063      	str	r3, [r4, #4]
 800a194:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a198:	2300      	movs	r3, #0
 800a19a:	6022      	str	r2, [r4, #0]
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a1a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a1a4:	ab09      	add	r3, sp, #36	@ 0x24
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	6861      	ldr	r1, [r4, #4]
 800a1aa:	ec49 8b10 	vmov	d0, r8, r9
 800a1ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f7ff fed6 	bl	8009f64 <__cvt>
 800a1b8:	9b06      	ldr	r3, [sp, #24]
 800a1ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1bc:	2b47      	cmp	r3, #71	@ 0x47
 800a1be:	4680      	mov	r8, r0
 800a1c0:	d129      	bne.n	800a216 <_printf_float+0x172>
 800a1c2:	1cc8      	adds	r0, r1, #3
 800a1c4:	db02      	blt.n	800a1cc <_printf_float+0x128>
 800a1c6:	6863      	ldr	r3, [r4, #4]
 800a1c8:	4299      	cmp	r1, r3
 800a1ca:	dd41      	ble.n	800a250 <_printf_float+0x1ac>
 800a1cc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1d0:	fa5f fa8a 	uxtb.w	sl, sl
 800a1d4:	3901      	subs	r1, #1
 800a1d6:	4652      	mov	r2, sl
 800a1d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a1dc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1de:	f7ff ff26 	bl	800a02e <__exponent>
 800a1e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1e4:	1813      	adds	r3, r2, r0
 800a1e6:	2a01      	cmp	r2, #1
 800a1e8:	4681      	mov	r9, r0
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	dc02      	bgt.n	800a1f4 <_printf_float+0x150>
 800a1ee:	6822      	ldr	r2, [r4, #0]
 800a1f0:	07d2      	lsls	r2, r2, #31
 800a1f2:	d501      	bpl.n	800a1f8 <_printf_float+0x154>
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	6123      	str	r3, [r4, #16]
 800a1f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d0a2      	beq.n	800a146 <_printf_float+0xa2>
 800a200:	232d      	movs	r3, #45	@ 0x2d
 800a202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a206:	e79e      	b.n	800a146 <_printf_float+0xa2>
 800a208:	9a06      	ldr	r2, [sp, #24]
 800a20a:	2a47      	cmp	r2, #71	@ 0x47
 800a20c:	d1c2      	bne.n	800a194 <_printf_float+0xf0>
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1c0      	bne.n	800a194 <_printf_float+0xf0>
 800a212:	2301      	movs	r3, #1
 800a214:	e7bd      	b.n	800a192 <_printf_float+0xee>
 800a216:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a21a:	d9db      	bls.n	800a1d4 <_printf_float+0x130>
 800a21c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a220:	d118      	bne.n	800a254 <_printf_float+0x1b0>
 800a222:	2900      	cmp	r1, #0
 800a224:	6863      	ldr	r3, [r4, #4]
 800a226:	dd0b      	ble.n	800a240 <_printf_float+0x19c>
 800a228:	6121      	str	r1, [r4, #16]
 800a22a:	b913      	cbnz	r3, 800a232 <_printf_float+0x18e>
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	07d0      	lsls	r0, r2, #31
 800a230:	d502      	bpl.n	800a238 <_printf_float+0x194>
 800a232:	3301      	adds	r3, #1
 800a234:	440b      	add	r3, r1
 800a236:	6123      	str	r3, [r4, #16]
 800a238:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a23a:	f04f 0900 	mov.w	r9, #0
 800a23e:	e7db      	b.n	800a1f8 <_printf_float+0x154>
 800a240:	b913      	cbnz	r3, 800a248 <_printf_float+0x1a4>
 800a242:	6822      	ldr	r2, [r4, #0]
 800a244:	07d2      	lsls	r2, r2, #31
 800a246:	d501      	bpl.n	800a24c <_printf_float+0x1a8>
 800a248:	3302      	adds	r3, #2
 800a24a:	e7f4      	b.n	800a236 <_printf_float+0x192>
 800a24c:	2301      	movs	r3, #1
 800a24e:	e7f2      	b.n	800a236 <_printf_float+0x192>
 800a250:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a256:	4299      	cmp	r1, r3
 800a258:	db05      	blt.n	800a266 <_printf_float+0x1c2>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	6121      	str	r1, [r4, #16]
 800a25e:	07d8      	lsls	r0, r3, #31
 800a260:	d5ea      	bpl.n	800a238 <_printf_float+0x194>
 800a262:	1c4b      	adds	r3, r1, #1
 800a264:	e7e7      	b.n	800a236 <_printf_float+0x192>
 800a266:	2900      	cmp	r1, #0
 800a268:	bfd4      	ite	le
 800a26a:	f1c1 0202 	rsble	r2, r1, #2
 800a26e:	2201      	movgt	r2, #1
 800a270:	4413      	add	r3, r2
 800a272:	e7e0      	b.n	800a236 <_printf_float+0x192>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	055a      	lsls	r2, r3, #21
 800a278:	d407      	bmi.n	800a28a <_printf_float+0x1e6>
 800a27a:	6923      	ldr	r3, [r4, #16]
 800a27c:	4642      	mov	r2, r8
 800a27e:	4631      	mov	r1, r6
 800a280:	4628      	mov	r0, r5
 800a282:	47b8      	blx	r7
 800a284:	3001      	adds	r0, #1
 800a286:	d12b      	bne.n	800a2e0 <_printf_float+0x23c>
 800a288:	e767      	b.n	800a15a <_printf_float+0xb6>
 800a28a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a28e:	f240 80dd 	bls.w	800a44c <_printf_float+0x3a8>
 800a292:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a296:	2200      	movs	r2, #0
 800a298:	2300      	movs	r3, #0
 800a29a:	f7f6 fc3d 	bl	8000b18 <__aeabi_dcmpeq>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d033      	beq.n	800a30a <_printf_float+0x266>
 800a2a2:	4a37      	ldr	r2, [pc, #220]	@ (800a380 <_printf_float+0x2dc>)
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b8      	blx	r7
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	f43f af54 	beq.w	800a15a <_printf_float+0xb6>
 800a2b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a2b6:	4543      	cmp	r3, r8
 800a2b8:	db02      	blt.n	800a2c0 <_printf_float+0x21c>
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	07d8      	lsls	r0, r3, #31
 800a2be:	d50f      	bpl.n	800a2e0 <_printf_float+0x23c>
 800a2c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	47b8      	blx	r7
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	f43f af45 	beq.w	800a15a <_printf_float+0xb6>
 800a2d0:	f04f 0900 	mov.w	r9, #0
 800a2d4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a2d8:	f104 0a1a 	add.w	sl, r4, #26
 800a2dc:	45c8      	cmp	r8, r9
 800a2de:	dc09      	bgt.n	800a2f4 <_printf_float+0x250>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	079b      	lsls	r3, r3, #30
 800a2e4:	f100 8103 	bmi.w	800a4ee <_printf_float+0x44a>
 800a2e8:	68e0      	ldr	r0, [r4, #12]
 800a2ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2ec:	4298      	cmp	r0, r3
 800a2ee:	bfb8      	it	lt
 800a2f0:	4618      	movlt	r0, r3
 800a2f2:	e734      	b.n	800a15e <_printf_float+0xba>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4652      	mov	r2, sl
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	f43f af2b 	beq.w	800a15a <_printf_float+0xb6>
 800a304:	f109 0901 	add.w	r9, r9, #1
 800a308:	e7e8      	b.n	800a2dc <_printf_float+0x238>
 800a30a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	dc39      	bgt.n	800a384 <_printf_float+0x2e0>
 800a310:	4a1b      	ldr	r2, [pc, #108]	@ (800a380 <_printf_float+0x2dc>)
 800a312:	2301      	movs	r3, #1
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	47b8      	blx	r7
 800a31a:	3001      	adds	r0, #1
 800a31c:	f43f af1d 	beq.w	800a15a <_printf_float+0xb6>
 800a320:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a324:	ea59 0303 	orrs.w	r3, r9, r3
 800a328:	d102      	bne.n	800a330 <_printf_float+0x28c>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	07d9      	lsls	r1, r3, #31
 800a32e:	d5d7      	bpl.n	800a2e0 <_printf_float+0x23c>
 800a330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a334:	4631      	mov	r1, r6
 800a336:	4628      	mov	r0, r5
 800a338:	47b8      	blx	r7
 800a33a:	3001      	adds	r0, #1
 800a33c:	f43f af0d 	beq.w	800a15a <_printf_float+0xb6>
 800a340:	f04f 0a00 	mov.w	sl, #0
 800a344:	f104 0b1a 	add.w	fp, r4, #26
 800a348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34a:	425b      	negs	r3, r3
 800a34c:	4553      	cmp	r3, sl
 800a34e:	dc01      	bgt.n	800a354 <_printf_float+0x2b0>
 800a350:	464b      	mov	r3, r9
 800a352:	e793      	b.n	800a27c <_printf_float+0x1d8>
 800a354:	2301      	movs	r3, #1
 800a356:	465a      	mov	r2, fp
 800a358:	4631      	mov	r1, r6
 800a35a:	4628      	mov	r0, r5
 800a35c:	47b8      	blx	r7
 800a35e:	3001      	adds	r0, #1
 800a360:	f43f aefb 	beq.w	800a15a <_printf_float+0xb6>
 800a364:	f10a 0a01 	add.w	sl, sl, #1
 800a368:	e7ee      	b.n	800a348 <_printf_float+0x2a4>
 800a36a:	bf00      	nop
 800a36c:	7fefffff 	.word	0x7fefffff
 800a370:	0800e9b8 	.word	0x0800e9b8
 800a374:	0800e9bc 	.word	0x0800e9bc
 800a378:	0800e9c0 	.word	0x0800e9c0
 800a37c:	0800e9c4 	.word	0x0800e9c4
 800a380:	0800e9c8 	.word	0x0800e9c8
 800a384:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a386:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a38a:	4553      	cmp	r3, sl
 800a38c:	bfa8      	it	ge
 800a38e:	4653      	movge	r3, sl
 800a390:	2b00      	cmp	r3, #0
 800a392:	4699      	mov	r9, r3
 800a394:	dc36      	bgt.n	800a404 <_printf_float+0x360>
 800a396:	f04f 0b00 	mov.w	fp, #0
 800a39a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a39e:	f104 021a 	add.w	r2, r4, #26
 800a3a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3a4:	9306      	str	r3, [sp, #24]
 800a3a6:	eba3 0309 	sub.w	r3, r3, r9
 800a3aa:	455b      	cmp	r3, fp
 800a3ac:	dc31      	bgt.n	800a412 <_printf_float+0x36e>
 800a3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b0:	459a      	cmp	sl, r3
 800a3b2:	dc3a      	bgt.n	800a42a <_printf_float+0x386>
 800a3b4:	6823      	ldr	r3, [r4, #0]
 800a3b6:	07da      	lsls	r2, r3, #31
 800a3b8:	d437      	bmi.n	800a42a <_printf_float+0x386>
 800a3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3bc:	ebaa 0903 	sub.w	r9, sl, r3
 800a3c0:	9b06      	ldr	r3, [sp, #24]
 800a3c2:	ebaa 0303 	sub.w	r3, sl, r3
 800a3c6:	4599      	cmp	r9, r3
 800a3c8:	bfa8      	it	ge
 800a3ca:	4699      	movge	r9, r3
 800a3cc:	f1b9 0f00 	cmp.w	r9, #0
 800a3d0:	dc33      	bgt.n	800a43a <_printf_float+0x396>
 800a3d2:	f04f 0800 	mov.w	r8, #0
 800a3d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3da:	f104 0b1a 	add.w	fp, r4, #26
 800a3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3e0:	ebaa 0303 	sub.w	r3, sl, r3
 800a3e4:	eba3 0309 	sub.w	r3, r3, r9
 800a3e8:	4543      	cmp	r3, r8
 800a3ea:	f77f af79 	ble.w	800a2e0 <_printf_float+0x23c>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	465a      	mov	r2, fp
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	47b8      	blx	r7
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	f43f aeae 	beq.w	800a15a <_printf_float+0xb6>
 800a3fe:	f108 0801 	add.w	r8, r8, #1
 800a402:	e7ec      	b.n	800a3de <_printf_float+0x33a>
 800a404:	4642      	mov	r2, r8
 800a406:	4631      	mov	r1, r6
 800a408:	4628      	mov	r0, r5
 800a40a:	47b8      	blx	r7
 800a40c:	3001      	adds	r0, #1
 800a40e:	d1c2      	bne.n	800a396 <_printf_float+0x2f2>
 800a410:	e6a3      	b.n	800a15a <_printf_float+0xb6>
 800a412:	2301      	movs	r3, #1
 800a414:	4631      	mov	r1, r6
 800a416:	4628      	mov	r0, r5
 800a418:	9206      	str	r2, [sp, #24]
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	f43f ae9c 	beq.w	800a15a <_printf_float+0xb6>
 800a422:	9a06      	ldr	r2, [sp, #24]
 800a424:	f10b 0b01 	add.w	fp, fp, #1
 800a428:	e7bb      	b.n	800a3a2 <_printf_float+0x2fe>
 800a42a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a42e:	4631      	mov	r1, r6
 800a430:	4628      	mov	r0, r5
 800a432:	47b8      	blx	r7
 800a434:	3001      	adds	r0, #1
 800a436:	d1c0      	bne.n	800a3ba <_printf_float+0x316>
 800a438:	e68f      	b.n	800a15a <_printf_float+0xb6>
 800a43a:	9a06      	ldr	r2, [sp, #24]
 800a43c:	464b      	mov	r3, r9
 800a43e:	4442      	add	r2, r8
 800a440:	4631      	mov	r1, r6
 800a442:	4628      	mov	r0, r5
 800a444:	47b8      	blx	r7
 800a446:	3001      	adds	r0, #1
 800a448:	d1c3      	bne.n	800a3d2 <_printf_float+0x32e>
 800a44a:	e686      	b.n	800a15a <_printf_float+0xb6>
 800a44c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a450:	f1ba 0f01 	cmp.w	sl, #1
 800a454:	dc01      	bgt.n	800a45a <_printf_float+0x3b6>
 800a456:	07db      	lsls	r3, r3, #31
 800a458:	d536      	bpl.n	800a4c8 <_printf_float+0x424>
 800a45a:	2301      	movs	r3, #1
 800a45c:	4642      	mov	r2, r8
 800a45e:	4631      	mov	r1, r6
 800a460:	4628      	mov	r0, r5
 800a462:	47b8      	blx	r7
 800a464:	3001      	adds	r0, #1
 800a466:	f43f ae78 	beq.w	800a15a <_printf_float+0xb6>
 800a46a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a46e:	4631      	mov	r1, r6
 800a470:	4628      	mov	r0, r5
 800a472:	47b8      	blx	r7
 800a474:	3001      	adds	r0, #1
 800a476:	f43f ae70 	beq.w	800a15a <_printf_float+0xb6>
 800a47a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a47e:	2200      	movs	r2, #0
 800a480:	2300      	movs	r3, #0
 800a482:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a486:	f7f6 fb47 	bl	8000b18 <__aeabi_dcmpeq>
 800a48a:	b9c0      	cbnz	r0, 800a4be <_printf_float+0x41a>
 800a48c:	4653      	mov	r3, sl
 800a48e:	f108 0201 	add.w	r2, r8, #1
 800a492:	4631      	mov	r1, r6
 800a494:	4628      	mov	r0, r5
 800a496:	47b8      	blx	r7
 800a498:	3001      	adds	r0, #1
 800a49a:	d10c      	bne.n	800a4b6 <_printf_float+0x412>
 800a49c:	e65d      	b.n	800a15a <_printf_float+0xb6>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	465a      	mov	r2, fp
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	47b8      	blx	r7
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	f43f ae56 	beq.w	800a15a <_printf_float+0xb6>
 800a4ae:	f108 0801 	add.w	r8, r8, #1
 800a4b2:	45d0      	cmp	r8, sl
 800a4b4:	dbf3      	blt.n	800a49e <_printf_float+0x3fa>
 800a4b6:	464b      	mov	r3, r9
 800a4b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a4bc:	e6df      	b.n	800a27e <_printf_float+0x1da>
 800a4be:	f04f 0800 	mov.w	r8, #0
 800a4c2:	f104 0b1a 	add.w	fp, r4, #26
 800a4c6:	e7f4      	b.n	800a4b2 <_printf_float+0x40e>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	4642      	mov	r2, r8
 800a4cc:	e7e1      	b.n	800a492 <_printf_float+0x3ee>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	464a      	mov	r2, r9
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	47b8      	blx	r7
 800a4d8:	3001      	adds	r0, #1
 800a4da:	f43f ae3e 	beq.w	800a15a <_printf_float+0xb6>
 800a4de:	f108 0801 	add.w	r8, r8, #1
 800a4e2:	68e3      	ldr	r3, [r4, #12]
 800a4e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4e6:	1a5b      	subs	r3, r3, r1
 800a4e8:	4543      	cmp	r3, r8
 800a4ea:	dcf0      	bgt.n	800a4ce <_printf_float+0x42a>
 800a4ec:	e6fc      	b.n	800a2e8 <_printf_float+0x244>
 800a4ee:	f04f 0800 	mov.w	r8, #0
 800a4f2:	f104 0919 	add.w	r9, r4, #25
 800a4f6:	e7f4      	b.n	800a4e2 <_printf_float+0x43e>

0800a4f8 <_printf_common>:
 800a4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4fc:	4616      	mov	r6, r2
 800a4fe:	4698      	mov	r8, r3
 800a500:	688a      	ldr	r2, [r1, #8]
 800a502:	690b      	ldr	r3, [r1, #16]
 800a504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a508:	4293      	cmp	r3, r2
 800a50a:	bfb8      	it	lt
 800a50c:	4613      	movlt	r3, r2
 800a50e:	6033      	str	r3, [r6, #0]
 800a510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a514:	4607      	mov	r7, r0
 800a516:	460c      	mov	r4, r1
 800a518:	b10a      	cbz	r2, 800a51e <_printf_common+0x26>
 800a51a:	3301      	adds	r3, #1
 800a51c:	6033      	str	r3, [r6, #0]
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	0699      	lsls	r1, r3, #26
 800a522:	bf42      	ittt	mi
 800a524:	6833      	ldrmi	r3, [r6, #0]
 800a526:	3302      	addmi	r3, #2
 800a528:	6033      	strmi	r3, [r6, #0]
 800a52a:	6825      	ldr	r5, [r4, #0]
 800a52c:	f015 0506 	ands.w	r5, r5, #6
 800a530:	d106      	bne.n	800a540 <_printf_common+0x48>
 800a532:	f104 0a19 	add.w	sl, r4, #25
 800a536:	68e3      	ldr	r3, [r4, #12]
 800a538:	6832      	ldr	r2, [r6, #0]
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	42ab      	cmp	r3, r5
 800a53e:	dc26      	bgt.n	800a58e <_printf_common+0x96>
 800a540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a544:	6822      	ldr	r2, [r4, #0]
 800a546:	3b00      	subs	r3, #0
 800a548:	bf18      	it	ne
 800a54a:	2301      	movne	r3, #1
 800a54c:	0692      	lsls	r2, r2, #26
 800a54e:	d42b      	bmi.n	800a5a8 <_printf_common+0xb0>
 800a550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a554:	4641      	mov	r1, r8
 800a556:	4638      	mov	r0, r7
 800a558:	47c8      	blx	r9
 800a55a:	3001      	adds	r0, #1
 800a55c:	d01e      	beq.n	800a59c <_printf_common+0xa4>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	6922      	ldr	r2, [r4, #16]
 800a562:	f003 0306 	and.w	r3, r3, #6
 800a566:	2b04      	cmp	r3, #4
 800a568:	bf02      	ittt	eq
 800a56a:	68e5      	ldreq	r5, [r4, #12]
 800a56c:	6833      	ldreq	r3, [r6, #0]
 800a56e:	1aed      	subeq	r5, r5, r3
 800a570:	68a3      	ldr	r3, [r4, #8]
 800a572:	bf0c      	ite	eq
 800a574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a578:	2500      	movne	r5, #0
 800a57a:	4293      	cmp	r3, r2
 800a57c:	bfc4      	itt	gt
 800a57e:	1a9b      	subgt	r3, r3, r2
 800a580:	18ed      	addgt	r5, r5, r3
 800a582:	2600      	movs	r6, #0
 800a584:	341a      	adds	r4, #26
 800a586:	42b5      	cmp	r5, r6
 800a588:	d11a      	bne.n	800a5c0 <_printf_common+0xc8>
 800a58a:	2000      	movs	r0, #0
 800a58c:	e008      	b.n	800a5a0 <_printf_common+0xa8>
 800a58e:	2301      	movs	r3, #1
 800a590:	4652      	mov	r2, sl
 800a592:	4641      	mov	r1, r8
 800a594:	4638      	mov	r0, r7
 800a596:	47c8      	blx	r9
 800a598:	3001      	adds	r0, #1
 800a59a:	d103      	bne.n	800a5a4 <_printf_common+0xac>
 800a59c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a4:	3501      	adds	r5, #1
 800a5a6:	e7c6      	b.n	800a536 <_printf_common+0x3e>
 800a5a8:	18e1      	adds	r1, r4, r3
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	2030      	movs	r0, #48	@ 0x30
 800a5ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5b2:	4422      	add	r2, r4
 800a5b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5bc:	3302      	adds	r3, #2
 800a5be:	e7c7      	b.n	800a550 <_printf_common+0x58>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	4622      	mov	r2, r4
 800a5c4:	4641      	mov	r1, r8
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	47c8      	blx	r9
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d0e6      	beq.n	800a59c <_printf_common+0xa4>
 800a5ce:	3601      	adds	r6, #1
 800a5d0:	e7d9      	b.n	800a586 <_printf_common+0x8e>
	...

0800a5d4 <_printf_i>:
 800a5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d8:	7e0f      	ldrb	r7, [r1, #24]
 800a5da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5dc:	2f78      	cmp	r7, #120	@ 0x78
 800a5de:	4691      	mov	r9, r2
 800a5e0:	4680      	mov	r8, r0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	469a      	mov	sl, r3
 800a5e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5ea:	d807      	bhi.n	800a5fc <_printf_i+0x28>
 800a5ec:	2f62      	cmp	r7, #98	@ 0x62
 800a5ee:	d80a      	bhi.n	800a606 <_printf_i+0x32>
 800a5f0:	2f00      	cmp	r7, #0
 800a5f2:	f000 80d2 	beq.w	800a79a <_printf_i+0x1c6>
 800a5f6:	2f58      	cmp	r7, #88	@ 0x58
 800a5f8:	f000 80b9 	beq.w	800a76e <_printf_i+0x19a>
 800a5fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a604:	e03a      	b.n	800a67c <_printf_i+0xa8>
 800a606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a60a:	2b15      	cmp	r3, #21
 800a60c:	d8f6      	bhi.n	800a5fc <_printf_i+0x28>
 800a60e:	a101      	add	r1, pc, #4	@ (adr r1, 800a614 <_printf_i+0x40>)
 800a610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a614:	0800a66d 	.word	0x0800a66d
 800a618:	0800a681 	.word	0x0800a681
 800a61c:	0800a5fd 	.word	0x0800a5fd
 800a620:	0800a5fd 	.word	0x0800a5fd
 800a624:	0800a5fd 	.word	0x0800a5fd
 800a628:	0800a5fd 	.word	0x0800a5fd
 800a62c:	0800a681 	.word	0x0800a681
 800a630:	0800a5fd 	.word	0x0800a5fd
 800a634:	0800a5fd 	.word	0x0800a5fd
 800a638:	0800a5fd 	.word	0x0800a5fd
 800a63c:	0800a5fd 	.word	0x0800a5fd
 800a640:	0800a781 	.word	0x0800a781
 800a644:	0800a6ab 	.word	0x0800a6ab
 800a648:	0800a73b 	.word	0x0800a73b
 800a64c:	0800a5fd 	.word	0x0800a5fd
 800a650:	0800a5fd 	.word	0x0800a5fd
 800a654:	0800a7a3 	.word	0x0800a7a3
 800a658:	0800a5fd 	.word	0x0800a5fd
 800a65c:	0800a6ab 	.word	0x0800a6ab
 800a660:	0800a5fd 	.word	0x0800a5fd
 800a664:	0800a5fd 	.word	0x0800a5fd
 800a668:	0800a743 	.word	0x0800a743
 800a66c:	6833      	ldr	r3, [r6, #0]
 800a66e:	1d1a      	adds	r2, r3, #4
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6032      	str	r2, [r6, #0]
 800a674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a67c:	2301      	movs	r3, #1
 800a67e:	e09d      	b.n	800a7bc <_printf_i+0x1e8>
 800a680:	6833      	ldr	r3, [r6, #0]
 800a682:	6820      	ldr	r0, [r4, #0]
 800a684:	1d19      	adds	r1, r3, #4
 800a686:	6031      	str	r1, [r6, #0]
 800a688:	0606      	lsls	r6, r0, #24
 800a68a:	d501      	bpl.n	800a690 <_printf_i+0xbc>
 800a68c:	681d      	ldr	r5, [r3, #0]
 800a68e:	e003      	b.n	800a698 <_printf_i+0xc4>
 800a690:	0645      	lsls	r5, r0, #25
 800a692:	d5fb      	bpl.n	800a68c <_printf_i+0xb8>
 800a694:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a698:	2d00      	cmp	r5, #0
 800a69a:	da03      	bge.n	800a6a4 <_printf_i+0xd0>
 800a69c:	232d      	movs	r3, #45	@ 0x2d
 800a69e:	426d      	negs	r5, r5
 800a6a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6a4:	4859      	ldr	r0, [pc, #356]	@ (800a80c <_printf_i+0x238>)
 800a6a6:	230a      	movs	r3, #10
 800a6a8:	e011      	b.n	800a6ce <_printf_i+0xfa>
 800a6aa:	6821      	ldr	r1, [r4, #0]
 800a6ac:	6833      	ldr	r3, [r6, #0]
 800a6ae:	0608      	lsls	r0, r1, #24
 800a6b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6b4:	d402      	bmi.n	800a6bc <_printf_i+0xe8>
 800a6b6:	0649      	lsls	r1, r1, #25
 800a6b8:	bf48      	it	mi
 800a6ba:	b2ad      	uxthmi	r5, r5
 800a6bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6be:	4853      	ldr	r0, [pc, #332]	@ (800a80c <_printf_i+0x238>)
 800a6c0:	6033      	str	r3, [r6, #0]
 800a6c2:	bf14      	ite	ne
 800a6c4:	230a      	movne	r3, #10
 800a6c6:	2308      	moveq	r3, #8
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6ce:	6866      	ldr	r6, [r4, #4]
 800a6d0:	60a6      	str	r6, [r4, #8]
 800a6d2:	2e00      	cmp	r6, #0
 800a6d4:	bfa2      	ittt	ge
 800a6d6:	6821      	ldrge	r1, [r4, #0]
 800a6d8:	f021 0104 	bicge.w	r1, r1, #4
 800a6dc:	6021      	strge	r1, [r4, #0]
 800a6de:	b90d      	cbnz	r5, 800a6e4 <_printf_i+0x110>
 800a6e0:	2e00      	cmp	r6, #0
 800a6e2:	d04b      	beq.n	800a77c <_printf_i+0x1a8>
 800a6e4:	4616      	mov	r6, r2
 800a6e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6ea:	fb03 5711 	mls	r7, r3, r1, r5
 800a6ee:	5dc7      	ldrb	r7, [r0, r7]
 800a6f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6f4:	462f      	mov	r7, r5
 800a6f6:	42bb      	cmp	r3, r7
 800a6f8:	460d      	mov	r5, r1
 800a6fa:	d9f4      	bls.n	800a6e6 <_printf_i+0x112>
 800a6fc:	2b08      	cmp	r3, #8
 800a6fe:	d10b      	bne.n	800a718 <_printf_i+0x144>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	07df      	lsls	r7, r3, #31
 800a704:	d508      	bpl.n	800a718 <_printf_i+0x144>
 800a706:	6923      	ldr	r3, [r4, #16]
 800a708:	6861      	ldr	r1, [r4, #4]
 800a70a:	4299      	cmp	r1, r3
 800a70c:	bfde      	ittt	le
 800a70e:	2330      	movle	r3, #48	@ 0x30
 800a710:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a714:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a718:	1b92      	subs	r2, r2, r6
 800a71a:	6122      	str	r2, [r4, #16]
 800a71c:	f8cd a000 	str.w	sl, [sp]
 800a720:	464b      	mov	r3, r9
 800a722:	aa03      	add	r2, sp, #12
 800a724:	4621      	mov	r1, r4
 800a726:	4640      	mov	r0, r8
 800a728:	f7ff fee6 	bl	800a4f8 <_printf_common>
 800a72c:	3001      	adds	r0, #1
 800a72e:	d14a      	bne.n	800a7c6 <_printf_i+0x1f2>
 800a730:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a734:	b004      	add	sp, #16
 800a736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	f043 0320 	orr.w	r3, r3, #32
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	4833      	ldr	r0, [pc, #204]	@ (800a810 <_printf_i+0x23c>)
 800a744:	2778      	movs	r7, #120	@ 0x78
 800a746:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	6831      	ldr	r1, [r6, #0]
 800a74e:	061f      	lsls	r7, r3, #24
 800a750:	f851 5b04 	ldr.w	r5, [r1], #4
 800a754:	d402      	bmi.n	800a75c <_printf_i+0x188>
 800a756:	065f      	lsls	r7, r3, #25
 800a758:	bf48      	it	mi
 800a75a:	b2ad      	uxthmi	r5, r5
 800a75c:	6031      	str	r1, [r6, #0]
 800a75e:	07d9      	lsls	r1, r3, #31
 800a760:	bf44      	itt	mi
 800a762:	f043 0320 	orrmi.w	r3, r3, #32
 800a766:	6023      	strmi	r3, [r4, #0]
 800a768:	b11d      	cbz	r5, 800a772 <_printf_i+0x19e>
 800a76a:	2310      	movs	r3, #16
 800a76c:	e7ac      	b.n	800a6c8 <_printf_i+0xf4>
 800a76e:	4827      	ldr	r0, [pc, #156]	@ (800a80c <_printf_i+0x238>)
 800a770:	e7e9      	b.n	800a746 <_printf_i+0x172>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	f023 0320 	bic.w	r3, r3, #32
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	e7f6      	b.n	800a76a <_printf_i+0x196>
 800a77c:	4616      	mov	r6, r2
 800a77e:	e7bd      	b.n	800a6fc <_printf_i+0x128>
 800a780:	6833      	ldr	r3, [r6, #0]
 800a782:	6825      	ldr	r5, [r4, #0]
 800a784:	6961      	ldr	r1, [r4, #20]
 800a786:	1d18      	adds	r0, r3, #4
 800a788:	6030      	str	r0, [r6, #0]
 800a78a:	062e      	lsls	r6, r5, #24
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	d501      	bpl.n	800a794 <_printf_i+0x1c0>
 800a790:	6019      	str	r1, [r3, #0]
 800a792:	e002      	b.n	800a79a <_printf_i+0x1c6>
 800a794:	0668      	lsls	r0, r5, #25
 800a796:	d5fb      	bpl.n	800a790 <_printf_i+0x1bc>
 800a798:	8019      	strh	r1, [r3, #0]
 800a79a:	2300      	movs	r3, #0
 800a79c:	6123      	str	r3, [r4, #16]
 800a79e:	4616      	mov	r6, r2
 800a7a0:	e7bc      	b.n	800a71c <_printf_i+0x148>
 800a7a2:	6833      	ldr	r3, [r6, #0]
 800a7a4:	1d1a      	adds	r2, r3, #4
 800a7a6:	6032      	str	r2, [r6, #0]
 800a7a8:	681e      	ldr	r6, [r3, #0]
 800a7aa:	6862      	ldr	r2, [r4, #4]
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7f5 fd36 	bl	8000220 <memchr>
 800a7b4:	b108      	cbz	r0, 800a7ba <_printf_i+0x1e6>
 800a7b6:	1b80      	subs	r0, r0, r6
 800a7b8:	6060      	str	r0, [r4, #4]
 800a7ba:	6863      	ldr	r3, [r4, #4]
 800a7bc:	6123      	str	r3, [r4, #16]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7c4:	e7aa      	b.n	800a71c <_printf_i+0x148>
 800a7c6:	6923      	ldr	r3, [r4, #16]
 800a7c8:	4632      	mov	r2, r6
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	4640      	mov	r0, r8
 800a7ce:	47d0      	blx	sl
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	d0ad      	beq.n	800a730 <_printf_i+0x15c>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	079b      	lsls	r3, r3, #30
 800a7d8:	d413      	bmi.n	800a802 <_printf_i+0x22e>
 800a7da:	68e0      	ldr	r0, [r4, #12]
 800a7dc:	9b03      	ldr	r3, [sp, #12]
 800a7de:	4298      	cmp	r0, r3
 800a7e0:	bfb8      	it	lt
 800a7e2:	4618      	movlt	r0, r3
 800a7e4:	e7a6      	b.n	800a734 <_printf_i+0x160>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	4632      	mov	r2, r6
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	4640      	mov	r0, r8
 800a7ee:	47d0      	blx	sl
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	d09d      	beq.n	800a730 <_printf_i+0x15c>
 800a7f4:	3501      	adds	r5, #1
 800a7f6:	68e3      	ldr	r3, [r4, #12]
 800a7f8:	9903      	ldr	r1, [sp, #12]
 800a7fa:	1a5b      	subs	r3, r3, r1
 800a7fc:	42ab      	cmp	r3, r5
 800a7fe:	dcf2      	bgt.n	800a7e6 <_printf_i+0x212>
 800a800:	e7eb      	b.n	800a7da <_printf_i+0x206>
 800a802:	2500      	movs	r5, #0
 800a804:	f104 0619 	add.w	r6, r4, #25
 800a808:	e7f5      	b.n	800a7f6 <_printf_i+0x222>
 800a80a:	bf00      	nop
 800a80c:	0800e9ca 	.word	0x0800e9ca
 800a810:	0800e9db 	.word	0x0800e9db

0800a814 <_scanf_float>:
 800a814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	b087      	sub	sp, #28
 800a81a:	4617      	mov	r7, r2
 800a81c:	9303      	str	r3, [sp, #12]
 800a81e:	688b      	ldr	r3, [r1, #8]
 800a820:	1e5a      	subs	r2, r3, #1
 800a822:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a826:	bf81      	itttt	hi
 800a828:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a82c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a830:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a834:	608b      	strhi	r3, [r1, #8]
 800a836:	680b      	ldr	r3, [r1, #0]
 800a838:	460a      	mov	r2, r1
 800a83a:	f04f 0500 	mov.w	r5, #0
 800a83e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a842:	f842 3b1c 	str.w	r3, [r2], #28
 800a846:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a84a:	4680      	mov	r8, r0
 800a84c:	460c      	mov	r4, r1
 800a84e:	bf98      	it	ls
 800a850:	f04f 0b00 	movls.w	fp, #0
 800a854:	9201      	str	r2, [sp, #4]
 800a856:	4616      	mov	r6, r2
 800a858:	46aa      	mov	sl, r5
 800a85a:	46a9      	mov	r9, r5
 800a85c:	9502      	str	r5, [sp, #8]
 800a85e:	68a2      	ldr	r2, [r4, #8]
 800a860:	b152      	cbz	r2, 800a878 <_scanf_float+0x64>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b4e      	cmp	r3, #78	@ 0x4e
 800a868:	d864      	bhi.n	800a934 <_scanf_float+0x120>
 800a86a:	2b40      	cmp	r3, #64	@ 0x40
 800a86c:	d83c      	bhi.n	800a8e8 <_scanf_float+0xd4>
 800a86e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a872:	b2c8      	uxtb	r0, r1
 800a874:	280e      	cmp	r0, #14
 800a876:	d93a      	bls.n	800a8ee <_scanf_float+0xda>
 800a878:	f1b9 0f00 	cmp.w	r9, #0
 800a87c:	d003      	beq.n	800a886 <_scanf_float+0x72>
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a88a:	f1ba 0f01 	cmp.w	sl, #1
 800a88e:	f200 8117 	bhi.w	800aac0 <_scanf_float+0x2ac>
 800a892:	9b01      	ldr	r3, [sp, #4]
 800a894:	429e      	cmp	r6, r3
 800a896:	f200 8108 	bhi.w	800aaaa <_scanf_float+0x296>
 800a89a:	2001      	movs	r0, #1
 800a89c:	b007      	add	sp, #28
 800a89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a8a6:	2a0d      	cmp	r2, #13
 800a8a8:	d8e6      	bhi.n	800a878 <_scanf_float+0x64>
 800a8aa:	a101      	add	r1, pc, #4	@ (adr r1, 800a8b0 <_scanf_float+0x9c>)
 800a8ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a8b0:	0800a9f7 	.word	0x0800a9f7
 800a8b4:	0800a879 	.word	0x0800a879
 800a8b8:	0800a879 	.word	0x0800a879
 800a8bc:	0800a879 	.word	0x0800a879
 800a8c0:	0800aa57 	.word	0x0800aa57
 800a8c4:	0800aa2f 	.word	0x0800aa2f
 800a8c8:	0800a879 	.word	0x0800a879
 800a8cc:	0800a879 	.word	0x0800a879
 800a8d0:	0800aa05 	.word	0x0800aa05
 800a8d4:	0800a879 	.word	0x0800a879
 800a8d8:	0800a879 	.word	0x0800a879
 800a8dc:	0800a879 	.word	0x0800a879
 800a8e0:	0800a879 	.word	0x0800a879
 800a8e4:	0800a9bd 	.word	0x0800a9bd
 800a8e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a8ec:	e7db      	b.n	800a8a6 <_scanf_float+0x92>
 800a8ee:	290e      	cmp	r1, #14
 800a8f0:	d8c2      	bhi.n	800a878 <_scanf_float+0x64>
 800a8f2:	a001      	add	r0, pc, #4	@ (adr r0, 800a8f8 <_scanf_float+0xe4>)
 800a8f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8f8:	0800a9ad 	.word	0x0800a9ad
 800a8fc:	0800a879 	.word	0x0800a879
 800a900:	0800a9ad 	.word	0x0800a9ad
 800a904:	0800aa43 	.word	0x0800aa43
 800a908:	0800a879 	.word	0x0800a879
 800a90c:	0800a955 	.word	0x0800a955
 800a910:	0800a993 	.word	0x0800a993
 800a914:	0800a993 	.word	0x0800a993
 800a918:	0800a993 	.word	0x0800a993
 800a91c:	0800a993 	.word	0x0800a993
 800a920:	0800a993 	.word	0x0800a993
 800a924:	0800a993 	.word	0x0800a993
 800a928:	0800a993 	.word	0x0800a993
 800a92c:	0800a993 	.word	0x0800a993
 800a930:	0800a993 	.word	0x0800a993
 800a934:	2b6e      	cmp	r3, #110	@ 0x6e
 800a936:	d809      	bhi.n	800a94c <_scanf_float+0x138>
 800a938:	2b60      	cmp	r3, #96	@ 0x60
 800a93a:	d8b2      	bhi.n	800a8a2 <_scanf_float+0x8e>
 800a93c:	2b54      	cmp	r3, #84	@ 0x54
 800a93e:	d07b      	beq.n	800aa38 <_scanf_float+0x224>
 800a940:	2b59      	cmp	r3, #89	@ 0x59
 800a942:	d199      	bne.n	800a878 <_scanf_float+0x64>
 800a944:	2d07      	cmp	r5, #7
 800a946:	d197      	bne.n	800a878 <_scanf_float+0x64>
 800a948:	2508      	movs	r5, #8
 800a94a:	e02c      	b.n	800a9a6 <_scanf_float+0x192>
 800a94c:	2b74      	cmp	r3, #116	@ 0x74
 800a94e:	d073      	beq.n	800aa38 <_scanf_float+0x224>
 800a950:	2b79      	cmp	r3, #121	@ 0x79
 800a952:	e7f6      	b.n	800a942 <_scanf_float+0x12e>
 800a954:	6821      	ldr	r1, [r4, #0]
 800a956:	05c8      	lsls	r0, r1, #23
 800a958:	d51b      	bpl.n	800a992 <_scanf_float+0x17e>
 800a95a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a95e:	6021      	str	r1, [r4, #0]
 800a960:	f109 0901 	add.w	r9, r9, #1
 800a964:	f1bb 0f00 	cmp.w	fp, #0
 800a968:	d003      	beq.n	800a972 <_scanf_float+0x15e>
 800a96a:	3201      	adds	r2, #1
 800a96c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800a970:	60a2      	str	r2, [r4, #8]
 800a972:	68a3      	ldr	r3, [r4, #8]
 800a974:	3b01      	subs	r3, #1
 800a976:	60a3      	str	r3, [r4, #8]
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	3301      	adds	r3, #1
 800a97c:	6123      	str	r3, [r4, #16]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	3b01      	subs	r3, #1
 800a982:	2b00      	cmp	r3, #0
 800a984:	607b      	str	r3, [r7, #4]
 800a986:	f340 8087 	ble.w	800aa98 <_scanf_float+0x284>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	3301      	adds	r3, #1
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	e765      	b.n	800a85e <_scanf_float+0x4a>
 800a992:	eb1a 0105 	adds.w	r1, sl, r5
 800a996:	f47f af6f 	bne.w	800a878 <_scanf_float+0x64>
 800a99a:	6822      	ldr	r2, [r4, #0]
 800a99c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a9a0:	6022      	str	r2, [r4, #0]
 800a9a2:	460d      	mov	r5, r1
 800a9a4:	468a      	mov	sl, r1
 800a9a6:	f806 3b01 	strb.w	r3, [r6], #1
 800a9aa:	e7e2      	b.n	800a972 <_scanf_float+0x15e>
 800a9ac:	6822      	ldr	r2, [r4, #0]
 800a9ae:	0610      	lsls	r0, r2, #24
 800a9b0:	f57f af62 	bpl.w	800a878 <_scanf_float+0x64>
 800a9b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a9b8:	6022      	str	r2, [r4, #0]
 800a9ba:	e7f4      	b.n	800a9a6 <_scanf_float+0x192>
 800a9bc:	f1ba 0f00 	cmp.w	sl, #0
 800a9c0:	d10e      	bne.n	800a9e0 <_scanf_float+0x1cc>
 800a9c2:	f1b9 0f00 	cmp.w	r9, #0
 800a9c6:	d10e      	bne.n	800a9e6 <_scanf_float+0x1d2>
 800a9c8:	6822      	ldr	r2, [r4, #0]
 800a9ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a9ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a9d2:	d108      	bne.n	800a9e6 <_scanf_float+0x1d2>
 800a9d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9d8:	6022      	str	r2, [r4, #0]
 800a9da:	f04f 0a01 	mov.w	sl, #1
 800a9de:	e7e2      	b.n	800a9a6 <_scanf_float+0x192>
 800a9e0:	f1ba 0f02 	cmp.w	sl, #2
 800a9e4:	d055      	beq.n	800aa92 <_scanf_float+0x27e>
 800a9e6:	2d01      	cmp	r5, #1
 800a9e8:	d002      	beq.n	800a9f0 <_scanf_float+0x1dc>
 800a9ea:	2d04      	cmp	r5, #4
 800a9ec:	f47f af44 	bne.w	800a878 <_scanf_float+0x64>
 800a9f0:	3501      	adds	r5, #1
 800a9f2:	b2ed      	uxtb	r5, r5
 800a9f4:	e7d7      	b.n	800a9a6 <_scanf_float+0x192>
 800a9f6:	f1ba 0f01 	cmp.w	sl, #1
 800a9fa:	f47f af3d 	bne.w	800a878 <_scanf_float+0x64>
 800a9fe:	f04f 0a02 	mov.w	sl, #2
 800aa02:	e7d0      	b.n	800a9a6 <_scanf_float+0x192>
 800aa04:	b97d      	cbnz	r5, 800aa26 <_scanf_float+0x212>
 800aa06:	f1b9 0f00 	cmp.w	r9, #0
 800aa0a:	f47f af38 	bne.w	800a87e <_scanf_float+0x6a>
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aa14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aa18:	f040 8108 	bne.w	800ac2c <_scanf_float+0x418>
 800aa1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa20:	6022      	str	r2, [r4, #0]
 800aa22:	2501      	movs	r5, #1
 800aa24:	e7bf      	b.n	800a9a6 <_scanf_float+0x192>
 800aa26:	2d03      	cmp	r5, #3
 800aa28:	d0e2      	beq.n	800a9f0 <_scanf_float+0x1dc>
 800aa2a:	2d05      	cmp	r5, #5
 800aa2c:	e7de      	b.n	800a9ec <_scanf_float+0x1d8>
 800aa2e:	2d02      	cmp	r5, #2
 800aa30:	f47f af22 	bne.w	800a878 <_scanf_float+0x64>
 800aa34:	2503      	movs	r5, #3
 800aa36:	e7b6      	b.n	800a9a6 <_scanf_float+0x192>
 800aa38:	2d06      	cmp	r5, #6
 800aa3a:	f47f af1d 	bne.w	800a878 <_scanf_float+0x64>
 800aa3e:	2507      	movs	r5, #7
 800aa40:	e7b1      	b.n	800a9a6 <_scanf_float+0x192>
 800aa42:	6822      	ldr	r2, [r4, #0]
 800aa44:	0591      	lsls	r1, r2, #22
 800aa46:	f57f af17 	bpl.w	800a878 <_scanf_float+0x64>
 800aa4a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aa4e:	6022      	str	r2, [r4, #0]
 800aa50:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa54:	e7a7      	b.n	800a9a6 <_scanf_float+0x192>
 800aa56:	6822      	ldr	r2, [r4, #0]
 800aa58:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aa5c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aa60:	d006      	beq.n	800aa70 <_scanf_float+0x25c>
 800aa62:	0550      	lsls	r0, r2, #21
 800aa64:	f57f af08 	bpl.w	800a878 <_scanf_float+0x64>
 800aa68:	f1b9 0f00 	cmp.w	r9, #0
 800aa6c:	f000 80de 	beq.w	800ac2c <_scanf_float+0x418>
 800aa70:	0591      	lsls	r1, r2, #22
 800aa72:	bf58      	it	pl
 800aa74:	9902      	ldrpl	r1, [sp, #8]
 800aa76:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa7a:	bf58      	it	pl
 800aa7c:	eba9 0101 	subpl.w	r1, r9, r1
 800aa80:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aa84:	bf58      	it	pl
 800aa86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa8a:	6022      	str	r2, [r4, #0]
 800aa8c:	f04f 0900 	mov.w	r9, #0
 800aa90:	e789      	b.n	800a9a6 <_scanf_float+0x192>
 800aa92:	f04f 0a03 	mov.w	sl, #3
 800aa96:	e786      	b.n	800a9a6 <_scanf_float+0x192>
 800aa98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	4798      	blx	r3
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	f43f aedb 	beq.w	800a85e <_scanf_float+0x4a>
 800aaa8:	e6e6      	b.n	800a878 <_scanf_float+0x64>
 800aaaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aab2:	463a      	mov	r2, r7
 800aab4:	4640      	mov	r0, r8
 800aab6:	4798      	blx	r3
 800aab8:	6923      	ldr	r3, [r4, #16]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	6123      	str	r3, [r4, #16]
 800aabe:	e6e8      	b.n	800a892 <_scanf_float+0x7e>
 800aac0:	1e6b      	subs	r3, r5, #1
 800aac2:	2b06      	cmp	r3, #6
 800aac4:	d824      	bhi.n	800ab10 <_scanf_float+0x2fc>
 800aac6:	2d02      	cmp	r5, #2
 800aac8:	d836      	bhi.n	800ab38 <_scanf_float+0x324>
 800aaca:	9b01      	ldr	r3, [sp, #4]
 800aacc:	429e      	cmp	r6, r3
 800aace:	f67f aee4 	bls.w	800a89a <_scanf_float+0x86>
 800aad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aad6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aada:	463a      	mov	r2, r7
 800aadc:	4640      	mov	r0, r8
 800aade:	4798      	blx	r3
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	6123      	str	r3, [r4, #16]
 800aae6:	e7f0      	b.n	800aaca <_scanf_float+0x2b6>
 800aae8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aaf0:	463a      	mov	r2, r7
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	4798      	blx	r3
 800aaf6:	6923      	ldr	r3, [r4, #16]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	6123      	str	r3, [r4, #16]
 800aafc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ab00:	fa5f fa8a 	uxtb.w	sl, sl
 800ab04:	f1ba 0f02 	cmp.w	sl, #2
 800ab08:	d1ee      	bne.n	800aae8 <_scanf_float+0x2d4>
 800ab0a:	3d03      	subs	r5, #3
 800ab0c:	b2ed      	uxtb	r5, r5
 800ab0e:	1b76      	subs	r6, r6, r5
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	05da      	lsls	r2, r3, #23
 800ab14:	d530      	bpl.n	800ab78 <_scanf_float+0x364>
 800ab16:	055b      	lsls	r3, r3, #21
 800ab18:	d511      	bpl.n	800ab3e <_scanf_float+0x32a>
 800ab1a:	9b01      	ldr	r3, [sp, #4]
 800ab1c:	429e      	cmp	r6, r3
 800ab1e:	f67f aebc 	bls.w	800a89a <_scanf_float+0x86>
 800ab22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab2a:	463a      	mov	r2, r7
 800ab2c:	4640      	mov	r0, r8
 800ab2e:	4798      	blx	r3
 800ab30:	6923      	ldr	r3, [r4, #16]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	6123      	str	r3, [r4, #16]
 800ab36:	e7f0      	b.n	800ab1a <_scanf_float+0x306>
 800ab38:	46aa      	mov	sl, r5
 800ab3a:	46b3      	mov	fp, r6
 800ab3c:	e7de      	b.n	800aafc <_scanf_float+0x2e8>
 800ab3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ab42:	6923      	ldr	r3, [r4, #16]
 800ab44:	2965      	cmp	r1, #101	@ 0x65
 800ab46:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ab4a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ab4e:	6123      	str	r3, [r4, #16]
 800ab50:	d00c      	beq.n	800ab6c <_scanf_float+0x358>
 800ab52:	2945      	cmp	r1, #69	@ 0x45
 800ab54:	d00a      	beq.n	800ab6c <_scanf_float+0x358>
 800ab56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab5a:	463a      	mov	r2, r7
 800ab5c:	4640      	mov	r0, r8
 800ab5e:	4798      	blx	r3
 800ab60:	6923      	ldr	r3, [r4, #16]
 800ab62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab66:	3b01      	subs	r3, #1
 800ab68:	1eb5      	subs	r5, r6, #2
 800ab6a:	6123      	str	r3, [r4, #16]
 800ab6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab70:	463a      	mov	r2, r7
 800ab72:	4640      	mov	r0, r8
 800ab74:	4798      	blx	r3
 800ab76:	462e      	mov	r6, r5
 800ab78:	6822      	ldr	r2, [r4, #0]
 800ab7a:	f012 0210 	ands.w	r2, r2, #16
 800ab7e:	d001      	beq.n	800ab84 <_scanf_float+0x370>
 800ab80:	2000      	movs	r0, #0
 800ab82:	e68b      	b.n	800a89c <_scanf_float+0x88>
 800ab84:	7032      	strb	r2, [r6, #0]
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab90:	d11c      	bne.n	800abcc <_scanf_float+0x3b8>
 800ab92:	9b02      	ldr	r3, [sp, #8]
 800ab94:	454b      	cmp	r3, r9
 800ab96:	eba3 0209 	sub.w	r2, r3, r9
 800ab9a:	d123      	bne.n	800abe4 <_scanf_float+0x3d0>
 800ab9c:	9901      	ldr	r1, [sp, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	4640      	mov	r0, r8
 800aba2:	f002 fd61 	bl	800d668 <_strtod_r>
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	6821      	ldr	r1, [r4, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f011 0f02 	tst.w	r1, #2
 800abb0:	ec57 6b10 	vmov	r6, r7, d0
 800abb4:	f103 0204 	add.w	r2, r3, #4
 800abb8:	d01f      	beq.n	800abfa <_scanf_float+0x3e6>
 800abba:	9903      	ldr	r1, [sp, #12]
 800abbc:	600a      	str	r2, [r1, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	e9c3 6700 	strd	r6, r7, [r3]
 800abc4:	68e3      	ldr	r3, [r4, #12]
 800abc6:	3301      	adds	r3, #1
 800abc8:	60e3      	str	r3, [r4, #12]
 800abca:	e7d9      	b.n	800ab80 <_scanf_float+0x36c>
 800abcc:	9b04      	ldr	r3, [sp, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d0e4      	beq.n	800ab9c <_scanf_float+0x388>
 800abd2:	9905      	ldr	r1, [sp, #20]
 800abd4:	230a      	movs	r3, #10
 800abd6:	3101      	adds	r1, #1
 800abd8:	4640      	mov	r0, r8
 800abda:	f002 fdc5 	bl	800d768 <_strtol_r>
 800abde:	9b04      	ldr	r3, [sp, #16]
 800abe0:	9e05      	ldr	r6, [sp, #20]
 800abe2:	1ac2      	subs	r2, r0, r3
 800abe4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800abe8:	429e      	cmp	r6, r3
 800abea:	bf28      	it	cs
 800abec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800abf0:	4910      	ldr	r1, [pc, #64]	@ (800ac34 <_scanf_float+0x420>)
 800abf2:	4630      	mov	r0, r6
 800abf4:	f000 f954 	bl	800aea0 <siprintf>
 800abf8:	e7d0      	b.n	800ab9c <_scanf_float+0x388>
 800abfa:	f011 0f04 	tst.w	r1, #4
 800abfe:	9903      	ldr	r1, [sp, #12]
 800ac00:	600a      	str	r2, [r1, #0]
 800ac02:	d1dc      	bne.n	800abbe <_scanf_float+0x3aa>
 800ac04:	681d      	ldr	r5, [r3, #0]
 800ac06:	4632      	mov	r2, r6
 800ac08:	463b      	mov	r3, r7
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	f7f5 ffb5 	bl	8000b7c <__aeabi_dcmpun>
 800ac12:	b128      	cbz	r0, 800ac20 <_scanf_float+0x40c>
 800ac14:	4808      	ldr	r0, [pc, #32]	@ (800ac38 <_scanf_float+0x424>)
 800ac16:	f000 fb1f 	bl	800b258 <nanf>
 800ac1a:	ed85 0a00 	vstr	s0, [r5]
 800ac1e:	e7d1      	b.n	800abc4 <_scanf_float+0x3b0>
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f6 f808 	bl	8000c38 <__aeabi_d2f>
 800ac28:	6028      	str	r0, [r5, #0]
 800ac2a:	e7cb      	b.n	800abc4 <_scanf_float+0x3b0>
 800ac2c:	f04f 0900 	mov.w	r9, #0
 800ac30:	e629      	b.n	800a886 <_scanf_float+0x72>
 800ac32:	bf00      	nop
 800ac34:	0800e9ec 	.word	0x0800e9ec
 800ac38:	0800ed85 	.word	0x0800ed85

0800ac3c <std>:
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	b510      	push	{r4, lr}
 800ac40:	4604      	mov	r4, r0
 800ac42:	e9c0 3300 	strd	r3, r3, [r0]
 800ac46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac4a:	6083      	str	r3, [r0, #8]
 800ac4c:	8181      	strh	r1, [r0, #12]
 800ac4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac50:	81c2      	strh	r2, [r0, #14]
 800ac52:	6183      	str	r3, [r0, #24]
 800ac54:	4619      	mov	r1, r3
 800ac56:	2208      	movs	r2, #8
 800ac58:	305c      	adds	r0, #92	@ 0x5c
 800ac5a:	f000 fa19 	bl	800b090 <memset>
 800ac5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac94 <std+0x58>)
 800ac60:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac62:	4b0d      	ldr	r3, [pc, #52]	@ (800ac98 <std+0x5c>)
 800ac64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac66:	4b0d      	ldr	r3, [pc, #52]	@ (800ac9c <std+0x60>)
 800ac68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aca0 <std+0x64>)
 800ac6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aca4 <std+0x68>)
 800ac70:	6224      	str	r4, [r4, #32]
 800ac72:	429c      	cmp	r4, r3
 800ac74:	d006      	beq.n	800ac84 <std+0x48>
 800ac76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac7a:	4294      	cmp	r4, r2
 800ac7c:	d002      	beq.n	800ac84 <std+0x48>
 800ac7e:	33d0      	adds	r3, #208	@ 0xd0
 800ac80:	429c      	cmp	r4, r3
 800ac82:	d105      	bne.n	800ac90 <std+0x54>
 800ac84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac8c:	f000 bad2 	b.w	800b234 <__retarget_lock_init_recursive>
 800ac90:	bd10      	pop	{r4, pc}
 800ac92:	bf00      	nop
 800ac94:	0800aee1 	.word	0x0800aee1
 800ac98:	0800af03 	.word	0x0800af03
 800ac9c:	0800af3b 	.word	0x0800af3b
 800aca0:	0800af5f 	.word	0x0800af5f
 800aca4:	2000132c 	.word	0x2000132c

0800aca8 <stdio_exit_handler>:
 800aca8:	4a02      	ldr	r2, [pc, #8]	@ (800acb4 <stdio_exit_handler+0xc>)
 800acaa:	4903      	ldr	r1, [pc, #12]	@ (800acb8 <stdio_exit_handler+0x10>)
 800acac:	4803      	ldr	r0, [pc, #12]	@ (800acbc <stdio_exit_handler+0x14>)
 800acae:	f000 b869 	b.w	800ad84 <_fwalk_sglue>
 800acb2:	bf00      	nop
 800acb4:	20000010 	.word	0x20000010
 800acb8:	0800dda9 	.word	0x0800dda9
 800acbc:	20000020 	.word	0x20000020

0800acc0 <cleanup_stdio>:
 800acc0:	6841      	ldr	r1, [r0, #4]
 800acc2:	4b0c      	ldr	r3, [pc, #48]	@ (800acf4 <cleanup_stdio+0x34>)
 800acc4:	4299      	cmp	r1, r3
 800acc6:	b510      	push	{r4, lr}
 800acc8:	4604      	mov	r4, r0
 800acca:	d001      	beq.n	800acd0 <cleanup_stdio+0x10>
 800accc:	f003 f86c 	bl	800dda8 <_fflush_r>
 800acd0:	68a1      	ldr	r1, [r4, #8]
 800acd2:	4b09      	ldr	r3, [pc, #36]	@ (800acf8 <cleanup_stdio+0x38>)
 800acd4:	4299      	cmp	r1, r3
 800acd6:	d002      	beq.n	800acde <cleanup_stdio+0x1e>
 800acd8:	4620      	mov	r0, r4
 800acda:	f003 f865 	bl	800dda8 <_fflush_r>
 800acde:	68e1      	ldr	r1, [r4, #12]
 800ace0:	4b06      	ldr	r3, [pc, #24]	@ (800acfc <cleanup_stdio+0x3c>)
 800ace2:	4299      	cmp	r1, r3
 800ace4:	d004      	beq.n	800acf0 <cleanup_stdio+0x30>
 800ace6:	4620      	mov	r0, r4
 800ace8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acec:	f003 b85c 	b.w	800dda8 <_fflush_r>
 800acf0:	bd10      	pop	{r4, pc}
 800acf2:	bf00      	nop
 800acf4:	2000132c 	.word	0x2000132c
 800acf8:	20001394 	.word	0x20001394
 800acfc:	200013fc 	.word	0x200013fc

0800ad00 <global_stdio_init.part.0>:
 800ad00:	b510      	push	{r4, lr}
 800ad02:	4b0b      	ldr	r3, [pc, #44]	@ (800ad30 <global_stdio_init.part.0+0x30>)
 800ad04:	4c0b      	ldr	r4, [pc, #44]	@ (800ad34 <global_stdio_init.part.0+0x34>)
 800ad06:	4a0c      	ldr	r2, [pc, #48]	@ (800ad38 <global_stdio_init.part.0+0x38>)
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	2104      	movs	r1, #4
 800ad10:	f7ff ff94 	bl	800ac3c <std>
 800ad14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad18:	2201      	movs	r2, #1
 800ad1a:	2109      	movs	r1, #9
 800ad1c:	f7ff ff8e 	bl	800ac3c <std>
 800ad20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad24:	2202      	movs	r2, #2
 800ad26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad2a:	2112      	movs	r1, #18
 800ad2c:	f7ff bf86 	b.w	800ac3c <std>
 800ad30:	20001464 	.word	0x20001464
 800ad34:	2000132c 	.word	0x2000132c
 800ad38:	0800aca9 	.word	0x0800aca9

0800ad3c <__sfp_lock_acquire>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	@ (800ad44 <__sfp_lock_acquire+0x8>)
 800ad3e:	f000 ba7a 	b.w	800b236 <__retarget_lock_acquire_recursive>
 800ad42:	bf00      	nop
 800ad44:	2000146d 	.word	0x2000146d

0800ad48 <__sfp_lock_release>:
 800ad48:	4801      	ldr	r0, [pc, #4]	@ (800ad50 <__sfp_lock_release+0x8>)
 800ad4a:	f000 ba75 	b.w	800b238 <__retarget_lock_release_recursive>
 800ad4e:	bf00      	nop
 800ad50:	2000146d 	.word	0x2000146d

0800ad54 <__sinit>:
 800ad54:	b510      	push	{r4, lr}
 800ad56:	4604      	mov	r4, r0
 800ad58:	f7ff fff0 	bl	800ad3c <__sfp_lock_acquire>
 800ad5c:	6a23      	ldr	r3, [r4, #32]
 800ad5e:	b11b      	cbz	r3, 800ad68 <__sinit+0x14>
 800ad60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad64:	f7ff bff0 	b.w	800ad48 <__sfp_lock_release>
 800ad68:	4b04      	ldr	r3, [pc, #16]	@ (800ad7c <__sinit+0x28>)
 800ad6a:	6223      	str	r3, [r4, #32]
 800ad6c:	4b04      	ldr	r3, [pc, #16]	@ (800ad80 <__sinit+0x2c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1f5      	bne.n	800ad60 <__sinit+0xc>
 800ad74:	f7ff ffc4 	bl	800ad00 <global_stdio_init.part.0>
 800ad78:	e7f2      	b.n	800ad60 <__sinit+0xc>
 800ad7a:	bf00      	nop
 800ad7c:	0800acc1 	.word	0x0800acc1
 800ad80:	20001464 	.word	0x20001464

0800ad84 <_fwalk_sglue>:
 800ad84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad88:	4607      	mov	r7, r0
 800ad8a:	4688      	mov	r8, r1
 800ad8c:	4614      	mov	r4, r2
 800ad8e:	2600      	movs	r6, #0
 800ad90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad94:	f1b9 0901 	subs.w	r9, r9, #1
 800ad98:	d505      	bpl.n	800ada6 <_fwalk_sglue+0x22>
 800ad9a:	6824      	ldr	r4, [r4, #0]
 800ad9c:	2c00      	cmp	r4, #0
 800ad9e:	d1f7      	bne.n	800ad90 <_fwalk_sglue+0xc>
 800ada0:	4630      	mov	r0, r6
 800ada2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d907      	bls.n	800adbc <_fwalk_sglue+0x38>
 800adac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adb0:	3301      	adds	r3, #1
 800adb2:	d003      	beq.n	800adbc <_fwalk_sglue+0x38>
 800adb4:	4629      	mov	r1, r5
 800adb6:	4638      	mov	r0, r7
 800adb8:	47c0      	blx	r8
 800adba:	4306      	orrs	r6, r0
 800adbc:	3568      	adds	r5, #104	@ 0x68
 800adbe:	e7e9      	b.n	800ad94 <_fwalk_sglue+0x10>

0800adc0 <iprintf>:
 800adc0:	b40f      	push	{r0, r1, r2, r3}
 800adc2:	b507      	push	{r0, r1, r2, lr}
 800adc4:	4906      	ldr	r1, [pc, #24]	@ (800ade0 <iprintf+0x20>)
 800adc6:	ab04      	add	r3, sp, #16
 800adc8:	6808      	ldr	r0, [r1, #0]
 800adca:	f853 2b04 	ldr.w	r2, [r3], #4
 800adce:	6881      	ldr	r1, [r0, #8]
 800add0:	9301      	str	r3, [sp, #4]
 800add2:	f002 fe4d 	bl	800da70 <_vfiprintf_r>
 800add6:	b003      	add	sp, #12
 800add8:	f85d eb04 	ldr.w	lr, [sp], #4
 800addc:	b004      	add	sp, #16
 800adde:	4770      	bx	lr
 800ade0:	2000001c 	.word	0x2000001c

0800ade4 <_puts_r>:
 800ade4:	6a03      	ldr	r3, [r0, #32]
 800ade6:	b570      	push	{r4, r5, r6, lr}
 800ade8:	6884      	ldr	r4, [r0, #8]
 800adea:	4605      	mov	r5, r0
 800adec:	460e      	mov	r6, r1
 800adee:	b90b      	cbnz	r3, 800adf4 <_puts_r+0x10>
 800adf0:	f7ff ffb0 	bl	800ad54 <__sinit>
 800adf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adf6:	07db      	lsls	r3, r3, #31
 800adf8:	d405      	bmi.n	800ae06 <_puts_r+0x22>
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	0598      	lsls	r0, r3, #22
 800adfe:	d402      	bmi.n	800ae06 <_puts_r+0x22>
 800ae00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae02:	f000 fa18 	bl	800b236 <__retarget_lock_acquire_recursive>
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	0719      	lsls	r1, r3, #28
 800ae0a:	d502      	bpl.n	800ae12 <_puts_r+0x2e>
 800ae0c:	6923      	ldr	r3, [r4, #16]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d135      	bne.n	800ae7e <_puts_r+0x9a>
 800ae12:	4621      	mov	r1, r4
 800ae14:	4628      	mov	r0, r5
 800ae16:	f000 f8e5 	bl	800afe4 <__swsetup_r>
 800ae1a:	b380      	cbz	r0, 800ae7e <_puts_r+0x9a>
 800ae1c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ae20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae22:	07da      	lsls	r2, r3, #31
 800ae24:	d405      	bmi.n	800ae32 <_puts_r+0x4e>
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	059b      	lsls	r3, r3, #22
 800ae2a:	d402      	bmi.n	800ae32 <_puts_r+0x4e>
 800ae2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae2e:	f000 fa03 	bl	800b238 <__retarget_lock_release_recursive>
 800ae32:	4628      	mov	r0, r5
 800ae34:	bd70      	pop	{r4, r5, r6, pc}
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	da04      	bge.n	800ae44 <_puts_r+0x60>
 800ae3a:	69a2      	ldr	r2, [r4, #24]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	dc17      	bgt.n	800ae70 <_puts_r+0x8c>
 800ae40:	290a      	cmp	r1, #10
 800ae42:	d015      	beq.n	800ae70 <_puts_r+0x8c>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	6022      	str	r2, [r4, #0]
 800ae4a:	7019      	strb	r1, [r3, #0]
 800ae4c:	68a3      	ldr	r3, [r4, #8]
 800ae4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae52:	3b01      	subs	r3, #1
 800ae54:	60a3      	str	r3, [r4, #8]
 800ae56:	2900      	cmp	r1, #0
 800ae58:	d1ed      	bne.n	800ae36 <_puts_r+0x52>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	da11      	bge.n	800ae82 <_puts_r+0x9e>
 800ae5e:	4622      	mov	r2, r4
 800ae60:	210a      	movs	r1, #10
 800ae62:	4628      	mov	r0, r5
 800ae64:	f000 f87f 	bl	800af66 <__swbuf_r>
 800ae68:	3001      	adds	r0, #1
 800ae6a:	d0d7      	beq.n	800ae1c <_puts_r+0x38>
 800ae6c:	250a      	movs	r5, #10
 800ae6e:	e7d7      	b.n	800ae20 <_puts_r+0x3c>
 800ae70:	4622      	mov	r2, r4
 800ae72:	4628      	mov	r0, r5
 800ae74:	f000 f877 	bl	800af66 <__swbuf_r>
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d1e7      	bne.n	800ae4c <_puts_r+0x68>
 800ae7c:	e7ce      	b.n	800ae1c <_puts_r+0x38>
 800ae7e:	3e01      	subs	r6, #1
 800ae80:	e7e4      	b.n	800ae4c <_puts_r+0x68>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	1c5a      	adds	r2, r3, #1
 800ae86:	6022      	str	r2, [r4, #0]
 800ae88:	220a      	movs	r2, #10
 800ae8a:	701a      	strb	r2, [r3, #0]
 800ae8c:	e7ee      	b.n	800ae6c <_puts_r+0x88>
	...

0800ae90 <puts>:
 800ae90:	4b02      	ldr	r3, [pc, #8]	@ (800ae9c <puts+0xc>)
 800ae92:	4601      	mov	r1, r0
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	f7ff bfa5 	b.w	800ade4 <_puts_r>
 800ae9a:	bf00      	nop
 800ae9c:	2000001c 	.word	0x2000001c

0800aea0 <siprintf>:
 800aea0:	b40e      	push	{r1, r2, r3}
 800aea2:	b500      	push	{lr}
 800aea4:	b09c      	sub	sp, #112	@ 0x70
 800aea6:	ab1d      	add	r3, sp, #116	@ 0x74
 800aea8:	9002      	str	r0, [sp, #8]
 800aeaa:	9006      	str	r0, [sp, #24]
 800aeac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aeb0:	4809      	ldr	r0, [pc, #36]	@ (800aed8 <siprintf+0x38>)
 800aeb2:	9107      	str	r1, [sp, #28]
 800aeb4:	9104      	str	r1, [sp, #16]
 800aeb6:	4909      	ldr	r1, [pc, #36]	@ (800aedc <siprintf+0x3c>)
 800aeb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aebc:	9105      	str	r1, [sp, #20]
 800aebe:	6800      	ldr	r0, [r0, #0]
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	a902      	add	r1, sp, #8
 800aec4:	f002 fcae 	bl	800d824 <_svfiprintf_r>
 800aec8:	9b02      	ldr	r3, [sp, #8]
 800aeca:	2200      	movs	r2, #0
 800aecc:	701a      	strb	r2, [r3, #0]
 800aece:	b01c      	add	sp, #112	@ 0x70
 800aed0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aed4:	b003      	add	sp, #12
 800aed6:	4770      	bx	lr
 800aed8:	2000001c 	.word	0x2000001c
 800aedc:	ffff0208 	.word	0xffff0208

0800aee0 <__sread>:
 800aee0:	b510      	push	{r4, lr}
 800aee2:	460c      	mov	r4, r1
 800aee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee8:	f000 f956 	bl	800b198 <_read_r>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	bfab      	itete	ge
 800aef0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aef2:	89a3      	ldrhlt	r3, [r4, #12]
 800aef4:	181b      	addge	r3, r3, r0
 800aef6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aefa:	bfac      	ite	ge
 800aefc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aefe:	81a3      	strhlt	r3, [r4, #12]
 800af00:	bd10      	pop	{r4, pc}

0800af02 <__swrite>:
 800af02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af06:	461f      	mov	r7, r3
 800af08:	898b      	ldrh	r3, [r1, #12]
 800af0a:	05db      	lsls	r3, r3, #23
 800af0c:	4605      	mov	r5, r0
 800af0e:	460c      	mov	r4, r1
 800af10:	4616      	mov	r6, r2
 800af12:	d505      	bpl.n	800af20 <__swrite+0x1e>
 800af14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af18:	2302      	movs	r3, #2
 800af1a:	2200      	movs	r2, #0
 800af1c:	f000 f92a 	bl	800b174 <_lseek_r>
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af2a:	81a3      	strh	r3, [r4, #12]
 800af2c:	4632      	mov	r2, r6
 800af2e:	463b      	mov	r3, r7
 800af30:	4628      	mov	r0, r5
 800af32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af36:	f000 b941 	b.w	800b1bc <_write_r>

0800af3a <__sseek>:
 800af3a:	b510      	push	{r4, lr}
 800af3c:	460c      	mov	r4, r1
 800af3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af42:	f000 f917 	bl	800b174 <_lseek_r>
 800af46:	1c43      	adds	r3, r0, #1
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	bf15      	itete	ne
 800af4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af56:	81a3      	strheq	r3, [r4, #12]
 800af58:	bf18      	it	ne
 800af5a:	81a3      	strhne	r3, [r4, #12]
 800af5c:	bd10      	pop	{r4, pc}

0800af5e <__sclose>:
 800af5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af62:	f000 b8a1 	b.w	800b0a8 <_close_r>

0800af66 <__swbuf_r>:
 800af66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af68:	460e      	mov	r6, r1
 800af6a:	4614      	mov	r4, r2
 800af6c:	4605      	mov	r5, r0
 800af6e:	b118      	cbz	r0, 800af78 <__swbuf_r+0x12>
 800af70:	6a03      	ldr	r3, [r0, #32]
 800af72:	b90b      	cbnz	r3, 800af78 <__swbuf_r+0x12>
 800af74:	f7ff feee 	bl	800ad54 <__sinit>
 800af78:	69a3      	ldr	r3, [r4, #24]
 800af7a:	60a3      	str	r3, [r4, #8]
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	071a      	lsls	r2, r3, #28
 800af80:	d501      	bpl.n	800af86 <__swbuf_r+0x20>
 800af82:	6923      	ldr	r3, [r4, #16]
 800af84:	b943      	cbnz	r3, 800af98 <__swbuf_r+0x32>
 800af86:	4621      	mov	r1, r4
 800af88:	4628      	mov	r0, r5
 800af8a:	f000 f82b 	bl	800afe4 <__swsetup_r>
 800af8e:	b118      	cbz	r0, 800af98 <__swbuf_r+0x32>
 800af90:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800af94:	4638      	mov	r0, r7
 800af96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	6922      	ldr	r2, [r4, #16]
 800af9c:	1a98      	subs	r0, r3, r2
 800af9e:	6963      	ldr	r3, [r4, #20]
 800afa0:	b2f6      	uxtb	r6, r6
 800afa2:	4283      	cmp	r3, r0
 800afa4:	4637      	mov	r7, r6
 800afa6:	dc05      	bgt.n	800afb4 <__swbuf_r+0x4e>
 800afa8:	4621      	mov	r1, r4
 800afaa:	4628      	mov	r0, r5
 800afac:	f002 fefc 	bl	800dda8 <_fflush_r>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d1ed      	bne.n	800af90 <__swbuf_r+0x2a>
 800afb4:	68a3      	ldr	r3, [r4, #8]
 800afb6:	3b01      	subs	r3, #1
 800afb8:	60a3      	str	r3, [r4, #8]
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	1c5a      	adds	r2, r3, #1
 800afbe:	6022      	str	r2, [r4, #0]
 800afc0:	701e      	strb	r6, [r3, #0]
 800afc2:	6962      	ldr	r2, [r4, #20]
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d004      	beq.n	800afd4 <__swbuf_r+0x6e>
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	07db      	lsls	r3, r3, #31
 800afce:	d5e1      	bpl.n	800af94 <__swbuf_r+0x2e>
 800afd0:	2e0a      	cmp	r6, #10
 800afd2:	d1df      	bne.n	800af94 <__swbuf_r+0x2e>
 800afd4:	4621      	mov	r1, r4
 800afd6:	4628      	mov	r0, r5
 800afd8:	f002 fee6 	bl	800dda8 <_fflush_r>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d0d9      	beq.n	800af94 <__swbuf_r+0x2e>
 800afe0:	e7d6      	b.n	800af90 <__swbuf_r+0x2a>
	...

0800afe4 <__swsetup_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4b29      	ldr	r3, [pc, #164]	@ (800b08c <__swsetup_r+0xa8>)
 800afe8:	4605      	mov	r5, r0
 800afea:	6818      	ldr	r0, [r3, #0]
 800afec:	460c      	mov	r4, r1
 800afee:	b118      	cbz	r0, 800aff8 <__swsetup_r+0x14>
 800aff0:	6a03      	ldr	r3, [r0, #32]
 800aff2:	b90b      	cbnz	r3, 800aff8 <__swsetup_r+0x14>
 800aff4:	f7ff feae 	bl	800ad54 <__sinit>
 800aff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800affc:	0719      	lsls	r1, r3, #28
 800affe:	d422      	bmi.n	800b046 <__swsetup_r+0x62>
 800b000:	06da      	lsls	r2, r3, #27
 800b002:	d407      	bmi.n	800b014 <__swsetup_r+0x30>
 800b004:	2209      	movs	r2, #9
 800b006:	602a      	str	r2, [r5, #0]
 800b008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b00c:	81a3      	strh	r3, [r4, #12]
 800b00e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b012:	e033      	b.n	800b07c <__swsetup_r+0x98>
 800b014:	0758      	lsls	r0, r3, #29
 800b016:	d512      	bpl.n	800b03e <__swsetup_r+0x5a>
 800b018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b01a:	b141      	cbz	r1, 800b02e <__swsetup_r+0x4a>
 800b01c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b020:	4299      	cmp	r1, r3
 800b022:	d002      	beq.n	800b02a <__swsetup_r+0x46>
 800b024:	4628      	mov	r0, r5
 800b026:	f000 ff6b 	bl	800bf00 <_free_r>
 800b02a:	2300      	movs	r3, #0
 800b02c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b034:	81a3      	strh	r3, [r4, #12]
 800b036:	2300      	movs	r3, #0
 800b038:	6063      	str	r3, [r4, #4]
 800b03a:	6923      	ldr	r3, [r4, #16]
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	f043 0308 	orr.w	r3, r3, #8
 800b044:	81a3      	strh	r3, [r4, #12]
 800b046:	6923      	ldr	r3, [r4, #16]
 800b048:	b94b      	cbnz	r3, 800b05e <__swsetup_r+0x7a>
 800b04a:	89a3      	ldrh	r3, [r4, #12]
 800b04c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b054:	d003      	beq.n	800b05e <__swsetup_r+0x7a>
 800b056:	4621      	mov	r1, r4
 800b058:	4628      	mov	r0, r5
 800b05a:	f002 fef3 	bl	800de44 <__smakebuf_r>
 800b05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b062:	f013 0201 	ands.w	r2, r3, #1
 800b066:	d00a      	beq.n	800b07e <__swsetup_r+0x9a>
 800b068:	2200      	movs	r2, #0
 800b06a:	60a2      	str	r2, [r4, #8]
 800b06c:	6962      	ldr	r2, [r4, #20]
 800b06e:	4252      	negs	r2, r2
 800b070:	61a2      	str	r2, [r4, #24]
 800b072:	6922      	ldr	r2, [r4, #16]
 800b074:	b942      	cbnz	r2, 800b088 <__swsetup_r+0xa4>
 800b076:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b07a:	d1c5      	bne.n	800b008 <__swsetup_r+0x24>
 800b07c:	bd38      	pop	{r3, r4, r5, pc}
 800b07e:	0799      	lsls	r1, r3, #30
 800b080:	bf58      	it	pl
 800b082:	6962      	ldrpl	r2, [r4, #20]
 800b084:	60a2      	str	r2, [r4, #8]
 800b086:	e7f4      	b.n	800b072 <__swsetup_r+0x8e>
 800b088:	2000      	movs	r0, #0
 800b08a:	e7f7      	b.n	800b07c <__swsetup_r+0x98>
 800b08c:	2000001c 	.word	0x2000001c

0800b090 <memset>:
 800b090:	4402      	add	r2, r0
 800b092:	4603      	mov	r3, r0
 800b094:	4293      	cmp	r3, r2
 800b096:	d100      	bne.n	800b09a <memset+0xa>
 800b098:	4770      	bx	lr
 800b09a:	f803 1b01 	strb.w	r1, [r3], #1
 800b09e:	e7f9      	b.n	800b094 <memset+0x4>

0800b0a0 <_localeconv_r>:
 800b0a0:	4800      	ldr	r0, [pc, #0]	@ (800b0a4 <_localeconv_r+0x4>)
 800b0a2:	4770      	bx	lr
 800b0a4:	2000015c 	.word	0x2000015c

0800b0a8 <_close_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	4d06      	ldr	r5, [pc, #24]	@ (800b0c4 <_close_r+0x1c>)
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	602b      	str	r3, [r5, #0]
 800b0b4:	f7f6 fdc4 	bl	8001c40 <_close>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d102      	bne.n	800b0c2 <_close_r+0x1a>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	b103      	cbz	r3, 800b0c2 <_close_r+0x1a>
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	20001468 	.word	0x20001468

0800b0c8 <_reclaim_reent>:
 800b0c8:	4b29      	ldr	r3, [pc, #164]	@ (800b170 <_reclaim_reent+0xa8>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4283      	cmp	r3, r0
 800b0ce:	b570      	push	{r4, r5, r6, lr}
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	d04b      	beq.n	800b16c <_reclaim_reent+0xa4>
 800b0d4:	69c3      	ldr	r3, [r0, #28]
 800b0d6:	b1ab      	cbz	r3, 800b104 <_reclaim_reent+0x3c>
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	b16b      	cbz	r3, 800b0f8 <_reclaim_reent+0x30>
 800b0dc:	2500      	movs	r5, #0
 800b0de:	69e3      	ldr	r3, [r4, #28]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	5959      	ldr	r1, [r3, r5]
 800b0e4:	2900      	cmp	r1, #0
 800b0e6:	d13b      	bne.n	800b160 <_reclaim_reent+0x98>
 800b0e8:	3504      	adds	r5, #4
 800b0ea:	2d80      	cmp	r5, #128	@ 0x80
 800b0ec:	d1f7      	bne.n	800b0de <_reclaim_reent+0x16>
 800b0ee:	69e3      	ldr	r3, [r4, #28]
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	68d9      	ldr	r1, [r3, #12]
 800b0f4:	f000 ff04 	bl	800bf00 <_free_r>
 800b0f8:	69e3      	ldr	r3, [r4, #28]
 800b0fa:	6819      	ldr	r1, [r3, #0]
 800b0fc:	b111      	cbz	r1, 800b104 <_reclaim_reent+0x3c>
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 fefe 	bl	800bf00 <_free_r>
 800b104:	6961      	ldr	r1, [r4, #20]
 800b106:	b111      	cbz	r1, 800b10e <_reclaim_reent+0x46>
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 fef9 	bl	800bf00 <_free_r>
 800b10e:	69e1      	ldr	r1, [r4, #28]
 800b110:	b111      	cbz	r1, 800b118 <_reclaim_reent+0x50>
 800b112:	4620      	mov	r0, r4
 800b114:	f000 fef4 	bl	800bf00 <_free_r>
 800b118:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b11a:	b111      	cbz	r1, 800b122 <_reclaim_reent+0x5a>
 800b11c:	4620      	mov	r0, r4
 800b11e:	f000 feef 	bl	800bf00 <_free_r>
 800b122:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b124:	b111      	cbz	r1, 800b12c <_reclaim_reent+0x64>
 800b126:	4620      	mov	r0, r4
 800b128:	f000 feea 	bl	800bf00 <_free_r>
 800b12c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b12e:	b111      	cbz	r1, 800b136 <_reclaim_reent+0x6e>
 800b130:	4620      	mov	r0, r4
 800b132:	f000 fee5 	bl	800bf00 <_free_r>
 800b136:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b138:	b111      	cbz	r1, 800b140 <_reclaim_reent+0x78>
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 fee0 	bl	800bf00 <_free_r>
 800b140:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b142:	b111      	cbz	r1, 800b14a <_reclaim_reent+0x82>
 800b144:	4620      	mov	r0, r4
 800b146:	f000 fedb 	bl	800bf00 <_free_r>
 800b14a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b14c:	b111      	cbz	r1, 800b154 <_reclaim_reent+0x8c>
 800b14e:	4620      	mov	r0, r4
 800b150:	f000 fed6 	bl	800bf00 <_free_r>
 800b154:	6a23      	ldr	r3, [r4, #32]
 800b156:	b14b      	cbz	r3, 800b16c <_reclaim_reent+0xa4>
 800b158:	4620      	mov	r0, r4
 800b15a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b15e:	4718      	bx	r3
 800b160:	680e      	ldr	r6, [r1, #0]
 800b162:	4620      	mov	r0, r4
 800b164:	f000 fecc 	bl	800bf00 <_free_r>
 800b168:	4631      	mov	r1, r6
 800b16a:	e7bb      	b.n	800b0e4 <_reclaim_reent+0x1c>
 800b16c:	bd70      	pop	{r4, r5, r6, pc}
 800b16e:	bf00      	nop
 800b170:	2000001c 	.word	0x2000001c

0800b174 <_lseek_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d07      	ldr	r5, [pc, #28]	@ (800b194 <_lseek_r+0x20>)
 800b178:	4604      	mov	r4, r0
 800b17a:	4608      	mov	r0, r1
 800b17c:	4611      	mov	r1, r2
 800b17e:	2200      	movs	r2, #0
 800b180:	602a      	str	r2, [r5, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	f7f6 fd83 	bl	8001c8e <_lseek>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d102      	bne.n	800b192 <_lseek_r+0x1e>
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	b103      	cbz	r3, 800b192 <_lseek_r+0x1e>
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	20001468 	.word	0x20001468

0800b198 <_read_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d07      	ldr	r5, [pc, #28]	@ (800b1b8 <_read_r+0x20>)
 800b19c:	4604      	mov	r4, r0
 800b19e:	4608      	mov	r0, r1
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	602a      	str	r2, [r5, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f7f6 fd11 	bl	8001bce <_read>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_read_r+0x1e>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_read_r+0x1e>
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	20001468 	.word	0x20001468

0800b1bc <_write_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4d07      	ldr	r5, [pc, #28]	@ (800b1dc <_write_r+0x20>)
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	4608      	mov	r0, r1
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	602a      	str	r2, [r5, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f7f6 fd1c 	bl	8001c08 <_write>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_write_r+0x1e>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_write_r+0x1e>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	20001468 	.word	0x20001468

0800b1e0 <__errno>:
 800b1e0:	4b01      	ldr	r3, [pc, #4]	@ (800b1e8 <__errno+0x8>)
 800b1e2:	6818      	ldr	r0, [r3, #0]
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	2000001c 	.word	0x2000001c

0800b1ec <__libc_init_array>:
 800b1ec:	b570      	push	{r4, r5, r6, lr}
 800b1ee:	4d0d      	ldr	r5, [pc, #52]	@ (800b224 <__libc_init_array+0x38>)
 800b1f0:	4c0d      	ldr	r4, [pc, #52]	@ (800b228 <__libc_init_array+0x3c>)
 800b1f2:	1b64      	subs	r4, r4, r5
 800b1f4:	10a4      	asrs	r4, r4, #2
 800b1f6:	2600      	movs	r6, #0
 800b1f8:	42a6      	cmp	r6, r4
 800b1fa:	d109      	bne.n	800b210 <__libc_init_array+0x24>
 800b1fc:	4d0b      	ldr	r5, [pc, #44]	@ (800b22c <__libc_init_array+0x40>)
 800b1fe:	4c0c      	ldr	r4, [pc, #48]	@ (800b230 <__libc_init_array+0x44>)
 800b200:	f003 fae0 	bl	800e7c4 <_init>
 800b204:	1b64      	subs	r4, r4, r5
 800b206:	10a4      	asrs	r4, r4, #2
 800b208:	2600      	movs	r6, #0
 800b20a:	42a6      	cmp	r6, r4
 800b20c:	d105      	bne.n	800b21a <__libc_init_array+0x2e>
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	f855 3b04 	ldr.w	r3, [r5], #4
 800b214:	4798      	blx	r3
 800b216:	3601      	adds	r6, #1
 800b218:	e7ee      	b.n	800b1f8 <__libc_init_array+0xc>
 800b21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b21e:	4798      	blx	r3
 800b220:	3601      	adds	r6, #1
 800b222:	e7f2      	b.n	800b20a <__libc_init_array+0x1e>
 800b224:	0800edf0 	.word	0x0800edf0
 800b228:	0800edf0 	.word	0x0800edf0
 800b22c:	0800edf0 	.word	0x0800edf0
 800b230:	0800edf4 	.word	0x0800edf4

0800b234 <__retarget_lock_init_recursive>:
 800b234:	4770      	bx	lr

0800b236 <__retarget_lock_acquire_recursive>:
 800b236:	4770      	bx	lr

0800b238 <__retarget_lock_release_recursive>:
 800b238:	4770      	bx	lr

0800b23a <memcpy>:
 800b23a:	440a      	add	r2, r1
 800b23c:	4291      	cmp	r1, r2
 800b23e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b242:	d100      	bne.n	800b246 <memcpy+0xc>
 800b244:	4770      	bx	lr
 800b246:	b510      	push	{r4, lr}
 800b248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b24c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b250:	4291      	cmp	r1, r2
 800b252:	d1f9      	bne.n	800b248 <memcpy+0xe>
 800b254:	bd10      	pop	{r4, pc}
	...

0800b258 <nanf>:
 800b258:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b260 <nanf+0x8>
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	7fc00000 	.word	0x7fc00000

0800b264 <quorem>:
 800b264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	6903      	ldr	r3, [r0, #16]
 800b26a:	690c      	ldr	r4, [r1, #16]
 800b26c:	42a3      	cmp	r3, r4
 800b26e:	4607      	mov	r7, r0
 800b270:	db7e      	blt.n	800b370 <quorem+0x10c>
 800b272:	3c01      	subs	r4, #1
 800b274:	f101 0814 	add.w	r8, r1, #20
 800b278:	00a3      	lsls	r3, r4, #2
 800b27a:	f100 0514 	add.w	r5, r0, #20
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b284:	9301      	str	r3, [sp, #4]
 800b286:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b28a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b28e:	3301      	adds	r3, #1
 800b290:	429a      	cmp	r2, r3
 800b292:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b296:	fbb2 f6f3 	udiv	r6, r2, r3
 800b29a:	d32e      	bcc.n	800b2fa <quorem+0x96>
 800b29c:	f04f 0a00 	mov.w	sl, #0
 800b2a0:	46c4      	mov	ip, r8
 800b2a2:	46ae      	mov	lr, r5
 800b2a4:	46d3      	mov	fp, sl
 800b2a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b2aa:	b298      	uxth	r0, r3
 800b2ac:	fb06 a000 	mla	r0, r6, r0, sl
 800b2b0:	0c02      	lsrs	r2, r0, #16
 800b2b2:	0c1b      	lsrs	r3, r3, #16
 800b2b4:	fb06 2303 	mla	r3, r6, r3, r2
 800b2b8:	f8de 2000 	ldr.w	r2, [lr]
 800b2bc:	b280      	uxth	r0, r0
 800b2be:	b292      	uxth	r2, r2
 800b2c0:	1a12      	subs	r2, r2, r0
 800b2c2:	445a      	add	r2, fp
 800b2c4:	f8de 0000 	ldr.w	r0, [lr]
 800b2c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b2d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b2d6:	b292      	uxth	r2, r2
 800b2d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b2dc:	45e1      	cmp	r9, ip
 800b2de:	f84e 2b04 	str.w	r2, [lr], #4
 800b2e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b2e6:	d2de      	bcs.n	800b2a6 <quorem+0x42>
 800b2e8:	9b00      	ldr	r3, [sp, #0]
 800b2ea:	58eb      	ldr	r3, [r5, r3]
 800b2ec:	b92b      	cbnz	r3, 800b2fa <quorem+0x96>
 800b2ee:	9b01      	ldr	r3, [sp, #4]
 800b2f0:	3b04      	subs	r3, #4
 800b2f2:	429d      	cmp	r5, r3
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	d32f      	bcc.n	800b358 <quorem+0xf4>
 800b2f8:	613c      	str	r4, [r7, #16]
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	f001 f9c4 	bl	800c688 <__mcmp>
 800b300:	2800      	cmp	r0, #0
 800b302:	db25      	blt.n	800b350 <quorem+0xec>
 800b304:	4629      	mov	r1, r5
 800b306:	2000      	movs	r0, #0
 800b308:	f858 2b04 	ldr.w	r2, [r8], #4
 800b30c:	f8d1 c000 	ldr.w	ip, [r1]
 800b310:	fa1f fe82 	uxth.w	lr, r2
 800b314:	fa1f f38c 	uxth.w	r3, ip
 800b318:	eba3 030e 	sub.w	r3, r3, lr
 800b31c:	4403      	add	r3, r0
 800b31e:	0c12      	lsrs	r2, r2, #16
 800b320:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b324:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b328:	b29b      	uxth	r3, r3
 800b32a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b32e:	45c1      	cmp	r9, r8
 800b330:	f841 3b04 	str.w	r3, [r1], #4
 800b334:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b338:	d2e6      	bcs.n	800b308 <quorem+0xa4>
 800b33a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b33e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b342:	b922      	cbnz	r2, 800b34e <quorem+0xea>
 800b344:	3b04      	subs	r3, #4
 800b346:	429d      	cmp	r5, r3
 800b348:	461a      	mov	r2, r3
 800b34a:	d30b      	bcc.n	800b364 <quorem+0x100>
 800b34c:	613c      	str	r4, [r7, #16]
 800b34e:	3601      	adds	r6, #1
 800b350:	4630      	mov	r0, r6
 800b352:	b003      	add	sp, #12
 800b354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b358:	6812      	ldr	r2, [r2, #0]
 800b35a:	3b04      	subs	r3, #4
 800b35c:	2a00      	cmp	r2, #0
 800b35e:	d1cb      	bne.n	800b2f8 <quorem+0x94>
 800b360:	3c01      	subs	r4, #1
 800b362:	e7c6      	b.n	800b2f2 <quorem+0x8e>
 800b364:	6812      	ldr	r2, [r2, #0]
 800b366:	3b04      	subs	r3, #4
 800b368:	2a00      	cmp	r2, #0
 800b36a:	d1ef      	bne.n	800b34c <quorem+0xe8>
 800b36c:	3c01      	subs	r4, #1
 800b36e:	e7ea      	b.n	800b346 <quorem+0xe2>
 800b370:	2000      	movs	r0, #0
 800b372:	e7ee      	b.n	800b352 <quorem+0xee>
 800b374:	0000      	movs	r0, r0
	...

0800b378 <_dtoa_r>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	69c7      	ldr	r7, [r0, #28]
 800b37e:	b099      	sub	sp, #100	@ 0x64
 800b380:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b384:	ec55 4b10 	vmov	r4, r5, d0
 800b388:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b38a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b38c:	4683      	mov	fp, r0
 800b38e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b390:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b392:	b97f      	cbnz	r7, 800b3b4 <_dtoa_r+0x3c>
 800b394:	2010      	movs	r0, #16
 800b396:	f000 fdfd 	bl	800bf94 <malloc>
 800b39a:	4602      	mov	r2, r0
 800b39c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b3a0:	b920      	cbnz	r0, 800b3ac <_dtoa_r+0x34>
 800b3a2:	4ba7      	ldr	r3, [pc, #668]	@ (800b640 <_dtoa_r+0x2c8>)
 800b3a4:	21ef      	movs	r1, #239	@ 0xef
 800b3a6:	48a7      	ldr	r0, [pc, #668]	@ (800b644 <_dtoa_r+0x2cc>)
 800b3a8:	f002 fdee 	bl	800df88 <__assert_func>
 800b3ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b3b0:	6007      	str	r7, [r0, #0]
 800b3b2:	60c7      	str	r7, [r0, #12]
 800b3b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3b8:	6819      	ldr	r1, [r3, #0]
 800b3ba:	b159      	cbz	r1, 800b3d4 <_dtoa_r+0x5c>
 800b3bc:	685a      	ldr	r2, [r3, #4]
 800b3be:	604a      	str	r2, [r1, #4]
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	4093      	lsls	r3, r2
 800b3c4:	608b      	str	r3, [r1, #8]
 800b3c6:	4658      	mov	r0, fp
 800b3c8:	f000 feda 	bl	800c180 <_Bfree>
 800b3cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	1e2b      	subs	r3, r5, #0
 800b3d6:	bfb9      	ittee	lt
 800b3d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b3dc:	9303      	strlt	r3, [sp, #12]
 800b3de:	2300      	movge	r3, #0
 800b3e0:	6033      	strge	r3, [r6, #0]
 800b3e2:	9f03      	ldr	r7, [sp, #12]
 800b3e4:	4b98      	ldr	r3, [pc, #608]	@ (800b648 <_dtoa_r+0x2d0>)
 800b3e6:	bfbc      	itt	lt
 800b3e8:	2201      	movlt	r2, #1
 800b3ea:	6032      	strlt	r2, [r6, #0]
 800b3ec:	43bb      	bics	r3, r7
 800b3ee:	d112      	bne.n	800b416 <_dtoa_r+0x9e>
 800b3f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b3f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b3f6:	6013      	str	r3, [r2, #0]
 800b3f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b3fc:	4323      	orrs	r3, r4
 800b3fe:	f000 854d 	beq.w	800be9c <_dtoa_r+0xb24>
 800b402:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b404:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b65c <_dtoa_r+0x2e4>
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 854f 	beq.w	800beac <_dtoa_r+0xb34>
 800b40e:	f10a 0303 	add.w	r3, sl, #3
 800b412:	f000 bd49 	b.w	800bea8 <_dtoa_r+0xb30>
 800b416:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b41a:	2200      	movs	r2, #0
 800b41c:	ec51 0b17 	vmov	r0, r1, d7
 800b420:	2300      	movs	r3, #0
 800b422:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b426:	f7f5 fb77 	bl	8000b18 <__aeabi_dcmpeq>
 800b42a:	4680      	mov	r8, r0
 800b42c:	b158      	cbz	r0, 800b446 <_dtoa_r+0xce>
 800b42e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b430:	2301      	movs	r3, #1
 800b432:	6013      	str	r3, [r2, #0]
 800b434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b436:	b113      	cbz	r3, 800b43e <_dtoa_r+0xc6>
 800b438:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b43a:	4b84      	ldr	r3, [pc, #528]	@ (800b64c <_dtoa_r+0x2d4>)
 800b43c:	6013      	str	r3, [r2, #0]
 800b43e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b660 <_dtoa_r+0x2e8>
 800b442:	f000 bd33 	b.w	800beac <_dtoa_r+0xb34>
 800b446:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b44a:	aa16      	add	r2, sp, #88	@ 0x58
 800b44c:	a917      	add	r1, sp, #92	@ 0x5c
 800b44e:	4658      	mov	r0, fp
 800b450:	f001 fa3a 	bl	800c8c8 <__d2b>
 800b454:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b458:	4681      	mov	r9, r0
 800b45a:	2e00      	cmp	r6, #0
 800b45c:	d077      	beq.n	800b54e <_dtoa_r+0x1d6>
 800b45e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b460:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b46c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b470:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b474:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b478:	4619      	mov	r1, r3
 800b47a:	2200      	movs	r2, #0
 800b47c:	4b74      	ldr	r3, [pc, #464]	@ (800b650 <_dtoa_r+0x2d8>)
 800b47e:	f7f4 ff2b 	bl	80002d8 <__aeabi_dsub>
 800b482:	a369      	add	r3, pc, #420	@ (adr r3, 800b628 <_dtoa_r+0x2b0>)
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	f7f5 f8de 	bl	8000648 <__aeabi_dmul>
 800b48c:	a368      	add	r3, pc, #416	@ (adr r3, 800b630 <_dtoa_r+0x2b8>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	f7f4 ff23 	bl	80002dc <__adddf3>
 800b496:	4604      	mov	r4, r0
 800b498:	4630      	mov	r0, r6
 800b49a:	460d      	mov	r5, r1
 800b49c:	f7f5 f86a 	bl	8000574 <__aeabi_i2d>
 800b4a0:	a365      	add	r3, pc, #404	@ (adr r3, 800b638 <_dtoa_r+0x2c0>)
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	f7f5 f8cf 	bl	8000648 <__aeabi_dmul>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	f7f4 ff13 	bl	80002dc <__adddf3>
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	f7f5 fb75 	bl	8000ba8 <__aeabi_d2iz>
 800b4be:	2200      	movs	r2, #0
 800b4c0:	4607      	mov	r7, r0
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	f7f5 fb30 	bl	8000b2c <__aeabi_dcmplt>
 800b4cc:	b140      	cbz	r0, 800b4e0 <_dtoa_r+0x168>
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f7f5 f850 	bl	8000574 <__aeabi_i2d>
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	f7f5 fb1e 	bl	8000b18 <__aeabi_dcmpeq>
 800b4dc:	b900      	cbnz	r0, 800b4e0 <_dtoa_r+0x168>
 800b4de:	3f01      	subs	r7, #1
 800b4e0:	2f16      	cmp	r7, #22
 800b4e2:	d851      	bhi.n	800b588 <_dtoa_r+0x210>
 800b4e4:	4b5b      	ldr	r3, [pc, #364]	@ (800b654 <_dtoa_r+0x2dc>)
 800b4e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4f2:	f7f5 fb1b 	bl	8000b2c <__aeabi_dcmplt>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d048      	beq.n	800b58c <_dtoa_r+0x214>
 800b4fa:	3f01      	subs	r7, #1
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9312      	str	r3, [sp, #72]	@ 0x48
 800b500:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b502:	1b9b      	subs	r3, r3, r6
 800b504:	1e5a      	subs	r2, r3, #1
 800b506:	bf44      	itt	mi
 800b508:	f1c3 0801 	rsbmi	r8, r3, #1
 800b50c:	2300      	movmi	r3, #0
 800b50e:	9208      	str	r2, [sp, #32]
 800b510:	bf54      	ite	pl
 800b512:	f04f 0800 	movpl.w	r8, #0
 800b516:	9308      	strmi	r3, [sp, #32]
 800b518:	2f00      	cmp	r7, #0
 800b51a:	db39      	blt.n	800b590 <_dtoa_r+0x218>
 800b51c:	9b08      	ldr	r3, [sp, #32]
 800b51e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b520:	443b      	add	r3, r7
 800b522:	9308      	str	r3, [sp, #32]
 800b524:	2300      	movs	r3, #0
 800b526:	930a      	str	r3, [sp, #40]	@ 0x28
 800b528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b52a:	2b09      	cmp	r3, #9
 800b52c:	d864      	bhi.n	800b5f8 <_dtoa_r+0x280>
 800b52e:	2b05      	cmp	r3, #5
 800b530:	bfc4      	itt	gt
 800b532:	3b04      	subgt	r3, #4
 800b534:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b538:	f1a3 0302 	sub.w	r3, r3, #2
 800b53c:	bfcc      	ite	gt
 800b53e:	2400      	movgt	r4, #0
 800b540:	2401      	movle	r4, #1
 800b542:	2b03      	cmp	r3, #3
 800b544:	d863      	bhi.n	800b60e <_dtoa_r+0x296>
 800b546:	e8df f003 	tbb	[pc, r3]
 800b54a:	372a      	.short	0x372a
 800b54c:	5535      	.short	0x5535
 800b54e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b552:	441e      	add	r6, r3
 800b554:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b558:	2b20      	cmp	r3, #32
 800b55a:	bfc1      	itttt	gt
 800b55c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b560:	409f      	lslgt	r7, r3
 800b562:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b566:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b56a:	bfd6      	itet	le
 800b56c:	f1c3 0320 	rsble	r3, r3, #32
 800b570:	ea47 0003 	orrgt.w	r0, r7, r3
 800b574:	fa04 f003 	lslle.w	r0, r4, r3
 800b578:	f7f4 ffec 	bl	8000554 <__aeabi_ui2d>
 800b57c:	2201      	movs	r2, #1
 800b57e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b582:	3e01      	subs	r6, #1
 800b584:	9214      	str	r2, [sp, #80]	@ 0x50
 800b586:	e777      	b.n	800b478 <_dtoa_r+0x100>
 800b588:	2301      	movs	r3, #1
 800b58a:	e7b8      	b.n	800b4fe <_dtoa_r+0x186>
 800b58c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b58e:	e7b7      	b.n	800b500 <_dtoa_r+0x188>
 800b590:	427b      	negs	r3, r7
 800b592:	930a      	str	r3, [sp, #40]	@ 0x28
 800b594:	2300      	movs	r3, #0
 800b596:	eba8 0807 	sub.w	r8, r8, r7
 800b59a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b59c:	e7c4      	b.n	800b528 <_dtoa_r+0x1b0>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	dc35      	bgt.n	800b614 <_dtoa_r+0x29c>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	9307      	str	r3, [sp, #28]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5b2:	e00b      	b.n	800b5cc <_dtoa_r+0x254>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e7f3      	b.n	800b5a0 <_dtoa_r+0x228>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5be:	18fb      	adds	r3, r7, r3
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	9307      	str	r3, [sp, #28]
 800b5c8:	bfb8      	it	lt
 800b5ca:	2301      	movlt	r3, #1
 800b5cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	2204      	movs	r2, #4
 800b5d4:	f102 0514 	add.w	r5, r2, #20
 800b5d8:	429d      	cmp	r5, r3
 800b5da:	d91f      	bls.n	800b61c <_dtoa_r+0x2a4>
 800b5dc:	6041      	str	r1, [r0, #4]
 800b5de:	4658      	mov	r0, fp
 800b5e0:	f000 fd8e 	bl	800c100 <_Balloc>
 800b5e4:	4682      	mov	sl, r0
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d13c      	bne.n	800b664 <_dtoa_r+0x2ec>
 800b5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b658 <_dtoa_r+0x2e0>)
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800b5f2:	e6d8      	b.n	800b3a6 <_dtoa_r+0x2e>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e7e0      	b.n	800b5ba <_dtoa_r+0x242>
 800b5f8:	2401      	movs	r4, #1
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	9307      	str	r3, [sp, #28]
 800b608:	2200      	movs	r2, #0
 800b60a:	2312      	movs	r3, #18
 800b60c:	e7d0      	b.n	800b5b0 <_dtoa_r+0x238>
 800b60e:	2301      	movs	r3, #1
 800b610:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b612:	e7f5      	b.n	800b600 <_dtoa_r+0x288>
 800b614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	9307      	str	r3, [sp, #28]
 800b61a:	e7d7      	b.n	800b5cc <_dtoa_r+0x254>
 800b61c:	3101      	adds	r1, #1
 800b61e:	0052      	lsls	r2, r2, #1
 800b620:	e7d8      	b.n	800b5d4 <_dtoa_r+0x25c>
 800b622:	bf00      	nop
 800b624:	f3af 8000 	nop.w
 800b628:	636f4361 	.word	0x636f4361
 800b62c:	3fd287a7 	.word	0x3fd287a7
 800b630:	8b60c8b3 	.word	0x8b60c8b3
 800b634:	3fc68a28 	.word	0x3fc68a28
 800b638:	509f79fb 	.word	0x509f79fb
 800b63c:	3fd34413 	.word	0x3fd34413
 800b640:	0800e9fe 	.word	0x0800e9fe
 800b644:	0800ea15 	.word	0x0800ea15
 800b648:	7ff00000 	.word	0x7ff00000
 800b64c:	0800e9c9 	.word	0x0800e9c9
 800b650:	3ff80000 	.word	0x3ff80000
 800b654:	0800eb10 	.word	0x0800eb10
 800b658:	0800ea6d 	.word	0x0800ea6d
 800b65c:	0800e9fa 	.word	0x0800e9fa
 800b660:	0800e9c8 	.word	0x0800e9c8
 800b664:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b668:	6018      	str	r0, [r3, #0]
 800b66a:	9b07      	ldr	r3, [sp, #28]
 800b66c:	2b0e      	cmp	r3, #14
 800b66e:	f200 80a4 	bhi.w	800b7ba <_dtoa_r+0x442>
 800b672:	2c00      	cmp	r4, #0
 800b674:	f000 80a1 	beq.w	800b7ba <_dtoa_r+0x442>
 800b678:	2f00      	cmp	r7, #0
 800b67a:	dd33      	ble.n	800b6e4 <_dtoa_r+0x36c>
 800b67c:	4bad      	ldr	r3, [pc, #692]	@ (800b934 <_dtoa_r+0x5bc>)
 800b67e:	f007 020f 	and.w	r2, r7, #15
 800b682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b686:	ed93 7b00 	vldr	d7, [r3]
 800b68a:	05f8      	lsls	r0, r7, #23
 800b68c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b690:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b694:	d516      	bpl.n	800b6c4 <_dtoa_r+0x34c>
 800b696:	4ba8      	ldr	r3, [pc, #672]	@ (800b938 <_dtoa_r+0x5c0>)
 800b698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b69c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6a0:	f7f5 f8fc 	bl	800089c <__aeabi_ddiv>
 800b6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6a8:	f004 040f 	and.w	r4, r4, #15
 800b6ac:	2603      	movs	r6, #3
 800b6ae:	4da2      	ldr	r5, [pc, #648]	@ (800b938 <_dtoa_r+0x5c0>)
 800b6b0:	b954      	cbnz	r4, 800b6c8 <_dtoa_r+0x350>
 800b6b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ba:	f7f5 f8ef 	bl	800089c <__aeabi_ddiv>
 800b6be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6c2:	e028      	b.n	800b716 <_dtoa_r+0x39e>
 800b6c4:	2602      	movs	r6, #2
 800b6c6:	e7f2      	b.n	800b6ae <_dtoa_r+0x336>
 800b6c8:	07e1      	lsls	r1, r4, #31
 800b6ca:	d508      	bpl.n	800b6de <_dtoa_r+0x366>
 800b6cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6d4:	f7f4 ffb8 	bl	8000648 <__aeabi_dmul>
 800b6d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6dc:	3601      	adds	r6, #1
 800b6de:	1064      	asrs	r4, r4, #1
 800b6e0:	3508      	adds	r5, #8
 800b6e2:	e7e5      	b.n	800b6b0 <_dtoa_r+0x338>
 800b6e4:	f000 80d2 	beq.w	800b88c <_dtoa_r+0x514>
 800b6e8:	427c      	negs	r4, r7
 800b6ea:	4b92      	ldr	r3, [pc, #584]	@ (800b934 <_dtoa_r+0x5bc>)
 800b6ec:	4d92      	ldr	r5, [pc, #584]	@ (800b938 <_dtoa_r+0x5c0>)
 800b6ee:	f004 020f 	and.w	r2, r4, #15
 800b6f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6fe:	f7f4 ffa3 	bl	8000648 <__aeabi_dmul>
 800b702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b706:	1124      	asrs	r4, r4, #4
 800b708:	2300      	movs	r3, #0
 800b70a:	2602      	movs	r6, #2
 800b70c:	2c00      	cmp	r4, #0
 800b70e:	f040 80b2 	bne.w	800b876 <_dtoa_r+0x4fe>
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1d3      	bne.n	800b6be <_dtoa_r+0x346>
 800b716:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b718:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f000 80b7 	beq.w	800b890 <_dtoa_r+0x518>
 800b722:	4b86      	ldr	r3, [pc, #536]	@ (800b93c <_dtoa_r+0x5c4>)
 800b724:	2200      	movs	r2, #0
 800b726:	4620      	mov	r0, r4
 800b728:	4629      	mov	r1, r5
 800b72a:	f7f5 f9ff 	bl	8000b2c <__aeabi_dcmplt>
 800b72e:	2800      	cmp	r0, #0
 800b730:	f000 80ae 	beq.w	800b890 <_dtoa_r+0x518>
 800b734:	9b07      	ldr	r3, [sp, #28]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f000 80aa 	beq.w	800b890 <_dtoa_r+0x518>
 800b73c:	9b00      	ldr	r3, [sp, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	dd37      	ble.n	800b7b2 <_dtoa_r+0x43a>
 800b742:	1e7b      	subs	r3, r7, #1
 800b744:	9304      	str	r3, [sp, #16]
 800b746:	4620      	mov	r0, r4
 800b748:	4b7d      	ldr	r3, [pc, #500]	@ (800b940 <_dtoa_r+0x5c8>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	4629      	mov	r1, r5
 800b74e:	f7f4 ff7b 	bl	8000648 <__aeabi_dmul>
 800b752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b756:	9c00      	ldr	r4, [sp, #0]
 800b758:	3601      	adds	r6, #1
 800b75a:	4630      	mov	r0, r6
 800b75c:	f7f4 ff0a 	bl	8000574 <__aeabi_i2d>
 800b760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b764:	f7f4 ff70 	bl	8000648 <__aeabi_dmul>
 800b768:	4b76      	ldr	r3, [pc, #472]	@ (800b944 <_dtoa_r+0x5cc>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	f7f4 fdb6 	bl	80002dc <__adddf3>
 800b770:	4605      	mov	r5, r0
 800b772:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b776:	2c00      	cmp	r4, #0
 800b778:	f040 808d 	bne.w	800b896 <_dtoa_r+0x51e>
 800b77c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b780:	4b71      	ldr	r3, [pc, #452]	@ (800b948 <_dtoa_r+0x5d0>)
 800b782:	2200      	movs	r2, #0
 800b784:	f7f4 fda8 	bl	80002d8 <__aeabi_dsub>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b790:	462a      	mov	r2, r5
 800b792:	4633      	mov	r3, r6
 800b794:	f7f5 f9e8 	bl	8000b68 <__aeabi_dcmpgt>
 800b798:	2800      	cmp	r0, #0
 800b79a:	f040 828b 	bne.w	800bcb4 <_dtoa_r+0x93c>
 800b79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a2:	462a      	mov	r2, r5
 800b7a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b7a8:	f7f5 f9c0 	bl	8000b2c <__aeabi_dcmplt>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	f040 8128 	bne.w	800ba02 <_dtoa_r+0x68a>
 800b7b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b7b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b7ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f2c0 815a 	blt.w	800ba76 <_dtoa_r+0x6fe>
 800b7c2:	2f0e      	cmp	r7, #14
 800b7c4:	f300 8157 	bgt.w	800ba76 <_dtoa_r+0x6fe>
 800b7c8:	4b5a      	ldr	r3, [pc, #360]	@ (800b934 <_dtoa_r+0x5bc>)
 800b7ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7ce:	ed93 7b00 	vldr	d7, [r3]
 800b7d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	ed8d 7b00 	vstr	d7, [sp]
 800b7da:	da03      	bge.n	800b7e4 <_dtoa_r+0x46c>
 800b7dc:	9b07      	ldr	r3, [sp, #28]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f340 8101 	ble.w	800b9e6 <_dtoa_r+0x66e>
 800b7e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b7e8:	4656      	mov	r6, sl
 800b7ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	f7f5 f853 	bl	800089c <__aeabi_ddiv>
 800b7f6:	f7f5 f9d7 	bl	8000ba8 <__aeabi_d2iz>
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	f7f4 feba 	bl	8000574 <__aeabi_i2d>
 800b800:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b804:	f7f4 ff20 	bl	8000648 <__aeabi_dmul>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	4620      	mov	r0, r4
 800b80e:	4629      	mov	r1, r5
 800b810:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b814:	f7f4 fd60 	bl	80002d8 <__aeabi_dsub>
 800b818:	f806 4b01 	strb.w	r4, [r6], #1
 800b81c:	9d07      	ldr	r5, [sp, #28]
 800b81e:	eba6 040a 	sub.w	r4, r6, sl
 800b822:	42a5      	cmp	r5, r4
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	f040 8117 	bne.w	800ba5a <_dtoa_r+0x6e2>
 800b82c:	f7f4 fd56 	bl	80002dc <__adddf3>
 800b830:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b834:	4604      	mov	r4, r0
 800b836:	460d      	mov	r5, r1
 800b838:	f7f5 f996 	bl	8000b68 <__aeabi_dcmpgt>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	f040 80f9 	bne.w	800ba34 <_dtoa_r+0x6bc>
 800b842:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b846:	4620      	mov	r0, r4
 800b848:	4629      	mov	r1, r5
 800b84a:	f7f5 f965 	bl	8000b18 <__aeabi_dcmpeq>
 800b84e:	b118      	cbz	r0, 800b858 <_dtoa_r+0x4e0>
 800b850:	f018 0f01 	tst.w	r8, #1
 800b854:	f040 80ee 	bne.w	800ba34 <_dtoa_r+0x6bc>
 800b858:	4649      	mov	r1, r9
 800b85a:	4658      	mov	r0, fp
 800b85c:	f000 fc90 	bl	800c180 <_Bfree>
 800b860:	2300      	movs	r3, #0
 800b862:	7033      	strb	r3, [r6, #0]
 800b864:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b866:	3701      	adds	r7, #1
 800b868:	601f      	str	r7, [r3, #0]
 800b86a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 831d 	beq.w	800beac <_dtoa_r+0xb34>
 800b872:	601e      	str	r6, [r3, #0]
 800b874:	e31a      	b.n	800beac <_dtoa_r+0xb34>
 800b876:	07e2      	lsls	r2, r4, #31
 800b878:	d505      	bpl.n	800b886 <_dtoa_r+0x50e>
 800b87a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b87e:	f7f4 fee3 	bl	8000648 <__aeabi_dmul>
 800b882:	3601      	adds	r6, #1
 800b884:	2301      	movs	r3, #1
 800b886:	1064      	asrs	r4, r4, #1
 800b888:	3508      	adds	r5, #8
 800b88a:	e73f      	b.n	800b70c <_dtoa_r+0x394>
 800b88c:	2602      	movs	r6, #2
 800b88e:	e742      	b.n	800b716 <_dtoa_r+0x39e>
 800b890:	9c07      	ldr	r4, [sp, #28]
 800b892:	9704      	str	r7, [sp, #16]
 800b894:	e761      	b.n	800b75a <_dtoa_r+0x3e2>
 800b896:	4b27      	ldr	r3, [pc, #156]	@ (800b934 <_dtoa_r+0x5bc>)
 800b898:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b89a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b89e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8a2:	4454      	add	r4, sl
 800b8a4:	2900      	cmp	r1, #0
 800b8a6:	d053      	beq.n	800b950 <_dtoa_r+0x5d8>
 800b8a8:	4928      	ldr	r1, [pc, #160]	@ (800b94c <_dtoa_r+0x5d4>)
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	f7f4 fff6 	bl	800089c <__aeabi_ddiv>
 800b8b0:	4633      	mov	r3, r6
 800b8b2:	462a      	mov	r2, r5
 800b8b4:	f7f4 fd10 	bl	80002d8 <__aeabi_dsub>
 800b8b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8bc:	4656      	mov	r6, sl
 800b8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8c2:	f7f5 f971 	bl	8000ba8 <__aeabi_d2iz>
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	f7f4 fe54 	bl	8000574 <__aeabi_i2d>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8d4:	f7f4 fd00 	bl	80002d8 <__aeabi_dsub>
 800b8d8:	3530      	adds	r5, #48	@ 0x30
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8e2:	f806 5b01 	strb.w	r5, [r6], #1
 800b8e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8ea:	f7f5 f91f 	bl	8000b2c <__aeabi_dcmplt>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d171      	bne.n	800b9d6 <_dtoa_r+0x65e>
 800b8f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8f6:	4911      	ldr	r1, [pc, #68]	@ (800b93c <_dtoa_r+0x5c4>)
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	f7f4 fced 	bl	80002d8 <__aeabi_dsub>
 800b8fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b902:	f7f5 f913 	bl	8000b2c <__aeabi_dcmplt>
 800b906:	2800      	cmp	r0, #0
 800b908:	f040 8095 	bne.w	800ba36 <_dtoa_r+0x6be>
 800b90c:	42a6      	cmp	r6, r4
 800b90e:	f43f af50 	beq.w	800b7b2 <_dtoa_r+0x43a>
 800b912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b916:	4b0a      	ldr	r3, [pc, #40]	@ (800b940 <_dtoa_r+0x5c8>)
 800b918:	2200      	movs	r2, #0
 800b91a:	f7f4 fe95 	bl	8000648 <__aeabi_dmul>
 800b91e:	4b08      	ldr	r3, [pc, #32]	@ (800b940 <_dtoa_r+0x5c8>)
 800b920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b924:	2200      	movs	r2, #0
 800b926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b92a:	f7f4 fe8d 	bl	8000648 <__aeabi_dmul>
 800b92e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b932:	e7c4      	b.n	800b8be <_dtoa_r+0x546>
 800b934:	0800eb10 	.word	0x0800eb10
 800b938:	0800eae8 	.word	0x0800eae8
 800b93c:	3ff00000 	.word	0x3ff00000
 800b940:	40240000 	.word	0x40240000
 800b944:	401c0000 	.word	0x401c0000
 800b948:	40140000 	.word	0x40140000
 800b94c:	3fe00000 	.word	0x3fe00000
 800b950:	4631      	mov	r1, r6
 800b952:	4628      	mov	r0, r5
 800b954:	f7f4 fe78 	bl	8000648 <__aeabi_dmul>
 800b958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b95c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b95e:	4656      	mov	r6, sl
 800b960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b964:	f7f5 f920 	bl	8000ba8 <__aeabi_d2iz>
 800b968:	4605      	mov	r5, r0
 800b96a:	f7f4 fe03 	bl	8000574 <__aeabi_i2d>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b976:	f7f4 fcaf 	bl	80002d8 <__aeabi_dsub>
 800b97a:	3530      	adds	r5, #48	@ 0x30
 800b97c:	f806 5b01 	strb.w	r5, [r6], #1
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	42a6      	cmp	r6, r4
 800b986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b98a:	f04f 0200 	mov.w	r2, #0
 800b98e:	d124      	bne.n	800b9da <_dtoa_r+0x662>
 800b990:	4bac      	ldr	r3, [pc, #688]	@ (800bc44 <_dtoa_r+0x8cc>)
 800b992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b996:	f7f4 fca1 	bl	80002dc <__adddf3>
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9a2:	f7f5 f8e1 	bl	8000b68 <__aeabi_dcmpgt>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d145      	bne.n	800ba36 <_dtoa_r+0x6be>
 800b9aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9ae:	49a5      	ldr	r1, [pc, #660]	@ (800bc44 <_dtoa_r+0x8cc>)
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	f7f4 fc91 	bl	80002d8 <__aeabi_dsub>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9be:	f7f5 f8b5 	bl	8000b2c <__aeabi_dcmplt>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	f43f aef5 	beq.w	800b7b2 <_dtoa_r+0x43a>
 800b9c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b9ca:	1e73      	subs	r3, r6, #1
 800b9cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b9ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b9d2:	2b30      	cmp	r3, #48	@ 0x30
 800b9d4:	d0f8      	beq.n	800b9c8 <_dtoa_r+0x650>
 800b9d6:	9f04      	ldr	r7, [sp, #16]
 800b9d8:	e73e      	b.n	800b858 <_dtoa_r+0x4e0>
 800b9da:	4b9b      	ldr	r3, [pc, #620]	@ (800bc48 <_dtoa_r+0x8d0>)
 800b9dc:	f7f4 fe34 	bl	8000648 <__aeabi_dmul>
 800b9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e4:	e7bc      	b.n	800b960 <_dtoa_r+0x5e8>
 800b9e6:	d10c      	bne.n	800ba02 <_dtoa_r+0x68a>
 800b9e8:	4b98      	ldr	r3, [pc, #608]	@ (800bc4c <_dtoa_r+0x8d4>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9f0:	f7f4 fe2a 	bl	8000648 <__aeabi_dmul>
 800b9f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9f8:	f7f5 f8ac 	bl	8000b54 <__aeabi_dcmpge>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	f000 8157 	beq.w	800bcb0 <_dtoa_r+0x938>
 800ba02:	2400      	movs	r4, #0
 800ba04:	4625      	mov	r5, r4
 800ba06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba08:	43db      	mvns	r3, r3
 800ba0a:	9304      	str	r3, [sp, #16]
 800ba0c:	4656      	mov	r6, sl
 800ba0e:	2700      	movs	r7, #0
 800ba10:	4621      	mov	r1, r4
 800ba12:	4658      	mov	r0, fp
 800ba14:	f000 fbb4 	bl	800c180 <_Bfree>
 800ba18:	2d00      	cmp	r5, #0
 800ba1a:	d0dc      	beq.n	800b9d6 <_dtoa_r+0x65e>
 800ba1c:	b12f      	cbz	r7, 800ba2a <_dtoa_r+0x6b2>
 800ba1e:	42af      	cmp	r7, r5
 800ba20:	d003      	beq.n	800ba2a <_dtoa_r+0x6b2>
 800ba22:	4639      	mov	r1, r7
 800ba24:	4658      	mov	r0, fp
 800ba26:	f000 fbab 	bl	800c180 <_Bfree>
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	4658      	mov	r0, fp
 800ba2e:	f000 fba7 	bl	800c180 <_Bfree>
 800ba32:	e7d0      	b.n	800b9d6 <_dtoa_r+0x65e>
 800ba34:	9704      	str	r7, [sp, #16]
 800ba36:	4633      	mov	r3, r6
 800ba38:	461e      	mov	r6, r3
 800ba3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba3e:	2a39      	cmp	r2, #57	@ 0x39
 800ba40:	d107      	bne.n	800ba52 <_dtoa_r+0x6da>
 800ba42:	459a      	cmp	sl, r3
 800ba44:	d1f8      	bne.n	800ba38 <_dtoa_r+0x6c0>
 800ba46:	9a04      	ldr	r2, [sp, #16]
 800ba48:	3201      	adds	r2, #1
 800ba4a:	9204      	str	r2, [sp, #16]
 800ba4c:	2230      	movs	r2, #48	@ 0x30
 800ba4e:	f88a 2000 	strb.w	r2, [sl]
 800ba52:	781a      	ldrb	r2, [r3, #0]
 800ba54:	3201      	adds	r2, #1
 800ba56:	701a      	strb	r2, [r3, #0]
 800ba58:	e7bd      	b.n	800b9d6 <_dtoa_r+0x65e>
 800ba5a:	4b7b      	ldr	r3, [pc, #492]	@ (800bc48 <_dtoa_r+0x8d0>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f7f4 fdf3 	bl	8000648 <__aeabi_dmul>
 800ba62:	2200      	movs	r2, #0
 800ba64:	2300      	movs	r3, #0
 800ba66:	4604      	mov	r4, r0
 800ba68:	460d      	mov	r5, r1
 800ba6a:	f7f5 f855 	bl	8000b18 <__aeabi_dcmpeq>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	f43f aebb 	beq.w	800b7ea <_dtoa_r+0x472>
 800ba74:	e6f0      	b.n	800b858 <_dtoa_r+0x4e0>
 800ba76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba78:	2a00      	cmp	r2, #0
 800ba7a:	f000 80db 	beq.w	800bc34 <_dtoa_r+0x8bc>
 800ba7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba80:	2a01      	cmp	r2, #1
 800ba82:	f300 80bf 	bgt.w	800bc04 <_dtoa_r+0x88c>
 800ba86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ba88:	2a00      	cmp	r2, #0
 800ba8a:	f000 80b7 	beq.w	800bbfc <_dtoa_r+0x884>
 800ba8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ba92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba94:	4646      	mov	r6, r8
 800ba96:	9a08      	ldr	r2, [sp, #32]
 800ba98:	2101      	movs	r1, #1
 800ba9a:	441a      	add	r2, r3
 800ba9c:	4658      	mov	r0, fp
 800ba9e:	4498      	add	r8, r3
 800baa0:	9208      	str	r2, [sp, #32]
 800baa2:	f000 fc6b 	bl	800c37c <__i2b>
 800baa6:	4605      	mov	r5, r0
 800baa8:	b15e      	cbz	r6, 800bac2 <_dtoa_r+0x74a>
 800baaa:	9b08      	ldr	r3, [sp, #32]
 800baac:	2b00      	cmp	r3, #0
 800baae:	dd08      	ble.n	800bac2 <_dtoa_r+0x74a>
 800bab0:	42b3      	cmp	r3, r6
 800bab2:	9a08      	ldr	r2, [sp, #32]
 800bab4:	bfa8      	it	ge
 800bab6:	4633      	movge	r3, r6
 800bab8:	eba8 0803 	sub.w	r8, r8, r3
 800babc:	1af6      	subs	r6, r6, r3
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	9308      	str	r3, [sp, #32]
 800bac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bac4:	b1f3      	cbz	r3, 800bb04 <_dtoa_r+0x78c>
 800bac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f000 80b7 	beq.w	800bc3c <_dtoa_r+0x8c4>
 800bace:	b18c      	cbz	r4, 800baf4 <_dtoa_r+0x77c>
 800bad0:	4629      	mov	r1, r5
 800bad2:	4622      	mov	r2, r4
 800bad4:	4658      	mov	r0, fp
 800bad6:	f000 fd11 	bl	800c4fc <__pow5mult>
 800bada:	464a      	mov	r2, r9
 800badc:	4601      	mov	r1, r0
 800bade:	4605      	mov	r5, r0
 800bae0:	4658      	mov	r0, fp
 800bae2:	f000 fc61 	bl	800c3a8 <__multiply>
 800bae6:	4649      	mov	r1, r9
 800bae8:	9004      	str	r0, [sp, #16]
 800baea:	4658      	mov	r0, fp
 800baec:	f000 fb48 	bl	800c180 <_Bfree>
 800baf0:	9b04      	ldr	r3, [sp, #16]
 800baf2:	4699      	mov	r9, r3
 800baf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baf6:	1b1a      	subs	r2, r3, r4
 800baf8:	d004      	beq.n	800bb04 <_dtoa_r+0x78c>
 800bafa:	4649      	mov	r1, r9
 800bafc:	4658      	mov	r0, fp
 800bafe:	f000 fcfd 	bl	800c4fc <__pow5mult>
 800bb02:	4681      	mov	r9, r0
 800bb04:	2101      	movs	r1, #1
 800bb06:	4658      	mov	r0, fp
 800bb08:	f000 fc38 	bl	800c37c <__i2b>
 800bb0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb0e:	4604      	mov	r4, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 81cf 	beq.w	800beb4 <_dtoa_r+0xb3c>
 800bb16:	461a      	mov	r2, r3
 800bb18:	4601      	mov	r1, r0
 800bb1a:	4658      	mov	r0, fp
 800bb1c:	f000 fcee 	bl	800c4fc <__pow5mult>
 800bb20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	4604      	mov	r4, r0
 800bb26:	f300 8095 	bgt.w	800bc54 <_dtoa_r+0x8dc>
 800bb2a:	9b02      	ldr	r3, [sp, #8]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f040 8087 	bne.w	800bc40 <_dtoa_r+0x8c8>
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f040 8089 	bne.w	800bc50 <_dtoa_r+0x8d8>
 800bb3e:	9b03      	ldr	r3, [sp, #12]
 800bb40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb44:	0d1b      	lsrs	r3, r3, #20
 800bb46:	051b      	lsls	r3, r3, #20
 800bb48:	b12b      	cbz	r3, 800bb56 <_dtoa_r+0x7de>
 800bb4a:	9b08      	ldr	r3, [sp, #32]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	9308      	str	r3, [sp, #32]
 800bb50:	f108 0801 	add.w	r8, r8, #1
 800bb54:	2301      	movs	r3, #1
 800bb56:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 81b0 	beq.w	800bec0 <_dtoa_r+0xb48>
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb66:	6918      	ldr	r0, [r3, #16]
 800bb68:	f000 fbbc 	bl	800c2e4 <__hi0bits>
 800bb6c:	f1c0 0020 	rsb	r0, r0, #32
 800bb70:	9b08      	ldr	r3, [sp, #32]
 800bb72:	4418      	add	r0, r3
 800bb74:	f010 001f 	ands.w	r0, r0, #31
 800bb78:	d077      	beq.n	800bc6a <_dtoa_r+0x8f2>
 800bb7a:	f1c0 0320 	rsb	r3, r0, #32
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	dd6b      	ble.n	800bc5a <_dtoa_r+0x8e2>
 800bb82:	9b08      	ldr	r3, [sp, #32]
 800bb84:	f1c0 001c 	rsb	r0, r0, #28
 800bb88:	4403      	add	r3, r0
 800bb8a:	4480      	add	r8, r0
 800bb8c:	4406      	add	r6, r0
 800bb8e:	9308      	str	r3, [sp, #32]
 800bb90:	f1b8 0f00 	cmp.w	r8, #0
 800bb94:	dd05      	ble.n	800bba2 <_dtoa_r+0x82a>
 800bb96:	4649      	mov	r1, r9
 800bb98:	4642      	mov	r2, r8
 800bb9a:	4658      	mov	r0, fp
 800bb9c:	f000 fd08 	bl	800c5b0 <__lshift>
 800bba0:	4681      	mov	r9, r0
 800bba2:	9b08      	ldr	r3, [sp, #32]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	dd05      	ble.n	800bbb4 <_dtoa_r+0x83c>
 800bba8:	4621      	mov	r1, r4
 800bbaa:	461a      	mov	r2, r3
 800bbac:	4658      	mov	r0, fp
 800bbae:	f000 fcff 	bl	800c5b0 <__lshift>
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d059      	beq.n	800bc6e <_dtoa_r+0x8f6>
 800bbba:	4621      	mov	r1, r4
 800bbbc:	4648      	mov	r0, r9
 800bbbe:	f000 fd63 	bl	800c688 <__mcmp>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	da53      	bge.n	800bc6e <_dtoa_r+0x8f6>
 800bbc6:	1e7b      	subs	r3, r7, #1
 800bbc8:	9304      	str	r3, [sp, #16]
 800bbca:	4649      	mov	r1, r9
 800bbcc:	2300      	movs	r3, #0
 800bbce:	220a      	movs	r2, #10
 800bbd0:	4658      	mov	r0, fp
 800bbd2:	f000 faf7 	bl	800c1c4 <__multadd>
 800bbd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbd8:	4681      	mov	r9, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f000 8172 	beq.w	800bec4 <_dtoa_r+0xb4c>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	220a      	movs	r2, #10
 800bbe6:	4658      	mov	r0, fp
 800bbe8:	f000 faec 	bl	800c1c4 <__multadd>
 800bbec:	9b00      	ldr	r3, [sp, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	dc67      	bgt.n	800bcc4 <_dtoa_r+0x94c>
 800bbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	dc41      	bgt.n	800bc7e <_dtoa_r+0x906>
 800bbfa:	e063      	b.n	800bcc4 <_dtoa_r+0x94c>
 800bbfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bbfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bc02:	e746      	b.n	800ba92 <_dtoa_r+0x71a>
 800bc04:	9b07      	ldr	r3, [sp, #28]
 800bc06:	1e5c      	subs	r4, r3, #1
 800bc08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc0a:	42a3      	cmp	r3, r4
 800bc0c:	bfbf      	itttt	lt
 800bc0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bc10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bc12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bc14:	1ae3      	sublt	r3, r4, r3
 800bc16:	bfb4      	ite	lt
 800bc18:	18d2      	addlt	r2, r2, r3
 800bc1a:	1b1c      	subge	r4, r3, r4
 800bc1c:	9b07      	ldr	r3, [sp, #28]
 800bc1e:	bfbc      	itt	lt
 800bc20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bc22:	2400      	movlt	r4, #0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	bfb5      	itete	lt
 800bc28:	eba8 0603 	sublt.w	r6, r8, r3
 800bc2c:	9b07      	ldrge	r3, [sp, #28]
 800bc2e:	2300      	movlt	r3, #0
 800bc30:	4646      	movge	r6, r8
 800bc32:	e730      	b.n	800ba96 <_dtoa_r+0x71e>
 800bc34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bc38:	4646      	mov	r6, r8
 800bc3a:	e735      	b.n	800baa8 <_dtoa_r+0x730>
 800bc3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc3e:	e75c      	b.n	800bafa <_dtoa_r+0x782>
 800bc40:	2300      	movs	r3, #0
 800bc42:	e788      	b.n	800bb56 <_dtoa_r+0x7de>
 800bc44:	3fe00000 	.word	0x3fe00000
 800bc48:	40240000 	.word	0x40240000
 800bc4c:	40140000 	.word	0x40140000
 800bc50:	9b02      	ldr	r3, [sp, #8]
 800bc52:	e780      	b.n	800bb56 <_dtoa_r+0x7de>
 800bc54:	2300      	movs	r3, #0
 800bc56:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc58:	e782      	b.n	800bb60 <_dtoa_r+0x7e8>
 800bc5a:	d099      	beq.n	800bb90 <_dtoa_r+0x818>
 800bc5c:	9a08      	ldr	r2, [sp, #32]
 800bc5e:	331c      	adds	r3, #28
 800bc60:	441a      	add	r2, r3
 800bc62:	4498      	add	r8, r3
 800bc64:	441e      	add	r6, r3
 800bc66:	9208      	str	r2, [sp, #32]
 800bc68:	e792      	b.n	800bb90 <_dtoa_r+0x818>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	e7f6      	b.n	800bc5c <_dtoa_r+0x8e4>
 800bc6e:	9b07      	ldr	r3, [sp, #28]
 800bc70:	9704      	str	r7, [sp, #16]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	dc20      	bgt.n	800bcb8 <_dtoa_r+0x940>
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	dd1e      	ble.n	800bcbc <_dtoa_r+0x944>
 800bc7e:	9b00      	ldr	r3, [sp, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f47f aec0 	bne.w	800ba06 <_dtoa_r+0x68e>
 800bc86:	4621      	mov	r1, r4
 800bc88:	2205      	movs	r2, #5
 800bc8a:	4658      	mov	r0, fp
 800bc8c:	f000 fa9a 	bl	800c1c4 <__multadd>
 800bc90:	4601      	mov	r1, r0
 800bc92:	4604      	mov	r4, r0
 800bc94:	4648      	mov	r0, r9
 800bc96:	f000 fcf7 	bl	800c688 <__mcmp>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	f77f aeb3 	ble.w	800ba06 <_dtoa_r+0x68e>
 800bca0:	4656      	mov	r6, sl
 800bca2:	2331      	movs	r3, #49	@ 0x31
 800bca4:	f806 3b01 	strb.w	r3, [r6], #1
 800bca8:	9b04      	ldr	r3, [sp, #16]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	9304      	str	r3, [sp, #16]
 800bcae:	e6ae      	b.n	800ba0e <_dtoa_r+0x696>
 800bcb0:	9c07      	ldr	r4, [sp, #28]
 800bcb2:	9704      	str	r7, [sp, #16]
 800bcb4:	4625      	mov	r5, r4
 800bcb6:	e7f3      	b.n	800bca0 <_dtoa_r+0x928>
 800bcb8:	9b07      	ldr	r3, [sp, #28]
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 8104 	beq.w	800becc <_dtoa_r+0xb54>
 800bcc4:	2e00      	cmp	r6, #0
 800bcc6:	dd05      	ble.n	800bcd4 <_dtoa_r+0x95c>
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4632      	mov	r2, r6
 800bccc:	4658      	mov	r0, fp
 800bcce:	f000 fc6f 	bl	800c5b0 <__lshift>
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d05a      	beq.n	800bd90 <_dtoa_r+0xa18>
 800bcda:	6869      	ldr	r1, [r5, #4]
 800bcdc:	4658      	mov	r0, fp
 800bcde:	f000 fa0f 	bl	800c100 <_Balloc>
 800bce2:	4606      	mov	r6, r0
 800bce4:	b928      	cbnz	r0, 800bcf2 <_dtoa_r+0x97a>
 800bce6:	4b84      	ldr	r3, [pc, #528]	@ (800bef8 <_dtoa_r+0xb80>)
 800bce8:	4602      	mov	r2, r0
 800bcea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bcee:	f7ff bb5a 	b.w	800b3a6 <_dtoa_r+0x2e>
 800bcf2:	692a      	ldr	r2, [r5, #16]
 800bcf4:	3202      	adds	r2, #2
 800bcf6:	0092      	lsls	r2, r2, #2
 800bcf8:	f105 010c 	add.w	r1, r5, #12
 800bcfc:	300c      	adds	r0, #12
 800bcfe:	f7ff fa9c 	bl	800b23a <memcpy>
 800bd02:	2201      	movs	r2, #1
 800bd04:	4631      	mov	r1, r6
 800bd06:	4658      	mov	r0, fp
 800bd08:	f000 fc52 	bl	800c5b0 <__lshift>
 800bd0c:	f10a 0301 	add.w	r3, sl, #1
 800bd10:	9307      	str	r3, [sp, #28]
 800bd12:	9b00      	ldr	r3, [sp, #0]
 800bd14:	4453      	add	r3, sl
 800bd16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd18:	9b02      	ldr	r3, [sp, #8]
 800bd1a:	f003 0301 	and.w	r3, r3, #1
 800bd1e:	462f      	mov	r7, r5
 800bd20:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd22:	4605      	mov	r5, r0
 800bd24:	9b07      	ldr	r3, [sp, #28]
 800bd26:	4621      	mov	r1, r4
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	4648      	mov	r0, r9
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	f7ff fa99 	bl	800b264 <quorem>
 800bd32:	4639      	mov	r1, r7
 800bd34:	9002      	str	r0, [sp, #8]
 800bd36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd3a:	4648      	mov	r0, r9
 800bd3c:	f000 fca4 	bl	800c688 <__mcmp>
 800bd40:	462a      	mov	r2, r5
 800bd42:	9008      	str	r0, [sp, #32]
 800bd44:	4621      	mov	r1, r4
 800bd46:	4658      	mov	r0, fp
 800bd48:	f000 fcba 	bl	800c6c0 <__mdiff>
 800bd4c:	68c2      	ldr	r2, [r0, #12]
 800bd4e:	4606      	mov	r6, r0
 800bd50:	bb02      	cbnz	r2, 800bd94 <_dtoa_r+0xa1c>
 800bd52:	4601      	mov	r1, r0
 800bd54:	4648      	mov	r0, r9
 800bd56:	f000 fc97 	bl	800c688 <__mcmp>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	4631      	mov	r1, r6
 800bd5e:	4658      	mov	r0, fp
 800bd60:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd62:	f000 fa0d 	bl	800c180 <_Bfree>
 800bd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd6a:	9e07      	ldr	r6, [sp, #28]
 800bd6c:	ea43 0102 	orr.w	r1, r3, r2
 800bd70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd72:	4319      	orrs	r1, r3
 800bd74:	d110      	bne.n	800bd98 <_dtoa_r+0xa20>
 800bd76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd7a:	d029      	beq.n	800bdd0 <_dtoa_r+0xa58>
 800bd7c:	9b08      	ldr	r3, [sp, #32]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	dd02      	ble.n	800bd88 <_dtoa_r+0xa10>
 800bd82:	9b02      	ldr	r3, [sp, #8]
 800bd84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bd88:	9b00      	ldr	r3, [sp, #0]
 800bd8a:	f883 8000 	strb.w	r8, [r3]
 800bd8e:	e63f      	b.n	800ba10 <_dtoa_r+0x698>
 800bd90:	4628      	mov	r0, r5
 800bd92:	e7bb      	b.n	800bd0c <_dtoa_r+0x994>
 800bd94:	2201      	movs	r2, #1
 800bd96:	e7e1      	b.n	800bd5c <_dtoa_r+0x9e4>
 800bd98:	9b08      	ldr	r3, [sp, #32]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	db04      	blt.n	800bda8 <_dtoa_r+0xa30>
 800bd9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bda0:	430b      	orrs	r3, r1
 800bda2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bda4:	430b      	orrs	r3, r1
 800bda6:	d120      	bne.n	800bdea <_dtoa_r+0xa72>
 800bda8:	2a00      	cmp	r2, #0
 800bdaa:	dded      	ble.n	800bd88 <_dtoa_r+0xa10>
 800bdac:	4649      	mov	r1, r9
 800bdae:	2201      	movs	r2, #1
 800bdb0:	4658      	mov	r0, fp
 800bdb2:	f000 fbfd 	bl	800c5b0 <__lshift>
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	4681      	mov	r9, r0
 800bdba:	f000 fc65 	bl	800c688 <__mcmp>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	dc03      	bgt.n	800bdca <_dtoa_r+0xa52>
 800bdc2:	d1e1      	bne.n	800bd88 <_dtoa_r+0xa10>
 800bdc4:	f018 0f01 	tst.w	r8, #1
 800bdc8:	d0de      	beq.n	800bd88 <_dtoa_r+0xa10>
 800bdca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdce:	d1d8      	bne.n	800bd82 <_dtoa_r+0xa0a>
 800bdd0:	9a00      	ldr	r2, [sp, #0]
 800bdd2:	2339      	movs	r3, #57	@ 0x39
 800bdd4:	7013      	strb	r3, [r2, #0]
 800bdd6:	4633      	mov	r3, r6
 800bdd8:	461e      	mov	r6, r3
 800bdda:	3b01      	subs	r3, #1
 800bddc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bde0:	2a39      	cmp	r2, #57	@ 0x39
 800bde2:	d052      	beq.n	800be8a <_dtoa_r+0xb12>
 800bde4:	3201      	adds	r2, #1
 800bde6:	701a      	strb	r2, [r3, #0]
 800bde8:	e612      	b.n	800ba10 <_dtoa_r+0x698>
 800bdea:	2a00      	cmp	r2, #0
 800bdec:	dd07      	ble.n	800bdfe <_dtoa_r+0xa86>
 800bdee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdf2:	d0ed      	beq.n	800bdd0 <_dtoa_r+0xa58>
 800bdf4:	9a00      	ldr	r2, [sp, #0]
 800bdf6:	f108 0301 	add.w	r3, r8, #1
 800bdfa:	7013      	strb	r3, [r2, #0]
 800bdfc:	e608      	b.n	800ba10 <_dtoa_r+0x698>
 800bdfe:	9b07      	ldr	r3, [sp, #28]
 800be00:	9a07      	ldr	r2, [sp, #28]
 800be02:	f803 8c01 	strb.w	r8, [r3, #-1]
 800be06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be08:	4293      	cmp	r3, r2
 800be0a:	d028      	beq.n	800be5e <_dtoa_r+0xae6>
 800be0c:	4649      	mov	r1, r9
 800be0e:	2300      	movs	r3, #0
 800be10:	220a      	movs	r2, #10
 800be12:	4658      	mov	r0, fp
 800be14:	f000 f9d6 	bl	800c1c4 <__multadd>
 800be18:	42af      	cmp	r7, r5
 800be1a:	4681      	mov	r9, r0
 800be1c:	f04f 0300 	mov.w	r3, #0
 800be20:	f04f 020a 	mov.w	r2, #10
 800be24:	4639      	mov	r1, r7
 800be26:	4658      	mov	r0, fp
 800be28:	d107      	bne.n	800be3a <_dtoa_r+0xac2>
 800be2a:	f000 f9cb 	bl	800c1c4 <__multadd>
 800be2e:	4607      	mov	r7, r0
 800be30:	4605      	mov	r5, r0
 800be32:	9b07      	ldr	r3, [sp, #28]
 800be34:	3301      	adds	r3, #1
 800be36:	9307      	str	r3, [sp, #28]
 800be38:	e774      	b.n	800bd24 <_dtoa_r+0x9ac>
 800be3a:	f000 f9c3 	bl	800c1c4 <__multadd>
 800be3e:	4629      	mov	r1, r5
 800be40:	4607      	mov	r7, r0
 800be42:	2300      	movs	r3, #0
 800be44:	220a      	movs	r2, #10
 800be46:	4658      	mov	r0, fp
 800be48:	f000 f9bc 	bl	800c1c4 <__multadd>
 800be4c:	4605      	mov	r5, r0
 800be4e:	e7f0      	b.n	800be32 <_dtoa_r+0xaba>
 800be50:	9b00      	ldr	r3, [sp, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	bfcc      	ite	gt
 800be56:	461e      	movgt	r6, r3
 800be58:	2601      	movle	r6, #1
 800be5a:	4456      	add	r6, sl
 800be5c:	2700      	movs	r7, #0
 800be5e:	4649      	mov	r1, r9
 800be60:	2201      	movs	r2, #1
 800be62:	4658      	mov	r0, fp
 800be64:	f000 fba4 	bl	800c5b0 <__lshift>
 800be68:	4621      	mov	r1, r4
 800be6a:	4681      	mov	r9, r0
 800be6c:	f000 fc0c 	bl	800c688 <__mcmp>
 800be70:	2800      	cmp	r0, #0
 800be72:	dcb0      	bgt.n	800bdd6 <_dtoa_r+0xa5e>
 800be74:	d102      	bne.n	800be7c <_dtoa_r+0xb04>
 800be76:	f018 0f01 	tst.w	r8, #1
 800be7a:	d1ac      	bne.n	800bdd6 <_dtoa_r+0xa5e>
 800be7c:	4633      	mov	r3, r6
 800be7e:	461e      	mov	r6, r3
 800be80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be84:	2a30      	cmp	r2, #48	@ 0x30
 800be86:	d0fa      	beq.n	800be7e <_dtoa_r+0xb06>
 800be88:	e5c2      	b.n	800ba10 <_dtoa_r+0x698>
 800be8a:	459a      	cmp	sl, r3
 800be8c:	d1a4      	bne.n	800bdd8 <_dtoa_r+0xa60>
 800be8e:	9b04      	ldr	r3, [sp, #16]
 800be90:	3301      	adds	r3, #1
 800be92:	9304      	str	r3, [sp, #16]
 800be94:	2331      	movs	r3, #49	@ 0x31
 800be96:	f88a 3000 	strb.w	r3, [sl]
 800be9a:	e5b9      	b.n	800ba10 <_dtoa_r+0x698>
 800be9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800befc <_dtoa_r+0xb84>
 800bea2:	b11b      	cbz	r3, 800beac <_dtoa_r+0xb34>
 800bea4:	f10a 0308 	add.w	r3, sl, #8
 800bea8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800beaa:	6013      	str	r3, [r2, #0]
 800beac:	4650      	mov	r0, sl
 800beae:	b019      	add	sp, #100	@ 0x64
 800beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	f77f ae37 	ble.w	800bb2a <_dtoa_r+0x7b2>
 800bebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bebe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bec0:	2001      	movs	r0, #1
 800bec2:	e655      	b.n	800bb70 <_dtoa_r+0x7f8>
 800bec4:	9b00      	ldr	r3, [sp, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f77f aed6 	ble.w	800bc78 <_dtoa_r+0x900>
 800becc:	4656      	mov	r6, sl
 800bece:	4621      	mov	r1, r4
 800bed0:	4648      	mov	r0, r9
 800bed2:	f7ff f9c7 	bl	800b264 <quorem>
 800bed6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800beda:	f806 8b01 	strb.w	r8, [r6], #1
 800bede:	9b00      	ldr	r3, [sp, #0]
 800bee0:	eba6 020a 	sub.w	r2, r6, sl
 800bee4:	4293      	cmp	r3, r2
 800bee6:	ddb3      	ble.n	800be50 <_dtoa_r+0xad8>
 800bee8:	4649      	mov	r1, r9
 800beea:	2300      	movs	r3, #0
 800beec:	220a      	movs	r2, #10
 800beee:	4658      	mov	r0, fp
 800bef0:	f000 f968 	bl	800c1c4 <__multadd>
 800bef4:	4681      	mov	r9, r0
 800bef6:	e7ea      	b.n	800bece <_dtoa_r+0xb56>
 800bef8:	0800ea6d 	.word	0x0800ea6d
 800befc:	0800e9f1 	.word	0x0800e9f1

0800bf00 <_free_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	4605      	mov	r5, r0
 800bf04:	2900      	cmp	r1, #0
 800bf06:	d041      	beq.n	800bf8c <_free_r+0x8c>
 800bf08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf0c:	1f0c      	subs	r4, r1, #4
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	bfb8      	it	lt
 800bf12:	18e4      	addlt	r4, r4, r3
 800bf14:	f000 f8e8 	bl	800c0e8 <__malloc_lock>
 800bf18:	4a1d      	ldr	r2, [pc, #116]	@ (800bf90 <_free_r+0x90>)
 800bf1a:	6813      	ldr	r3, [r2, #0]
 800bf1c:	b933      	cbnz	r3, 800bf2c <_free_r+0x2c>
 800bf1e:	6063      	str	r3, [r4, #4]
 800bf20:	6014      	str	r4, [r2, #0]
 800bf22:	4628      	mov	r0, r5
 800bf24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf28:	f000 b8e4 	b.w	800c0f4 <__malloc_unlock>
 800bf2c:	42a3      	cmp	r3, r4
 800bf2e:	d908      	bls.n	800bf42 <_free_r+0x42>
 800bf30:	6820      	ldr	r0, [r4, #0]
 800bf32:	1821      	adds	r1, r4, r0
 800bf34:	428b      	cmp	r3, r1
 800bf36:	bf01      	itttt	eq
 800bf38:	6819      	ldreq	r1, [r3, #0]
 800bf3a:	685b      	ldreq	r3, [r3, #4]
 800bf3c:	1809      	addeq	r1, r1, r0
 800bf3e:	6021      	streq	r1, [r4, #0]
 800bf40:	e7ed      	b.n	800bf1e <_free_r+0x1e>
 800bf42:	461a      	mov	r2, r3
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	b10b      	cbz	r3, 800bf4c <_free_r+0x4c>
 800bf48:	42a3      	cmp	r3, r4
 800bf4a:	d9fa      	bls.n	800bf42 <_free_r+0x42>
 800bf4c:	6811      	ldr	r1, [r2, #0]
 800bf4e:	1850      	adds	r0, r2, r1
 800bf50:	42a0      	cmp	r0, r4
 800bf52:	d10b      	bne.n	800bf6c <_free_r+0x6c>
 800bf54:	6820      	ldr	r0, [r4, #0]
 800bf56:	4401      	add	r1, r0
 800bf58:	1850      	adds	r0, r2, r1
 800bf5a:	4283      	cmp	r3, r0
 800bf5c:	6011      	str	r1, [r2, #0]
 800bf5e:	d1e0      	bne.n	800bf22 <_free_r+0x22>
 800bf60:	6818      	ldr	r0, [r3, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	6053      	str	r3, [r2, #4]
 800bf66:	4408      	add	r0, r1
 800bf68:	6010      	str	r0, [r2, #0]
 800bf6a:	e7da      	b.n	800bf22 <_free_r+0x22>
 800bf6c:	d902      	bls.n	800bf74 <_free_r+0x74>
 800bf6e:	230c      	movs	r3, #12
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	e7d6      	b.n	800bf22 <_free_r+0x22>
 800bf74:	6820      	ldr	r0, [r4, #0]
 800bf76:	1821      	adds	r1, r4, r0
 800bf78:	428b      	cmp	r3, r1
 800bf7a:	bf04      	itt	eq
 800bf7c:	6819      	ldreq	r1, [r3, #0]
 800bf7e:	685b      	ldreq	r3, [r3, #4]
 800bf80:	6063      	str	r3, [r4, #4]
 800bf82:	bf04      	itt	eq
 800bf84:	1809      	addeq	r1, r1, r0
 800bf86:	6021      	streq	r1, [r4, #0]
 800bf88:	6054      	str	r4, [r2, #4]
 800bf8a:	e7ca      	b.n	800bf22 <_free_r+0x22>
 800bf8c:	bd38      	pop	{r3, r4, r5, pc}
 800bf8e:	bf00      	nop
 800bf90:	20001474 	.word	0x20001474

0800bf94 <malloc>:
 800bf94:	4b02      	ldr	r3, [pc, #8]	@ (800bfa0 <malloc+0xc>)
 800bf96:	4601      	mov	r1, r0
 800bf98:	6818      	ldr	r0, [r3, #0]
 800bf9a:	f000 b825 	b.w	800bfe8 <_malloc_r>
 800bf9e:	bf00      	nop
 800bfa0:	2000001c 	.word	0x2000001c

0800bfa4 <sbrk_aligned>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	4e0f      	ldr	r6, [pc, #60]	@ (800bfe4 <sbrk_aligned+0x40>)
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	6831      	ldr	r1, [r6, #0]
 800bfac:	4605      	mov	r5, r0
 800bfae:	b911      	cbnz	r1, 800bfb6 <sbrk_aligned+0x12>
 800bfb0:	f001 ffd2 	bl	800df58 <_sbrk_r>
 800bfb4:	6030      	str	r0, [r6, #0]
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f001 ffcd 	bl	800df58 <_sbrk_r>
 800bfbe:	1c43      	adds	r3, r0, #1
 800bfc0:	d103      	bne.n	800bfca <sbrk_aligned+0x26>
 800bfc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	bd70      	pop	{r4, r5, r6, pc}
 800bfca:	1cc4      	adds	r4, r0, #3
 800bfcc:	f024 0403 	bic.w	r4, r4, #3
 800bfd0:	42a0      	cmp	r0, r4
 800bfd2:	d0f8      	beq.n	800bfc6 <sbrk_aligned+0x22>
 800bfd4:	1a21      	subs	r1, r4, r0
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	f001 ffbe 	bl	800df58 <_sbrk_r>
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d1f2      	bne.n	800bfc6 <sbrk_aligned+0x22>
 800bfe0:	e7ef      	b.n	800bfc2 <sbrk_aligned+0x1e>
 800bfe2:	bf00      	nop
 800bfe4:	20001470 	.word	0x20001470

0800bfe8 <_malloc_r>:
 800bfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfec:	1ccd      	adds	r5, r1, #3
 800bfee:	f025 0503 	bic.w	r5, r5, #3
 800bff2:	3508      	adds	r5, #8
 800bff4:	2d0c      	cmp	r5, #12
 800bff6:	bf38      	it	cc
 800bff8:	250c      	movcc	r5, #12
 800bffa:	2d00      	cmp	r5, #0
 800bffc:	4606      	mov	r6, r0
 800bffe:	db01      	blt.n	800c004 <_malloc_r+0x1c>
 800c000:	42a9      	cmp	r1, r5
 800c002:	d904      	bls.n	800c00e <_malloc_r+0x26>
 800c004:	230c      	movs	r3, #12
 800c006:	6033      	str	r3, [r6, #0]
 800c008:	2000      	movs	r0, #0
 800c00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c00e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c0e4 <_malloc_r+0xfc>
 800c012:	f000 f869 	bl	800c0e8 <__malloc_lock>
 800c016:	f8d8 3000 	ldr.w	r3, [r8]
 800c01a:	461c      	mov	r4, r3
 800c01c:	bb44      	cbnz	r4, 800c070 <_malloc_r+0x88>
 800c01e:	4629      	mov	r1, r5
 800c020:	4630      	mov	r0, r6
 800c022:	f7ff ffbf 	bl	800bfa4 <sbrk_aligned>
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	4604      	mov	r4, r0
 800c02a:	d158      	bne.n	800c0de <_malloc_r+0xf6>
 800c02c:	f8d8 4000 	ldr.w	r4, [r8]
 800c030:	4627      	mov	r7, r4
 800c032:	2f00      	cmp	r7, #0
 800c034:	d143      	bne.n	800c0be <_malloc_r+0xd6>
 800c036:	2c00      	cmp	r4, #0
 800c038:	d04b      	beq.n	800c0d2 <_malloc_r+0xea>
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	4639      	mov	r1, r7
 800c03e:	4630      	mov	r0, r6
 800c040:	eb04 0903 	add.w	r9, r4, r3
 800c044:	f001 ff88 	bl	800df58 <_sbrk_r>
 800c048:	4581      	cmp	r9, r0
 800c04a:	d142      	bne.n	800c0d2 <_malloc_r+0xea>
 800c04c:	6821      	ldr	r1, [r4, #0]
 800c04e:	1a6d      	subs	r5, r5, r1
 800c050:	4629      	mov	r1, r5
 800c052:	4630      	mov	r0, r6
 800c054:	f7ff ffa6 	bl	800bfa4 <sbrk_aligned>
 800c058:	3001      	adds	r0, #1
 800c05a:	d03a      	beq.n	800c0d2 <_malloc_r+0xea>
 800c05c:	6823      	ldr	r3, [r4, #0]
 800c05e:	442b      	add	r3, r5
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	f8d8 3000 	ldr.w	r3, [r8]
 800c066:	685a      	ldr	r2, [r3, #4]
 800c068:	bb62      	cbnz	r2, 800c0c4 <_malloc_r+0xdc>
 800c06a:	f8c8 7000 	str.w	r7, [r8]
 800c06e:	e00f      	b.n	800c090 <_malloc_r+0xa8>
 800c070:	6822      	ldr	r2, [r4, #0]
 800c072:	1b52      	subs	r2, r2, r5
 800c074:	d420      	bmi.n	800c0b8 <_malloc_r+0xd0>
 800c076:	2a0b      	cmp	r2, #11
 800c078:	d917      	bls.n	800c0aa <_malloc_r+0xc2>
 800c07a:	1961      	adds	r1, r4, r5
 800c07c:	42a3      	cmp	r3, r4
 800c07e:	6025      	str	r5, [r4, #0]
 800c080:	bf18      	it	ne
 800c082:	6059      	strne	r1, [r3, #4]
 800c084:	6863      	ldr	r3, [r4, #4]
 800c086:	bf08      	it	eq
 800c088:	f8c8 1000 	streq.w	r1, [r8]
 800c08c:	5162      	str	r2, [r4, r5]
 800c08e:	604b      	str	r3, [r1, #4]
 800c090:	4630      	mov	r0, r6
 800c092:	f000 f82f 	bl	800c0f4 <__malloc_unlock>
 800c096:	f104 000b 	add.w	r0, r4, #11
 800c09a:	1d23      	adds	r3, r4, #4
 800c09c:	f020 0007 	bic.w	r0, r0, #7
 800c0a0:	1ac2      	subs	r2, r0, r3
 800c0a2:	bf1c      	itt	ne
 800c0a4:	1a1b      	subne	r3, r3, r0
 800c0a6:	50a3      	strne	r3, [r4, r2]
 800c0a8:	e7af      	b.n	800c00a <_malloc_r+0x22>
 800c0aa:	6862      	ldr	r2, [r4, #4]
 800c0ac:	42a3      	cmp	r3, r4
 800c0ae:	bf0c      	ite	eq
 800c0b0:	f8c8 2000 	streq.w	r2, [r8]
 800c0b4:	605a      	strne	r2, [r3, #4]
 800c0b6:	e7eb      	b.n	800c090 <_malloc_r+0xa8>
 800c0b8:	4623      	mov	r3, r4
 800c0ba:	6864      	ldr	r4, [r4, #4]
 800c0bc:	e7ae      	b.n	800c01c <_malloc_r+0x34>
 800c0be:	463c      	mov	r4, r7
 800c0c0:	687f      	ldr	r7, [r7, #4]
 800c0c2:	e7b6      	b.n	800c032 <_malloc_r+0x4a>
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	42a3      	cmp	r3, r4
 800c0ca:	d1fb      	bne.n	800c0c4 <_malloc_r+0xdc>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	6053      	str	r3, [r2, #4]
 800c0d0:	e7de      	b.n	800c090 <_malloc_r+0xa8>
 800c0d2:	230c      	movs	r3, #12
 800c0d4:	6033      	str	r3, [r6, #0]
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	f000 f80c 	bl	800c0f4 <__malloc_unlock>
 800c0dc:	e794      	b.n	800c008 <_malloc_r+0x20>
 800c0de:	6005      	str	r5, [r0, #0]
 800c0e0:	e7d6      	b.n	800c090 <_malloc_r+0xa8>
 800c0e2:	bf00      	nop
 800c0e4:	20001474 	.word	0x20001474

0800c0e8 <__malloc_lock>:
 800c0e8:	4801      	ldr	r0, [pc, #4]	@ (800c0f0 <__malloc_lock+0x8>)
 800c0ea:	f7ff b8a4 	b.w	800b236 <__retarget_lock_acquire_recursive>
 800c0ee:	bf00      	nop
 800c0f0:	2000146c 	.word	0x2000146c

0800c0f4 <__malloc_unlock>:
 800c0f4:	4801      	ldr	r0, [pc, #4]	@ (800c0fc <__malloc_unlock+0x8>)
 800c0f6:	f7ff b89f 	b.w	800b238 <__retarget_lock_release_recursive>
 800c0fa:	bf00      	nop
 800c0fc:	2000146c 	.word	0x2000146c

0800c100 <_Balloc>:
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	69c6      	ldr	r6, [r0, #28]
 800c104:	4604      	mov	r4, r0
 800c106:	460d      	mov	r5, r1
 800c108:	b976      	cbnz	r6, 800c128 <_Balloc+0x28>
 800c10a:	2010      	movs	r0, #16
 800c10c:	f7ff ff42 	bl	800bf94 <malloc>
 800c110:	4602      	mov	r2, r0
 800c112:	61e0      	str	r0, [r4, #28]
 800c114:	b920      	cbnz	r0, 800c120 <_Balloc+0x20>
 800c116:	4b18      	ldr	r3, [pc, #96]	@ (800c178 <_Balloc+0x78>)
 800c118:	4818      	ldr	r0, [pc, #96]	@ (800c17c <_Balloc+0x7c>)
 800c11a:	216b      	movs	r1, #107	@ 0x6b
 800c11c:	f001 ff34 	bl	800df88 <__assert_func>
 800c120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c124:	6006      	str	r6, [r0, #0]
 800c126:	60c6      	str	r6, [r0, #12]
 800c128:	69e6      	ldr	r6, [r4, #28]
 800c12a:	68f3      	ldr	r3, [r6, #12]
 800c12c:	b183      	cbz	r3, 800c150 <_Balloc+0x50>
 800c12e:	69e3      	ldr	r3, [r4, #28]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c136:	b9b8      	cbnz	r0, 800c168 <_Balloc+0x68>
 800c138:	2101      	movs	r1, #1
 800c13a:	fa01 f605 	lsl.w	r6, r1, r5
 800c13e:	1d72      	adds	r2, r6, #5
 800c140:	0092      	lsls	r2, r2, #2
 800c142:	4620      	mov	r0, r4
 800c144:	f001 ff3e 	bl	800dfc4 <_calloc_r>
 800c148:	b160      	cbz	r0, 800c164 <_Balloc+0x64>
 800c14a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c14e:	e00e      	b.n	800c16e <_Balloc+0x6e>
 800c150:	2221      	movs	r2, #33	@ 0x21
 800c152:	2104      	movs	r1, #4
 800c154:	4620      	mov	r0, r4
 800c156:	f001 ff35 	bl	800dfc4 <_calloc_r>
 800c15a:	69e3      	ldr	r3, [r4, #28]
 800c15c:	60f0      	str	r0, [r6, #12]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1e4      	bne.n	800c12e <_Balloc+0x2e>
 800c164:	2000      	movs	r0, #0
 800c166:	bd70      	pop	{r4, r5, r6, pc}
 800c168:	6802      	ldr	r2, [r0, #0]
 800c16a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c16e:	2300      	movs	r3, #0
 800c170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c174:	e7f7      	b.n	800c166 <_Balloc+0x66>
 800c176:	bf00      	nop
 800c178:	0800e9fe 	.word	0x0800e9fe
 800c17c:	0800ea7e 	.word	0x0800ea7e

0800c180 <_Bfree>:
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	69c6      	ldr	r6, [r0, #28]
 800c184:	4605      	mov	r5, r0
 800c186:	460c      	mov	r4, r1
 800c188:	b976      	cbnz	r6, 800c1a8 <_Bfree+0x28>
 800c18a:	2010      	movs	r0, #16
 800c18c:	f7ff ff02 	bl	800bf94 <malloc>
 800c190:	4602      	mov	r2, r0
 800c192:	61e8      	str	r0, [r5, #28]
 800c194:	b920      	cbnz	r0, 800c1a0 <_Bfree+0x20>
 800c196:	4b09      	ldr	r3, [pc, #36]	@ (800c1bc <_Bfree+0x3c>)
 800c198:	4809      	ldr	r0, [pc, #36]	@ (800c1c0 <_Bfree+0x40>)
 800c19a:	218f      	movs	r1, #143	@ 0x8f
 800c19c:	f001 fef4 	bl	800df88 <__assert_func>
 800c1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1a4:	6006      	str	r6, [r0, #0]
 800c1a6:	60c6      	str	r6, [r0, #12]
 800c1a8:	b13c      	cbz	r4, 800c1ba <_Bfree+0x3a>
 800c1aa:	69eb      	ldr	r3, [r5, #28]
 800c1ac:	6862      	ldr	r2, [r4, #4]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1b4:	6021      	str	r1, [r4, #0]
 800c1b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1ba:	bd70      	pop	{r4, r5, r6, pc}
 800c1bc:	0800e9fe 	.word	0x0800e9fe
 800c1c0:	0800ea7e 	.word	0x0800ea7e

0800c1c4 <__multadd>:
 800c1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c8:	690d      	ldr	r5, [r1, #16]
 800c1ca:	4607      	mov	r7, r0
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	461e      	mov	r6, r3
 800c1d0:	f101 0c14 	add.w	ip, r1, #20
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c1da:	b299      	uxth	r1, r3
 800c1dc:	fb02 6101 	mla	r1, r2, r1, r6
 800c1e0:	0c1e      	lsrs	r6, r3, #16
 800c1e2:	0c0b      	lsrs	r3, r1, #16
 800c1e4:	fb02 3306 	mla	r3, r2, r6, r3
 800c1e8:	b289      	uxth	r1, r1
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1f0:	4285      	cmp	r5, r0
 800c1f2:	f84c 1b04 	str.w	r1, [ip], #4
 800c1f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1fa:	dcec      	bgt.n	800c1d6 <__multadd+0x12>
 800c1fc:	b30e      	cbz	r6, 800c242 <__multadd+0x7e>
 800c1fe:	68a3      	ldr	r3, [r4, #8]
 800c200:	42ab      	cmp	r3, r5
 800c202:	dc19      	bgt.n	800c238 <__multadd+0x74>
 800c204:	6861      	ldr	r1, [r4, #4]
 800c206:	4638      	mov	r0, r7
 800c208:	3101      	adds	r1, #1
 800c20a:	f7ff ff79 	bl	800c100 <_Balloc>
 800c20e:	4680      	mov	r8, r0
 800c210:	b928      	cbnz	r0, 800c21e <__multadd+0x5a>
 800c212:	4602      	mov	r2, r0
 800c214:	4b0c      	ldr	r3, [pc, #48]	@ (800c248 <__multadd+0x84>)
 800c216:	480d      	ldr	r0, [pc, #52]	@ (800c24c <__multadd+0x88>)
 800c218:	21ba      	movs	r1, #186	@ 0xba
 800c21a:	f001 feb5 	bl	800df88 <__assert_func>
 800c21e:	6922      	ldr	r2, [r4, #16]
 800c220:	3202      	adds	r2, #2
 800c222:	f104 010c 	add.w	r1, r4, #12
 800c226:	0092      	lsls	r2, r2, #2
 800c228:	300c      	adds	r0, #12
 800c22a:	f7ff f806 	bl	800b23a <memcpy>
 800c22e:	4621      	mov	r1, r4
 800c230:	4638      	mov	r0, r7
 800c232:	f7ff ffa5 	bl	800c180 <_Bfree>
 800c236:	4644      	mov	r4, r8
 800c238:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c23c:	3501      	adds	r5, #1
 800c23e:	615e      	str	r6, [r3, #20]
 800c240:	6125      	str	r5, [r4, #16]
 800c242:	4620      	mov	r0, r4
 800c244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c248:	0800ea6d 	.word	0x0800ea6d
 800c24c:	0800ea7e 	.word	0x0800ea7e

0800c250 <__s2b>:
 800c250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c254:	460c      	mov	r4, r1
 800c256:	4615      	mov	r5, r2
 800c258:	461f      	mov	r7, r3
 800c25a:	2209      	movs	r2, #9
 800c25c:	3308      	adds	r3, #8
 800c25e:	4606      	mov	r6, r0
 800c260:	fb93 f3f2 	sdiv	r3, r3, r2
 800c264:	2100      	movs	r1, #0
 800c266:	2201      	movs	r2, #1
 800c268:	429a      	cmp	r2, r3
 800c26a:	db09      	blt.n	800c280 <__s2b+0x30>
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7ff ff47 	bl	800c100 <_Balloc>
 800c272:	b940      	cbnz	r0, 800c286 <__s2b+0x36>
 800c274:	4602      	mov	r2, r0
 800c276:	4b19      	ldr	r3, [pc, #100]	@ (800c2dc <__s2b+0x8c>)
 800c278:	4819      	ldr	r0, [pc, #100]	@ (800c2e0 <__s2b+0x90>)
 800c27a:	21d3      	movs	r1, #211	@ 0xd3
 800c27c:	f001 fe84 	bl	800df88 <__assert_func>
 800c280:	0052      	lsls	r2, r2, #1
 800c282:	3101      	adds	r1, #1
 800c284:	e7f0      	b.n	800c268 <__s2b+0x18>
 800c286:	9b08      	ldr	r3, [sp, #32]
 800c288:	6143      	str	r3, [r0, #20]
 800c28a:	2d09      	cmp	r5, #9
 800c28c:	f04f 0301 	mov.w	r3, #1
 800c290:	6103      	str	r3, [r0, #16]
 800c292:	dd16      	ble.n	800c2c2 <__s2b+0x72>
 800c294:	f104 0909 	add.w	r9, r4, #9
 800c298:	46c8      	mov	r8, r9
 800c29a:	442c      	add	r4, r5
 800c29c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c2a0:	4601      	mov	r1, r0
 800c2a2:	3b30      	subs	r3, #48	@ 0x30
 800c2a4:	220a      	movs	r2, #10
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f7ff ff8c 	bl	800c1c4 <__multadd>
 800c2ac:	45a0      	cmp	r8, r4
 800c2ae:	d1f5      	bne.n	800c29c <__s2b+0x4c>
 800c2b0:	f1a5 0408 	sub.w	r4, r5, #8
 800c2b4:	444c      	add	r4, r9
 800c2b6:	1b2d      	subs	r5, r5, r4
 800c2b8:	1963      	adds	r3, r4, r5
 800c2ba:	42bb      	cmp	r3, r7
 800c2bc:	db04      	blt.n	800c2c8 <__s2b+0x78>
 800c2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2c2:	340a      	adds	r4, #10
 800c2c4:	2509      	movs	r5, #9
 800c2c6:	e7f6      	b.n	800c2b6 <__s2b+0x66>
 800c2c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2cc:	4601      	mov	r1, r0
 800c2ce:	3b30      	subs	r3, #48	@ 0x30
 800c2d0:	220a      	movs	r2, #10
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7ff ff76 	bl	800c1c4 <__multadd>
 800c2d8:	e7ee      	b.n	800c2b8 <__s2b+0x68>
 800c2da:	bf00      	nop
 800c2dc:	0800ea6d 	.word	0x0800ea6d
 800c2e0:	0800ea7e 	.word	0x0800ea7e

0800c2e4 <__hi0bits>:
 800c2e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	bf36      	itet	cc
 800c2ec:	0403      	lslcc	r3, r0, #16
 800c2ee:	2000      	movcs	r0, #0
 800c2f0:	2010      	movcc	r0, #16
 800c2f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2f6:	bf3c      	itt	cc
 800c2f8:	021b      	lslcc	r3, r3, #8
 800c2fa:	3008      	addcc	r0, #8
 800c2fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c300:	bf3c      	itt	cc
 800c302:	011b      	lslcc	r3, r3, #4
 800c304:	3004      	addcc	r0, #4
 800c306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c30a:	bf3c      	itt	cc
 800c30c:	009b      	lslcc	r3, r3, #2
 800c30e:	3002      	addcc	r0, #2
 800c310:	2b00      	cmp	r3, #0
 800c312:	db05      	blt.n	800c320 <__hi0bits+0x3c>
 800c314:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c318:	f100 0001 	add.w	r0, r0, #1
 800c31c:	bf08      	it	eq
 800c31e:	2020      	moveq	r0, #32
 800c320:	4770      	bx	lr

0800c322 <__lo0bits>:
 800c322:	6803      	ldr	r3, [r0, #0]
 800c324:	4602      	mov	r2, r0
 800c326:	f013 0007 	ands.w	r0, r3, #7
 800c32a:	d00b      	beq.n	800c344 <__lo0bits+0x22>
 800c32c:	07d9      	lsls	r1, r3, #31
 800c32e:	d421      	bmi.n	800c374 <__lo0bits+0x52>
 800c330:	0798      	lsls	r0, r3, #30
 800c332:	bf49      	itett	mi
 800c334:	085b      	lsrmi	r3, r3, #1
 800c336:	089b      	lsrpl	r3, r3, #2
 800c338:	2001      	movmi	r0, #1
 800c33a:	6013      	strmi	r3, [r2, #0]
 800c33c:	bf5c      	itt	pl
 800c33e:	6013      	strpl	r3, [r2, #0]
 800c340:	2002      	movpl	r0, #2
 800c342:	4770      	bx	lr
 800c344:	b299      	uxth	r1, r3
 800c346:	b909      	cbnz	r1, 800c34c <__lo0bits+0x2a>
 800c348:	0c1b      	lsrs	r3, r3, #16
 800c34a:	2010      	movs	r0, #16
 800c34c:	b2d9      	uxtb	r1, r3
 800c34e:	b909      	cbnz	r1, 800c354 <__lo0bits+0x32>
 800c350:	3008      	adds	r0, #8
 800c352:	0a1b      	lsrs	r3, r3, #8
 800c354:	0719      	lsls	r1, r3, #28
 800c356:	bf04      	itt	eq
 800c358:	091b      	lsreq	r3, r3, #4
 800c35a:	3004      	addeq	r0, #4
 800c35c:	0799      	lsls	r1, r3, #30
 800c35e:	bf04      	itt	eq
 800c360:	089b      	lsreq	r3, r3, #2
 800c362:	3002      	addeq	r0, #2
 800c364:	07d9      	lsls	r1, r3, #31
 800c366:	d403      	bmi.n	800c370 <__lo0bits+0x4e>
 800c368:	085b      	lsrs	r3, r3, #1
 800c36a:	f100 0001 	add.w	r0, r0, #1
 800c36e:	d003      	beq.n	800c378 <__lo0bits+0x56>
 800c370:	6013      	str	r3, [r2, #0]
 800c372:	4770      	bx	lr
 800c374:	2000      	movs	r0, #0
 800c376:	4770      	bx	lr
 800c378:	2020      	movs	r0, #32
 800c37a:	4770      	bx	lr

0800c37c <__i2b>:
 800c37c:	b510      	push	{r4, lr}
 800c37e:	460c      	mov	r4, r1
 800c380:	2101      	movs	r1, #1
 800c382:	f7ff febd 	bl	800c100 <_Balloc>
 800c386:	4602      	mov	r2, r0
 800c388:	b928      	cbnz	r0, 800c396 <__i2b+0x1a>
 800c38a:	4b05      	ldr	r3, [pc, #20]	@ (800c3a0 <__i2b+0x24>)
 800c38c:	4805      	ldr	r0, [pc, #20]	@ (800c3a4 <__i2b+0x28>)
 800c38e:	f240 1145 	movw	r1, #325	@ 0x145
 800c392:	f001 fdf9 	bl	800df88 <__assert_func>
 800c396:	2301      	movs	r3, #1
 800c398:	6144      	str	r4, [r0, #20]
 800c39a:	6103      	str	r3, [r0, #16]
 800c39c:	bd10      	pop	{r4, pc}
 800c39e:	bf00      	nop
 800c3a0:	0800ea6d 	.word	0x0800ea6d
 800c3a4:	0800ea7e 	.word	0x0800ea7e

0800c3a8 <__multiply>:
 800c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	4614      	mov	r4, r2
 800c3ae:	690a      	ldr	r2, [r1, #16]
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	bfa8      	it	ge
 800c3b6:	4623      	movge	r3, r4
 800c3b8:	460f      	mov	r7, r1
 800c3ba:	bfa4      	itt	ge
 800c3bc:	460c      	movge	r4, r1
 800c3be:	461f      	movge	r7, r3
 800c3c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c3c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c3c8:	68a3      	ldr	r3, [r4, #8]
 800c3ca:	6861      	ldr	r1, [r4, #4]
 800c3cc:	eb0a 0609 	add.w	r6, sl, r9
 800c3d0:	42b3      	cmp	r3, r6
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	bfb8      	it	lt
 800c3d6:	3101      	addlt	r1, #1
 800c3d8:	f7ff fe92 	bl	800c100 <_Balloc>
 800c3dc:	b930      	cbnz	r0, 800c3ec <__multiply+0x44>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	4b44      	ldr	r3, [pc, #272]	@ (800c4f4 <__multiply+0x14c>)
 800c3e2:	4845      	ldr	r0, [pc, #276]	@ (800c4f8 <__multiply+0x150>)
 800c3e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c3e8:	f001 fdce 	bl	800df88 <__assert_func>
 800c3ec:	f100 0514 	add.w	r5, r0, #20
 800c3f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3f4:	462b      	mov	r3, r5
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	4543      	cmp	r3, r8
 800c3fa:	d321      	bcc.n	800c440 <__multiply+0x98>
 800c3fc:	f107 0114 	add.w	r1, r7, #20
 800c400:	f104 0214 	add.w	r2, r4, #20
 800c404:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c408:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c40c:	9302      	str	r3, [sp, #8]
 800c40e:	1b13      	subs	r3, r2, r4
 800c410:	3b15      	subs	r3, #21
 800c412:	f023 0303 	bic.w	r3, r3, #3
 800c416:	3304      	adds	r3, #4
 800c418:	f104 0715 	add.w	r7, r4, #21
 800c41c:	42ba      	cmp	r2, r7
 800c41e:	bf38      	it	cc
 800c420:	2304      	movcc	r3, #4
 800c422:	9301      	str	r3, [sp, #4]
 800c424:	9b02      	ldr	r3, [sp, #8]
 800c426:	9103      	str	r1, [sp, #12]
 800c428:	428b      	cmp	r3, r1
 800c42a:	d80c      	bhi.n	800c446 <__multiply+0x9e>
 800c42c:	2e00      	cmp	r6, #0
 800c42e:	dd03      	ble.n	800c438 <__multiply+0x90>
 800c430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c434:	2b00      	cmp	r3, #0
 800c436:	d05b      	beq.n	800c4f0 <__multiply+0x148>
 800c438:	6106      	str	r6, [r0, #16]
 800c43a:	b005      	add	sp, #20
 800c43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c440:	f843 2b04 	str.w	r2, [r3], #4
 800c444:	e7d8      	b.n	800c3f8 <__multiply+0x50>
 800c446:	f8b1 a000 	ldrh.w	sl, [r1]
 800c44a:	f1ba 0f00 	cmp.w	sl, #0
 800c44e:	d024      	beq.n	800c49a <__multiply+0xf2>
 800c450:	f104 0e14 	add.w	lr, r4, #20
 800c454:	46a9      	mov	r9, r5
 800c456:	f04f 0c00 	mov.w	ip, #0
 800c45a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c45e:	f8d9 3000 	ldr.w	r3, [r9]
 800c462:	fa1f fb87 	uxth.w	fp, r7
 800c466:	b29b      	uxth	r3, r3
 800c468:	fb0a 330b 	mla	r3, sl, fp, r3
 800c46c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c470:	f8d9 7000 	ldr.w	r7, [r9]
 800c474:	4463      	add	r3, ip
 800c476:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c47a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c47e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c482:	b29b      	uxth	r3, r3
 800c484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c488:	4572      	cmp	r2, lr
 800c48a:	f849 3b04 	str.w	r3, [r9], #4
 800c48e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c492:	d8e2      	bhi.n	800c45a <__multiply+0xb2>
 800c494:	9b01      	ldr	r3, [sp, #4]
 800c496:	f845 c003 	str.w	ip, [r5, r3]
 800c49a:	9b03      	ldr	r3, [sp, #12]
 800c49c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c4a0:	3104      	adds	r1, #4
 800c4a2:	f1b9 0f00 	cmp.w	r9, #0
 800c4a6:	d021      	beq.n	800c4ec <__multiply+0x144>
 800c4a8:	682b      	ldr	r3, [r5, #0]
 800c4aa:	f104 0c14 	add.w	ip, r4, #20
 800c4ae:	46ae      	mov	lr, r5
 800c4b0:	f04f 0a00 	mov.w	sl, #0
 800c4b4:	f8bc b000 	ldrh.w	fp, [ip]
 800c4b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c4bc:	fb09 770b 	mla	r7, r9, fp, r7
 800c4c0:	4457      	add	r7, sl
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4c8:	f84e 3b04 	str.w	r3, [lr], #4
 800c4cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4d4:	f8be 3000 	ldrh.w	r3, [lr]
 800c4d8:	fb09 330a 	mla	r3, r9, sl, r3
 800c4dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c4e0:	4562      	cmp	r2, ip
 800c4e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4e6:	d8e5      	bhi.n	800c4b4 <__multiply+0x10c>
 800c4e8:	9f01      	ldr	r7, [sp, #4]
 800c4ea:	51eb      	str	r3, [r5, r7]
 800c4ec:	3504      	adds	r5, #4
 800c4ee:	e799      	b.n	800c424 <__multiply+0x7c>
 800c4f0:	3e01      	subs	r6, #1
 800c4f2:	e79b      	b.n	800c42c <__multiply+0x84>
 800c4f4:	0800ea6d 	.word	0x0800ea6d
 800c4f8:	0800ea7e 	.word	0x0800ea7e

0800c4fc <__pow5mult>:
 800c4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c500:	4615      	mov	r5, r2
 800c502:	f012 0203 	ands.w	r2, r2, #3
 800c506:	4607      	mov	r7, r0
 800c508:	460e      	mov	r6, r1
 800c50a:	d007      	beq.n	800c51c <__pow5mult+0x20>
 800c50c:	4c25      	ldr	r4, [pc, #148]	@ (800c5a4 <__pow5mult+0xa8>)
 800c50e:	3a01      	subs	r2, #1
 800c510:	2300      	movs	r3, #0
 800c512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c516:	f7ff fe55 	bl	800c1c4 <__multadd>
 800c51a:	4606      	mov	r6, r0
 800c51c:	10ad      	asrs	r5, r5, #2
 800c51e:	d03d      	beq.n	800c59c <__pow5mult+0xa0>
 800c520:	69fc      	ldr	r4, [r7, #28]
 800c522:	b97c      	cbnz	r4, 800c544 <__pow5mult+0x48>
 800c524:	2010      	movs	r0, #16
 800c526:	f7ff fd35 	bl	800bf94 <malloc>
 800c52a:	4602      	mov	r2, r0
 800c52c:	61f8      	str	r0, [r7, #28]
 800c52e:	b928      	cbnz	r0, 800c53c <__pow5mult+0x40>
 800c530:	4b1d      	ldr	r3, [pc, #116]	@ (800c5a8 <__pow5mult+0xac>)
 800c532:	481e      	ldr	r0, [pc, #120]	@ (800c5ac <__pow5mult+0xb0>)
 800c534:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c538:	f001 fd26 	bl	800df88 <__assert_func>
 800c53c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c540:	6004      	str	r4, [r0, #0]
 800c542:	60c4      	str	r4, [r0, #12]
 800c544:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c54c:	b94c      	cbnz	r4, 800c562 <__pow5mult+0x66>
 800c54e:	f240 2171 	movw	r1, #625	@ 0x271
 800c552:	4638      	mov	r0, r7
 800c554:	f7ff ff12 	bl	800c37c <__i2b>
 800c558:	2300      	movs	r3, #0
 800c55a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c55e:	4604      	mov	r4, r0
 800c560:	6003      	str	r3, [r0, #0]
 800c562:	f04f 0900 	mov.w	r9, #0
 800c566:	07eb      	lsls	r3, r5, #31
 800c568:	d50a      	bpl.n	800c580 <__pow5mult+0x84>
 800c56a:	4631      	mov	r1, r6
 800c56c:	4622      	mov	r2, r4
 800c56e:	4638      	mov	r0, r7
 800c570:	f7ff ff1a 	bl	800c3a8 <__multiply>
 800c574:	4631      	mov	r1, r6
 800c576:	4680      	mov	r8, r0
 800c578:	4638      	mov	r0, r7
 800c57a:	f7ff fe01 	bl	800c180 <_Bfree>
 800c57e:	4646      	mov	r6, r8
 800c580:	106d      	asrs	r5, r5, #1
 800c582:	d00b      	beq.n	800c59c <__pow5mult+0xa0>
 800c584:	6820      	ldr	r0, [r4, #0]
 800c586:	b938      	cbnz	r0, 800c598 <__pow5mult+0x9c>
 800c588:	4622      	mov	r2, r4
 800c58a:	4621      	mov	r1, r4
 800c58c:	4638      	mov	r0, r7
 800c58e:	f7ff ff0b 	bl	800c3a8 <__multiply>
 800c592:	6020      	str	r0, [r4, #0]
 800c594:	f8c0 9000 	str.w	r9, [r0]
 800c598:	4604      	mov	r4, r0
 800c59a:	e7e4      	b.n	800c566 <__pow5mult+0x6a>
 800c59c:	4630      	mov	r0, r6
 800c59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a2:	bf00      	nop
 800c5a4:	0800ead8 	.word	0x0800ead8
 800c5a8:	0800e9fe 	.word	0x0800e9fe
 800c5ac:	0800ea7e 	.word	0x0800ea7e

0800c5b0 <__lshift>:
 800c5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	6849      	ldr	r1, [r1, #4]
 800c5b8:	6923      	ldr	r3, [r4, #16]
 800c5ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5be:	68a3      	ldr	r3, [r4, #8]
 800c5c0:	4607      	mov	r7, r0
 800c5c2:	4691      	mov	r9, r2
 800c5c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5c8:	f108 0601 	add.w	r6, r8, #1
 800c5cc:	42b3      	cmp	r3, r6
 800c5ce:	db0b      	blt.n	800c5e8 <__lshift+0x38>
 800c5d0:	4638      	mov	r0, r7
 800c5d2:	f7ff fd95 	bl	800c100 <_Balloc>
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	b948      	cbnz	r0, 800c5ee <__lshift+0x3e>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	4b28      	ldr	r3, [pc, #160]	@ (800c680 <__lshift+0xd0>)
 800c5de:	4829      	ldr	r0, [pc, #164]	@ (800c684 <__lshift+0xd4>)
 800c5e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c5e4:	f001 fcd0 	bl	800df88 <__assert_func>
 800c5e8:	3101      	adds	r1, #1
 800c5ea:	005b      	lsls	r3, r3, #1
 800c5ec:	e7ee      	b.n	800c5cc <__lshift+0x1c>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	f100 0114 	add.w	r1, r0, #20
 800c5f4:	f100 0210 	add.w	r2, r0, #16
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	4553      	cmp	r3, sl
 800c5fc:	db33      	blt.n	800c666 <__lshift+0xb6>
 800c5fe:	6920      	ldr	r0, [r4, #16]
 800c600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c604:	f104 0314 	add.w	r3, r4, #20
 800c608:	f019 091f 	ands.w	r9, r9, #31
 800c60c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c614:	d02b      	beq.n	800c66e <__lshift+0xbe>
 800c616:	f1c9 0e20 	rsb	lr, r9, #32
 800c61a:	468a      	mov	sl, r1
 800c61c:	2200      	movs	r2, #0
 800c61e:	6818      	ldr	r0, [r3, #0]
 800c620:	fa00 f009 	lsl.w	r0, r0, r9
 800c624:	4310      	orrs	r0, r2
 800c626:	f84a 0b04 	str.w	r0, [sl], #4
 800c62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c62e:	459c      	cmp	ip, r3
 800c630:	fa22 f20e 	lsr.w	r2, r2, lr
 800c634:	d8f3      	bhi.n	800c61e <__lshift+0x6e>
 800c636:	ebac 0304 	sub.w	r3, ip, r4
 800c63a:	3b15      	subs	r3, #21
 800c63c:	f023 0303 	bic.w	r3, r3, #3
 800c640:	3304      	adds	r3, #4
 800c642:	f104 0015 	add.w	r0, r4, #21
 800c646:	4584      	cmp	ip, r0
 800c648:	bf38      	it	cc
 800c64a:	2304      	movcc	r3, #4
 800c64c:	50ca      	str	r2, [r1, r3]
 800c64e:	b10a      	cbz	r2, 800c654 <__lshift+0xa4>
 800c650:	f108 0602 	add.w	r6, r8, #2
 800c654:	3e01      	subs	r6, #1
 800c656:	4638      	mov	r0, r7
 800c658:	612e      	str	r6, [r5, #16]
 800c65a:	4621      	mov	r1, r4
 800c65c:	f7ff fd90 	bl	800c180 <_Bfree>
 800c660:	4628      	mov	r0, r5
 800c662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c666:	f842 0f04 	str.w	r0, [r2, #4]!
 800c66a:	3301      	adds	r3, #1
 800c66c:	e7c5      	b.n	800c5fa <__lshift+0x4a>
 800c66e:	3904      	subs	r1, #4
 800c670:	f853 2b04 	ldr.w	r2, [r3], #4
 800c674:	f841 2f04 	str.w	r2, [r1, #4]!
 800c678:	459c      	cmp	ip, r3
 800c67a:	d8f9      	bhi.n	800c670 <__lshift+0xc0>
 800c67c:	e7ea      	b.n	800c654 <__lshift+0xa4>
 800c67e:	bf00      	nop
 800c680:	0800ea6d 	.word	0x0800ea6d
 800c684:	0800ea7e 	.word	0x0800ea7e

0800c688 <__mcmp>:
 800c688:	690a      	ldr	r2, [r1, #16]
 800c68a:	4603      	mov	r3, r0
 800c68c:	6900      	ldr	r0, [r0, #16]
 800c68e:	1a80      	subs	r0, r0, r2
 800c690:	b530      	push	{r4, r5, lr}
 800c692:	d10e      	bne.n	800c6b2 <__mcmp+0x2a>
 800c694:	3314      	adds	r3, #20
 800c696:	3114      	adds	r1, #20
 800c698:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c69c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c6a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6a8:	4295      	cmp	r5, r2
 800c6aa:	d003      	beq.n	800c6b4 <__mcmp+0x2c>
 800c6ac:	d205      	bcs.n	800c6ba <__mcmp+0x32>
 800c6ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6b2:	bd30      	pop	{r4, r5, pc}
 800c6b4:	42a3      	cmp	r3, r4
 800c6b6:	d3f3      	bcc.n	800c6a0 <__mcmp+0x18>
 800c6b8:	e7fb      	b.n	800c6b2 <__mcmp+0x2a>
 800c6ba:	2001      	movs	r0, #1
 800c6bc:	e7f9      	b.n	800c6b2 <__mcmp+0x2a>
	...

0800c6c0 <__mdiff>:
 800c6c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c4:	4689      	mov	r9, r1
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	4611      	mov	r1, r2
 800c6ca:	4648      	mov	r0, r9
 800c6cc:	4614      	mov	r4, r2
 800c6ce:	f7ff ffdb 	bl	800c688 <__mcmp>
 800c6d2:	1e05      	subs	r5, r0, #0
 800c6d4:	d112      	bne.n	800c6fc <__mdiff+0x3c>
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f7ff fd11 	bl	800c100 <_Balloc>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	b928      	cbnz	r0, 800c6ee <__mdiff+0x2e>
 800c6e2:	4b3f      	ldr	r3, [pc, #252]	@ (800c7e0 <__mdiff+0x120>)
 800c6e4:	f240 2137 	movw	r1, #567	@ 0x237
 800c6e8:	483e      	ldr	r0, [pc, #248]	@ (800c7e4 <__mdiff+0x124>)
 800c6ea:	f001 fc4d 	bl	800df88 <__assert_func>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	b003      	add	sp, #12
 800c6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fc:	bfbc      	itt	lt
 800c6fe:	464b      	movlt	r3, r9
 800c700:	46a1      	movlt	r9, r4
 800c702:	4630      	mov	r0, r6
 800c704:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c708:	bfba      	itte	lt
 800c70a:	461c      	movlt	r4, r3
 800c70c:	2501      	movlt	r5, #1
 800c70e:	2500      	movge	r5, #0
 800c710:	f7ff fcf6 	bl	800c100 <_Balloc>
 800c714:	4602      	mov	r2, r0
 800c716:	b918      	cbnz	r0, 800c720 <__mdiff+0x60>
 800c718:	4b31      	ldr	r3, [pc, #196]	@ (800c7e0 <__mdiff+0x120>)
 800c71a:	f240 2145 	movw	r1, #581	@ 0x245
 800c71e:	e7e3      	b.n	800c6e8 <__mdiff+0x28>
 800c720:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c724:	6926      	ldr	r6, [r4, #16]
 800c726:	60c5      	str	r5, [r0, #12]
 800c728:	f109 0310 	add.w	r3, r9, #16
 800c72c:	f109 0514 	add.w	r5, r9, #20
 800c730:	f104 0e14 	add.w	lr, r4, #20
 800c734:	f100 0b14 	add.w	fp, r0, #20
 800c738:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c73c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c740:	9301      	str	r3, [sp, #4]
 800c742:	46d9      	mov	r9, fp
 800c744:	f04f 0c00 	mov.w	ip, #0
 800c748:	9b01      	ldr	r3, [sp, #4]
 800c74a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c74e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c752:	9301      	str	r3, [sp, #4]
 800c754:	fa1f f38a 	uxth.w	r3, sl
 800c758:	4619      	mov	r1, r3
 800c75a:	b283      	uxth	r3, r0
 800c75c:	1acb      	subs	r3, r1, r3
 800c75e:	0c00      	lsrs	r0, r0, #16
 800c760:	4463      	add	r3, ip
 800c762:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c766:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c770:	4576      	cmp	r6, lr
 800c772:	f849 3b04 	str.w	r3, [r9], #4
 800c776:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c77a:	d8e5      	bhi.n	800c748 <__mdiff+0x88>
 800c77c:	1b33      	subs	r3, r6, r4
 800c77e:	3b15      	subs	r3, #21
 800c780:	f023 0303 	bic.w	r3, r3, #3
 800c784:	3415      	adds	r4, #21
 800c786:	3304      	adds	r3, #4
 800c788:	42a6      	cmp	r6, r4
 800c78a:	bf38      	it	cc
 800c78c:	2304      	movcc	r3, #4
 800c78e:	441d      	add	r5, r3
 800c790:	445b      	add	r3, fp
 800c792:	461e      	mov	r6, r3
 800c794:	462c      	mov	r4, r5
 800c796:	4544      	cmp	r4, r8
 800c798:	d30e      	bcc.n	800c7b8 <__mdiff+0xf8>
 800c79a:	f108 0103 	add.w	r1, r8, #3
 800c79e:	1b49      	subs	r1, r1, r5
 800c7a0:	f021 0103 	bic.w	r1, r1, #3
 800c7a4:	3d03      	subs	r5, #3
 800c7a6:	45a8      	cmp	r8, r5
 800c7a8:	bf38      	it	cc
 800c7aa:	2100      	movcc	r1, #0
 800c7ac:	440b      	add	r3, r1
 800c7ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7b2:	b191      	cbz	r1, 800c7da <__mdiff+0x11a>
 800c7b4:	6117      	str	r7, [r2, #16]
 800c7b6:	e79d      	b.n	800c6f4 <__mdiff+0x34>
 800c7b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c7bc:	46e6      	mov	lr, ip
 800c7be:	0c08      	lsrs	r0, r1, #16
 800c7c0:	fa1c fc81 	uxtah	ip, ip, r1
 800c7c4:	4471      	add	r1, lr
 800c7c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c7ca:	b289      	uxth	r1, r1
 800c7cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c7d0:	f846 1b04 	str.w	r1, [r6], #4
 800c7d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7d8:	e7dd      	b.n	800c796 <__mdiff+0xd6>
 800c7da:	3f01      	subs	r7, #1
 800c7dc:	e7e7      	b.n	800c7ae <__mdiff+0xee>
 800c7de:	bf00      	nop
 800c7e0:	0800ea6d 	.word	0x0800ea6d
 800c7e4:	0800ea7e 	.word	0x0800ea7e

0800c7e8 <__ulp>:
 800c7e8:	b082      	sub	sp, #8
 800c7ea:	ed8d 0b00 	vstr	d0, [sp]
 800c7ee:	9a01      	ldr	r2, [sp, #4]
 800c7f0:	4b0f      	ldr	r3, [pc, #60]	@ (800c830 <__ulp+0x48>)
 800c7f2:	4013      	ands	r3, r2
 800c7f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dc08      	bgt.n	800c80e <__ulp+0x26>
 800c7fc:	425b      	negs	r3, r3
 800c7fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c802:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c806:	da04      	bge.n	800c812 <__ulp+0x2a>
 800c808:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c80c:	4113      	asrs	r3, r2
 800c80e:	2200      	movs	r2, #0
 800c810:	e008      	b.n	800c824 <__ulp+0x3c>
 800c812:	f1a2 0314 	sub.w	r3, r2, #20
 800c816:	2b1e      	cmp	r3, #30
 800c818:	bfda      	itte	le
 800c81a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c81e:	40da      	lsrle	r2, r3
 800c820:	2201      	movgt	r2, #1
 800c822:	2300      	movs	r3, #0
 800c824:	4619      	mov	r1, r3
 800c826:	4610      	mov	r0, r2
 800c828:	ec41 0b10 	vmov	d0, r0, r1
 800c82c:	b002      	add	sp, #8
 800c82e:	4770      	bx	lr
 800c830:	7ff00000 	.word	0x7ff00000

0800c834 <__b2d>:
 800c834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c838:	6906      	ldr	r6, [r0, #16]
 800c83a:	f100 0814 	add.w	r8, r0, #20
 800c83e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c842:	1f37      	subs	r7, r6, #4
 800c844:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c848:	4610      	mov	r0, r2
 800c84a:	f7ff fd4b 	bl	800c2e4 <__hi0bits>
 800c84e:	f1c0 0320 	rsb	r3, r0, #32
 800c852:	280a      	cmp	r0, #10
 800c854:	600b      	str	r3, [r1, #0]
 800c856:	491b      	ldr	r1, [pc, #108]	@ (800c8c4 <__b2d+0x90>)
 800c858:	dc15      	bgt.n	800c886 <__b2d+0x52>
 800c85a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c85e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c862:	45b8      	cmp	r8, r7
 800c864:	ea43 0501 	orr.w	r5, r3, r1
 800c868:	bf34      	ite	cc
 800c86a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c86e:	2300      	movcs	r3, #0
 800c870:	3015      	adds	r0, #21
 800c872:	fa02 f000 	lsl.w	r0, r2, r0
 800c876:	fa23 f30c 	lsr.w	r3, r3, ip
 800c87a:	4303      	orrs	r3, r0
 800c87c:	461c      	mov	r4, r3
 800c87e:	ec45 4b10 	vmov	d0, r4, r5
 800c882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c886:	45b8      	cmp	r8, r7
 800c888:	bf3a      	itte	cc
 800c88a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c88e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c892:	2300      	movcs	r3, #0
 800c894:	380b      	subs	r0, #11
 800c896:	d012      	beq.n	800c8be <__b2d+0x8a>
 800c898:	f1c0 0120 	rsb	r1, r0, #32
 800c89c:	fa23 f401 	lsr.w	r4, r3, r1
 800c8a0:	4082      	lsls	r2, r0
 800c8a2:	4322      	orrs	r2, r4
 800c8a4:	4547      	cmp	r7, r8
 800c8a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c8aa:	bf8c      	ite	hi
 800c8ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c8b0:	2200      	movls	r2, #0
 800c8b2:	4083      	lsls	r3, r0
 800c8b4:	40ca      	lsrs	r2, r1
 800c8b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	e7de      	b.n	800c87c <__b2d+0x48>
 800c8be:	ea42 0501 	orr.w	r5, r2, r1
 800c8c2:	e7db      	b.n	800c87c <__b2d+0x48>
 800c8c4:	3ff00000 	.word	0x3ff00000

0800c8c8 <__d2b>:
 800c8c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8cc:	460f      	mov	r7, r1
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	ec59 8b10 	vmov	r8, r9, d0
 800c8d4:	4616      	mov	r6, r2
 800c8d6:	f7ff fc13 	bl	800c100 <_Balloc>
 800c8da:	4604      	mov	r4, r0
 800c8dc:	b930      	cbnz	r0, 800c8ec <__d2b+0x24>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	4b23      	ldr	r3, [pc, #140]	@ (800c970 <__d2b+0xa8>)
 800c8e2:	4824      	ldr	r0, [pc, #144]	@ (800c974 <__d2b+0xac>)
 800c8e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8e8:	f001 fb4e 	bl	800df88 <__assert_func>
 800c8ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8f4:	b10d      	cbz	r5, 800c8fa <__d2b+0x32>
 800c8f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8fa:	9301      	str	r3, [sp, #4]
 800c8fc:	f1b8 0300 	subs.w	r3, r8, #0
 800c900:	d023      	beq.n	800c94a <__d2b+0x82>
 800c902:	4668      	mov	r0, sp
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	f7ff fd0c 	bl	800c322 <__lo0bits>
 800c90a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c90e:	b1d0      	cbz	r0, 800c946 <__d2b+0x7e>
 800c910:	f1c0 0320 	rsb	r3, r0, #32
 800c914:	fa02 f303 	lsl.w	r3, r2, r3
 800c918:	430b      	orrs	r3, r1
 800c91a:	40c2      	lsrs	r2, r0
 800c91c:	6163      	str	r3, [r4, #20]
 800c91e:	9201      	str	r2, [sp, #4]
 800c920:	9b01      	ldr	r3, [sp, #4]
 800c922:	61a3      	str	r3, [r4, #24]
 800c924:	2b00      	cmp	r3, #0
 800c926:	bf0c      	ite	eq
 800c928:	2201      	moveq	r2, #1
 800c92a:	2202      	movne	r2, #2
 800c92c:	6122      	str	r2, [r4, #16]
 800c92e:	b1a5      	cbz	r5, 800c95a <__d2b+0x92>
 800c930:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c934:	4405      	add	r5, r0
 800c936:	603d      	str	r5, [r7, #0]
 800c938:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c93c:	6030      	str	r0, [r6, #0]
 800c93e:	4620      	mov	r0, r4
 800c940:	b003      	add	sp, #12
 800c942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c946:	6161      	str	r1, [r4, #20]
 800c948:	e7ea      	b.n	800c920 <__d2b+0x58>
 800c94a:	a801      	add	r0, sp, #4
 800c94c:	f7ff fce9 	bl	800c322 <__lo0bits>
 800c950:	9b01      	ldr	r3, [sp, #4]
 800c952:	6163      	str	r3, [r4, #20]
 800c954:	3020      	adds	r0, #32
 800c956:	2201      	movs	r2, #1
 800c958:	e7e8      	b.n	800c92c <__d2b+0x64>
 800c95a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c95e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c962:	6038      	str	r0, [r7, #0]
 800c964:	6918      	ldr	r0, [r3, #16]
 800c966:	f7ff fcbd 	bl	800c2e4 <__hi0bits>
 800c96a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c96e:	e7e5      	b.n	800c93c <__d2b+0x74>
 800c970:	0800ea6d 	.word	0x0800ea6d
 800c974:	0800ea7e 	.word	0x0800ea7e

0800c978 <__ratio>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	b085      	sub	sp, #20
 800c97e:	e9cd 1000 	strd	r1, r0, [sp]
 800c982:	a902      	add	r1, sp, #8
 800c984:	f7ff ff56 	bl	800c834 <__b2d>
 800c988:	9800      	ldr	r0, [sp, #0]
 800c98a:	a903      	add	r1, sp, #12
 800c98c:	ec55 4b10 	vmov	r4, r5, d0
 800c990:	f7ff ff50 	bl	800c834 <__b2d>
 800c994:	9b01      	ldr	r3, [sp, #4]
 800c996:	6919      	ldr	r1, [r3, #16]
 800c998:	9b00      	ldr	r3, [sp, #0]
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	1ac9      	subs	r1, r1, r3
 800c99e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c9a2:	1a9b      	subs	r3, r3, r2
 800c9a4:	ec5b ab10 	vmov	sl, fp, d0
 800c9a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	bfce      	itee	gt
 800c9b0:	462a      	movgt	r2, r5
 800c9b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9b6:	465a      	movle	r2, fp
 800c9b8:	462f      	mov	r7, r5
 800c9ba:	46d9      	mov	r9, fp
 800c9bc:	bfcc      	ite	gt
 800c9be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c9c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c9c6:	464b      	mov	r3, r9
 800c9c8:	4652      	mov	r2, sl
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	4639      	mov	r1, r7
 800c9ce:	f7f3 ff65 	bl	800089c <__aeabi_ddiv>
 800c9d2:	ec41 0b10 	vmov	d0, r0, r1
 800c9d6:	b005      	add	sp, #20
 800c9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9dc <__copybits>:
 800c9dc:	3901      	subs	r1, #1
 800c9de:	b570      	push	{r4, r5, r6, lr}
 800c9e0:	1149      	asrs	r1, r1, #5
 800c9e2:	6914      	ldr	r4, [r2, #16]
 800c9e4:	3101      	adds	r1, #1
 800c9e6:	f102 0314 	add.w	r3, r2, #20
 800c9ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9f2:	1f05      	subs	r5, r0, #4
 800c9f4:	42a3      	cmp	r3, r4
 800c9f6:	d30c      	bcc.n	800ca12 <__copybits+0x36>
 800c9f8:	1aa3      	subs	r3, r4, r2
 800c9fa:	3b11      	subs	r3, #17
 800c9fc:	f023 0303 	bic.w	r3, r3, #3
 800ca00:	3211      	adds	r2, #17
 800ca02:	42a2      	cmp	r2, r4
 800ca04:	bf88      	it	hi
 800ca06:	2300      	movhi	r3, #0
 800ca08:	4418      	add	r0, r3
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	4288      	cmp	r0, r1
 800ca0e:	d305      	bcc.n	800ca1c <__copybits+0x40>
 800ca10:	bd70      	pop	{r4, r5, r6, pc}
 800ca12:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca16:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca1a:	e7eb      	b.n	800c9f4 <__copybits+0x18>
 800ca1c:	f840 3b04 	str.w	r3, [r0], #4
 800ca20:	e7f4      	b.n	800ca0c <__copybits+0x30>

0800ca22 <__any_on>:
 800ca22:	f100 0214 	add.w	r2, r0, #20
 800ca26:	6900      	ldr	r0, [r0, #16]
 800ca28:	114b      	asrs	r3, r1, #5
 800ca2a:	4298      	cmp	r0, r3
 800ca2c:	b510      	push	{r4, lr}
 800ca2e:	db11      	blt.n	800ca54 <__any_on+0x32>
 800ca30:	dd0a      	ble.n	800ca48 <__any_on+0x26>
 800ca32:	f011 011f 	ands.w	r1, r1, #31
 800ca36:	d007      	beq.n	800ca48 <__any_on+0x26>
 800ca38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca3c:	fa24 f001 	lsr.w	r0, r4, r1
 800ca40:	fa00 f101 	lsl.w	r1, r0, r1
 800ca44:	428c      	cmp	r4, r1
 800ca46:	d10b      	bne.n	800ca60 <__any_on+0x3e>
 800ca48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d803      	bhi.n	800ca58 <__any_on+0x36>
 800ca50:	2000      	movs	r0, #0
 800ca52:	bd10      	pop	{r4, pc}
 800ca54:	4603      	mov	r3, r0
 800ca56:	e7f7      	b.n	800ca48 <__any_on+0x26>
 800ca58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca5c:	2900      	cmp	r1, #0
 800ca5e:	d0f5      	beq.n	800ca4c <__any_on+0x2a>
 800ca60:	2001      	movs	r0, #1
 800ca62:	e7f6      	b.n	800ca52 <__any_on+0x30>

0800ca64 <sulp>:
 800ca64:	b570      	push	{r4, r5, r6, lr}
 800ca66:	4604      	mov	r4, r0
 800ca68:	460d      	mov	r5, r1
 800ca6a:	ec45 4b10 	vmov	d0, r4, r5
 800ca6e:	4616      	mov	r6, r2
 800ca70:	f7ff feba 	bl	800c7e8 <__ulp>
 800ca74:	ec51 0b10 	vmov	r0, r1, d0
 800ca78:	b17e      	cbz	r6, 800ca9a <sulp+0x36>
 800ca7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	dd09      	ble.n	800ca9a <sulp+0x36>
 800ca86:	051b      	lsls	r3, r3, #20
 800ca88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca8c:	2400      	movs	r4, #0
 800ca8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca92:	4622      	mov	r2, r4
 800ca94:	462b      	mov	r3, r5
 800ca96:	f7f3 fdd7 	bl	8000648 <__aeabi_dmul>
 800ca9a:	ec41 0b10 	vmov	d0, r0, r1
 800ca9e:	bd70      	pop	{r4, r5, r6, pc}

0800caa0 <_strtod_l>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	b09f      	sub	sp, #124	@ 0x7c
 800caa6:	460c      	mov	r4, r1
 800caa8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800caaa:	2200      	movs	r2, #0
 800caac:	921a      	str	r2, [sp, #104]	@ 0x68
 800caae:	9005      	str	r0, [sp, #20]
 800cab0:	f04f 0a00 	mov.w	sl, #0
 800cab4:	f04f 0b00 	mov.w	fp, #0
 800cab8:	460a      	mov	r2, r1
 800caba:	9219      	str	r2, [sp, #100]	@ 0x64
 800cabc:	7811      	ldrb	r1, [r2, #0]
 800cabe:	292b      	cmp	r1, #43	@ 0x2b
 800cac0:	d04a      	beq.n	800cb58 <_strtod_l+0xb8>
 800cac2:	d838      	bhi.n	800cb36 <_strtod_l+0x96>
 800cac4:	290d      	cmp	r1, #13
 800cac6:	d832      	bhi.n	800cb2e <_strtod_l+0x8e>
 800cac8:	2908      	cmp	r1, #8
 800caca:	d832      	bhi.n	800cb32 <_strtod_l+0x92>
 800cacc:	2900      	cmp	r1, #0
 800cace:	d03b      	beq.n	800cb48 <_strtod_l+0xa8>
 800cad0:	2200      	movs	r2, #0
 800cad2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cad4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cad6:	782a      	ldrb	r2, [r5, #0]
 800cad8:	2a30      	cmp	r2, #48	@ 0x30
 800cada:	f040 80b3 	bne.w	800cc44 <_strtod_l+0x1a4>
 800cade:	786a      	ldrb	r2, [r5, #1]
 800cae0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cae4:	2a58      	cmp	r2, #88	@ 0x58
 800cae6:	d16e      	bne.n	800cbc6 <_strtod_l+0x126>
 800cae8:	9302      	str	r3, [sp, #8]
 800caea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	ab1a      	add	r3, sp, #104	@ 0x68
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	4a8e      	ldr	r2, [pc, #568]	@ (800cd2c <_strtod_l+0x28c>)
 800caf4:	9805      	ldr	r0, [sp, #20]
 800caf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800caf8:	a919      	add	r1, sp, #100	@ 0x64
 800cafa:	f001 fadf 	bl	800e0bc <__gethex>
 800cafe:	f010 060f 	ands.w	r6, r0, #15
 800cb02:	4604      	mov	r4, r0
 800cb04:	d005      	beq.n	800cb12 <_strtod_l+0x72>
 800cb06:	2e06      	cmp	r6, #6
 800cb08:	d128      	bne.n	800cb5c <_strtod_l+0xbc>
 800cb0a:	3501      	adds	r5, #1
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cb10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f040 858e 	bne.w	800d636 <_strtod_l+0xb96>
 800cb1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb1c:	b1cb      	cbz	r3, 800cb52 <_strtod_l+0xb2>
 800cb1e:	4652      	mov	r2, sl
 800cb20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cb24:	ec43 2b10 	vmov	d0, r2, r3
 800cb28:	b01f      	add	sp, #124	@ 0x7c
 800cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2e:	2920      	cmp	r1, #32
 800cb30:	d1ce      	bne.n	800cad0 <_strtod_l+0x30>
 800cb32:	3201      	adds	r2, #1
 800cb34:	e7c1      	b.n	800caba <_strtod_l+0x1a>
 800cb36:	292d      	cmp	r1, #45	@ 0x2d
 800cb38:	d1ca      	bne.n	800cad0 <_strtod_l+0x30>
 800cb3a:	2101      	movs	r1, #1
 800cb3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cb3e:	1c51      	adds	r1, r2, #1
 800cb40:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb42:	7852      	ldrb	r2, [r2, #1]
 800cb44:	2a00      	cmp	r2, #0
 800cb46:	d1c5      	bne.n	800cad4 <_strtod_l+0x34>
 800cb48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb4a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f040 8570 	bne.w	800d632 <_strtod_l+0xb92>
 800cb52:	4652      	mov	r2, sl
 800cb54:	465b      	mov	r3, fp
 800cb56:	e7e5      	b.n	800cb24 <_strtod_l+0x84>
 800cb58:	2100      	movs	r1, #0
 800cb5a:	e7ef      	b.n	800cb3c <_strtod_l+0x9c>
 800cb5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb5e:	b13a      	cbz	r2, 800cb70 <_strtod_l+0xd0>
 800cb60:	2135      	movs	r1, #53	@ 0x35
 800cb62:	a81c      	add	r0, sp, #112	@ 0x70
 800cb64:	f7ff ff3a 	bl	800c9dc <__copybits>
 800cb68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb6a:	9805      	ldr	r0, [sp, #20]
 800cb6c:	f7ff fb08 	bl	800c180 <_Bfree>
 800cb70:	3e01      	subs	r6, #1
 800cb72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cb74:	2e04      	cmp	r6, #4
 800cb76:	d806      	bhi.n	800cb86 <_strtod_l+0xe6>
 800cb78:	e8df f006 	tbb	[pc, r6]
 800cb7c:	201d0314 	.word	0x201d0314
 800cb80:	14          	.byte	0x14
 800cb81:	00          	.byte	0x00
 800cb82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cb86:	05e1      	lsls	r1, r4, #23
 800cb88:	bf48      	it	mi
 800cb8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb92:	0d1b      	lsrs	r3, r3, #20
 800cb94:	051b      	lsls	r3, r3, #20
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1bb      	bne.n	800cb12 <_strtod_l+0x72>
 800cb9a:	f7fe fb21 	bl	800b1e0 <__errno>
 800cb9e:	2322      	movs	r3, #34	@ 0x22
 800cba0:	6003      	str	r3, [r0, #0]
 800cba2:	e7b6      	b.n	800cb12 <_strtod_l+0x72>
 800cba4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cba8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cbac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cbb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cbb4:	e7e7      	b.n	800cb86 <_strtod_l+0xe6>
 800cbb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cd34 <_strtod_l+0x294>
 800cbba:	e7e4      	b.n	800cb86 <_strtod_l+0xe6>
 800cbbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cbc0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800cbc4:	e7df      	b.n	800cb86 <_strtod_l+0xe6>
 800cbc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbcc:	785b      	ldrb	r3, [r3, #1]
 800cbce:	2b30      	cmp	r3, #48	@ 0x30
 800cbd0:	d0f9      	beq.n	800cbc6 <_strtod_l+0x126>
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d09d      	beq.n	800cb12 <_strtod_l+0x72>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbdc:	930c      	str	r3, [sp, #48]	@ 0x30
 800cbde:	2300      	movs	r3, #0
 800cbe0:	9308      	str	r3, [sp, #32]
 800cbe2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbe4:	461f      	mov	r7, r3
 800cbe6:	220a      	movs	r2, #10
 800cbe8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cbea:	7805      	ldrb	r5, [r0, #0]
 800cbec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cbf0:	b2d9      	uxtb	r1, r3
 800cbf2:	2909      	cmp	r1, #9
 800cbf4:	d928      	bls.n	800cc48 <_strtod_l+0x1a8>
 800cbf6:	494e      	ldr	r1, [pc, #312]	@ (800cd30 <_strtod_l+0x290>)
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f001 f979 	bl	800def0 <strncmp>
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	d032      	beq.n	800cc68 <_strtod_l+0x1c8>
 800cc02:	2000      	movs	r0, #0
 800cc04:	462a      	mov	r2, r5
 800cc06:	4681      	mov	r9, r0
 800cc08:	463d      	mov	r5, r7
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2a65      	cmp	r2, #101	@ 0x65
 800cc0e:	d001      	beq.n	800cc14 <_strtod_l+0x174>
 800cc10:	2a45      	cmp	r2, #69	@ 0x45
 800cc12:	d114      	bne.n	800cc3e <_strtod_l+0x19e>
 800cc14:	b91d      	cbnz	r5, 800cc1e <_strtod_l+0x17e>
 800cc16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc18:	4302      	orrs	r2, r0
 800cc1a:	d095      	beq.n	800cb48 <_strtod_l+0xa8>
 800cc1c:	2500      	movs	r5, #0
 800cc1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cc20:	1c62      	adds	r2, r4, #1
 800cc22:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc24:	7862      	ldrb	r2, [r4, #1]
 800cc26:	2a2b      	cmp	r2, #43	@ 0x2b
 800cc28:	d077      	beq.n	800cd1a <_strtod_l+0x27a>
 800cc2a:	2a2d      	cmp	r2, #45	@ 0x2d
 800cc2c:	d07b      	beq.n	800cd26 <_strtod_l+0x286>
 800cc2e:	f04f 0c00 	mov.w	ip, #0
 800cc32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cc36:	2909      	cmp	r1, #9
 800cc38:	f240 8082 	bls.w	800cd40 <_strtod_l+0x2a0>
 800cc3c:	9419      	str	r4, [sp, #100]	@ 0x64
 800cc3e:	f04f 0800 	mov.w	r8, #0
 800cc42:	e0a2      	b.n	800cd8a <_strtod_l+0x2ea>
 800cc44:	2300      	movs	r3, #0
 800cc46:	e7c7      	b.n	800cbd8 <_strtod_l+0x138>
 800cc48:	2f08      	cmp	r7, #8
 800cc4a:	bfd5      	itete	le
 800cc4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cc4e:	9908      	ldrgt	r1, [sp, #32]
 800cc50:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc54:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cc58:	f100 0001 	add.w	r0, r0, #1
 800cc5c:	bfd4      	ite	le
 800cc5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cc60:	9308      	strgt	r3, [sp, #32]
 800cc62:	3701      	adds	r7, #1
 800cc64:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc66:	e7bf      	b.n	800cbe8 <_strtod_l+0x148>
 800cc68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc6a:	1c5a      	adds	r2, r3, #1
 800cc6c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc6e:	785a      	ldrb	r2, [r3, #1]
 800cc70:	b37f      	cbz	r7, 800ccd2 <_strtod_l+0x232>
 800cc72:	4681      	mov	r9, r0
 800cc74:	463d      	mov	r5, r7
 800cc76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cc7a:	2b09      	cmp	r3, #9
 800cc7c:	d912      	bls.n	800cca4 <_strtod_l+0x204>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e7c4      	b.n	800cc0c <_strtod_l+0x16c>
 800cc82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc84:	1c5a      	adds	r2, r3, #1
 800cc86:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc88:	785a      	ldrb	r2, [r3, #1]
 800cc8a:	3001      	adds	r0, #1
 800cc8c:	2a30      	cmp	r2, #48	@ 0x30
 800cc8e:	d0f8      	beq.n	800cc82 <_strtod_l+0x1e2>
 800cc90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc94:	2b08      	cmp	r3, #8
 800cc96:	f200 84d3 	bhi.w	800d640 <_strtod_l+0xba0>
 800cc9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc9e:	4681      	mov	r9, r0
 800cca0:	2000      	movs	r0, #0
 800cca2:	4605      	mov	r5, r0
 800cca4:	3a30      	subs	r2, #48	@ 0x30
 800cca6:	f100 0301 	add.w	r3, r0, #1
 800ccaa:	d02a      	beq.n	800cd02 <_strtod_l+0x262>
 800ccac:	4499      	add	r9, r3
 800ccae:	eb00 0c05 	add.w	ip, r0, r5
 800ccb2:	462b      	mov	r3, r5
 800ccb4:	210a      	movs	r1, #10
 800ccb6:	4563      	cmp	r3, ip
 800ccb8:	d10d      	bne.n	800ccd6 <_strtod_l+0x236>
 800ccba:	1c69      	adds	r1, r5, #1
 800ccbc:	4401      	add	r1, r0
 800ccbe:	4428      	add	r0, r5
 800ccc0:	2808      	cmp	r0, #8
 800ccc2:	dc16      	bgt.n	800ccf2 <_strtod_l+0x252>
 800ccc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ccc6:	230a      	movs	r3, #10
 800ccc8:	fb03 2300 	mla	r3, r3, r0, r2
 800cccc:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e018      	b.n	800cd04 <_strtod_l+0x264>
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	e7da      	b.n	800cc8c <_strtod_l+0x1ec>
 800ccd6:	2b08      	cmp	r3, #8
 800ccd8:	f103 0301 	add.w	r3, r3, #1
 800ccdc:	dc03      	bgt.n	800cce6 <_strtod_l+0x246>
 800ccde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cce0:	434e      	muls	r6, r1
 800cce2:	960a      	str	r6, [sp, #40]	@ 0x28
 800cce4:	e7e7      	b.n	800ccb6 <_strtod_l+0x216>
 800cce6:	2b10      	cmp	r3, #16
 800cce8:	bfde      	ittt	le
 800ccea:	9e08      	ldrle	r6, [sp, #32]
 800ccec:	434e      	mulle	r6, r1
 800ccee:	9608      	strle	r6, [sp, #32]
 800ccf0:	e7e1      	b.n	800ccb6 <_strtod_l+0x216>
 800ccf2:	280f      	cmp	r0, #15
 800ccf4:	dceb      	bgt.n	800ccce <_strtod_l+0x22e>
 800ccf6:	9808      	ldr	r0, [sp, #32]
 800ccf8:	230a      	movs	r3, #10
 800ccfa:	fb03 2300 	mla	r3, r3, r0, r2
 800ccfe:	9308      	str	r3, [sp, #32]
 800cd00:	e7e5      	b.n	800ccce <_strtod_l+0x22e>
 800cd02:	4629      	mov	r1, r5
 800cd04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd06:	1c50      	adds	r0, r2, #1
 800cd08:	9019      	str	r0, [sp, #100]	@ 0x64
 800cd0a:	7852      	ldrb	r2, [r2, #1]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	460d      	mov	r5, r1
 800cd10:	e7b1      	b.n	800cc76 <_strtod_l+0x1d6>
 800cd12:	f04f 0900 	mov.w	r9, #0
 800cd16:	2301      	movs	r3, #1
 800cd18:	e77d      	b.n	800cc16 <_strtod_l+0x176>
 800cd1a:	f04f 0c00 	mov.w	ip, #0
 800cd1e:	1ca2      	adds	r2, r4, #2
 800cd20:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd22:	78a2      	ldrb	r2, [r4, #2]
 800cd24:	e785      	b.n	800cc32 <_strtod_l+0x192>
 800cd26:	f04f 0c01 	mov.w	ip, #1
 800cd2a:	e7f8      	b.n	800cd1e <_strtod_l+0x27e>
 800cd2c:	0800ebf0 	.word	0x0800ebf0
 800cd30:	0800ebd8 	.word	0x0800ebd8
 800cd34:	7ff00000 	.word	0x7ff00000
 800cd38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd3a:	1c51      	adds	r1, r2, #1
 800cd3c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd3e:	7852      	ldrb	r2, [r2, #1]
 800cd40:	2a30      	cmp	r2, #48	@ 0x30
 800cd42:	d0f9      	beq.n	800cd38 <_strtod_l+0x298>
 800cd44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cd48:	2908      	cmp	r1, #8
 800cd4a:	f63f af78 	bhi.w	800cc3e <_strtod_l+0x19e>
 800cd4e:	3a30      	subs	r2, #48	@ 0x30
 800cd50:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd54:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cd56:	f04f 080a 	mov.w	r8, #10
 800cd5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd5c:	1c56      	adds	r6, r2, #1
 800cd5e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cd60:	7852      	ldrb	r2, [r2, #1]
 800cd62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cd66:	f1be 0f09 	cmp.w	lr, #9
 800cd6a:	d939      	bls.n	800cde0 <_strtod_l+0x340>
 800cd6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd6e:	1a76      	subs	r6, r6, r1
 800cd70:	2e08      	cmp	r6, #8
 800cd72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cd76:	dc03      	bgt.n	800cd80 <_strtod_l+0x2e0>
 800cd78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd7a:	4588      	cmp	r8, r1
 800cd7c:	bfa8      	it	ge
 800cd7e:	4688      	movge	r8, r1
 800cd80:	f1bc 0f00 	cmp.w	ip, #0
 800cd84:	d001      	beq.n	800cd8a <_strtod_l+0x2ea>
 800cd86:	f1c8 0800 	rsb	r8, r8, #0
 800cd8a:	2d00      	cmp	r5, #0
 800cd8c:	d14e      	bne.n	800ce2c <_strtod_l+0x38c>
 800cd8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd90:	4308      	orrs	r0, r1
 800cd92:	f47f aebe 	bne.w	800cb12 <_strtod_l+0x72>
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f47f aed6 	bne.w	800cb48 <_strtod_l+0xa8>
 800cd9c:	2a69      	cmp	r2, #105	@ 0x69
 800cd9e:	d028      	beq.n	800cdf2 <_strtod_l+0x352>
 800cda0:	dc25      	bgt.n	800cdee <_strtod_l+0x34e>
 800cda2:	2a49      	cmp	r2, #73	@ 0x49
 800cda4:	d025      	beq.n	800cdf2 <_strtod_l+0x352>
 800cda6:	2a4e      	cmp	r2, #78	@ 0x4e
 800cda8:	f47f aece 	bne.w	800cb48 <_strtod_l+0xa8>
 800cdac:	499b      	ldr	r1, [pc, #620]	@ (800d01c <_strtod_l+0x57c>)
 800cdae:	a819      	add	r0, sp, #100	@ 0x64
 800cdb0:	f001 fba6 	bl	800e500 <__match>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	f43f aec7 	beq.w	800cb48 <_strtod_l+0xa8>
 800cdba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b28      	cmp	r3, #40	@ 0x28
 800cdc0:	d12e      	bne.n	800ce20 <_strtod_l+0x380>
 800cdc2:	4997      	ldr	r1, [pc, #604]	@ (800d020 <_strtod_l+0x580>)
 800cdc4:	aa1c      	add	r2, sp, #112	@ 0x70
 800cdc6:	a819      	add	r0, sp, #100	@ 0x64
 800cdc8:	f001 fbae 	bl	800e528 <__hexnan>
 800cdcc:	2805      	cmp	r0, #5
 800cdce:	d127      	bne.n	800ce20 <_strtod_l+0x380>
 800cdd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cdd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cdda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cdde:	e698      	b.n	800cb12 <_strtod_l+0x72>
 800cde0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cde2:	fb08 2101 	mla	r1, r8, r1, r2
 800cde6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cdea:	920e      	str	r2, [sp, #56]	@ 0x38
 800cdec:	e7b5      	b.n	800cd5a <_strtod_l+0x2ba>
 800cdee:	2a6e      	cmp	r2, #110	@ 0x6e
 800cdf0:	e7da      	b.n	800cda8 <_strtod_l+0x308>
 800cdf2:	498c      	ldr	r1, [pc, #560]	@ (800d024 <_strtod_l+0x584>)
 800cdf4:	a819      	add	r0, sp, #100	@ 0x64
 800cdf6:	f001 fb83 	bl	800e500 <__match>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	f43f aea4 	beq.w	800cb48 <_strtod_l+0xa8>
 800ce00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce02:	4989      	ldr	r1, [pc, #548]	@ (800d028 <_strtod_l+0x588>)
 800ce04:	3b01      	subs	r3, #1
 800ce06:	a819      	add	r0, sp, #100	@ 0x64
 800ce08:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce0a:	f001 fb79 	bl	800e500 <__match>
 800ce0e:	b910      	cbnz	r0, 800ce16 <_strtod_l+0x376>
 800ce10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce12:	3301      	adds	r3, #1
 800ce14:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d038 <_strtod_l+0x598>
 800ce1a:	f04f 0a00 	mov.w	sl, #0
 800ce1e:	e678      	b.n	800cb12 <_strtod_l+0x72>
 800ce20:	4882      	ldr	r0, [pc, #520]	@ (800d02c <_strtod_l+0x58c>)
 800ce22:	f001 f8a9 	bl	800df78 <nan>
 800ce26:	ec5b ab10 	vmov	sl, fp, d0
 800ce2a:	e672      	b.n	800cb12 <_strtod_l+0x72>
 800ce2c:	eba8 0309 	sub.w	r3, r8, r9
 800ce30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce34:	2f00      	cmp	r7, #0
 800ce36:	bf08      	it	eq
 800ce38:	462f      	moveq	r7, r5
 800ce3a:	2d10      	cmp	r5, #16
 800ce3c:	462c      	mov	r4, r5
 800ce3e:	bfa8      	it	ge
 800ce40:	2410      	movge	r4, #16
 800ce42:	f7f3 fb87 	bl	8000554 <__aeabi_ui2d>
 800ce46:	2d09      	cmp	r5, #9
 800ce48:	4682      	mov	sl, r0
 800ce4a:	468b      	mov	fp, r1
 800ce4c:	dc13      	bgt.n	800ce76 <_strtod_l+0x3d6>
 800ce4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f43f ae5e 	beq.w	800cb12 <_strtod_l+0x72>
 800ce56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce58:	dd78      	ble.n	800cf4c <_strtod_l+0x4ac>
 800ce5a:	2b16      	cmp	r3, #22
 800ce5c:	dc5f      	bgt.n	800cf1e <_strtod_l+0x47e>
 800ce5e:	4974      	ldr	r1, [pc, #464]	@ (800d030 <_strtod_l+0x590>)
 800ce60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce68:	4652      	mov	r2, sl
 800ce6a:	465b      	mov	r3, fp
 800ce6c:	f7f3 fbec 	bl	8000648 <__aeabi_dmul>
 800ce70:	4682      	mov	sl, r0
 800ce72:	468b      	mov	fp, r1
 800ce74:	e64d      	b.n	800cb12 <_strtod_l+0x72>
 800ce76:	4b6e      	ldr	r3, [pc, #440]	@ (800d030 <_strtod_l+0x590>)
 800ce78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce80:	f7f3 fbe2 	bl	8000648 <__aeabi_dmul>
 800ce84:	4682      	mov	sl, r0
 800ce86:	9808      	ldr	r0, [sp, #32]
 800ce88:	468b      	mov	fp, r1
 800ce8a:	f7f3 fb63 	bl	8000554 <__aeabi_ui2d>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4650      	mov	r0, sl
 800ce94:	4659      	mov	r1, fp
 800ce96:	f7f3 fa21 	bl	80002dc <__adddf3>
 800ce9a:	2d0f      	cmp	r5, #15
 800ce9c:	4682      	mov	sl, r0
 800ce9e:	468b      	mov	fp, r1
 800cea0:	ddd5      	ble.n	800ce4e <_strtod_l+0x3ae>
 800cea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cea4:	1b2c      	subs	r4, r5, r4
 800cea6:	441c      	add	r4, r3
 800cea8:	2c00      	cmp	r4, #0
 800ceaa:	f340 8096 	ble.w	800cfda <_strtod_l+0x53a>
 800ceae:	f014 030f 	ands.w	r3, r4, #15
 800ceb2:	d00a      	beq.n	800ceca <_strtod_l+0x42a>
 800ceb4:	495e      	ldr	r1, [pc, #376]	@ (800d030 <_strtod_l+0x590>)
 800ceb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ceba:	4652      	mov	r2, sl
 800cebc:	465b      	mov	r3, fp
 800cebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cec2:	f7f3 fbc1 	bl	8000648 <__aeabi_dmul>
 800cec6:	4682      	mov	sl, r0
 800cec8:	468b      	mov	fp, r1
 800ceca:	f034 040f 	bics.w	r4, r4, #15
 800cece:	d073      	beq.n	800cfb8 <_strtod_l+0x518>
 800ced0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ced4:	dd48      	ble.n	800cf68 <_strtod_l+0x4c8>
 800ced6:	2400      	movs	r4, #0
 800ced8:	46a0      	mov	r8, r4
 800ceda:	940a      	str	r4, [sp, #40]	@ 0x28
 800cedc:	46a1      	mov	r9, r4
 800cede:	9a05      	ldr	r2, [sp, #20]
 800cee0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d038 <_strtod_l+0x598>
 800cee4:	2322      	movs	r3, #34	@ 0x22
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	f04f 0a00 	mov.w	sl, #0
 800ceec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f43f ae0f 	beq.w	800cb12 <_strtod_l+0x72>
 800cef4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cef6:	9805      	ldr	r0, [sp, #20]
 800cef8:	f7ff f942 	bl	800c180 <_Bfree>
 800cefc:	9805      	ldr	r0, [sp, #20]
 800cefe:	4649      	mov	r1, r9
 800cf00:	f7ff f93e 	bl	800c180 <_Bfree>
 800cf04:	9805      	ldr	r0, [sp, #20]
 800cf06:	4641      	mov	r1, r8
 800cf08:	f7ff f93a 	bl	800c180 <_Bfree>
 800cf0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf0e:	9805      	ldr	r0, [sp, #20]
 800cf10:	f7ff f936 	bl	800c180 <_Bfree>
 800cf14:	9805      	ldr	r0, [sp, #20]
 800cf16:	4621      	mov	r1, r4
 800cf18:	f7ff f932 	bl	800c180 <_Bfree>
 800cf1c:	e5f9      	b.n	800cb12 <_strtod_l+0x72>
 800cf1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cf24:	4293      	cmp	r3, r2
 800cf26:	dbbc      	blt.n	800cea2 <_strtod_l+0x402>
 800cf28:	4c41      	ldr	r4, [pc, #260]	@ (800d030 <_strtod_l+0x590>)
 800cf2a:	f1c5 050f 	rsb	r5, r5, #15
 800cf2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf32:	4652      	mov	r2, sl
 800cf34:	465b      	mov	r3, fp
 800cf36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf3a:	f7f3 fb85 	bl	8000648 <__aeabi_dmul>
 800cf3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf40:	1b5d      	subs	r5, r3, r5
 800cf42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf4a:	e78f      	b.n	800ce6c <_strtod_l+0x3cc>
 800cf4c:	3316      	adds	r3, #22
 800cf4e:	dba8      	blt.n	800cea2 <_strtod_l+0x402>
 800cf50:	4b37      	ldr	r3, [pc, #220]	@ (800d030 <_strtod_l+0x590>)
 800cf52:	eba9 0808 	sub.w	r8, r9, r8
 800cf56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cf5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cf5e:	4650      	mov	r0, sl
 800cf60:	4659      	mov	r1, fp
 800cf62:	f7f3 fc9b 	bl	800089c <__aeabi_ddiv>
 800cf66:	e783      	b.n	800ce70 <_strtod_l+0x3d0>
 800cf68:	4b32      	ldr	r3, [pc, #200]	@ (800d034 <_strtod_l+0x594>)
 800cf6a:	9308      	str	r3, [sp, #32]
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	1124      	asrs	r4, r4, #4
 800cf70:	4650      	mov	r0, sl
 800cf72:	4659      	mov	r1, fp
 800cf74:	461e      	mov	r6, r3
 800cf76:	2c01      	cmp	r4, #1
 800cf78:	dc21      	bgt.n	800cfbe <_strtod_l+0x51e>
 800cf7a:	b10b      	cbz	r3, 800cf80 <_strtod_l+0x4e0>
 800cf7c:	4682      	mov	sl, r0
 800cf7e:	468b      	mov	fp, r1
 800cf80:	492c      	ldr	r1, [pc, #176]	@ (800d034 <_strtod_l+0x594>)
 800cf82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf8a:	4652      	mov	r2, sl
 800cf8c:	465b      	mov	r3, fp
 800cf8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf92:	f7f3 fb59 	bl	8000648 <__aeabi_dmul>
 800cf96:	4b28      	ldr	r3, [pc, #160]	@ (800d038 <_strtod_l+0x598>)
 800cf98:	460a      	mov	r2, r1
 800cf9a:	400b      	ands	r3, r1
 800cf9c:	4927      	ldr	r1, [pc, #156]	@ (800d03c <_strtod_l+0x59c>)
 800cf9e:	428b      	cmp	r3, r1
 800cfa0:	4682      	mov	sl, r0
 800cfa2:	d898      	bhi.n	800ced6 <_strtod_l+0x436>
 800cfa4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cfa8:	428b      	cmp	r3, r1
 800cfaa:	bf86      	itte	hi
 800cfac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d040 <_strtod_l+0x5a0>
 800cfb0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800cfb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cfb8:	2300      	movs	r3, #0
 800cfba:	9308      	str	r3, [sp, #32]
 800cfbc:	e07a      	b.n	800d0b4 <_strtod_l+0x614>
 800cfbe:	07e2      	lsls	r2, r4, #31
 800cfc0:	d505      	bpl.n	800cfce <_strtod_l+0x52e>
 800cfc2:	9b08      	ldr	r3, [sp, #32]
 800cfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc8:	f7f3 fb3e 	bl	8000648 <__aeabi_dmul>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	9a08      	ldr	r2, [sp, #32]
 800cfd0:	3208      	adds	r2, #8
 800cfd2:	3601      	adds	r6, #1
 800cfd4:	1064      	asrs	r4, r4, #1
 800cfd6:	9208      	str	r2, [sp, #32]
 800cfd8:	e7cd      	b.n	800cf76 <_strtod_l+0x4d6>
 800cfda:	d0ed      	beq.n	800cfb8 <_strtod_l+0x518>
 800cfdc:	4264      	negs	r4, r4
 800cfde:	f014 020f 	ands.w	r2, r4, #15
 800cfe2:	d00a      	beq.n	800cffa <_strtod_l+0x55a>
 800cfe4:	4b12      	ldr	r3, [pc, #72]	@ (800d030 <_strtod_l+0x590>)
 800cfe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfea:	4650      	mov	r0, sl
 800cfec:	4659      	mov	r1, fp
 800cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff2:	f7f3 fc53 	bl	800089c <__aeabi_ddiv>
 800cff6:	4682      	mov	sl, r0
 800cff8:	468b      	mov	fp, r1
 800cffa:	1124      	asrs	r4, r4, #4
 800cffc:	d0dc      	beq.n	800cfb8 <_strtod_l+0x518>
 800cffe:	2c1f      	cmp	r4, #31
 800d000:	dd20      	ble.n	800d044 <_strtod_l+0x5a4>
 800d002:	2400      	movs	r4, #0
 800d004:	46a0      	mov	r8, r4
 800d006:	940a      	str	r4, [sp, #40]	@ 0x28
 800d008:	46a1      	mov	r9, r4
 800d00a:	9a05      	ldr	r2, [sp, #20]
 800d00c:	2322      	movs	r3, #34	@ 0x22
 800d00e:	f04f 0a00 	mov.w	sl, #0
 800d012:	f04f 0b00 	mov.w	fp, #0
 800d016:	6013      	str	r3, [r2, #0]
 800d018:	e768      	b.n	800ceec <_strtod_l+0x44c>
 800d01a:	bf00      	nop
 800d01c:	0800e9c5 	.word	0x0800e9c5
 800d020:	0800ebdc 	.word	0x0800ebdc
 800d024:	0800e9bd 	.word	0x0800e9bd
 800d028:	0800e9f4 	.word	0x0800e9f4
 800d02c:	0800ed85 	.word	0x0800ed85
 800d030:	0800eb10 	.word	0x0800eb10
 800d034:	0800eae8 	.word	0x0800eae8
 800d038:	7ff00000 	.word	0x7ff00000
 800d03c:	7ca00000 	.word	0x7ca00000
 800d040:	7fefffff 	.word	0x7fefffff
 800d044:	f014 0310 	ands.w	r3, r4, #16
 800d048:	bf18      	it	ne
 800d04a:	236a      	movne	r3, #106	@ 0x6a
 800d04c:	4ea9      	ldr	r6, [pc, #676]	@ (800d2f4 <_strtod_l+0x854>)
 800d04e:	9308      	str	r3, [sp, #32]
 800d050:	4650      	mov	r0, sl
 800d052:	4659      	mov	r1, fp
 800d054:	2300      	movs	r3, #0
 800d056:	07e2      	lsls	r2, r4, #31
 800d058:	d504      	bpl.n	800d064 <_strtod_l+0x5c4>
 800d05a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d05e:	f7f3 faf3 	bl	8000648 <__aeabi_dmul>
 800d062:	2301      	movs	r3, #1
 800d064:	1064      	asrs	r4, r4, #1
 800d066:	f106 0608 	add.w	r6, r6, #8
 800d06a:	d1f4      	bne.n	800d056 <_strtod_l+0x5b6>
 800d06c:	b10b      	cbz	r3, 800d072 <_strtod_l+0x5d2>
 800d06e:	4682      	mov	sl, r0
 800d070:	468b      	mov	fp, r1
 800d072:	9b08      	ldr	r3, [sp, #32]
 800d074:	b1b3      	cbz	r3, 800d0a4 <_strtod_l+0x604>
 800d076:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d07a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d07e:	2b00      	cmp	r3, #0
 800d080:	4659      	mov	r1, fp
 800d082:	dd0f      	ble.n	800d0a4 <_strtod_l+0x604>
 800d084:	2b1f      	cmp	r3, #31
 800d086:	dd55      	ble.n	800d134 <_strtod_l+0x694>
 800d088:	2b34      	cmp	r3, #52	@ 0x34
 800d08a:	bfde      	ittt	le
 800d08c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800d090:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d094:	4093      	lslle	r3, r2
 800d096:	f04f 0a00 	mov.w	sl, #0
 800d09a:	bfcc      	ite	gt
 800d09c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d0a0:	ea03 0b01 	andle.w	fp, r3, r1
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	4650      	mov	r0, sl
 800d0aa:	4659      	mov	r1, fp
 800d0ac:	f7f3 fd34 	bl	8000b18 <__aeabi_dcmpeq>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d1a6      	bne.n	800d002 <_strtod_l+0x562>
 800d0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d0ba:	9805      	ldr	r0, [sp, #20]
 800d0bc:	462b      	mov	r3, r5
 800d0be:	463a      	mov	r2, r7
 800d0c0:	f7ff f8c6 	bl	800c250 <__s2b>
 800d0c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	f43f af05 	beq.w	800ced6 <_strtod_l+0x436>
 800d0cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0ce:	2a00      	cmp	r2, #0
 800d0d0:	eba9 0308 	sub.w	r3, r9, r8
 800d0d4:	bfa8      	it	ge
 800d0d6:	2300      	movge	r3, #0
 800d0d8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d0da:	2400      	movs	r4, #0
 800d0dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d0e0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d0e2:	46a0      	mov	r8, r4
 800d0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0e6:	9805      	ldr	r0, [sp, #20]
 800d0e8:	6859      	ldr	r1, [r3, #4]
 800d0ea:	f7ff f809 	bl	800c100 <_Balloc>
 800d0ee:	4681      	mov	r9, r0
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	f43f aef4 	beq.w	800cede <_strtod_l+0x43e>
 800d0f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0f8:	691a      	ldr	r2, [r3, #16]
 800d0fa:	3202      	adds	r2, #2
 800d0fc:	f103 010c 	add.w	r1, r3, #12
 800d100:	0092      	lsls	r2, r2, #2
 800d102:	300c      	adds	r0, #12
 800d104:	f7fe f899 	bl	800b23a <memcpy>
 800d108:	ec4b ab10 	vmov	d0, sl, fp
 800d10c:	9805      	ldr	r0, [sp, #20]
 800d10e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d110:	a91b      	add	r1, sp, #108	@ 0x6c
 800d112:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d116:	f7ff fbd7 	bl	800c8c8 <__d2b>
 800d11a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d11c:	2800      	cmp	r0, #0
 800d11e:	f43f aede 	beq.w	800cede <_strtod_l+0x43e>
 800d122:	9805      	ldr	r0, [sp, #20]
 800d124:	2101      	movs	r1, #1
 800d126:	f7ff f929 	bl	800c37c <__i2b>
 800d12a:	4680      	mov	r8, r0
 800d12c:	b948      	cbnz	r0, 800d142 <_strtod_l+0x6a2>
 800d12e:	f04f 0800 	mov.w	r8, #0
 800d132:	e6d4      	b.n	800cede <_strtod_l+0x43e>
 800d134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d138:	fa02 f303 	lsl.w	r3, r2, r3
 800d13c:	ea03 0a0a 	and.w	sl, r3, sl
 800d140:	e7b0      	b.n	800d0a4 <_strtod_l+0x604>
 800d142:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d144:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d146:	2d00      	cmp	r5, #0
 800d148:	bfab      	itete	ge
 800d14a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d14c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d14e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d150:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d152:	bfac      	ite	ge
 800d154:	18ef      	addge	r7, r5, r3
 800d156:	1b5e      	sublt	r6, r3, r5
 800d158:	9b08      	ldr	r3, [sp, #32]
 800d15a:	1aed      	subs	r5, r5, r3
 800d15c:	4415      	add	r5, r2
 800d15e:	4b66      	ldr	r3, [pc, #408]	@ (800d2f8 <_strtod_l+0x858>)
 800d160:	3d01      	subs	r5, #1
 800d162:	429d      	cmp	r5, r3
 800d164:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d168:	da50      	bge.n	800d20c <_strtod_l+0x76c>
 800d16a:	1b5b      	subs	r3, r3, r5
 800d16c:	2b1f      	cmp	r3, #31
 800d16e:	eba2 0203 	sub.w	r2, r2, r3
 800d172:	f04f 0101 	mov.w	r1, #1
 800d176:	dc3d      	bgt.n	800d1f4 <_strtod_l+0x754>
 800d178:	fa01 f303 	lsl.w	r3, r1, r3
 800d17c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d17e:	2300      	movs	r3, #0
 800d180:	9310      	str	r3, [sp, #64]	@ 0x40
 800d182:	18bd      	adds	r5, r7, r2
 800d184:	9b08      	ldr	r3, [sp, #32]
 800d186:	42af      	cmp	r7, r5
 800d188:	4416      	add	r6, r2
 800d18a:	441e      	add	r6, r3
 800d18c:	463b      	mov	r3, r7
 800d18e:	bfa8      	it	ge
 800d190:	462b      	movge	r3, r5
 800d192:	42b3      	cmp	r3, r6
 800d194:	bfa8      	it	ge
 800d196:	4633      	movge	r3, r6
 800d198:	2b00      	cmp	r3, #0
 800d19a:	bfc2      	ittt	gt
 800d19c:	1aed      	subgt	r5, r5, r3
 800d19e:	1af6      	subgt	r6, r6, r3
 800d1a0:	1aff      	subgt	r7, r7, r3
 800d1a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	dd16      	ble.n	800d1d6 <_strtod_l+0x736>
 800d1a8:	4641      	mov	r1, r8
 800d1aa:	9805      	ldr	r0, [sp, #20]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	f7ff f9a5 	bl	800c4fc <__pow5mult>
 800d1b2:	4680      	mov	r8, r0
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d0ba      	beq.n	800d12e <_strtod_l+0x68e>
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d1bc:	9805      	ldr	r0, [sp, #20]
 800d1be:	f7ff f8f3 	bl	800c3a8 <__multiply>
 800d1c2:	900e      	str	r0, [sp, #56]	@ 0x38
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	f43f ae8a 	beq.w	800cede <_strtod_l+0x43e>
 800d1ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1cc:	9805      	ldr	r0, [sp, #20]
 800d1ce:	f7fe ffd7 	bl	800c180 <_Bfree>
 800d1d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1d6:	2d00      	cmp	r5, #0
 800d1d8:	dc1d      	bgt.n	800d216 <_strtod_l+0x776>
 800d1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	dd23      	ble.n	800d228 <_strtod_l+0x788>
 800d1e0:	4649      	mov	r1, r9
 800d1e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d1e4:	9805      	ldr	r0, [sp, #20]
 800d1e6:	f7ff f989 	bl	800c4fc <__pow5mult>
 800d1ea:	4681      	mov	r9, r0
 800d1ec:	b9e0      	cbnz	r0, 800d228 <_strtod_l+0x788>
 800d1ee:	f04f 0900 	mov.w	r9, #0
 800d1f2:	e674      	b.n	800cede <_strtod_l+0x43e>
 800d1f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d1f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d1fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d200:	35e2      	adds	r5, #226	@ 0xe2
 800d202:	fa01 f305 	lsl.w	r3, r1, r5
 800d206:	9310      	str	r3, [sp, #64]	@ 0x40
 800d208:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d20a:	e7ba      	b.n	800d182 <_strtod_l+0x6e2>
 800d20c:	2300      	movs	r3, #0
 800d20e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d210:	2301      	movs	r3, #1
 800d212:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d214:	e7b5      	b.n	800d182 <_strtod_l+0x6e2>
 800d216:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d218:	9805      	ldr	r0, [sp, #20]
 800d21a:	462a      	mov	r2, r5
 800d21c:	f7ff f9c8 	bl	800c5b0 <__lshift>
 800d220:	901a      	str	r0, [sp, #104]	@ 0x68
 800d222:	2800      	cmp	r0, #0
 800d224:	d1d9      	bne.n	800d1da <_strtod_l+0x73a>
 800d226:	e65a      	b.n	800cede <_strtod_l+0x43e>
 800d228:	2e00      	cmp	r6, #0
 800d22a:	dd07      	ble.n	800d23c <_strtod_l+0x79c>
 800d22c:	4649      	mov	r1, r9
 800d22e:	9805      	ldr	r0, [sp, #20]
 800d230:	4632      	mov	r2, r6
 800d232:	f7ff f9bd 	bl	800c5b0 <__lshift>
 800d236:	4681      	mov	r9, r0
 800d238:	2800      	cmp	r0, #0
 800d23a:	d0d8      	beq.n	800d1ee <_strtod_l+0x74e>
 800d23c:	2f00      	cmp	r7, #0
 800d23e:	dd08      	ble.n	800d252 <_strtod_l+0x7b2>
 800d240:	4641      	mov	r1, r8
 800d242:	9805      	ldr	r0, [sp, #20]
 800d244:	463a      	mov	r2, r7
 800d246:	f7ff f9b3 	bl	800c5b0 <__lshift>
 800d24a:	4680      	mov	r8, r0
 800d24c:	2800      	cmp	r0, #0
 800d24e:	f43f ae46 	beq.w	800cede <_strtod_l+0x43e>
 800d252:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d254:	9805      	ldr	r0, [sp, #20]
 800d256:	464a      	mov	r2, r9
 800d258:	f7ff fa32 	bl	800c6c0 <__mdiff>
 800d25c:	4604      	mov	r4, r0
 800d25e:	2800      	cmp	r0, #0
 800d260:	f43f ae3d 	beq.w	800cede <_strtod_l+0x43e>
 800d264:	68c3      	ldr	r3, [r0, #12]
 800d266:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d268:	2300      	movs	r3, #0
 800d26a:	60c3      	str	r3, [r0, #12]
 800d26c:	4641      	mov	r1, r8
 800d26e:	f7ff fa0b 	bl	800c688 <__mcmp>
 800d272:	2800      	cmp	r0, #0
 800d274:	da46      	bge.n	800d304 <_strtod_l+0x864>
 800d276:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d278:	ea53 030a 	orrs.w	r3, r3, sl
 800d27c:	d16c      	bne.n	800d358 <_strtod_l+0x8b8>
 800d27e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d282:	2b00      	cmp	r3, #0
 800d284:	d168      	bne.n	800d358 <_strtod_l+0x8b8>
 800d286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d28a:	0d1b      	lsrs	r3, r3, #20
 800d28c:	051b      	lsls	r3, r3, #20
 800d28e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d292:	d961      	bls.n	800d358 <_strtod_l+0x8b8>
 800d294:	6963      	ldr	r3, [r4, #20]
 800d296:	b913      	cbnz	r3, 800d29e <_strtod_l+0x7fe>
 800d298:	6923      	ldr	r3, [r4, #16]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	dd5c      	ble.n	800d358 <_strtod_l+0x8b8>
 800d29e:	4621      	mov	r1, r4
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	9805      	ldr	r0, [sp, #20]
 800d2a4:	f7ff f984 	bl	800c5b0 <__lshift>
 800d2a8:	4641      	mov	r1, r8
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	f7ff f9ec 	bl	800c688 <__mcmp>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	dd51      	ble.n	800d358 <_strtod_l+0x8b8>
 800d2b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2b8:	9a08      	ldr	r2, [sp, #32]
 800d2ba:	0d1b      	lsrs	r3, r3, #20
 800d2bc:	051b      	lsls	r3, r3, #20
 800d2be:	2a00      	cmp	r2, #0
 800d2c0:	d06b      	beq.n	800d39a <_strtod_l+0x8fa>
 800d2c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d2c6:	d868      	bhi.n	800d39a <_strtod_l+0x8fa>
 800d2c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d2cc:	f67f ae9d 	bls.w	800d00a <_strtod_l+0x56a>
 800d2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d2fc <_strtod_l+0x85c>)
 800d2d2:	4650      	mov	r0, sl
 800d2d4:	4659      	mov	r1, fp
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f7f3 f9b6 	bl	8000648 <__aeabi_dmul>
 800d2dc:	4b08      	ldr	r3, [pc, #32]	@ (800d300 <_strtod_l+0x860>)
 800d2de:	400b      	ands	r3, r1
 800d2e0:	4682      	mov	sl, r0
 800d2e2:	468b      	mov	fp, r1
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f47f ae05 	bne.w	800cef4 <_strtod_l+0x454>
 800d2ea:	9a05      	ldr	r2, [sp, #20]
 800d2ec:	2322      	movs	r3, #34	@ 0x22
 800d2ee:	6013      	str	r3, [r2, #0]
 800d2f0:	e600      	b.n	800cef4 <_strtod_l+0x454>
 800d2f2:	bf00      	nop
 800d2f4:	0800ec08 	.word	0x0800ec08
 800d2f8:	fffffc02 	.word	0xfffffc02
 800d2fc:	39500000 	.word	0x39500000
 800d300:	7ff00000 	.word	0x7ff00000
 800d304:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d308:	d165      	bne.n	800d3d6 <_strtod_l+0x936>
 800d30a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d30c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d310:	b35a      	cbz	r2, 800d36a <_strtod_l+0x8ca>
 800d312:	4a9f      	ldr	r2, [pc, #636]	@ (800d590 <_strtod_l+0xaf0>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d12b      	bne.n	800d370 <_strtod_l+0x8d0>
 800d318:	9b08      	ldr	r3, [sp, #32]
 800d31a:	4651      	mov	r1, sl
 800d31c:	b303      	cbz	r3, 800d360 <_strtod_l+0x8c0>
 800d31e:	4b9d      	ldr	r3, [pc, #628]	@ (800d594 <_strtod_l+0xaf4>)
 800d320:	465a      	mov	r2, fp
 800d322:	4013      	ands	r3, r2
 800d324:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d32c:	d81b      	bhi.n	800d366 <_strtod_l+0x8c6>
 800d32e:	0d1b      	lsrs	r3, r3, #20
 800d330:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d334:	fa02 f303 	lsl.w	r3, r2, r3
 800d338:	4299      	cmp	r1, r3
 800d33a:	d119      	bne.n	800d370 <_strtod_l+0x8d0>
 800d33c:	4b96      	ldr	r3, [pc, #600]	@ (800d598 <_strtod_l+0xaf8>)
 800d33e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d340:	429a      	cmp	r2, r3
 800d342:	d102      	bne.n	800d34a <_strtod_l+0x8aa>
 800d344:	3101      	adds	r1, #1
 800d346:	f43f adca 	beq.w	800cede <_strtod_l+0x43e>
 800d34a:	4b92      	ldr	r3, [pc, #584]	@ (800d594 <_strtod_l+0xaf4>)
 800d34c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d34e:	401a      	ands	r2, r3
 800d350:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d354:	f04f 0a00 	mov.w	sl, #0
 800d358:	9b08      	ldr	r3, [sp, #32]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1b8      	bne.n	800d2d0 <_strtod_l+0x830>
 800d35e:	e5c9      	b.n	800cef4 <_strtod_l+0x454>
 800d360:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d364:	e7e8      	b.n	800d338 <_strtod_l+0x898>
 800d366:	4613      	mov	r3, r2
 800d368:	e7e6      	b.n	800d338 <_strtod_l+0x898>
 800d36a:	ea53 030a 	orrs.w	r3, r3, sl
 800d36e:	d0a1      	beq.n	800d2b4 <_strtod_l+0x814>
 800d370:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d372:	b1db      	cbz	r3, 800d3ac <_strtod_l+0x90c>
 800d374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d376:	4213      	tst	r3, r2
 800d378:	d0ee      	beq.n	800d358 <_strtod_l+0x8b8>
 800d37a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d37c:	9a08      	ldr	r2, [sp, #32]
 800d37e:	4650      	mov	r0, sl
 800d380:	4659      	mov	r1, fp
 800d382:	b1bb      	cbz	r3, 800d3b4 <_strtod_l+0x914>
 800d384:	f7ff fb6e 	bl	800ca64 <sulp>
 800d388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d38c:	ec53 2b10 	vmov	r2, r3, d0
 800d390:	f7f2 ffa4 	bl	80002dc <__adddf3>
 800d394:	4682      	mov	sl, r0
 800d396:	468b      	mov	fp, r1
 800d398:	e7de      	b.n	800d358 <_strtod_l+0x8b8>
 800d39a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d39e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d3a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d3a6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d3aa:	e7d5      	b.n	800d358 <_strtod_l+0x8b8>
 800d3ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3ae:	ea13 0f0a 	tst.w	r3, sl
 800d3b2:	e7e1      	b.n	800d378 <_strtod_l+0x8d8>
 800d3b4:	f7ff fb56 	bl	800ca64 <sulp>
 800d3b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3bc:	ec53 2b10 	vmov	r2, r3, d0
 800d3c0:	f7f2 ff8a 	bl	80002d8 <__aeabi_dsub>
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	4682      	mov	sl, r0
 800d3ca:	468b      	mov	fp, r1
 800d3cc:	f7f3 fba4 	bl	8000b18 <__aeabi_dcmpeq>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d0c1      	beq.n	800d358 <_strtod_l+0x8b8>
 800d3d4:	e619      	b.n	800d00a <_strtod_l+0x56a>
 800d3d6:	4641      	mov	r1, r8
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f7ff facd 	bl	800c978 <__ratio>
 800d3de:	ec57 6b10 	vmov	r6, r7, d0
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	4639      	mov	r1, r7
 800d3ec:	f7f3 fba8 	bl	8000b40 <__aeabi_dcmple>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d06f      	beq.n	800d4d4 <_strtod_l+0xa34>
 800d3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d17a      	bne.n	800d4f0 <_strtod_l+0xa50>
 800d3fa:	f1ba 0f00 	cmp.w	sl, #0
 800d3fe:	d158      	bne.n	800d4b2 <_strtod_l+0xa12>
 800d400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d406:	2b00      	cmp	r3, #0
 800d408:	d15a      	bne.n	800d4c0 <_strtod_l+0xa20>
 800d40a:	4b64      	ldr	r3, [pc, #400]	@ (800d59c <_strtod_l+0xafc>)
 800d40c:	2200      	movs	r2, #0
 800d40e:	4630      	mov	r0, r6
 800d410:	4639      	mov	r1, r7
 800d412:	f7f3 fb8b 	bl	8000b2c <__aeabi_dcmplt>
 800d416:	2800      	cmp	r0, #0
 800d418:	d159      	bne.n	800d4ce <_strtod_l+0xa2e>
 800d41a:	4630      	mov	r0, r6
 800d41c:	4639      	mov	r1, r7
 800d41e:	4b60      	ldr	r3, [pc, #384]	@ (800d5a0 <_strtod_l+0xb00>)
 800d420:	2200      	movs	r2, #0
 800d422:	f7f3 f911 	bl	8000648 <__aeabi_dmul>
 800d426:	4606      	mov	r6, r0
 800d428:	460f      	mov	r7, r1
 800d42a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d42e:	9606      	str	r6, [sp, #24]
 800d430:	9307      	str	r3, [sp, #28]
 800d432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d436:	4d57      	ldr	r5, [pc, #348]	@ (800d594 <_strtod_l+0xaf4>)
 800d438:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d43c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d43e:	401d      	ands	r5, r3
 800d440:	4b58      	ldr	r3, [pc, #352]	@ (800d5a4 <_strtod_l+0xb04>)
 800d442:	429d      	cmp	r5, r3
 800d444:	f040 80b2 	bne.w	800d5ac <_strtod_l+0xb0c>
 800d448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d44a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d44e:	ec4b ab10 	vmov	d0, sl, fp
 800d452:	f7ff f9c9 	bl	800c7e8 <__ulp>
 800d456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d45a:	ec51 0b10 	vmov	r0, r1, d0
 800d45e:	f7f3 f8f3 	bl	8000648 <__aeabi_dmul>
 800d462:	4652      	mov	r2, sl
 800d464:	465b      	mov	r3, fp
 800d466:	f7f2 ff39 	bl	80002dc <__adddf3>
 800d46a:	460b      	mov	r3, r1
 800d46c:	4949      	ldr	r1, [pc, #292]	@ (800d594 <_strtod_l+0xaf4>)
 800d46e:	4a4e      	ldr	r2, [pc, #312]	@ (800d5a8 <_strtod_l+0xb08>)
 800d470:	4019      	ands	r1, r3
 800d472:	4291      	cmp	r1, r2
 800d474:	4682      	mov	sl, r0
 800d476:	d942      	bls.n	800d4fe <_strtod_l+0xa5e>
 800d478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d47a:	4b47      	ldr	r3, [pc, #284]	@ (800d598 <_strtod_l+0xaf8>)
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d103      	bne.n	800d488 <_strtod_l+0x9e8>
 800d480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d482:	3301      	adds	r3, #1
 800d484:	f43f ad2b 	beq.w	800cede <_strtod_l+0x43e>
 800d488:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d598 <_strtod_l+0xaf8>
 800d48c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d490:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d492:	9805      	ldr	r0, [sp, #20]
 800d494:	f7fe fe74 	bl	800c180 <_Bfree>
 800d498:	9805      	ldr	r0, [sp, #20]
 800d49a:	4649      	mov	r1, r9
 800d49c:	f7fe fe70 	bl	800c180 <_Bfree>
 800d4a0:	9805      	ldr	r0, [sp, #20]
 800d4a2:	4641      	mov	r1, r8
 800d4a4:	f7fe fe6c 	bl	800c180 <_Bfree>
 800d4a8:	9805      	ldr	r0, [sp, #20]
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	f7fe fe68 	bl	800c180 <_Bfree>
 800d4b0:	e618      	b.n	800d0e4 <_strtod_l+0x644>
 800d4b2:	f1ba 0f01 	cmp.w	sl, #1
 800d4b6:	d103      	bne.n	800d4c0 <_strtod_l+0xa20>
 800d4b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	f43f ada5 	beq.w	800d00a <_strtod_l+0x56a>
 800d4c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d570 <_strtod_l+0xad0>
 800d4c4:	4f35      	ldr	r7, [pc, #212]	@ (800d59c <_strtod_l+0xafc>)
 800d4c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4ca:	2600      	movs	r6, #0
 800d4cc:	e7b1      	b.n	800d432 <_strtod_l+0x992>
 800d4ce:	4f34      	ldr	r7, [pc, #208]	@ (800d5a0 <_strtod_l+0xb00>)
 800d4d0:	2600      	movs	r6, #0
 800d4d2:	e7aa      	b.n	800d42a <_strtod_l+0x98a>
 800d4d4:	4b32      	ldr	r3, [pc, #200]	@ (800d5a0 <_strtod_l+0xb00>)
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	4639      	mov	r1, r7
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f7f3 f8b4 	bl	8000648 <__aeabi_dmul>
 800d4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	460f      	mov	r7, r1
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d09f      	beq.n	800d42a <_strtod_l+0x98a>
 800d4ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d4ee:	e7a0      	b.n	800d432 <_strtod_l+0x992>
 800d4f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d578 <_strtod_l+0xad8>
 800d4f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4f8:	ec57 6b17 	vmov	r6, r7, d7
 800d4fc:	e799      	b.n	800d432 <_strtod_l+0x992>
 800d4fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d502:	9b08      	ldr	r3, [sp, #32]
 800d504:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1c1      	bne.n	800d490 <_strtod_l+0x9f0>
 800d50c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d510:	0d1b      	lsrs	r3, r3, #20
 800d512:	051b      	lsls	r3, r3, #20
 800d514:	429d      	cmp	r5, r3
 800d516:	d1bb      	bne.n	800d490 <_strtod_l+0x9f0>
 800d518:	4630      	mov	r0, r6
 800d51a:	4639      	mov	r1, r7
 800d51c:	f7f3 fbf4 	bl	8000d08 <__aeabi_d2lz>
 800d520:	f7f3 f864 	bl	80005ec <__aeabi_l2d>
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	4630      	mov	r0, r6
 800d52a:	4639      	mov	r1, r7
 800d52c:	f7f2 fed4 	bl	80002d8 <__aeabi_dsub>
 800d530:	460b      	mov	r3, r1
 800d532:	4602      	mov	r2, r0
 800d534:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d538:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d53e:	ea46 060a 	orr.w	r6, r6, sl
 800d542:	431e      	orrs	r6, r3
 800d544:	d06f      	beq.n	800d626 <_strtod_l+0xb86>
 800d546:	a30e      	add	r3, pc, #56	@ (adr r3, 800d580 <_strtod_l+0xae0>)
 800d548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54c:	f7f3 faee 	bl	8000b2c <__aeabi_dcmplt>
 800d550:	2800      	cmp	r0, #0
 800d552:	f47f accf 	bne.w	800cef4 <_strtod_l+0x454>
 800d556:	a30c      	add	r3, pc, #48	@ (adr r3, 800d588 <_strtod_l+0xae8>)
 800d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d560:	f7f3 fb02 	bl	8000b68 <__aeabi_dcmpgt>
 800d564:	2800      	cmp	r0, #0
 800d566:	d093      	beq.n	800d490 <_strtod_l+0x9f0>
 800d568:	e4c4      	b.n	800cef4 <_strtod_l+0x454>
 800d56a:	bf00      	nop
 800d56c:	f3af 8000 	nop.w
 800d570:	00000000 	.word	0x00000000
 800d574:	bff00000 	.word	0xbff00000
 800d578:	00000000 	.word	0x00000000
 800d57c:	3ff00000 	.word	0x3ff00000
 800d580:	94a03595 	.word	0x94a03595
 800d584:	3fdfffff 	.word	0x3fdfffff
 800d588:	35afe535 	.word	0x35afe535
 800d58c:	3fe00000 	.word	0x3fe00000
 800d590:	000fffff 	.word	0x000fffff
 800d594:	7ff00000 	.word	0x7ff00000
 800d598:	7fefffff 	.word	0x7fefffff
 800d59c:	3ff00000 	.word	0x3ff00000
 800d5a0:	3fe00000 	.word	0x3fe00000
 800d5a4:	7fe00000 	.word	0x7fe00000
 800d5a8:	7c9fffff 	.word	0x7c9fffff
 800d5ac:	9b08      	ldr	r3, [sp, #32]
 800d5ae:	b323      	cbz	r3, 800d5fa <_strtod_l+0xb5a>
 800d5b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d5b4:	d821      	bhi.n	800d5fa <_strtod_l+0xb5a>
 800d5b6:	a328      	add	r3, pc, #160	@ (adr r3, 800d658 <_strtod_l+0xbb8>)
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	4630      	mov	r0, r6
 800d5be:	4639      	mov	r1, r7
 800d5c0:	f7f3 fabe 	bl	8000b40 <__aeabi_dcmple>
 800d5c4:	b1a0      	cbz	r0, 800d5f0 <_strtod_l+0xb50>
 800d5c6:	4639      	mov	r1, r7
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	f7f3 fb15 	bl	8000bf8 <__aeabi_d2uiz>
 800d5ce:	2801      	cmp	r0, #1
 800d5d0:	bf38      	it	cc
 800d5d2:	2001      	movcc	r0, #1
 800d5d4:	f7f2 ffbe 	bl	8000554 <__aeabi_ui2d>
 800d5d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5da:	4606      	mov	r6, r0
 800d5dc:	460f      	mov	r7, r1
 800d5de:	b9fb      	cbnz	r3, 800d620 <_strtod_l+0xb80>
 800d5e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5e4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d5e6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d5e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d5ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d5f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d5f6:	1b5b      	subs	r3, r3, r5
 800d5f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d5fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d5fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d602:	f7ff f8f1 	bl	800c7e8 <__ulp>
 800d606:	4650      	mov	r0, sl
 800d608:	ec53 2b10 	vmov	r2, r3, d0
 800d60c:	4659      	mov	r1, fp
 800d60e:	f7f3 f81b 	bl	8000648 <__aeabi_dmul>
 800d612:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d616:	f7f2 fe61 	bl	80002dc <__adddf3>
 800d61a:	4682      	mov	sl, r0
 800d61c:	468b      	mov	fp, r1
 800d61e:	e770      	b.n	800d502 <_strtod_l+0xa62>
 800d620:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d624:	e7e0      	b.n	800d5e8 <_strtod_l+0xb48>
 800d626:	a30e      	add	r3, pc, #56	@ (adr r3, 800d660 <_strtod_l+0xbc0>)
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	f7f3 fa7e 	bl	8000b2c <__aeabi_dcmplt>
 800d630:	e798      	b.n	800d564 <_strtod_l+0xac4>
 800d632:	2300      	movs	r3, #0
 800d634:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d636:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d63a:	6013      	str	r3, [r2, #0]
 800d63c:	f7ff ba6d 	b.w	800cb1a <_strtod_l+0x7a>
 800d640:	2a65      	cmp	r2, #101	@ 0x65
 800d642:	f43f ab66 	beq.w	800cd12 <_strtod_l+0x272>
 800d646:	2a45      	cmp	r2, #69	@ 0x45
 800d648:	f43f ab63 	beq.w	800cd12 <_strtod_l+0x272>
 800d64c:	2301      	movs	r3, #1
 800d64e:	f7ff bb9e 	b.w	800cd8e <_strtod_l+0x2ee>
 800d652:	bf00      	nop
 800d654:	f3af 8000 	nop.w
 800d658:	ffc00000 	.word	0xffc00000
 800d65c:	41dfffff 	.word	0x41dfffff
 800d660:	94a03595 	.word	0x94a03595
 800d664:	3fcfffff 	.word	0x3fcfffff

0800d668 <_strtod_r>:
 800d668:	4b01      	ldr	r3, [pc, #4]	@ (800d670 <_strtod_r+0x8>)
 800d66a:	f7ff ba19 	b.w	800caa0 <_strtod_l>
 800d66e:	bf00      	nop
 800d670:	2000006c 	.word	0x2000006c

0800d674 <_strtol_l.constprop.0>:
 800d674:	2b24      	cmp	r3, #36	@ 0x24
 800d676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d67a:	4686      	mov	lr, r0
 800d67c:	4690      	mov	r8, r2
 800d67e:	d801      	bhi.n	800d684 <_strtol_l.constprop.0+0x10>
 800d680:	2b01      	cmp	r3, #1
 800d682:	d106      	bne.n	800d692 <_strtol_l.constprop.0+0x1e>
 800d684:	f7fd fdac 	bl	800b1e0 <__errno>
 800d688:	2316      	movs	r3, #22
 800d68a:	6003      	str	r3, [r0, #0]
 800d68c:	2000      	movs	r0, #0
 800d68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d692:	4834      	ldr	r0, [pc, #208]	@ (800d764 <_strtol_l.constprop.0+0xf0>)
 800d694:	460d      	mov	r5, r1
 800d696:	462a      	mov	r2, r5
 800d698:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d69c:	5d06      	ldrb	r6, [r0, r4]
 800d69e:	f016 0608 	ands.w	r6, r6, #8
 800d6a2:	d1f8      	bne.n	800d696 <_strtol_l.constprop.0+0x22>
 800d6a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d6a6:	d12d      	bne.n	800d704 <_strtol_l.constprop.0+0x90>
 800d6a8:	782c      	ldrb	r4, [r5, #0]
 800d6aa:	2601      	movs	r6, #1
 800d6ac:	1c95      	adds	r5, r2, #2
 800d6ae:	f033 0210 	bics.w	r2, r3, #16
 800d6b2:	d109      	bne.n	800d6c8 <_strtol_l.constprop.0+0x54>
 800d6b4:	2c30      	cmp	r4, #48	@ 0x30
 800d6b6:	d12a      	bne.n	800d70e <_strtol_l.constprop.0+0x9a>
 800d6b8:	782a      	ldrb	r2, [r5, #0]
 800d6ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d6be:	2a58      	cmp	r2, #88	@ 0x58
 800d6c0:	d125      	bne.n	800d70e <_strtol_l.constprop.0+0x9a>
 800d6c2:	786c      	ldrb	r4, [r5, #1]
 800d6c4:	2310      	movs	r3, #16
 800d6c6:	3502      	adds	r5, #2
 800d6c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d6cc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	fbbc f9f3 	udiv	r9, ip, r3
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d6dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d6e0:	2f09      	cmp	r7, #9
 800d6e2:	d81b      	bhi.n	800d71c <_strtol_l.constprop.0+0xa8>
 800d6e4:	463c      	mov	r4, r7
 800d6e6:	42a3      	cmp	r3, r4
 800d6e8:	dd27      	ble.n	800d73a <_strtol_l.constprop.0+0xc6>
 800d6ea:	1c57      	adds	r7, r2, #1
 800d6ec:	d007      	beq.n	800d6fe <_strtol_l.constprop.0+0x8a>
 800d6ee:	4581      	cmp	r9, r0
 800d6f0:	d320      	bcc.n	800d734 <_strtol_l.constprop.0+0xc0>
 800d6f2:	d101      	bne.n	800d6f8 <_strtol_l.constprop.0+0x84>
 800d6f4:	45a2      	cmp	sl, r4
 800d6f6:	db1d      	blt.n	800d734 <_strtol_l.constprop.0+0xc0>
 800d6f8:	fb00 4003 	mla	r0, r0, r3, r4
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d702:	e7eb      	b.n	800d6dc <_strtol_l.constprop.0+0x68>
 800d704:	2c2b      	cmp	r4, #43	@ 0x2b
 800d706:	bf04      	itt	eq
 800d708:	782c      	ldrbeq	r4, [r5, #0]
 800d70a:	1c95      	addeq	r5, r2, #2
 800d70c:	e7cf      	b.n	800d6ae <_strtol_l.constprop.0+0x3a>
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1da      	bne.n	800d6c8 <_strtol_l.constprop.0+0x54>
 800d712:	2c30      	cmp	r4, #48	@ 0x30
 800d714:	bf0c      	ite	eq
 800d716:	2308      	moveq	r3, #8
 800d718:	230a      	movne	r3, #10
 800d71a:	e7d5      	b.n	800d6c8 <_strtol_l.constprop.0+0x54>
 800d71c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d720:	2f19      	cmp	r7, #25
 800d722:	d801      	bhi.n	800d728 <_strtol_l.constprop.0+0xb4>
 800d724:	3c37      	subs	r4, #55	@ 0x37
 800d726:	e7de      	b.n	800d6e6 <_strtol_l.constprop.0+0x72>
 800d728:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d72c:	2f19      	cmp	r7, #25
 800d72e:	d804      	bhi.n	800d73a <_strtol_l.constprop.0+0xc6>
 800d730:	3c57      	subs	r4, #87	@ 0x57
 800d732:	e7d8      	b.n	800d6e6 <_strtol_l.constprop.0+0x72>
 800d734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d738:	e7e1      	b.n	800d6fe <_strtol_l.constprop.0+0x8a>
 800d73a:	1c53      	adds	r3, r2, #1
 800d73c:	d108      	bne.n	800d750 <_strtol_l.constprop.0+0xdc>
 800d73e:	2322      	movs	r3, #34	@ 0x22
 800d740:	f8ce 3000 	str.w	r3, [lr]
 800d744:	4660      	mov	r0, ip
 800d746:	f1b8 0f00 	cmp.w	r8, #0
 800d74a:	d0a0      	beq.n	800d68e <_strtol_l.constprop.0+0x1a>
 800d74c:	1e69      	subs	r1, r5, #1
 800d74e:	e006      	b.n	800d75e <_strtol_l.constprop.0+0xea>
 800d750:	b106      	cbz	r6, 800d754 <_strtol_l.constprop.0+0xe0>
 800d752:	4240      	negs	r0, r0
 800d754:	f1b8 0f00 	cmp.w	r8, #0
 800d758:	d099      	beq.n	800d68e <_strtol_l.constprop.0+0x1a>
 800d75a:	2a00      	cmp	r2, #0
 800d75c:	d1f6      	bne.n	800d74c <_strtol_l.constprop.0+0xd8>
 800d75e:	f8c8 1000 	str.w	r1, [r8]
 800d762:	e794      	b.n	800d68e <_strtol_l.constprop.0+0x1a>
 800d764:	0800ec31 	.word	0x0800ec31

0800d768 <_strtol_r>:
 800d768:	f7ff bf84 	b.w	800d674 <_strtol_l.constprop.0>

0800d76c <__ssputs_r>:
 800d76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d770:	688e      	ldr	r6, [r1, #8]
 800d772:	461f      	mov	r7, r3
 800d774:	42be      	cmp	r6, r7
 800d776:	680b      	ldr	r3, [r1, #0]
 800d778:	4682      	mov	sl, r0
 800d77a:	460c      	mov	r4, r1
 800d77c:	4690      	mov	r8, r2
 800d77e:	d82d      	bhi.n	800d7dc <__ssputs_r+0x70>
 800d780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d788:	d026      	beq.n	800d7d8 <__ssputs_r+0x6c>
 800d78a:	6965      	ldr	r5, [r4, #20]
 800d78c:	6909      	ldr	r1, [r1, #16]
 800d78e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d792:	eba3 0901 	sub.w	r9, r3, r1
 800d796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d79a:	1c7b      	adds	r3, r7, #1
 800d79c:	444b      	add	r3, r9
 800d79e:	106d      	asrs	r5, r5, #1
 800d7a0:	429d      	cmp	r5, r3
 800d7a2:	bf38      	it	cc
 800d7a4:	461d      	movcc	r5, r3
 800d7a6:	0553      	lsls	r3, r2, #21
 800d7a8:	d527      	bpl.n	800d7fa <__ssputs_r+0x8e>
 800d7aa:	4629      	mov	r1, r5
 800d7ac:	f7fe fc1c 	bl	800bfe8 <_malloc_r>
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	b360      	cbz	r0, 800d80e <__ssputs_r+0xa2>
 800d7b4:	6921      	ldr	r1, [r4, #16]
 800d7b6:	464a      	mov	r2, r9
 800d7b8:	f7fd fd3f 	bl	800b23a <memcpy>
 800d7bc:	89a3      	ldrh	r3, [r4, #12]
 800d7be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7c6:	81a3      	strh	r3, [r4, #12]
 800d7c8:	6126      	str	r6, [r4, #16]
 800d7ca:	6165      	str	r5, [r4, #20]
 800d7cc:	444e      	add	r6, r9
 800d7ce:	eba5 0509 	sub.w	r5, r5, r9
 800d7d2:	6026      	str	r6, [r4, #0]
 800d7d4:	60a5      	str	r5, [r4, #8]
 800d7d6:	463e      	mov	r6, r7
 800d7d8:	42be      	cmp	r6, r7
 800d7da:	d900      	bls.n	800d7de <__ssputs_r+0x72>
 800d7dc:	463e      	mov	r6, r7
 800d7de:	6820      	ldr	r0, [r4, #0]
 800d7e0:	4632      	mov	r2, r6
 800d7e2:	4641      	mov	r1, r8
 800d7e4:	f000 fb6a 	bl	800debc <memmove>
 800d7e8:	68a3      	ldr	r3, [r4, #8]
 800d7ea:	1b9b      	subs	r3, r3, r6
 800d7ec:	60a3      	str	r3, [r4, #8]
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	4433      	add	r3, r6
 800d7f2:	6023      	str	r3, [r4, #0]
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fa:	462a      	mov	r2, r5
 800d7fc:	f000 ff41 	bl	800e682 <_realloc_r>
 800d800:	4606      	mov	r6, r0
 800d802:	2800      	cmp	r0, #0
 800d804:	d1e0      	bne.n	800d7c8 <__ssputs_r+0x5c>
 800d806:	6921      	ldr	r1, [r4, #16]
 800d808:	4650      	mov	r0, sl
 800d80a:	f7fe fb79 	bl	800bf00 <_free_r>
 800d80e:	230c      	movs	r3, #12
 800d810:	f8ca 3000 	str.w	r3, [sl]
 800d814:	89a3      	ldrh	r3, [r4, #12]
 800d816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d81a:	81a3      	strh	r3, [r4, #12]
 800d81c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d820:	e7e9      	b.n	800d7f6 <__ssputs_r+0x8a>
	...

0800d824 <_svfiprintf_r>:
 800d824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d828:	4698      	mov	r8, r3
 800d82a:	898b      	ldrh	r3, [r1, #12]
 800d82c:	061b      	lsls	r3, r3, #24
 800d82e:	b09d      	sub	sp, #116	@ 0x74
 800d830:	4607      	mov	r7, r0
 800d832:	460d      	mov	r5, r1
 800d834:	4614      	mov	r4, r2
 800d836:	d510      	bpl.n	800d85a <_svfiprintf_r+0x36>
 800d838:	690b      	ldr	r3, [r1, #16]
 800d83a:	b973      	cbnz	r3, 800d85a <_svfiprintf_r+0x36>
 800d83c:	2140      	movs	r1, #64	@ 0x40
 800d83e:	f7fe fbd3 	bl	800bfe8 <_malloc_r>
 800d842:	6028      	str	r0, [r5, #0]
 800d844:	6128      	str	r0, [r5, #16]
 800d846:	b930      	cbnz	r0, 800d856 <_svfiprintf_r+0x32>
 800d848:	230c      	movs	r3, #12
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d850:	b01d      	add	sp, #116	@ 0x74
 800d852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d856:	2340      	movs	r3, #64	@ 0x40
 800d858:	616b      	str	r3, [r5, #20]
 800d85a:	2300      	movs	r3, #0
 800d85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d85e:	2320      	movs	r3, #32
 800d860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d864:	f8cd 800c 	str.w	r8, [sp, #12]
 800d868:	2330      	movs	r3, #48	@ 0x30
 800d86a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da08 <_svfiprintf_r+0x1e4>
 800d86e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d872:	f04f 0901 	mov.w	r9, #1
 800d876:	4623      	mov	r3, r4
 800d878:	469a      	mov	sl, r3
 800d87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d87e:	b10a      	cbz	r2, 800d884 <_svfiprintf_r+0x60>
 800d880:	2a25      	cmp	r2, #37	@ 0x25
 800d882:	d1f9      	bne.n	800d878 <_svfiprintf_r+0x54>
 800d884:	ebba 0b04 	subs.w	fp, sl, r4
 800d888:	d00b      	beq.n	800d8a2 <_svfiprintf_r+0x7e>
 800d88a:	465b      	mov	r3, fp
 800d88c:	4622      	mov	r2, r4
 800d88e:	4629      	mov	r1, r5
 800d890:	4638      	mov	r0, r7
 800d892:	f7ff ff6b 	bl	800d76c <__ssputs_r>
 800d896:	3001      	adds	r0, #1
 800d898:	f000 80a7 	beq.w	800d9ea <_svfiprintf_r+0x1c6>
 800d89c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d89e:	445a      	add	r2, fp
 800d8a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f000 809f 	beq.w	800d9ea <_svfiprintf_r+0x1c6>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d8b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8b6:	f10a 0a01 	add.w	sl, sl, #1
 800d8ba:	9304      	str	r3, [sp, #16]
 800d8bc:	9307      	str	r3, [sp, #28]
 800d8be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8c4:	4654      	mov	r4, sl
 800d8c6:	2205      	movs	r2, #5
 800d8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8cc:	484e      	ldr	r0, [pc, #312]	@ (800da08 <_svfiprintf_r+0x1e4>)
 800d8ce:	f7f2 fca7 	bl	8000220 <memchr>
 800d8d2:	9a04      	ldr	r2, [sp, #16]
 800d8d4:	b9d8      	cbnz	r0, 800d90e <_svfiprintf_r+0xea>
 800d8d6:	06d0      	lsls	r0, r2, #27
 800d8d8:	bf44      	itt	mi
 800d8da:	2320      	movmi	r3, #32
 800d8dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8e0:	0711      	lsls	r1, r2, #28
 800d8e2:	bf44      	itt	mi
 800d8e4:	232b      	movmi	r3, #43	@ 0x2b
 800d8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d8ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8f0:	d015      	beq.n	800d91e <_svfiprintf_r+0xfa>
 800d8f2:	9a07      	ldr	r2, [sp, #28]
 800d8f4:	4654      	mov	r4, sl
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	f04f 0c0a 	mov.w	ip, #10
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d902:	3b30      	subs	r3, #48	@ 0x30
 800d904:	2b09      	cmp	r3, #9
 800d906:	d94b      	bls.n	800d9a0 <_svfiprintf_r+0x17c>
 800d908:	b1b0      	cbz	r0, 800d938 <_svfiprintf_r+0x114>
 800d90a:	9207      	str	r2, [sp, #28]
 800d90c:	e014      	b.n	800d938 <_svfiprintf_r+0x114>
 800d90e:	eba0 0308 	sub.w	r3, r0, r8
 800d912:	fa09 f303 	lsl.w	r3, r9, r3
 800d916:	4313      	orrs	r3, r2
 800d918:	9304      	str	r3, [sp, #16]
 800d91a:	46a2      	mov	sl, r4
 800d91c:	e7d2      	b.n	800d8c4 <_svfiprintf_r+0xa0>
 800d91e:	9b03      	ldr	r3, [sp, #12]
 800d920:	1d19      	adds	r1, r3, #4
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	9103      	str	r1, [sp, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	bfbb      	ittet	lt
 800d92a:	425b      	neglt	r3, r3
 800d92c:	f042 0202 	orrlt.w	r2, r2, #2
 800d930:	9307      	strge	r3, [sp, #28]
 800d932:	9307      	strlt	r3, [sp, #28]
 800d934:	bfb8      	it	lt
 800d936:	9204      	strlt	r2, [sp, #16]
 800d938:	7823      	ldrb	r3, [r4, #0]
 800d93a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d93c:	d10a      	bne.n	800d954 <_svfiprintf_r+0x130>
 800d93e:	7863      	ldrb	r3, [r4, #1]
 800d940:	2b2a      	cmp	r3, #42	@ 0x2a
 800d942:	d132      	bne.n	800d9aa <_svfiprintf_r+0x186>
 800d944:	9b03      	ldr	r3, [sp, #12]
 800d946:	1d1a      	adds	r2, r3, #4
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	9203      	str	r2, [sp, #12]
 800d94c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d950:	3402      	adds	r4, #2
 800d952:	9305      	str	r3, [sp, #20]
 800d954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da18 <_svfiprintf_r+0x1f4>
 800d958:	7821      	ldrb	r1, [r4, #0]
 800d95a:	2203      	movs	r2, #3
 800d95c:	4650      	mov	r0, sl
 800d95e:	f7f2 fc5f 	bl	8000220 <memchr>
 800d962:	b138      	cbz	r0, 800d974 <_svfiprintf_r+0x150>
 800d964:	9b04      	ldr	r3, [sp, #16]
 800d966:	eba0 000a 	sub.w	r0, r0, sl
 800d96a:	2240      	movs	r2, #64	@ 0x40
 800d96c:	4082      	lsls	r2, r0
 800d96e:	4313      	orrs	r3, r2
 800d970:	3401      	adds	r4, #1
 800d972:	9304      	str	r3, [sp, #16]
 800d974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d978:	4824      	ldr	r0, [pc, #144]	@ (800da0c <_svfiprintf_r+0x1e8>)
 800d97a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d97e:	2206      	movs	r2, #6
 800d980:	f7f2 fc4e 	bl	8000220 <memchr>
 800d984:	2800      	cmp	r0, #0
 800d986:	d036      	beq.n	800d9f6 <_svfiprintf_r+0x1d2>
 800d988:	4b21      	ldr	r3, [pc, #132]	@ (800da10 <_svfiprintf_r+0x1ec>)
 800d98a:	bb1b      	cbnz	r3, 800d9d4 <_svfiprintf_r+0x1b0>
 800d98c:	9b03      	ldr	r3, [sp, #12]
 800d98e:	3307      	adds	r3, #7
 800d990:	f023 0307 	bic.w	r3, r3, #7
 800d994:	3308      	adds	r3, #8
 800d996:	9303      	str	r3, [sp, #12]
 800d998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d99a:	4433      	add	r3, r6
 800d99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d99e:	e76a      	b.n	800d876 <_svfiprintf_r+0x52>
 800d9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9a4:	460c      	mov	r4, r1
 800d9a6:	2001      	movs	r0, #1
 800d9a8:	e7a8      	b.n	800d8fc <_svfiprintf_r+0xd8>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	3401      	adds	r4, #1
 800d9ae:	9305      	str	r3, [sp, #20]
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	f04f 0c0a 	mov.w	ip, #10
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9bc:	3a30      	subs	r2, #48	@ 0x30
 800d9be:	2a09      	cmp	r2, #9
 800d9c0:	d903      	bls.n	800d9ca <_svfiprintf_r+0x1a6>
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d0c6      	beq.n	800d954 <_svfiprintf_r+0x130>
 800d9c6:	9105      	str	r1, [sp, #20]
 800d9c8:	e7c4      	b.n	800d954 <_svfiprintf_r+0x130>
 800d9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e7f0      	b.n	800d9b6 <_svfiprintf_r+0x192>
 800d9d4:	ab03      	add	r3, sp, #12
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	462a      	mov	r2, r5
 800d9da:	4b0e      	ldr	r3, [pc, #56]	@ (800da14 <_svfiprintf_r+0x1f0>)
 800d9dc:	a904      	add	r1, sp, #16
 800d9de:	4638      	mov	r0, r7
 800d9e0:	f7fc fb60 	bl	800a0a4 <_printf_float>
 800d9e4:	1c42      	adds	r2, r0, #1
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	d1d6      	bne.n	800d998 <_svfiprintf_r+0x174>
 800d9ea:	89ab      	ldrh	r3, [r5, #12]
 800d9ec:	065b      	lsls	r3, r3, #25
 800d9ee:	f53f af2d 	bmi.w	800d84c <_svfiprintf_r+0x28>
 800d9f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9f4:	e72c      	b.n	800d850 <_svfiprintf_r+0x2c>
 800d9f6:	ab03      	add	r3, sp, #12
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	462a      	mov	r2, r5
 800d9fc:	4b05      	ldr	r3, [pc, #20]	@ (800da14 <_svfiprintf_r+0x1f0>)
 800d9fe:	a904      	add	r1, sp, #16
 800da00:	4638      	mov	r0, r7
 800da02:	f7fc fde7 	bl	800a5d4 <_printf_i>
 800da06:	e7ed      	b.n	800d9e4 <_svfiprintf_r+0x1c0>
 800da08:	0800ed31 	.word	0x0800ed31
 800da0c:	0800ed3b 	.word	0x0800ed3b
 800da10:	0800a0a5 	.word	0x0800a0a5
 800da14:	0800d76d 	.word	0x0800d76d
 800da18:	0800ed37 	.word	0x0800ed37

0800da1c <__sfputc_r>:
 800da1c:	6893      	ldr	r3, [r2, #8]
 800da1e:	3b01      	subs	r3, #1
 800da20:	2b00      	cmp	r3, #0
 800da22:	b410      	push	{r4}
 800da24:	6093      	str	r3, [r2, #8]
 800da26:	da08      	bge.n	800da3a <__sfputc_r+0x1e>
 800da28:	6994      	ldr	r4, [r2, #24]
 800da2a:	42a3      	cmp	r3, r4
 800da2c:	db01      	blt.n	800da32 <__sfputc_r+0x16>
 800da2e:	290a      	cmp	r1, #10
 800da30:	d103      	bne.n	800da3a <__sfputc_r+0x1e>
 800da32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da36:	f7fd ba96 	b.w	800af66 <__swbuf_r>
 800da3a:	6813      	ldr	r3, [r2, #0]
 800da3c:	1c58      	adds	r0, r3, #1
 800da3e:	6010      	str	r0, [r2, #0]
 800da40:	7019      	strb	r1, [r3, #0]
 800da42:	4608      	mov	r0, r1
 800da44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <__sfputs_r>:
 800da4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4c:	4606      	mov	r6, r0
 800da4e:	460f      	mov	r7, r1
 800da50:	4614      	mov	r4, r2
 800da52:	18d5      	adds	r5, r2, r3
 800da54:	42ac      	cmp	r4, r5
 800da56:	d101      	bne.n	800da5c <__sfputs_r+0x12>
 800da58:	2000      	movs	r0, #0
 800da5a:	e007      	b.n	800da6c <__sfputs_r+0x22>
 800da5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da60:	463a      	mov	r2, r7
 800da62:	4630      	mov	r0, r6
 800da64:	f7ff ffda 	bl	800da1c <__sfputc_r>
 800da68:	1c43      	adds	r3, r0, #1
 800da6a:	d1f3      	bne.n	800da54 <__sfputs_r+0xa>
 800da6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da70 <_vfiprintf_r>:
 800da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da74:	460d      	mov	r5, r1
 800da76:	b09d      	sub	sp, #116	@ 0x74
 800da78:	4614      	mov	r4, r2
 800da7a:	4698      	mov	r8, r3
 800da7c:	4606      	mov	r6, r0
 800da7e:	b118      	cbz	r0, 800da88 <_vfiprintf_r+0x18>
 800da80:	6a03      	ldr	r3, [r0, #32]
 800da82:	b90b      	cbnz	r3, 800da88 <_vfiprintf_r+0x18>
 800da84:	f7fd f966 	bl	800ad54 <__sinit>
 800da88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da8a:	07d9      	lsls	r1, r3, #31
 800da8c:	d405      	bmi.n	800da9a <_vfiprintf_r+0x2a>
 800da8e:	89ab      	ldrh	r3, [r5, #12]
 800da90:	059a      	lsls	r2, r3, #22
 800da92:	d402      	bmi.n	800da9a <_vfiprintf_r+0x2a>
 800da94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da96:	f7fd fbce 	bl	800b236 <__retarget_lock_acquire_recursive>
 800da9a:	89ab      	ldrh	r3, [r5, #12]
 800da9c:	071b      	lsls	r3, r3, #28
 800da9e:	d501      	bpl.n	800daa4 <_vfiprintf_r+0x34>
 800daa0:	692b      	ldr	r3, [r5, #16]
 800daa2:	b99b      	cbnz	r3, 800dacc <_vfiprintf_r+0x5c>
 800daa4:	4629      	mov	r1, r5
 800daa6:	4630      	mov	r0, r6
 800daa8:	f7fd fa9c 	bl	800afe4 <__swsetup_r>
 800daac:	b170      	cbz	r0, 800dacc <_vfiprintf_r+0x5c>
 800daae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dab0:	07dc      	lsls	r4, r3, #31
 800dab2:	d504      	bpl.n	800dabe <_vfiprintf_r+0x4e>
 800dab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dab8:	b01d      	add	sp, #116	@ 0x74
 800daba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dabe:	89ab      	ldrh	r3, [r5, #12]
 800dac0:	0598      	lsls	r0, r3, #22
 800dac2:	d4f7      	bmi.n	800dab4 <_vfiprintf_r+0x44>
 800dac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dac6:	f7fd fbb7 	bl	800b238 <__retarget_lock_release_recursive>
 800daca:	e7f3      	b.n	800dab4 <_vfiprintf_r+0x44>
 800dacc:	2300      	movs	r3, #0
 800dace:	9309      	str	r3, [sp, #36]	@ 0x24
 800dad0:	2320      	movs	r3, #32
 800dad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dad6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dada:	2330      	movs	r3, #48	@ 0x30
 800dadc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc8c <_vfiprintf_r+0x21c>
 800dae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dae4:	f04f 0901 	mov.w	r9, #1
 800dae8:	4623      	mov	r3, r4
 800daea:	469a      	mov	sl, r3
 800daec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daf0:	b10a      	cbz	r2, 800daf6 <_vfiprintf_r+0x86>
 800daf2:	2a25      	cmp	r2, #37	@ 0x25
 800daf4:	d1f9      	bne.n	800daea <_vfiprintf_r+0x7a>
 800daf6:	ebba 0b04 	subs.w	fp, sl, r4
 800dafa:	d00b      	beq.n	800db14 <_vfiprintf_r+0xa4>
 800dafc:	465b      	mov	r3, fp
 800dafe:	4622      	mov	r2, r4
 800db00:	4629      	mov	r1, r5
 800db02:	4630      	mov	r0, r6
 800db04:	f7ff ffa1 	bl	800da4a <__sfputs_r>
 800db08:	3001      	adds	r0, #1
 800db0a:	f000 80a7 	beq.w	800dc5c <_vfiprintf_r+0x1ec>
 800db0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db10:	445a      	add	r2, fp
 800db12:	9209      	str	r2, [sp, #36]	@ 0x24
 800db14:	f89a 3000 	ldrb.w	r3, [sl]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f000 809f 	beq.w	800dc5c <_vfiprintf_r+0x1ec>
 800db1e:	2300      	movs	r3, #0
 800db20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db28:	f10a 0a01 	add.w	sl, sl, #1
 800db2c:	9304      	str	r3, [sp, #16]
 800db2e:	9307      	str	r3, [sp, #28]
 800db30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db34:	931a      	str	r3, [sp, #104]	@ 0x68
 800db36:	4654      	mov	r4, sl
 800db38:	2205      	movs	r2, #5
 800db3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db3e:	4853      	ldr	r0, [pc, #332]	@ (800dc8c <_vfiprintf_r+0x21c>)
 800db40:	f7f2 fb6e 	bl	8000220 <memchr>
 800db44:	9a04      	ldr	r2, [sp, #16]
 800db46:	b9d8      	cbnz	r0, 800db80 <_vfiprintf_r+0x110>
 800db48:	06d1      	lsls	r1, r2, #27
 800db4a:	bf44      	itt	mi
 800db4c:	2320      	movmi	r3, #32
 800db4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db52:	0713      	lsls	r3, r2, #28
 800db54:	bf44      	itt	mi
 800db56:	232b      	movmi	r3, #43	@ 0x2b
 800db58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db5c:	f89a 3000 	ldrb.w	r3, [sl]
 800db60:	2b2a      	cmp	r3, #42	@ 0x2a
 800db62:	d015      	beq.n	800db90 <_vfiprintf_r+0x120>
 800db64:	9a07      	ldr	r2, [sp, #28]
 800db66:	4654      	mov	r4, sl
 800db68:	2000      	movs	r0, #0
 800db6a:	f04f 0c0a 	mov.w	ip, #10
 800db6e:	4621      	mov	r1, r4
 800db70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db74:	3b30      	subs	r3, #48	@ 0x30
 800db76:	2b09      	cmp	r3, #9
 800db78:	d94b      	bls.n	800dc12 <_vfiprintf_r+0x1a2>
 800db7a:	b1b0      	cbz	r0, 800dbaa <_vfiprintf_r+0x13a>
 800db7c:	9207      	str	r2, [sp, #28]
 800db7e:	e014      	b.n	800dbaa <_vfiprintf_r+0x13a>
 800db80:	eba0 0308 	sub.w	r3, r0, r8
 800db84:	fa09 f303 	lsl.w	r3, r9, r3
 800db88:	4313      	orrs	r3, r2
 800db8a:	9304      	str	r3, [sp, #16]
 800db8c:	46a2      	mov	sl, r4
 800db8e:	e7d2      	b.n	800db36 <_vfiprintf_r+0xc6>
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	1d19      	adds	r1, r3, #4
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	9103      	str	r1, [sp, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	bfbb      	ittet	lt
 800db9c:	425b      	neglt	r3, r3
 800db9e:	f042 0202 	orrlt.w	r2, r2, #2
 800dba2:	9307      	strge	r3, [sp, #28]
 800dba4:	9307      	strlt	r3, [sp, #28]
 800dba6:	bfb8      	it	lt
 800dba8:	9204      	strlt	r2, [sp, #16]
 800dbaa:	7823      	ldrb	r3, [r4, #0]
 800dbac:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbae:	d10a      	bne.n	800dbc6 <_vfiprintf_r+0x156>
 800dbb0:	7863      	ldrb	r3, [r4, #1]
 800dbb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbb4:	d132      	bne.n	800dc1c <_vfiprintf_r+0x1ac>
 800dbb6:	9b03      	ldr	r3, [sp, #12]
 800dbb8:	1d1a      	adds	r2, r3, #4
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	9203      	str	r2, [sp, #12]
 800dbbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbc2:	3402      	adds	r4, #2
 800dbc4:	9305      	str	r3, [sp, #20]
 800dbc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc9c <_vfiprintf_r+0x22c>
 800dbca:	7821      	ldrb	r1, [r4, #0]
 800dbcc:	2203      	movs	r2, #3
 800dbce:	4650      	mov	r0, sl
 800dbd0:	f7f2 fb26 	bl	8000220 <memchr>
 800dbd4:	b138      	cbz	r0, 800dbe6 <_vfiprintf_r+0x176>
 800dbd6:	9b04      	ldr	r3, [sp, #16]
 800dbd8:	eba0 000a 	sub.w	r0, r0, sl
 800dbdc:	2240      	movs	r2, #64	@ 0x40
 800dbde:	4082      	lsls	r2, r0
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	3401      	adds	r4, #1
 800dbe4:	9304      	str	r3, [sp, #16]
 800dbe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbea:	4829      	ldr	r0, [pc, #164]	@ (800dc90 <_vfiprintf_r+0x220>)
 800dbec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbf0:	2206      	movs	r2, #6
 800dbf2:	f7f2 fb15 	bl	8000220 <memchr>
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d03f      	beq.n	800dc7a <_vfiprintf_r+0x20a>
 800dbfa:	4b26      	ldr	r3, [pc, #152]	@ (800dc94 <_vfiprintf_r+0x224>)
 800dbfc:	bb1b      	cbnz	r3, 800dc46 <_vfiprintf_r+0x1d6>
 800dbfe:	9b03      	ldr	r3, [sp, #12]
 800dc00:	3307      	adds	r3, #7
 800dc02:	f023 0307 	bic.w	r3, r3, #7
 800dc06:	3308      	adds	r3, #8
 800dc08:	9303      	str	r3, [sp, #12]
 800dc0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc0c:	443b      	add	r3, r7
 800dc0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc10:	e76a      	b.n	800dae8 <_vfiprintf_r+0x78>
 800dc12:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc16:	460c      	mov	r4, r1
 800dc18:	2001      	movs	r0, #1
 800dc1a:	e7a8      	b.n	800db6e <_vfiprintf_r+0xfe>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	3401      	adds	r4, #1
 800dc20:	9305      	str	r3, [sp, #20]
 800dc22:	4619      	mov	r1, r3
 800dc24:	f04f 0c0a 	mov.w	ip, #10
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc2e:	3a30      	subs	r2, #48	@ 0x30
 800dc30:	2a09      	cmp	r2, #9
 800dc32:	d903      	bls.n	800dc3c <_vfiprintf_r+0x1cc>
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d0c6      	beq.n	800dbc6 <_vfiprintf_r+0x156>
 800dc38:	9105      	str	r1, [sp, #20]
 800dc3a:	e7c4      	b.n	800dbc6 <_vfiprintf_r+0x156>
 800dc3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc40:	4604      	mov	r4, r0
 800dc42:	2301      	movs	r3, #1
 800dc44:	e7f0      	b.n	800dc28 <_vfiprintf_r+0x1b8>
 800dc46:	ab03      	add	r3, sp, #12
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	462a      	mov	r2, r5
 800dc4c:	4b12      	ldr	r3, [pc, #72]	@ (800dc98 <_vfiprintf_r+0x228>)
 800dc4e:	a904      	add	r1, sp, #16
 800dc50:	4630      	mov	r0, r6
 800dc52:	f7fc fa27 	bl	800a0a4 <_printf_float>
 800dc56:	4607      	mov	r7, r0
 800dc58:	1c78      	adds	r0, r7, #1
 800dc5a:	d1d6      	bne.n	800dc0a <_vfiprintf_r+0x19a>
 800dc5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc5e:	07d9      	lsls	r1, r3, #31
 800dc60:	d405      	bmi.n	800dc6e <_vfiprintf_r+0x1fe>
 800dc62:	89ab      	ldrh	r3, [r5, #12]
 800dc64:	059a      	lsls	r2, r3, #22
 800dc66:	d402      	bmi.n	800dc6e <_vfiprintf_r+0x1fe>
 800dc68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc6a:	f7fd fae5 	bl	800b238 <__retarget_lock_release_recursive>
 800dc6e:	89ab      	ldrh	r3, [r5, #12]
 800dc70:	065b      	lsls	r3, r3, #25
 800dc72:	f53f af1f 	bmi.w	800dab4 <_vfiprintf_r+0x44>
 800dc76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc78:	e71e      	b.n	800dab8 <_vfiprintf_r+0x48>
 800dc7a:	ab03      	add	r3, sp, #12
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	462a      	mov	r2, r5
 800dc80:	4b05      	ldr	r3, [pc, #20]	@ (800dc98 <_vfiprintf_r+0x228>)
 800dc82:	a904      	add	r1, sp, #16
 800dc84:	4630      	mov	r0, r6
 800dc86:	f7fc fca5 	bl	800a5d4 <_printf_i>
 800dc8a:	e7e4      	b.n	800dc56 <_vfiprintf_r+0x1e6>
 800dc8c:	0800ed31 	.word	0x0800ed31
 800dc90:	0800ed3b 	.word	0x0800ed3b
 800dc94:	0800a0a5 	.word	0x0800a0a5
 800dc98:	0800da4b 	.word	0x0800da4b
 800dc9c:	0800ed37 	.word	0x0800ed37

0800dca0 <__sflush_r>:
 800dca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca8:	0716      	lsls	r6, r2, #28
 800dcaa:	4605      	mov	r5, r0
 800dcac:	460c      	mov	r4, r1
 800dcae:	d454      	bmi.n	800dd5a <__sflush_r+0xba>
 800dcb0:	684b      	ldr	r3, [r1, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	dc02      	bgt.n	800dcbc <__sflush_r+0x1c>
 800dcb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	dd48      	ble.n	800dd4e <__sflush_r+0xae>
 800dcbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dcbe:	2e00      	cmp	r6, #0
 800dcc0:	d045      	beq.n	800dd4e <__sflush_r+0xae>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dcc8:	682f      	ldr	r7, [r5, #0]
 800dcca:	6a21      	ldr	r1, [r4, #32]
 800dccc:	602b      	str	r3, [r5, #0]
 800dcce:	d030      	beq.n	800dd32 <__sflush_r+0x92>
 800dcd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dcd2:	89a3      	ldrh	r3, [r4, #12]
 800dcd4:	0759      	lsls	r1, r3, #29
 800dcd6:	d505      	bpl.n	800dce4 <__sflush_r+0x44>
 800dcd8:	6863      	ldr	r3, [r4, #4]
 800dcda:	1ad2      	subs	r2, r2, r3
 800dcdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dcde:	b10b      	cbz	r3, 800dce4 <__sflush_r+0x44>
 800dce0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dce2:	1ad2      	subs	r2, r2, r3
 800dce4:	2300      	movs	r3, #0
 800dce6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dce8:	6a21      	ldr	r1, [r4, #32]
 800dcea:	4628      	mov	r0, r5
 800dcec:	47b0      	blx	r6
 800dcee:	1c43      	adds	r3, r0, #1
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	d106      	bne.n	800dd02 <__sflush_r+0x62>
 800dcf4:	6829      	ldr	r1, [r5, #0]
 800dcf6:	291d      	cmp	r1, #29
 800dcf8:	d82b      	bhi.n	800dd52 <__sflush_r+0xb2>
 800dcfa:	4a2a      	ldr	r2, [pc, #168]	@ (800dda4 <__sflush_r+0x104>)
 800dcfc:	410a      	asrs	r2, r1
 800dcfe:	07d6      	lsls	r6, r2, #31
 800dd00:	d427      	bmi.n	800dd52 <__sflush_r+0xb2>
 800dd02:	2200      	movs	r2, #0
 800dd04:	6062      	str	r2, [r4, #4]
 800dd06:	04d9      	lsls	r1, r3, #19
 800dd08:	6922      	ldr	r2, [r4, #16]
 800dd0a:	6022      	str	r2, [r4, #0]
 800dd0c:	d504      	bpl.n	800dd18 <__sflush_r+0x78>
 800dd0e:	1c42      	adds	r2, r0, #1
 800dd10:	d101      	bne.n	800dd16 <__sflush_r+0x76>
 800dd12:	682b      	ldr	r3, [r5, #0]
 800dd14:	b903      	cbnz	r3, 800dd18 <__sflush_r+0x78>
 800dd16:	6560      	str	r0, [r4, #84]	@ 0x54
 800dd18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd1a:	602f      	str	r7, [r5, #0]
 800dd1c:	b1b9      	cbz	r1, 800dd4e <__sflush_r+0xae>
 800dd1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd22:	4299      	cmp	r1, r3
 800dd24:	d002      	beq.n	800dd2c <__sflush_r+0x8c>
 800dd26:	4628      	mov	r0, r5
 800dd28:	f7fe f8ea 	bl	800bf00 <_free_r>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd30:	e00d      	b.n	800dd4e <__sflush_r+0xae>
 800dd32:	2301      	movs	r3, #1
 800dd34:	4628      	mov	r0, r5
 800dd36:	47b0      	blx	r6
 800dd38:	4602      	mov	r2, r0
 800dd3a:	1c50      	adds	r0, r2, #1
 800dd3c:	d1c9      	bne.n	800dcd2 <__sflush_r+0x32>
 800dd3e:	682b      	ldr	r3, [r5, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d0c6      	beq.n	800dcd2 <__sflush_r+0x32>
 800dd44:	2b1d      	cmp	r3, #29
 800dd46:	d001      	beq.n	800dd4c <__sflush_r+0xac>
 800dd48:	2b16      	cmp	r3, #22
 800dd4a:	d11e      	bne.n	800dd8a <__sflush_r+0xea>
 800dd4c:	602f      	str	r7, [r5, #0]
 800dd4e:	2000      	movs	r0, #0
 800dd50:	e022      	b.n	800dd98 <__sflush_r+0xf8>
 800dd52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd56:	b21b      	sxth	r3, r3
 800dd58:	e01b      	b.n	800dd92 <__sflush_r+0xf2>
 800dd5a:	690f      	ldr	r7, [r1, #16]
 800dd5c:	2f00      	cmp	r7, #0
 800dd5e:	d0f6      	beq.n	800dd4e <__sflush_r+0xae>
 800dd60:	0793      	lsls	r3, r2, #30
 800dd62:	680e      	ldr	r6, [r1, #0]
 800dd64:	bf08      	it	eq
 800dd66:	694b      	ldreq	r3, [r1, #20]
 800dd68:	600f      	str	r7, [r1, #0]
 800dd6a:	bf18      	it	ne
 800dd6c:	2300      	movne	r3, #0
 800dd6e:	eba6 0807 	sub.w	r8, r6, r7
 800dd72:	608b      	str	r3, [r1, #8]
 800dd74:	f1b8 0f00 	cmp.w	r8, #0
 800dd78:	dde9      	ble.n	800dd4e <__sflush_r+0xae>
 800dd7a:	6a21      	ldr	r1, [r4, #32]
 800dd7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd7e:	4643      	mov	r3, r8
 800dd80:	463a      	mov	r2, r7
 800dd82:	4628      	mov	r0, r5
 800dd84:	47b0      	blx	r6
 800dd86:	2800      	cmp	r0, #0
 800dd88:	dc08      	bgt.n	800dd9c <__sflush_r+0xfc>
 800dd8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd92:	81a3      	strh	r3, [r4, #12]
 800dd94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd9c:	4407      	add	r7, r0
 800dd9e:	eba8 0800 	sub.w	r8, r8, r0
 800dda2:	e7e7      	b.n	800dd74 <__sflush_r+0xd4>
 800dda4:	dfbffffe 	.word	0xdfbffffe

0800dda8 <_fflush_r>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	690b      	ldr	r3, [r1, #16]
 800ddac:	4605      	mov	r5, r0
 800ddae:	460c      	mov	r4, r1
 800ddb0:	b913      	cbnz	r3, 800ddb8 <_fflush_r+0x10>
 800ddb2:	2500      	movs	r5, #0
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	bd38      	pop	{r3, r4, r5, pc}
 800ddb8:	b118      	cbz	r0, 800ddc2 <_fflush_r+0x1a>
 800ddba:	6a03      	ldr	r3, [r0, #32]
 800ddbc:	b90b      	cbnz	r3, 800ddc2 <_fflush_r+0x1a>
 800ddbe:	f7fc ffc9 	bl	800ad54 <__sinit>
 800ddc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d0f3      	beq.n	800ddb2 <_fflush_r+0xa>
 800ddca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ddcc:	07d0      	lsls	r0, r2, #31
 800ddce:	d404      	bmi.n	800ddda <_fflush_r+0x32>
 800ddd0:	0599      	lsls	r1, r3, #22
 800ddd2:	d402      	bmi.n	800ddda <_fflush_r+0x32>
 800ddd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddd6:	f7fd fa2e 	bl	800b236 <__retarget_lock_acquire_recursive>
 800ddda:	4628      	mov	r0, r5
 800dddc:	4621      	mov	r1, r4
 800ddde:	f7ff ff5f 	bl	800dca0 <__sflush_r>
 800dde2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dde4:	07da      	lsls	r2, r3, #31
 800dde6:	4605      	mov	r5, r0
 800dde8:	d4e4      	bmi.n	800ddb4 <_fflush_r+0xc>
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	059b      	lsls	r3, r3, #22
 800ddee:	d4e1      	bmi.n	800ddb4 <_fflush_r+0xc>
 800ddf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddf2:	f7fd fa21 	bl	800b238 <__retarget_lock_release_recursive>
 800ddf6:	e7dd      	b.n	800ddb4 <_fflush_r+0xc>

0800ddf8 <__swhatbuf_r>:
 800ddf8:	b570      	push	{r4, r5, r6, lr}
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de00:	2900      	cmp	r1, #0
 800de02:	b096      	sub	sp, #88	@ 0x58
 800de04:	4615      	mov	r5, r2
 800de06:	461e      	mov	r6, r3
 800de08:	da0d      	bge.n	800de26 <__swhatbuf_r+0x2e>
 800de0a:	89a3      	ldrh	r3, [r4, #12]
 800de0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800de10:	f04f 0100 	mov.w	r1, #0
 800de14:	bf14      	ite	ne
 800de16:	2340      	movne	r3, #64	@ 0x40
 800de18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800de1c:	2000      	movs	r0, #0
 800de1e:	6031      	str	r1, [r6, #0]
 800de20:	602b      	str	r3, [r5, #0]
 800de22:	b016      	add	sp, #88	@ 0x58
 800de24:	bd70      	pop	{r4, r5, r6, pc}
 800de26:	466a      	mov	r2, sp
 800de28:	f000 f874 	bl	800df14 <_fstat_r>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	dbec      	blt.n	800de0a <__swhatbuf_r+0x12>
 800de30:	9901      	ldr	r1, [sp, #4]
 800de32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de3a:	4259      	negs	r1, r3
 800de3c:	4159      	adcs	r1, r3
 800de3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de42:	e7eb      	b.n	800de1c <__swhatbuf_r+0x24>

0800de44 <__smakebuf_r>:
 800de44:	898b      	ldrh	r3, [r1, #12]
 800de46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de48:	079d      	lsls	r5, r3, #30
 800de4a:	4606      	mov	r6, r0
 800de4c:	460c      	mov	r4, r1
 800de4e:	d507      	bpl.n	800de60 <__smakebuf_r+0x1c>
 800de50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de54:	6023      	str	r3, [r4, #0]
 800de56:	6123      	str	r3, [r4, #16]
 800de58:	2301      	movs	r3, #1
 800de5a:	6163      	str	r3, [r4, #20]
 800de5c:	b003      	add	sp, #12
 800de5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de60:	ab01      	add	r3, sp, #4
 800de62:	466a      	mov	r2, sp
 800de64:	f7ff ffc8 	bl	800ddf8 <__swhatbuf_r>
 800de68:	9f00      	ldr	r7, [sp, #0]
 800de6a:	4605      	mov	r5, r0
 800de6c:	4639      	mov	r1, r7
 800de6e:	4630      	mov	r0, r6
 800de70:	f7fe f8ba 	bl	800bfe8 <_malloc_r>
 800de74:	b948      	cbnz	r0, 800de8a <__smakebuf_r+0x46>
 800de76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de7a:	059a      	lsls	r2, r3, #22
 800de7c:	d4ee      	bmi.n	800de5c <__smakebuf_r+0x18>
 800de7e:	f023 0303 	bic.w	r3, r3, #3
 800de82:	f043 0302 	orr.w	r3, r3, #2
 800de86:	81a3      	strh	r3, [r4, #12]
 800de88:	e7e2      	b.n	800de50 <__smakebuf_r+0xc>
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	6020      	str	r0, [r4, #0]
 800de8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de92:	81a3      	strh	r3, [r4, #12]
 800de94:	9b01      	ldr	r3, [sp, #4]
 800de96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de9a:	b15b      	cbz	r3, 800deb4 <__smakebuf_r+0x70>
 800de9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dea0:	4630      	mov	r0, r6
 800dea2:	f000 f849 	bl	800df38 <_isatty_r>
 800dea6:	b128      	cbz	r0, 800deb4 <__smakebuf_r+0x70>
 800dea8:	89a3      	ldrh	r3, [r4, #12]
 800deaa:	f023 0303 	bic.w	r3, r3, #3
 800deae:	f043 0301 	orr.w	r3, r3, #1
 800deb2:	81a3      	strh	r3, [r4, #12]
 800deb4:	89a3      	ldrh	r3, [r4, #12]
 800deb6:	431d      	orrs	r5, r3
 800deb8:	81a5      	strh	r5, [r4, #12]
 800deba:	e7cf      	b.n	800de5c <__smakebuf_r+0x18>

0800debc <memmove>:
 800debc:	4288      	cmp	r0, r1
 800debe:	b510      	push	{r4, lr}
 800dec0:	eb01 0402 	add.w	r4, r1, r2
 800dec4:	d902      	bls.n	800decc <memmove+0x10>
 800dec6:	4284      	cmp	r4, r0
 800dec8:	4623      	mov	r3, r4
 800deca:	d807      	bhi.n	800dedc <memmove+0x20>
 800decc:	1e43      	subs	r3, r0, #1
 800dece:	42a1      	cmp	r1, r4
 800ded0:	d008      	beq.n	800dee4 <memmove+0x28>
 800ded2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ded6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800deda:	e7f8      	b.n	800dece <memmove+0x12>
 800dedc:	4402      	add	r2, r0
 800dede:	4601      	mov	r1, r0
 800dee0:	428a      	cmp	r2, r1
 800dee2:	d100      	bne.n	800dee6 <memmove+0x2a>
 800dee4:	bd10      	pop	{r4, pc}
 800dee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800deea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800deee:	e7f7      	b.n	800dee0 <memmove+0x24>

0800def0 <strncmp>:
 800def0:	b510      	push	{r4, lr}
 800def2:	b16a      	cbz	r2, 800df10 <strncmp+0x20>
 800def4:	3901      	subs	r1, #1
 800def6:	1884      	adds	r4, r0, r2
 800def8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800defc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800df00:	429a      	cmp	r2, r3
 800df02:	d103      	bne.n	800df0c <strncmp+0x1c>
 800df04:	42a0      	cmp	r0, r4
 800df06:	d001      	beq.n	800df0c <strncmp+0x1c>
 800df08:	2a00      	cmp	r2, #0
 800df0a:	d1f5      	bne.n	800def8 <strncmp+0x8>
 800df0c:	1ad0      	subs	r0, r2, r3
 800df0e:	bd10      	pop	{r4, pc}
 800df10:	4610      	mov	r0, r2
 800df12:	e7fc      	b.n	800df0e <strncmp+0x1e>

0800df14 <_fstat_r>:
 800df14:	b538      	push	{r3, r4, r5, lr}
 800df16:	4d07      	ldr	r5, [pc, #28]	@ (800df34 <_fstat_r+0x20>)
 800df18:	2300      	movs	r3, #0
 800df1a:	4604      	mov	r4, r0
 800df1c:	4608      	mov	r0, r1
 800df1e:	4611      	mov	r1, r2
 800df20:	602b      	str	r3, [r5, #0]
 800df22:	f7f3 fe99 	bl	8001c58 <_fstat>
 800df26:	1c43      	adds	r3, r0, #1
 800df28:	d102      	bne.n	800df30 <_fstat_r+0x1c>
 800df2a:	682b      	ldr	r3, [r5, #0]
 800df2c:	b103      	cbz	r3, 800df30 <_fstat_r+0x1c>
 800df2e:	6023      	str	r3, [r4, #0]
 800df30:	bd38      	pop	{r3, r4, r5, pc}
 800df32:	bf00      	nop
 800df34:	20001468 	.word	0x20001468

0800df38 <_isatty_r>:
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	4d06      	ldr	r5, [pc, #24]	@ (800df54 <_isatty_r+0x1c>)
 800df3c:	2300      	movs	r3, #0
 800df3e:	4604      	mov	r4, r0
 800df40:	4608      	mov	r0, r1
 800df42:	602b      	str	r3, [r5, #0]
 800df44:	f7f3 fe98 	bl	8001c78 <_isatty>
 800df48:	1c43      	adds	r3, r0, #1
 800df4a:	d102      	bne.n	800df52 <_isatty_r+0x1a>
 800df4c:	682b      	ldr	r3, [r5, #0]
 800df4e:	b103      	cbz	r3, 800df52 <_isatty_r+0x1a>
 800df50:	6023      	str	r3, [r4, #0]
 800df52:	bd38      	pop	{r3, r4, r5, pc}
 800df54:	20001468 	.word	0x20001468

0800df58 <_sbrk_r>:
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	4d06      	ldr	r5, [pc, #24]	@ (800df74 <_sbrk_r+0x1c>)
 800df5c:	2300      	movs	r3, #0
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	602b      	str	r3, [r5, #0]
 800df64:	f7f3 fea0 	bl	8001ca8 <_sbrk>
 800df68:	1c43      	adds	r3, r0, #1
 800df6a:	d102      	bne.n	800df72 <_sbrk_r+0x1a>
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	b103      	cbz	r3, 800df72 <_sbrk_r+0x1a>
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	bd38      	pop	{r3, r4, r5, pc}
 800df74:	20001468 	.word	0x20001468

0800df78 <nan>:
 800df78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800df80 <nan+0x8>
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	00000000 	.word	0x00000000
 800df84:	7ff80000 	.word	0x7ff80000

0800df88 <__assert_func>:
 800df88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df8a:	4614      	mov	r4, r2
 800df8c:	461a      	mov	r2, r3
 800df8e:	4b09      	ldr	r3, [pc, #36]	@ (800dfb4 <__assert_func+0x2c>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4605      	mov	r5, r0
 800df94:	68d8      	ldr	r0, [r3, #12]
 800df96:	b954      	cbnz	r4, 800dfae <__assert_func+0x26>
 800df98:	4b07      	ldr	r3, [pc, #28]	@ (800dfb8 <__assert_func+0x30>)
 800df9a:	461c      	mov	r4, r3
 800df9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfa0:	9100      	str	r1, [sp, #0]
 800dfa2:	462b      	mov	r3, r5
 800dfa4:	4905      	ldr	r1, [pc, #20]	@ (800dfbc <__assert_func+0x34>)
 800dfa6:	f000 fba7 	bl	800e6f8 <fiprintf>
 800dfaa:	f000 fbb7 	bl	800e71c <abort>
 800dfae:	4b04      	ldr	r3, [pc, #16]	@ (800dfc0 <__assert_func+0x38>)
 800dfb0:	e7f4      	b.n	800df9c <__assert_func+0x14>
 800dfb2:	bf00      	nop
 800dfb4:	2000001c 	.word	0x2000001c
 800dfb8:	0800ed85 	.word	0x0800ed85
 800dfbc:	0800ed57 	.word	0x0800ed57
 800dfc0:	0800ed4a 	.word	0x0800ed4a

0800dfc4 <_calloc_r>:
 800dfc4:	b570      	push	{r4, r5, r6, lr}
 800dfc6:	fba1 5402 	umull	r5, r4, r1, r2
 800dfca:	b93c      	cbnz	r4, 800dfdc <_calloc_r+0x18>
 800dfcc:	4629      	mov	r1, r5
 800dfce:	f7fe f80b 	bl	800bfe8 <_malloc_r>
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	b928      	cbnz	r0, 800dfe2 <_calloc_r+0x1e>
 800dfd6:	2600      	movs	r6, #0
 800dfd8:	4630      	mov	r0, r6
 800dfda:	bd70      	pop	{r4, r5, r6, pc}
 800dfdc:	220c      	movs	r2, #12
 800dfde:	6002      	str	r2, [r0, #0]
 800dfe0:	e7f9      	b.n	800dfd6 <_calloc_r+0x12>
 800dfe2:	462a      	mov	r2, r5
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	f7fd f853 	bl	800b090 <memset>
 800dfea:	e7f5      	b.n	800dfd8 <_calloc_r+0x14>

0800dfec <rshift>:
 800dfec:	6903      	ldr	r3, [r0, #16]
 800dfee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dff2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dff6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dffa:	f100 0414 	add.w	r4, r0, #20
 800dffe:	dd45      	ble.n	800e08c <rshift+0xa0>
 800e000:	f011 011f 	ands.w	r1, r1, #31
 800e004:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e008:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e00c:	d10c      	bne.n	800e028 <rshift+0x3c>
 800e00e:	f100 0710 	add.w	r7, r0, #16
 800e012:	4629      	mov	r1, r5
 800e014:	42b1      	cmp	r1, r6
 800e016:	d334      	bcc.n	800e082 <rshift+0x96>
 800e018:	1a9b      	subs	r3, r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	1eea      	subs	r2, r5, #3
 800e01e:	4296      	cmp	r6, r2
 800e020:	bf38      	it	cc
 800e022:	2300      	movcc	r3, #0
 800e024:	4423      	add	r3, r4
 800e026:	e015      	b.n	800e054 <rshift+0x68>
 800e028:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e02c:	f1c1 0820 	rsb	r8, r1, #32
 800e030:	40cf      	lsrs	r7, r1
 800e032:	f105 0e04 	add.w	lr, r5, #4
 800e036:	46a1      	mov	r9, r4
 800e038:	4576      	cmp	r6, lr
 800e03a:	46f4      	mov	ip, lr
 800e03c:	d815      	bhi.n	800e06a <rshift+0x7e>
 800e03e:	1a9a      	subs	r2, r3, r2
 800e040:	0092      	lsls	r2, r2, #2
 800e042:	3a04      	subs	r2, #4
 800e044:	3501      	adds	r5, #1
 800e046:	42ae      	cmp	r6, r5
 800e048:	bf38      	it	cc
 800e04a:	2200      	movcc	r2, #0
 800e04c:	18a3      	adds	r3, r4, r2
 800e04e:	50a7      	str	r7, [r4, r2]
 800e050:	b107      	cbz	r7, 800e054 <rshift+0x68>
 800e052:	3304      	adds	r3, #4
 800e054:	1b1a      	subs	r2, r3, r4
 800e056:	42a3      	cmp	r3, r4
 800e058:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e05c:	bf08      	it	eq
 800e05e:	2300      	moveq	r3, #0
 800e060:	6102      	str	r2, [r0, #16]
 800e062:	bf08      	it	eq
 800e064:	6143      	streq	r3, [r0, #20]
 800e066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e06a:	f8dc c000 	ldr.w	ip, [ip]
 800e06e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e072:	ea4c 0707 	orr.w	r7, ip, r7
 800e076:	f849 7b04 	str.w	r7, [r9], #4
 800e07a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e07e:	40cf      	lsrs	r7, r1
 800e080:	e7da      	b.n	800e038 <rshift+0x4c>
 800e082:	f851 cb04 	ldr.w	ip, [r1], #4
 800e086:	f847 cf04 	str.w	ip, [r7, #4]!
 800e08a:	e7c3      	b.n	800e014 <rshift+0x28>
 800e08c:	4623      	mov	r3, r4
 800e08e:	e7e1      	b.n	800e054 <rshift+0x68>

0800e090 <__hexdig_fun>:
 800e090:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e094:	2b09      	cmp	r3, #9
 800e096:	d802      	bhi.n	800e09e <__hexdig_fun+0xe>
 800e098:	3820      	subs	r0, #32
 800e09a:	b2c0      	uxtb	r0, r0
 800e09c:	4770      	bx	lr
 800e09e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e0a2:	2b05      	cmp	r3, #5
 800e0a4:	d801      	bhi.n	800e0aa <__hexdig_fun+0x1a>
 800e0a6:	3847      	subs	r0, #71	@ 0x47
 800e0a8:	e7f7      	b.n	800e09a <__hexdig_fun+0xa>
 800e0aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e0ae:	2b05      	cmp	r3, #5
 800e0b0:	d801      	bhi.n	800e0b6 <__hexdig_fun+0x26>
 800e0b2:	3827      	subs	r0, #39	@ 0x27
 800e0b4:	e7f1      	b.n	800e09a <__hexdig_fun+0xa>
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	4770      	bx	lr
	...

0800e0bc <__gethex>:
 800e0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c0:	b085      	sub	sp, #20
 800e0c2:	468a      	mov	sl, r1
 800e0c4:	9302      	str	r3, [sp, #8]
 800e0c6:	680b      	ldr	r3, [r1, #0]
 800e0c8:	9001      	str	r0, [sp, #4]
 800e0ca:	4690      	mov	r8, r2
 800e0cc:	1c9c      	adds	r4, r3, #2
 800e0ce:	46a1      	mov	r9, r4
 800e0d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e0d4:	2830      	cmp	r0, #48	@ 0x30
 800e0d6:	d0fa      	beq.n	800e0ce <__gethex+0x12>
 800e0d8:	eba9 0303 	sub.w	r3, r9, r3
 800e0dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800e0e0:	f7ff ffd6 	bl	800e090 <__hexdig_fun>
 800e0e4:	4605      	mov	r5, r0
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	d168      	bne.n	800e1bc <__gethex+0x100>
 800e0ea:	49a0      	ldr	r1, [pc, #640]	@ (800e36c <__gethex+0x2b0>)
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	4648      	mov	r0, r9
 800e0f0:	f7ff fefe 	bl	800def0 <strncmp>
 800e0f4:	4607      	mov	r7, r0
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d167      	bne.n	800e1ca <__gethex+0x10e>
 800e0fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e0fe:	4626      	mov	r6, r4
 800e100:	f7ff ffc6 	bl	800e090 <__hexdig_fun>
 800e104:	2800      	cmp	r0, #0
 800e106:	d062      	beq.n	800e1ce <__gethex+0x112>
 800e108:	4623      	mov	r3, r4
 800e10a:	7818      	ldrb	r0, [r3, #0]
 800e10c:	2830      	cmp	r0, #48	@ 0x30
 800e10e:	4699      	mov	r9, r3
 800e110:	f103 0301 	add.w	r3, r3, #1
 800e114:	d0f9      	beq.n	800e10a <__gethex+0x4e>
 800e116:	f7ff ffbb 	bl	800e090 <__hexdig_fun>
 800e11a:	fab0 f580 	clz	r5, r0
 800e11e:	096d      	lsrs	r5, r5, #5
 800e120:	f04f 0b01 	mov.w	fp, #1
 800e124:	464a      	mov	r2, r9
 800e126:	4616      	mov	r6, r2
 800e128:	3201      	adds	r2, #1
 800e12a:	7830      	ldrb	r0, [r6, #0]
 800e12c:	f7ff ffb0 	bl	800e090 <__hexdig_fun>
 800e130:	2800      	cmp	r0, #0
 800e132:	d1f8      	bne.n	800e126 <__gethex+0x6a>
 800e134:	498d      	ldr	r1, [pc, #564]	@ (800e36c <__gethex+0x2b0>)
 800e136:	2201      	movs	r2, #1
 800e138:	4630      	mov	r0, r6
 800e13a:	f7ff fed9 	bl	800def0 <strncmp>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d13f      	bne.n	800e1c2 <__gethex+0x106>
 800e142:	b944      	cbnz	r4, 800e156 <__gethex+0x9a>
 800e144:	1c74      	adds	r4, r6, #1
 800e146:	4622      	mov	r2, r4
 800e148:	4616      	mov	r6, r2
 800e14a:	3201      	adds	r2, #1
 800e14c:	7830      	ldrb	r0, [r6, #0]
 800e14e:	f7ff ff9f 	bl	800e090 <__hexdig_fun>
 800e152:	2800      	cmp	r0, #0
 800e154:	d1f8      	bne.n	800e148 <__gethex+0x8c>
 800e156:	1ba4      	subs	r4, r4, r6
 800e158:	00a7      	lsls	r7, r4, #2
 800e15a:	7833      	ldrb	r3, [r6, #0]
 800e15c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e160:	2b50      	cmp	r3, #80	@ 0x50
 800e162:	d13e      	bne.n	800e1e2 <__gethex+0x126>
 800e164:	7873      	ldrb	r3, [r6, #1]
 800e166:	2b2b      	cmp	r3, #43	@ 0x2b
 800e168:	d033      	beq.n	800e1d2 <__gethex+0x116>
 800e16a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e16c:	d034      	beq.n	800e1d8 <__gethex+0x11c>
 800e16e:	1c71      	adds	r1, r6, #1
 800e170:	2400      	movs	r4, #0
 800e172:	7808      	ldrb	r0, [r1, #0]
 800e174:	f7ff ff8c 	bl	800e090 <__hexdig_fun>
 800e178:	1e43      	subs	r3, r0, #1
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	2b18      	cmp	r3, #24
 800e17e:	d830      	bhi.n	800e1e2 <__gethex+0x126>
 800e180:	f1a0 0210 	sub.w	r2, r0, #16
 800e184:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e188:	f7ff ff82 	bl	800e090 <__hexdig_fun>
 800e18c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800e190:	fa5f fc8c 	uxtb.w	ip, ip
 800e194:	f1bc 0f18 	cmp.w	ip, #24
 800e198:	f04f 030a 	mov.w	r3, #10
 800e19c:	d91e      	bls.n	800e1dc <__gethex+0x120>
 800e19e:	b104      	cbz	r4, 800e1a2 <__gethex+0xe6>
 800e1a0:	4252      	negs	r2, r2
 800e1a2:	4417      	add	r7, r2
 800e1a4:	f8ca 1000 	str.w	r1, [sl]
 800e1a8:	b1ed      	cbz	r5, 800e1e6 <__gethex+0x12a>
 800e1aa:	f1bb 0f00 	cmp.w	fp, #0
 800e1ae:	bf0c      	ite	eq
 800e1b0:	2506      	moveq	r5, #6
 800e1b2:	2500      	movne	r5, #0
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	b005      	add	sp, #20
 800e1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1bc:	2500      	movs	r5, #0
 800e1be:	462c      	mov	r4, r5
 800e1c0:	e7b0      	b.n	800e124 <__gethex+0x68>
 800e1c2:	2c00      	cmp	r4, #0
 800e1c4:	d1c7      	bne.n	800e156 <__gethex+0x9a>
 800e1c6:	4627      	mov	r7, r4
 800e1c8:	e7c7      	b.n	800e15a <__gethex+0x9e>
 800e1ca:	464e      	mov	r6, r9
 800e1cc:	462f      	mov	r7, r5
 800e1ce:	2501      	movs	r5, #1
 800e1d0:	e7c3      	b.n	800e15a <__gethex+0x9e>
 800e1d2:	2400      	movs	r4, #0
 800e1d4:	1cb1      	adds	r1, r6, #2
 800e1d6:	e7cc      	b.n	800e172 <__gethex+0xb6>
 800e1d8:	2401      	movs	r4, #1
 800e1da:	e7fb      	b.n	800e1d4 <__gethex+0x118>
 800e1dc:	fb03 0002 	mla	r0, r3, r2, r0
 800e1e0:	e7ce      	b.n	800e180 <__gethex+0xc4>
 800e1e2:	4631      	mov	r1, r6
 800e1e4:	e7de      	b.n	800e1a4 <__gethex+0xe8>
 800e1e6:	eba6 0309 	sub.w	r3, r6, r9
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	2b07      	cmp	r3, #7
 800e1f0:	dc0a      	bgt.n	800e208 <__gethex+0x14c>
 800e1f2:	9801      	ldr	r0, [sp, #4]
 800e1f4:	f7fd ff84 	bl	800c100 <_Balloc>
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	b940      	cbnz	r0, 800e20e <__gethex+0x152>
 800e1fc:	4b5c      	ldr	r3, [pc, #368]	@ (800e370 <__gethex+0x2b4>)
 800e1fe:	4602      	mov	r2, r0
 800e200:	21e4      	movs	r1, #228	@ 0xe4
 800e202:	485c      	ldr	r0, [pc, #368]	@ (800e374 <__gethex+0x2b8>)
 800e204:	f7ff fec0 	bl	800df88 <__assert_func>
 800e208:	3101      	adds	r1, #1
 800e20a:	105b      	asrs	r3, r3, #1
 800e20c:	e7ef      	b.n	800e1ee <__gethex+0x132>
 800e20e:	f100 0a14 	add.w	sl, r0, #20
 800e212:	2300      	movs	r3, #0
 800e214:	4655      	mov	r5, sl
 800e216:	469b      	mov	fp, r3
 800e218:	45b1      	cmp	r9, r6
 800e21a:	d337      	bcc.n	800e28c <__gethex+0x1d0>
 800e21c:	f845 bb04 	str.w	fp, [r5], #4
 800e220:	eba5 050a 	sub.w	r5, r5, sl
 800e224:	10ad      	asrs	r5, r5, #2
 800e226:	6125      	str	r5, [r4, #16]
 800e228:	4658      	mov	r0, fp
 800e22a:	f7fe f85b 	bl	800c2e4 <__hi0bits>
 800e22e:	016d      	lsls	r5, r5, #5
 800e230:	f8d8 6000 	ldr.w	r6, [r8]
 800e234:	1a2d      	subs	r5, r5, r0
 800e236:	42b5      	cmp	r5, r6
 800e238:	dd54      	ble.n	800e2e4 <__gethex+0x228>
 800e23a:	1bad      	subs	r5, r5, r6
 800e23c:	4629      	mov	r1, r5
 800e23e:	4620      	mov	r0, r4
 800e240:	f7fe fbef 	bl	800ca22 <__any_on>
 800e244:	4681      	mov	r9, r0
 800e246:	b178      	cbz	r0, 800e268 <__gethex+0x1ac>
 800e248:	1e6b      	subs	r3, r5, #1
 800e24a:	1159      	asrs	r1, r3, #5
 800e24c:	f003 021f 	and.w	r2, r3, #31
 800e250:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e254:	f04f 0901 	mov.w	r9, #1
 800e258:	fa09 f202 	lsl.w	r2, r9, r2
 800e25c:	420a      	tst	r2, r1
 800e25e:	d003      	beq.n	800e268 <__gethex+0x1ac>
 800e260:	454b      	cmp	r3, r9
 800e262:	dc36      	bgt.n	800e2d2 <__gethex+0x216>
 800e264:	f04f 0902 	mov.w	r9, #2
 800e268:	4629      	mov	r1, r5
 800e26a:	4620      	mov	r0, r4
 800e26c:	f7ff febe 	bl	800dfec <rshift>
 800e270:	442f      	add	r7, r5
 800e272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e276:	42bb      	cmp	r3, r7
 800e278:	da42      	bge.n	800e300 <__gethex+0x244>
 800e27a:	9801      	ldr	r0, [sp, #4]
 800e27c:	4621      	mov	r1, r4
 800e27e:	f7fd ff7f 	bl	800c180 <_Bfree>
 800e282:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e284:	2300      	movs	r3, #0
 800e286:	6013      	str	r3, [r2, #0]
 800e288:	25a3      	movs	r5, #163	@ 0xa3
 800e28a:	e793      	b.n	800e1b4 <__gethex+0xf8>
 800e28c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e290:	2a2e      	cmp	r2, #46	@ 0x2e
 800e292:	d012      	beq.n	800e2ba <__gethex+0x1fe>
 800e294:	2b20      	cmp	r3, #32
 800e296:	d104      	bne.n	800e2a2 <__gethex+0x1e6>
 800e298:	f845 bb04 	str.w	fp, [r5], #4
 800e29c:	f04f 0b00 	mov.w	fp, #0
 800e2a0:	465b      	mov	r3, fp
 800e2a2:	7830      	ldrb	r0, [r6, #0]
 800e2a4:	9303      	str	r3, [sp, #12]
 800e2a6:	f7ff fef3 	bl	800e090 <__hexdig_fun>
 800e2aa:	9b03      	ldr	r3, [sp, #12]
 800e2ac:	f000 000f 	and.w	r0, r0, #15
 800e2b0:	4098      	lsls	r0, r3
 800e2b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800e2b6:	3304      	adds	r3, #4
 800e2b8:	e7ae      	b.n	800e218 <__gethex+0x15c>
 800e2ba:	45b1      	cmp	r9, r6
 800e2bc:	d8ea      	bhi.n	800e294 <__gethex+0x1d8>
 800e2be:	492b      	ldr	r1, [pc, #172]	@ (800e36c <__gethex+0x2b0>)
 800e2c0:	9303      	str	r3, [sp, #12]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f7ff fe13 	bl	800def0 <strncmp>
 800e2ca:	9b03      	ldr	r3, [sp, #12]
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d1e1      	bne.n	800e294 <__gethex+0x1d8>
 800e2d0:	e7a2      	b.n	800e218 <__gethex+0x15c>
 800e2d2:	1ea9      	subs	r1, r5, #2
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f7fe fba4 	bl	800ca22 <__any_on>
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	d0c2      	beq.n	800e264 <__gethex+0x1a8>
 800e2de:	f04f 0903 	mov.w	r9, #3
 800e2e2:	e7c1      	b.n	800e268 <__gethex+0x1ac>
 800e2e4:	da09      	bge.n	800e2fa <__gethex+0x23e>
 800e2e6:	1b75      	subs	r5, r6, r5
 800e2e8:	4621      	mov	r1, r4
 800e2ea:	9801      	ldr	r0, [sp, #4]
 800e2ec:	462a      	mov	r2, r5
 800e2ee:	f7fe f95f 	bl	800c5b0 <__lshift>
 800e2f2:	1b7f      	subs	r7, r7, r5
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	f100 0a14 	add.w	sl, r0, #20
 800e2fa:	f04f 0900 	mov.w	r9, #0
 800e2fe:	e7b8      	b.n	800e272 <__gethex+0x1b6>
 800e300:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e304:	42bd      	cmp	r5, r7
 800e306:	dd6f      	ble.n	800e3e8 <__gethex+0x32c>
 800e308:	1bed      	subs	r5, r5, r7
 800e30a:	42ae      	cmp	r6, r5
 800e30c:	dc34      	bgt.n	800e378 <__gethex+0x2bc>
 800e30e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e312:	2b02      	cmp	r3, #2
 800e314:	d022      	beq.n	800e35c <__gethex+0x2a0>
 800e316:	2b03      	cmp	r3, #3
 800e318:	d024      	beq.n	800e364 <__gethex+0x2a8>
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d115      	bne.n	800e34a <__gethex+0x28e>
 800e31e:	42ae      	cmp	r6, r5
 800e320:	d113      	bne.n	800e34a <__gethex+0x28e>
 800e322:	2e01      	cmp	r6, #1
 800e324:	d10b      	bne.n	800e33e <__gethex+0x282>
 800e326:	9a02      	ldr	r2, [sp, #8]
 800e328:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e32c:	6013      	str	r3, [r2, #0]
 800e32e:	2301      	movs	r3, #1
 800e330:	6123      	str	r3, [r4, #16]
 800e332:	f8ca 3000 	str.w	r3, [sl]
 800e336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e338:	2562      	movs	r5, #98	@ 0x62
 800e33a:	601c      	str	r4, [r3, #0]
 800e33c:	e73a      	b.n	800e1b4 <__gethex+0xf8>
 800e33e:	1e71      	subs	r1, r6, #1
 800e340:	4620      	mov	r0, r4
 800e342:	f7fe fb6e 	bl	800ca22 <__any_on>
 800e346:	2800      	cmp	r0, #0
 800e348:	d1ed      	bne.n	800e326 <__gethex+0x26a>
 800e34a:	9801      	ldr	r0, [sp, #4]
 800e34c:	4621      	mov	r1, r4
 800e34e:	f7fd ff17 	bl	800c180 <_Bfree>
 800e352:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e354:	2300      	movs	r3, #0
 800e356:	6013      	str	r3, [r2, #0]
 800e358:	2550      	movs	r5, #80	@ 0x50
 800e35a:	e72b      	b.n	800e1b4 <__gethex+0xf8>
 800e35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1f3      	bne.n	800e34a <__gethex+0x28e>
 800e362:	e7e0      	b.n	800e326 <__gethex+0x26a>
 800e364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1dd      	bne.n	800e326 <__gethex+0x26a>
 800e36a:	e7ee      	b.n	800e34a <__gethex+0x28e>
 800e36c:	0800ebd8 	.word	0x0800ebd8
 800e370:	0800ea6d 	.word	0x0800ea6d
 800e374:	0800ed86 	.word	0x0800ed86
 800e378:	1e6f      	subs	r7, r5, #1
 800e37a:	f1b9 0f00 	cmp.w	r9, #0
 800e37e:	d130      	bne.n	800e3e2 <__gethex+0x326>
 800e380:	b127      	cbz	r7, 800e38c <__gethex+0x2d0>
 800e382:	4639      	mov	r1, r7
 800e384:	4620      	mov	r0, r4
 800e386:	f7fe fb4c 	bl	800ca22 <__any_on>
 800e38a:	4681      	mov	r9, r0
 800e38c:	117a      	asrs	r2, r7, #5
 800e38e:	2301      	movs	r3, #1
 800e390:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e394:	f007 071f 	and.w	r7, r7, #31
 800e398:	40bb      	lsls	r3, r7
 800e39a:	4213      	tst	r3, r2
 800e39c:	4629      	mov	r1, r5
 800e39e:	4620      	mov	r0, r4
 800e3a0:	bf18      	it	ne
 800e3a2:	f049 0902 	orrne.w	r9, r9, #2
 800e3a6:	f7ff fe21 	bl	800dfec <rshift>
 800e3aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e3ae:	1b76      	subs	r6, r6, r5
 800e3b0:	2502      	movs	r5, #2
 800e3b2:	f1b9 0f00 	cmp.w	r9, #0
 800e3b6:	d047      	beq.n	800e448 <__gethex+0x38c>
 800e3b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	d015      	beq.n	800e3ec <__gethex+0x330>
 800e3c0:	2b03      	cmp	r3, #3
 800e3c2:	d017      	beq.n	800e3f4 <__gethex+0x338>
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d109      	bne.n	800e3dc <__gethex+0x320>
 800e3c8:	f019 0f02 	tst.w	r9, #2
 800e3cc:	d006      	beq.n	800e3dc <__gethex+0x320>
 800e3ce:	f8da 3000 	ldr.w	r3, [sl]
 800e3d2:	ea49 0903 	orr.w	r9, r9, r3
 800e3d6:	f019 0f01 	tst.w	r9, #1
 800e3da:	d10e      	bne.n	800e3fa <__gethex+0x33e>
 800e3dc:	f045 0510 	orr.w	r5, r5, #16
 800e3e0:	e032      	b.n	800e448 <__gethex+0x38c>
 800e3e2:	f04f 0901 	mov.w	r9, #1
 800e3e6:	e7d1      	b.n	800e38c <__gethex+0x2d0>
 800e3e8:	2501      	movs	r5, #1
 800e3ea:	e7e2      	b.n	800e3b2 <__gethex+0x2f6>
 800e3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3ee:	f1c3 0301 	rsb	r3, r3, #1
 800e3f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d0f0      	beq.n	800e3dc <__gethex+0x320>
 800e3fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e3fe:	f104 0314 	add.w	r3, r4, #20
 800e402:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e406:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e40a:	f04f 0c00 	mov.w	ip, #0
 800e40e:	4618      	mov	r0, r3
 800e410:	f853 2b04 	ldr.w	r2, [r3], #4
 800e414:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e418:	d01b      	beq.n	800e452 <__gethex+0x396>
 800e41a:	3201      	adds	r2, #1
 800e41c:	6002      	str	r2, [r0, #0]
 800e41e:	2d02      	cmp	r5, #2
 800e420:	f104 0314 	add.w	r3, r4, #20
 800e424:	d13c      	bne.n	800e4a0 <__gethex+0x3e4>
 800e426:	f8d8 2000 	ldr.w	r2, [r8]
 800e42a:	3a01      	subs	r2, #1
 800e42c:	42b2      	cmp	r2, r6
 800e42e:	d109      	bne.n	800e444 <__gethex+0x388>
 800e430:	1171      	asrs	r1, r6, #5
 800e432:	2201      	movs	r2, #1
 800e434:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e438:	f006 061f 	and.w	r6, r6, #31
 800e43c:	fa02 f606 	lsl.w	r6, r2, r6
 800e440:	421e      	tst	r6, r3
 800e442:	d13a      	bne.n	800e4ba <__gethex+0x3fe>
 800e444:	f045 0520 	orr.w	r5, r5, #32
 800e448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e44a:	601c      	str	r4, [r3, #0]
 800e44c:	9b02      	ldr	r3, [sp, #8]
 800e44e:	601f      	str	r7, [r3, #0]
 800e450:	e6b0      	b.n	800e1b4 <__gethex+0xf8>
 800e452:	4299      	cmp	r1, r3
 800e454:	f843 cc04 	str.w	ip, [r3, #-4]
 800e458:	d8d9      	bhi.n	800e40e <__gethex+0x352>
 800e45a:	68a3      	ldr	r3, [r4, #8]
 800e45c:	459b      	cmp	fp, r3
 800e45e:	db17      	blt.n	800e490 <__gethex+0x3d4>
 800e460:	6861      	ldr	r1, [r4, #4]
 800e462:	9801      	ldr	r0, [sp, #4]
 800e464:	3101      	adds	r1, #1
 800e466:	f7fd fe4b 	bl	800c100 <_Balloc>
 800e46a:	4681      	mov	r9, r0
 800e46c:	b918      	cbnz	r0, 800e476 <__gethex+0x3ba>
 800e46e:	4b1a      	ldr	r3, [pc, #104]	@ (800e4d8 <__gethex+0x41c>)
 800e470:	4602      	mov	r2, r0
 800e472:	2184      	movs	r1, #132	@ 0x84
 800e474:	e6c5      	b.n	800e202 <__gethex+0x146>
 800e476:	6922      	ldr	r2, [r4, #16]
 800e478:	3202      	adds	r2, #2
 800e47a:	f104 010c 	add.w	r1, r4, #12
 800e47e:	0092      	lsls	r2, r2, #2
 800e480:	300c      	adds	r0, #12
 800e482:	f7fc feda 	bl	800b23a <memcpy>
 800e486:	4621      	mov	r1, r4
 800e488:	9801      	ldr	r0, [sp, #4]
 800e48a:	f7fd fe79 	bl	800c180 <_Bfree>
 800e48e:	464c      	mov	r4, r9
 800e490:	6923      	ldr	r3, [r4, #16]
 800e492:	1c5a      	adds	r2, r3, #1
 800e494:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e498:	6122      	str	r2, [r4, #16]
 800e49a:	2201      	movs	r2, #1
 800e49c:	615a      	str	r2, [r3, #20]
 800e49e:	e7be      	b.n	800e41e <__gethex+0x362>
 800e4a0:	6922      	ldr	r2, [r4, #16]
 800e4a2:	455a      	cmp	r2, fp
 800e4a4:	dd0b      	ble.n	800e4be <__gethex+0x402>
 800e4a6:	2101      	movs	r1, #1
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f7ff fd9f 	bl	800dfec <rshift>
 800e4ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4b2:	3701      	adds	r7, #1
 800e4b4:	42bb      	cmp	r3, r7
 800e4b6:	f6ff aee0 	blt.w	800e27a <__gethex+0x1be>
 800e4ba:	2501      	movs	r5, #1
 800e4bc:	e7c2      	b.n	800e444 <__gethex+0x388>
 800e4be:	f016 061f 	ands.w	r6, r6, #31
 800e4c2:	d0fa      	beq.n	800e4ba <__gethex+0x3fe>
 800e4c4:	4453      	add	r3, sl
 800e4c6:	f1c6 0620 	rsb	r6, r6, #32
 800e4ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e4ce:	f7fd ff09 	bl	800c2e4 <__hi0bits>
 800e4d2:	42b0      	cmp	r0, r6
 800e4d4:	dbe7      	blt.n	800e4a6 <__gethex+0x3ea>
 800e4d6:	e7f0      	b.n	800e4ba <__gethex+0x3fe>
 800e4d8:	0800ea6d 	.word	0x0800ea6d

0800e4dc <L_shift>:
 800e4dc:	f1c2 0208 	rsb	r2, r2, #8
 800e4e0:	0092      	lsls	r2, r2, #2
 800e4e2:	b570      	push	{r4, r5, r6, lr}
 800e4e4:	f1c2 0620 	rsb	r6, r2, #32
 800e4e8:	6843      	ldr	r3, [r0, #4]
 800e4ea:	6804      	ldr	r4, [r0, #0]
 800e4ec:	fa03 f506 	lsl.w	r5, r3, r6
 800e4f0:	432c      	orrs	r4, r5
 800e4f2:	40d3      	lsrs	r3, r2
 800e4f4:	6004      	str	r4, [r0, #0]
 800e4f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e4fa:	4288      	cmp	r0, r1
 800e4fc:	d3f4      	bcc.n	800e4e8 <L_shift+0xc>
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}

0800e500 <__match>:
 800e500:	b530      	push	{r4, r5, lr}
 800e502:	6803      	ldr	r3, [r0, #0]
 800e504:	3301      	adds	r3, #1
 800e506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e50a:	b914      	cbnz	r4, 800e512 <__match+0x12>
 800e50c:	6003      	str	r3, [r0, #0]
 800e50e:	2001      	movs	r0, #1
 800e510:	bd30      	pop	{r4, r5, pc}
 800e512:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e516:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e51a:	2d19      	cmp	r5, #25
 800e51c:	bf98      	it	ls
 800e51e:	3220      	addls	r2, #32
 800e520:	42a2      	cmp	r2, r4
 800e522:	d0f0      	beq.n	800e506 <__match+0x6>
 800e524:	2000      	movs	r0, #0
 800e526:	e7f3      	b.n	800e510 <__match+0x10>

0800e528 <__hexnan>:
 800e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52c:	680b      	ldr	r3, [r1, #0]
 800e52e:	6801      	ldr	r1, [r0, #0]
 800e530:	115e      	asrs	r6, r3, #5
 800e532:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e536:	f013 031f 	ands.w	r3, r3, #31
 800e53a:	b087      	sub	sp, #28
 800e53c:	bf18      	it	ne
 800e53e:	3604      	addne	r6, #4
 800e540:	2500      	movs	r5, #0
 800e542:	1f37      	subs	r7, r6, #4
 800e544:	4682      	mov	sl, r0
 800e546:	4690      	mov	r8, r2
 800e548:	9301      	str	r3, [sp, #4]
 800e54a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e54e:	46b9      	mov	r9, r7
 800e550:	463c      	mov	r4, r7
 800e552:	9502      	str	r5, [sp, #8]
 800e554:	46ab      	mov	fp, r5
 800e556:	784a      	ldrb	r2, [r1, #1]
 800e558:	1c4b      	adds	r3, r1, #1
 800e55a:	9303      	str	r3, [sp, #12]
 800e55c:	b342      	cbz	r2, 800e5b0 <__hexnan+0x88>
 800e55e:	4610      	mov	r0, r2
 800e560:	9105      	str	r1, [sp, #20]
 800e562:	9204      	str	r2, [sp, #16]
 800e564:	f7ff fd94 	bl	800e090 <__hexdig_fun>
 800e568:	2800      	cmp	r0, #0
 800e56a:	d151      	bne.n	800e610 <__hexnan+0xe8>
 800e56c:	9a04      	ldr	r2, [sp, #16]
 800e56e:	9905      	ldr	r1, [sp, #20]
 800e570:	2a20      	cmp	r2, #32
 800e572:	d818      	bhi.n	800e5a6 <__hexnan+0x7e>
 800e574:	9b02      	ldr	r3, [sp, #8]
 800e576:	459b      	cmp	fp, r3
 800e578:	dd13      	ble.n	800e5a2 <__hexnan+0x7a>
 800e57a:	454c      	cmp	r4, r9
 800e57c:	d206      	bcs.n	800e58c <__hexnan+0x64>
 800e57e:	2d07      	cmp	r5, #7
 800e580:	dc04      	bgt.n	800e58c <__hexnan+0x64>
 800e582:	462a      	mov	r2, r5
 800e584:	4649      	mov	r1, r9
 800e586:	4620      	mov	r0, r4
 800e588:	f7ff ffa8 	bl	800e4dc <L_shift>
 800e58c:	4544      	cmp	r4, r8
 800e58e:	d952      	bls.n	800e636 <__hexnan+0x10e>
 800e590:	2300      	movs	r3, #0
 800e592:	f1a4 0904 	sub.w	r9, r4, #4
 800e596:	f844 3c04 	str.w	r3, [r4, #-4]
 800e59a:	f8cd b008 	str.w	fp, [sp, #8]
 800e59e:	464c      	mov	r4, r9
 800e5a0:	461d      	mov	r5, r3
 800e5a2:	9903      	ldr	r1, [sp, #12]
 800e5a4:	e7d7      	b.n	800e556 <__hexnan+0x2e>
 800e5a6:	2a29      	cmp	r2, #41	@ 0x29
 800e5a8:	d157      	bne.n	800e65a <__hexnan+0x132>
 800e5aa:	3102      	adds	r1, #2
 800e5ac:	f8ca 1000 	str.w	r1, [sl]
 800e5b0:	f1bb 0f00 	cmp.w	fp, #0
 800e5b4:	d051      	beq.n	800e65a <__hexnan+0x132>
 800e5b6:	454c      	cmp	r4, r9
 800e5b8:	d206      	bcs.n	800e5c8 <__hexnan+0xa0>
 800e5ba:	2d07      	cmp	r5, #7
 800e5bc:	dc04      	bgt.n	800e5c8 <__hexnan+0xa0>
 800e5be:	462a      	mov	r2, r5
 800e5c0:	4649      	mov	r1, r9
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f7ff ff8a 	bl	800e4dc <L_shift>
 800e5c8:	4544      	cmp	r4, r8
 800e5ca:	d936      	bls.n	800e63a <__hexnan+0x112>
 800e5cc:	f1a8 0204 	sub.w	r2, r8, #4
 800e5d0:	4623      	mov	r3, r4
 800e5d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e5d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e5da:	429f      	cmp	r7, r3
 800e5dc:	d2f9      	bcs.n	800e5d2 <__hexnan+0xaa>
 800e5de:	1b3b      	subs	r3, r7, r4
 800e5e0:	f023 0303 	bic.w	r3, r3, #3
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	3401      	adds	r4, #1
 800e5e8:	3e03      	subs	r6, #3
 800e5ea:	42b4      	cmp	r4, r6
 800e5ec:	bf88      	it	hi
 800e5ee:	2304      	movhi	r3, #4
 800e5f0:	4443      	add	r3, r8
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f843 2b04 	str.w	r2, [r3], #4
 800e5f8:	429f      	cmp	r7, r3
 800e5fa:	d2fb      	bcs.n	800e5f4 <__hexnan+0xcc>
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	b91b      	cbnz	r3, 800e608 <__hexnan+0xe0>
 800e600:	4547      	cmp	r7, r8
 800e602:	d128      	bne.n	800e656 <__hexnan+0x12e>
 800e604:	2301      	movs	r3, #1
 800e606:	603b      	str	r3, [r7, #0]
 800e608:	2005      	movs	r0, #5
 800e60a:	b007      	add	sp, #28
 800e60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e610:	3501      	adds	r5, #1
 800e612:	2d08      	cmp	r5, #8
 800e614:	f10b 0b01 	add.w	fp, fp, #1
 800e618:	dd06      	ble.n	800e628 <__hexnan+0x100>
 800e61a:	4544      	cmp	r4, r8
 800e61c:	d9c1      	bls.n	800e5a2 <__hexnan+0x7a>
 800e61e:	2300      	movs	r3, #0
 800e620:	f844 3c04 	str.w	r3, [r4, #-4]
 800e624:	2501      	movs	r5, #1
 800e626:	3c04      	subs	r4, #4
 800e628:	6822      	ldr	r2, [r4, #0]
 800e62a:	f000 000f 	and.w	r0, r0, #15
 800e62e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e632:	6020      	str	r0, [r4, #0]
 800e634:	e7b5      	b.n	800e5a2 <__hexnan+0x7a>
 800e636:	2508      	movs	r5, #8
 800e638:	e7b3      	b.n	800e5a2 <__hexnan+0x7a>
 800e63a:	9b01      	ldr	r3, [sp, #4]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d0dd      	beq.n	800e5fc <__hexnan+0xd4>
 800e640:	f1c3 0320 	rsb	r3, r3, #32
 800e644:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e648:	40da      	lsrs	r2, r3
 800e64a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e64e:	4013      	ands	r3, r2
 800e650:	f846 3c04 	str.w	r3, [r6, #-4]
 800e654:	e7d2      	b.n	800e5fc <__hexnan+0xd4>
 800e656:	3f04      	subs	r7, #4
 800e658:	e7d0      	b.n	800e5fc <__hexnan+0xd4>
 800e65a:	2004      	movs	r0, #4
 800e65c:	e7d5      	b.n	800e60a <__hexnan+0xe2>

0800e65e <__ascii_mbtowc>:
 800e65e:	b082      	sub	sp, #8
 800e660:	b901      	cbnz	r1, 800e664 <__ascii_mbtowc+0x6>
 800e662:	a901      	add	r1, sp, #4
 800e664:	b142      	cbz	r2, 800e678 <__ascii_mbtowc+0x1a>
 800e666:	b14b      	cbz	r3, 800e67c <__ascii_mbtowc+0x1e>
 800e668:	7813      	ldrb	r3, [r2, #0]
 800e66a:	600b      	str	r3, [r1, #0]
 800e66c:	7812      	ldrb	r2, [r2, #0]
 800e66e:	1e10      	subs	r0, r2, #0
 800e670:	bf18      	it	ne
 800e672:	2001      	movne	r0, #1
 800e674:	b002      	add	sp, #8
 800e676:	4770      	bx	lr
 800e678:	4610      	mov	r0, r2
 800e67a:	e7fb      	b.n	800e674 <__ascii_mbtowc+0x16>
 800e67c:	f06f 0001 	mvn.w	r0, #1
 800e680:	e7f8      	b.n	800e674 <__ascii_mbtowc+0x16>

0800e682 <_realloc_r>:
 800e682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e686:	4680      	mov	r8, r0
 800e688:	4615      	mov	r5, r2
 800e68a:	460c      	mov	r4, r1
 800e68c:	b921      	cbnz	r1, 800e698 <_realloc_r+0x16>
 800e68e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e692:	4611      	mov	r1, r2
 800e694:	f7fd bca8 	b.w	800bfe8 <_malloc_r>
 800e698:	b92a      	cbnz	r2, 800e6a6 <_realloc_r+0x24>
 800e69a:	f7fd fc31 	bl	800bf00 <_free_r>
 800e69e:	2400      	movs	r4, #0
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a6:	f000 f840 	bl	800e72a <_malloc_usable_size_r>
 800e6aa:	4285      	cmp	r5, r0
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	d802      	bhi.n	800e6b6 <_realloc_r+0x34>
 800e6b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e6b4:	d8f4      	bhi.n	800e6a0 <_realloc_r+0x1e>
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	4640      	mov	r0, r8
 800e6ba:	f7fd fc95 	bl	800bfe8 <_malloc_r>
 800e6be:	4607      	mov	r7, r0
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d0ec      	beq.n	800e69e <_realloc_r+0x1c>
 800e6c4:	42b5      	cmp	r5, r6
 800e6c6:	462a      	mov	r2, r5
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	bf28      	it	cs
 800e6cc:	4632      	movcs	r2, r6
 800e6ce:	f7fc fdb4 	bl	800b23a <memcpy>
 800e6d2:	4621      	mov	r1, r4
 800e6d4:	4640      	mov	r0, r8
 800e6d6:	f7fd fc13 	bl	800bf00 <_free_r>
 800e6da:	463c      	mov	r4, r7
 800e6dc:	e7e0      	b.n	800e6a0 <_realloc_r+0x1e>

0800e6de <__ascii_wctomb>:
 800e6de:	4603      	mov	r3, r0
 800e6e0:	4608      	mov	r0, r1
 800e6e2:	b141      	cbz	r1, 800e6f6 <__ascii_wctomb+0x18>
 800e6e4:	2aff      	cmp	r2, #255	@ 0xff
 800e6e6:	d904      	bls.n	800e6f2 <__ascii_wctomb+0x14>
 800e6e8:	228a      	movs	r2, #138	@ 0x8a
 800e6ea:	601a      	str	r2, [r3, #0]
 800e6ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6f0:	4770      	bx	lr
 800e6f2:	700a      	strb	r2, [r1, #0]
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	4770      	bx	lr

0800e6f8 <fiprintf>:
 800e6f8:	b40e      	push	{r1, r2, r3}
 800e6fa:	b503      	push	{r0, r1, lr}
 800e6fc:	4601      	mov	r1, r0
 800e6fe:	ab03      	add	r3, sp, #12
 800e700:	4805      	ldr	r0, [pc, #20]	@ (800e718 <fiprintf+0x20>)
 800e702:	f853 2b04 	ldr.w	r2, [r3], #4
 800e706:	6800      	ldr	r0, [r0, #0]
 800e708:	9301      	str	r3, [sp, #4]
 800e70a:	f7ff f9b1 	bl	800da70 <_vfiprintf_r>
 800e70e:	b002      	add	sp, #8
 800e710:	f85d eb04 	ldr.w	lr, [sp], #4
 800e714:	b003      	add	sp, #12
 800e716:	4770      	bx	lr
 800e718:	2000001c 	.word	0x2000001c

0800e71c <abort>:
 800e71c:	b508      	push	{r3, lr}
 800e71e:	2006      	movs	r0, #6
 800e720:	f000 f834 	bl	800e78c <raise>
 800e724:	2001      	movs	r0, #1
 800e726:	f7f3 fa47 	bl	8001bb8 <_exit>

0800e72a <_malloc_usable_size_r>:
 800e72a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e72e:	1f18      	subs	r0, r3, #4
 800e730:	2b00      	cmp	r3, #0
 800e732:	bfbc      	itt	lt
 800e734:	580b      	ldrlt	r3, [r1, r0]
 800e736:	18c0      	addlt	r0, r0, r3
 800e738:	4770      	bx	lr

0800e73a <_raise_r>:
 800e73a:	291f      	cmp	r1, #31
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	4605      	mov	r5, r0
 800e740:	460c      	mov	r4, r1
 800e742:	d904      	bls.n	800e74e <_raise_r+0x14>
 800e744:	2316      	movs	r3, #22
 800e746:	6003      	str	r3, [r0, #0]
 800e748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e74c:	bd38      	pop	{r3, r4, r5, pc}
 800e74e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e750:	b112      	cbz	r2, 800e758 <_raise_r+0x1e>
 800e752:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e756:	b94b      	cbnz	r3, 800e76c <_raise_r+0x32>
 800e758:	4628      	mov	r0, r5
 800e75a:	f000 f831 	bl	800e7c0 <_getpid_r>
 800e75e:	4622      	mov	r2, r4
 800e760:	4601      	mov	r1, r0
 800e762:	4628      	mov	r0, r5
 800e764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e768:	f000 b818 	b.w	800e79c <_kill_r>
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d00a      	beq.n	800e786 <_raise_r+0x4c>
 800e770:	1c59      	adds	r1, r3, #1
 800e772:	d103      	bne.n	800e77c <_raise_r+0x42>
 800e774:	2316      	movs	r3, #22
 800e776:	6003      	str	r3, [r0, #0]
 800e778:	2001      	movs	r0, #1
 800e77a:	e7e7      	b.n	800e74c <_raise_r+0x12>
 800e77c:	2100      	movs	r1, #0
 800e77e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e782:	4620      	mov	r0, r4
 800e784:	4798      	blx	r3
 800e786:	2000      	movs	r0, #0
 800e788:	e7e0      	b.n	800e74c <_raise_r+0x12>
	...

0800e78c <raise>:
 800e78c:	4b02      	ldr	r3, [pc, #8]	@ (800e798 <raise+0xc>)
 800e78e:	4601      	mov	r1, r0
 800e790:	6818      	ldr	r0, [r3, #0]
 800e792:	f7ff bfd2 	b.w	800e73a <_raise_r>
 800e796:	bf00      	nop
 800e798:	2000001c 	.word	0x2000001c

0800e79c <_kill_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	4d07      	ldr	r5, [pc, #28]	@ (800e7bc <_kill_r+0x20>)
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	4608      	mov	r0, r1
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	602b      	str	r3, [r5, #0]
 800e7aa:	f7f3 f9f5 	bl	8001b98 <_kill>
 800e7ae:	1c43      	adds	r3, r0, #1
 800e7b0:	d102      	bne.n	800e7b8 <_kill_r+0x1c>
 800e7b2:	682b      	ldr	r3, [r5, #0]
 800e7b4:	b103      	cbz	r3, 800e7b8 <_kill_r+0x1c>
 800e7b6:	6023      	str	r3, [r4, #0]
 800e7b8:	bd38      	pop	{r3, r4, r5, pc}
 800e7ba:	bf00      	nop
 800e7bc:	20001468 	.word	0x20001468

0800e7c0 <_getpid_r>:
 800e7c0:	f7f3 b9e2 	b.w	8001b88 <_getpid>

0800e7c4 <_init>:
 800e7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7c6:	bf00      	nop
 800e7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ca:	bc08      	pop	{r3}
 800e7cc:	469e      	mov	lr, r3
 800e7ce:	4770      	bx	lr

0800e7d0 <_fini>:
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d2:	bf00      	nop
 800e7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7d6:	bc08      	pop	{r3}
 800e7d8:	469e      	mov	lr, r3
 800e7da:	4770      	bx	lr
