
Projet_V-NOM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e83c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800ea20  0800ea20  0000fa20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f058  0800f058  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f058  0800f058  00010058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f060  0800f060  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f060  0800f060  00010060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f064  0800f064  00010064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800f068  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a0  200001d8  0800f240  000111d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001478  0800f240  00011478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000232d4  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c8a  00000000  00000000  000344dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  00039168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016d3  00000000  00000000  0003aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251cf  00000000  00000000  0003c5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000225d5  00000000  00000000  0006179a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9489  00000000  00000000  00083d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d1f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091f8  00000000  00000000  0016d23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00176434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ea04 	.word	0x0800ea04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800ea04 	.word	0x0800ea04

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00a f93f 	bl	800b2d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2201      	movs	r2, #1
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 fefd 	bl	8002ebc <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fc04 	bl	80018d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f003 f8a4 	bl	8004224 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fbf7 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f002 fbc0 	bl	8003888 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 fbe1 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f4 	.word	0x200001f4
 8001120:	0c900008 	.word	0x0c900008

08001124 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	2220      	movs	r2, #32
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f00a f8cd 	bl	800b2d0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001136:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001138:	4a2b      	ldr	r2, [pc, #172]	@ (80011e8 <MX_ADC2_Init+0xc4>)
 800113a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800113e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001142:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115c:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800115e:	2204      	movs	r2, #4
 8001160:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001164:	2200      	movs	r2, #0
 8001166:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800116a:	2201      	movs	r2, #1
 800116c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001170:	2201      	movs	r2, #1
 8001172:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001184:	2200      	movs	r2, #0
 8001186:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800119e:	4811      	ldr	r0, [pc, #68]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 80011a0:	f001 fe8c 	bl	8002ebc <HAL_ADC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011aa:	f000 fb93 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_ADC2_Init+0xc8>)
 80011b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b2:	2306      	movs	r3, #6
 80011b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ba:	237f      	movs	r3, #127	@ 0x7f
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011be:	2304      	movs	r3, #4
 80011c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 80011cc:	f002 fb5c 	bl	8003888 <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011d6:	f000 fb7d 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000260 	.word	0x20000260
 80011e8:	50000100 	.word	0x50000100
 80011ec:	04300002 	.word	0x04300002

080011f0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b09c      	sub	sp, #112	@ 0x70
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	2244      	movs	r2, #68	@ 0x44
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f00a f85d 	bl	800b2d0 <memset>
  if(adcHandle->Instance==ADC1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800121e:	d146      	bne.n	80012ae <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001220:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001224:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001226:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800122a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	4618      	mov	r0, r3
 8001232:	f004 f9e5 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800123c:	f000 fb4a 	bl	80018d4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001240:	4b42      	ldr	r3, [pc, #264]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a41      	ldr	r2, [pc, #260]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 8001248:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800124a:	4b40      	ldr	r3, [pc, #256]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10b      	bne.n	800126a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001252:	4b3f      	ldr	r3, [pc, #252]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a3e      	ldr	r2, [pc, #248]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001258:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b3c      	ldr	r3, [pc, #240]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a38      	ldr	r2, [pc, #224]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ToF2_Pin|GPIO_PIN_2;
 8001282:	2305      	movs	r3, #5
 8001284:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001298:	f003 fa08 	bl	80046ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2105      	movs	r1, #5
 80012a0:	2012      	movs	r0, #18
 80012a2:	f003 f91b 	bl	80044dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012a6:	2012      	movs	r0, #18
 80012a8:	f003 f932 	bl	8004510 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012ac:	e04a      	b.n	8001344 <HAL_ADC_MspInit+0x154>
  else if(adcHandle->Instance==ADC2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a28      	ldr	r2, [pc, #160]	@ (8001354 <HAL_ADC_MspInit+0x164>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d145      	bne.n	8001344 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 f999 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80012d4:	f000 fafe 	bl	80018d4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 80012e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d10b      	bne.n	8001302 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 80012f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ToF2_Pin;
 800131a:	2301      	movs	r3, #1
 800131c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ToF2_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001330:	f003 f9bc 	bl	80046ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2105      	movs	r1, #5
 8001338:	2012      	movs	r0, #18
 800133a:	f003 f8cf 	bl	80044dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800133e:	2012      	movs	r0, #18
 8001340:	f003 f8e6 	bl	8004510 <HAL_NVIC_EnableIRQ>
}
 8001344:	bf00      	nop
 8001346:	3770      	adds	r7, #112	@ 0x70
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200002cc 	.word	0x200002cc
 8001350:	40021000 	.word	0x40021000
 8001354:	50000100 	.word	0x50000100

08001358 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_FREERTOS_Init+0x2c>)
 8001360:	1d3c      	adds	r4, r7, #4
 8001362:	461d      	mov	r5, r3
 8001364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f007 fd6a 	bl	8008e4a <osThreadCreate>
 8001376:	4603      	mov	r3, r0
 8001378:	4a03      	ldr	r2, [pc, #12]	@ (8001388 <MX_FREERTOS_Init+0x30>)
 800137a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	0800ea2c 	.word	0x0800ea2c
 8001388:	200002d0 	.word	0x200002d0

0800138c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001394:	2001      	movs	r0, #1
 8001396:	f007 fd7f 	bl	8008e98 <osDelay>
 800139a:	e7fb      	b.n	8001394 <StartDefaultTask+0x8>

0800139c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4b42      	ldr	r3, [pc, #264]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	4a41      	ldr	r2, [pc, #260]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013be:	4b3f      	ldr	r3, [pc, #252]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ca:	4b3c      	ldr	r3, [pc, #240]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a3b      	ldr	r2, [pc, #236]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b39      	ldr	r3, [pc, #228]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b36      	ldr	r3, [pc, #216]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	4a35      	ldr	r2, [pc, #212]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ee:	4b33      	ldr	r3, [pc, #204]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	4a2f      	ldr	r2, [pc, #188]	@ (80014bc <MX_GPIO_Init+0x120>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001406:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <MX_GPIO_Init+0x120>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8001418:	4829      	ldr	r0, [pc, #164]	@ (80014c0 <MX_GPIO_Init+0x124>)
 800141a:	f003 fac9 	bl	80049b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2103      	movs	r1, #3
 8001422:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <MX_GPIO_Init+0x128>)
 8001424:	f003 fac4 	bl	80049b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 8001428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4820      	ldr	r0, [pc, #128]	@ (80014c0 <MX_GPIO_Init+0x124>)
 800143e:	f003 f935 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AG_INT1_Pin|AG_INT2_Pin;
 8001442:	2318      	movs	r3, #24
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001446:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145a:	f003 f927 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin;
 800145e:	f44f 6341 	mov.w	r3, #3088	@ 0xc10
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4812      	ldr	r0, [pc, #72]	@ (80014c0 <MX_GPIO_Init+0x124>)
 8001478:	f003 f918 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 800147c:	2303      	movs	r3, #3
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <MX_GPIO_Init+0x128>)
 8001494:	f003 f90a 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin;
 8001498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_MODE_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_GPIO_Init+0x128>)
 80014ae:	f003 f8fd 	bl	80046ac <HAL_GPIO_Init>

}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	@ 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000800 	.word	0x48000800
 80014c4:	48000400 	.word	0x48000400

080014c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014cc:	f3bf 8f4f 	dsb	sy
}
 80014d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <__NVIC_SystemReset+0x24>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014da:	4904      	ldr	r1, [pc, #16]	@ (80014ec <__NVIC_SystemReset+0x24>)
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__NVIC_SystemReset+0x28>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014e2:	f3bf 8f4f 	dsb	sy
}
 80014e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <__NVIC_SystemReset+0x20>
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	05fa0004 	.word	0x05fa0004

080014f4 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014fc:	1d39      	adds	r1, r7, #4
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001502:	2201      	movs	r2, #1
 8001504:	4803      	ldr	r0, [pc, #12]	@ (8001514 <__io_putchar+0x20>)
 8001506:	f006 fa3e 	bl	8007986 <HAL_UART_Transmit>

	return ch;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200004ac 	.word	0x200004ac

08001518 <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	@ (800158c <HAL_UART_ErrorCallback+0x74>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d12b      	bne.n	8001582 <HAL_UART_ErrorCallback+0x6a>
	{
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f006 fe12 	bl	8008154 <HAL_UART_GetError>
 8001530:	4603      	mov	r3, r0
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <HAL_UART_ErrorCallback+0x28>
			DEBUG_PRINT("Parity Error!\r\n");
 800153a:	4815      	ldr	r0, [pc, #84]	@ (8001590 <HAL_UART_ErrorCallback+0x78>)
 800153c:	f009 fdc8 	bl	800b0d0 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f006 fe07 	bl	8008154 <HAL_UART_GetError>
 8001546:	4603      	mov	r3, r0
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HAL_UART_ErrorCallback+0x3e>
			DEBUG_PRINT("Noise Error!\r\n");
 8001550:	4810      	ldr	r0, [pc, #64]	@ (8001594 <HAL_UART_ErrorCallback+0x7c>)
 8001552:	f009 fdbd 	bl	800b0d0 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f006 fdfc 	bl	8008154 <HAL_UART_GetError>
 800155c:	4603      	mov	r3, r0
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <HAL_UART_ErrorCallback+0x54>
			DEBUG_PRINT("Framing Error!\r\n");
 8001566:	480c      	ldr	r0, [pc, #48]	@ (8001598 <HAL_UART_ErrorCallback+0x80>)
 8001568:	f009 fdb2 	bl	800b0d0 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f006 fdf1 	bl	8008154 <HAL_UART_GetError>
 8001572:	4603      	mov	r3, r0
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HAL_UART_ErrorCallback+0x6a>
			DEBUG_PRINT("Overrun Error!\r\n");
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <HAL_UART_ErrorCallback+0x84>)
 800157e:	f009 fda7 	bl	800b0d0 <puts>

		//YLIDARX2_RestartDMA(&hlidar);
	}
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40004400 	.word	0x40004400
 8001590:	0800ea40 	.word	0x0800ea40
 8001594:	0800ea50 	.word	0x0800ea50
 8001598:	0800ea60 	.word	0x0800ea60
 800159c:	0800ea70 	.word	0x0800ea70

080015a0 <HAL_ADC_ConvCpltCallback>:
/**
 * @brief ADC conversion complete callback.
 * This function is called when an ADC conversion is complete.
 * It retrieves the ADC value and processes the data.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_ConvCpltCallback+0x26>
		hTof.adc_val_tof1 = HAL_ADC_GetValue(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f001 ff36 	bl	8003424 <HAL_ADC_GetValue>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015bc:	6093      	str	r3, [r2, #8]
		GP2Y0A41SK0F_get_distance1(&hTof);
 80015be:	480b      	ldr	r0, [pc, #44]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015c0:	f000 fffe 	bl	80025c0 <GP2Y0A41SK0F_get_distance1>
	}
	else if (hadc->Instance == ADC2) {
		hTof.adc_val_tof2 = HAL_ADC_GetValue(hadc);
		GP2Y0A41SK0F_get_distance2(&hTof);
	}
}
 80015c4:	e00d      	b.n	80015e2 <HAL_ADC_ConvCpltCallback+0x42>
	else if (hadc->Instance == ADC2) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x50>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d108      	bne.n	80015e2 <HAL_ADC_ConvCpltCallback+0x42>
		hTof.adc_val_tof2 = HAL_ADC_GetValue(hadc);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f001 ff27 	bl	8003424 <HAL_ADC_GetValue>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015da:	60d3      	str	r3, [r2, #12]
		GP2Y0A41SK0F_get_distance2(&hTof);
 80015dc:	4803      	ldr	r0, [pc, #12]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015de:	f001 f843 	bl	8002668 <GP2Y0A41SK0F_get_distance2>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002f4 	.word	0x200002f4
 80015f0:	50000100 	.word	0x50000100

080015f4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	if (hadc->ErrorCode != HAL_ADC_ERROR_NONE) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <HAL_ADC_ErrorCallback+0x22>
		printf("ADC Error Code: %lx\n", hadc->ErrorCode);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001608:	4619      	mov	r1, r3
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <HAL_ADC_ErrorCallback+0x2c>)
 800160c:	f009 fcf8 	bl	800b000 <iprintf>

		GP2Y0A41SK0F_Start_Interrupt(&hTof);
 8001610:	4804      	ldr	r0, [pc, #16]	@ (8001624 <HAL_ADC_ErrorCallback+0x30>)
 8001612:	f000 ffa7 	bl	8002564 <GP2Y0A41SK0F_Start_Interrupt>
	}
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	0800ea80 	.word	0x0800ea80
 8001624:	200002f4 	.word	0x200002f4

08001628 <errHandler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void errHandler_xTaskCreate(BaseType_t r)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d103      	bne.n	800163e <errHandler_xTaskCreate+0x16>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
		DEBUG_PRINT("Tâche crée avec succès\r\n");
 8001636:	480c      	ldr	r0, [pc, #48]	@ (8001668 <errHandler_xTaskCreate+0x40>)
 8001638:	f009 fd4a 	bl	800b0d0 <puts>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		DEBUG_PRINT("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 800163c:	e010      	b.n	8001660 <errHandler_xTaskCreate+0x38>
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001644:	d105      	bne.n	8001652 <errHandler_xTaskCreate+0x2a>
		DEBUG_PRINT("Erreur: Mémoire insuffisante\r\n");
 8001646:	4809      	ldr	r0, [pc, #36]	@ (800166c <errHandler_xTaskCreate+0x44>)
 8001648:	f009 fd42 	bl	800b0d0 <puts>
		Error_Handler();
 800164c:	f000 f942 	bl	80018d4 <Error_Handler>
}
 8001650:	e006      	b.n	8001660 <errHandler_xTaskCreate+0x38>
		DEBUG_PRINT("Erreur inconnue lors de la création de la tâche\r\n");
 8001652:	4807      	ldr	r0, [pc, #28]	@ (8001670 <errHandler_xTaskCreate+0x48>)
 8001654:	f009 fd3c 	bl	800b0d0 <puts>
		Error_Handler();  	// Gestion d'erreur générique
 8001658:	f000 f93c 	bl	80018d4 <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 800165c:	f7ff ff34 	bl	80014c8 <__NVIC_SystemReset>
}
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	0800eacc 	.word	0x0800eacc
 800166c:	0800eae8 	.word	0x0800eae8
 8001670:	0800eb08 	.word	0x0800eb08

08001674 <task_Motors>:

#define TOF_TRESHHOLD 40

void task_Motors(void * unsused)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	/* Motors test */
	Motor_Init(&hMotors, &htim1);
 800167c:	4903      	ldr	r1, [pc, #12]	@ (800168c <task_Motors+0x18>)
 800167e:	4804      	ldr	r0, [pc, #16]	@ (8001690 <task_Motors+0x1c>)
 8001680:	f001 f844 	bl	800270c <Motor_Init>

	while (1)
	{
		//Motor_SetSpeed_percent(&hMotors, (hTof.distance_tof2 > 40 ? 0 : 80), (hTof.distance_tof1 > 40 ? 0 : 80));
		//DEBUG_PRINT("Mot1 speed: %d, Mot2 speed: %d\r\n", hMotors.current_speed1, hMotors.current_speed2);
		Motor_UpdateSpeed(&hMotors);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <task_Motors+0x1c>)
 8001686:	f001 f959 	bl	800293c <Motor_UpdateSpeed>
 800168a:	e7fb      	b.n	8001684 <task_Motors+0x10>
 800168c:	200003c8 	.word	0x200003c8
 8001690:	200002d4 	.word	0x200002d4

08001694 <task_Behaviour>:
	}
}

void task_Behaviour(void * unsused)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		DEBUG_PRINT("ToF1 distance: %d mm, ToF2 distance: %d mm\r\n", hTof.distance_tof1, hTof.distance_tof2);
 800169c:	4b32      	ldr	r3, [pc, #200]	@ (8001768 <task_Behaviour+0xd4>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a31      	ldr	r2, [pc, #196]	@ (8001768 <task_Behaviour+0xd4>)
 80016a2:	6952      	ldr	r2, [r2, #20]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4831      	ldr	r0, [pc, #196]	@ (800176c <task_Behaviour+0xd8>)
 80016a8:	f009 fcaa 	bl	800b000 <iprintf>

		/* Motors test */
		if (hTof.distance_tof2 > TOF_TRESHHOLD && hTof.distance_tof1 > TOF_TRESHHOLD)
 80016ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <task_Behaviour+0xd4>)
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	2b28      	cmp	r3, #40	@ 0x28
 80016b2:	dd18      	ble.n	80016e6 <task_Behaviour+0x52>
 80016b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001768 <task_Behaviour+0xd4>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b28      	cmp	r3, #40	@ 0x28
 80016ba:	dd14      	ble.n	80016e6 <task_Behaviour+0x52>
		{
			hMotors.mode_mot1 = FORWARD_MODE;
 80016bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001770 <task_Behaviour+0xdc>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = FORWARD_MODE;
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <task_Behaviour+0xdc>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	705a      	strb	r2, [r3, #1]

			Motor_SetMode(&hMotors);
 80016c8:	4829      	ldr	r0, [pc, #164]	@ (8001770 <task_Behaviour+0xdc>)
 80016ca:	f001 f86f 	bl	80027ac <Motor_SetMode>
			Motor_SetSpeed_percent(&hMotors, 40, 40);
 80016ce:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001774 <task_Behaviour+0xe0>
 80016d2:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001774 <task_Behaviour+0xe0>
 80016d6:	4826      	ldr	r0, [pc, #152]	@ (8001770 <task_Behaviour+0xdc>)
 80016d8:	f001 f8d6 	bl	8002888 <Motor_SetSpeed_percent>
			vTaskDelay(1000 / portTICK_PERIOD_MS);
 80016dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016e0:	f007 fdee 	bl	80092c0 <vTaskDelay>
 80016e4:	e032      	b.n	800174c <task_Behaviour+0xb8>
		}
		else if (hTof.distance_tof2 > TOF_TRESHHOLD && hTof.distance_tof1 <= TOF_TRESHHOLD)
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <task_Behaviour+0xd4>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b28      	cmp	r3, #40	@ 0x28
 80016ec:	dd0a      	ble.n	8001704 <task_Behaviour+0x70>
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <task_Behaviour+0xd4>)
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b28      	cmp	r3, #40	@ 0x28
 80016f4:	dc06      	bgt.n	8001704 <task_Behaviour+0x70>
		{
			hMotors.mode_mot1 = FORWARD_MODE;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <task_Behaviour+0xdc>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = REVERSE_MODE;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <task_Behaviour+0xdc>)
 80016fe:	2202      	movs	r2, #2
 8001700:	705a      	strb	r2, [r3, #1]
 8001702:	e023      	b.n	800174c <task_Behaviour+0xb8>
		}
		else if (hTof.distance_tof2 <= TOF_TRESHHOLD && hTof.distance_tof1 > TOF_TRESHHOLD)
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <task_Behaviour+0xd4>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	2b28      	cmp	r3, #40	@ 0x28
 800170a:	dc0a      	bgt.n	8001722 <task_Behaviour+0x8e>
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <task_Behaviour+0xd4>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2b28      	cmp	r3, #40	@ 0x28
 8001712:	dd06      	ble.n	8001722 <task_Behaviour+0x8e>
		{
			hMotors.mode_mot1 = REVERSE_MODE;
 8001714:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <task_Behaviour+0xdc>)
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = FORWARD_MODE;
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <task_Behaviour+0xdc>)
 800171c:	2201      	movs	r2, #1
 800171e:	705a      	strb	r2, [r3, #1]
 8001720:	e014      	b.n	800174c <task_Behaviour+0xb8>
		}
		else if (hTof.distance_tof2 <= TOF_TRESHHOLD && hTof.distance_tof1 <= TOF_TRESHHOLD)
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <task_Behaviour+0xd4>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2b28      	cmp	r3, #40	@ 0x28
 8001728:	dc0a      	bgt.n	8001740 <task_Behaviour+0xac>
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <task_Behaviour+0xd4>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b28      	cmp	r3, #40	@ 0x28
 8001730:	dc06      	bgt.n	8001740 <task_Behaviour+0xac>
		{
			hMotors.mode_mot1 = REVERSE_MODE;
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <task_Behaviour+0xdc>)
 8001734:	2202      	movs	r2, #2
 8001736:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = REVERSE_MODE;
 8001738:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <task_Behaviour+0xdc>)
 800173a:	2202      	movs	r2, #2
 800173c:	705a      	strb	r2, [r3, #1]
 800173e:	e005      	b.n	800174c <task_Behaviour+0xb8>
		}
		else
		{
			hMotors.mode_mot1 = REVERSE_MODE;
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <task_Behaviour+0xdc>)
 8001742:	2202      	movs	r2, #2
 8001744:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = FORWARD_MODE;
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <task_Behaviour+0xdc>)
 8001748:	2201      	movs	r2, #1
 800174a:	705a      	strb	r2, [r3, #1]
		}

		Motor_SetMode(&hMotors);
 800174c:	4808      	ldr	r0, [pc, #32]	@ (8001770 <task_Behaviour+0xdc>)
 800174e:	f001 f82d 	bl	80027ac <Motor_SetMode>
		Motor_SetSpeed_percent(&hMotors, 40, 40);
 8001752:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001774 <task_Behaviour+0xe0>
 8001756:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001774 <task_Behaviour+0xe0>
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <task_Behaviour+0xdc>)
 800175c:	f001 f894 	bl	8002888 <Motor_SetSpeed_percent>

		vTaskDelay(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f007 fdad 	bl	80092c0 <vTaskDelay>
		DEBUG_PRINT("ToF1 distance: %d mm, ToF2 distance: %d mm\r\n", hTof.distance_tof1, hTof.distance_tof2);
 8001766:	e799      	b.n	800169c <task_Behaviour+0x8>
 8001768:	200002f4 	.word	0x200002f4
 800176c:	0800eb3c 	.word	0x0800eb3c
 8001770:	200002d4 	.word	0x200002d4
 8001774:	42200000 	.word	0x42200000

08001778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177e:	f001 f927 	bl	80029d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001782:	f000 f84d 	bl	8001820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001786:	f7ff fe09 	bl	800139c <MX_GPIO_Init>
  MX_SPI1_Init();
 800178a:	f000 f8a9 	bl	80018e0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800178e:	f000 fae5 	bl	8001d5c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001792:	f000 fbab 	bl	8001eec <MX_TIM3_Init>
  MX_TIM4_Init();
 8001796:	f000 fbff 	bl	8001f98 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800179a:	f000 fd8b 	bl	80022b4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800179e:	f000 fd3d 	bl	800221c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80017a2:	f7ff fc47 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017a6:	f7ff fcbd 	bl	8001124 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n*** Waking up V-NOM ***\r\n");
 80017aa:	4815      	ldr	r0, [pc, #84]	@ (8001800 <main+0x88>)
 80017ac:	f009 fc90 	bl	800b0d0 <puts>
	//printf("%s", jumbo_logo_msg);

	/* ToF sensors Initialization */
	GP2Y0A41SK0F_Init(&hTof);
 80017b0:	4814      	ldr	r0, [pc, #80]	@ (8001804 <main+0x8c>)
 80017b2:	f000 feb1 	bl	8002518 <GP2Y0A41SK0F_Init>

	/* Motors task */
	xReturned = xTaskCreate(
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <main+0x90>)
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2301      	movs	r3, #1
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017c4:	4911      	ldr	r1, [pc, #68]	@ (800180c <main+0x94>)
 80017c6:	4812      	ldr	r0, [pc, #72]	@ (8001810 <main+0x98>)
 80017c8:	f007 fc2e 	bl	8009028 <xTaskCreate>
 80017cc:	6078      	str	r0, [r7, #4]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) 0, // Parameter passed into the task.
			TASK_PRIORITY_MOTOR,// Priority at which the task is created.
			&xHandle1); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff2a 	bl	8001628 <errHandler_xTaskCreate>

	/* Behaviour task */
	xReturned = xTaskCreate(
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <main+0x9c>)
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	2301      	movs	r3, #1
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <main+0xa0>)
 80017e4:	480d      	ldr	r0, [pc, #52]	@ (800181c <main+0xa4>)
 80017e6:	f007 fc1f 	bl	8009028 <xTaskCreate>
 80017ea:	6078      	str	r0, [r7, #4]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) 0, // Parameter passed into the task.
			TASK_PRIORITY_MOTOR,// Priority at which the task is created.
			&xHandle2); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff1b 	bl	8001628 <errHandler_xTaskCreate>
	ADXL343_Init(&hADXL);*/

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80017f2:	f7ff fdb1 	bl	8001358 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80017f6:	f007 fb21 	bl	8008e3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80017fa:	bf00      	nop
 80017fc:	e7fd      	b.n	80017fa <main+0x82>
 80017fe:	bf00      	nop
 8001800:	0800eb6c 	.word	0x0800eb6c
 8001804:	200002f4 	.word	0x200002f4
 8001808:	2000030c 	.word	0x2000030c
 800180c:	0800eb88 	.word	0x0800eb88
 8001810:	08001675 	.word	0x08001675
 8001814:	20000310 	.word	0x20000310
 8001818:	0800eb94 	.word	0x0800eb94
 800181c:	08001695 	.word	0x08001695

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b094      	sub	sp, #80	@ 0x50
 8001824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 0318 	add.w	r3, r7, #24
 800182a:	2238      	movs	r2, #56	@ 0x38
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f009 fd4e 	bl	800b2d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001842:	2000      	movs	r0, #0
 8001844:	f003 f8cc 	bl	80049e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001852:	2340      	movs	r3, #64	@ 0x40
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800185a:	2302      	movs	r3, #2
 800185c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800185e:	2304      	movs	r3, #4
 8001860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001862:	2355      	movs	r3, #85	@ 0x55
 8001864:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001866:	2302      	movs	r3, #2
 8001868:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800186a:	2302      	movs	r3, #2
 800186c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800186e:	2302      	movs	r3, #2
 8001870:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001872:	f107 0318 	add.w	r3, r7, #24
 8001876:	4618      	mov	r0, r3
 8001878:	f003 f966 	bl	8004b48 <HAL_RCC_OscConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001882:	f000 f827 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001886:	230f      	movs	r3, #15
 8001888:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188a:	2303      	movs	r3, #3
 800188c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2104      	movs	r1, #4
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fc64 	bl	800516c <HAL_RCC_ClockConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018aa:	f000 f813 	bl	80018d4 <Error_Handler>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3750      	adds	r7, #80	@ 0x50
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c6:	d101      	bne.n	80018cc <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c8:	f001 f89a 	bl	8002a00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <Error_Handler+0x8>

080018e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <MX_SPI1_Init+0x74>)
 80018e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001958 <MX_SPI1_Init+0x78>)
 80018e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <MX_SPI1_Init+0x74>)
 80018ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018f2:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <MX_SPI1_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f8:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <MX_SPI1_Init+0x74>)
 80018fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_SPI1_Init+0x74>)
 800190e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001912:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001916:	2228      	movs	r2, #40	@ 0x28
 8001918:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_SPI1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_SPI1_Init+0x74>)
 800192e:	2207      	movs	r2, #7
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_SPI1_Init+0x74>)
 800193a:	2208      	movs	r2, #8
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_SPI1_Init+0x74>)
 8001940:	f004 f84e 	bl	80059e0 <HAL_SPI_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800194a:	f7ff ffc3 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000314 	.word	0x20000314
 8001958:	40013000 	.word	0x40013000

0800195c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a1b      	ldr	r2, [pc, #108]	@ (80019e8 <HAL_SPI_MspInit+0x8c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d130      	bne.n	80019e0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_SPI_MspInit+0x90>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001982:	4a1a      	ldr	r2, [pc, #104]	@ (80019ec <HAL_SPI_MspInit+0x90>)
 8001984:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001988:	6613      	str	r3, [r2, #96]	@ 0x60
 800198a:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <HAL_SPI_MspInit+0x90>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_SPI_MspInit+0x90>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	4a14      	ldr	r2, [pc, #80]	@ (80019ec <HAL_SPI_MspInit+0x90>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_SPI_MspInit+0x90>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019ae:	23e0      	movs	r3, #224	@ 0xe0
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019be:	2305      	movs	r3, #5
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019cc:	f002 fe6e 	bl	80046ac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2105      	movs	r1, #5
 80019d4:	2023      	movs	r0, #35	@ 0x23
 80019d6:	f002 fd81 	bl	80044dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019da:	2023      	movs	r0, #35	@ 0x23
 80019dc:	f002 fd98 	bl	8004510 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	@ 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40013000 	.word	0x40013000
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <HAL_MspInit+0x50>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fa:	4a11      	ldr	r2, [pc, #68]	@ (8001a40 <HAL_MspInit+0x50>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a02:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <HAL_MspInit+0x50>)
 8001a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <HAL_MspInit+0x50>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a0b      	ldr	r2, [pc, #44]	@ (8001a40 <HAL_MspInit+0x50>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <HAL_MspInit+0x50>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	210f      	movs	r1, #15
 8001a2a:	f06f 0001 	mvn.w	r0, #1
 8001a2e:	f002 fd55 	bl	80044dc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a32:	f003 f879 	bl	8004b28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	@ 0x30
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001a54:	4b2d      	ldr	r3, [pc, #180]	@ (8001b0c <HAL_InitTick+0xc8>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a58:	4a2c      	ldr	r2, [pc, #176]	@ (8001b0c <HAL_InitTick+0xc8>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a60:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <HAL_InitTick+0xc8>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6c:	f107 020c 	add.w	r2, r7, #12
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 fd4c 	bl	8005514 <HAL_RCC_GetClockConfig>
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a7c:	f003 fd1e 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 8001a80:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a84:	4a22      	ldr	r2, [pc, #136]	@ (8001b10 <HAL_InitTick+0xcc>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0c9b      	lsrs	r3, r3, #18
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a90:	4b20      	ldr	r3, [pc, #128]	@ (8001b14 <HAL_InitTick+0xd0>)
 8001a92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001a98:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <HAL_InitTick+0xd0>)
 8001a9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a9e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b14 <HAL_InitTick+0xd0>)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <HAL_InitTick+0xd0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <HAL_InitTick+0xd0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8001ab2:	4818      	ldr	r0, [pc, #96]	@ (8001b14 <HAL_InitTick+0xd0>)
 8001ab4:	f004 f953 	bl	8005d5e <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001abe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11b      	bne.n	8001afe <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001ac6:	4813      	ldr	r0, [pc, #76]	@ (8001b14 <HAL_InitTick+0xd0>)
 8001ac8:	f004 f9a0 	bl	8005e0c <HAL_TIM_Base_Start_IT>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d111      	bne.n	8001afe <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ada:	201c      	movs	r0, #28
 8001adc:	f002 fd18 	bl	8004510 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b0f      	cmp	r3, #15
 8001ae4:	d808      	bhi.n	8001af8 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	201c      	movs	r0, #28
 8001aec:	f002 fcf6 	bl	80044dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af0:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <HAL_InitTick+0xd4>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e002      	b.n	8001afe <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001afe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3730      	adds	r7, #48	@ 0x30
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	431bde83 	.word	0x431bde83
 8001b14:	20000378 	.word	0x20000378
 8001b18:	20000004 	.word	0x20000004

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <NMI_Handler+0x4>

08001b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <MemManage_Handler+0x4>

08001b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b58:	4803      	ldr	r0, [pc, #12]	@ (8001b68 <ADC1_2_IRQHandler+0x14>)
 8001b5a:	f001 fc71 	bl	8003440 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001b5e:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <ADC1_2_IRQHandler+0x18>)
 8001b60:	f001 fc6e 	bl	8003440 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200001f4 	.word	0x200001f4
 8001b6c:	20000260 	.word	0x20000260

08001b70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <TIM2_IRQHandler+0x10>)
 8001b76:	f004 fc51 	bl	800641c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000378 	.word	0x20000378

08001b84 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <SPI1_IRQHandler+0x10>)
 8001b8a:	f003 ffd5 	bl	8005b38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000314 	.word	0x20000314

08001b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <USART2_IRQHandler+0x10>)
 8001b9e:	f005 ff81 	bl	8007aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000540 	.word	0x20000540

08001bac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return 1;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_kill>:

int _kill(int pid, int sig)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc6:	f009 fc2b 	bl	800b420 <__errno>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2216      	movs	r2, #22
 8001bce:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_exit>:

void _exit (int status)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ffe7 	bl	8001bbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bee:	bf00      	nop
 8001bf0:	e7fd      	b.n	8001bee <_exit+0x12>

08001bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e00a      	b.n	8001c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c04:	f3af 8000 	nop.w
 8001c08:	4601      	mov	r1, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	b2ca      	uxtb	r2, r1
 8001c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbf0      	blt.n	8001c04 <_read+0x12>
  }

  return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e009      	b.n	8001c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fc54 	bl	80014f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbf1      	blt.n	8001c3e <_write+0x12>
  }
  return len;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_close>:

int _close(int file)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_isatty>:

int _isatty(int file)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f009 fb90 	bl	800b420 <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20008000 	.word	0x20008000
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	200003c4 	.word	0x200003c4
 8001d34:	20001478 	.word	0x20001478

08001d38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <SystemInit+0x20>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d42:	4a05      	ldr	r2, [pc, #20]	@ (8001d58 <SystemInit+0x20>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b09c      	sub	sp, #112	@ 0x70
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	615a      	str	r2, [r3, #20]
 8001d8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2234      	movs	r2, #52	@ 0x34
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f009 fa9a 	bl	800b2d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d9c:	4b51      	ldr	r3, [pc, #324]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001d9e:	4a52      	ldr	r2, [pc, #328]	@ (8001ee8 <MX_TIM1_Init+0x18c>)
 8001da0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001da2:	4b50      	ldr	r3, [pc, #320]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da8:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001db0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001db4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dbc:	4b49      	ldr	r3, [pc, #292]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc2:	4b48      	ldr	r3, [pc, #288]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dc8:	4846      	ldr	r0, [pc, #280]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001dca:	f003 ffc8 	bl	8005d5e <HAL_TIM_Base_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001dd4:	f7ff fd7e 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ddc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dde:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001de2:	4619      	mov	r1, r3
 8001de4:	483f      	ldr	r0, [pc, #252]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001de6:	f004 fd7d 	bl	80068e4 <HAL_TIM_ConfigClockSource>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001df0:	f7ff fd70 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001df4:	483b      	ldr	r0, [pc, #236]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001df6:	f004 f873 	bl	8005ee0 <HAL_TIM_PWM_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e00:	f7ff fd68 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e14:	4619      	mov	r1, r3
 8001e16:	4833      	ldr	r0, [pc, #204]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001e18:	f005 fbec 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e22:	f7ff fd57 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e26:	2360      	movs	r3, #96	@ 0x60
 8001e28:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e32:	2300      	movs	r3, #0
 8001e34:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e46:	2200      	movs	r2, #0
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4826      	ldr	r0, [pc, #152]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001e4c:	f004 fc36 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e56:	f7ff fd3d 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4820      	ldr	r0, [pc, #128]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001e64:	f004 fc2a 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001e6e:	f7ff fd31 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e76:	2208      	movs	r2, #8
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481a      	ldr	r0, [pc, #104]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001e7c:	f004 fc1e 	bl	80066bc <HAL_TIM_PWM_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001e86:	f7ff fd25 	bl	80018d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ea2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001eb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4807      	ldr	r0, [pc, #28]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001ec8:	f005 fc16 	bl	80076f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001ed2:	f7ff fcff 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ed6:	4803      	ldr	r0, [pc, #12]	@ (8001ee4 <MX_TIM1_Init+0x188>)
 8001ed8:	f000 f94a 	bl	8002170 <HAL_TIM_MspPostInit>

}
 8001edc:	bf00      	nop
 8001ede:	3770      	adds	r7, #112	@ 0x70
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200003c8 	.word	0x200003c8
 8001ee8:	40012c00 	.word	0x40012c00

08001eec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	@ 0x30
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	2224      	movs	r2, #36	@ 0x24
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f009 f9e8 	bl	800b2d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	463b      	mov	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f0a:	4b21      	ldr	r3, [pc, #132]	@ (8001f90 <MX_TIM3_Init+0xa4>)
 8001f0c:	4a21      	ldr	r2, [pc, #132]	@ (8001f94 <MX_TIM3_Init+0xa8>)
 8001f0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f10:	4b1f      	ldr	r3, [pc, #124]	@ (8001f90 <MX_TIM3_Init+0xa4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <MX_TIM3_Init+0xa4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <MX_TIM3_Init+0xa4>)
 8001f1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f24:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <MX_TIM3_Init+0xa4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2a:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <MX_TIM3_Init+0xa4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f30:	2301      	movs	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480d      	ldr	r0, [pc, #52]	@ (8001f90 <MX_TIM3_Init+0xa4>)
 8001f5c:	f004 f9b8 	bl	80062d0 <HAL_TIM_Encoder_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001f66:	f7ff fcb5 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f72:	463b      	mov	r3, r7
 8001f74:	4619      	mov	r1, r3
 8001f76:	4806      	ldr	r0, [pc, #24]	@ (8001f90 <MX_TIM3_Init+0xa4>)
 8001f78:	f005 fb3c 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001f82:	f7ff fca7 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	3730      	adds	r7, #48	@ 0x30
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000414 	.word	0x20000414
 8001f94:	40000400 	.word	0x40000400

08001f98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	@ 0x30
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	2224      	movs	r2, #36	@ 0x24
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f009 f992 	bl	800b2d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fac:	463b      	mov	r3, r7
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	@ (800203c <MX_TIM4_Init+0xa4>)
 8001fb8:	4a21      	ldr	r2, [pc, #132]	@ (8002040 <MX_TIM4_Init+0xa8>)
 8001fba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <MX_TIM4_Init+0xa4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <MX_TIM4_Init+0xa4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800203c <MX_TIM4_Init+0xa4>)
 8001fca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <MX_TIM4_Init+0xa4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd6:	4b19      	ldr	r3, [pc, #100]	@ (800203c <MX_TIM4_Init+0xa4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	4619      	mov	r1, r3
 8002006:	480d      	ldr	r0, [pc, #52]	@ (800203c <MX_TIM4_Init+0xa4>)
 8002008:	f004 f962 	bl	80062d0 <HAL_TIM_Encoder_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002012:	f7ff fc5f 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800201e:	463b      	mov	r3, r7
 8002020:	4619      	mov	r1, r3
 8002022:	4806      	ldr	r0, [pc, #24]	@ (800203c <MX_TIM4_Init+0xa4>)
 8002024:	f005 fae6 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800202e:	f7ff fc51 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	3730      	adds	r7, #48	@ 0x30
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000460 	.word	0x20000460
 8002040:	40000800 	.word	0x40000800

08002044 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <HAL_TIM_Base_MspInit+0x38>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10b      	bne.n	800206e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_TIM_Base_MspInit+0x3c>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	4a09      	ldr	r2, [pc, #36]	@ (8002080 <HAL_TIM_Base_MspInit+0x3c>)
 800205c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002060:	6613      	str	r3, [r2, #96]	@ 0x60
 8002062:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <HAL_TIM_Base_MspInit+0x3c>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	@ 0x30
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002160 <HAL_TIM_Encoder_MspInit+0xdc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d128      	bne.n	80020f8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	4a28      	ldr	r2, [pc, #160]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ca:	4b26      	ldr	r3, [pc, #152]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020d6:	2330      	movs	r3, #48	@ 0x30
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020e6:	2302      	movs	r3, #2
 80020e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	481d      	ldr	r0, [pc, #116]	@ (8002168 <HAL_TIM_Encoder_MspInit+0xe4>)
 80020f2:	f002 fadb 	bl	80046ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020f6:	e02e      	b.n	8002156 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1b      	ldr	r2, [pc, #108]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d129      	bne.n	8002156 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002102:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	4a17      	ldr	r2, [pc, #92]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6593      	str	r3, [r2, #88]	@ 0x58
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	4a11      	ldr	r2, [pc, #68]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002132:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002144:	230a      	movs	r3, #10
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002152:	f002 faab 	bl	80046ac <HAL_GPIO_Init>
}
 8002156:	bf00      	nop
 8002158:	3730      	adds	r7, #48	@ 0x30
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40000400 	.word	0x40000400
 8002164:	40021000 	.word	0x40021000
 8002168:	48000400 	.word	0x48000400
 800216c:	40000800 	.word	0x40000800

08002170 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a20      	ldr	r2, [pc, #128]	@ (8002210 <HAL_TIM_MspPostInit+0xa0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d13a      	bne.n	8002208 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <HAL_TIM_MspPostInit+0xa4>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	4a1f      	ldr	r2, [pc, #124]	@ (8002214 <HAL_TIM_MspPostInit+0xa4>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <HAL_TIM_MspPostInit+0xa4>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <HAL_TIM_MspPostInit+0xa4>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ae:	4a19      	ldr	r2, [pc, #100]	@ (8002214 <HAL_TIM_MspPostInit+0xa4>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b6:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <HAL_TIM_MspPostInit+0xa4>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80021c2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80021c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021d4:	2306      	movs	r3, #6
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	480e      	ldr	r0, [pc, #56]	@ (8002218 <HAL_TIM_MspPostInit+0xa8>)
 80021e0:	f002 fa64 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80021e4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021f6:	2306      	movs	r3, #6
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002204:	f002 fa52 	bl	80046ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002208:	bf00      	nop
 800220a:	3728      	adds	r7, #40	@ 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40021000 	.word	0x40021000
 8002218:	48000400 	.word	0x48000400

0800221c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002220:	4b22      	ldr	r3, [pc, #136]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 8002222:	4a23      	ldr	r2, [pc, #140]	@ (80022b0 <MX_USART1_UART_Init+0x94>)
 8002224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002226:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 8002228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800222c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002258:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800225e:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002264:	4811      	ldr	r0, [pc, #68]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 8002266:	f005 fb3e 	bl	80078e6 <HAL_UART_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002270:	f7ff fb30 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002274:	2100      	movs	r1, #0
 8002276:	480d      	ldr	r0, [pc, #52]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 8002278:	f006 fcfd 	bl	8008c76 <HAL_UARTEx_SetTxFifoThreshold>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002282:	f7ff fb27 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002286:	2100      	movs	r1, #0
 8002288:	4808      	ldr	r0, [pc, #32]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 800228a:	f006 fd32 	bl	8008cf2 <HAL_UARTEx_SetRxFifoThreshold>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002294:	f7ff fb1e 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002298:	4804      	ldr	r0, [pc, #16]	@ (80022ac <MX_USART1_UART_Init+0x90>)
 800229a:	f006 fcb3 	bl	8008c04 <HAL_UARTEx_DisableFifoMode>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022a4:	f7ff fb16 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200004ac 	.word	0x200004ac
 80022b0:	40013800 	.word	0x40013800

080022b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022b8:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022ba:	4a23      	ldr	r2, [pc, #140]	@ (8002348 <MX_USART2_UART_Init+0x94>)
 80022bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022be:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022da:	2204      	movs	r2, #4
 80022dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ea:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022fc:	4811      	ldr	r0, [pc, #68]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 80022fe:	f005 faf2 	bl	80078e6 <HAL_UART_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002308:	f7ff fae4 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800230c:	2100      	movs	r1, #0
 800230e:	480d      	ldr	r0, [pc, #52]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 8002310:	f006 fcb1 	bl	8008c76 <HAL_UARTEx_SetTxFifoThreshold>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800231a:	f7ff fadb 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231e:	2100      	movs	r1, #0
 8002320:	4808      	ldr	r0, [pc, #32]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 8002322:	f006 fce6 	bl	8008cf2 <HAL_UARTEx_SetRxFifoThreshold>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800232c:	f7ff fad2 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	@ (8002344 <MX_USART2_UART_Init+0x90>)
 8002332:	f006 fc67 	bl	8008c04 <HAL_UARTEx_DisableFifoMode>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800233c:	f7ff faca 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000540 	.word	0x20000540
 8002348:	40004400 	.word	0x40004400

0800234c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b09e      	sub	sp, #120	@ 0x78
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002364:	f107 0320 	add.w	r3, r7, #32
 8002368:	2244      	movs	r2, #68	@ 0x44
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f008 ffaf 	bl	800b2d0 <memset>
  if(uartHandle->Instance==USART1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a4f      	ldr	r2, [pc, #316]	@ (80024b4 <HAL_UART_MspInit+0x168>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d136      	bne.n	80023ea <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800237c:	2301      	movs	r3, #1
 800237e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002384:	f107 0320 	add.w	r3, r7, #32
 8002388:	4618      	mov	r0, r3
 800238a:	f003 f939 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002394:	f7ff fa9e 	bl	80018d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002398:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 800239a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239c:	4a46      	ldr	r2, [pc, #280]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 800239e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80023a4:	4b44      	ldr	r3, [pc, #272]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 80023a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b0:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 80023b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b4:	4a40      	ldr	r2, [pc, #256]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023bc:	4b3e      	ldr	r3, [pc, #248]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 80023be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80023c8:	23c0      	movs	r3, #192	@ 0xc0
 80023ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d8:	2307      	movs	r3, #7
 80023da:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023e0:	4619      	mov	r1, r3
 80023e2:	4836      	ldr	r0, [pc, #216]	@ (80024bc <HAL_UART_MspInit+0x170>)
 80023e4:	f002 f962 	bl	80046ac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023e8:	e060      	b.n	80024ac <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a34      	ldr	r2, [pc, #208]	@ (80024c0 <HAL_UART_MspInit+0x174>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d15b      	bne.n	80024ac <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023f4:	2302      	movs	r3, #2
 80023f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023fc:	f107 0320 	add.w	r3, r7, #32
 8002400:	4618      	mov	r0, r3
 8002402:	f003 f8fd 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 800240c:	f7ff fa62 	bl	80018d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002410:	4b29      	ldr	r3, [pc, #164]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	4a28      	ldr	r2, [pc, #160]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 8002416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800241a:	6593      	str	r3, [r2, #88]	@ 0x58
 800241c:	4b26      	ldr	r3, [pc, #152]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002428:	4b23      	ldr	r3, [pc, #140]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 800242a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242c:	4a22      	ldr	r2, [pc, #136]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002434:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002440:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002444:	4a1c      	ldr	r2, [pc, #112]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244c:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <HAL_UART_MspInit+0x16c>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8002458:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800245c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800246a:	2307      	movs	r3, #7
 800246c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002472:	4619      	mov	r1, r3
 8002474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002478:	f002 f918 	bl	80046ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 800247c:	2308      	movs	r3, #8
 800247e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800248c:	2307      	movs	r3, #7
 800248e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002494:	4619      	mov	r1, r3
 8002496:	4809      	ldr	r0, [pc, #36]	@ (80024bc <HAL_UART_MspInit+0x170>)
 8002498:	f002 f908 	bl	80046ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	2105      	movs	r1, #5
 80024a0:	2026      	movs	r0, #38	@ 0x26
 80024a2:	f002 f81b 	bl	80044dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024a6:	2026      	movs	r0, #38	@ 0x26
 80024a8:	f002 f832 	bl	8004510 <HAL_NVIC_EnableIRQ>
}
 80024ac:	bf00      	nop
 80024ae:	3778      	adds	r7, #120	@ 0x78
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40013800 	.word	0x40013800
 80024b8:	40021000 	.word	0x40021000
 80024bc:	48000400 	.word	0x48000400
 80024c0:	40004400 	.word	0x40004400

080024c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024c4:	480d      	ldr	r0, [pc, #52]	@ (80024fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024c8:	f7ff fc36 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024cc:	480c      	ldr	r0, [pc, #48]	@ (8002500 <LoopForever+0x6>)
  ldr r1, =_edata
 80024ce:	490d      	ldr	r1, [pc, #52]	@ (8002504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <LoopForever+0xe>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e2:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <LoopForever+0x12>)
  ldr r4, =_ebss
 80024e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002510 <LoopForever+0x16>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80024f2:	f008 ff9b 	bl	800b42c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024f6:	f7ff f93f 	bl	8001778 <main>

080024fa <LoopForever>:

LoopForever:
    b LoopForever
 80024fa:	e7fe      	b.n	80024fa <LoopForever>
  ldr   r0, =_estack
 80024fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002504:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002508:	0800f068 	.word	0x0800f068
  ldr r2, =_sbss
 800250c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002510:	20001478 	.word	0x20001478

08002514 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <COMP1_2_3_IRQHandler>
	...

08002518 <GP2Y0A41SK0F_Init>:

/**
 * @brief Initialize the GP2Y0A41SK0F sensors.
 * @param htof Pointer to the GP2Y0A41SK0F handle structure.
 */
void GP2Y0A41SK0F_Init(h_GP2Y0A41SK0F_t *htof) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
    // Assign ADC handles
    htof->hadc1 = &hadc1; // For ToF1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <GP2Y0A41SK0F_Init+0x44>)
 8002524:	601a      	str	r2, [r3, #0]
    htof->hadc2 = &hadc2; // For ToF2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <GP2Y0A41SK0F_Init+0x48>)
 800252a:	605a      	str	r2, [r3, #4]

    // Initialize ADC1
    if (HAL_ADC_Init(htof->hadc1) != HAL_OK) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fcc3 	bl	8002ebc <HAL_ADC_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <GP2Y0A41SK0F_Init+0x28>
        Error_Handler();
 800253c:	f7ff f9ca 	bl	80018d4 <Error_Handler>
    }

    // Initialize ADC2
    if (HAL_ADC_Init(htof->hadc2) != HAL_OK) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fcb9 	bl	8002ebc <HAL_ADC_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <GP2Y0A41SK0F_Init+0x3c>
        Error_Handler();
 8002550:	f7ff f9c0 	bl	80018d4 <Error_Handler>
    }
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200001f4 	.word	0x200001f4
 8002560:	20000260 	.word	0x20000260

08002564 <GP2Y0A41SK0F_Start_Interrupt>:

/**
 * @brief Start ADC conversion using interrupts.
 * @param htof Pointer to the GP2Y0A41SK0F handle structure.
 */
void GP2Y0A41SK0F_Start_Interrupt(h_GP2Y0A41SK0F_t *htof) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Start ADC1 in interrupt mode
    status = HAL_ADC_Start_IT(htof->hadc1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fe27 	bl	80031c4 <HAL_ADC_Start_IT>
 8002576:	4603      	mov	r3, r0
 8002578:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <GP2Y0A41SK0F_Start_Interrupt+0x2a>
        printf("ADC1 Interrupt Start Error: %d\n", status);
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <GP2Y0A41SK0F_Start_Interrupt+0x54>)
 8002586:	f008 fd3b 	bl	800b000 <iprintf>
        Error_Handler();
 800258a:	f7ff f9a3 	bl	80018d4 <Error_Handler>
    }

    // Start ADC2 in interrupt mode
    status = HAL_ADC_Start_IT(htof->hadc2);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fe16 	bl	80031c4 <HAL_ADC_Start_IT>
 8002598:	4603      	mov	r3, r0
 800259a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <GP2Y0A41SK0F_Start_Interrupt+0x4c>
        printf("ADC2 Interrupt Start Error: %d\n", status);
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4805      	ldr	r0, [pc, #20]	@ (80025bc <GP2Y0A41SK0F_Start_Interrupt+0x58>)
 80025a8:	f008 fd2a 	bl	800b000 <iprintf>
        Error_Handler();
 80025ac:	f7ff f992 	bl	80018d4 <Error_Handler>
    }
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	0800eba4 	.word	0x0800eba4
 80025bc:	0800ebc4 	.word	0x0800ebc4

080025c0 <GP2Y0A41SK0F_get_distance1>:
}

/**
 * @brief Compute distances for ToF1 based on ADC readings.
 */
void GP2Y0A41SK0F_get_distance1(h_GP2Y0A41SK0F_t *htof) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    const float a = 120;
 80025c8:	4b23      	ldr	r3, [pc, #140]	@ (8002658 <GP2Y0A41SK0F_get_distance1+0x98>)
 80025ca:	617b      	str	r3, [r7, #20]
    const float b = 0.03;
 80025cc:	4b23      	ldr	r3, [pc, #140]	@ (800265c <GP2Y0A41SK0F_get_distance1+0x9c>)
 80025ce:	613b      	str	r3, [r7, #16]

    float Vo1 = (GP2Y0A41SK0F_ADC_VCC * htof->adc_val_tof1) / GP2Y0A41SK0F_ADC_MAX_VALUE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd ffbd 	bl	8000554 <__aeabi_ui2d>
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <GP2Y0A41SK0F_get_distance1+0xa0>)
 80025e0:	f7fe f832 	bl	8000648 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	a318      	add	r3, pc, #96	@ (adr r3, 8002650 <GP2Y0A41SK0F_get_distance1+0x90>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fe f953 	bl	800089c <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fb1b 	bl	8000c38 <__aeabi_d2f>
 8002602:	4603      	mov	r3, r0
 8002604:	60fb      	str	r3, [r7, #12]
    if (Vo1 > b) {
 8002606:	ed97 7a03 	vldr	s14, [r7, #12]
 800260a:	edd7 7a04 	vldr	s15, [r7, #16]
 800260e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002616:	dd10      	ble.n	800263a <GP2Y0A41SK0F_get_distance1+0x7a>
        htof->distance_tof1 = (int)(a / (Vo1 - b));
 8002618:	ed97 7a03 	vldr	s14, [r7, #12]
 800261c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002620:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002624:	edd7 6a05 	vldr	s13, [r7, #20]
 8002628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002630:	ee17 2a90 	vmov	r2, s15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	611a      	str	r2, [r3, #16]
    } else {
        htof->distance_tof1 = -1; // Invalid distance
    }
}
 8002638:	e003      	b.n	8002642 <GP2Y0A41SK0F_get_distance1+0x82>
        htof->distance_tof1 = -1; // Invalid distance
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002640:	611a      	str	r2, [r3, #16]
}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	f3af 8000 	nop.w
 8002650:	00000000 	.word	0x00000000
 8002654:	40affe00 	.word	0x40affe00
 8002658:	42f00000 	.word	0x42f00000
 800265c:	3cf5c28f 	.word	0x3cf5c28f
 8002660:	40140000 	.word	0x40140000
 8002664:	00000000 	.word	0x00000000

08002668 <GP2Y0A41SK0F_get_distance2>:

/**
 * @brief Compute distances for ToF2 based on ADC readings.
 */
void GP2Y0A41SK0F_get_distance2(h_GP2Y0A41SK0F_t *htof) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    const float a = 120;
 8002670:	4b23      	ldr	r3, [pc, #140]	@ (8002700 <GP2Y0A41SK0F_get_distance2+0x98>)
 8002672:	617b      	str	r3, [r7, #20]
    const float b = 0.03;
 8002674:	4b23      	ldr	r3, [pc, #140]	@ (8002704 <GP2Y0A41SK0F_get_distance2+0x9c>)
 8002676:	613b      	str	r3, [r7, #16]

    float Vo2 = (GP2Y0A41SK0F_ADC_VCC * htof->adc_val_tof2) / GP2Y0A41SK0F_ADC_MAX_VALUE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff69 	bl	8000554 <__aeabi_ui2d>
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <GP2Y0A41SK0F_get_distance2+0xa0>)
 8002688:	f7fd ffde 	bl	8000648 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	a318      	add	r3, pc, #96	@ (adr r3, 80026f8 <GP2Y0A41SK0F_get_distance2+0x90>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	f7fe f8ff 	bl	800089c <__aeabi_ddiv>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	f7fe fac7 	bl	8000c38 <__aeabi_d2f>
 80026aa:	4603      	mov	r3, r0
 80026ac:	60fb      	str	r3, [r7, #12]
    if (Vo2 > b) {
 80026ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80026b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80026b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	dd10      	ble.n	80026e2 <GP2Y0A41SK0F_get_distance2+0x7a>
        htof->distance_tof2 = (int)(a / (Vo2 - b));
 80026c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80026c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026cc:	edd7 6a05 	vldr	s13, [r7, #20]
 80026d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d8:	ee17 2a90 	vmov	r2, s15
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	615a      	str	r2, [r3, #20]
    } else {
        htof->distance_tof2 = -1; // Invalid distance
    }
}
 80026e0:	e003      	b.n	80026ea <GP2Y0A41SK0F_get_distance2+0x82>
        htof->distance_tof2 = -1; // Invalid distance
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026e8:	615a      	str	r2, [r3, #20]
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	f3af 8000 	nop.w
 80026f8:	00000000 	.word	0x00000000
 80026fc:	40affe00 	.word	0x40affe00
 8002700:	42f00000 	.word	0x42f00000
 8002704:	3cf5c28f 	.word	0x3cf5c28f
 8002708:	40140000 	.word	0x40140000

0800270c <Motor_Init>:
/**
 * @brief Initialize the motors.
 * @param hMotors Pointer to the motor handle structure.
 * @param htim Pointer to the timer handle used for PWM control.
 */
void Motor_Init(h_Motor_t * hMotors, TIM_HandleTypeDef * htim) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
	// Allows to get direct parameters from the timer used
	hMotors->htim = htim;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	61da      	str	r2, [r3, #28]
	hMotors->speed_increase_rate1 = 10;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	220a      	movs	r2, #10
 8002720:	615a      	str	r2, [r3, #20]
	hMotors->speed_increase_rate2 = 10;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	220a      	movs	r2, #10
 8002726:	619a      	str	r2, [r3, #24]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002728:	4b1f      	ldr	r3, [pc, #124]	@ (80027a8 <Motor_Init+0x9c>)
 800272a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272c:	4a1e      	ldr	r2, [pc, #120]	@ (80027a8 <Motor_Init+0x9c>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002734:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <Motor_Init+0x9c>)
 8002736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002740:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <Motor_Init+0x9c>)
 8002742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002744:	4a18      	ldr	r2, [pc, #96]	@ (80027a8 <Motor_Init+0x9c>)
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800274c:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <Motor_Init+0x9c>)
 800274e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]

	MX_TIM1_Init();
 8002758:	f7ff fb00 	bl	8001d5c <MX_TIM1_Init>
	//MX_TIM2_Init();

	HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fc1e 	bl	8005fa4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_2);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2104      	movs	r1, #4
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fc18 	bl	8005fa4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fe28 	bl	80073d0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2104      	movs	r1, #4
 8002786:	4618      	mov	r0, r3
 8002788:	f004 fe22 	bl	80073d0 <HAL_TIMEx_PWMN_Start>

	hMotors->mode_mot1 = STANDBY_MODE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
	hMotors->mode_mot2 = STANDBY_MODE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	705a      	strb	r2, [r3, #1]
	Motor_SetMode(hMotors);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f807 	bl	80027ac <Motor_SetMode>
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <Motor_SetMode>:
/**
 * @brief Set the operating mode of the motors.
 * @param hMotors Pointer to the motor handle structure.
 */
void Motor_SetMode(h_Motor_t * hMotors)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	switch (hMotors->mode_mot1) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d002      	beq.n	80027c2 <Motor_SetMode+0x16>
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d00d      	beq.n	80027dc <Motor_SetMode+0x30>
 80027c0:	e019      	b.n	80027f6 <Motor_SetMode+0x4a>
	case FORWARD_MODE:
		DEBUG_PRINT("Mot1: FORWARD_MODE\r\n");
		HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_1);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f003 fbeb 	bl	8005fa4 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f004 feaf 	bl	8007538 <HAL_TIMEx_PWMN_Stop>
		break;
 80027da:	e01e      	b.n	800281a <Motor_SetMode+0x6e>

	case REVERSE_MODE:
		DEBUG_PRINT("Mot1: REVERSE_MODE\r\n");
		HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 fdf4 	bl	80073d0 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 fcd8 	bl	80061a4 <HAL_TIM_PWM_Stop>
		break;
 80027f4:	e011      	b.n	800281a <Motor_SetMode+0x6e>

	case STANDBY_MODE:
	default:
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f004 fe9b 	bl	8007538 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f003 fccb 	bl	80061a4 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_1, 0);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8002818:	bf00      	nop
	}

	switch (hMotors->mode_mot2) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d002      	beq.n	8002828 <Motor_SetMode+0x7c>
 8002822:	2b02      	cmp	r3, #2
 8002824:	d00d      	beq.n	8002842 <Motor_SetMode+0x96>
 8002826:	e019      	b.n	800285c <Motor_SetMode+0xb0>
	case FORWARD_MODE:
		DEBUG_PRINT("Mot2: FORWARD_MODE\r\n");
		HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_2);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2104      	movs	r1, #4
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fbb8 	bl	8005fa4 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2104      	movs	r1, #4
 800283a:	4618      	mov	r0, r3
 800283c:	f004 fe7c 	bl	8007538 <HAL_TIMEx_PWMN_Stop>
		break;
 8002840:	e01e      	b.n	8002880 <Motor_SetMode+0xd4>

	case REVERSE_MODE:
		DEBUG_PRINT("Mot2: REVERSE_MODE\r\n");
		HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_2);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	2104      	movs	r1, #4
 8002848:	4618      	mov	r0, r3
 800284a:	f004 fdc1 	bl	80073d0 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_2);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2104      	movs	r1, #4
 8002854:	4618      	mov	r0, r3
 8002856:	f003 fca5 	bl	80061a4 <HAL_TIM_PWM_Stop>
		break;
 800285a:	e011      	b.n	8002880 <Motor_SetMode+0xd4>

	case STANDBY_MODE:
	default:
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_2);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	2104      	movs	r1, #4
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fe68 	bl	8007538 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2104      	movs	r1, #4
 800286e:	4618      	mov	r0, r3
 8002870:	f003 fc98 	bl	80061a4 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_2, 0);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 800287e:	bf00      	nop
	}
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <Motor_SetSpeed_percent>:
 * @brief Set the speed of the motors as a percentage of maximum speed.
 * @param hMotor Pointer to the motor handle structure.
 * @param percent1 Speed percentage for motor 1 (0.0 to 100.0).
 * @param percent2 Speed percentage for motor 2 (0.0 to 100.0).
 */
void Motor_SetSpeed_percent(h_Motor_t * hMotor, float percent1, float percent2) {
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	ed87 0a02 	vstr	s0, [r7, #8]
 8002894:	edc7 0a01 	vstr	s1, [r7, #4]
	hMotor->speed1 = (int)(MOTOR1_REV_DIFF * hMotor->htim->Init.Period * percent1/100.0);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe58 	bl	8000554 <__aeabi_ui2d>
 80028a4:	a323      	add	r3, pc, #140	@ (adr r3, 8002934 <Motor_SetSpeed_percent+0xac>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fecd 	bl	8000648 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4614      	mov	r4, r2
 80028b4:	461d      	mov	r5, r3
 80028b6:	68b8      	ldr	r0, [r7, #8]
 80028b8:	f7fd fe6e 	bl	8000598 <__aeabi_f2d>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4620      	mov	r0, r4
 80028c2:	4629      	mov	r1, r5
 80028c4:	f7fd fec0 	bl	8000648 <__aeabi_dmul>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4b16      	ldr	r3, [pc, #88]	@ (8002930 <Motor_SetSpeed_percent+0xa8>)
 80028d6:	f7fd ffe1 	bl	800089c <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f961 	bl	8000ba8 <__aeabi_d2iz>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]
	hMotor->speed2 = (int)(hMotor->htim->Init.Period * percent2/100.0);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80028fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002902:	ee17 0a90 	vmov	r0, s15
 8002906:	f7fd fe47 	bl	8000598 <__aeabi_f2d>
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <Motor_SetSpeed_percent+0xa8>)
 8002910:	f7fd ffc4 	bl	800089c <__aeabi_ddiv>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f7fe f944 	bl	8000ba8 <__aeabi_d2iz>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	609a      	str	r2, [r3, #8]
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bdb0      	pop	{r4, r5, r7, pc}
 800292e:	bf00      	nop
 8002930:	40590000 	.word	0x40590000
 8002934:	33333333 	.word	0x33333333
 8002938:	3feb3333 	.word	0x3feb3333

0800293c <Motor_UpdateSpeed>:

/**
 * @brief Update motor speeds gradually to achieve smoother transitions.
 * @param hMotor Pointer to the motor handle structure.
 */
void Motor_UpdateSpeed(h_Motor_t * hMotors) {
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	// Increase speed progressively
	if (hMotors->speed1 > hMotors->current_speed1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	dd06      	ble.n	800295e <Motor_UpdateSpeed+0x22>
		hMotors->current_speed1 += hMotors->speed_increase_rate1;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	441a      	add	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60da      	str	r2, [r3, #12]
	if (hMotors->speed2 > hMotors->current_speed2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	429a      	cmp	r2, r3
 8002968:	dd06      	ble.n	8002978 <Motor_UpdateSpeed+0x3c>
		hMotors->current_speed2 += hMotors->speed_increase_rate2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	441a      	add	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]

	// Decrease speed progressively
	if (hMotors->speed1 < hMotors->current_speed1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	da06      	bge.n	8002992 <Motor_UpdateSpeed+0x56>
		hMotors->current_speed1 -= hMotors->speed_increase_rate1;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	1ad2      	subs	r2, r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60da      	str	r2, [r3, #12]
	if (hMotors->speed2 < hMotors->current_speed2)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	429a      	cmp	r2, r3
 800299c:	da06      	bge.n	80029ac <Motor_UpdateSpeed+0x70>
		hMotors->current_speed2 -= hMotors->speed_increase_rate2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	611a      	str	r2, [r3, #16]

	__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_1, hMotors->current_speed1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_2, hMotors->current_speed2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029da:	2003      	movs	r0, #3
 80029dc:	f001 fd73 	bl	80044c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029e0:	200f      	movs	r0, #15
 80029e2:	f7ff f82f 	bl	8001a44 <HAL_InitTick>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	e001      	b.n	80029f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029f2:	f7fe fffd 	bl	80019f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029f6:	79fb      	ldrb	r3, [r7, #7]

}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a04:	4b05      	ldr	r3, [pc, #20]	@ (8002a1c <HAL_IncTick+0x1c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_IncTick+0x20>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4a03      	ldr	r2, [pc, #12]	@ (8002a1c <HAL_IncTick+0x1c>)
 8002a10:	6013      	str	r3, [r2, #0]
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	200005d4 	.word	0x200005d4
 8002a20:	20000008 	.word	0x20000008

08002a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return uwTick;
 8002a28:	4b03      	ldr	r3, [pc, #12]	@ (8002a38 <HAL_GetTick+0x14>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	200005d4 	.word	0x200005d4

08002a3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	609a      	str	r2, [r3, #8]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3360      	adds	r3, #96	@ 0x60
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <LL_ADC_SetOffset+0x44>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	03fff000 	.word	0x03fff000

08002aec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3360      	adds	r3, #96	@ 0x60
 8002afa:	461a      	mov	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3360      	adds	r3, #96	@ 0x60
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b087      	sub	sp, #28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3360      	adds	r3, #96	@ 0x60
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3360      	adds	r3, #96	@ 0x60
 8002b94:	461a      	mov	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	615a      	str	r2, [r3, #20]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b087      	sub	sp, #28
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3330      	adds	r3, #48	@ 0x30
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	4413      	add	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	211f      	movs	r1, #31
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	401a      	ands	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0e9b      	lsrs	r3, r3, #26
 8002c3e:	f003 011f 	and.w	r1, r3, #31
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3314      	adds	r3, #20
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	0e5b      	lsrs	r3, r3, #25
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	0d1b      	lsrs	r3, r3, #20
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	2107      	movs	r1, #7
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	401a      	ands	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	0d1b      	lsrs	r3, r3, #20
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0318 	and.w	r3, r3, #24
 8002cfe:	4908      	ldr	r1, [pc, #32]	@ (8002d20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d00:	40d9      	lsrs	r1, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	400b      	ands	r3, r1
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	0007ffff 	.word	0x0007ffff

08002d24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 031f 	and.w	r3, r3, #31
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6093      	str	r3, [r2, #8]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d94:	d101      	bne.n	8002d9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002db8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002de4:	d101      	bne.n	8002dea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <LL_ADC_IsEnabled+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_ADC_IsEnabled+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d101      	bne.n	8002e86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d101      	bne.n	8002eac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e167      	b.n	80031a6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fe f983 	bl	80011f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff3f 	bl	8002d80 <LL_ADC_IsDeepPowerDownEnabled>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff25 	bl	8002d5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff5a 	bl	8002dd0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d115      	bne.n	8002f4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff3e 	bl	8002da8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f2c:	4ba0      	ldr	r3, [pc, #640]	@ (80031b0 <HAL_ADC_Init+0x2f4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	4aa0      	ldr	r2, [pc, #640]	@ (80031b4 <HAL_ADC_Init+0x2f8>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f40:	e002      	b.n	8002f48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f9      	bne.n	8002f42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff3c 	bl	8002dd0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	f043 0210 	orr.w	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6e:	f043 0201 	orr.w	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff75 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 8002f84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 8100 	bne.w	8003194 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 80fc 	bne.w	8003194 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fa4:	f043 0202 	orr.w	r2, r3, #2
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff35 	bl	8002e20 <LL_ADC_IsEnabled>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d111      	bne.n	8002fe0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fbc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fc0:	f7ff ff2e 	bl	8002e20 <LL_ADC_IsEnabled>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	487c      	ldr	r0, [pc, #496]	@ (80031b8 <HAL_ADC_Init+0x2fc>)
 8002fc8:	f7ff ff2a 	bl	8002e20 <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4323      	orrs	r3, r4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4878      	ldr	r0, [pc, #480]	@ (80031bc <HAL_ADC_Init+0x300>)
 8002fdc:	f7ff fd2e 	bl	8002a3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7f5b      	ldrb	r3, [r3, #29]
 8002fe4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ff0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ff6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ffe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800300a:	2b01      	cmp	r3, #1
 800300c:	d106      	bne.n	800301c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	3b01      	subs	r3, #1
 8003014:	045b      	lsls	r3, r3, #17
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d009      	beq.n	8003038 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	4b60      	ldr	r3, [pc, #384]	@ (80031c0 <HAL_ADC_Init+0x304>)
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	69b9      	ldr	r1, [r7, #24]
 8003048:	430b      	orrs	r3, r1
 800304a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ff14 	bl	8002e94 <LL_ADC_INJ_IsConversionOngoing>
 800306c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d16d      	bne.n	8003150 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d16a      	bne.n	8003150 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800307e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003086:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003096:	f023 0302 	bic.w	r3, r3, #2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d017      	beq.n	80030dc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6911      	ldr	r1, [r2, #16]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030da:	e013      	b.n	8003104 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003100:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800310a:	2b01      	cmp	r3, #1
 800310c:	d118      	bne.n	8003140 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800312a:	4311      	orrs	r1, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003130:	430a      	orrs	r2, r1
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	e007      	b.n	8003150 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d10c      	bne.n	8003172 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	f023 010f 	bic.w	r1, r3, #15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003170:	e007      	b.n	8003182 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 020f 	bic.w	r2, r2, #15
 8003180:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003192:	e007      	b.n	80031a4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	@ 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000
 80031b4:	053e2d63 	.word	0x053e2d63
 80031b8:	50000100 	.word	0x50000100
 80031bc:	50000300 	.word	0x50000300
 80031c0:	fff04007 	.word	0xfff04007

080031c4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031cc:	4893      	ldr	r0, [pc, #588]	@ (800341c <HAL_ADC_Start_IT+0x258>)
 80031ce:	f7ff fda9 	bl	8002d24 <LL_ADC_GetMultimode>
 80031d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fe48 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 8113 	bne.w	800340c <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_Start_IT+0x30>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e10e      	b.n	8003412 <HAL_ADC_Start_IT+0x24e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 ff33 	bl	8004068 <ADC_Enable>
 8003202:	4603      	mov	r3, r0
 8003204:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f040 80fa 	bne.w	8003402 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7e      	ldr	r2, [pc, #504]	@ (8003420 <HAL_ADC_Start_IT+0x25c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d002      	beq.n	8003232 <HAL_ADC_Start_IT+0x6e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	e001      	b.n	8003236 <HAL_ADC_Start_IT+0x72>
 8003232:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	4293      	cmp	r3, r2
 800323c:	d002      	beq.n	8003244 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003260:	f023 0206 	bic.w	r2, r3, #6
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	661a      	str	r2, [r3, #96]	@ 0x60
 8003268:	e002      	b.n	8003270 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	221c      	movs	r2, #28
 8003276:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 021c 	bic.w	r2, r2, #28
 800328e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d108      	bne.n	80032aa <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0208 	orr.w	r2, r2, #8
 80032a6:	605a      	str	r2, [r3, #4]
          break;
 80032a8:	e008      	b.n	80032bc <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0204 	orr.w	r2, r2, #4
 80032b8:	605a      	str	r2, [r3, #4]
          break;
 80032ba:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0210 	orr.w	r2, r2, #16
 80032d2:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a51      	ldr	r2, [pc, #324]	@ (8003420 <HAL_ADC_Start_IT+0x25c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d002      	beq.n	80032e4 <HAL_ADC_Start_IT+0x120>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	e001      	b.n	80032e8 <HAL_ADC_Start_IT+0x124>
 80032e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d008      	beq.n	8003302 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d002      	beq.n	8003302 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b09      	cmp	r3, #9
 8003300:	d13a      	bne.n	8003378 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d02d      	beq.n	800336c <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003318:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d110      	bne.n	800334a <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0220 	bic.w	r2, r2, #32
 8003336:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003346:	605a      	str	r2, [r3, #4]
              break;
 8003348:	e010      	b.n	800336c <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003358:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0220 	orr.w	r2, r2, #32
 8003368:	605a      	str	r2, [r3, #4]
              break;
 800336a:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fd68 	bl	8002e46 <LL_ADC_REG_StartConversion>
 8003376:	e04b      	b.n	8003410 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a25      	ldr	r2, [pc, #148]	@ (8003420 <HAL_ADC_Start_IT+0x25c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d002      	beq.n	8003394 <HAL_ADC_Start_IT+0x1d0>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	e001      	b.n	8003398 <HAL_ADC_Start_IT+0x1d4>
 8003394:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003398:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d034      	beq.n	8003410 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d110      	bne.n	80033e0 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0220 	bic.w	r2, r2, #32
 80033cc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033dc:	605a      	str	r2, [r3, #4]
              break;
 80033de:	e017      	b.n	8003410 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ee:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0220 	orr.w	r2, r2, #32
 80033fe:	605a      	str	r2, [r3, #4]
              break;
 8003400:	e006      	b.n	8003410 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800340a:	e001      	b.n	8003410 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800340c:	2302      	movs	r3, #2
 800340e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003410:	7dfb      	ldrb	r3, [r7, #23]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	50000300 	.word	0x50000300
 8003420:	50000100 	.word	0x50000100

08003424 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	@ 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800345c:	4883      	ldr	r0, [pc, #524]	@ (800366c <HAL_ADC_IRQHandler+0x22c>)
 800345e:	f7ff fc61 	bl	8002d24 <LL_ADC_GetMultimode>
 8003462:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d017      	beq.n	800349e <HAL_ADC_IRQHandler+0x5e>
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003488:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 febd 	bl	8004210 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2202      	movs	r2, #2
 800349c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_ADC_IRQHandler+0x72>
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8085 	beq.w	80035c8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d07f      	beq.n	80035c8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fb7b 	bl	8002be0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d064      	beq.n	80035ba <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a5e      	ldr	r2, [pc, #376]	@ (8003670 <HAL_ADC_IRQHandler+0x230>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d002      	beq.n	8003500 <HAL_ADC_IRQHandler+0xc0>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	e001      	b.n	8003504 <HAL_ADC_IRQHandler+0xc4>
 8003500:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	4293      	cmp	r3, r2
 800350a:	d008      	beq.n	800351e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b05      	cmp	r3, #5
 8003516:	d002      	beq.n	800351e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b09      	cmp	r3, #9
 800351c:	d104      	bne.n	8003528 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	e00d      	b.n	8003544 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a50      	ldr	r2, [pc, #320]	@ (8003670 <HAL_ADC_IRQHandler+0x230>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d002      	beq.n	8003538 <HAL_ADC_IRQHandler+0xf8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	e001      	b.n	800353c <HAL_ADC_IRQHandler+0xfc>
 8003538:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800353c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d135      	bne.n	80035ba <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b08      	cmp	r3, #8
 800355a:	d12e      	bne.n	80035ba <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fc84 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11a      	bne.n	80035a2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 020c 	bic.w	r2, r2, #12
 800357a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003580:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d112      	bne.n	80035ba <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035a0:	e00b      	b.n	80035ba <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a6:	f043 0210 	orr.w	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b2:	f043 0201 	orr.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fff0 	bl	80015a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	220c      	movs	r2, #12
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <HAL_ADC_IRQHandler+0x19c>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 809e 	beq.w	8003724 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8098 	beq.w	8003724 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003604:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fb24 	bl	8002c5e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003616:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fadf 	bl	8002be0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003622:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a11      	ldr	r2, [pc, #68]	@ (8003670 <HAL_ADC_IRQHandler+0x230>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d002      	beq.n	8003634 <HAL_ADC_IRQHandler+0x1f4>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	e001      	b.n	8003638 <HAL_ADC_IRQHandler+0x1f8>
 8003634:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	4293      	cmp	r3, r2
 800363e:	d008      	beq.n	8003652 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b06      	cmp	r3, #6
 800364a:	d002      	beq.n	8003652 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b07      	cmp	r3, #7
 8003650:	d104      	bne.n	800365c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	623b      	str	r3, [r7, #32]
 800365a:	e011      	b.n	8003680 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a03      	ldr	r2, [pc, #12]	@ (8003670 <HAL_ADC_IRQHandler+0x230>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d006      	beq.n	8003674 <HAL_ADC_IRQHandler+0x234>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	e005      	b.n	8003678 <HAL_ADC_IRQHandler+0x238>
 800366c:	50000300 	.word	0x50000300
 8003670:	50000100 	.word	0x50000100
 8003674:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003678:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d047      	beq.n	8003716 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x260>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d03f      	beq.n	8003716 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800369c:	2b00      	cmp	r3, #0
 800369e:	d13a      	bne.n	8003716 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036aa:	2b40      	cmp	r3, #64	@ 0x40
 80036ac:	d133      	bne.n	8003716 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d12e      	bne.n	8003716 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fbe9 	bl	8002e94 <LL_ADC_INJ_IsConversionOngoing>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d11a      	bne.n	80036fe <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036d6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d112      	bne.n	8003716 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036fc:	e00b      	b.n	8003716 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003702:	f043 0210 	orr.w	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fd52 	bl	80041c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2260      	movs	r2, #96	@ 0x60
 8003722:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d011      	beq.n	8003752 <HAL_ADC_IRQHandler+0x312>
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f895 	bl	8003874 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2280      	movs	r2, #128	@ 0x80
 8003750:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <HAL_ADC_IRQHandler+0x342>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00d      	beq.n	8003782 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fd38 	bl	80041e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003780:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003788:	2b00      	cmp	r3, #0
 800378a:	d012      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x372>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00d      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fd2a 	bl	80041fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d036      	beq.n	800382a <HAL_ADC_IRQHandler+0x3ea>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d031      	beq.n	800382a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80037ce:	2301      	movs	r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d2:	e014      	b.n	80037fe <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037da:	4825      	ldr	r0, [pc, #148]	@ (8003870 <HAL_ADC_IRQHandler+0x430>)
 80037dc:	f7ff fab0 	bl	8002d40 <LL_ADC_GetMultiDMATransfer>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80037e6:	2301      	movs	r3, #1
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ea:	e008      	b.n	80037fe <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80037fa:	2301      	movs	r3, #1
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	2b01      	cmp	r3, #1
 8003802:	d10e      	bne.n	8003822 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003808:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003814:	f043 0202 	orr.w	r2, r3, #2
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fd fee9 	bl	80015f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2210      	movs	r2, #16
 8003828:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d018      	beq.n	8003866 <HAL_ADC_IRQHandler+0x426>
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383a:	2b00      	cmp	r3, #0
 800383c:	d013      	beq.n	8003866 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384e:	f043 0208 	orr.w	r2, r3, #8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800385e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fcb7 	bl	80041d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003866:	bf00      	nop
 8003868:	3728      	adds	r7, #40	@ 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	50000300 	.word	0x50000300

08003874 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b0b6      	sub	sp, #216	@ 0xd8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x22>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e3c8      	b.n	800403c <HAL_ADC_ConfigChannel+0x7b4>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fad9 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f040 83ad 	bne.w	800401e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6859      	ldr	r1, [r3, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	f7ff f998 	bl	8002c06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fac7 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 80038e0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fad3 	bl	8002e94 <LL_ADC_INJ_IsConversionOngoing>
 80038ee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 81d9 	bne.w	8003cae <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003900:	2b00      	cmp	r3, #0
 8003902:	f040 81d4 	bne.w	8003cae <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800390e:	d10f      	bne.n	8003930 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2200      	movs	r2, #0
 800391a:	4619      	mov	r1, r3
 800391c:	f7ff f9b2 	bl	8002c84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff f946 	bl	8002bba <LL_ADC_SetSamplingTimeCommonConfig>
 800392e:	e00e      	b.n	800394e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	461a      	mov	r2, r3
 800393e:	f7ff f9a1 	bl	8002c84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f936 	bl	8002bba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	08db      	lsrs	r3, r3, #3
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d022      	beq.n	80039b6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	6919      	ldr	r1, [r3, #16]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003980:	f7ff f890 	bl	8002aa4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6919      	ldr	r1, [r3, #16]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	461a      	mov	r2, r3
 8003992:	f7ff f8dc 	bl	8002b4e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d102      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x124>
 80039a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039aa:	e000      	b.n	80039ae <HAL_ADC_ConfigChannel+0x126>
 80039ac:	2300      	movs	r3, #0
 80039ae:	461a      	mov	r2, r3
 80039b0:	f7ff f8e8 	bl	8002b84 <LL_ADC_SetOffsetSaturation>
 80039b4:	e17b      	b.n	8003cae <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2100      	movs	r1, #0
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff f895 	bl	8002aec <LL_ADC_GetOffsetChannel>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x15a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff f88a 	bl	8002aec <LL_ADC_GetOffsetChannel>
 80039d8:	4603      	mov	r3, r0
 80039da:	0e9b      	lsrs	r3, r3, #26
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	e01e      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x198>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff f87f 	bl	8002aec <LL_ADC_GetOffsetChannel>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80039f8:	fa93 f3a3 	rbit	r3, r3
 80039fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003a10:	2320      	movs	r3, #32
 8003a12:	e004      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003a14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x1b0>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	0e9b      	lsrs	r3, r3, #26
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	e018      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x1e2>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a44:	fa93 f3a3 	rbit	r3, r3
 8003a48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003a4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003a54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e004      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003a60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d106      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2200      	movs	r2, #0
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff f84e 	bl	8002b18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2101      	movs	r1, #1
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff f832 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x220>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f827 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	0e9b      	lsrs	r3, r3, #26
 8003aa2:	f003 021f 	and.w	r2, r3, #31
 8003aa6:	e01e      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x25e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff f81c 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003aca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003ace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003ad6:	2320      	movs	r3, #32
 8003ad8:	e004      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003ada:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ade:	fab3 f383 	clz	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d105      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x276>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	0e9b      	lsrs	r3, r3, #26
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	e018      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x2a8>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003b12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003b22:	2320      	movs	r3, #32
 8003b24:	e004      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003b26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d106      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe ffeb 	bl	8002b18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2102      	movs	r1, #2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe ffcf 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x2e6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2102      	movs	r1, #2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe ffc4 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003b64:	4603      	mov	r3, r0
 8003b66:	0e9b      	lsrs	r3, r3, #26
 8003b68:	f003 021f 	and.w	r2, r3, #31
 8003b6c:	e01e      	b.n	8003bac <HAL_ADC_ConfigChannel+0x324>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2102      	movs	r1, #2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe ffb9 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003b94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	e004      	b.n	8003baa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x33c>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0e9b      	lsrs	r3, r3, #26
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	e016      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x36a>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003bd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003be4:	2320      	movs	r3, #32
 8003be6:	e004      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d106      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe ff8a 	bl	8002b18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2103      	movs	r1, #3
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe ff6e 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x3a8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2103      	movs	r1, #3
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe ff63 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003c26:	4603      	mov	r3, r0
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	f003 021f 	and.w	r2, r3, #31
 8003c2e:	e017      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x3d8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2103      	movs	r1, #3
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe ff58 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003c48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c4a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003c4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003c52:	2320      	movs	r3, #32
 8003c54:	e003      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003c56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x3f0>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0e9b      	lsrs	r3, r3, #26
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	e011      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x414>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c80:	fa93 f3a3 	rbit	r3, r3
 8003c84:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003c90:	2320      	movs	r3, #32
 8003c92:	e003      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d106      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2103      	movs	r1, #3
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe ff35 	bl	8002b18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff f8b4 	bl	8002e20 <LL_ADC_IsEnabled>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 8140 	bne.w	8003f40 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f7ff f805 	bl	8002cdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	4a8f      	ldr	r2, [pc, #572]	@ (8003f14 <HAL_ADC_ConfigChannel+0x68c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	f040 8131 	bne.w	8003f40 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x47e>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	0e9b      	lsrs	r3, r3, #26
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	2b09      	cmp	r3, #9
 8003cfc:	bf94      	ite	ls
 8003cfe:	2301      	movls	r3, #1
 8003d00:	2300      	movhi	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	e019      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x4b2>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003d14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d16:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003d18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003d1e:	2320      	movs	r3, #32
 8003d20:	e003      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003d22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	2b09      	cmp	r3, #9
 8003d32:	bf94      	ite	ls
 8003d34:	2301      	movls	r3, #1
 8003d36:	2300      	movhi	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d079      	beq.n	8003e32 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d107      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x4d2>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	0e9b      	lsrs	r3, r3, #26
 8003d50:	3301      	adds	r3, #1
 8003d52:	069b      	lsls	r3, r3, #26
 8003d54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d58:	e015      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x4fe>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d6a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003d72:	2320      	movs	r3, #32
 8003d74:	e003      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d78:	fab3 f383 	clz	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	069b      	lsls	r3, r3, #26
 8003d82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x51e>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	0e9b      	lsrs	r3, r3, #26
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f303 	lsl.w	r3, r1, r3
 8003da4:	e017      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x54e>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003db6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003db8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	e003      	b.n	8003dca <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dc4:	fab3 f383 	clz	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	ea42 0103 	orr.w	r1, r2, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x574>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	0e9b      	lsrs	r3, r3, #26
 8003dec:	3301      	adds	r3, #1
 8003dee:	f003 021f 	and.w	r2, r3, #31
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	051b      	lsls	r3, r3, #20
 8003dfa:	e018      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x5a6>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003e14:	2320      	movs	r3, #32
 8003e16:	e003      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3301      	adds	r3, #1
 8003e22:	f003 021f 	and.w	r2, r3, #31
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	e081      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d107      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x5c6>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	0e9b      	lsrs	r3, r3, #26
 8003e44:	3301      	adds	r3, #1
 8003e46:	069b      	lsls	r3, r3, #26
 8003e48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e4c:	e015      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x5f2>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003e66:	2320      	movs	r3, #32
 8003e68:	e003      	b.n	8003e72 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6c:	fab3 f383 	clz	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	069b      	lsls	r3, r3, #26
 8003e76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x612>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	0e9b      	lsrs	r3, r3, #26
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	2101      	movs	r1, #1
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	e017      	b.n	8003eca <HAL_ADC_ConfigChannel+0x642>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	e003      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	fab3 f383 	clz	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	ea42 0103 	orr.w	r1, r2, r3
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10d      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x66e>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	0e9b      	lsrs	r3, r3, #26
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f003 021f 	and.w	r2, r3, #31
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	3b1e      	subs	r3, #30
 8003eee:	051b      	lsls	r3, r3, #20
 8003ef0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ef4:	e01e      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x6ac>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	613b      	str	r3, [r7, #16]
  return result;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d104      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003f0e:	2320      	movs	r3, #32
 8003f10:	e006      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x698>
 8003f12:	bf00      	nop
 8003f14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	3301      	adds	r3, #1
 8003f22:	f003 021f 	and.w	r2, r3, #31
 8003f26:	4613      	mov	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3b1e      	subs	r3, #30
 8003f2e:	051b      	lsls	r3, r3, #20
 8003f30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f34:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f7fe fea2 	bl	8002c84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b3f      	ldr	r3, [pc, #252]	@ (8004044 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d071      	beq.n	8004030 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f4c:	483e      	ldr	r0, [pc, #248]	@ (8004048 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f4e:	f7fe fd9b 	bl	8002a88 <LL_ADC_GetCommonPathInternalCh>
 8003f52:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3c      	ldr	r2, [pc, #240]	@ (800404c <HAL_ADC_ConfigChannel+0x7c4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_ADC_ConfigChannel+0x6e2>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3a      	ldr	r2, [pc, #232]	@ (8004050 <HAL_ADC_ConfigChannel+0x7c8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d127      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d121      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f7e:	d157      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f88:	4619      	mov	r1, r3
 8003f8a:	482f      	ldr	r0, [pc, #188]	@ (8004048 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f8c:	f7fe fd69 	bl	8002a62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f90:	4b30      	ldr	r3, [pc, #192]	@ (8004054 <HAL_ADC_ConfigChannel+0x7cc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	099b      	lsrs	r3, r3, #6
 8003f96:	4a30      	ldr	r2, [pc, #192]	@ (8004058 <HAL_ADC_ConfigChannel+0x7d0>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003faa:	e002      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f9      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fb8:	e03a      	b.n	8004030 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a27      	ldr	r2, [pc, #156]	@ (800405c <HAL_ADC_ConfigChannel+0x7d4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d113      	bne.n	8003fec <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a22      	ldr	r2, [pc, #136]	@ (8004060 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02a      	beq.n	8004030 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4818      	ldr	r0, [pc, #96]	@ (8004048 <HAL_ADC_ConfigChannel+0x7c0>)
 8003fe6:	f7fe fd3c 	bl	8002a62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fea:	e021      	b.n	8004030 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8004064 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d11c      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ff6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d116      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a16      	ldr	r2, [pc, #88]	@ (8004060 <HAL_ADC_ConfigChannel+0x7d8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d011      	beq.n	8004030 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800400c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004010:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004014:	4619      	mov	r1, r3
 8004016:	480c      	ldr	r0, [pc, #48]	@ (8004048 <HAL_ADC_ConfigChannel+0x7c0>)
 8004018:	f7fe fd23 	bl	8002a62 <LL_ADC_SetCommonPathInternalCh>
 800401c:	e008      	b.n	8004030 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004038:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800403c:	4618      	mov	r0, r3
 800403e:	37d8      	adds	r7, #216	@ 0xd8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	80080000 	.word	0x80080000
 8004048:	50000300 	.word	0x50000300
 800404c:	c3210000 	.word	0xc3210000
 8004050:	90c00010 	.word	0x90c00010
 8004054:	20000000 	.word	0x20000000
 8004058:	053e2d63 	.word	0x053e2d63
 800405c:	c7520000 	.word	0xc7520000
 8004060:	50000100 	.word	0x50000100
 8004064:	cb840000 	.word	0xcb840000

08004068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004070:	2300      	movs	r3, #0
 8004072:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fed1 	bl	8002e20 <LL_ADC_IsEnabled>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d169      	bne.n	8004158 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	4b36      	ldr	r3, [pc, #216]	@ (8004164 <ADC_Enable+0xfc>)
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004096:	f043 0210 	orr.w	r2, r3, #16
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a2:	f043 0201 	orr.w	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e055      	b.n	800415a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fea0 	bl	8002df8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040b8:	482b      	ldr	r0, [pc, #172]	@ (8004168 <ADC_Enable+0x100>)
 80040ba:	f7fe fce5 	bl	8002a88 <LL_ADC_GetCommonPathInternalCh>
 80040be:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80040c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d013      	beq.n	80040f0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040c8:	4b28      	ldr	r3, [pc, #160]	@ (800416c <ADC_Enable+0x104>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	4a28      	ldr	r2, [pc, #160]	@ (8004170 <ADC_Enable+0x108>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	099b      	lsrs	r3, r3, #6
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040e2:	e002      	b.n	80040ea <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f9      	bne.n	80040e4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040f0:	f7fe fc98 	bl	8002a24 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040f6:	e028      	b.n	800414a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe fe8f 	bl	8002e20 <LL_ADC_IsEnabled>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d104      	bne.n	8004112 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe fe73 	bl	8002df8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004112:	f7fe fc87 	bl	8002a24 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d914      	bls.n	800414a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b01      	cmp	r3, #1
 800412c:	d00d      	beq.n	800414a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004132:	f043 0210 	orr.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413e:	f043 0201 	orr.w	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e007      	b.n	800415a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d1cf      	bne.n	80040f8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	8000003f 	.word	0x8000003f
 8004168:	50000300 	.word	0x50000300
 800416c:	20000000 	.word	0x20000000
 8004170:	053e2d63 	.word	0x053e2d63

08004174 <LL_ADC_IsEnabled>:
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <LL_ADC_IsEnabled+0x18>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_ADC_IsEnabled+0x1a>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_ADC_REG_IsConversionOngoing>:
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d101      	bne.n	80041b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b0a1      	sub	sp, #132	@ 0x84
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800423e:	2302      	movs	r3, #2
 8004240:	e08b      	b.n	800435a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800424a:	2300      	movs	r3, #0
 800424c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800424e:	2300      	movs	r3, #0
 8004250:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800425a:	d102      	bne.n	8004262 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800425c:	4b41      	ldr	r3, [pc, #260]	@ (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	e001      	b.n	8004266 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e06a      	b.n	800435a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff ff87 	bl	800419a <LL_ADC_REG_IsConversionOngoing>
 800428c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff81 	bl	800419a <LL_ADC_REG_IsConversionOngoing>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d14c      	bne.n	8004338 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800429e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d149      	bne.n	8004338 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042a4:	4b30      	ldr	r3, [pc, #192]	@ (8004368 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80042a6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d028      	beq.n	8004302 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80042b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042c2:	035b      	lsls	r3, r3, #13
 80042c4:	430b      	orrs	r3, r1
 80042c6:	431a      	orrs	r2, r3
 80042c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80042d0:	f7ff ff50 	bl	8004174 <LL_ADC_IsEnabled>
 80042d4:	4604      	mov	r4, r0
 80042d6:	4823      	ldr	r0, [pc, #140]	@ (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80042d8:	f7ff ff4c 	bl	8004174 <LL_ADC_IsEnabled>
 80042dc:	4603      	mov	r3, r0
 80042de:	4323      	orrs	r3, r4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d133      	bne.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80042ec:	f023 030f 	bic.w	r3, r3, #15
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	6811      	ldr	r1, [r2, #0]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	6892      	ldr	r2, [r2, #8]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	431a      	orrs	r2, r3
 80042fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042fe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004300:	e024      	b.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800430a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800430c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800430e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004312:	f7ff ff2f 	bl	8004174 <LL_ADC_IsEnabled>
 8004316:	4604      	mov	r4, r0
 8004318:	4812      	ldr	r0, [pc, #72]	@ (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800431a:	f7ff ff2b 	bl	8004174 <LL_ADC_IsEnabled>
 800431e:	4603      	mov	r3, r0
 8004320:	4323      	orrs	r3, r4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d112      	bne.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800432e:	f023 030f 	bic.w	r3, r3, #15
 8004332:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004334:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004336:	e009      	b.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800434a:	e000      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800434c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004356:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800435a:	4618      	mov	r0, r3
 800435c:	3784      	adds	r7, #132	@ 0x84
 800435e:	46bd      	mov	sp, r7
 8004360:	bd90      	pop	{r4, r7, pc}
 8004362:	bf00      	nop
 8004364:	50000100 	.word	0x50000100
 8004368:	50000300 	.word	0x50000300

0800436c <__NVIC_SetPriorityGrouping>:
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800437c:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004388:	4013      	ands	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800439c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439e:	4a04      	ldr	r2, [pc, #16]	@ (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	60d3      	str	r3, [r2, #12]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <__NVIC_GetPriorityGrouping>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b8:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <__NVIC_GetPriorityGrouping+0x18>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f003 0307 	and.w	r3, r3, #7
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <__NVIC_EnableIRQ>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	db0b      	blt.n	80043fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	4907      	ldr	r1, [pc, #28]	@ (8004408 <__NVIC_EnableIRQ+0x38>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2001      	movs	r0, #1
 80043f2:	fa00 f202 	lsl.w	r2, r0, r2
 80043f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000e100 	.word	0xe000e100

0800440c <__NVIC_SetPriority>:
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441c:	2b00      	cmp	r3, #0
 800441e:	db0a      	blt.n	8004436 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	490c      	ldr	r1, [pc, #48]	@ (8004458 <__NVIC_SetPriority+0x4c>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	440b      	add	r3, r1
 8004430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004434:	e00a      	b.n	800444c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4908      	ldr	r1, [pc, #32]	@ (800445c <__NVIC_SetPriority+0x50>)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	3b04      	subs	r3, #4
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	440b      	add	r3, r1
 800444a:	761a      	strb	r2, [r3, #24]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000e100 	.word	0xe000e100
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <NVIC_EncodePriority>:
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	@ 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f1c3 0307 	rsb	r3, r3, #7
 800447a:	2b04      	cmp	r3, #4
 800447c:	bf28      	it	cs
 800447e:	2304      	movcs	r3, #4
 8004480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3304      	adds	r3, #4
 8004486:	2b06      	cmp	r3, #6
 8004488:	d902      	bls.n	8004490 <NVIC_EncodePriority+0x30>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3b03      	subs	r3, #3
 800448e:	e000      	b.n	8004492 <NVIC_EncodePriority+0x32>
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	43d9      	mvns	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	4313      	orrs	r3, r2
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	@ 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ff4c 	bl	800436c <__NVIC_SetPriorityGrouping>
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044ea:	f7ff ff63 	bl	80043b4 <__NVIC_GetPriorityGrouping>
 80044ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	6978      	ldr	r0, [r7, #20]
 80044f6:	f7ff ffb3 	bl	8004460 <NVIC_EncodePriority>
 80044fa:	4602      	mov	r2, r0
 80044fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ff82 	bl	800440c <__NVIC_SetPriority>
}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff ff56 	bl	80043d0 <__NVIC_EnableIRQ>
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d005      	beq.n	8004550 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2204      	movs	r2, #4
 8004548:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
 800454e:	e037      	b.n	80045c0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 020e 	bic.w	r2, r2, #14
 800455e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800456a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800456e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004584:	f003 021f 	and.w	r2, r3, #31
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458c:	2101      	movs	r1, #1
 800458e:	fa01 f202 	lsl.w	r2, r1, r2
 8004592:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800459c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045b4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045be:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d00d      	beq.n	8004612 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2204      	movs	r2, #4
 80045fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	e047      	b.n	80046a2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 020e 	bic.w	r2, r2, #14
 8004620:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800463c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004640:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004646:	f003 021f 	and.w	r2, r3, #31
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f202 	lsl.w	r2, r1, r2
 8004654:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800465e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00c      	beq.n	8004682 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004672:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004676:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004680:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4798      	blx	r3
    }
  }
  return status;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046ba:	e15a      	b.n	8004972 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2101      	movs	r1, #1
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 814c 	beq.w	800496c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d005      	beq.n	80046ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d130      	bne.n	800474e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	2203      	movs	r2, #3
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004722:	2201      	movs	r2, #1
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4013      	ands	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 0201 	and.w	r2, r3, #1
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b03      	cmp	r3, #3
 8004758:	d017      	beq.n	800478a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	2203      	movs	r2, #3
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4013      	ands	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d123      	bne.n	80047de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3208      	adds	r2, #8
 800479e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	220f      	movs	r2, #15
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	08da      	lsrs	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3208      	adds	r2, #8
 80047d8:	6939      	ldr	r1, [r7, #16]
 80047da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	2203      	movs	r2, #3
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4013      	ands	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0203 	and.w	r2, r3, #3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80a6 	beq.w	800496c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004820:	4b5b      	ldr	r3, [pc, #364]	@ (8004990 <HAL_GPIO_Init+0x2e4>)
 8004822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004824:	4a5a      	ldr	r2, [pc, #360]	@ (8004990 <HAL_GPIO_Init+0x2e4>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6613      	str	r3, [r2, #96]	@ 0x60
 800482c:	4b58      	ldr	r3, [pc, #352]	@ (8004990 <HAL_GPIO_Init+0x2e4>)
 800482e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004838:	4a56      	ldr	r2, [pc, #344]	@ (8004994 <HAL_GPIO_Init+0x2e8>)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	3302      	adds	r3, #2
 8004840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	220f      	movs	r2, #15
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4013      	ands	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004862:	d01f      	beq.n	80048a4 <HAL_GPIO_Init+0x1f8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a4c      	ldr	r2, [pc, #304]	@ (8004998 <HAL_GPIO_Init+0x2ec>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d019      	beq.n	80048a0 <HAL_GPIO_Init+0x1f4>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a4b      	ldr	r2, [pc, #300]	@ (800499c <HAL_GPIO_Init+0x2f0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_GPIO_Init+0x1f0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a4a      	ldr	r2, [pc, #296]	@ (80049a0 <HAL_GPIO_Init+0x2f4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00d      	beq.n	8004898 <HAL_GPIO_Init+0x1ec>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a49      	ldr	r2, [pc, #292]	@ (80049a4 <HAL_GPIO_Init+0x2f8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <HAL_GPIO_Init+0x1e8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a48      	ldr	r2, [pc, #288]	@ (80049a8 <HAL_GPIO_Init+0x2fc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <HAL_GPIO_Init+0x1e4>
 800488c:	2305      	movs	r3, #5
 800488e:	e00a      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 8004890:	2306      	movs	r3, #6
 8004892:	e008      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 8004894:	2304      	movs	r3, #4
 8004896:	e006      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 8004898:	2303      	movs	r3, #3
 800489a:	e004      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 800489c:	2302      	movs	r3, #2
 800489e:	e002      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 80048a4:	2300      	movs	r3, #0
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	f002 0203 	and.w	r2, r2, #3
 80048ac:	0092      	lsls	r2, r2, #2
 80048ae:	4093      	lsls	r3, r2
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b6:	4937      	ldr	r1, [pc, #220]	@ (8004994 <HAL_GPIO_Init+0x2e8>)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	3302      	adds	r3, #2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048c4:	4b39      	ldr	r3, [pc, #228]	@ (80049ac <HAL_GPIO_Init+0x300>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4013      	ands	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048e8:	4a30      	ldr	r2, [pc, #192]	@ (80049ac <HAL_GPIO_Init+0x300>)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048ee:	4b2f      	ldr	r3, [pc, #188]	@ (80049ac <HAL_GPIO_Init+0x300>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004912:	4a26      	ldr	r2, [pc, #152]	@ (80049ac <HAL_GPIO_Init+0x300>)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004918:	4b24      	ldr	r3, [pc, #144]	@ (80049ac <HAL_GPIO_Init+0x300>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	43db      	mvns	r3, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800493c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ac <HAL_GPIO_Init+0x300>)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004942:	4b1a      	ldr	r3, [pc, #104]	@ (80049ac <HAL_GPIO_Init+0x300>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004966:	4a11      	ldr	r2, [pc, #68]	@ (80049ac <HAL_GPIO_Init+0x300>)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3301      	adds	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	f47f ae9d 	bne.w	80046bc <HAL_GPIO_Init+0x10>
  }
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40021000 	.word	0x40021000
 8004994:	40010000 	.word	0x40010000
 8004998:	48000400 	.word	0x48000400
 800499c:	48000800 	.word	0x48000800
 80049a0:	48000c00 	.word	0x48000c00
 80049a4:	48001000 	.word	0x48001000
 80049a8:	48001400 	.word	0x48001400
 80049ac:	40010400 	.word	0x40010400

080049b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
 80049bc:	4613      	mov	r3, r2
 80049be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049c0:	787b      	ldrb	r3, [r7, #1]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049cc:	e002      	b.n	80049d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049ce:	887a      	ldrh	r2, [r7, #2]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d141      	bne.n	8004a72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ee:	4b4b      	ldr	r3, [pc, #300]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fa:	d131      	bne.n	8004a60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049fc:	4b47      	ldr	r3, [pc, #284]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a02:	4a46      	ldr	r2, [pc, #280]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a0c:	4b43      	ldr	r3, [pc, #268]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a14:	4a41      	ldr	r2, [pc, #260]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a1c:	4b40      	ldr	r3, [pc, #256]	@ (8004b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2232      	movs	r2, #50	@ 0x32
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	4a3f      	ldr	r2, [pc, #252]	@ (8004b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	0c9b      	lsrs	r3, r3, #18
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a32:	e002      	b.n	8004a3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a3a:	4b38      	ldr	r3, [pc, #224]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a46:	d102      	bne.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f2      	bne.n	8004a34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a4e:	4b33      	ldr	r3, [pc, #204]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5a:	d158      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e057      	b.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a60:	4b2e      	ldr	r3, [pc, #184]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a66:	4a2d      	ldr	r2, [pc, #180]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a70:	e04d      	b.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a78:	d141      	bne.n	8004afe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a7a:	4b28      	ldr	r3, [pc, #160]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a86:	d131      	bne.n	8004aec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a88:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a8e:	4a23      	ldr	r2, [pc, #140]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a98:	4b20      	ldr	r3, [pc, #128]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2232      	movs	r2, #50	@ 0x32
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	0c9b      	lsrs	r3, r3, #18
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004abe:	e002      	b.n	8004ac6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac6:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad2:	d102      	bne.n	8004ada <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f2      	bne.n	8004ac0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ada:	4b10      	ldr	r3, [pc, #64]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae6:	d112      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e011      	b.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aec:	4b0b      	ldr	r3, [pc, #44]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004afc:	e007      	b.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004afe:	4b07      	ldr	r3, [pc, #28]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b06:	4a05      	ldr	r2, [pc, #20]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40007000 	.word	0x40007000
 8004b20:	20000000 	.word	0x20000000
 8004b24:	431bde83 	.word	0x431bde83

08004b28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4a04      	ldr	r2, [pc, #16]	@ (8004b44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b36:	6093      	str	r3, [r2, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40007000 	.word	0x40007000

08004b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e2fe      	b.n	8005158 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d075      	beq.n	8004c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b66:	4b97      	ldr	r3, [pc, #604]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b70:	4b94      	ldr	r3, [pc, #592]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d102      	bne.n	8004b86 <HAL_RCC_OscConfig+0x3e>
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d002      	beq.n	8004b8c <HAL_RCC_OscConfig+0x44>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8c:	4b8d      	ldr	r3, [pc, #564]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d05b      	beq.n	8004c50 <HAL_RCC_OscConfig+0x108>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d157      	bne.n	8004c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e2d9      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bac:	d106      	bne.n	8004bbc <HAL_RCC_OscConfig+0x74>
 8004bae:	4b85      	ldr	r3, [pc, #532]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a84      	ldr	r2, [pc, #528]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e01d      	b.n	8004bf8 <HAL_RCC_OscConfig+0xb0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x98>
 8004bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a7e      	ldr	r2, [pc, #504]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4b7c      	ldr	r3, [pc, #496]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7b      	ldr	r2, [pc, #492]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0xb0>
 8004be0:	4b78      	ldr	r3, [pc, #480]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a77      	ldr	r2, [pc, #476]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	4b75      	ldr	r3, [pc, #468]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a74      	ldr	r2, [pc, #464]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fd ff10 	bl	8002a24 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c08:	f7fd ff0c 	bl	8002a24 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b64      	cmp	r3, #100	@ 0x64
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e29e      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0xc0>
 8004c26:	e014      	b.n	8004c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fd fefc 	bl	8002a24 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fd fef8 	bl	8002a24 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	@ 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e28a      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c42:	4b60      	ldr	r3, [pc, #384]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0xe8>
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d075      	beq.n	8004d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5e:	4b59      	ldr	r3, [pc, #356]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c68:	4b56      	ldr	r3, [pc, #344]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	d102      	bne.n	8004c7e <HAL_RCC_OscConfig+0x136>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d002      	beq.n	8004c84 <HAL_RCC_OscConfig+0x13c>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d11f      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c84:	4b4f      	ldr	r3, [pc, #316]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_OscConfig+0x154>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e25d      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b49      	ldr	r3, [pc, #292]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	4946      	ldr	r1, [pc, #280]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cb0:	4b45      	ldr	r3, [pc, #276]	@ (8004dc8 <HAL_RCC_OscConfig+0x280>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fc fec5 	bl	8001a44 <HAL_InitTick>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d043      	beq.n	8004d48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e249      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d023      	beq.n	8004d14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3c      	ldr	r2, [pc, #240]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fd fea4 	bl	8002a24 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce0:	f7fd fea0 	bl	8002a24 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e232      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cf2:	4b34      	ldr	r3, [pc, #208]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfe:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	061b      	lsls	r3, r3, #24
 8004d0c:	492d      	ldr	r1, [pc, #180]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
 8004d12:	e01a      	b.n	8004d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d14:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fd fe80 	bl	8002a24 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d28:	f7fd fe7c 	bl	8002a24 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e20e      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d3a:	4b22      	ldr	r3, [pc, #136]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x1e0>
 8004d46:	e000      	b.n	8004d4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d041      	beq.n	8004dda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01c      	beq.n	8004d98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5e:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d64:	4a17      	ldr	r2, [pc, #92]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6e:	f7fd fe59 	bl	8002a24 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d76:	f7fd fe55 	bl	8002a24 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1e7      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d88:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0ef      	beq.n	8004d76 <HAL_RCC_OscConfig+0x22e>
 8004d96:	e020      	b.n	8004dda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d9e:	4a09      	ldr	r2, [pc, #36]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fd fe3c 	bl	8002a24 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dae:	e00d      	b.n	8004dcc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db0:	f7fd fe38 	bl	8002a24 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d906      	bls.n	8004dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e1ca      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1ea      	bne.n	8004db0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80a6 	beq.w	8004f34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de8:	2300      	movs	r3, #0
 8004dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dec:	4b84      	ldr	r3, [pc, #528]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2b4>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <HAL_RCC_OscConfig+0x2b6>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00d      	beq.n	8004e1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	4b7f      	ldr	r3, [pc, #508]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e06:	4a7e      	ldr	r2, [pc, #504]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e1e:	4b79      	ldr	r3, [pc, #484]	@ (8005004 <HAL_RCC_OscConfig+0x4bc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d118      	bne.n	8004e5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e2a:	4b76      	ldr	r3, [pc, #472]	@ (8005004 <HAL_RCC_OscConfig+0x4bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a75      	ldr	r2, [pc, #468]	@ (8005004 <HAL_RCC_OscConfig+0x4bc>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e36:	f7fd fdf5 	bl	8002a24 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fd fdf1 	bl	8002a24 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e183      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e50:	4b6c      	ldr	r3, [pc, #432]	@ (8005004 <HAL_RCC_OscConfig+0x4bc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d108      	bne.n	8004e76 <HAL_RCC_OscConfig+0x32e>
 8004e64:	4b66      	ldr	r3, [pc, #408]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	4a65      	ldr	r2, [pc, #404]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e74:	e024      	b.n	8004ec0 <HAL_RCC_OscConfig+0x378>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d110      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x358>
 8004e7e:	4b60      	ldr	r3, [pc, #384]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e84:	4a5e      	ldr	r2, [pc, #376]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e8e:	4b5c      	ldr	r3, [pc, #368]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e94:	4a5a      	ldr	r2, [pc, #360]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e9e:	e00f      	b.n	8004ec0 <HAL_RCC_OscConfig+0x378>
 8004ea0:	4b57      	ldr	r3, [pc, #348]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea6:	4a56      	ldr	r2, [pc, #344]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eb0:	4b53      	ldr	r3, [pc, #332]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	4a52      	ldr	r2, [pc, #328]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004eb8:	f023 0304 	bic.w	r3, r3, #4
 8004ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d016      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fd fdac 	bl	8002a24 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed0:	f7fd fda8 	bl	8002a24 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e138      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee6:	4b46      	ldr	r3, [pc, #280]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ed      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x388>
 8004ef4:	e015      	b.n	8004f22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef6:	f7fd fd95 	bl	8002a24 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fd fd91 	bl	8002a24 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e121      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f14:	4b3a      	ldr	r3, [pc, #232]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ed      	bne.n	8004efe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4b35      	ldr	r3, [pc, #212]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2c:	4a34      	ldr	r2, [pc, #208]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d03c      	beq.n	8004fba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01c      	beq.n	8004f82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f48:	4b2d      	ldr	r3, [pc, #180]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fd fd64 	bl	8002a24 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f60:	f7fd fd60 	bl	8002a24 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e0f2      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f72:	4b23      	ldr	r3, [pc, #140]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ef      	beq.n	8004f60 <HAL_RCC_OscConfig+0x418>
 8004f80:	e01b      	b.n	8004fba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f82:	4b1f      	ldr	r3, [pc, #124]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f88:	4a1d      	ldr	r2, [pc, #116]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fd fd47 	bl	8002a24 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f9a:	f7fd fd43 	bl	8002a24 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0d5      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fac:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ef      	bne.n	8004f9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80c9 	beq.w	8005156 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	f000 8083 	beq.w	80050d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d15e      	bne.n	8005098 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fda:	4b09      	ldr	r3, [pc, #36]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a08      	ldr	r2, [pc, #32]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004fe0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7fd fd1d 	bl	8002a24 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fec:	e00c      	b.n	8005008 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fee:	f7fd fd19 	bl	8002a24 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d905      	bls.n	8005008 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e0ab      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
 8005000:	40021000 	.word	0x40021000
 8005004:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005008:	4b55      	ldr	r3, [pc, #340]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1ec      	bne.n	8004fee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005014:	4b52      	ldr	r3, [pc, #328]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	4b52      	ldr	r3, [pc, #328]	@ (8005164 <HAL_RCC_OscConfig+0x61c>)
 800501a:	4013      	ands	r3, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6a11      	ldr	r1, [r2, #32]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005024:	3a01      	subs	r2, #1
 8005026:	0112      	lsls	r2, r2, #4
 8005028:	4311      	orrs	r1, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800502e:	0212      	lsls	r2, r2, #8
 8005030:	4311      	orrs	r1, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005036:	0852      	lsrs	r2, r2, #1
 8005038:	3a01      	subs	r2, #1
 800503a:	0552      	lsls	r2, r2, #21
 800503c:	4311      	orrs	r1, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005042:	0852      	lsrs	r2, r2, #1
 8005044:	3a01      	subs	r2, #1
 8005046:	0652      	lsls	r2, r2, #25
 8005048:	4311      	orrs	r1, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800504e:	06d2      	lsls	r2, r2, #27
 8005050:	430a      	orrs	r2, r1
 8005052:	4943      	ldr	r1, [pc, #268]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 8005054:	4313      	orrs	r3, r2
 8005056:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005058:	4b41      	ldr	r3, [pc, #260]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a40      	ldr	r2, [pc, #256]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800505e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005062:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005064:	4b3e      	ldr	r3, [pc, #248]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4a3d      	ldr	r2, [pc, #244]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800506a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800506e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fd fcd8 	bl	8002a24 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005078:	f7fd fcd4 	bl	8002a24 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e066      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800508a:	4b35      	ldr	r3, [pc, #212]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x530>
 8005096:	e05e      	b.n	8005156 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005098:	4b31      	ldr	r3, [pc, #196]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a30      	ldr	r2, [pc, #192]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800509e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fd fcbe 	bl	8002a24 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd fcba 	bl	8002a24 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e04c      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050be:	4b28      	ldr	r3, [pc, #160]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050ca:	4b25      	ldr	r3, [pc, #148]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	4924      	ldr	r1, [pc, #144]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 80050d0:	4b25      	ldr	r3, [pc, #148]	@ (8005168 <HAL_RCC_OscConfig+0x620>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	60cb      	str	r3, [r1, #12]
 80050d6:	e03e      	b.n	8005156 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e039      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80050e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f003 0203 	and.w	r2, r3, #3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d12c      	bne.n	8005152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	3b01      	subs	r3, #1
 8005104:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d123      	bne.n	8005152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d11b      	bne.n	8005152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d113      	bne.n	8005152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	3b01      	subs	r3, #1
 8005138:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d109      	bne.n	8005152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	3b01      	subs	r3, #1
 800514c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d001      	beq.n	8005156 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40021000 	.word	0x40021000
 8005164:	019f800c 	.word	0x019f800c
 8005168:	feeefffc 	.word	0xfeeefffc

0800516c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e11e      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b91      	ldr	r3, [pc, #580]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d910      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b8e      	ldr	r3, [pc, #568]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 020f 	bic.w	r2, r3, #15
 800519a:	498c      	ldr	r1, [pc, #560]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b8a      	ldr	r3, [pc, #552]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e106      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d073      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d129      	bne.n	800521c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c8:	4b81      	ldr	r3, [pc, #516]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0f4      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80051d8:	f000 f9ce 	bl	8005578 <RCC_GetSysClockFreqFromPLLSource>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4a7c      	ldr	r2, [pc, #496]	@ (80053d4 <HAL_RCC_ClockConfig+0x268>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d93f      	bls.n	8005266 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051e6:	4b7a      	ldr	r3, [pc, #488]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d033      	beq.n	8005266 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005202:	2b00      	cmp	r3, #0
 8005204:	d12f      	bne.n	8005266 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005206:	4b72      	ldr	r3, [pc, #456]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800520e:	4a70      	ldr	r2, [pc, #448]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005214:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005216:	2380      	movs	r3, #128	@ 0x80
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e024      	b.n	8005266 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d107      	bne.n	8005234 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005224:	4b6a      	ldr	r3, [pc, #424]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d109      	bne.n	8005244 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0c6      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005234:	4b66      	ldr	r3, [pc, #408]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e0be      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005244:	f000 f8ce 	bl	80053e4 <HAL_RCC_GetSysClockFreq>
 8005248:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4a61      	ldr	r2, [pc, #388]	@ (80053d4 <HAL_RCC_ClockConfig+0x268>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d909      	bls.n	8005266 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005252:	4b5f      	ldr	r3, [pc, #380]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800525a:	4a5d      	ldr	r2, [pc, #372]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 800525c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005260:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005262:	2380      	movs	r3, #128	@ 0x80
 8005264:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005266:	4b5a      	ldr	r3, [pc, #360]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f023 0203 	bic.w	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4957      	ldr	r1, [pc, #348]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005274:	4313      	orrs	r3, r2
 8005276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005278:	f7fd fbd4 	bl	8002a24 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	e00a      	b.n	8005296 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005280:	f7fd fbd0 	bl	8002a24 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e095      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005296:	4b4e      	ldr	r3, [pc, #312]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 020c 	and.w	r2, r3, #12
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d1eb      	bne.n	8005280 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d023      	beq.n	80052fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052c0:	4b43      	ldr	r3, [pc, #268]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4a42      	ldr	r2, [pc, #264]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052d8:	4b3d      	ldr	r3, [pc, #244]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052e0:	4a3b      	ldr	r2, [pc, #236]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e8:	4b39      	ldr	r3, [pc, #228]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4936      	ldr	r1, [pc, #216]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
 80052fa:	e008      	b.n	800530e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2b80      	cmp	r3, #128	@ 0x80
 8005300:	d105      	bne.n	800530e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005302:	4b33      	ldr	r3, [pc, #204]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	4a32      	ldr	r2, [pc, #200]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005308:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800530c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800530e:	4b2f      	ldr	r3, [pc, #188]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d21d      	bcs.n	8005358 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531c:	4b2b      	ldr	r3, [pc, #172]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 020f 	bic.w	r2, r3, #15
 8005324:	4929      	ldr	r1, [pc, #164]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	4313      	orrs	r3, r2
 800532a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800532c:	f7fd fb7a 	bl	8002a24 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	e00a      	b.n	800534a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005334:	f7fd fb76 	bl	8002a24 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e03b      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b20      	ldr	r3, [pc, #128]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d1ed      	bne.n	8005334 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005364:	4b1a      	ldr	r3, [pc, #104]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4917      	ldr	r1, [pc, #92]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005382:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	490f      	ldr	r1, [pc, #60]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005396:	f000 f825 	bl	80053e4 <HAL_RCC_GetSysClockFreq>
 800539a:	4602      	mov	r2, r0
 800539c:	4b0c      	ldr	r3, [pc, #48]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	490c      	ldr	r1, [pc, #48]	@ (80053d8 <HAL_RCC_ClockConfig+0x26c>)
 80053a8:	5ccb      	ldrb	r3, [r1, r3]
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	fa22 f303 	lsr.w	r3, r2, r3
 80053b2:	4a0a      	ldr	r2, [pc, #40]	@ (80053dc <HAL_RCC_ClockConfig+0x270>)
 80053b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053b6:	4b0a      	ldr	r3, [pc, #40]	@ (80053e0 <HAL_RCC_ClockConfig+0x274>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fc fb42 	bl	8001a44 <HAL_InitTick>
 80053c0:	4603      	mov	r3, r0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40022000 	.word	0x40022000
 80053d0:	40021000 	.word	0x40021000
 80053d4:	04c4b400 	.word	0x04c4b400
 80053d8:	0800ebec 	.word	0x0800ebec
 80053dc:	20000000 	.word	0x20000000
 80053e0:	20000004 	.word	0x20000004

080053e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053ea:	4b2c      	ldr	r3, [pc, #176]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d102      	bne.n	80053fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053f6:	4b2a      	ldr	r3, [pc, #168]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	e047      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053fc:	4b27      	ldr	r3, [pc, #156]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b08      	cmp	r3, #8
 8005406:	d102      	bne.n	800540e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005408:	4b25      	ldr	r3, [pc, #148]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	e03e      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800540e:	4b23      	ldr	r3, [pc, #140]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	2b0c      	cmp	r3, #12
 8005418:	d136      	bne.n	8005488 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800541a:	4b20      	ldr	r3, [pc, #128]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005424:	4b1d      	ldr	r3, [pc, #116]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	3301      	adds	r3, #1
 8005430:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d10c      	bne.n	8005452 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005438:	4a19      	ldr	r2, [pc, #100]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	4a16      	ldr	r2, [pc, #88]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005442:	68d2      	ldr	r2, [r2, #12]
 8005444:	0a12      	lsrs	r2, r2, #8
 8005446:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	617b      	str	r3, [r7, #20]
      break;
 8005450:	e00c      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005452:	4a13      	ldr	r2, [pc, #76]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	4a10      	ldr	r2, [pc, #64]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 800545c:	68d2      	ldr	r2, [r2, #12]
 800545e:	0a12      	lsrs	r2, r2, #8
 8005460:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	617b      	str	r3, [r7, #20]
      break;
 800546a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800546c:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	0e5b      	lsrs	r3, r3, #25
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	3301      	adds	r3, #1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	e001      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800548c:	693b      	ldr	r3, [r7, #16]
}
 800548e:	4618      	mov	r0, r3
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000
 80054a0:	00f42400 	.word	0x00f42400

080054a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a8:	4b03      	ldr	r3, [pc, #12]	@ (80054b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054aa:	681b      	ldr	r3, [r3, #0]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20000000 	.word	0x20000000

080054bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054c0:	f7ff fff0 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054c4:	4602      	mov	r2, r0
 80054c6:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	0a1b      	lsrs	r3, r3, #8
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	4904      	ldr	r1, [pc, #16]	@ (80054e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054d2:	5ccb      	ldrb	r3, [r1, r3]
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40021000 	.word	0x40021000
 80054e4:	0800ebfc 	.word	0x0800ebfc

080054e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054ec:	f7ff ffda 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b06      	ldr	r3, [pc, #24]	@ (800550c <HAL_RCC_GetPCLK2Freq+0x24>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	0adb      	lsrs	r3, r3, #11
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4904      	ldr	r1, [pc, #16]	@ (8005510 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40021000 	.word	0x40021000
 8005510:	0800ebfc 	.word	0x0800ebfc

08005514 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	220f      	movs	r2, #15
 8005522:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005524:	4b12      	ldr	r3, [pc, #72]	@ (8005570 <HAL_RCC_GetClockConfig+0x5c>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0203 	and.w	r2, r3, #3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005530:	4b0f      	ldr	r3, [pc, #60]	@ (8005570 <HAL_RCC_GetClockConfig+0x5c>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800553c:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <HAL_RCC_GetClockConfig+0x5c>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005548:	4b09      	ldr	r3, [pc, #36]	@ (8005570 <HAL_RCC_GetClockConfig+0x5c>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	08db      	lsrs	r3, r3, #3
 800554e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005556:	4b07      	ldr	r3, [pc, #28]	@ (8005574 <HAL_RCC_GetClockConfig+0x60>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 020f 	and.w	r2, r3, #15
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	601a      	str	r2, [r3, #0]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40021000 	.word	0x40021000
 8005574:	40022000 	.word	0x40022000

08005578 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800557e:	4b1e      	ldr	r3, [pc, #120]	@ (80055f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005588:	4b1b      	ldr	r3, [pc, #108]	@ (80055f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	3301      	adds	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b03      	cmp	r3, #3
 800559a:	d10c      	bne.n	80055b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800559c:	4a17      	ldr	r2, [pc, #92]	@ (80055fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	4a14      	ldr	r2, [pc, #80]	@ (80055f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055a6:	68d2      	ldr	r2, [r2, #12]
 80055a8:	0a12      	lsrs	r2, r2, #8
 80055aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
 80055b2:	617b      	str	r3, [r7, #20]
    break;
 80055b4:	e00c      	b.n	80055d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055b6:	4a11      	ldr	r2, [pc, #68]	@ (80055fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80055be:	4a0e      	ldr	r2, [pc, #56]	@ (80055f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055c0:	68d2      	ldr	r2, [r2, #12]
 80055c2:	0a12      	lsrs	r2, r2, #8
 80055c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055c8:	fb02 f303 	mul.w	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]
    break;
 80055ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055d0:	4b09      	ldr	r3, [pc, #36]	@ (80055f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	0e5b      	lsrs	r3, r3, #25
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	3301      	adds	r3, #1
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80055ea:	687b      	ldr	r3, [r7, #4]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	40021000 	.word	0x40021000
 80055fc:	00f42400 	.word	0x00f42400

08005600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005608:	2300      	movs	r3, #0
 800560a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800560c:	2300      	movs	r3, #0
 800560e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8098 	beq.w	800574e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800561e:	2300      	movs	r3, #0
 8005620:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005622:	4b43      	ldr	r3, [pc, #268]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10d      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800562e:	4b40      	ldr	r3, [pc, #256]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005632:	4a3f      	ldr	r2, [pc, #252]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005638:	6593      	str	r3, [r2, #88]	@ 0x58
 800563a:	4b3d      	ldr	r3, [pc, #244]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800563c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005642:	60bb      	str	r3, [r7, #8]
 8005644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005646:	2301      	movs	r3, #1
 8005648:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800564a:	4b3a      	ldr	r3, [pc, #232]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a39      	ldr	r2, [pc, #228]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005656:	f7fd f9e5 	bl	8002a24 <HAL_GetTick>
 800565a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800565c:	e009      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565e:	f7fd f9e1 	bl	8002a24 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d902      	bls.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	74fb      	strb	r3, [r7, #19]
        break;
 8005670:	e005      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005672:	4b30      	ldr	r3, [pc, #192]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ef      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800567e:	7cfb      	ldrb	r3, [r7, #19]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d159      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005684:	4b2a      	ldr	r3, [pc, #168]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800568a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800568e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01e      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	429a      	cmp	r2, r3
 800569e:	d019      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056a0:	4b23      	ldr	r3, [pc, #140]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056ac:	4b20      	ldr	r3, [pc, #128]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056cc:	4a18      	ldr	r2, [pc, #96]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d016      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056de:	f7fd f9a1 	bl	8002a24 <HAL_GetTick>
 80056e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e4:	e00b      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e6:	f7fd f99d 	bl	8002a24 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d902      	bls.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	74fb      	strb	r3, [r7, #19]
            break;
 80056fc:	e006      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0ec      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10b      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005712:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005718:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	4903      	ldr	r1, [pc, #12]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005728:	e008      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800572a:	7cfb      	ldrb	r3, [r7, #19]
 800572c:	74bb      	strb	r3, [r7, #18]
 800572e:	e005      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005730:	40021000 	.word	0x40021000
 8005734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005738:	7cfb      	ldrb	r3, [r7, #19]
 800573a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800573c:	7c7b      	ldrb	r3, [r7, #17]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d105      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005742:	4ba6      	ldr	r3, [pc, #664]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005746:	4aa5      	ldr	r2, [pc, #660]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800574c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800575a:	4ba0      	ldr	r3, [pc, #640]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005760:	f023 0203 	bic.w	r2, r3, #3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	499c      	ldr	r1, [pc, #624]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800577c:	4b97      	ldr	r3, [pc, #604]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005782:	f023 020c 	bic.w	r2, r3, #12
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	4994      	ldr	r1, [pc, #592]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800579e:	4b8f      	ldr	r3, [pc, #572]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	498b      	ldr	r1, [pc, #556]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057c0:	4b86      	ldr	r3, [pc, #536]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	4983      	ldr	r1, [pc, #524]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057e2:	4b7e      	ldr	r3, [pc, #504]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	497a      	ldr	r1, [pc, #488]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005804:	4b75      	ldr	r3, [pc, #468]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	4972      	ldr	r1, [pc, #456]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005826:	4b6d      	ldr	r3, [pc, #436]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	4969      	ldr	r1, [pc, #420]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005848:	4b64      	ldr	r3, [pc, #400]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	4961      	ldr	r1, [pc, #388]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800586a:	4b5c      	ldr	r3, [pc, #368]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005870:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	4958      	ldr	r1, [pc, #352]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005888:	2b00      	cmp	r3, #0
 800588a:	d015      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800588c:	4b53      	ldr	r3, [pc, #332]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005892:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	4950      	ldr	r1, [pc, #320]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058aa:	d105      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ac:	4b4b      	ldr	r3, [pc, #300]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a4a      	ldr	r2, [pc, #296]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058b6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d015      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058c4:	4b45      	ldr	r3, [pc, #276]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	4942      	ldr	r1, [pc, #264]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058e2:	d105      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058e4:	4b3d      	ldr	r3, [pc, #244]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4a3c      	ldr	r2, [pc, #240]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d015      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058fc:	4b37      	ldr	r3, [pc, #220]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590a:	4934      	ldr	r1, [pc, #208]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005916:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800591a:	d105      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800591c:	4b2f      	ldr	r3, [pc, #188]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a2e      	ldr	r2, [pc, #184]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005926:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d015      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005934:	4b29      	ldr	r3, [pc, #164]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005942:	4926      	ldr	r1, [pc, #152]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005952:	d105      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005954:	4b21      	ldr	r3, [pc, #132]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4a20      	ldr	r2, [pc, #128]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800595a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800595e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d015      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800596c:	4b1b      	ldr	r3, [pc, #108]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005972:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	4918      	ldr	r1, [pc, #96]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800598a:	d105      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800598c:	4b13      	ldr	r3, [pc, #76]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	4a12      	ldr	r2, [pc, #72]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005996:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d015      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059a4:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b2:	490a      	ldr	r1, [pc, #40]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059c2:	d105      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059c4:	4b05      	ldr	r3, [pc, #20]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	4a04      	ldr	r2, [pc, #16]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80059d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40021000 	.word	0x40021000

080059e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e09d      	b.n	8005b2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d108      	bne.n	8005a0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a02:	d009      	beq.n	8005a18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	61da      	str	r2, [r3, #28]
 8005a0a:	e005      	b.n	8005a18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fb ff92 	bl	800195c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a58:	d902      	bls.n	8005a60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e002      	b.n	8005a66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a6e:	d007      	beq.n	8005a80 <HAL_SPI_Init+0xa0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a78:	d002      	beq.n	8005a80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac2:	ea42 0103 	orr.w	r1, r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	f003 0204 	and.w	r2, r3, #4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005afc:	ea42 0103 	orr.w	r1, r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10e      	bne.n	8005b78 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d009      	beq.n	8005b78 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	4798      	blx	r3
    return;
 8005b76:	e0ce      	b.n	8005d16 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_SPI_IRQHandler+0x5e>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4798      	blx	r3
    return;
 8005b94:	e0bf      	b.n	8005d16 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <HAL_SPI_IRQHandler+0x7e>
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d105      	bne.n	8005bb6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80b0 	beq.w	8005d16 <HAL_SPI_IRQHandler+0x1de>
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80aa 	beq.w	8005d16 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d023      	beq.n	8005c14 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d011      	beq.n	8005bfc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bdc:	f043 0204 	orr.w	r2, r3, #4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	e00b      	b.n	8005c14 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	693b      	ldr	r3, [r7, #16]
        return;
 8005c12:	e080      	b.n	8005d16 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d014      	beq.n	8005c48 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00c      	beq.n	8005c6c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c56:	f043 0208 	orr.w	r2, r3, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d04f      	beq.n	8005d14 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c82:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <HAL_SPI_IRQHandler+0x168>
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d034      	beq.n	8005d0a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0203 	bic.w	r2, r2, #3
 8005cae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d011      	beq.n	8005cdc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cbc:	4a17      	ldr	r2, [pc, #92]	@ (8005d1c <HAL_SPI_IRQHandler+0x1e4>)
 8005cbe:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fc8a 	bl	80045de <HAL_DMA_Abort_IT>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d016      	beq.n	8005d12 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8005d1c <HAL_SPI_IRQHandler+0x1e4>)
 8005cea:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fe fc74 	bl	80045de <HAL_DMA_Abort_IT>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005d08:	e003      	b.n	8005d12 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f808 	bl	8005d20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d10:	e000      	b.n	8005d14 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005d12:	bf00      	nop
    return;
 8005d14:	bf00      	nop
  }
}
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	08005d35 	.word	0x08005d35

08005d20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f7ff ffe5 	bl	8005d20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d56:	bf00      	nop
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e049      	b.n	8005e04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fc f95d 	bl	8002044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f000 fec3 	bl	8006b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d001      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e04a      	b.n	8005eba <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a21      	ldr	r2, [pc, #132]	@ (8005ec8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d018      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0x6c>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4e:	d013      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0x6c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1d      	ldr	r2, [pc, #116]	@ (8005ecc <HAL_TIM_Base_Start_IT+0xc0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00e      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0x6c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d009      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0x6c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d004      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0x6c>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a19      	ldr	r2, [pc, #100]	@ (8005ed8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d115      	bne.n	8005ea4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	4b17      	ldr	r3, [pc, #92]	@ (8005edc <HAL_TIM_Base_Start_IT+0xd0>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b06      	cmp	r3, #6
 8005e88:	d015      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0xaa>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e90:	d011      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea2:	e008      	b.n	8005eb6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	e000      	b.n	8005eb8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40012c00 	.word	0x40012c00
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40013400 	.word	0x40013400
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	00010007 	.word	0x00010007

08005ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e049      	b.n	8005f86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f841 	bl	8005f8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f000 fe02 	bl	8006b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d109      	bne.n	8005fc8 <HAL_TIM_PWM_Start+0x24>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	e03c      	b.n	8006042 <HAL_TIM_PWM_Start+0x9e>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d109      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0x3e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	bf14      	ite	ne
 8005fda:	2301      	movne	r3, #1
 8005fdc:	2300      	moveq	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	e02f      	b.n	8006042 <HAL_TIM_PWM_Start+0x9e>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d109      	bne.n	8005ffc <HAL_TIM_PWM_Start+0x58>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	bf14      	ite	ne
 8005ff4:	2301      	movne	r3, #1
 8005ff6:	2300      	moveq	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	e022      	b.n	8006042 <HAL_TIM_PWM_Start+0x9e>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b0c      	cmp	r3, #12
 8006000:	d109      	bne.n	8006016 <HAL_TIM_PWM_Start+0x72>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	bf14      	ite	ne
 800600e:	2301      	movne	r3, #1
 8006010:	2300      	moveq	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	e015      	b.n	8006042 <HAL_TIM_PWM_Start+0x9e>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b10      	cmp	r3, #16
 800601a:	d109      	bne.n	8006030 <HAL_TIM_PWM_Start+0x8c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	bf14      	ite	ne
 8006028:	2301      	movne	r3, #1
 800602a:	2300      	moveq	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	e008      	b.n	8006042 <HAL_TIM_PWM_Start+0x9e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	bf14      	ite	ne
 800603c:	2301      	movne	r3, #1
 800603e:	2300      	moveq	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e097      	b.n	800617a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <HAL_TIM_PWM_Start+0xb6>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006058:	e023      	b.n	80060a2 <HAL_TIM_PWM_Start+0xfe>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b04      	cmp	r3, #4
 800605e:	d104      	bne.n	800606a <HAL_TIM_PWM_Start+0xc6>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006068:	e01b      	b.n	80060a2 <HAL_TIM_PWM_Start+0xfe>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d104      	bne.n	800607a <HAL_TIM_PWM_Start+0xd6>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006078:	e013      	b.n	80060a2 <HAL_TIM_PWM_Start+0xfe>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b0c      	cmp	r3, #12
 800607e:	d104      	bne.n	800608a <HAL_TIM_PWM_Start+0xe6>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006088:	e00b      	b.n	80060a2 <HAL_TIM_PWM_Start+0xfe>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b10      	cmp	r3, #16
 800608e:	d104      	bne.n	800609a <HAL_TIM_PWM_Start+0xf6>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006098:	e003      	b.n	80060a2 <HAL_TIM_PWM_Start+0xfe>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2202      	movs	r2, #2
 800609e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2201      	movs	r2, #1
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f96a 	bl	8007384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a33      	ldr	r2, [pc, #204]	@ (8006184 <HAL_TIM_PWM_Start+0x1e0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <HAL_TIM_PWM_Start+0x13e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a32      	ldr	r2, [pc, #200]	@ (8006188 <HAL_TIM_PWM_Start+0x1e4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00e      	beq.n	80060e2 <HAL_TIM_PWM_Start+0x13e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a30      	ldr	r2, [pc, #192]	@ (800618c <HAL_TIM_PWM_Start+0x1e8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d009      	beq.n	80060e2 <HAL_TIM_PWM_Start+0x13e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a2f      	ldr	r2, [pc, #188]	@ (8006190 <HAL_TIM_PWM_Start+0x1ec>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d004      	beq.n	80060e2 <HAL_TIM_PWM_Start+0x13e>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006194 <HAL_TIM_PWM_Start+0x1f0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_PWM_Start+0x142>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <HAL_TIM_PWM_Start+0x144>
 80060e6:	2300      	movs	r3, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a20      	ldr	r2, [pc, #128]	@ (8006184 <HAL_TIM_PWM_Start+0x1e0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d018      	beq.n	8006138 <HAL_TIM_PWM_Start+0x194>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800610e:	d013      	beq.n	8006138 <HAL_TIM_PWM_Start+0x194>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a20      	ldr	r2, [pc, #128]	@ (8006198 <HAL_TIM_PWM_Start+0x1f4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00e      	beq.n	8006138 <HAL_TIM_PWM_Start+0x194>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1f      	ldr	r2, [pc, #124]	@ (800619c <HAL_TIM_PWM_Start+0x1f8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_TIM_PWM_Start+0x194>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a17      	ldr	r2, [pc, #92]	@ (8006188 <HAL_TIM_PWM_Start+0x1e4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <HAL_TIM_PWM_Start+0x194>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a16      	ldr	r2, [pc, #88]	@ (800618c <HAL_TIM_PWM_Start+0x1e8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d115      	bne.n	8006164 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	4b18      	ldr	r3, [pc, #96]	@ (80061a0 <HAL_TIM_PWM_Start+0x1fc>)
 8006140:	4013      	ands	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b06      	cmp	r3, #6
 8006148:	d015      	beq.n	8006176 <HAL_TIM_PWM_Start+0x1d2>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006150:	d011      	beq.n	8006176 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006162:	e008      	b.n	8006176 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	e000      	b.n	8006178 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006176:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40013400 	.word	0x40013400
 800618c:	40014000 	.word	0x40014000
 8006190:	40014400 	.word	0x40014400
 8006194:	40014800 	.word	0x40014800
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	00010007 	.word	0x00010007

080061a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2200      	movs	r2, #0
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 f8e4 	bl	8007384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a3e      	ldr	r2, [pc, #248]	@ (80062bc <HAL_TIM_PWM_Stop+0x118>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d013      	beq.n	80061ee <HAL_TIM_PWM_Stop+0x4a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a3d      	ldr	r2, [pc, #244]	@ (80062c0 <HAL_TIM_PWM_Stop+0x11c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00e      	beq.n	80061ee <HAL_TIM_PWM_Stop+0x4a>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a3b      	ldr	r2, [pc, #236]	@ (80062c4 <HAL_TIM_PWM_Stop+0x120>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d009      	beq.n	80061ee <HAL_TIM_PWM_Stop+0x4a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a3a      	ldr	r2, [pc, #232]	@ (80062c8 <HAL_TIM_PWM_Stop+0x124>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d004      	beq.n	80061ee <HAL_TIM_PWM_Stop+0x4a>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a38      	ldr	r2, [pc, #224]	@ (80062cc <HAL_TIM_PWM_Stop+0x128>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d101      	bne.n	80061f2 <HAL_TIM_PWM_Stop+0x4e>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <HAL_TIM_PWM_Stop+0x50>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d017      	beq.n	8006228 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006202:	4013      	ands	r3, r2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10f      	bne.n	8006228 <HAL_TIM_PWM_Stop+0x84>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6a1a      	ldr	r2, [r3, #32]
 800620e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <HAL_TIM_PWM_Stop+0x84>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006226:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006232:	4013      	ands	r3, r2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10f      	bne.n	8006258 <HAL_TIM_PWM_Stop+0xb4>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6a1a      	ldr	r2, [r3, #32]
 800623e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006242:	4013      	ands	r3, r2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d107      	bne.n	8006258 <HAL_TIM_PWM_Stop+0xb4>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0201 	bic.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d104      	bne.n	8006268 <HAL_TIM_PWM_Stop+0xc4>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006266:	e023      	b.n	80062b0 <HAL_TIM_PWM_Stop+0x10c>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b04      	cmp	r3, #4
 800626c:	d104      	bne.n	8006278 <HAL_TIM_PWM_Stop+0xd4>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006276:	e01b      	b.n	80062b0 <HAL_TIM_PWM_Stop+0x10c>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b08      	cmp	r3, #8
 800627c:	d104      	bne.n	8006288 <HAL_TIM_PWM_Stop+0xe4>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006286:	e013      	b.n	80062b0 <HAL_TIM_PWM_Stop+0x10c>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b0c      	cmp	r3, #12
 800628c:	d104      	bne.n	8006298 <HAL_TIM_PWM_Stop+0xf4>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006296:	e00b      	b.n	80062b0 <HAL_TIM_PWM_Stop+0x10c>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b10      	cmp	r3, #16
 800629c:	d104      	bne.n	80062a8 <HAL_TIM_PWM_Stop+0x104>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062a6:	e003      	b.n	80062b0 <HAL_TIM_PWM_Stop+0x10c>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40012c00 	.word	0x40012c00
 80062c0:	40013400 	.word	0x40013400
 80062c4:	40014000 	.word	0x40014000
 80062c8:	40014400 	.word	0x40014400
 80062cc:	40014800 	.word	0x40014800

080062d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e097      	b.n	8006414 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7fb fec3 	bl	8002084 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2202      	movs	r2, #2
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006314:	f023 0307 	bic.w	r3, r3, #7
 8006318:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f000 fbff 	bl	8006b28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	4313      	orrs	r3, r2
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006370:	f023 030c 	bic.w	r3, r3, #12
 8006374:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800637c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	4313      	orrs	r3, r2
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	011a      	lsls	r2, r3, #4
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	031b      	lsls	r3, r3, #12
 80063a0:	4313      	orrs	r3, r2
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80063ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	4313      	orrs	r3, r2
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d020      	beq.n	8006480 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01b      	beq.n	8006480 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0202 	mvn.w	r2, #2
 8006450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fb40 	bl	8006aec <HAL_TIM_IC_CaptureCallback>
 800646c:	e005      	b.n	800647a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fb32 	bl	8006ad8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fb43 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d020      	beq.n	80064cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01b      	beq.n	80064cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0204 	mvn.w	r2, #4
 800649c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2202      	movs	r2, #2
 80064a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fb1a 	bl	8006aec <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fb0c 	bl	8006ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fb1d 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d020      	beq.n	8006518 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01b      	beq.n	8006518 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0208 	mvn.w	r2, #8
 80064e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2204      	movs	r2, #4
 80064ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 faf4 	bl	8006aec <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fae6 	bl	8006ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 faf7 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b00      	cmp	r3, #0
 8006520:	d020      	beq.n	8006564 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01b      	beq.n	8006564 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0210 	mvn.w	r2, #16
 8006534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2208      	movs	r2, #8
 800653a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 face 	bl	8006aec <HAL_TIM_IC_CaptureCallback>
 8006550:	e005      	b.n	800655e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fac0 	bl	8006ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fad1 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00c      	beq.n	8006588 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0201 	mvn.w	r2, #1
 8006580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fb f997 	bl	80018b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658e:	2b00      	cmp	r3, #0
 8006590:	d104      	bne.n	800659c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 f937 	bl	8007824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00c      	beq.n	80065da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 f92f 	bl	8007838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00c      	beq.n	80065fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fa8b 	bl	8006b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00c      	beq.n	8006622 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f06f 0220 	mvn.w	r2, #32
 800661a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 f8f7 	bl	8007810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00c      	beq.n	8006646 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800663e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 f903 	bl	800784c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00c      	beq.n	800666a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 f8fb 	bl	8007860 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00c      	beq.n	800668e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 f8f3 	bl	8007874 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00c      	beq.n	80066b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d007      	beq.n	80066b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80066aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 f8eb 	bl	8007888 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b2:	bf00      	nop
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
	...

080066bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e0ff      	b.n	80068da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b14      	cmp	r3, #20
 80066e6:	f200 80f0 	bhi.w	80068ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066ea:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006745 	.word	0x08006745
 80066f4:	080068cb 	.word	0x080068cb
 80066f8:	080068cb 	.word	0x080068cb
 80066fc:	080068cb 	.word	0x080068cb
 8006700:	08006785 	.word	0x08006785
 8006704:	080068cb 	.word	0x080068cb
 8006708:	080068cb 	.word	0x080068cb
 800670c:	080068cb 	.word	0x080068cb
 8006710:	080067c7 	.word	0x080067c7
 8006714:	080068cb 	.word	0x080068cb
 8006718:	080068cb 	.word	0x080068cb
 800671c:	080068cb 	.word	0x080068cb
 8006720:	08006807 	.word	0x08006807
 8006724:	080068cb 	.word	0x080068cb
 8006728:	080068cb 	.word	0x080068cb
 800672c:	080068cb 	.word	0x080068cb
 8006730:	08006849 	.word	0x08006849
 8006734:	080068cb 	.word	0x080068cb
 8006738:	080068cb 	.word	0x080068cb
 800673c:	080068cb 	.word	0x080068cb
 8006740:	08006889 	.word	0x08006889
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fa88 	bl	8006c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0208 	orr.w	r2, r2, #8
 800675e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0204 	bic.w	r2, r2, #4
 800676e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6999      	ldr	r1, [r3, #24]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	619a      	str	r2, [r3, #24]
      break;
 8006782:	e0a5      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 faf8 	bl	8006d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800679e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6999      	ldr	r1, [r3, #24]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	021a      	lsls	r2, r3, #8
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	619a      	str	r2, [r3, #24]
      break;
 80067c4:	e084      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fb61 	bl	8006e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0208 	orr.w	r2, r2, #8
 80067e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0204 	bic.w	r2, r2, #4
 80067f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69d9      	ldr	r1, [r3, #28]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	61da      	str	r2, [r3, #28]
      break;
 8006804:	e064      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fbc9 	bl	8006fa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69d9      	ldr	r1, [r3, #28]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	021a      	lsls	r2, r3, #8
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	61da      	str	r2, [r3, #28]
      break;
 8006846:	e043      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fc32 	bl	80070b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0208 	orr.w	r2, r2, #8
 8006862:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0204 	bic.w	r2, r2, #4
 8006872:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006886:	e023      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fc76 	bl	8007180 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	021a      	lsls	r2, r3, #8
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80068c8:	e002      	b.n	80068d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	75fb      	strb	r3, [r7, #23]
      break;
 80068ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop

080068e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIM_ConfigClockSource+0x1c>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e0de      	b.n	8006abe <HAL_TIM_ConfigClockSource+0x1da>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800691e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800692a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a63      	ldr	r2, [pc, #396]	@ (8006ac8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	f000 80a9 	beq.w	8006a92 <HAL_TIM_ConfigClockSource+0x1ae>
 8006940:	4a61      	ldr	r2, [pc, #388]	@ (8006ac8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	f200 80ae 	bhi.w	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006948:	4a60      	ldr	r2, [pc, #384]	@ (8006acc <HAL_TIM_ConfigClockSource+0x1e8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	f000 80a1 	beq.w	8006a92 <HAL_TIM_ConfigClockSource+0x1ae>
 8006950:	4a5e      	ldr	r2, [pc, #376]	@ (8006acc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	f200 80a6 	bhi.w	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006958:	4a5d      	ldr	r2, [pc, #372]	@ (8006ad0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800695a:	4293      	cmp	r3, r2
 800695c:	f000 8099 	beq.w	8006a92 <HAL_TIM_ConfigClockSource+0x1ae>
 8006960:	4a5b      	ldr	r2, [pc, #364]	@ (8006ad0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006962:	4293      	cmp	r3, r2
 8006964:	f200 809e 	bhi.w	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006968:	4a5a      	ldr	r2, [pc, #360]	@ (8006ad4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	f000 8091 	beq.w	8006a92 <HAL_TIM_ConfigClockSource+0x1ae>
 8006970:	4a58      	ldr	r2, [pc, #352]	@ (8006ad4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	f200 8096 	bhi.w	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006978:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800697c:	f000 8089 	beq.w	8006a92 <HAL_TIM_ConfigClockSource+0x1ae>
 8006980:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006984:	f200 808e 	bhi.w	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800698c:	d03e      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0x128>
 800698e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006992:	f200 8087 	bhi.w	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800699a:	f000 8086 	beq.w	8006aaa <HAL_TIM_ConfigClockSource+0x1c6>
 800699e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a2:	d87f      	bhi.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80069a4:	2b70      	cmp	r3, #112	@ 0x70
 80069a6:	d01a      	beq.n	80069de <HAL_TIM_ConfigClockSource+0xfa>
 80069a8:	2b70      	cmp	r3, #112	@ 0x70
 80069aa:	d87b      	bhi.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80069ac:	2b60      	cmp	r3, #96	@ 0x60
 80069ae:	d050      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x16e>
 80069b0:	2b60      	cmp	r3, #96	@ 0x60
 80069b2:	d877      	bhi.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80069b4:	2b50      	cmp	r3, #80	@ 0x50
 80069b6:	d03c      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x14e>
 80069b8:	2b50      	cmp	r3, #80	@ 0x50
 80069ba:	d873      	bhi.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80069bc:	2b40      	cmp	r3, #64	@ 0x40
 80069be:	d058      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0x18e>
 80069c0:	2b40      	cmp	r3, #64	@ 0x40
 80069c2:	d86f      	bhi.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80069c4:	2b30      	cmp	r3, #48	@ 0x30
 80069c6:	d064      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x1ae>
 80069c8:	2b30      	cmp	r3, #48	@ 0x30
 80069ca:	d86b      	bhi.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d060      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x1ae>
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d867      	bhi.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d05c      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x1ae>
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d05a      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x1ae>
 80069dc:	e062      	b.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069ee:	f000 fca9 	bl	8007344 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	609a      	str	r2, [r3, #8]
      break;
 8006a0a:	e04f      	b.n	8006aac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a1c:	f000 fc92 	bl	8007344 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a2e:	609a      	str	r2, [r3, #8]
      break;
 8006a30:	e03c      	b.n	8006aac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f000 fc04 	bl	800724c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2150      	movs	r1, #80	@ 0x50
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fc5d 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 8006a50:	e02c      	b.n	8006aac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f000 fc23 	bl	80072aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2160      	movs	r1, #96	@ 0x60
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fc4d 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 8006a70:	e01c      	b.n	8006aac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f000 fbe4 	bl	800724c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2140      	movs	r1, #64	@ 0x40
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fc3d 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 8006a90:	e00c      	b.n	8006aac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f000 fc34 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 8006aa2:	e003      	b.n	8006aac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa8:	e000      	b.n	8006aac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	00100070 	.word	0x00100070
 8006acc:	00100040 	.word	0x00100040
 8006ad0:	00100030 	.word	0x00100030
 8006ad4:	00100020 	.word	0x00100020

08006ad8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a42      	ldr	r2, [pc, #264]	@ (8006c44 <TIM_Base_SetConfig+0x11c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00f      	beq.n	8006b60 <TIM_Base_SetConfig+0x38>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b46:	d00b      	beq.n	8006b60 <TIM_Base_SetConfig+0x38>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c48 <TIM_Base_SetConfig+0x120>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d007      	beq.n	8006b60 <TIM_Base_SetConfig+0x38>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a3e      	ldr	r2, [pc, #248]	@ (8006c4c <TIM_Base_SetConfig+0x124>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_Base_SetConfig+0x38>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a3d      	ldr	r2, [pc, #244]	@ (8006c50 <TIM_Base_SetConfig+0x128>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d108      	bne.n	8006b72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a33      	ldr	r2, [pc, #204]	@ (8006c44 <TIM_Base_SetConfig+0x11c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d01b      	beq.n	8006bb2 <TIM_Base_SetConfig+0x8a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b80:	d017      	beq.n	8006bb2 <TIM_Base_SetConfig+0x8a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a30      	ldr	r2, [pc, #192]	@ (8006c48 <TIM_Base_SetConfig+0x120>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <TIM_Base_SetConfig+0x8a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8006c4c <TIM_Base_SetConfig+0x124>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00f      	beq.n	8006bb2 <TIM_Base_SetConfig+0x8a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a2e      	ldr	r2, [pc, #184]	@ (8006c50 <TIM_Base_SetConfig+0x128>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00b      	beq.n	8006bb2 <TIM_Base_SetConfig+0x8a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8006c54 <TIM_Base_SetConfig+0x12c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d007      	beq.n	8006bb2 <TIM_Base_SetConfig+0x8a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8006c58 <TIM_Base_SetConfig+0x130>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d003      	beq.n	8006bb2 <TIM_Base_SetConfig+0x8a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a2b      	ldr	r2, [pc, #172]	@ (8006c5c <TIM_Base_SetConfig+0x134>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d108      	bne.n	8006bc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a16      	ldr	r2, [pc, #88]	@ (8006c44 <TIM_Base_SetConfig+0x11c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00f      	beq.n	8006c10 <TIM_Base_SetConfig+0xe8>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a17      	ldr	r2, [pc, #92]	@ (8006c50 <TIM_Base_SetConfig+0x128>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00b      	beq.n	8006c10 <TIM_Base_SetConfig+0xe8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a16      	ldr	r2, [pc, #88]	@ (8006c54 <TIM_Base_SetConfig+0x12c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d007      	beq.n	8006c10 <TIM_Base_SetConfig+0xe8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a15      	ldr	r2, [pc, #84]	@ (8006c58 <TIM_Base_SetConfig+0x130>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_Base_SetConfig+0xe8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a14      	ldr	r2, [pc, #80]	@ (8006c5c <TIM_Base_SetConfig+0x134>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d103      	bne.n	8006c18 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d105      	bne.n	8006c36 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f023 0201 	bic.w	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	611a      	str	r2, [r3, #16]
  }
}
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40012c00 	.word	0x40012c00
 8006c48:	40000400 	.word	0x40000400
 8006c4c:	40000800 	.word	0x40000800
 8006c50:	40013400 	.word	0x40013400
 8006c54:	40014000 	.word	0x40014000
 8006c58:	40014400 	.word	0x40014400
 8006c5c:	40014800 	.word	0x40014800

08006c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f023 0201 	bic.w	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0303 	bic.w	r3, r3, #3
 8006c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f023 0302 	bic.w	r3, r3, #2
 8006cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a2c      	ldr	r2, [pc, #176]	@ (8006d6c <TIM_OC1_SetConfig+0x10c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00f      	beq.n	8006ce0 <TIM_OC1_SetConfig+0x80>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8006d70 <TIM_OC1_SetConfig+0x110>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00b      	beq.n	8006ce0 <TIM_OC1_SetConfig+0x80>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a2a      	ldr	r2, [pc, #168]	@ (8006d74 <TIM_OC1_SetConfig+0x114>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d007      	beq.n	8006ce0 <TIM_OC1_SetConfig+0x80>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a29      	ldr	r2, [pc, #164]	@ (8006d78 <TIM_OC1_SetConfig+0x118>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_OC1_SetConfig+0x80>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a28      	ldr	r2, [pc, #160]	@ (8006d7c <TIM_OC1_SetConfig+0x11c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d10c      	bne.n	8006cfa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f023 0308 	bic.w	r3, r3, #8
 8006ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f023 0304 	bic.w	r3, r3, #4
 8006cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <TIM_OC1_SetConfig+0x10c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00f      	beq.n	8006d22 <TIM_OC1_SetConfig+0xc2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a1a      	ldr	r2, [pc, #104]	@ (8006d70 <TIM_OC1_SetConfig+0x110>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00b      	beq.n	8006d22 <TIM_OC1_SetConfig+0xc2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a19      	ldr	r2, [pc, #100]	@ (8006d74 <TIM_OC1_SetConfig+0x114>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <TIM_OC1_SetConfig+0xc2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a18      	ldr	r2, [pc, #96]	@ (8006d78 <TIM_OC1_SetConfig+0x118>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_OC1_SetConfig+0xc2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a17      	ldr	r2, [pc, #92]	@ (8006d7c <TIM_OC1_SetConfig+0x11c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d111      	bne.n	8006d46 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	621a      	str	r2, [r3, #32]
}
 8006d60:	bf00      	nop
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40013400 	.word	0x40013400
 8006d74:	40014000 	.word	0x40014000
 8006d78:	40014400 	.word	0x40014400
 8006d7c:	40014800 	.word	0x40014800

08006d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	f023 0210 	bic.w	r2, r3, #16
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f023 0320 	bic.w	r3, r3, #32
 8006dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a28      	ldr	r2, [pc, #160]	@ (8006e80 <TIM_OC2_SetConfig+0x100>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d003      	beq.n	8006dec <TIM_OC2_SetConfig+0x6c>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a27      	ldr	r2, [pc, #156]	@ (8006e84 <TIM_OC2_SetConfig+0x104>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d10d      	bne.n	8006e08 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e80 <TIM_OC2_SetConfig+0x100>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00f      	beq.n	8006e30 <TIM_OC2_SetConfig+0xb0>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a1c      	ldr	r2, [pc, #112]	@ (8006e84 <TIM_OC2_SetConfig+0x104>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00b      	beq.n	8006e30 <TIM_OC2_SetConfig+0xb0>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e88 <TIM_OC2_SetConfig+0x108>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d007      	beq.n	8006e30 <TIM_OC2_SetConfig+0xb0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a1a      	ldr	r2, [pc, #104]	@ (8006e8c <TIM_OC2_SetConfig+0x10c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC2_SetConfig+0xb0>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a19      	ldr	r2, [pc, #100]	@ (8006e90 <TIM_OC2_SetConfig+0x110>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d113      	bne.n	8006e58 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40012c00 	.word	0x40012c00
 8006e84:	40013400 	.word	0x40013400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40014400 	.word	0x40014400
 8006e90:	40014800 	.word	0x40014800

08006e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0303 	bic.w	r3, r3, #3
 8006ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a27      	ldr	r2, [pc, #156]	@ (8006f90 <TIM_OC3_SetConfig+0xfc>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_OC3_SetConfig+0x6a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a26      	ldr	r2, [pc, #152]	@ (8006f94 <TIM_OC3_SetConfig+0x100>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d10d      	bne.n	8006f1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8006f90 <TIM_OC3_SetConfig+0xfc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00f      	beq.n	8006f42 <TIM_OC3_SetConfig+0xae>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a1b      	ldr	r2, [pc, #108]	@ (8006f94 <TIM_OC3_SetConfig+0x100>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00b      	beq.n	8006f42 <TIM_OC3_SetConfig+0xae>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8006f98 <TIM_OC3_SetConfig+0x104>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d007      	beq.n	8006f42 <TIM_OC3_SetConfig+0xae>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a19      	ldr	r2, [pc, #100]	@ (8006f9c <TIM_OC3_SetConfig+0x108>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d003      	beq.n	8006f42 <TIM_OC3_SetConfig+0xae>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a18      	ldr	r2, [pc, #96]	@ (8006fa0 <TIM_OC3_SetConfig+0x10c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d113      	bne.n	8006f6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	621a      	str	r2, [r3, #32]
}
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	40012c00 	.word	0x40012c00
 8006f94:	40013400 	.word	0x40013400
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40014400 	.word	0x40014400
 8006fa0:	40014800 	.word	0x40014800

08006fa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	031b      	lsls	r3, r3, #12
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a28      	ldr	r2, [pc, #160]	@ (80070a4 <TIM_OC4_SetConfig+0x100>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_OC4_SetConfig+0x6c>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a27      	ldr	r2, [pc, #156]	@ (80070a8 <TIM_OC4_SetConfig+0x104>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d10d      	bne.n	800702c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	031b      	lsls	r3, r3, #12
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800702a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a1d      	ldr	r2, [pc, #116]	@ (80070a4 <TIM_OC4_SetConfig+0x100>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00f      	beq.n	8007054 <TIM_OC4_SetConfig+0xb0>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a1c      	ldr	r2, [pc, #112]	@ (80070a8 <TIM_OC4_SetConfig+0x104>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00b      	beq.n	8007054 <TIM_OC4_SetConfig+0xb0>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a1b      	ldr	r2, [pc, #108]	@ (80070ac <TIM_OC4_SetConfig+0x108>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d007      	beq.n	8007054 <TIM_OC4_SetConfig+0xb0>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a1a      	ldr	r2, [pc, #104]	@ (80070b0 <TIM_OC4_SetConfig+0x10c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_OC4_SetConfig+0xb0>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a19      	ldr	r2, [pc, #100]	@ (80070b4 <TIM_OC4_SetConfig+0x110>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d113      	bne.n	800707c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800705a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007062:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	019b      	lsls	r3, r3, #6
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	4313      	orrs	r3, r2
 800706e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	019b      	lsls	r3, r3, #6
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	4313      	orrs	r3, r2
 800707a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	621a      	str	r2, [r3, #32]
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40012c00 	.word	0x40012c00
 80070a8:	40013400 	.word	0x40013400
 80070ac:	40014000 	.word	0x40014000
 80070b0:	40014400 	.word	0x40014400
 80070b4:	40014800 	.word	0x40014800

080070b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80070fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a17      	ldr	r2, [pc, #92]	@ (800716c <TIM_OC5_SetConfig+0xb4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00f      	beq.n	8007132 <TIM_OC5_SetConfig+0x7a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a16      	ldr	r2, [pc, #88]	@ (8007170 <TIM_OC5_SetConfig+0xb8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00b      	beq.n	8007132 <TIM_OC5_SetConfig+0x7a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a15      	ldr	r2, [pc, #84]	@ (8007174 <TIM_OC5_SetConfig+0xbc>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d007      	beq.n	8007132 <TIM_OC5_SetConfig+0x7a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a14      	ldr	r2, [pc, #80]	@ (8007178 <TIM_OC5_SetConfig+0xc0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d003      	beq.n	8007132 <TIM_OC5_SetConfig+0x7a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a13      	ldr	r2, [pc, #76]	@ (800717c <TIM_OC5_SetConfig+0xc4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d109      	bne.n	8007146 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007138:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	021b      	lsls	r3, r3, #8
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	621a      	str	r2, [r3, #32]
}
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40013400 	.word	0x40013400
 8007174:	40014000 	.word	0x40014000
 8007178:	40014400 	.word	0x40014400
 800717c:	40014800 	.word	0x40014800

08007180 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	051b      	lsls	r3, r3, #20
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a18      	ldr	r2, [pc, #96]	@ (8007238 <TIM_OC6_SetConfig+0xb8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00f      	beq.n	80071fc <TIM_OC6_SetConfig+0x7c>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a17      	ldr	r2, [pc, #92]	@ (800723c <TIM_OC6_SetConfig+0xbc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00b      	beq.n	80071fc <TIM_OC6_SetConfig+0x7c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a16      	ldr	r2, [pc, #88]	@ (8007240 <TIM_OC6_SetConfig+0xc0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d007      	beq.n	80071fc <TIM_OC6_SetConfig+0x7c>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a15      	ldr	r2, [pc, #84]	@ (8007244 <TIM_OC6_SetConfig+0xc4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_OC6_SetConfig+0x7c>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a14      	ldr	r2, [pc, #80]	@ (8007248 <TIM_OC6_SetConfig+0xc8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d109      	bne.n	8007210 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	029b      	lsls	r3, r3, #10
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	621a      	str	r2, [r3, #32]
}
 800722a:	bf00      	nop
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40012c00 	.word	0x40012c00
 800723c:	40013400 	.word	0x40013400
 8007240:	40014000 	.word	0x40014000
 8007244:	40014400 	.word	0x40014400
 8007248:	40014800 	.word	0x40014800

0800724c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0201 	bic.w	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f023 030a 	bic.w	r3, r3, #10
 8007288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4313      	orrs	r3, r2
 8007290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	621a      	str	r2, [r3, #32]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b087      	sub	sp, #28
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f023 0210 	bic.w	r2, r3, #16
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	031b      	lsls	r3, r3, #12
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800730a:	b480      	push	{r7}
 800730c:	b085      	sub	sp, #20
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007320:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	f043 0307 	orr.w	r3, r3, #7
 8007330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	609a      	str	r2, [r3, #8]
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800735e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	021a      	lsls	r2, r3, #8
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	431a      	orrs	r2, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4313      	orrs	r3, r2
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	609a      	str	r2, [r3, #8]
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	2201      	movs	r2, #1
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1a      	ldr	r2, [r3, #32]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	43db      	mvns	r3, r3
 80073a6:	401a      	ands	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a1a      	ldr	r2, [r3, #32]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	fa01 f303 	lsl.w	r3, r1, r3
 80073bc:	431a      	orrs	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d109      	bne.n	80073f4 <HAL_TIMEx_PWMN_Start+0x24>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	bf14      	ite	ne
 80073ec:	2301      	movne	r3, #1
 80073ee:	2300      	moveq	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	e022      	b.n	800743a <HAL_TIMEx_PWMN_Start+0x6a>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d109      	bne.n	800740e <HAL_TIMEx_PWMN_Start+0x3e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	bf14      	ite	ne
 8007406:	2301      	movne	r3, #1
 8007408:	2300      	moveq	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	e015      	b.n	800743a <HAL_TIMEx_PWMN_Start+0x6a>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b08      	cmp	r3, #8
 8007412:	d109      	bne.n	8007428 <HAL_TIMEx_PWMN_Start+0x58>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b01      	cmp	r3, #1
 800741e:	bf14      	ite	ne
 8007420:	2301      	movne	r3, #1
 8007422:	2300      	moveq	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	e008      	b.n	800743a <HAL_TIMEx_PWMN_Start+0x6a>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b01      	cmp	r3, #1
 8007432:	bf14      	ite	ne
 8007434:	2301      	movne	r3, #1
 8007436:	2300      	moveq	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e069      	b.n	8007516 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <HAL_TIMEx_PWMN_Start+0x82>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007450:	e013      	b.n	800747a <HAL_TIMEx_PWMN_Start+0xaa>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b04      	cmp	r3, #4
 8007456:	d104      	bne.n	8007462 <HAL_TIMEx_PWMN_Start+0x92>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007460:	e00b      	b.n	800747a <HAL_TIMEx_PWMN_Start+0xaa>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b08      	cmp	r3, #8
 8007466:	d104      	bne.n	8007472 <HAL_TIMEx_PWMN_Start+0xa2>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007470:	e003      	b.n	800747a <HAL_TIMEx_PWMN_Start+0xaa>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2202      	movs	r2, #2
 8007476:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2204      	movs	r2, #4
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fa0a 	bl	800789c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007496:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a20      	ldr	r2, [pc, #128]	@ (8007520 <HAL_TIMEx_PWMN_Start+0x150>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d018      	beq.n	80074d4 <HAL_TIMEx_PWMN_Start+0x104>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074aa:	d013      	beq.n	80074d4 <HAL_TIMEx_PWMN_Start+0x104>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007524 <HAL_TIMEx_PWMN_Start+0x154>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00e      	beq.n	80074d4 <HAL_TIMEx_PWMN_Start+0x104>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007528 <HAL_TIMEx_PWMN_Start+0x158>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d009      	beq.n	80074d4 <HAL_TIMEx_PWMN_Start+0x104>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a19      	ldr	r2, [pc, #100]	@ (800752c <HAL_TIMEx_PWMN_Start+0x15c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d004      	beq.n	80074d4 <HAL_TIMEx_PWMN_Start+0x104>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a18      	ldr	r2, [pc, #96]	@ (8007530 <HAL_TIMEx_PWMN_Start+0x160>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d115      	bne.n	8007500 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	4b16      	ldr	r3, [pc, #88]	@ (8007534 <HAL_TIMEx_PWMN_Start+0x164>)
 80074dc:	4013      	ands	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b06      	cmp	r3, #6
 80074e4:	d015      	beq.n	8007512 <HAL_TIMEx_PWMN_Start+0x142>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074ec:	d011      	beq.n	8007512 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f042 0201 	orr.w	r2, r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074fe:	e008      	b.n	8007512 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0201 	orr.w	r2, r2, #1
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	e000      	b.n	8007514 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007512:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	40012c00 	.word	0x40012c00
 8007524:	40000400 	.word	0x40000400
 8007528:	40000800 	.word	0x40000800
 800752c:	40013400 	.word	0x40013400
 8007530:	40014000 	.word	0x40014000
 8007534:	00010007 	.word	0x00010007

08007538 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2200      	movs	r2, #0
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	4618      	mov	r0, r3
 800754c:	f000 f9a6 	bl	800789c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6a1a      	ldr	r2, [r3, #32]
 8007556:	f241 1311 	movw	r3, #4369	@ 0x1111
 800755a:	4013      	ands	r3, r2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10f      	bne.n	8007580 <HAL_TIMEx_PWMN_Stop+0x48>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6a1a      	ldr	r2, [r3, #32]
 8007566:	f244 4344 	movw	r3, #17476	@ 0x4444
 800756a:	4013      	ands	r3, r2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d107      	bne.n	8007580 <HAL_TIMEx_PWMN_Stop+0x48>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800757e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6a1a      	ldr	r2, [r3, #32]
 8007586:	f241 1311 	movw	r3, #4369	@ 0x1111
 800758a:	4013      	ands	r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10f      	bne.n	80075b0 <HAL_TIMEx_PWMN_Stop+0x78>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6a1a      	ldr	r2, [r3, #32]
 8007596:	f244 4344 	movw	r3, #17476	@ 0x4444
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d107      	bne.n	80075b0 <HAL_TIMEx_PWMN_Stop+0x78>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0201 	bic.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d104      	bne.n	80075c0 <HAL_TIMEx_PWMN_Stop+0x88>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075be:	e013      	b.n	80075e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d104      	bne.n	80075d0 <HAL_TIMEx_PWMN_Stop+0x98>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075ce:	e00b      	b.n	80075e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	d104      	bne.n	80075e0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075de:	e003      	b.n	80075e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007608:	2302      	movs	r3, #2
 800760a:	e065      	b.n	80076d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a2c      	ldr	r2, [pc, #176]	@ (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d004      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a2b      	ldr	r2, [pc, #172]	@ (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d108      	bne.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007646:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1b      	ldr	r2, [pc, #108]	@ (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d018      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007682:	d013      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a18      	ldr	r2, [pc, #96]	@ (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00e      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a17      	ldr	r2, [pc, #92]	@ (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d009      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a12      	ldr	r2, [pc, #72]	@ (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d004      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a13      	ldr	r2, [pc, #76]	@ (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d10c      	bne.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40013400 	.word	0x40013400
 80076ec:	40000400 	.word	0x40000400
 80076f0:	40000800 	.word	0x40000800
 80076f4:	40014000 	.word	0x40014000

080076f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007710:	2302      	movs	r3, #2
 8007712:	e073      	b.n	80077fc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	041b      	lsls	r3, r3, #16
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a19      	ldr	r2, [pc, #100]	@ (8007808 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d004      	beq.n	80077b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a18      	ldr	r2, [pc, #96]	@ (800780c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d11c      	bne.n	80077ea <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ba:	051b      	lsls	r3, r3, #20
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d8:	4313      	orrs	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	40012c00 	.word	0x40012c00
 800780c:	40013400 	.word	0x40013400

08007810 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	2204      	movs	r2, #4
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a1a      	ldr	r2, [r3, #32]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	43db      	mvns	r3, r3
 80078be:	401a      	ands	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a1a      	ldr	r2, [r3, #32]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f003 030f 	and.w	r3, r3, #15
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	fa01 f303 	lsl.w	r3, r1, r3
 80078d4:	431a      	orrs	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e042      	b.n	800797e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fa fd1e 	bl	800234c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2224      	movs	r2, #36	@ 0x24
 8007914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0201 	bic.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fee9 	bl	8008708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fc1a 	bl	8008170 <UART_SetConfig>
 800793c:	4603      	mov	r3, r0
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e01b      	b.n	800797e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007954:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007964:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f042 0201 	orr.w	r2, r2, #1
 8007974:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 ff68 	bl	800884c <UART_CheckIdleState>
 800797c:	4603      	mov	r3, r0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b08a      	sub	sp, #40	@ 0x28
 800798a:	af02      	add	r7, sp, #8
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	603b      	str	r3, [r7, #0]
 8007992:	4613      	mov	r3, r2
 8007994:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800799c:	2b20      	cmp	r3, #32
 800799e:	d17b      	bne.n	8007a98 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <HAL_UART_Transmit+0x26>
 80079a6:	88fb      	ldrh	r3, [r7, #6]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e074      	b.n	8007a9a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2221      	movs	r2, #33	@ 0x21
 80079bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079c0:	f7fb f830 	bl	8002a24 <HAL_GetTick>
 80079c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	88fa      	ldrh	r2, [r7, #6]
 80079ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079de:	d108      	bne.n	80079f2 <HAL_UART_Transmit+0x6c>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079e8:	2300      	movs	r3, #0
 80079ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	61bb      	str	r3, [r7, #24]
 80079f0:	e003      	b.n	80079fa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079fa:	e030      	b.n	8007a5e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2200      	movs	r2, #0
 8007a04:	2180      	movs	r1, #128	@ 0x80
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 ffca 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e03d      	b.n	8007a9a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10b      	bne.n	8007a3c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	3302      	adds	r3, #2
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	e007      	b.n	8007a4c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	781a      	ldrb	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1c8      	bne.n	80079fc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	2140      	movs	r1, #64	@ 0x40
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 ff93 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e006      	b.n	8007a9a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e000      	b.n	8007a9a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007a98:	2302      	movs	r3, #2
  }
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3720      	adds	r7, #32
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b0ba      	sub	sp, #232	@ 0xe8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007aca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ace:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d11b      	bne.n	8007b18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae4:	f003 0320 	and.w	r3, r3, #32
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d015      	beq.n	8007b18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af0:	f003 0320 	and.w	r3, r3, #32
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d105      	bne.n	8007b04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d009      	beq.n	8007b18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 8300 	beq.w	800810e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
      }
      return;
 8007b16:	e2fa      	b.n	800810e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8123 	beq.w	8007d68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b26:	4b8d      	ldr	r3, [pc, #564]	@ (8007d5c <HAL_UART_IRQHandler+0x2b8>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b32:	4b8b      	ldr	r3, [pc, #556]	@ (8007d60 <HAL_UART_IRQHandler+0x2bc>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 8116 	beq.w	8007d68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d011      	beq.n	8007b6c <HAL_UART_IRQHandler+0xc8>
 8007b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b62:	f043 0201 	orr.w	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d011      	beq.n	8007b9c <HAL_UART_IRQHandler+0xf8>
 8007b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b92:	f043 0204 	orr.w	r2, r3, #4
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d011      	beq.n	8007bcc <HAL_UART_IRQHandler+0x128>
 8007ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2204      	movs	r2, #4
 8007bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc2:	f043 0202 	orr.w	r2, r3, #2
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d017      	beq.n	8007c08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bdc:	f003 0320 	and.w	r3, r3, #32
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d105      	bne.n	8007bf0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007be4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007be8:	4b5c      	ldr	r3, [pc, #368]	@ (8007d5c <HAL_UART_IRQHandler+0x2b8>)
 8007bea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2208      	movs	r2, #8
 8007bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bfe:	f043 0208 	orr.w	r2, r3, #8
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d012      	beq.n	8007c3a <HAL_UART_IRQHandler+0x196>
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00c      	beq.n	8007c3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c30:	f043 0220 	orr.w	r2, r3, #32
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8266 	beq.w	8008112 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d013      	beq.n	8007c7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d105      	bne.n	8007c6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d007      	beq.n	8007c7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8e:	2b40      	cmp	r3, #64	@ 0x40
 8007c90:	d005      	beq.n	8007c9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d054      	beq.n	8007d48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 feeb 	bl	8008a7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cae:	2b40      	cmp	r3, #64	@ 0x40
 8007cb0:	d146      	bne.n	8007d40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1d9      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d017      	beq.n	8007d38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0e:	4a15      	ldr	r2, [pc, #84]	@ (8007d64 <HAL_UART_IRQHandler+0x2c0>)
 8007d10:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fc fc60 	bl	80045de <HAL_DMA_Abort_IT>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d019      	beq.n	8007d58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007d32:	4610      	mov	r0, r2
 8007d34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d36:	e00f      	b.n	8007d58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7f9 fbed 	bl	8001518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d3e:	e00b      	b.n	8007d58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7f9 fbe9 	bl	8001518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d46:	e007      	b.n	8007d58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7f9 fbe5 	bl	8001518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007d56:	e1dc      	b.n	8008112 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d58:	bf00      	nop
    return;
 8007d5a:	e1da      	b.n	8008112 <HAL_UART_IRQHandler+0x66e>
 8007d5c:	10000001 	.word	0x10000001
 8007d60:	04000120 	.word	0x04000120
 8007d64:	08008b47 	.word	0x08008b47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	f040 8170 	bne.w	8008052 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d76:	f003 0310 	and.w	r3, r3, #16
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8169 	beq.w	8008052 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 8162 	beq.w	8008052 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2210      	movs	r2, #16
 8007d94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da0:	2b40      	cmp	r3, #64	@ 0x40
 8007da2:	f040 80d8 	bne.w	8007f56 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 80af 	beq.w	8007f1c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007dc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	f080 80a7 	bcs.w	8007f1c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f040 8087 	bne.w	8007efa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1da      	bne.n	8007dec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e48:	f023 0301 	bic.w	r3, r3, #1
 8007e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e1      	bne.n	8007e36 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3308      	adds	r3, #8
 8007e78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3308      	adds	r3, #8
 8007e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e3      	bne.n	8007e72 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ec8:	f023 0310 	bic.w	r3, r3, #16
 8007ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007edc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ee0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e4      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fc fb19 	bl	800452c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f911 	bl	800813c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007f1a:	e0fc      	b.n	8008116 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f26:	429a      	cmp	r2, r3
 8007f28:	f040 80f5 	bne.w	8008116 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	f040 80eb 	bne.w	8008116 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f8f4 	bl	800813c <HAL_UARTEx_RxEventCallback>
      return;
 8007f54:	e0df      	b.n	8008116 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 80d1 	beq.w	800811a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 80cc 	beq.w	800811a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e4      	bne.n	8007f82 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	623b      	str	r3, [r7, #32]
   return(result);
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3308      	adds	r3, #8
 8007fdc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fe0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e1      	bne.n	8007fb8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	60fb      	str	r3, [r7, #12]
   return(result);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f023 0310 	bic.w	r3, r3, #16
 800801c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800802a:	61fb      	str	r3, [r7, #28]
 800802c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	69b9      	ldr	r1, [r7, #24]
 8008030:	69fa      	ldr	r2, [r7, #28]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	617b      	str	r3, [r7, #20]
   return(result);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e4      	bne.n	8008008 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2202      	movs	r2, #2
 8008042:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008044:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f876 	bl	800813c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008050:	e063      	b.n	800811a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00e      	beq.n	800807c <HAL_UART_IRQHandler+0x5d8>
 800805e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d008      	beq.n	800807c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008072:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fda7 	bl	8008bc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800807a:	e051      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008084:	2b00      	cmp	r3, #0
 8008086:	d014      	beq.n	80080b2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800808c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008090:	2b00      	cmp	r3, #0
 8008092:	d105      	bne.n	80080a0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008098:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d008      	beq.n	80080b2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d03a      	beq.n	800811e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	4798      	blx	r3
    }
    return;
 80080b0:	e035      	b.n	800811e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d009      	beq.n	80080d2 <HAL_UART_IRQHandler+0x62e>
 80080be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fd51 	bl	8008b72 <UART_EndTransmit_IT>
    return;
 80080d0:	e026      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <HAL_UART_IRQHandler+0x64e>
 80080de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fd80 	bl	8008bf0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080f0:	e016      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d010      	beq.n	8008120 <HAL_UART_IRQHandler+0x67c>
 80080fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008102:	2b00      	cmp	r3, #0
 8008104:	da0c      	bge.n	8008120 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fd68 	bl	8008bdc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800810c:	e008      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
      return;
 800810e:	bf00      	nop
 8008110:	e006      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
    return;
 8008112:	bf00      	nop
 8008114:	e004      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
      return;
 8008116:	bf00      	nop
 8008118:	e002      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
      return;
 800811a:	bf00      	nop
 800811c:	e000      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
    return;
 800811e:	bf00      	nop
  }
}
 8008120:	37e8      	adds	r7, #232	@ 0xe8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop

08008128 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
	...

08008170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008174:	b08c      	sub	sp, #48	@ 0x30
 8008176:	af00      	add	r7, sp, #0
 8008178:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	431a      	orrs	r2, r3
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	431a      	orrs	r2, r3
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	4313      	orrs	r3, r2
 8008196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	4bab      	ldr	r3, [pc, #684]	@ (800844c <UART_SetConfig+0x2dc>)
 80081a0:	4013      	ands	r3, r2
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	6812      	ldr	r2, [r2, #0]
 80081a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081a8:	430b      	orrs	r3, r1
 80081aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4aa0      	ldr	r2, [pc, #640]	@ (8008450 <UART_SetConfig+0x2e0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d004      	beq.n	80081dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081d8:	4313      	orrs	r3, r2
 80081da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80081e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081f0:	430b      	orrs	r3, r1
 80081f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fa:	f023 010f 	bic.w	r1, r3, #15
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a91      	ldr	r2, [pc, #580]	@ (8008454 <UART_SetConfig+0x2e4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d125      	bne.n	8008260 <UART_SetConfig+0xf0>
 8008214:	4b90      	ldr	r3, [pc, #576]	@ (8008458 <UART_SetConfig+0x2e8>)
 8008216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b03      	cmp	r3, #3
 8008220:	d81a      	bhi.n	8008258 <UART_SetConfig+0xe8>
 8008222:	a201      	add	r2, pc, #4	@ (adr r2, 8008228 <UART_SetConfig+0xb8>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	08008239 	.word	0x08008239
 800822c:	08008249 	.word	0x08008249
 8008230:	08008241 	.word	0x08008241
 8008234:	08008251 	.word	0x08008251
 8008238:	2301      	movs	r3, #1
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800823e:	e0d6      	b.n	80083ee <UART_SetConfig+0x27e>
 8008240:	2302      	movs	r3, #2
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008246:	e0d2      	b.n	80083ee <UART_SetConfig+0x27e>
 8008248:	2304      	movs	r3, #4
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800824e:	e0ce      	b.n	80083ee <UART_SetConfig+0x27e>
 8008250:	2308      	movs	r3, #8
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008256:	e0ca      	b.n	80083ee <UART_SetConfig+0x27e>
 8008258:	2310      	movs	r3, #16
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800825e:	e0c6      	b.n	80083ee <UART_SetConfig+0x27e>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a7d      	ldr	r2, [pc, #500]	@ (800845c <UART_SetConfig+0x2ec>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d138      	bne.n	80082dc <UART_SetConfig+0x16c>
 800826a:	4b7b      	ldr	r3, [pc, #492]	@ (8008458 <UART_SetConfig+0x2e8>)
 800826c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008270:	f003 030c 	and.w	r3, r3, #12
 8008274:	2b0c      	cmp	r3, #12
 8008276:	d82d      	bhi.n	80082d4 <UART_SetConfig+0x164>
 8008278:	a201      	add	r2, pc, #4	@ (adr r2, 8008280 <UART_SetConfig+0x110>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	080082b5 	.word	0x080082b5
 8008284:	080082d5 	.word	0x080082d5
 8008288:	080082d5 	.word	0x080082d5
 800828c:	080082d5 	.word	0x080082d5
 8008290:	080082c5 	.word	0x080082c5
 8008294:	080082d5 	.word	0x080082d5
 8008298:	080082d5 	.word	0x080082d5
 800829c:	080082d5 	.word	0x080082d5
 80082a0:	080082bd 	.word	0x080082bd
 80082a4:	080082d5 	.word	0x080082d5
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082d5 	.word	0x080082d5
 80082b0:	080082cd 	.word	0x080082cd
 80082b4:	2300      	movs	r3, #0
 80082b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ba:	e098      	b.n	80083ee <UART_SetConfig+0x27e>
 80082bc:	2302      	movs	r3, #2
 80082be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082c2:	e094      	b.n	80083ee <UART_SetConfig+0x27e>
 80082c4:	2304      	movs	r3, #4
 80082c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ca:	e090      	b.n	80083ee <UART_SetConfig+0x27e>
 80082cc:	2308      	movs	r3, #8
 80082ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082d2:	e08c      	b.n	80083ee <UART_SetConfig+0x27e>
 80082d4:	2310      	movs	r3, #16
 80082d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082da:	e088      	b.n	80083ee <UART_SetConfig+0x27e>
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a5f      	ldr	r2, [pc, #380]	@ (8008460 <UART_SetConfig+0x2f0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d125      	bne.n	8008332 <UART_SetConfig+0x1c2>
 80082e6:	4b5c      	ldr	r3, [pc, #368]	@ (8008458 <UART_SetConfig+0x2e8>)
 80082e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80082f0:	2b30      	cmp	r3, #48	@ 0x30
 80082f2:	d016      	beq.n	8008322 <UART_SetConfig+0x1b2>
 80082f4:	2b30      	cmp	r3, #48	@ 0x30
 80082f6:	d818      	bhi.n	800832a <UART_SetConfig+0x1ba>
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	d00a      	beq.n	8008312 <UART_SetConfig+0x1a2>
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	d814      	bhi.n	800832a <UART_SetConfig+0x1ba>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <UART_SetConfig+0x19a>
 8008304:	2b10      	cmp	r3, #16
 8008306:	d008      	beq.n	800831a <UART_SetConfig+0x1aa>
 8008308:	e00f      	b.n	800832a <UART_SetConfig+0x1ba>
 800830a:	2300      	movs	r3, #0
 800830c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008310:	e06d      	b.n	80083ee <UART_SetConfig+0x27e>
 8008312:	2302      	movs	r3, #2
 8008314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008318:	e069      	b.n	80083ee <UART_SetConfig+0x27e>
 800831a:	2304      	movs	r3, #4
 800831c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008320:	e065      	b.n	80083ee <UART_SetConfig+0x27e>
 8008322:	2308      	movs	r3, #8
 8008324:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008328:	e061      	b.n	80083ee <UART_SetConfig+0x27e>
 800832a:	2310      	movs	r3, #16
 800832c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008330:	e05d      	b.n	80083ee <UART_SetConfig+0x27e>
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a4b      	ldr	r2, [pc, #300]	@ (8008464 <UART_SetConfig+0x2f4>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d125      	bne.n	8008388 <UART_SetConfig+0x218>
 800833c:	4b46      	ldr	r3, [pc, #280]	@ (8008458 <UART_SetConfig+0x2e8>)
 800833e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008342:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008346:	2bc0      	cmp	r3, #192	@ 0xc0
 8008348:	d016      	beq.n	8008378 <UART_SetConfig+0x208>
 800834a:	2bc0      	cmp	r3, #192	@ 0xc0
 800834c:	d818      	bhi.n	8008380 <UART_SetConfig+0x210>
 800834e:	2b80      	cmp	r3, #128	@ 0x80
 8008350:	d00a      	beq.n	8008368 <UART_SetConfig+0x1f8>
 8008352:	2b80      	cmp	r3, #128	@ 0x80
 8008354:	d814      	bhi.n	8008380 <UART_SetConfig+0x210>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <UART_SetConfig+0x1f0>
 800835a:	2b40      	cmp	r3, #64	@ 0x40
 800835c:	d008      	beq.n	8008370 <UART_SetConfig+0x200>
 800835e:	e00f      	b.n	8008380 <UART_SetConfig+0x210>
 8008360:	2300      	movs	r3, #0
 8008362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008366:	e042      	b.n	80083ee <UART_SetConfig+0x27e>
 8008368:	2302      	movs	r3, #2
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800836e:	e03e      	b.n	80083ee <UART_SetConfig+0x27e>
 8008370:	2304      	movs	r3, #4
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008376:	e03a      	b.n	80083ee <UART_SetConfig+0x27e>
 8008378:	2308      	movs	r3, #8
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800837e:	e036      	b.n	80083ee <UART_SetConfig+0x27e>
 8008380:	2310      	movs	r3, #16
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008386:	e032      	b.n	80083ee <UART_SetConfig+0x27e>
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a30      	ldr	r2, [pc, #192]	@ (8008450 <UART_SetConfig+0x2e0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d12a      	bne.n	80083e8 <UART_SetConfig+0x278>
 8008392:	4b31      	ldr	r3, [pc, #196]	@ (8008458 <UART_SetConfig+0x2e8>)
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008398:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800839c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083a0:	d01a      	beq.n	80083d8 <UART_SetConfig+0x268>
 80083a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083a6:	d81b      	bhi.n	80083e0 <UART_SetConfig+0x270>
 80083a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083ac:	d00c      	beq.n	80083c8 <UART_SetConfig+0x258>
 80083ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083b2:	d815      	bhi.n	80083e0 <UART_SetConfig+0x270>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <UART_SetConfig+0x250>
 80083b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083bc:	d008      	beq.n	80083d0 <UART_SetConfig+0x260>
 80083be:	e00f      	b.n	80083e0 <UART_SetConfig+0x270>
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c6:	e012      	b.n	80083ee <UART_SetConfig+0x27e>
 80083c8:	2302      	movs	r3, #2
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ce:	e00e      	b.n	80083ee <UART_SetConfig+0x27e>
 80083d0:	2304      	movs	r3, #4
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d6:	e00a      	b.n	80083ee <UART_SetConfig+0x27e>
 80083d8:	2308      	movs	r3, #8
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083de:	e006      	b.n	80083ee <UART_SetConfig+0x27e>
 80083e0:	2310      	movs	r3, #16
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e6:	e002      	b.n	80083ee <UART_SetConfig+0x27e>
 80083e8:	2310      	movs	r3, #16
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a17      	ldr	r2, [pc, #92]	@ (8008450 <UART_SetConfig+0x2e0>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	f040 80a8 	bne.w	800854a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083fe:	2b08      	cmp	r3, #8
 8008400:	d834      	bhi.n	800846c <UART_SetConfig+0x2fc>
 8008402:	a201      	add	r2, pc, #4	@ (adr r2, 8008408 <UART_SetConfig+0x298>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	0800842d 	.word	0x0800842d
 800840c:	0800846d 	.word	0x0800846d
 8008410:	08008435 	.word	0x08008435
 8008414:	0800846d 	.word	0x0800846d
 8008418:	0800843b 	.word	0x0800843b
 800841c:	0800846d 	.word	0x0800846d
 8008420:	0800846d 	.word	0x0800846d
 8008424:	0800846d 	.word	0x0800846d
 8008428:	08008443 	.word	0x08008443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800842c:	f7fd f846 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 8008430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008432:	e021      	b.n	8008478 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008434:	4b0c      	ldr	r3, [pc, #48]	@ (8008468 <UART_SetConfig+0x2f8>)
 8008436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008438:	e01e      	b.n	8008478 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800843a:	f7fc ffd3 	bl	80053e4 <HAL_RCC_GetSysClockFreq>
 800843e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008440:	e01a      	b.n	8008478 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008448:	e016      	b.n	8008478 <UART_SetConfig+0x308>
 800844a:	bf00      	nop
 800844c:	cfff69f3 	.word	0xcfff69f3
 8008450:	40008000 	.word	0x40008000
 8008454:	40013800 	.word	0x40013800
 8008458:	40021000 	.word	0x40021000
 800845c:	40004400 	.word	0x40004400
 8008460:	40004800 	.word	0x40004800
 8008464:	40004c00 	.word	0x40004c00
 8008468:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800846c:	2300      	movs	r3, #0
 800846e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008476:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 812a 	beq.w	80086d4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008484:	4a9e      	ldr	r2, [pc, #632]	@ (8008700 <UART_SetConfig+0x590>)
 8008486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800848a:	461a      	mov	r2, r3
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008492:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	4613      	mov	r3, r2
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	4413      	add	r3, r2
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d305      	bcc.n	80084b0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d903      	bls.n	80084b8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084b6:	e10d      	b.n	80086d4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ba:	2200      	movs	r2, #0
 80084bc:	60bb      	str	r3, [r7, #8]
 80084be:	60fa      	str	r2, [r7, #12]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c4:	4a8e      	ldr	r2, [pc, #568]	@ (8008700 <UART_SetConfig+0x590>)
 80084c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2200      	movs	r2, #0
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084da:	f7f8 fbfd 	bl	8000cd8 <__aeabi_uldivmod>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4610      	mov	r0, r2
 80084e4:	4619      	mov	r1, r3
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	f04f 0300 	mov.w	r3, #0
 80084ee:	020b      	lsls	r3, r1, #8
 80084f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084f4:	0202      	lsls	r2, r0, #8
 80084f6:	6979      	ldr	r1, [r7, #20]
 80084f8:	6849      	ldr	r1, [r1, #4]
 80084fa:	0849      	lsrs	r1, r1, #1
 80084fc:	2000      	movs	r0, #0
 80084fe:	460c      	mov	r4, r1
 8008500:	4605      	mov	r5, r0
 8008502:	eb12 0804 	adds.w	r8, r2, r4
 8008506:	eb43 0905 	adc.w	r9, r3, r5
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	469a      	mov	sl, r3
 8008512:	4693      	mov	fp, r2
 8008514:	4652      	mov	r2, sl
 8008516:	465b      	mov	r3, fp
 8008518:	4640      	mov	r0, r8
 800851a:	4649      	mov	r1, r9
 800851c:	f7f8 fbdc 	bl	8000cd8 <__aeabi_uldivmod>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4613      	mov	r3, r2
 8008526:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800852e:	d308      	bcc.n	8008542 <UART_SetConfig+0x3d2>
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008536:	d204      	bcs.n	8008542 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6a3a      	ldr	r2, [r7, #32]
 800853e:	60da      	str	r2, [r3, #12]
 8008540:	e0c8      	b.n	80086d4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008548:	e0c4      	b.n	80086d4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008552:	d167      	bne.n	8008624 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008554:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008558:	2b08      	cmp	r3, #8
 800855a:	d828      	bhi.n	80085ae <UART_SetConfig+0x43e>
 800855c:	a201      	add	r2, pc, #4	@ (adr r2, 8008564 <UART_SetConfig+0x3f4>)
 800855e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008562:	bf00      	nop
 8008564:	08008589 	.word	0x08008589
 8008568:	08008591 	.word	0x08008591
 800856c:	08008599 	.word	0x08008599
 8008570:	080085af 	.word	0x080085af
 8008574:	0800859f 	.word	0x0800859f
 8008578:	080085af 	.word	0x080085af
 800857c:	080085af 	.word	0x080085af
 8008580:	080085af 	.word	0x080085af
 8008584:	080085a7 	.word	0x080085a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008588:	f7fc ff98 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 800858c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800858e:	e014      	b.n	80085ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008590:	f7fc ffaa 	bl	80054e8 <HAL_RCC_GetPCLK2Freq>
 8008594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008596:	e010      	b.n	80085ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008598:	4b5a      	ldr	r3, [pc, #360]	@ (8008704 <UART_SetConfig+0x594>)
 800859a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800859c:	e00d      	b.n	80085ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800859e:	f7fc ff21 	bl	80053e4 <HAL_RCC_GetSysClockFreq>
 80085a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085a4:	e009      	b.n	80085ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085ac:	e005      	b.n	80085ba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8089 	beq.w	80086d4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008700 <UART_SetConfig+0x590>)
 80085c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085cc:	461a      	mov	r2, r3
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085d4:	005a      	lsls	r2, r3, #1
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	085b      	lsrs	r3, r3, #1
 80085dc:	441a      	add	r2, r3
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	2b0f      	cmp	r3, #15
 80085ec:	d916      	bls.n	800861c <UART_SetConfig+0x4ac>
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f4:	d212      	bcs.n	800861c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f023 030f 	bic.w	r3, r3, #15
 80085fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	085b      	lsrs	r3, r3, #1
 8008604:	b29b      	uxth	r3, r3
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	b29a      	uxth	r2, r3
 800860c:	8bfb      	ldrh	r3, [r7, #30]
 800860e:	4313      	orrs	r3, r2
 8008610:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	8bfa      	ldrh	r2, [r7, #30]
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	e05b      	b.n	80086d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008622:	e057      	b.n	80086d4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008624:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008628:	2b08      	cmp	r3, #8
 800862a:	d828      	bhi.n	800867e <UART_SetConfig+0x50e>
 800862c:	a201      	add	r2, pc, #4	@ (adr r2, 8008634 <UART_SetConfig+0x4c4>)
 800862e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008632:	bf00      	nop
 8008634:	08008659 	.word	0x08008659
 8008638:	08008661 	.word	0x08008661
 800863c:	08008669 	.word	0x08008669
 8008640:	0800867f 	.word	0x0800867f
 8008644:	0800866f 	.word	0x0800866f
 8008648:	0800867f 	.word	0x0800867f
 800864c:	0800867f 	.word	0x0800867f
 8008650:	0800867f 	.word	0x0800867f
 8008654:	08008677 	.word	0x08008677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008658:	f7fc ff30 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 800865c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800865e:	e014      	b.n	800868a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008660:	f7fc ff42 	bl	80054e8 <HAL_RCC_GetPCLK2Freq>
 8008664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008666:	e010      	b.n	800868a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008668:	4b26      	ldr	r3, [pc, #152]	@ (8008704 <UART_SetConfig+0x594>)
 800866a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800866c:	e00d      	b.n	800868a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800866e:	f7fc feb9 	bl	80053e4 <HAL_RCC_GetSysClockFreq>
 8008672:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008674:	e009      	b.n	800868a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800867a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800867c:	e005      	b.n	800868a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008688:	bf00      	nop
    }

    if (pclk != 0U)
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	d021      	beq.n	80086d4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008694:	4a1a      	ldr	r2, [pc, #104]	@ (8008700 <UART_SetConfig+0x590>)
 8008696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800869a:	461a      	mov	r2, r3
 800869c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869e:	fbb3 f2f2 	udiv	r2, r3, r2
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	441a      	add	r2, r3
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	2b0f      	cmp	r3, #15
 80086b8:	d909      	bls.n	80086ce <UART_SetConfig+0x55e>
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086c0:	d205      	bcs.n	80086ce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60da      	str	r2, [r3, #12]
 80086cc:	e002      	b.n	80086d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2201      	movs	r2, #1
 80086e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2200      	movs	r2, #0
 80086e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2200      	movs	r2, #0
 80086ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80086f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3730      	adds	r7, #48	@ 0x30
 80086f8:	46bd      	mov	sp, r7
 80086fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086fe:	bf00      	nop
 8008700:	0800ec04 	.word	0x0800ec04
 8008704:	00f42400 	.word	0x00f42400

08008708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008714:	f003 0308 	and.w	r3, r3, #8
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00a      	beq.n	80087ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01a      	beq.n	800881e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008806:	d10a      	bne.n	800881e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	605a      	str	r2, [r3, #4]
  }
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b098      	sub	sp, #96	@ 0x60
 8008850:	af02      	add	r7, sp, #8
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800885c:	f7fa f8e2 	bl	8002a24 <HAL_GetTick>
 8008860:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b08      	cmp	r3, #8
 800886e:	d12f      	bne.n	80088d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008878:	2200      	movs	r2, #0
 800887a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f88e 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d022      	beq.n	80088d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800889e:	653b      	str	r3, [r7, #80]	@ 0x50
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80088aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e6      	bne.n	800888a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2220      	movs	r2, #32
 80088c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e063      	b.n	8008998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d149      	bne.n	8008972 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088e6:	2200      	movs	r2, #0
 80088e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f857 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d03c      	beq.n	8008972 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	623b      	str	r3, [r7, #32]
   return(result);
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800890c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008916:	633b      	str	r3, [r7, #48]	@ 0x30
 8008918:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800891c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e6      	bne.n	80088f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3308      	adds	r3, #8
 8008930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	60fb      	str	r3, [r7, #12]
   return(result);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f023 0301 	bic.w	r3, r3, #1
 8008940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3308      	adds	r3, #8
 8008948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800894a:	61fa      	str	r2, [r7, #28]
 800894c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	69b9      	ldr	r1, [r7, #24]
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	617b      	str	r3, [r7, #20]
   return(result);
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e5      	bne.n	800892a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e012      	b.n	8008998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3758      	adds	r7, #88	@ 0x58
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	4613      	mov	r3, r2
 80089ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b0:	e04f      	b.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089b8:	d04b      	beq.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ba:	f7fa f833 	bl	8002a24 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d302      	bcc.n	80089d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e04e      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d037      	beq.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b80      	cmp	r3, #128	@ 0x80
 80089e6:	d034      	beq.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b40      	cmp	r3, #64	@ 0x40
 80089ec:	d031      	beq.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	f003 0308 	and.w	r3, r3, #8
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d110      	bne.n	8008a1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2208      	movs	r2, #8
 8008a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f838 	bl	8008a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e029      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a2c:	d111      	bne.n	8008a52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 f81e 	bl	8008a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e00f      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	bf0c      	ite	eq
 8008a62:	2301      	moveq	r3, #1
 8008a64:	2300      	movne	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	79fb      	ldrb	r3, [r7, #7]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d0a0      	beq.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b095      	sub	sp, #84	@ 0x54
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008aa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008aa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e6      	bne.n	8008a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008aca:	f023 0301 	bic.w	r3, r3, #1
 8008ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ad8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ae0:	e841 2300 	strex	r3, r2, [r1]
 8008ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e3      	bne.n	8008ab4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d118      	bne.n	8008b26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f023 0310 	bic.w	r3, r3, #16
 8008b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6979      	ldr	r1, [r7, #20]
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e6      	bne.n	8008af4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b3a:	bf00      	nop
 8008b3c:	3754      	adds	r7, #84	@ 0x54
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7f8 fcd7 	bl	8001518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b088      	sub	sp, #32
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b8e:	61fb      	str	r3, [r7, #28]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	61bb      	str	r3, [r7, #24]
 8008b9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6979      	ldr	r1, [r7, #20]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e6      	bne.n	8008b7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff fab4 	bl	8008128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bc0:	bf00      	nop
 8008bc2:	3720      	adds	r7, #32
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d101      	bne.n	8008c1a <HAL_UARTEx_DisableFifoMode+0x16>
 8008c16:	2302      	movs	r3, #2
 8008c18:	e027      	b.n	8008c6a <HAL_UARTEx_DisableFifoMode+0x66>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2224      	movs	r2, #36	@ 0x24
 8008c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0201 	bic.w	r2, r2, #1
 8008c40:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008c48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d101      	bne.n	8008c8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	e02d      	b.n	8008cea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2224      	movs	r2, #36	@ 0x24
 8008c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0201 	bic.w	r2, r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f850 	bl	8008d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d101      	bne.n	8008d0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d06:	2302      	movs	r3, #2
 8008d08:	e02d      	b.n	8008d66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2224      	movs	r2, #36	@ 0x24
 8008d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0201 	bic.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f812 	bl	8008d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2220      	movs	r2, #32
 8008d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d108      	bne.n	8008d92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d90:	e031      	b.n	8008df6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d92:	2308      	movs	r3, #8
 8008d94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d96:	2308      	movs	r3, #8
 8008d98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	0e5b      	lsrs	r3, r3, #25
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	f003 0307 	and.w	r3, r3, #7
 8008da8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	0f5b      	lsrs	r3, r3, #29
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	f003 0307 	and.w	r3, r3, #7
 8008db8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	7b3a      	ldrb	r2, [r7, #12]
 8008dbe:	4911      	ldr	r1, [pc, #68]	@ (8008e04 <UARTEx_SetNbDataToProcess+0x94>)
 8008dc0:	5c8a      	ldrb	r2, [r1, r2]
 8008dc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008dc6:	7b3a      	ldrb	r2, [r7, #12]
 8008dc8:	490f      	ldr	r1, [pc, #60]	@ (8008e08 <UARTEx_SetNbDataToProcess+0x98>)
 8008dca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	7b7a      	ldrb	r2, [r7, #13]
 8008ddc:	4909      	ldr	r1, [pc, #36]	@ (8008e04 <UARTEx_SetNbDataToProcess+0x94>)
 8008dde:	5c8a      	ldrb	r2, [r1, r2]
 8008de0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008de4:	7b7a      	ldrb	r2, [r7, #13]
 8008de6:	4908      	ldr	r1, [pc, #32]	@ (8008e08 <UARTEx_SetNbDataToProcess+0x98>)
 8008de8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dea:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008df6:	bf00      	nop
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	0800ec1c 	.word	0x0800ec1c
 8008e08:	0800ec24 	.word	0x0800ec24

08008e0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e1e:	2b84      	cmp	r3, #132	@ 0x84
 8008e20:	d005      	beq.n	8008e2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008e22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4413      	add	r3, r2
 8008e2a:	3303      	adds	r3, #3
 8008e2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008e40:	f000 fa74 	bl	800932c <vTaskStartScheduler>
  
  return osOK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e4c:	b087      	sub	sp, #28
 8008e4e:	af02      	add	r7, sp, #8
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685c      	ldr	r4, [r3, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e60:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff ffcf 	bl	8008e0c <makeFreeRtosPriority>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	f107 030c 	add.w	r3, r7, #12
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	9200      	str	r2, [sp, #0]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	4632      	mov	r2, r6
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 f8d2 	bl	8009028 <xTaskCreate>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d001      	beq.n	8008e8e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e000      	b.n	8008e90 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e98 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <osDelay+0x16>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	e000      	b.n	8008eb0 <osDelay+0x18>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fa05 	bl	80092c0 <vTaskDelay>
  
  return osOK;
 8008eb6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f103 0208 	add.w	r2, r3, #8
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ed8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f103 0208 	add.w	r2, r3, #8
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f103 0208 	add.w	r2, r3, #8
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	601a      	str	r2, [r3, #0]
}
 8008f56:	bf00      	nop
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f78:	d103      	bne.n	8008f82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	e00c      	b.n	8008f9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	3308      	adds	r3, #8
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	e002      	b.n	8008f90 <vListInsert+0x2e>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d2f6      	bcs.n	8008f8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	601a      	str	r2, [r3, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	6892      	ldr	r2, [r2, #8]
 8008fea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	6852      	ldr	r2, [r2, #4]
 8008ff4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d103      	bne.n	8009008 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689a      	ldr	r2, [r3, #8]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	1e5a      	subs	r2, r3, #1
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08c      	sub	sp, #48	@ 0x30
 800902c:	af04      	add	r7, sp, #16
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	4613      	mov	r3, r2
 8009036:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009038:	88fb      	ldrh	r3, [r7, #6]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fec3 	bl	8009dc8 <pvPortMalloc>
 8009042:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00e      	beq.n	8009068 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800904a:	20a0      	movs	r0, #160	@ 0xa0
 800904c:	f000 febc 	bl	8009dc8 <pvPortMalloc>
 8009050:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	631a      	str	r2, [r3, #48]	@ 0x30
 800905e:	e005      	b.n	800906c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009060:	6978      	ldr	r0, [r7, #20]
 8009062:	f000 ff7f 	bl	8009f64 <vPortFree>
 8009066:	e001      	b.n	800906c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009068:	2300      	movs	r3, #0
 800906a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d013      	beq.n	800909a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009072:	88fa      	ldrh	r2, [r7, #6]
 8009074:	2300      	movs	r3, #0
 8009076:	9303      	str	r3, [sp, #12]
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	9302      	str	r3, [sp, #8]
 800907c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f000 f80f 	bl	80090ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800908e:	69f8      	ldr	r0, [r7, #28]
 8009090:	f000 f8ac 	bl	80091ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009094:	2301      	movs	r3, #1
 8009096:	61bb      	str	r3, [r7, #24]
 8009098:	e002      	b.n	80090a0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800909a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800909e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090a0:	69bb      	ldr	r3, [r7, #24]
	}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3720      	adds	r7, #32
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b088      	sub	sp, #32
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80090c4:	3b01      	subs	r3, #1
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f023 0307 	bic.w	r3, r3, #7
 80090d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00b      	beq.n	80090f6 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	e7fd      	b.n	80090f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01f      	beq.n	800913c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090fc:	2300      	movs	r3, #0
 80090fe:	61fb      	str	r3, [r7, #28]
 8009100:	e012      	b.n	8009128 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	4413      	add	r3, r2
 8009108:	7819      	ldrb	r1, [r3, #0]
 800910a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	4413      	add	r3, r2
 8009110:	3334      	adds	r3, #52	@ 0x34
 8009112:	460a      	mov	r2, r1
 8009114:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	4413      	add	r3, r2
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d006      	beq.n	8009130 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	3301      	adds	r3, #1
 8009126:	61fb      	str	r3, [r7, #28]
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	2b0f      	cmp	r3, #15
 800912c:	d9e9      	bls.n	8009102 <prvInitialiseNewTask+0x56>
 800912e:	e000      	b.n	8009132 <prvInitialiseNewTask+0x86>
			{
				break;
 8009130:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800913a:	e003      	b.n	8009144 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800913c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009146:	2b06      	cmp	r3, #6
 8009148:	d901      	bls.n	800914e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800914a:	2306      	movs	r3, #6
 800914c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009152:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009158:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	2200      	movs	r2, #0
 800915e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	3304      	adds	r3, #4
 8009164:	4618      	mov	r0, r3
 8009166:	f7ff fecb 	bl	8008f00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	3318      	adds	r3, #24
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff fec6 	bl	8008f00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009178:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	f1c3 0207 	rsb	r2, r3, #7
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009188:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800918a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918c:	2200      	movs	r2, #0
 800918e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009194:	2200      	movs	r2, #0
 8009196:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800919a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919c:	334c      	adds	r3, #76	@ 0x4c
 800919e:	224c      	movs	r2, #76	@ 0x4c
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f002 f894 	bl	800b2d0 <memset>
 80091a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091aa:	4a0d      	ldr	r2, [pc, #52]	@ (80091e0 <prvInitialiseNewTask+0x134>)
 80091ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80091ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b0:	4a0c      	ldr	r2, [pc, #48]	@ (80091e4 <prvInitialiseNewTask+0x138>)
 80091b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80091b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b6:	4a0c      	ldr	r2, [pc, #48]	@ (80091e8 <prvInitialiseNewTask+0x13c>)
 80091b8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	68f9      	ldr	r1, [r7, #12]
 80091be:	69b8      	ldr	r0, [r7, #24]
 80091c0:	f000 fbf2 	bl	80099a8 <pxPortInitialiseStack>
 80091c4:	4602      	mov	r2, r0
 80091c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091d6:	bf00      	nop
 80091d8:	3720      	adds	r7, #32
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	2000132c 	.word	0x2000132c
 80091e4:	20001394 	.word	0x20001394
 80091e8:	200013fc 	.word	0x200013fc

080091ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091f4:	f000 fd08 	bl	8009c08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091f8:	4b2a      	ldr	r3, [pc, #168]	@ (80092a4 <prvAddNewTaskToReadyList+0xb8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3301      	adds	r3, #1
 80091fe:	4a29      	ldr	r2, [pc, #164]	@ (80092a4 <prvAddNewTaskToReadyList+0xb8>)
 8009200:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009202:	4b29      	ldr	r3, [pc, #164]	@ (80092a8 <prvAddNewTaskToReadyList+0xbc>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800920a:	4a27      	ldr	r2, [pc, #156]	@ (80092a8 <prvAddNewTaskToReadyList+0xbc>)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009210:	4b24      	ldr	r3, [pc, #144]	@ (80092a4 <prvAddNewTaskToReadyList+0xb8>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d110      	bne.n	800923a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009218:	f000 fabc 	bl	8009794 <prvInitialiseTaskLists>
 800921c:	e00d      	b.n	800923a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800921e:	4b23      	ldr	r3, [pc, #140]	@ (80092ac <prvAddNewTaskToReadyList+0xc0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009226:	4b20      	ldr	r3, [pc, #128]	@ (80092a8 <prvAddNewTaskToReadyList+0xbc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009230:	429a      	cmp	r2, r3
 8009232:	d802      	bhi.n	800923a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009234:	4a1c      	ldr	r2, [pc, #112]	@ (80092a8 <prvAddNewTaskToReadyList+0xbc>)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800923a:	4b1d      	ldr	r3, [pc, #116]	@ (80092b0 <prvAddNewTaskToReadyList+0xc4>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3301      	adds	r3, #1
 8009240:	4a1b      	ldr	r2, [pc, #108]	@ (80092b0 <prvAddNewTaskToReadyList+0xc4>)
 8009242:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009248:	2201      	movs	r2, #1
 800924a:	409a      	lsls	r2, r3
 800924c:	4b19      	ldr	r3, [pc, #100]	@ (80092b4 <prvAddNewTaskToReadyList+0xc8>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4313      	orrs	r3, r2
 8009252:	4a18      	ldr	r2, [pc, #96]	@ (80092b4 <prvAddNewTaskToReadyList+0xc8>)
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925a:	4613      	mov	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4a15      	ldr	r2, [pc, #84]	@ (80092b8 <prvAddNewTaskToReadyList+0xcc>)
 8009264:	441a      	add	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3304      	adds	r3, #4
 800926a:	4619      	mov	r1, r3
 800926c:	4610      	mov	r0, r2
 800926e:	f7ff fe54 	bl	8008f1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009272:	f000 fcfb 	bl	8009c6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009276:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <prvAddNewTaskToReadyList+0xc0>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00e      	beq.n	800929c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800927e:	4b0a      	ldr	r3, [pc, #40]	@ (80092a8 <prvAddNewTaskToReadyList+0xbc>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009288:	429a      	cmp	r2, r3
 800928a:	d207      	bcs.n	800929c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800928c:	4b0b      	ldr	r3, [pc, #44]	@ (80092bc <prvAddNewTaskToReadyList+0xd0>)
 800928e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	200006d8 	.word	0x200006d8
 80092a8:	200005d8 	.word	0x200005d8
 80092ac:	200006e4 	.word	0x200006e4
 80092b0:	200006f4 	.word	0x200006f4
 80092b4:	200006e0 	.word	0x200006e0
 80092b8:	200005dc 	.word	0x200005dc
 80092bc:	e000ed04 	.word	0xe000ed04

080092c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092c8:	2300      	movs	r3, #0
 80092ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d018      	beq.n	8009304 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092d2:	4b14      	ldr	r3, [pc, #80]	@ (8009324 <vTaskDelay+0x64>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00b      	beq.n	80092f2 <vTaskDelay+0x32>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	60bb      	str	r3, [r7, #8]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092f2:	f000 f86d 	bl	80093d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092f6:	2100      	movs	r1, #0
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 faef 	bl	80098dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092fe:	f000 f875 	bl	80093ec <xTaskResumeAll>
 8009302:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d107      	bne.n	800931a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800930a:	4b07      	ldr	r3, [pc, #28]	@ (8009328 <vTaskDelay+0x68>)
 800930c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	20000700 	.word	0x20000700
 8009328:	e000ed04 	.word	0xe000ed04

0800932c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009332:	4b1f      	ldr	r3, [pc, #124]	@ (80093b0 <vTaskStartScheduler+0x84>)
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	2300      	movs	r3, #0
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	2300      	movs	r3, #0
 800933c:	2280      	movs	r2, #128	@ 0x80
 800933e:	491d      	ldr	r1, [pc, #116]	@ (80093b4 <vTaskStartScheduler+0x88>)
 8009340:	481d      	ldr	r0, [pc, #116]	@ (80093b8 <vTaskStartScheduler+0x8c>)
 8009342:	f7ff fe71 	bl	8009028 <xTaskCreate>
 8009346:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d11b      	bne.n	8009386 <vTaskStartScheduler+0x5a>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	60bb      	str	r3, [r7, #8]
}
 8009360:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009362:	4b16      	ldr	r3, [pc, #88]	@ (80093bc <vTaskStartScheduler+0x90>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	334c      	adds	r3, #76	@ 0x4c
 8009368:	4a15      	ldr	r2, [pc, #84]	@ (80093c0 <vTaskStartScheduler+0x94>)
 800936a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800936c:	4b15      	ldr	r3, [pc, #84]	@ (80093c4 <vTaskStartScheduler+0x98>)
 800936e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009372:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009374:	4b14      	ldr	r3, [pc, #80]	@ (80093c8 <vTaskStartScheduler+0x9c>)
 8009376:	2201      	movs	r2, #1
 8009378:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800937a:	4b14      	ldr	r3, [pc, #80]	@ (80093cc <vTaskStartScheduler+0xa0>)
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009380:	f000 fb9e 	bl	8009ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009384:	e00f      	b.n	80093a6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800938c:	d10b      	bne.n	80093a6 <vTaskStartScheduler+0x7a>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	607b      	str	r3, [r7, #4]
}
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
 80093a4:	e7fd      	b.n	80093a2 <vTaskStartScheduler+0x76>
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200006fc 	.word	0x200006fc
 80093b4:	0800ebe4 	.word	0x0800ebe4
 80093b8:	08009765 	.word	0x08009765
 80093bc:	200005d8 	.word	0x200005d8
 80093c0:	2000001c 	.word	0x2000001c
 80093c4:	200006f8 	.word	0x200006f8
 80093c8:	200006e4 	.word	0x200006e4
 80093cc:	200006dc 	.word	0x200006dc

080093d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093d4:	4b04      	ldr	r3, [pc, #16]	@ (80093e8 <vTaskSuspendAll+0x18>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	4a03      	ldr	r2, [pc, #12]	@ (80093e8 <vTaskSuspendAll+0x18>)
 80093dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093de:	bf00      	nop
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	20000700 	.word	0x20000700

080093ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093fa:	4b42      	ldr	r3, [pc, #264]	@ (8009504 <xTaskResumeAll+0x118>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10b      	bne.n	800941a <xTaskResumeAll+0x2e>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	603b      	str	r3, [r7, #0]
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop
 8009418:	e7fd      	b.n	8009416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800941a:	f000 fbf5 	bl	8009c08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800941e:	4b39      	ldr	r3, [pc, #228]	@ (8009504 <xTaskResumeAll+0x118>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3b01      	subs	r3, #1
 8009424:	4a37      	ldr	r2, [pc, #220]	@ (8009504 <xTaskResumeAll+0x118>)
 8009426:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009428:	4b36      	ldr	r3, [pc, #216]	@ (8009504 <xTaskResumeAll+0x118>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d161      	bne.n	80094f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009430:	4b35      	ldr	r3, [pc, #212]	@ (8009508 <xTaskResumeAll+0x11c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d05d      	beq.n	80094f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009438:	e02e      	b.n	8009498 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800943a:	4b34      	ldr	r3, [pc, #208]	@ (800950c <xTaskResumeAll+0x120>)
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3318      	adds	r3, #24
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff fdc4 	bl	8008fd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3304      	adds	r3, #4
 8009450:	4618      	mov	r0, r3
 8009452:	f7ff fdbf 	bl	8008fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945a:	2201      	movs	r2, #1
 800945c:	409a      	lsls	r2, r3
 800945e:	4b2c      	ldr	r3, [pc, #176]	@ (8009510 <xTaskResumeAll+0x124>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4313      	orrs	r3, r2
 8009464:	4a2a      	ldr	r2, [pc, #168]	@ (8009510 <xTaskResumeAll+0x124>)
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4a27      	ldr	r2, [pc, #156]	@ (8009514 <xTaskResumeAll+0x128>)
 8009476:	441a      	add	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3304      	adds	r3, #4
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7ff fd4b 	bl	8008f1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009488:	4b23      	ldr	r3, [pc, #140]	@ (8009518 <xTaskResumeAll+0x12c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948e:	429a      	cmp	r2, r3
 8009490:	d302      	bcc.n	8009498 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009492:	4b22      	ldr	r3, [pc, #136]	@ (800951c <xTaskResumeAll+0x130>)
 8009494:	2201      	movs	r2, #1
 8009496:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009498:	4b1c      	ldr	r3, [pc, #112]	@ (800950c <xTaskResumeAll+0x120>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1cc      	bne.n	800943a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094a6:	f000 f9f9 	bl	800989c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009520 <xTaskResumeAll+0x134>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d010      	beq.n	80094d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094b6:	f000 f837 	bl	8009528 <xTaskIncrementTick>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80094c0:	4b16      	ldr	r3, [pc, #88]	@ (800951c <xTaskResumeAll+0x130>)
 80094c2:	2201      	movs	r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1f1      	bne.n	80094b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80094d2:	4b13      	ldr	r3, [pc, #76]	@ (8009520 <xTaskResumeAll+0x134>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094d8:	4b10      	ldr	r3, [pc, #64]	@ (800951c <xTaskResumeAll+0x130>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d009      	beq.n	80094f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094e0:	2301      	movs	r3, #1
 80094e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009524 <xTaskResumeAll+0x138>)
 80094e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094f4:	f000 fbba 	bl	8009c6c <vPortExitCritical>

	return xAlreadyYielded;
 80094f8:	68bb      	ldr	r3, [r7, #8]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20000700 	.word	0x20000700
 8009508:	200006d8 	.word	0x200006d8
 800950c:	20000698 	.word	0x20000698
 8009510:	200006e0 	.word	0x200006e0
 8009514:	200005dc 	.word	0x200005dc
 8009518:	200005d8 	.word	0x200005d8
 800951c:	200006ec 	.word	0x200006ec
 8009520:	200006e8 	.word	0x200006e8
 8009524:	e000ed04 	.word	0xe000ed04

08009528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800952e:	2300      	movs	r3, #0
 8009530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009532:	4b4f      	ldr	r3, [pc, #316]	@ (8009670 <xTaskIncrementTick+0x148>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f040 808f 	bne.w	800965a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800953c:	4b4d      	ldr	r3, [pc, #308]	@ (8009674 <xTaskIncrementTick+0x14c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3301      	adds	r3, #1
 8009542:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009544:	4a4b      	ldr	r2, [pc, #300]	@ (8009674 <xTaskIncrementTick+0x14c>)
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d121      	bne.n	8009594 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009550:	4b49      	ldr	r3, [pc, #292]	@ (8009678 <xTaskIncrementTick+0x150>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00b      	beq.n	8009572 <xTaskIncrementTick+0x4a>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	603b      	str	r3, [r7, #0]
}
 800956c:	bf00      	nop
 800956e:	bf00      	nop
 8009570:	e7fd      	b.n	800956e <xTaskIncrementTick+0x46>
 8009572:	4b41      	ldr	r3, [pc, #260]	@ (8009678 <xTaskIncrementTick+0x150>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	4b40      	ldr	r3, [pc, #256]	@ (800967c <xTaskIncrementTick+0x154>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a3e      	ldr	r2, [pc, #248]	@ (8009678 <xTaskIncrementTick+0x150>)
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	4a3e      	ldr	r2, [pc, #248]	@ (800967c <xTaskIncrementTick+0x154>)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	4b3e      	ldr	r3, [pc, #248]	@ (8009680 <xTaskIncrementTick+0x158>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3301      	adds	r3, #1
 800958c:	4a3c      	ldr	r2, [pc, #240]	@ (8009680 <xTaskIncrementTick+0x158>)
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	f000 f984 	bl	800989c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009594:	4b3b      	ldr	r3, [pc, #236]	@ (8009684 <xTaskIncrementTick+0x15c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	429a      	cmp	r2, r3
 800959c:	d348      	bcc.n	8009630 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800959e:	4b36      	ldr	r3, [pc, #216]	@ (8009678 <xTaskIncrementTick+0x150>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d104      	bne.n	80095b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095a8:	4b36      	ldr	r3, [pc, #216]	@ (8009684 <xTaskIncrementTick+0x15c>)
 80095aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095ae:	601a      	str	r2, [r3, #0]
					break;
 80095b0:	e03e      	b.n	8009630 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095b2:	4b31      	ldr	r3, [pc, #196]	@ (8009678 <xTaskIncrementTick+0x150>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d203      	bcs.n	80095d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009684 <xTaskIncrementTick+0x15c>)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095d0:	e02e      	b.n	8009630 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fcfc 	bl	8008fd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d004      	beq.n	80095ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	3318      	adds	r3, #24
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fcf3 	bl	8008fd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f2:	2201      	movs	r2, #1
 80095f4:	409a      	lsls	r2, r3
 80095f6:	4b24      	ldr	r3, [pc, #144]	@ (8009688 <xTaskIncrementTick+0x160>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	4a22      	ldr	r2, [pc, #136]	@ (8009688 <xTaskIncrementTick+0x160>)
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009604:	4613      	mov	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4a1f      	ldr	r2, [pc, #124]	@ (800968c <xTaskIncrementTick+0x164>)
 800960e:	441a      	add	r2, r3
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	3304      	adds	r3, #4
 8009614:	4619      	mov	r1, r3
 8009616:	4610      	mov	r0, r2
 8009618:	f7ff fc7f 	bl	8008f1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009620:	4b1b      	ldr	r3, [pc, #108]	@ (8009690 <xTaskIncrementTick+0x168>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009626:	429a      	cmp	r2, r3
 8009628:	d3b9      	bcc.n	800959e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800962a:	2301      	movs	r3, #1
 800962c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800962e:	e7b6      	b.n	800959e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009630:	4b17      	ldr	r3, [pc, #92]	@ (8009690 <xTaskIncrementTick+0x168>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009636:	4915      	ldr	r1, [pc, #84]	@ (800968c <xTaskIncrementTick+0x164>)
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	440b      	add	r3, r1
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d901      	bls.n	800964c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009648:	2301      	movs	r3, #1
 800964a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800964c:	4b11      	ldr	r3, [pc, #68]	@ (8009694 <xTaskIncrementTick+0x16c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d007      	beq.n	8009664 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009654:	2301      	movs	r3, #1
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e004      	b.n	8009664 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800965a:	4b0f      	ldr	r3, [pc, #60]	@ (8009698 <xTaskIncrementTick+0x170>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3301      	adds	r3, #1
 8009660:	4a0d      	ldr	r2, [pc, #52]	@ (8009698 <xTaskIncrementTick+0x170>)
 8009662:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009664:	697b      	ldr	r3, [r7, #20]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000700 	.word	0x20000700
 8009674:	200006dc 	.word	0x200006dc
 8009678:	20000690 	.word	0x20000690
 800967c:	20000694 	.word	0x20000694
 8009680:	200006f0 	.word	0x200006f0
 8009684:	200006f8 	.word	0x200006f8
 8009688:	200006e0 	.word	0x200006e0
 800968c:	200005dc 	.word	0x200005dc
 8009690:	200005d8 	.word	0x200005d8
 8009694:	200006ec 	.word	0x200006ec
 8009698:	200006e8 	.word	0x200006e8

0800969c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096a2:	4b2a      	ldr	r3, [pc, #168]	@ (800974c <vTaskSwitchContext+0xb0>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096aa:	4b29      	ldr	r3, [pc, #164]	@ (8009750 <vTaskSwitchContext+0xb4>)
 80096ac:	2201      	movs	r2, #1
 80096ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096b0:	e045      	b.n	800973e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80096b2:	4b27      	ldr	r3, [pc, #156]	@ (8009750 <vTaskSwitchContext+0xb4>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096b8:	4b26      	ldr	r3, [pc, #152]	@ (8009754 <vTaskSwitchContext+0xb8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	fab3 f383 	clz	r3, r3
 80096c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80096c6:	7afb      	ldrb	r3, [r7, #11]
 80096c8:	f1c3 031f 	rsb	r3, r3, #31
 80096cc:	617b      	str	r3, [r7, #20]
 80096ce:	4922      	ldr	r1, [pc, #136]	@ (8009758 <vTaskSwitchContext+0xbc>)
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	440b      	add	r3, r1
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <vTaskSwitchContext+0x5e>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	607b      	str	r3, [r7, #4]
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <vTaskSwitchContext+0x5a>
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	4613      	mov	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4a14      	ldr	r2, [pc, #80]	@ (8009758 <vTaskSwitchContext+0xbc>)
 8009706:	4413      	add	r3, r2
 8009708:	613b      	str	r3, [r7, #16]
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	605a      	str	r2, [r3, #4]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	3308      	adds	r3, #8
 800971c:	429a      	cmp	r2, r3
 800971e:	d104      	bne.n	800972a <vTaskSwitchContext+0x8e>
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	605a      	str	r2, [r3, #4]
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	4a0a      	ldr	r2, [pc, #40]	@ (800975c <vTaskSwitchContext+0xc0>)
 8009732:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009734:	4b09      	ldr	r3, [pc, #36]	@ (800975c <vTaskSwitchContext+0xc0>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	334c      	adds	r3, #76	@ 0x4c
 800973a:	4a09      	ldr	r2, [pc, #36]	@ (8009760 <vTaskSwitchContext+0xc4>)
 800973c:	6013      	str	r3, [r2, #0]
}
 800973e:	bf00      	nop
 8009740:	371c      	adds	r7, #28
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	20000700 	.word	0x20000700
 8009750:	200006ec 	.word	0x200006ec
 8009754:	200006e0 	.word	0x200006e0
 8009758:	200005dc 	.word	0x200005dc
 800975c:	200005d8 	.word	0x200005d8
 8009760:	2000001c 	.word	0x2000001c

08009764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800976c:	f000 f852 	bl	8009814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009770:	4b06      	ldr	r3, [pc, #24]	@ (800978c <prvIdleTask+0x28>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d9f9      	bls.n	800976c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009778:	4b05      	ldr	r3, [pc, #20]	@ (8009790 <prvIdleTask+0x2c>)
 800977a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009788:	e7f0      	b.n	800976c <prvIdleTask+0x8>
 800978a:	bf00      	nop
 800978c:	200005dc 	.word	0x200005dc
 8009790:	e000ed04 	.word	0xe000ed04

08009794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800979a:	2300      	movs	r3, #0
 800979c:	607b      	str	r3, [r7, #4]
 800979e:	e00c      	b.n	80097ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4a12      	ldr	r2, [pc, #72]	@ (80097f4 <prvInitialiseTaskLists+0x60>)
 80097ac:	4413      	add	r3, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff fb86 	bl	8008ec0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3301      	adds	r3, #1
 80097b8:	607b      	str	r3, [r7, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b06      	cmp	r3, #6
 80097be:	d9ef      	bls.n	80097a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097c0:	480d      	ldr	r0, [pc, #52]	@ (80097f8 <prvInitialiseTaskLists+0x64>)
 80097c2:	f7ff fb7d 	bl	8008ec0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097c6:	480d      	ldr	r0, [pc, #52]	@ (80097fc <prvInitialiseTaskLists+0x68>)
 80097c8:	f7ff fb7a 	bl	8008ec0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097cc:	480c      	ldr	r0, [pc, #48]	@ (8009800 <prvInitialiseTaskLists+0x6c>)
 80097ce:	f7ff fb77 	bl	8008ec0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097d2:	480c      	ldr	r0, [pc, #48]	@ (8009804 <prvInitialiseTaskLists+0x70>)
 80097d4:	f7ff fb74 	bl	8008ec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097d8:	480b      	ldr	r0, [pc, #44]	@ (8009808 <prvInitialiseTaskLists+0x74>)
 80097da:	f7ff fb71 	bl	8008ec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097de:	4b0b      	ldr	r3, [pc, #44]	@ (800980c <prvInitialiseTaskLists+0x78>)
 80097e0:	4a05      	ldr	r2, [pc, #20]	@ (80097f8 <prvInitialiseTaskLists+0x64>)
 80097e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009810 <prvInitialiseTaskLists+0x7c>)
 80097e6:	4a05      	ldr	r2, [pc, #20]	@ (80097fc <prvInitialiseTaskLists+0x68>)
 80097e8:	601a      	str	r2, [r3, #0]
}
 80097ea:	bf00      	nop
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	200005dc 	.word	0x200005dc
 80097f8:	20000668 	.word	0x20000668
 80097fc:	2000067c 	.word	0x2000067c
 8009800:	20000698 	.word	0x20000698
 8009804:	200006ac 	.word	0x200006ac
 8009808:	200006c4 	.word	0x200006c4
 800980c:	20000690 	.word	0x20000690
 8009810:	20000694 	.word	0x20000694

08009814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800981a:	e019      	b.n	8009850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800981c:	f000 f9f4 	bl	8009c08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009820:	4b10      	ldr	r3, [pc, #64]	@ (8009864 <prvCheckTasksWaitingTermination+0x50>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3304      	adds	r3, #4
 800982c:	4618      	mov	r0, r3
 800982e:	f7ff fbd1 	bl	8008fd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009832:	4b0d      	ldr	r3, [pc, #52]	@ (8009868 <prvCheckTasksWaitingTermination+0x54>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3b01      	subs	r3, #1
 8009838:	4a0b      	ldr	r2, [pc, #44]	@ (8009868 <prvCheckTasksWaitingTermination+0x54>)
 800983a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800983c:	4b0b      	ldr	r3, [pc, #44]	@ (800986c <prvCheckTasksWaitingTermination+0x58>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3b01      	subs	r3, #1
 8009842:	4a0a      	ldr	r2, [pc, #40]	@ (800986c <prvCheckTasksWaitingTermination+0x58>)
 8009844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009846:	f000 fa11 	bl	8009c6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f810 	bl	8009870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009850:	4b06      	ldr	r3, [pc, #24]	@ (800986c <prvCheckTasksWaitingTermination+0x58>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e1      	bne.n	800981c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	200006ac 	.word	0x200006ac
 8009868:	200006d8 	.word	0x200006d8
 800986c:	200006c0 	.word	0x200006c0

08009870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	334c      	adds	r3, #76	@ 0x4c
 800987c:	4618      	mov	r0, r3
 800987e:	f001 fd43 	bl	800b308 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fb6c 	bl	8009f64 <vPortFree>
			vPortFree( pxTCB );
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fb69 	bl	8009f64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098a2:	4b0c      	ldr	r3, [pc, #48]	@ (80098d4 <prvResetNextTaskUnblockTime+0x38>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d104      	bne.n	80098b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098ac:	4b0a      	ldr	r3, [pc, #40]	@ (80098d8 <prvResetNextTaskUnblockTime+0x3c>)
 80098ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80098b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098b4:	e008      	b.n	80098c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b6:	4b07      	ldr	r3, [pc, #28]	@ (80098d4 <prvResetNextTaskUnblockTime+0x38>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	4a04      	ldr	r2, [pc, #16]	@ (80098d8 <prvResetNextTaskUnblockTime+0x3c>)
 80098c6:	6013      	str	r3, [r2, #0]
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	20000690 	.word	0x20000690
 80098d8:	200006f8 	.word	0x200006f8

080098dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098e6:	4b29      	ldr	r3, [pc, #164]	@ (800998c <prvAddCurrentTaskToDelayedList+0xb0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ec:	4b28      	ldr	r3, [pc, #160]	@ (8009990 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3304      	adds	r3, #4
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7ff fb6e 	bl	8008fd4 <uxListRemove>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10b      	bne.n	8009916 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80098fe:	4b24      	ldr	r3, [pc, #144]	@ (8009990 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009904:	2201      	movs	r2, #1
 8009906:	fa02 f303 	lsl.w	r3, r2, r3
 800990a:	43da      	mvns	r2, r3
 800990c:	4b21      	ldr	r3, [pc, #132]	@ (8009994 <prvAddCurrentTaskToDelayedList+0xb8>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4013      	ands	r3, r2
 8009912:	4a20      	ldr	r2, [pc, #128]	@ (8009994 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009914:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800991c:	d10a      	bne.n	8009934 <prvAddCurrentTaskToDelayedList+0x58>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d007      	beq.n	8009934 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009924:	4b1a      	ldr	r3, [pc, #104]	@ (8009990 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3304      	adds	r3, #4
 800992a:	4619      	mov	r1, r3
 800992c:	481a      	ldr	r0, [pc, #104]	@ (8009998 <prvAddCurrentTaskToDelayedList+0xbc>)
 800992e:	f7ff faf4 	bl	8008f1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009932:	e026      	b.n	8009982 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4413      	add	r3, r2
 800993a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800993c:	4b14      	ldr	r3, [pc, #80]	@ (8009990 <prvAddCurrentTaskToDelayedList+0xb4>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	429a      	cmp	r2, r3
 800994a:	d209      	bcs.n	8009960 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800994c:	4b13      	ldr	r3, [pc, #76]	@ (800999c <prvAddCurrentTaskToDelayedList+0xc0>)
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	4b0f      	ldr	r3, [pc, #60]	@ (8009990 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3304      	adds	r3, #4
 8009956:	4619      	mov	r1, r3
 8009958:	4610      	mov	r0, r2
 800995a:	f7ff fb02 	bl	8008f62 <vListInsert>
}
 800995e:	e010      	b.n	8009982 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009960:	4b0f      	ldr	r3, [pc, #60]	@ (80099a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	4b0a      	ldr	r3, [pc, #40]	@ (8009990 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3304      	adds	r3, #4
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f7ff faf8 	bl	8008f62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009972:	4b0c      	ldr	r3, [pc, #48]	@ (80099a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	429a      	cmp	r2, r3
 800997a:	d202      	bcs.n	8009982 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800997c:	4a09      	ldr	r2, [pc, #36]	@ (80099a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	6013      	str	r3, [r2, #0]
}
 8009982:	bf00      	nop
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	200006dc 	.word	0x200006dc
 8009990:	200005d8 	.word	0x200005d8
 8009994:	200006e0 	.word	0x200006e0
 8009998:	200006c4 	.word	0x200006c4
 800999c:	20000694 	.word	0x20000694
 80099a0:	20000690 	.word	0x20000690
 80099a4:	200006f8 	.word	0x200006f8

080099a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3b04      	subs	r3, #4
 80099b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80099c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	3b04      	subs	r3, #4
 80099c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f023 0201 	bic.w	r2, r3, #1
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3b04      	subs	r3, #4
 80099d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80099d8:	4a0c      	ldr	r2, [pc, #48]	@ (8009a0c <pxPortInitialiseStack+0x64>)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3b14      	subs	r3, #20
 80099e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3b04      	subs	r3, #4
 80099ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f06f 0202 	mvn.w	r2, #2
 80099f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3b20      	subs	r3, #32
 80099fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099fe:	68fb      	ldr	r3, [r7, #12]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	08009a11 	.word	0x08009a11

08009a10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a1a:	4b13      	ldr	r3, [pc, #76]	@ (8009a68 <prvTaskExitError+0x58>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a22:	d00b      	beq.n	8009a3c <prvTaskExitError+0x2c>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	60fb      	str	r3, [r7, #12]
}
 8009a36:	bf00      	nop
 8009a38:	bf00      	nop
 8009a3a:	e7fd      	b.n	8009a38 <prvTaskExitError+0x28>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	60bb      	str	r3, [r7, #8]
}
 8009a4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a50:	bf00      	nop
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0fc      	beq.n	8009a52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	2000000c 	.word	0x2000000c
 8009a6c:	00000000 	.word	0x00000000

08009a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a70:	4b07      	ldr	r3, [pc, #28]	@ (8009a90 <pxCurrentTCBConst2>)
 8009a72:	6819      	ldr	r1, [r3, #0]
 8009a74:	6808      	ldr	r0, [r1, #0]
 8009a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7a:	f380 8809 	msr	PSP, r0
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f04f 0000 	mov.w	r0, #0
 8009a86:	f380 8811 	msr	BASEPRI, r0
 8009a8a:	4770      	bx	lr
 8009a8c:	f3af 8000 	nop.w

08009a90 <pxCurrentTCBConst2>:
 8009a90:	200005d8 	.word	0x200005d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop

08009a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a98:	4808      	ldr	r0, [pc, #32]	@ (8009abc <prvPortStartFirstTask+0x24>)
 8009a9a:	6800      	ldr	r0, [r0, #0]
 8009a9c:	6800      	ldr	r0, [r0, #0]
 8009a9e:	f380 8808 	msr	MSP, r0
 8009aa2:	f04f 0000 	mov.w	r0, #0
 8009aa6:	f380 8814 	msr	CONTROL, r0
 8009aaa:	b662      	cpsie	i
 8009aac:	b661      	cpsie	f
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	df00      	svc	0
 8009ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009aba:	bf00      	nop
 8009abc:	e000ed08 	.word	0xe000ed08

08009ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ac6:	4b47      	ldr	r3, [pc, #284]	@ (8009be4 <xPortStartScheduler+0x124>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a47      	ldr	r2, [pc, #284]	@ (8009be8 <xPortStartScheduler+0x128>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d10b      	bne.n	8009ae8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	613b      	str	r3, [r7, #16]
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8009be4 <xPortStartScheduler+0x124>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a3f      	ldr	r2, [pc, #252]	@ (8009bec <xPortStartScheduler+0x12c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d10b      	bne.n	8009b0a <xPortStartScheduler+0x4a>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	60fb      	str	r3, [r7, #12]
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	e7fd      	b.n	8009b06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b0a:	4b39      	ldr	r3, [pc, #228]	@ (8009bf0 <xPortStartScheduler+0x130>)
 8009b0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	22ff      	movs	r2, #255	@ 0xff
 8009b1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	4b31      	ldr	r3, [pc, #196]	@ (8009bf4 <xPortStartScheduler+0x134>)
 8009b30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b32:	4b31      	ldr	r3, [pc, #196]	@ (8009bf8 <xPortStartScheduler+0x138>)
 8009b34:	2207      	movs	r2, #7
 8009b36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b38:	e009      	b.n	8009b4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8009bf8 <xPortStartScheduler+0x138>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	4a2d      	ldr	r2, [pc, #180]	@ (8009bf8 <xPortStartScheduler+0x138>)
 8009b42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b44:	78fb      	ldrb	r3, [r7, #3]
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b4e:	78fb      	ldrb	r3, [r7, #3]
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b56:	2b80      	cmp	r3, #128	@ 0x80
 8009b58:	d0ef      	beq.n	8009b3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b5a:	4b27      	ldr	r3, [pc, #156]	@ (8009bf8 <xPortStartScheduler+0x138>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f1c3 0307 	rsb	r3, r3, #7
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	d00b      	beq.n	8009b7e <xPortStartScheduler+0xbe>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	60bb      	str	r3, [r7, #8]
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	e7fd      	b.n	8009b7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8009bf8 <xPortStartScheduler+0x138>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	021b      	lsls	r3, r3, #8
 8009b84:	4a1c      	ldr	r2, [pc, #112]	@ (8009bf8 <xPortStartScheduler+0x138>)
 8009b86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b88:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf8 <xPortStartScheduler+0x138>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b90:	4a19      	ldr	r2, [pc, #100]	@ (8009bf8 <xPortStartScheduler+0x138>)
 8009b92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b9c:	4b17      	ldr	r3, [pc, #92]	@ (8009bfc <xPortStartScheduler+0x13c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a16      	ldr	r2, [pc, #88]	@ (8009bfc <xPortStartScheduler+0x13c>)
 8009ba2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ba6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ba8:	4b14      	ldr	r3, [pc, #80]	@ (8009bfc <xPortStartScheduler+0x13c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a13      	ldr	r2, [pc, #76]	@ (8009bfc <xPortStartScheduler+0x13c>)
 8009bae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009bb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009bb4:	f000 f8da 	bl	8009d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009bb8:	4b11      	ldr	r3, [pc, #68]	@ (8009c00 <xPortStartScheduler+0x140>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009bbe:	f000 f8f9 	bl	8009db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009bc2:	4b10      	ldr	r3, [pc, #64]	@ (8009c04 <xPortStartScheduler+0x144>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8009c04 <xPortStartScheduler+0x144>)
 8009bc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009bcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bce:	f7ff ff63 	bl	8009a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bd2:	f7ff fd63 	bl	800969c <vTaskSwitchContext>
	prvTaskExitError();
 8009bd6:	f7ff ff1b 	bl	8009a10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	e000ed00 	.word	0xe000ed00
 8009be8:	410fc271 	.word	0x410fc271
 8009bec:	410fc270 	.word	0x410fc270
 8009bf0:	e000e400 	.word	0xe000e400
 8009bf4:	20000704 	.word	0x20000704
 8009bf8:	20000708 	.word	0x20000708
 8009bfc:	e000ed20 	.word	0xe000ed20
 8009c00:	2000000c 	.word	0x2000000c
 8009c04:	e000ef34 	.word	0xe000ef34

08009c08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	607b      	str	r3, [r7, #4]
}
 8009c20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c22:	4b10      	ldr	r3, [pc, #64]	@ (8009c64 <vPortEnterCritical+0x5c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3301      	adds	r3, #1
 8009c28:	4a0e      	ldr	r2, [pc, #56]	@ (8009c64 <vPortEnterCritical+0x5c>)
 8009c2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c64 <vPortEnterCritical+0x5c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d110      	bne.n	8009c56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c34:	4b0c      	ldr	r3, [pc, #48]	@ (8009c68 <vPortEnterCritical+0x60>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00b      	beq.n	8009c56 <vPortEnterCritical+0x4e>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	603b      	str	r3, [r7, #0]
}
 8009c50:	bf00      	nop
 8009c52:	bf00      	nop
 8009c54:	e7fd      	b.n	8009c52 <vPortEnterCritical+0x4a>
	}
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	2000000c 	.word	0x2000000c
 8009c68:	e000ed04 	.word	0xe000ed04

08009c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c72:	4b12      	ldr	r3, [pc, #72]	@ (8009cbc <vPortExitCritical+0x50>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10b      	bne.n	8009c92 <vPortExitCritical+0x26>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	607b      	str	r3, [r7, #4]
}
 8009c8c:	bf00      	nop
 8009c8e:	bf00      	nop
 8009c90:	e7fd      	b.n	8009c8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c92:	4b0a      	ldr	r3, [pc, #40]	@ (8009cbc <vPortExitCritical+0x50>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	4a08      	ldr	r2, [pc, #32]	@ (8009cbc <vPortExitCritical+0x50>)
 8009c9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c9c:	4b07      	ldr	r3, [pc, #28]	@ (8009cbc <vPortExitCritical+0x50>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d105      	bne.n	8009cb0 <vPortExitCritical+0x44>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009cae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	2000000c 	.word	0x2000000c

08009cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009cc0:	f3ef 8009 	mrs	r0, PSP
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	4b15      	ldr	r3, [pc, #84]	@ (8009d20 <pxCurrentTCBConst>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	f01e 0f10 	tst.w	lr, #16
 8009cd0:	bf08      	it	eq
 8009cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cda:	6010      	str	r0, [r2, #0]
 8009cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ce0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ce4:	f380 8811 	msr	BASEPRI, r0
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f7ff fcd4 	bl	800969c <vTaskSwitchContext>
 8009cf4:	f04f 0000 	mov.w	r0, #0
 8009cf8:	f380 8811 	msr	BASEPRI, r0
 8009cfc:	bc09      	pop	{r0, r3}
 8009cfe:	6819      	ldr	r1, [r3, #0]
 8009d00:	6808      	ldr	r0, [r1, #0]
 8009d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d06:	f01e 0f10 	tst.w	lr, #16
 8009d0a:	bf08      	it	eq
 8009d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d10:	f380 8809 	msr	PSP, r0
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	f3af 8000 	nop.w

08009d20 <pxCurrentTCBConst>:
 8009d20:	200005d8 	.word	0x200005d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop

08009d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	607b      	str	r3, [r7, #4]
}
 8009d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d42:	f7ff fbf1 	bl	8009528 <xTaskIncrementTick>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d4c:	4b06      	ldr	r3, [pc, #24]	@ (8009d68 <SysTick_Handler+0x40>)
 8009d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	2300      	movs	r3, #0
 8009d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	f383 8811 	msr	BASEPRI, r3
}
 8009d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	e000ed04 	.word	0xe000ed04

08009d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d70:	4b0b      	ldr	r3, [pc, #44]	@ (8009da0 <vPortSetupTimerInterrupt+0x34>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d76:	4b0b      	ldr	r3, [pc, #44]	@ (8009da4 <vPortSetupTimerInterrupt+0x38>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009da8 <vPortSetupTimerInterrupt+0x3c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a0a      	ldr	r2, [pc, #40]	@ (8009dac <vPortSetupTimerInterrupt+0x40>)
 8009d82:	fba2 2303 	umull	r2, r3, r2, r3
 8009d86:	099b      	lsrs	r3, r3, #6
 8009d88:	4a09      	ldr	r2, [pc, #36]	@ (8009db0 <vPortSetupTimerInterrupt+0x44>)
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d8e:	4b04      	ldr	r3, [pc, #16]	@ (8009da0 <vPortSetupTimerInterrupt+0x34>)
 8009d90:	2207      	movs	r2, #7
 8009d92:	601a      	str	r2, [r3, #0]
}
 8009d94:	bf00      	nop
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	e000e010 	.word	0xe000e010
 8009da4:	e000e018 	.word	0xe000e018
 8009da8:	20000000 	.word	0x20000000
 8009dac:	10624dd3 	.word	0x10624dd3
 8009db0:	e000e014 	.word	0xe000e014

08009db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009db4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009dc4 <vPortEnableVFP+0x10>
 8009db8:	6801      	ldr	r1, [r0, #0]
 8009dba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009dbe:	6001      	str	r1, [r0, #0]
 8009dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009dc2:	bf00      	nop
 8009dc4:	e000ed88 	.word	0xe000ed88

08009dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08a      	sub	sp, #40	@ 0x28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009dd4:	f7ff fafc 	bl	80093d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009dd8:	4b5c      	ldr	r3, [pc, #368]	@ (8009f4c <pvPortMalloc+0x184>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d101      	bne.n	8009de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009de0:	f000 f924 	bl	800a02c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009de4:	4b5a      	ldr	r3, [pc, #360]	@ (8009f50 <pvPortMalloc+0x188>)
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4013      	ands	r3, r2
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f040 8095 	bne.w	8009f1c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d01e      	beq.n	8009e36 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009df8:	2208      	movs	r2, #8
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f003 0307 	and.w	r3, r3, #7
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d015      	beq.n	8009e36 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f023 0307 	bic.w	r3, r3, #7
 8009e10:	3308      	adds	r3, #8
 8009e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <pvPortMalloc+0x6e>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	617b      	str	r3, [r7, #20]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d06f      	beq.n	8009f1c <pvPortMalloc+0x154>
 8009e3c:	4b45      	ldr	r3, [pc, #276]	@ (8009f54 <pvPortMalloc+0x18c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d86a      	bhi.n	8009f1c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e46:	4b44      	ldr	r3, [pc, #272]	@ (8009f58 <pvPortMalloc+0x190>)
 8009e48:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e4a:	4b43      	ldr	r3, [pc, #268]	@ (8009f58 <pvPortMalloc+0x190>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e50:	e004      	b.n	8009e5c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d903      	bls.n	8009e6e <pvPortMalloc+0xa6>
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1f1      	bne.n	8009e52 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e6e:	4b37      	ldr	r3, [pc, #220]	@ (8009f4c <pvPortMalloc+0x184>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d051      	beq.n	8009f1c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2208      	movs	r2, #8
 8009e7e:	4413      	add	r3, r2
 8009e80:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	1ad2      	subs	r2, r2, r3
 8009e92:	2308      	movs	r3, #8
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d920      	bls.n	8009edc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	f003 0307 	and.w	r3, r3, #7
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <pvPortMalloc+0xfc>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	613b      	str	r3, [r7, #16]
}
 8009ebe:	bf00      	nop
 8009ec0:	bf00      	nop
 8009ec2:	e7fd      	b.n	8009ec0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ed6:	69b8      	ldr	r0, [r7, #24]
 8009ed8:	f000 f90a 	bl	800a0f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009edc:	4b1d      	ldr	r3, [pc, #116]	@ (8009f54 <pvPortMalloc+0x18c>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8009f54 <pvPortMalloc+0x18c>)
 8009ee8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009eea:	4b1a      	ldr	r3, [pc, #104]	@ (8009f54 <pvPortMalloc+0x18c>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	4b1b      	ldr	r3, [pc, #108]	@ (8009f5c <pvPortMalloc+0x194>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d203      	bcs.n	8009efe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ef6:	4b17      	ldr	r3, [pc, #92]	@ (8009f54 <pvPortMalloc+0x18c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a18      	ldr	r2, [pc, #96]	@ (8009f5c <pvPortMalloc+0x194>)
 8009efc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	4b13      	ldr	r3, [pc, #76]	@ (8009f50 <pvPortMalloc+0x188>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	431a      	orrs	r2, r3
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f12:	4b13      	ldr	r3, [pc, #76]	@ (8009f60 <pvPortMalloc+0x198>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3301      	adds	r3, #1
 8009f18:	4a11      	ldr	r2, [pc, #68]	@ (8009f60 <pvPortMalloc+0x198>)
 8009f1a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f1c:	f7ff fa66 	bl	80093ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	f003 0307 	and.w	r3, r3, #7
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00b      	beq.n	8009f42 <pvPortMalloc+0x17a>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	60fb      	str	r3, [r7, #12]
}
 8009f3c:	bf00      	nop
 8009f3e:	bf00      	nop
 8009f40:	e7fd      	b.n	8009f3e <pvPortMalloc+0x176>
	return pvReturn;
 8009f42:	69fb      	ldr	r3, [r7, #28]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3728      	adds	r7, #40	@ 0x28
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20001314 	.word	0x20001314
 8009f50:	20001328 	.word	0x20001328
 8009f54:	20001318 	.word	0x20001318
 8009f58:	2000130c 	.word	0x2000130c
 8009f5c:	2000131c 	.word	0x2000131c
 8009f60:	20001320 	.word	0x20001320

08009f64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d04f      	beq.n	800a016 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f76:	2308      	movs	r3, #8
 8009f78:	425b      	negs	r3, r3
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	4b25      	ldr	r3, [pc, #148]	@ (800a020 <vPortFree+0xbc>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <vPortFree+0x46>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	60fb      	str	r3, [r7, #12]
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
 8009fa8:	e7fd      	b.n	8009fa6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00b      	beq.n	8009fca <vPortFree+0x66>
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	60bb      	str	r3, [r7, #8]
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop
 8009fc8:	e7fd      	b.n	8009fc6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	4b14      	ldr	r3, [pc, #80]	@ (800a020 <vPortFree+0xbc>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d01e      	beq.n	800a016 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d11a      	bne.n	800a016 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	4b0e      	ldr	r3, [pc, #56]	@ (800a020 <vPortFree+0xbc>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	43db      	mvns	r3, r3
 8009fea:	401a      	ands	r2, r3
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ff0:	f7ff f9ee 	bl	80093d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	4b0a      	ldr	r3, [pc, #40]	@ (800a024 <vPortFree+0xc0>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	4a09      	ldr	r2, [pc, #36]	@ (800a024 <vPortFree+0xc0>)
 800a000:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a002:	6938      	ldr	r0, [r7, #16]
 800a004:	f000 f874 	bl	800a0f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a008:	4b07      	ldr	r3, [pc, #28]	@ (800a028 <vPortFree+0xc4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3301      	adds	r3, #1
 800a00e:	4a06      	ldr	r2, [pc, #24]	@ (800a028 <vPortFree+0xc4>)
 800a010:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a012:	f7ff f9eb 	bl	80093ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a016:	bf00      	nop
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	20001328 	.word	0x20001328
 800a024:	20001318 	.word	0x20001318
 800a028:	20001324 	.word	0x20001324

0800a02c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a032:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a036:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a038:	4b27      	ldr	r3, [pc, #156]	@ (800a0d8 <prvHeapInit+0xac>)
 800a03a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f003 0307 	and.w	r3, r3, #7
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00c      	beq.n	800a060 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3307      	adds	r3, #7
 800a04a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0307 	bic.w	r3, r3, #7
 800a052:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	4a1f      	ldr	r2, [pc, #124]	@ (800a0d8 <prvHeapInit+0xac>)
 800a05c:	4413      	add	r3, r2
 800a05e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a064:	4a1d      	ldr	r2, [pc, #116]	@ (800a0dc <prvHeapInit+0xb0>)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a06a:	4b1c      	ldr	r3, [pc, #112]	@ (800a0dc <prvHeapInit+0xb0>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	4413      	add	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a078:	2208      	movs	r2, #8
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0307 	bic.w	r3, r3, #7
 800a086:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4a15      	ldr	r2, [pc, #84]	@ (800a0e0 <prvHeapInit+0xb4>)
 800a08c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a08e:	4b14      	ldr	r3, [pc, #80]	@ (800a0e0 <prvHeapInit+0xb4>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2200      	movs	r2, #0
 800a094:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a096:	4b12      	ldr	r3, [pc, #72]	@ (800a0e0 <prvHeapInit+0xb4>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2200      	movs	r2, #0
 800a09c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	1ad2      	subs	r2, r2, r3
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e0 <prvHeapInit+0xb4>)
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	4a0a      	ldr	r2, [pc, #40]	@ (800a0e4 <prvHeapInit+0xb8>)
 800a0ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	4a09      	ldr	r2, [pc, #36]	@ (800a0e8 <prvHeapInit+0xbc>)
 800a0c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0c4:	4b09      	ldr	r3, [pc, #36]	@ (800a0ec <prvHeapInit+0xc0>)
 800a0c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a0ca:	601a      	str	r2, [r3, #0]
}
 800a0cc:	bf00      	nop
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	2000070c 	.word	0x2000070c
 800a0dc:	2000130c 	.word	0x2000130c
 800a0e0:	20001314 	.word	0x20001314
 800a0e4:	2000131c 	.word	0x2000131c
 800a0e8:	20001318 	.word	0x20001318
 800a0ec:	20001328 	.word	0x20001328

0800a0f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0f8:	4b28      	ldr	r3, [pc, #160]	@ (800a19c <prvInsertBlockIntoFreeList+0xac>)
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	e002      	b.n	800a104 <prvInsertBlockIntoFreeList+0x14>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d8f7      	bhi.n	800a0fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	4413      	add	r3, r2
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d108      	bne.n	800a132 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	441a      	add	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	441a      	add	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	429a      	cmp	r2, r3
 800a144:	d118      	bne.n	800a178 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	4b15      	ldr	r3, [pc, #84]	@ (800a1a0 <prvInsertBlockIntoFreeList+0xb0>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d00d      	beq.n	800a16e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	441a      	add	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	e008      	b.n	800a180 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a16e:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a0 <prvInsertBlockIntoFreeList+0xb0>)
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	e003      	b.n	800a180 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	d002      	beq.n	800a18e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a18e:	bf00      	nop
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	2000130c 	.word	0x2000130c
 800a1a0:	20001314 	.word	0x20001314

0800a1a4 <__cvt>:
 800a1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a8:	ec57 6b10 	vmov	r6, r7, d0
 800a1ac:	2f00      	cmp	r7, #0
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	bfbb      	ittet	lt
 800a1b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a1ba:	461f      	movlt	r7, r3
 800a1bc:	2300      	movge	r3, #0
 800a1be:	232d      	movlt	r3, #45	@ 0x2d
 800a1c0:	700b      	strb	r3, [r1, #0]
 800a1c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a1c8:	4691      	mov	r9, r2
 800a1ca:	f023 0820 	bic.w	r8, r3, #32
 800a1ce:	bfbc      	itt	lt
 800a1d0:	4632      	movlt	r2, r6
 800a1d2:	4616      	movlt	r6, r2
 800a1d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1d8:	d005      	beq.n	800a1e6 <__cvt+0x42>
 800a1da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a1de:	d100      	bne.n	800a1e2 <__cvt+0x3e>
 800a1e0:	3401      	adds	r4, #1
 800a1e2:	2102      	movs	r1, #2
 800a1e4:	e000      	b.n	800a1e8 <__cvt+0x44>
 800a1e6:	2103      	movs	r1, #3
 800a1e8:	ab03      	add	r3, sp, #12
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	ab02      	add	r3, sp, #8
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	ec47 6b10 	vmov	d0, r6, r7
 800a1f4:	4653      	mov	r3, sl
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	f001 f9de 	bl	800b5b8 <_dtoa_r>
 800a1fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a200:	4605      	mov	r5, r0
 800a202:	d119      	bne.n	800a238 <__cvt+0x94>
 800a204:	f019 0f01 	tst.w	r9, #1
 800a208:	d00e      	beq.n	800a228 <__cvt+0x84>
 800a20a:	eb00 0904 	add.w	r9, r0, r4
 800a20e:	2200      	movs	r2, #0
 800a210:	2300      	movs	r3, #0
 800a212:	4630      	mov	r0, r6
 800a214:	4639      	mov	r1, r7
 800a216:	f7f6 fc7f 	bl	8000b18 <__aeabi_dcmpeq>
 800a21a:	b108      	cbz	r0, 800a220 <__cvt+0x7c>
 800a21c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a220:	2230      	movs	r2, #48	@ 0x30
 800a222:	9b03      	ldr	r3, [sp, #12]
 800a224:	454b      	cmp	r3, r9
 800a226:	d31e      	bcc.n	800a266 <__cvt+0xc2>
 800a228:	9b03      	ldr	r3, [sp, #12]
 800a22a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a22c:	1b5b      	subs	r3, r3, r5
 800a22e:	4628      	mov	r0, r5
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	b004      	add	sp, #16
 800a234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a238:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a23c:	eb00 0904 	add.w	r9, r0, r4
 800a240:	d1e5      	bne.n	800a20e <__cvt+0x6a>
 800a242:	7803      	ldrb	r3, [r0, #0]
 800a244:	2b30      	cmp	r3, #48	@ 0x30
 800a246:	d10a      	bne.n	800a25e <__cvt+0xba>
 800a248:	2200      	movs	r2, #0
 800a24a:	2300      	movs	r3, #0
 800a24c:	4630      	mov	r0, r6
 800a24e:	4639      	mov	r1, r7
 800a250:	f7f6 fc62 	bl	8000b18 <__aeabi_dcmpeq>
 800a254:	b918      	cbnz	r0, 800a25e <__cvt+0xba>
 800a256:	f1c4 0401 	rsb	r4, r4, #1
 800a25a:	f8ca 4000 	str.w	r4, [sl]
 800a25e:	f8da 3000 	ldr.w	r3, [sl]
 800a262:	4499      	add	r9, r3
 800a264:	e7d3      	b.n	800a20e <__cvt+0x6a>
 800a266:	1c59      	adds	r1, r3, #1
 800a268:	9103      	str	r1, [sp, #12]
 800a26a:	701a      	strb	r2, [r3, #0]
 800a26c:	e7d9      	b.n	800a222 <__cvt+0x7e>

0800a26e <__exponent>:
 800a26e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a270:	2900      	cmp	r1, #0
 800a272:	bfba      	itte	lt
 800a274:	4249      	neglt	r1, r1
 800a276:	232d      	movlt	r3, #45	@ 0x2d
 800a278:	232b      	movge	r3, #43	@ 0x2b
 800a27a:	2909      	cmp	r1, #9
 800a27c:	7002      	strb	r2, [r0, #0]
 800a27e:	7043      	strb	r3, [r0, #1]
 800a280:	dd29      	ble.n	800a2d6 <__exponent+0x68>
 800a282:	f10d 0307 	add.w	r3, sp, #7
 800a286:	461d      	mov	r5, r3
 800a288:	270a      	movs	r7, #10
 800a28a:	461a      	mov	r2, r3
 800a28c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a290:	fb07 1416 	mls	r4, r7, r6, r1
 800a294:	3430      	adds	r4, #48	@ 0x30
 800a296:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a29a:	460c      	mov	r4, r1
 800a29c:	2c63      	cmp	r4, #99	@ 0x63
 800a29e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	dcf1      	bgt.n	800a28a <__exponent+0x1c>
 800a2a6:	3130      	adds	r1, #48	@ 0x30
 800a2a8:	1e94      	subs	r4, r2, #2
 800a2aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a2ae:	1c41      	adds	r1, r0, #1
 800a2b0:	4623      	mov	r3, r4
 800a2b2:	42ab      	cmp	r3, r5
 800a2b4:	d30a      	bcc.n	800a2cc <__exponent+0x5e>
 800a2b6:	f10d 0309 	add.w	r3, sp, #9
 800a2ba:	1a9b      	subs	r3, r3, r2
 800a2bc:	42ac      	cmp	r4, r5
 800a2be:	bf88      	it	hi
 800a2c0:	2300      	movhi	r3, #0
 800a2c2:	3302      	adds	r3, #2
 800a2c4:	4403      	add	r3, r0
 800a2c6:	1a18      	subs	r0, r3, r0
 800a2c8:	b003      	add	sp, #12
 800a2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a2d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a2d4:	e7ed      	b.n	800a2b2 <__exponent+0x44>
 800a2d6:	2330      	movs	r3, #48	@ 0x30
 800a2d8:	3130      	adds	r1, #48	@ 0x30
 800a2da:	7083      	strb	r3, [r0, #2]
 800a2dc:	70c1      	strb	r1, [r0, #3]
 800a2de:	1d03      	adds	r3, r0, #4
 800a2e0:	e7f1      	b.n	800a2c6 <__exponent+0x58>
	...

0800a2e4 <_printf_float>:
 800a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	b08d      	sub	sp, #52	@ 0x34
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a2f0:	4616      	mov	r6, r2
 800a2f2:	461f      	mov	r7, r3
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	f000 fff3 	bl	800b2e0 <_localeconv_r>
 800a2fa:	6803      	ldr	r3, [r0, #0]
 800a2fc:	9304      	str	r3, [sp, #16]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7f5 ffde 	bl	80002c0 <strlen>
 800a304:	2300      	movs	r3, #0
 800a306:	930a      	str	r3, [sp, #40]	@ 0x28
 800a308:	f8d8 3000 	ldr.w	r3, [r8]
 800a30c:	9005      	str	r0, [sp, #20]
 800a30e:	3307      	adds	r3, #7
 800a310:	f023 0307 	bic.w	r3, r3, #7
 800a314:	f103 0208 	add.w	r2, r3, #8
 800a318:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a31c:	f8d4 b000 	ldr.w	fp, [r4]
 800a320:	f8c8 2000 	str.w	r2, [r8]
 800a324:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a328:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a32c:	9307      	str	r3, [sp, #28]
 800a32e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a332:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a33a:	4b9c      	ldr	r3, [pc, #624]	@ (800a5ac <_printf_float+0x2c8>)
 800a33c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a340:	f7f6 fc1c 	bl	8000b7c <__aeabi_dcmpun>
 800a344:	bb70      	cbnz	r0, 800a3a4 <_printf_float+0xc0>
 800a346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a34a:	4b98      	ldr	r3, [pc, #608]	@ (800a5ac <_printf_float+0x2c8>)
 800a34c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a350:	f7f6 fbf6 	bl	8000b40 <__aeabi_dcmple>
 800a354:	bb30      	cbnz	r0, 800a3a4 <_printf_float+0xc0>
 800a356:	2200      	movs	r2, #0
 800a358:	2300      	movs	r3, #0
 800a35a:	4640      	mov	r0, r8
 800a35c:	4649      	mov	r1, r9
 800a35e:	f7f6 fbe5 	bl	8000b2c <__aeabi_dcmplt>
 800a362:	b110      	cbz	r0, 800a36a <_printf_float+0x86>
 800a364:	232d      	movs	r3, #45	@ 0x2d
 800a366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a36a:	4a91      	ldr	r2, [pc, #580]	@ (800a5b0 <_printf_float+0x2cc>)
 800a36c:	4b91      	ldr	r3, [pc, #580]	@ (800a5b4 <_printf_float+0x2d0>)
 800a36e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a372:	bf94      	ite	ls
 800a374:	4690      	movls	r8, r2
 800a376:	4698      	movhi	r8, r3
 800a378:	2303      	movs	r3, #3
 800a37a:	6123      	str	r3, [r4, #16]
 800a37c:	f02b 0304 	bic.w	r3, fp, #4
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	f04f 0900 	mov.w	r9, #0
 800a386:	9700      	str	r7, [sp, #0]
 800a388:	4633      	mov	r3, r6
 800a38a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a38c:	4621      	mov	r1, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	f000 f9d2 	bl	800a738 <_printf_common>
 800a394:	3001      	adds	r0, #1
 800a396:	f040 808d 	bne.w	800a4b4 <_printf_float+0x1d0>
 800a39a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a39e:	b00d      	add	sp, #52	@ 0x34
 800a3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a4:	4642      	mov	r2, r8
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	4640      	mov	r0, r8
 800a3aa:	4649      	mov	r1, r9
 800a3ac:	f7f6 fbe6 	bl	8000b7c <__aeabi_dcmpun>
 800a3b0:	b140      	cbz	r0, 800a3c4 <_printf_float+0xe0>
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	bfbc      	itt	lt
 800a3b8:	232d      	movlt	r3, #45	@ 0x2d
 800a3ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a3be:	4a7e      	ldr	r2, [pc, #504]	@ (800a5b8 <_printf_float+0x2d4>)
 800a3c0:	4b7e      	ldr	r3, [pc, #504]	@ (800a5bc <_printf_float+0x2d8>)
 800a3c2:	e7d4      	b.n	800a36e <_printf_float+0x8a>
 800a3c4:	6863      	ldr	r3, [r4, #4]
 800a3c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a3ca:	9206      	str	r2, [sp, #24]
 800a3cc:	1c5a      	adds	r2, r3, #1
 800a3ce:	d13b      	bne.n	800a448 <_printf_float+0x164>
 800a3d0:	2306      	movs	r3, #6
 800a3d2:	6063      	str	r3, [r4, #4]
 800a3d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a3d8:	2300      	movs	r3, #0
 800a3da:	6022      	str	r2, [r4, #0]
 800a3dc:	9303      	str	r3, [sp, #12]
 800a3de:	ab0a      	add	r3, sp, #40	@ 0x28
 800a3e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a3e4:	ab09      	add	r3, sp, #36	@ 0x24
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	6861      	ldr	r1, [r4, #4]
 800a3ea:	ec49 8b10 	vmov	d0, r8, r9
 800a3ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f7ff fed6 	bl	800a1a4 <__cvt>
 800a3f8:	9b06      	ldr	r3, [sp, #24]
 800a3fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3fc:	2b47      	cmp	r3, #71	@ 0x47
 800a3fe:	4680      	mov	r8, r0
 800a400:	d129      	bne.n	800a456 <_printf_float+0x172>
 800a402:	1cc8      	adds	r0, r1, #3
 800a404:	db02      	blt.n	800a40c <_printf_float+0x128>
 800a406:	6863      	ldr	r3, [r4, #4]
 800a408:	4299      	cmp	r1, r3
 800a40a:	dd41      	ble.n	800a490 <_printf_float+0x1ac>
 800a40c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a410:	fa5f fa8a 	uxtb.w	sl, sl
 800a414:	3901      	subs	r1, #1
 800a416:	4652      	mov	r2, sl
 800a418:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a41c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a41e:	f7ff ff26 	bl	800a26e <__exponent>
 800a422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a424:	1813      	adds	r3, r2, r0
 800a426:	2a01      	cmp	r2, #1
 800a428:	4681      	mov	r9, r0
 800a42a:	6123      	str	r3, [r4, #16]
 800a42c:	dc02      	bgt.n	800a434 <_printf_float+0x150>
 800a42e:	6822      	ldr	r2, [r4, #0]
 800a430:	07d2      	lsls	r2, r2, #31
 800a432:	d501      	bpl.n	800a438 <_printf_float+0x154>
 800a434:	3301      	adds	r3, #1
 800a436:	6123      	str	r3, [r4, #16]
 800a438:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d0a2      	beq.n	800a386 <_printf_float+0xa2>
 800a440:	232d      	movs	r3, #45	@ 0x2d
 800a442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a446:	e79e      	b.n	800a386 <_printf_float+0xa2>
 800a448:	9a06      	ldr	r2, [sp, #24]
 800a44a:	2a47      	cmp	r2, #71	@ 0x47
 800a44c:	d1c2      	bne.n	800a3d4 <_printf_float+0xf0>
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1c0      	bne.n	800a3d4 <_printf_float+0xf0>
 800a452:	2301      	movs	r3, #1
 800a454:	e7bd      	b.n	800a3d2 <_printf_float+0xee>
 800a456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a45a:	d9db      	bls.n	800a414 <_printf_float+0x130>
 800a45c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a460:	d118      	bne.n	800a494 <_printf_float+0x1b0>
 800a462:	2900      	cmp	r1, #0
 800a464:	6863      	ldr	r3, [r4, #4]
 800a466:	dd0b      	ble.n	800a480 <_printf_float+0x19c>
 800a468:	6121      	str	r1, [r4, #16]
 800a46a:	b913      	cbnz	r3, 800a472 <_printf_float+0x18e>
 800a46c:	6822      	ldr	r2, [r4, #0]
 800a46e:	07d0      	lsls	r0, r2, #31
 800a470:	d502      	bpl.n	800a478 <_printf_float+0x194>
 800a472:	3301      	adds	r3, #1
 800a474:	440b      	add	r3, r1
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a47a:	f04f 0900 	mov.w	r9, #0
 800a47e:	e7db      	b.n	800a438 <_printf_float+0x154>
 800a480:	b913      	cbnz	r3, 800a488 <_printf_float+0x1a4>
 800a482:	6822      	ldr	r2, [r4, #0]
 800a484:	07d2      	lsls	r2, r2, #31
 800a486:	d501      	bpl.n	800a48c <_printf_float+0x1a8>
 800a488:	3302      	adds	r3, #2
 800a48a:	e7f4      	b.n	800a476 <_printf_float+0x192>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e7f2      	b.n	800a476 <_printf_float+0x192>
 800a490:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a496:	4299      	cmp	r1, r3
 800a498:	db05      	blt.n	800a4a6 <_printf_float+0x1c2>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	6121      	str	r1, [r4, #16]
 800a49e:	07d8      	lsls	r0, r3, #31
 800a4a0:	d5ea      	bpl.n	800a478 <_printf_float+0x194>
 800a4a2:	1c4b      	adds	r3, r1, #1
 800a4a4:	e7e7      	b.n	800a476 <_printf_float+0x192>
 800a4a6:	2900      	cmp	r1, #0
 800a4a8:	bfd4      	ite	le
 800a4aa:	f1c1 0202 	rsble	r2, r1, #2
 800a4ae:	2201      	movgt	r2, #1
 800a4b0:	4413      	add	r3, r2
 800a4b2:	e7e0      	b.n	800a476 <_printf_float+0x192>
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	055a      	lsls	r2, r3, #21
 800a4b8:	d407      	bmi.n	800a4ca <_printf_float+0x1e6>
 800a4ba:	6923      	ldr	r3, [r4, #16]
 800a4bc:	4642      	mov	r2, r8
 800a4be:	4631      	mov	r1, r6
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b8      	blx	r7
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	d12b      	bne.n	800a520 <_printf_float+0x23c>
 800a4c8:	e767      	b.n	800a39a <_printf_float+0xb6>
 800a4ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a4ce:	f240 80dd 	bls.w	800a68c <_printf_float+0x3a8>
 800a4d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f7f6 fb1d 	bl	8000b18 <__aeabi_dcmpeq>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d033      	beq.n	800a54a <_printf_float+0x266>
 800a4e2:	4a37      	ldr	r2, [pc, #220]	@ (800a5c0 <_printf_float+0x2dc>)
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	47b8      	blx	r7
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	f43f af54 	beq.w	800a39a <_printf_float+0xb6>
 800a4f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a4f6:	4543      	cmp	r3, r8
 800a4f8:	db02      	blt.n	800a500 <_printf_float+0x21c>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	07d8      	lsls	r0, r3, #31
 800a4fe:	d50f      	bpl.n	800a520 <_printf_float+0x23c>
 800a500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a504:	4631      	mov	r1, r6
 800a506:	4628      	mov	r0, r5
 800a508:	47b8      	blx	r7
 800a50a:	3001      	adds	r0, #1
 800a50c:	f43f af45 	beq.w	800a39a <_printf_float+0xb6>
 800a510:	f04f 0900 	mov.w	r9, #0
 800a514:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a518:	f104 0a1a 	add.w	sl, r4, #26
 800a51c:	45c8      	cmp	r8, r9
 800a51e:	dc09      	bgt.n	800a534 <_printf_float+0x250>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	079b      	lsls	r3, r3, #30
 800a524:	f100 8103 	bmi.w	800a72e <_printf_float+0x44a>
 800a528:	68e0      	ldr	r0, [r4, #12]
 800a52a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a52c:	4298      	cmp	r0, r3
 800a52e:	bfb8      	it	lt
 800a530:	4618      	movlt	r0, r3
 800a532:	e734      	b.n	800a39e <_printf_float+0xba>
 800a534:	2301      	movs	r3, #1
 800a536:	4652      	mov	r2, sl
 800a538:	4631      	mov	r1, r6
 800a53a:	4628      	mov	r0, r5
 800a53c:	47b8      	blx	r7
 800a53e:	3001      	adds	r0, #1
 800a540:	f43f af2b 	beq.w	800a39a <_printf_float+0xb6>
 800a544:	f109 0901 	add.w	r9, r9, #1
 800a548:	e7e8      	b.n	800a51c <_printf_float+0x238>
 800a54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dc39      	bgt.n	800a5c4 <_printf_float+0x2e0>
 800a550:	4a1b      	ldr	r2, [pc, #108]	@ (800a5c0 <_printf_float+0x2dc>)
 800a552:	2301      	movs	r3, #1
 800a554:	4631      	mov	r1, r6
 800a556:	4628      	mov	r0, r5
 800a558:	47b8      	blx	r7
 800a55a:	3001      	adds	r0, #1
 800a55c:	f43f af1d 	beq.w	800a39a <_printf_float+0xb6>
 800a560:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a564:	ea59 0303 	orrs.w	r3, r9, r3
 800a568:	d102      	bne.n	800a570 <_printf_float+0x28c>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	07d9      	lsls	r1, r3, #31
 800a56e:	d5d7      	bpl.n	800a520 <_printf_float+0x23c>
 800a570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a574:	4631      	mov	r1, r6
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	f43f af0d 	beq.w	800a39a <_printf_float+0xb6>
 800a580:	f04f 0a00 	mov.w	sl, #0
 800a584:	f104 0b1a 	add.w	fp, r4, #26
 800a588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a58a:	425b      	negs	r3, r3
 800a58c:	4553      	cmp	r3, sl
 800a58e:	dc01      	bgt.n	800a594 <_printf_float+0x2b0>
 800a590:	464b      	mov	r3, r9
 800a592:	e793      	b.n	800a4bc <_printf_float+0x1d8>
 800a594:	2301      	movs	r3, #1
 800a596:	465a      	mov	r2, fp
 800a598:	4631      	mov	r1, r6
 800a59a:	4628      	mov	r0, r5
 800a59c:	47b8      	blx	r7
 800a59e:	3001      	adds	r0, #1
 800a5a0:	f43f aefb 	beq.w	800a39a <_printf_float+0xb6>
 800a5a4:	f10a 0a01 	add.w	sl, sl, #1
 800a5a8:	e7ee      	b.n	800a588 <_printf_float+0x2a4>
 800a5aa:	bf00      	nop
 800a5ac:	7fefffff 	.word	0x7fefffff
 800a5b0:	0800ec2c 	.word	0x0800ec2c
 800a5b4:	0800ec30 	.word	0x0800ec30
 800a5b8:	0800ec34 	.word	0x0800ec34
 800a5bc:	0800ec38 	.word	0x0800ec38
 800a5c0:	0800ec3c 	.word	0x0800ec3c
 800a5c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a5ca:	4553      	cmp	r3, sl
 800a5cc:	bfa8      	it	ge
 800a5ce:	4653      	movge	r3, sl
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	4699      	mov	r9, r3
 800a5d4:	dc36      	bgt.n	800a644 <_printf_float+0x360>
 800a5d6:	f04f 0b00 	mov.w	fp, #0
 800a5da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5de:	f104 021a 	add.w	r2, r4, #26
 800a5e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5e4:	9306      	str	r3, [sp, #24]
 800a5e6:	eba3 0309 	sub.w	r3, r3, r9
 800a5ea:	455b      	cmp	r3, fp
 800a5ec:	dc31      	bgt.n	800a652 <_printf_float+0x36e>
 800a5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f0:	459a      	cmp	sl, r3
 800a5f2:	dc3a      	bgt.n	800a66a <_printf_float+0x386>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	07da      	lsls	r2, r3, #31
 800a5f8:	d437      	bmi.n	800a66a <_printf_float+0x386>
 800a5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5fc:	ebaa 0903 	sub.w	r9, sl, r3
 800a600:	9b06      	ldr	r3, [sp, #24]
 800a602:	ebaa 0303 	sub.w	r3, sl, r3
 800a606:	4599      	cmp	r9, r3
 800a608:	bfa8      	it	ge
 800a60a:	4699      	movge	r9, r3
 800a60c:	f1b9 0f00 	cmp.w	r9, #0
 800a610:	dc33      	bgt.n	800a67a <_printf_float+0x396>
 800a612:	f04f 0800 	mov.w	r8, #0
 800a616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a61a:	f104 0b1a 	add.w	fp, r4, #26
 800a61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a620:	ebaa 0303 	sub.w	r3, sl, r3
 800a624:	eba3 0309 	sub.w	r3, r3, r9
 800a628:	4543      	cmp	r3, r8
 800a62a:	f77f af79 	ble.w	800a520 <_printf_float+0x23c>
 800a62e:	2301      	movs	r3, #1
 800a630:	465a      	mov	r2, fp
 800a632:	4631      	mov	r1, r6
 800a634:	4628      	mov	r0, r5
 800a636:	47b8      	blx	r7
 800a638:	3001      	adds	r0, #1
 800a63a:	f43f aeae 	beq.w	800a39a <_printf_float+0xb6>
 800a63e:	f108 0801 	add.w	r8, r8, #1
 800a642:	e7ec      	b.n	800a61e <_printf_float+0x33a>
 800a644:	4642      	mov	r2, r8
 800a646:	4631      	mov	r1, r6
 800a648:	4628      	mov	r0, r5
 800a64a:	47b8      	blx	r7
 800a64c:	3001      	adds	r0, #1
 800a64e:	d1c2      	bne.n	800a5d6 <_printf_float+0x2f2>
 800a650:	e6a3      	b.n	800a39a <_printf_float+0xb6>
 800a652:	2301      	movs	r3, #1
 800a654:	4631      	mov	r1, r6
 800a656:	4628      	mov	r0, r5
 800a658:	9206      	str	r2, [sp, #24]
 800a65a:	47b8      	blx	r7
 800a65c:	3001      	adds	r0, #1
 800a65e:	f43f ae9c 	beq.w	800a39a <_printf_float+0xb6>
 800a662:	9a06      	ldr	r2, [sp, #24]
 800a664:	f10b 0b01 	add.w	fp, fp, #1
 800a668:	e7bb      	b.n	800a5e2 <_printf_float+0x2fe>
 800a66a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a66e:	4631      	mov	r1, r6
 800a670:	4628      	mov	r0, r5
 800a672:	47b8      	blx	r7
 800a674:	3001      	adds	r0, #1
 800a676:	d1c0      	bne.n	800a5fa <_printf_float+0x316>
 800a678:	e68f      	b.n	800a39a <_printf_float+0xb6>
 800a67a:	9a06      	ldr	r2, [sp, #24]
 800a67c:	464b      	mov	r3, r9
 800a67e:	4442      	add	r2, r8
 800a680:	4631      	mov	r1, r6
 800a682:	4628      	mov	r0, r5
 800a684:	47b8      	blx	r7
 800a686:	3001      	adds	r0, #1
 800a688:	d1c3      	bne.n	800a612 <_printf_float+0x32e>
 800a68a:	e686      	b.n	800a39a <_printf_float+0xb6>
 800a68c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a690:	f1ba 0f01 	cmp.w	sl, #1
 800a694:	dc01      	bgt.n	800a69a <_printf_float+0x3b6>
 800a696:	07db      	lsls	r3, r3, #31
 800a698:	d536      	bpl.n	800a708 <_printf_float+0x424>
 800a69a:	2301      	movs	r3, #1
 800a69c:	4642      	mov	r2, r8
 800a69e:	4631      	mov	r1, r6
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	47b8      	blx	r7
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	f43f ae78 	beq.w	800a39a <_printf_float+0xb6>
 800a6aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	f43f ae70 	beq.w	800a39a <_printf_float+0xb6>
 800a6ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a6c6:	f7f6 fa27 	bl	8000b18 <__aeabi_dcmpeq>
 800a6ca:	b9c0      	cbnz	r0, 800a6fe <_printf_float+0x41a>
 800a6cc:	4653      	mov	r3, sl
 800a6ce:	f108 0201 	add.w	r2, r8, #1
 800a6d2:	4631      	mov	r1, r6
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	47b8      	blx	r7
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d10c      	bne.n	800a6f6 <_printf_float+0x412>
 800a6dc:	e65d      	b.n	800a39a <_printf_float+0xb6>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	465a      	mov	r2, fp
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	47b8      	blx	r7
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	f43f ae56 	beq.w	800a39a <_printf_float+0xb6>
 800a6ee:	f108 0801 	add.w	r8, r8, #1
 800a6f2:	45d0      	cmp	r8, sl
 800a6f4:	dbf3      	blt.n	800a6de <_printf_float+0x3fa>
 800a6f6:	464b      	mov	r3, r9
 800a6f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a6fc:	e6df      	b.n	800a4be <_printf_float+0x1da>
 800a6fe:	f04f 0800 	mov.w	r8, #0
 800a702:	f104 0b1a 	add.w	fp, r4, #26
 800a706:	e7f4      	b.n	800a6f2 <_printf_float+0x40e>
 800a708:	2301      	movs	r3, #1
 800a70a:	4642      	mov	r2, r8
 800a70c:	e7e1      	b.n	800a6d2 <_printf_float+0x3ee>
 800a70e:	2301      	movs	r3, #1
 800a710:	464a      	mov	r2, r9
 800a712:	4631      	mov	r1, r6
 800a714:	4628      	mov	r0, r5
 800a716:	47b8      	blx	r7
 800a718:	3001      	adds	r0, #1
 800a71a:	f43f ae3e 	beq.w	800a39a <_printf_float+0xb6>
 800a71e:	f108 0801 	add.w	r8, r8, #1
 800a722:	68e3      	ldr	r3, [r4, #12]
 800a724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a726:	1a5b      	subs	r3, r3, r1
 800a728:	4543      	cmp	r3, r8
 800a72a:	dcf0      	bgt.n	800a70e <_printf_float+0x42a>
 800a72c:	e6fc      	b.n	800a528 <_printf_float+0x244>
 800a72e:	f04f 0800 	mov.w	r8, #0
 800a732:	f104 0919 	add.w	r9, r4, #25
 800a736:	e7f4      	b.n	800a722 <_printf_float+0x43e>

0800a738 <_printf_common>:
 800a738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a73c:	4616      	mov	r6, r2
 800a73e:	4698      	mov	r8, r3
 800a740:	688a      	ldr	r2, [r1, #8]
 800a742:	690b      	ldr	r3, [r1, #16]
 800a744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a748:	4293      	cmp	r3, r2
 800a74a:	bfb8      	it	lt
 800a74c:	4613      	movlt	r3, r2
 800a74e:	6033      	str	r3, [r6, #0]
 800a750:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a754:	4607      	mov	r7, r0
 800a756:	460c      	mov	r4, r1
 800a758:	b10a      	cbz	r2, 800a75e <_printf_common+0x26>
 800a75a:	3301      	adds	r3, #1
 800a75c:	6033      	str	r3, [r6, #0]
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	0699      	lsls	r1, r3, #26
 800a762:	bf42      	ittt	mi
 800a764:	6833      	ldrmi	r3, [r6, #0]
 800a766:	3302      	addmi	r3, #2
 800a768:	6033      	strmi	r3, [r6, #0]
 800a76a:	6825      	ldr	r5, [r4, #0]
 800a76c:	f015 0506 	ands.w	r5, r5, #6
 800a770:	d106      	bne.n	800a780 <_printf_common+0x48>
 800a772:	f104 0a19 	add.w	sl, r4, #25
 800a776:	68e3      	ldr	r3, [r4, #12]
 800a778:	6832      	ldr	r2, [r6, #0]
 800a77a:	1a9b      	subs	r3, r3, r2
 800a77c:	42ab      	cmp	r3, r5
 800a77e:	dc26      	bgt.n	800a7ce <_printf_common+0x96>
 800a780:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a784:	6822      	ldr	r2, [r4, #0]
 800a786:	3b00      	subs	r3, #0
 800a788:	bf18      	it	ne
 800a78a:	2301      	movne	r3, #1
 800a78c:	0692      	lsls	r2, r2, #26
 800a78e:	d42b      	bmi.n	800a7e8 <_printf_common+0xb0>
 800a790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a794:	4641      	mov	r1, r8
 800a796:	4638      	mov	r0, r7
 800a798:	47c8      	blx	r9
 800a79a:	3001      	adds	r0, #1
 800a79c:	d01e      	beq.n	800a7dc <_printf_common+0xa4>
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	6922      	ldr	r2, [r4, #16]
 800a7a2:	f003 0306 	and.w	r3, r3, #6
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	bf02      	ittt	eq
 800a7aa:	68e5      	ldreq	r5, [r4, #12]
 800a7ac:	6833      	ldreq	r3, [r6, #0]
 800a7ae:	1aed      	subeq	r5, r5, r3
 800a7b0:	68a3      	ldr	r3, [r4, #8]
 800a7b2:	bf0c      	ite	eq
 800a7b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7b8:	2500      	movne	r5, #0
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	bfc4      	itt	gt
 800a7be:	1a9b      	subgt	r3, r3, r2
 800a7c0:	18ed      	addgt	r5, r5, r3
 800a7c2:	2600      	movs	r6, #0
 800a7c4:	341a      	adds	r4, #26
 800a7c6:	42b5      	cmp	r5, r6
 800a7c8:	d11a      	bne.n	800a800 <_printf_common+0xc8>
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	e008      	b.n	800a7e0 <_printf_common+0xa8>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	4652      	mov	r2, sl
 800a7d2:	4641      	mov	r1, r8
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	47c8      	blx	r9
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d103      	bne.n	800a7e4 <_printf_common+0xac>
 800a7dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e4:	3501      	adds	r5, #1
 800a7e6:	e7c6      	b.n	800a776 <_printf_common+0x3e>
 800a7e8:	18e1      	adds	r1, r4, r3
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	2030      	movs	r0, #48	@ 0x30
 800a7ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7f2:	4422      	add	r2, r4
 800a7f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7fc:	3302      	adds	r3, #2
 800a7fe:	e7c7      	b.n	800a790 <_printf_common+0x58>
 800a800:	2301      	movs	r3, #1
 800a802:	4622      	mov	r2, r4
 800a804:	4641      	mov	r1, r8
 800a806:	4638      	mov	r0, r7
 800a808:	47c8      	blx	r9
 800a80a:	3001      	adds	r0, #1
 800a80c:	d0e6      	beq.n	800a7dc <_printf_common+0xa4>
 800a80e:	3601      	adds	r6, #1
 800a810:	e7d9      	b.n	800a7c6 <_printf_common+0x8e>
	...

0800a814 <_printf_i>:
 800a814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a818:	7e0f      	ldrb	r7, [r1, #24]
 800a81a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a81c:	2f78      	cmp	r7, #120	@ 0x78
 800a81e:	4691      	mov	r9, r2
 800a820:	4680      	mov	r8, r0
 800a822:	460c      	mov	r4, r1
 800a824:	469a      	mov	sl, r3
 800a826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a82a:	d807      	bhi.n	800a83c <_printf_i+0x28>
 800a82c:	2f62      	cmp	r7, #98	@ 0x62
 800a82e:	d80a      	bhi.n	800a846 <_printf_i+0x32>
 800a830:	2f00      	cmp	r7, #0
 800a832:	f000 80d2 	beq.w	800a9da <_printf_i+0x1c6>
 800a836:	2f58      	cmp	r7, #88	@ 0x58
 800a838:	f000 80b9 	beq.w	800a9ae <_printf_i+0x19a>
 800a83c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a844:	e03a      	b.n	800a8bc <_printf_i+0xa8>
 800a846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a84a:	2b15      	cmp	r3, #21
 800a84c:	d8f6      	bhi.n	800a83c <_printf_i+0x28>
 800a84e:	a101      	add	r1, pc, #4	@ (adr r1, 800a854 <_printf_i+0x40>)
 800a850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a854:	0800a8ad 	.word	0x0800a8ad
 800a858:	0800a8c1 	.word	0x0800a8c1
 800a85c:	0800a83d 	.word	0x0800a83d
 800a860:	0800a83d 	.word	0x0800a83d
 800a864:	0800a83d 	.word	0x0800a83d
 800a868:	0800a83d 	.word	0x0800a83d
 800a86c:	0800a8c1 	.word	0x0800a8c1
 800a870:	0800a83d 	.word	0x0800a83d
 800a874:	0800a83d 	.word	0x0800a83d
 800a878:	0800a83d 	.word	0x0800a83d
 800a87c:	0800a83d 	.word	0x0800a83d
 800a880:	0800a9c1 	.word	0x0800a9c1
 800a884:	0800a8eb 	.word	0x0800a8eb
 800a888:	0800a97b 	.word	0x0800a97b
 800a88c:	0800a83d 	.word	0x0800a83d
 800a890:	0800a83d 	.word	0x0800a83d
 800a894:	0800a9e3 	.word	0x0800a9e3
 800a898:	0800a83d 	.word	0x0800a83d
 800a89c:	0800a8eb 	.word	0x0800a8eb
 800a8a0:	0800a83d 	.word	0x0800a83d
 800a8a4:	0800a83d 	.word	0x0800a83d
 800a8a8:	0800a983 	.word	0x0800a983
 800a8ac:	6833      	ldr	r3, [r6, #0]
 800a8ae:	1d1a      	adds	r2, r3, #4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6032      	str	r2, [r6, #0]
 800a8b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e09d      	b.n	800a9fc <_printf_i+0x1e8>
 800a8c0:	6833      	ldr	r3, [r6, #0]
 800a8c2:	6820      	ldr	r0, [r4, #0]
 800a8c4:	1d19      	adds	r1, r3, #4
 800a8c6:	6031      	str	r1, [r6, #0]
 800a8c8:	0606      	lsls	r6, r0, #24
 800a8ca:	d501      	bpl.n	800a8d0 <_printf_i+0xbc>
 800a8cc:	681d      	ldr	r5, [r3, #0]
 800a8ce:	e003      	b.n	800a8d8 <_printf_i+0xc4>
 800a8d0:	0645      	lsls	r5, r0, #25
 800a8d2:	d5fb      	bpl.n	800a8cc <_printf_i+0xb8>
 800a8d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8d8:	2d00      	cmp	r5, #0
 800a8da:	da03      	bge.n	800a8e4 <_printf_i+0xd0>
 800a8dc:	232d      	movs	r3, #45	@ 0x2d
 800a8de:	426d      	negs	r5, r5
 800a8e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8e4:	4859      	ldr	r0, [pc, #356]	@ (800aa4c <_printf_i+0x238>)
 800a8e6:	230a      	movs	r3, #10
 800a8e8:	e011      	b.n	800a90e <_printf_i+0xfa>
 800a8ea:	6821      	ldr	r1, [r4, #0]
 800a8ec:	6833      	ldr	r3, [r6, #0]
 800a8ee:	0608      	lsls	r0, r1, #24
 800a8f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8f4:	d402      	bmi.n	800a8fc <_printf_i+0xe8>
 800a8f6:	0649      	lsls	r1, r1, #25
 800a8f8:	bf48      	it	mi
 800a8fa:	b2ad      	uxthmi	r5, r5
 800a8fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8fe:	4853      	ldr	r0, [pc, #332]	@ (800aa4c <_printf_i+0x238>)
 800a900:	6033      	str	r3, [r6, #0]
 800a902:	bf14      	ite	ne
 800a904:	230a      	movne	r3, #10
 800a906:	2308      	moveq	r3, #8
 800a908:	2100      	movs	r1, #0
 800a90a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a90e:	6866      	ldr	r6, [r4, #4]
 800a910:	60a6      	str	r6, [r4, #8]
 800a912:	2e00      	cmp	r6, #0
 800a914:	bfa2      	ittt	ge
 800a916:	6821      	ldrge	r1, [r4, #0]
 800a918:	f021 0104 	bicge.w	r1, r1, #4
 800a91c:	6021      	strge	r1, [r4, #0]
 800a91e:	b90d      	cbnz	r5, 800a924 <_printf_i+0x110>
 800a920:	2e00      	cmp	r6, #0
 800a922:	d04b      	beq.n	800a9bc <_printf_i+0x1a8>
 800a924:	4616      	mov	r6, r2
 800a926:	fbb5 f1f3 	udiv	r1, r5, r3
 800a92a:	fb03 5711 	mls	r7, r3, r1, r5
 800a92e:	5dc7      	ldrb	r7, [r0, r7]
 800a930:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a934:	462f      	mov	r7, r5
 800a936:	42bb      	cmp	r3, r7
 800a938:	460d      	mov	r5, r1
 800a93a:	d9f4      	bls.n	800a926 <_printf_i+0x112>
 800a93c:	2b08      	cmp	r3, #8
 800a93e:	d10b      	bne.n	800a958 <_printf_i+0x144>
 800a940:	6823      	ldr	r3, [r4, #0]
 800a942:	07df      	lsls	r7, r3, #31
 800a944:	d508      	bpl.n	800a958 <_printf_i+0x144>
 800a946:	6923      	ldr	r3, [r4, #16]
 800a948:	6861      	ldr	r1, [r4, #4]
 800a94a:	4299      	cmp	r1, r3
 800a94c:	bfde      	ittt	le
 800a94e:	2330      	movle	r3, #48	@ 0x30
 800a950:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a954:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a958:	1b92      	subs	r2, r2, r6
 800a95a:	6122      	str	r2, [r4, #16]
 800a95c:	f8cd a000 	str.w	sl, [sp]
 800a960:	464b      	mov	r3, r9
 800a962:	aa03      	add	r2, sp, #12
 800a964:	4621      	mov	r1, r4
 800a966:	4640      	mov	r0, r8
 800a968:	f7ff fee6 	bl	800a738 <_printf_common>
 800a96c:	3001      	adds	r0, #1
 800a96e:	d14a      	bne.n	800aa06 <_printf_i+0x1f2>
 800a970:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a974:	b004      	add	sp, #16
 800a976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	f043 0320 	orr.w	r3, r3, #32
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	4833      	ldr	r0, [pc, #204]	@ (800aa50 <_printf_i+0x23c>)
 800a984:	2778      	movs	r7, #120	@ 0x78
 800a986:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	6831      	ldr	r1, [r6, #0]
 800a98e:	061f      	lsls	r7, r3, #24
 800a990:	f851 5b04 	ldr.w	r5, [r1], #4
 800a994:	d402      	bmi.n	800a99c <_printf_i+0x188>
 800a996:	065f      	lsls	r7, r3, #25
 800a998:	bf48      	it	mi
 800a99a:	b2ad      	uxthmi	r5, r5
 800a99c:	6031      	str	r1, [r6, #0]
 800a99e:	07d9      	lsls	r1, r3, #31
 800a9a0:	bf44      	itt	mi
 800a9a2:	f043 0320 	orrmi.w	r3, r3, #32
 800a9a6:	6023      	strmi	r3, [r4, #0]
 800a9a8:	b11d      	cbz	r5, 800a9b2 <_printf_i+0x19e>
 800a9aa:	2310      	movs	r3, #16
 800a9ac:	e7ac      	b.n	800a908 <_printf_i+0xf4>
 800a9ae:	4827      	ldr	r0, [pc, #156]	@ (800aa4c <_printf_i+0x238>)
 800a9b0:	e7e9      	b.n	800a986 <_printf_i+0x172>
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	f023 0320 	bic.w	r3, r3, #32
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	e7f6      	b.n	800a9aa <_printf_i+0x196>
 800a9bc:	4616      	mov	r6, r2
 800a9be:	e7bd      	b.n	800a93c <_printf_i+0x128>
 800a9c0:	6833      	ldr	r3, [r6, #0]
 800a9c2:	6825      	ldr	r5, [r4, #0]
 800a9c4:	6961      	ldr	r1, [r4, #20]
 800a9c6:	1d18      	adds	r0, r3, #4
 800a9c8:	6030      	str	r0, [r6, #0]
 800a9ca:	062e      	lsls	r6, r5, #24
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	d501      	bpl.n	800a9d4 <_printf_i+0x1c0>
 800a9d0:	6019      	str	r1, [r3, #0]
 800a9d2:	e002      	b.n	800a9da <_printf_i+0x1c6>
 800a9d4:	0668      	lsls	r0, r5, #25
 800a9d6:	d5fb      	bpl.n	800a9d0 <_printf_i+0x1bc>
 800a9d8:	8019      	strh	r1, [r3, #0]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	6123      	str	r3, [r4, #16]
 800a9de:	4616      	mov	r6, r2
 800a9e0:	e7bc      	b.n	800a95c <_printf_i+0x148>
 800a9e2:	6833      	ldr	r3, [r6, #0]
 800a9e4:	1d1a      	adds	r2, r3, #4
 800a9e6:	6032      	str	r2, [r6, #0]
 800a9e8:	681e      	ldr	r6, [r3, #0]
 800a9ea:	6862      	ldr	r2, [r4, #4]
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7f5 fc16 	bl	8000220 <memchr>
 800a9f4:	b108      	cbz	r0, 800a9fa <_printf_i+0x1e6>
 800a9f6:	1b80      	subs	r0, r0, r6
 800a9f8:	6060      	str	r0, [r4, #4]
 800a9fa:	6863      	ldr	r3, [r4, #4]
 800a9fc:	6123      	str	r3, [r4, #16]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa04:	e7aa      	b.n	800a95c <_printf_i+0x148>
 800aa06:	6923      	ldr	r3, [r4, #16]
 800aa08:	4632      	mov	r2, r6
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	47d0      	blx	sl
 800aa10:	3001      	adds	r0, #1
 800aa12:	d0ad      	beq.n	800a970 <_printf_i+0x15c>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	079b      	lsls	r3, r3, #30
 800aa18:	d413      	bmi.n	800aa42 <_printf_i+0x22e>
 800aa1a:	68e0      	ldr	r0, [r4, #12]
 800aa1c:	9b03      	ldr	r3, [sp, #12]
 800aa1e:	4298      	cmp	r0, r3
 800aa20:	bfb8      	it	lt
 800aa22:	4618      	movlt	r0, r3
 800aa24:	e7a6      	b.n	800a974 <_printf_i+0x160>
 800aa26:	2301      	movs	r3, #1
 800aa28:	4632      	mov	r2, r6
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	47d0      	blx	sl
 800aa30:	3001      	adds	r0, #1
 800aa32:	d09d      	beq.n	800a970 <_printf_i+0x15c>
 800aa34:	3501      	adds	r5, #1
 800aa36:	68e3      	ldr	r3, [r4, #12]
 800aa38:	9903      	ldr	r1, [sp, #12]
 800aa3a:	1a5b      	subs	r3, r3, r1
 800aa3c:	42ab      	cmp	r3, r5
 800aa3e:	dcf2      	bgt.n	800aa26 <_printf_i+0x212>
 800aa40:	e7eb      	b.n	800aa1a <_printf_i+0x206>
 800aa42:	2500      	movs	r5, #0
 800aa44:	f104 0619 	add.w	r6, r4, #25
 800aa48:	e7f5      	b.n	800aa36 <_printf_i+0x222>
 800aa4a:	bf00      	nop
 800aa4c:	0800ec3e 	.word	0x0800ec3e
 800aa50:	0800ec4f 	.word	0x0800ec4f

0800aa54 <_scanf_float>:
 800aa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa58:	b087      	sub	sp, #28
 800aa5a:	4617      	mov	r7, r2
 800aa5c:	9303      	str	r3, [sp, #12]
 800aa5e:	688b      	ldr	r3, [r1, #8]
 800aa60:	1e5a      	subs	r2, r3, #1
 800aa62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aa66:	bf81      	itttt	hi
 800aa68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aa6c:	eb03 0b05 	addhi.w	fp, r3, r5
 800aa70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aa74:	608b      	strhi	r3, [r1, #8]
 800aa76:	680b      	ldr	r3, [r1, #0]
 800aa78:	460a      	mov	r2, r1
 800aa7a:	f04f 0500 	mov.w	r5, #0
 800aa7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aa82:	f842 3b1c 	str.w	r3, [r2], #28
 800aa86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	bf98      	it	ls
 800aa90:	f04f 0b00 	movls.w	fp, #0
 800aa94:	9201      	str	r2, [sp, #4]
 800aa96:	4616      	mov	r6, r2
 800aa98:	46aa      	mov	sl, r5
 800aa9a:	46a9      	mov	r9, r5
 800aa9c:	9502      	str	r5, [sp, #8]
 800aa9e:	68a2      	ldr	r2, [r4, #8]
 800aaa0:	b152      	cbz	r2, 800aab8 <_scanf_float+0x64>
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b4e      	cmp	r3, #78	@ 0x4e
 800aaa8:	d864      	bhi.n	800ab74 <_scanf_float+0x120>
 800aaaa:	2b40      	cmp	r3, #64	@ 0x40
 800aaac:	d83c      	bhi.n	800ab28 <_scanf_float+0xd4>
 800aaae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aab2:	b2c8      	uxtb	r0, r1
 800aab4:	280e      	cmp	r0, #14
 800aab6:	d93a      	bls.n	800ab2e <_scanf_float+0xda>
 800aab8:	f1b9 0f00 	cmp.w	r9, #0
 800aabc:	d003      	beq.n	800aac6 <_scanf_float+0x72>
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aaca:	f1ba 0f01 	cmp.w	sl, #1
 800aace:	f200 8117 	bhi.w	800ad00 <_scanf_float+0x2ac>
 800aad2:	9b01      	ldr	r3, [sp, #4]
 800aad4:	429e      	cmp	r6, r3
 800aad6:	f200 8108 	bhi.w	800acea <_scanf_float+0x296>
 800aada:	2001      	movs	r0, #1
 800aadc:	b007      	add	sp, #28
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aae6:	2a0d      	cmp	r2, #13
 800aae8:	d8e6      	bhi.n	800aab8 <_scanf_float+0x64>
 800aaea:	a101      	add	r1, pc, #4	@ (adr r1, 800aaf0 <_scanf_float+0x9c>)
 800aaec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aaf0:	0800ac37 	.word	0x0800ac37
 800aaf4:	0800aab9 	.word	0x0800aab9
 800aaf8:	0800aab9 	.word	0x0800aab9
 800aafc:	0800aab9 	.word	0x0800aab9
 800ab00:	0800ac97 	.word	0x0800ac97
 800ab04:	0800ac6f 	.word	0x0800ac6f
 800ab08:	0800aab9 	.word	0x0800aab9
 800ab0c:	0800aab9 	.word	0x0800aab9
 800ab10:	0800ac45 	.word	0x0800ac45
 800ab14:	0800aab9 	.word	0x0800aab9
 800ab18:	0800aab9 	.word	0x0800aab9
 800ab1c:	0800aab9 	.word	0x0800aab9
 800ab20:	0800aab9 	.word	0x0800aab9
 800ab24:	0800abfd 	.word	0x0800abfd
 800ab28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ab2c:	e7db      	b.n	800aae6 <_scanf_float+0x92>
 800ab2e:	290e      	cmp	r1, #14
 800ab30:	d8c2      	bhi.n	800aab8 <_scanf_float+0x64>
 800ab32:	a001      	add	r0, pc, #4	@ (adr r0, 800ab38 <_scanf_float+0xe4>)
 800ab34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab38:	0800abed 	.word	0x0800abed
 800ab3c:	0800aab9 	.word	0x0800aab9
 800ab40:	0800abed 	.word	0x0800abed
 800ab44:	0800ac83 	.word	0x0800ac83
 800ab48:	0800aab9 	.word	0x0800aab9
 800ab4c:	0800ab95 	.word	0x0800ab95
 800ab50:	0800abd3 	.word	0x0800abd3
 800ab54:	0800abd3 	.word	0x0800abd3
 800ab58:	0800abd3 	.word	0x0800abd3
 800ab5c:	0800abd3 	.word	0x0800abd3
 800ab60:	0800abd3 	.word	0x0800abd3
 800ab64:	0800abd3 	.word	0x0800abd3
 800ab68:	0800abd3 	.word	0x0800abd3
 800ab6c:	0800abd3 	.word	0x0800abd3
 800ab70:	0800abd3 	.word	0x0800abd3
 800ab74:	2b6e      	cmp	r3, #110	@ 0x6e
 800ab76:	d809      	bhi.n	800ab8c <_scanf_float+0x138>
 800ab78:	2b60      	cmp	r3, #96	@ 0x60
 800ab7a:	d8b2      	bhi.n	800aae2 <_scanf_float+0x8e>
 800ab7c:	2b54      	cmp	r3, #84	@ 0x54
 800ab7e:	d07b      	beq.n	800ac78 <_scanf_float+0x224>
 800ab80:	2b59      	cmp	r3, #89	@ 0x59
 800ab82:	d199      	bne.n	800aab8 <_scanf_float+0x64>
 800ab84:	2d07      	cmp	r5, #7
 800ab86:	d197      	bne.n	800aab8 <_scanf_float+0x64>
 800ab88:	2508      	movs	r5, #8
 800ab8a:	e02c      	b.n	800abe6 <_scanf_float+0x192>
 800ab8c:	2b74      	cmp	r3, #116	@ 0x74
 800ab8e:	d073      	beq.n	800ac78 <_scanf_float+0x224>
 800ab90:	2b79      	cmp	r3, #121	@ 0x79
 800ab92:	e7f6      	b.n	800ab82 <_scanf_float+0x12e>
 800ab94:	6821      	ldr	r1, [r4, #0]
 800ab96:	05c8      	lsls	r0, r1, #23
 800ab98:	d51b      	bpl.n	800abd2 <_scanf_float+0x17e>
 800ab9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ab9e:	6021      	str	r1, [r4, #0]
 800aba0:	f109 0901 	add.w	r9, r9, #1
 800aba4:	f1bb 0f00 	cmp.w	fp, #0
 800aba8:	d003      	beq.n	800abb2 <_scanf_float+0x15e>
 800abaa:	3201      	adds	r2, #1
 800abac:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800abb0:	60a2      	str	r2, [r4, #8]
 800abb2:	68a3      	ldr	r3, [r4, #8]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	60a3      	str	r3, [r4, #8]
 800abb8:	6923      	ldr	r3, [r4, #16]
 800abba:	3301      	adds	r3, #1
 800abbc:	6123      	str	r3, [r4, #16]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	3b01      	subs	r3, #1
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	607b      	str	r3, [r7, #4]
 800abc6:	f340 8087 	ble.w	800acd8 <_scanf_float+0x284>
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	3301      	adds	r3, #1
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	e765      	b.n	800aa9e <_scanf_float+0x4a>
 800abd2:	eb1a 0105 	adds.w	r1, sl, r5
 800abd6:	f47f af6f 	bne.w	800aab8 <_scanf_float+0x64>
 800abda:	6822      	ldr	r2, [r4, #0]
 800abdc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800abe0:	6022      	str	r2, [r4, #0]
 800abe2:	460d      	mov	r5, r1
 800abe4:	468a      	mov	sl, r1
 800abe6:	f806 3b01 	strb.w	r3, [r6], #1
 800abea:	e7e2      	b.n	800abb2 <_scanf_float+0x15e>
 800abec:	6822      	ldr	r2, [r4, #0]
 800abee:	0610      	lsls	r0, r2, #24
 800abf0:	f57f af62 	bpl.w	800aab8 <_scanf_float+0x64>
 800abf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800abf8:	6022      	str	r2, [r4, #0]
 800abfa:	e7f4      	b.n	800abe6 <_scanf_float+0x192>
 800abfc:	f1ba 0f00 	cmp.w	sl, #0
 800ac00:	d10e      	bne.n	800ac20 <_scanf_float+0x1cc>
 800ac02:	f1b9 0f00 	cmp.w	r9, #0
 800ac06:	d10e      	bne.n	800ac26 <_scanf_float+0x1d2>
 800ac08:	6822      	ldr	r2, [r4, #0]
 800ac0a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac0e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac12:	d108      	bne.n	800ac26 <_scanf_float+0x1d2>
 800ac14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac18:	6022      	str	r2, [r4, #0]
 800ac1a:	f04f 0a01 	mov.w	sl, #1
 800ac1e:	e7e2      	b.n	800abe6 <_scanf_float+0x192>
 800ac20:	f1ba 0f02 	cmp.w	sl, #2
 800ac24:	d055      	beq.n	800acd2 <_scanf_float+0x27e>
 800ac26:	2d01      	cmp	r5, #1
 800ac28:	d002      	beq.n	800ac30 <_scanf_float+0x1dc>
 800ac2a:	2d04      	cmp	r5, #4
 800ac2c:	f47f af44 	bne.w	800aab8 <_scanf_float+0x64>
 800ac30:	3501      	adds	r5, #1
 800ac32:	b2ed      	uxtb	r5, r5
 800ac34:	e7d7      	b.n	800abe6 <_scanf_float+0x192>
 800ac36:	f1ba 0f01 	cmp.w	sl, #1
 800ac3a:	f47f af3d 	bne.w	800aab8 <_scanf_float+0x64>
 800ac3e:	f04f 0a02 	mov.w	sl, #2
 800ac42:	e7d0      	b.n	800abe6 <_scanf_float+0x192>
 800ac44:	b97d      	cbnz	r5, 800ac66 <_scanf_float+0x212>
 800ac46:	f1b9 0f00 	cmp.w	r9, #0
 800ac4a:	f47f af38 	bne.w	800aabe <_scanf_float+0x6a>
 800ac4e:	6822      	ldr	r2, [r4, #0]
 800ac50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac58:	f040 8108 	bne.w	800ae6c <_scanf_float+0x418>
 800ac5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac60:	6022      	str	r2, [r4, #0]
 800ac62:	2501      	movs	r5, #1
 800ac64:	e7bf      	b.n	800abe6 <_scanf_float+0x192>
 800ac66:	2d03      	cmp	r5, #3
 800ac68:	d0e2      	beq.n	800ac30 <_scanf_float+0x1dc>
 800ac6a:	2d05      	cmp	r5, #5
 800ac6c:	e7de      	b.n	800ac2c <_scanf_float+0x1d8>
 800ac6e:	2d02      	cmp	r5, #2
 800ac70:	f47f af22 	bne.w	800aab8 <_scanf_float+0x64>
 800ac74:	2503      	movs	r5, #3
 800ac76:	e7b6      	b.n	800abe6 <_scanf_float+0x192>
 800ac78:	2d06      	cmp	r5, #6
 800ac7a:	f47f af1d 	bne.w	800aab8 <_scanf_float+0x64>
 800ac7e:	2507      	movs	r5, #7
 800ac80:	e7b1      	b.n	800abe6 <_scanf_float+0x192>
 800ac82:	6822      	ldr	r2, [r4, #0]
 800ac84:	0591      	lsls	r1, r2, #22
 800ac86:	f57f af17 	bpl.w	800aab8 <_scanf_float+0x64>
 800ac8a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ac8e:	6022      	str	r2, [r4, #0]
 800ac90:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac94:	e7a7      	b.n	800abe6 <_scanf_float+0x192>
 800ac96:	6822      	ldr	r2, [r4, #0]
 800ac98:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ac9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aca0:	d006      	beq.n	800acb0 <_scanf_float+0x25c>
 800aca2:	0550      	lsls	r0, r2, #21
 800aca4:	f57f af08 	bpl.w	800aab8 <_scanf_float+0x64>
 800aca8:	f1b9 0f00 	cmp.w	r9, #0
 800acac:	f000 80de 	beq.w	800ae6c <_scanf_float+0x418>
 800acb0:	0591      	lsls	r1, r2, #22
 800acb2:	bf58      	it	pl
 800acb4:	9902      	ldrpl	r1, [sp, #8]
 800acb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800acba:	bf58      	it	pl
 800acbc:	eba9 0101 	subpl.w	r1, r9, r1
 800acc0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800acc4:	bf58      	it	pl
 800acc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800acca:	6022      	str	r2, [r4, #0]
 800accc:	f04f 0900 	mov.w	r9, #0
 800acd0:	e789      	b.n	800abe6 <_scanf_float+0x192>
 800acd2:	f04f 0a03 	mov.w	sl, #3
 800acd6:	e786      	b.n	800abe6 <_scanf_float+0x192>
 800acd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800acdc:	4639      	mov	r1, r7
 800acde:	4640      	mov	r0, r8
 800ace0:	4798      	blx	r3
 800ace2:	2800      	cmp	r0, #0
 800ace4:	f43f aedb 	beq.w	800aa9e <_scanf_float+0x4a>
 800ace8:	e6e6      	b.n	800aab8 <_scanf_float+0x64>
 800acea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acf2:	463a      	mov	r2, r7
 800acf4:	4640      	mov	r0, r8
 800acf6:	4798      	blx	r3
 800acf8:	6923      	ldr	r3, [r4, #16]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	e6e8      	b.n	800aad2 <_scanf_float+0x7e>
 800ad00:	1e6b      	subs	r3, r5, #1
 800ad02:	2b06      	cmp	r3, #6
 800ad04:	d824      	bhi.n	800ad50 <_scanf_float+0x2fc>
 800ad06:	2d02      	cmp	r5, #2
 800ad08:	d836      	bhi.n	800ad78 <_scanf_float+0x324>
 800ad0a:	9b01      	ldr	r3, [sp, #4]
 800ad0c:	429e      	cmp	r6, r3
 800ad0e:	f67f aee4 	bls.w	800aada <_scanf_float+0x86>
 800ad12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad1a:	463a      	mov	r2, r7
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4798      	blx	r3
 800ad20:	6923      	ldr	r3, [r4, #16]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	6123      	str	r3, [r4, #16]
 800ad26:	e7f0      	b.n	800ad0a <_scanf_float+0x2b6>
 800ad28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad2c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ad30:	463a      	mov	r2, r7
 800ad32:	4640      	mov	r0, r8
 800ad34:	4798      	blx	r3
 800ad36:	6923      	ldr	r3, [r4, #16]
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	6123      	str	r3, [r4, #16]
 800ad3c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ad40:	fa5f fa8a 	uxtb.w	sl, sl
 800ad44:	f1ba 0f02 	cmp.w	sl, #2
 800ad48:	d1ee      	bne.n	800ad28 <_scanf_float+0x2d4>
 800ad4a:	3d03      	subs	r5, #3
 800ad4c:	b2ed      	uxtb	r5, r5
 800ad4e:	1b76      	subs	r6, r6, r5
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	05da      	lsls	r2, r3, #23
 800ad54:	d530      	bpl.n	800adb8 <_scanf_float+0x364>
 800ad56:	055b      	lsls	r3, r3, #21
 800ad58:	d511      	bpl.n	800ad7e <_scanf_float+0x32a>
 800ad5a:	9b01      	ldr	r3, [sp, #4]
 800ad5c:	429e      	cmp	r6, r3
 800ad5e:	f67f aebc 	bls.w	800aada <_scanf_float+0x86>
 800ad62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad6a:	463a      	mov	r2, r7
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	4798      	blx	r3
 800ad70:	6923      	ldr	r3, [r4, #16]
 800ad72:	3b01      	subs	r3, #1
 800ad74:	6123      	str	r3, [r4, #16]
 800ad76:	e7f0      	b.n	800ad5a <_scanf_float+0x306>
 800ad78:	46aa      	mov	sl, r5
 800ad7a:	46b3      	mov	fp, r6
 800ad7c:	e7de      	b.n	800ad3c <_scanf_float+0x2e8>
 800ad7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad82:	6923      	ldr	r3, [r4, #16]
 800ad84:	2965      	cmp	r1, #101	@ 0x65
 800ad86:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ad8a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ad8e:	6123      	str	r3, [r4, #16]
 800ad90:	d00c      	beq.n	800adac <_scanf_float+0x358>
 800ad92:	2945      	cmp	r1, #69	@ 0x45
 800ad94:	d00a      	beq.n	800adac <_scanf_float+0x358>
 800ad96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad9a:	463a      	mov	r2, r7
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	4798      	blx	r3
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ada6:	3b01      	subs	r3, #1
 800ada8:	1eb5      	subs	r5, r6, #2
 800adaa:	6123      	str	r3, [r4, #16]
 800adac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800adb0:	463a      	mov	r2, r7
 800adb2:	4640      	mov	r0, r8
 800adb4:	4798      	blx	r3
 800adb6:	462e      	mov	r6, r5
 800adb8:	6822      	ldr	r2, [r4, #0]
 800adba:	f012 0210 	ands.w	r2, r2, #16
 800adbe:	d001      	beq.n	800adc4 <_scanf_float+0x370>
 800adc0:	2000      	movs	r0, #0
 800adc2:	e68b      	b.n	800aadc <_scanf_float+0x88>
 800adc4:	7032      	strb	r2, [r6, #0]
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800adcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800add0:	d11c      	bne.n	800ae0c <_scanf_float+0x3b8>
 800add2:	9b02      	ldr	r3, [sp, #8]
 800add4:	454b      	cmp	r3, r9
 800add6:	eba3 0209 	sub.w	r2, r3, r9
 800adda:	d123      	bne.n	800ae24 <_scanf_float+0x3d0>
 800addc:	9901      	ldr	r1, [sp, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	4640      	mov	r0, r8
 800ade2:	f002 fd61 	bl	800d8a8 <_strtod_r>
 800ade6:	9b03      	ldr	r3, [sp, #12]
 800ade8:	6821      	ldr	r1, [r4, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f011 0f02 	tst.w	r1, #2
 800adf0:	ec57 6b10 	vmov	r6, r7, d0
 800adf4:	f103 0204 	add.w	r2, r3, #4
 800adf8:	d01f      	beq.n	800ae3a <_scanf_float+0x3e6>
 800adfa:	9903      	ldr	r1, [sp, #12]
 800adfc:	600a      	str	r2, [r1, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	e9c3 6700 	strd	r6, r7, [r3]
 800ae04:	68e3      	ldr	r3, [r4, #12]
 800ae06:	3301      	adds	r3, #1
 800ae08:	60e3      	str	r3, [r4, #12]
 800ae0a:	e7d9      	b.n	800adc0 <_scanf_float+0x36c>
 800ae0c:	9b04      	ldr	r3, [sp, #16]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d0e4      	beq.n	800addc <_scanf_float+0x388>
 800ae12:	9905      	ldr	r1, [sp, #20]
 800ae14:	230a      	movs	r3, #10
 800ae16:	3101      	adds	r1, #1
 800ae18:	4640      	mov	r0, r8
 800ae1a:	f002 fdc5 	bl	800d9a8 <_strtol_r>
 800ae1e:	9b04      	ldr	r3, [sp, #16]
 800ae20:	9e05      	ldr	r6, [sp, #20]
 800ae22:	1ac2      	subs	r2, r0, r3
 800ae24:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ae28:	429e      	cmp	r6, r3
 800ae2a:	bf28      	it	cs
 800ae2c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ae30:	4910      	ldr	r1, [pc, #64]	@ (800ae74 <_scanf_float+0x420>)
 800ae32:	4630      	mov	r0, r6
 800ae34:	f000 f954 	bl	800b0e0 <siprintf>
 800ae38:	e7d0      	b.n	800addc <_scanf_float+0x388>
 800ae3a:	f011 0f04 	tst.w	r1, #4
 800ae3e:	9903      	ldr	r1, [sp, #12]
 800ae40:	600a      	str	r2, [r1, #0]
 800ae42:	d1dc      	bne.n	800adfe <_scanf_float+0x3aa>
 800ae44:	681d      	ldr	r5, [r3, #0]
 800ae46:	4632      	mov	r2, r6
 800ae48:	463b      	mov	r3, r7
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	4639      	mov	r1, r7
 800ae4e:	f7f5 fe95 	bl	8000b7c <__aeabi_dcmpun>
 800ae52:	b128      	cbz	r0, 800ae60 <_scanf_float+0x40c>
 800ae54:	4808      	ldr	r0, [pc, #32]	@ (800ae78 <_scanf_float+0x424>)
 800ae56:	f000 fb1f 	bl	800b498 <nanf>
 800ae5a:	ed85 0a00 	vstr	s0, [r5]
 800ae5e:	e7d1      	b.n	800ae04 <_scanf_float+0x3b0>
 800ae60:	4630      	mov	r0, r6
 800ae62:	4639      	mov	r1, r7
 800ae64:	f7f5 fee8 	bl	8000c38 <__aeabi_d2f>
 800ae68:	6028      	str	r0, [r5, #0]
 800ae6a:	e7cb      	b.n	800ae04 <_scanf_float+0x3b0>
 800ae6c:	f04f 0900 	mov.w	r9, #0
 800ae70:	e629      	b.n	800aac6 <_scanf_float+0x72>
 800ae72:	bf00      	nop
 800ae74:	0800ec60 	.word	0x0800ec60
 800ae78:	0800eff5 	.word	0x0800eff5

0800ae7c <std>:
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	b510      	push	{r4, lr}
 800ae80:	4604      	mov	r4, r0
 800ae82:	e9c0 3300 	strd	r3, r3, [r0]
 800ae86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae8a:	6083      	str	r3, [r0, #8]
 800ae8c:	8181      	strh	r1, [r0, #12]
 800ae8e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae90:	81c2      	strh	r2, [r0, #14]
 800ae92:	6183      	str	r3, [r0, #24]
 800ae94:	4619      	mov	r1, r3
 800ae96:	2208      	movs	r2, #8
 800ae98:	305c      	adds	r0, #92	@ 0x5c
 800ae9a:	f000 fa19 	bl	800b2d0 <memset>
 800ae9e:	4b0d      	ldr	r3, [pc, #52]	@ (800aed4 <std+0x58>)
 800aea0:	6263      	str	r3, [r4, #36]	@ 0x24
 800aea2:	4b0d      	ldr	r3, [pc, #52]	@ (800aed8 <std+0x5c>)
 800aea4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aea6:	4b0d      	ldr	r3, [pc, #52]	@ (800aedc <std+0x60>)
 800aea8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	@ (800aee0 <std+0x64>)
 800aeac:	6323      	str	r3, [r4, #48]	@ 0x30
 800aeae:	4b0d      	ldr	r3, [pc, #52]	@ (800aee4 <std+0x68>)
 800aeb0:	6224      	str	r4, [r4, #32]
 800aeb2:	429c      	cmp	r4, r3
 800aeb4:	d006      	beq.n	800aec4 <std+0x48>
 800aeb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aeba:	4294      	cmp	r4, r2
 800aebc:	d002      	beq.n	800aec4 <std+0x48>
 800aebe:	33d0      	adds	r3, #208	@ 0xd0
 800aec0:	429c      	cmp	r4, r3
 800aec2:	d105      	bne.n	800aed0 <std+0x54>
 800aec4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aecc:	f000 bad2 	b.w	800b474 <__retarget_lock_init_recursive>
 800aed0:	bd10      	pop	{r4, pc}
 800aed2:	bf00      	nop
 800aed4:	0800b121 	.word	0x0800b121
 800aed8:	0800b143 	.word	0x0800b143
 800aedc:	0800b17b 	.word	0x0800b17b
 800aee0:	0800b19f 	.word	0x0800b19f
 800aee4:	2000132c 	.word	0x2000132c

0800aee8 <stdio_exit_handler>:
 800aee8:	4a02      	ldr	r2, [pc, #8]	@ (800aef4 <stdio_exit_handler+0xc>)
 800aeea:	4903      	ldr	r1, [pc, #12]	@ (800aef8 <stdio_exit_handler+0x10>)
 800aeec:	4803      	ldr	r0, [pc, #12]	@ (800aefc <stdio_exit_handler+0x14>)
 800aeee:	f000 b869 	b.w	800afc4 <_fwalk_sglue>
 800aef2:	bf00      	nop
 800aef4:	20000010 	.word	0x20000010
 800aef8:	0800dfe9 	.word	0x0800dfe9
 800aefc:	20000020 	.word	0x20000020

0800af00 <cleanup_stdio>:
 800af00:	6841      	ldr	r1, [r0, #4]
 800af02:	4b0c      	ldr	r3, [pc, #48]	@ (800af34 <cleanup_stdio+0x34>)
 800af04:	4299      	cmp	r1, r3
 800af06:	b510      	push	{r4, lr}
 800af08:	4604      	mov	r4, r0
 800af0a:	d001      	beq.n	800af10 <cleanup_stdio+0x10>
 800af0c:	f003 f86c 	bl	800dfe8 <_fflush_r>
 800af10:	68a1      	ldr	r1, [r4, #8]
 800af12:	4b09      	ldr	r3, [pc, #36]	@ (800af38 <cleanup_stdio+0x38>)
 800af14:	4299      	cmp	r1, r3
 800af16:	d002      	beq.n	800af1e <cleanup_stdio+0x1e>
 800af18:	4620      	mov	r0, r4
 800af1a:	f003 f865 	bl	800dfe8 <_fflush_r>
 800af1e:	68e1      	ldr	r1, [r4, #12]
 800af20:	4b06      	ldr	r3, [pc, #24]	@ (800af3c <cleanup_stdio+0x3c>)
 800af22:	4299      	cmp	r1, r3
 800af24:	d004      	beq.n	800af30 <cleanup_stdio+0x30>
 800af26:	4620      	mov	r0, r4
 800af28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af2c:	f003 b85c 	b.w	800dfe8 <_fflush_r>
 800af30:	bd10      	pop	{r4, pc}
 800af32:	bf00      	nop
 800af34:	2000132c 	.word	0x2000132c
 800af38:	20001394 	.word	0x20001394
 800af3c:	200013fc 	.word	0x200013fc

0800af40 <global_stdio_init.part.0>:
 800af40:	b510      	push	{r4, lr}
 800af42:	4b0b      	ldr	r3, [pc, #44]	@ (800af70 <global_stdio_init.part.0+0x30>)
 800af44:	4c0b      	ldr	r4, [pc, #44]	@ (800af74 <global_stdio_init.part.0+0x34>)
 800af46:	4a0c      	ldr	r2, [pc, #48]	@ (800af78 <global_stdio_init.part.0+0x38>)
 800af48:	601a      	str	r2, [r3, #0]
 800af4a:	4620      	mov	r0, r4
 800af4c:	2200      	movs	r2, #0
 800af4e:	2104      	movs	r1, #4
 800af50:	f7ff ff94 	bl	800ae7c <std>
 800af54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af58:	2201      	movs	r2, #1
 800af5a:	2109      	movs	r1, #9
 800af5c:	f7ff ff8e 	bl	800ae7c <std>
 800af60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af64:	2202      	movs	r2, #2
 800af66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af6a:	2112      	movs	r1, #18
 800af6c:	f7ff bf86 	b.w	800ae7c <std>
 800af70:	20001464 	.word	0x20001464
 800af74:	2000132c 	.word	0x2000132c
 800af78:	0800aee9 	.word	0x0800aee9

0800af7c <__sfp_lock_acquire>:
 800af7c:	4801      	ldr	r0, [pc, #4]	@ (800af84 <__sfp_lock_acquire+0x8>)
 800af7e:	f000 ba7a 	b.w	800b476 <__retarget_lock_acquire_recursive>
 800af82:	bf00      	nop
 800af84:	2000146d 	.word	0x2000146d

0800af88 <__sfp_lock_release>:
 800af88:	4801      	ldr	r0, [pc, #4]	@ (800af90 <__sfp_lock_release+0x8>)
 800af8a:	f000 ba75 	b.w	800b478 <__retarget_lock_release_recursive>
 800af8e:	bf00      	nop
 800af90:	2000146d 	.word	0x2000146d

0800af94 <__sinit>:
 800af94:	b510      	push	{r4, lr}
 800af96:	4604      	mov	r4, r0
 800af98:	f7ff fff0 	bl	800af7c <__sfp_lock_acquire>
 800af9c:	6a23      	ldr	r3, [r4, #32]
 800af9e:	b11b      	cbz	r3, 800afa8 <__sinit+0x14>
 800afa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa4:	f7ff bff0 	b.w	800af88 <__sfp_lock_release>
 800afa8:	4b04      	ldr	r3, [pc, #16]	@ (800afbc <__sinit+0x28>)
 800afaa:	6223      	str	r3, [r4, #32]
 800afac:	4b04      	ldr	r3, [pc, #16]	@ (800afc0 <__sinit+0x2c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1f5      	bne.n	800afa0 <__sinit+0xc>
 800afb4:	f7ff ffc4 	bl	800af40 <global_stdio_init.part.0>
 800afb8:	e7f2      	b.n	800afa0 <__sinit+0xc>
 800afba:	bf00      	nop
 800afbc:	0800af01 	.word	0x0800af01
 800afc0:	20001464 	.word	0x20001464

0800afc4 <_fwalk_sglue>:
 800afc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc8:	4607      	mov	r7, r0
 800afca:	4688      	mov	r8, r1
 800afcc:	4614      	mov	r4, r2
 800afce:	2600      	movs	r6, #0
 800afd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afd4:	f1b9 0901 	subs.w	r9, r9, #1
 800afd8:	d505      	bpl.n	800afe6 <_fwalk_sglue+0x22>
 800afda:	6824      	ldr	r4, [r4, #0]
 800afdc:	2c00      	cmp	r4, #0
 800afde:	d1f7      	bne.n	800afd0 <_fwalk_sglue+0xc>
 800afe0:	4630      	mov	r0, r6
 800afe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe6:	89ab      	ldrh	r3, [r5, #12]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d907      	bls.n	800affc <_fwalk_sglue+0x38>
 800afec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aff0:	3301      	adds	r3, #1
 800aff2:	d003      	beq.n	800affc <_fwalk_sglue+0x38>
 800aff4:	4629      	mov	r1, r5
 800aff6:	4638      	mov	r0, r7
 800aff8:	47c0      	blx	r8
 800affa:	4306      	orrs	r6, r0
 800affc:	3568      	adds	r5, #104	@ 0x68
 800affe:	e7e9      	b.n	800afd4 <_fwalk_sglue+0x10>

0800b000 <iprintf>:
 800b000:	b40f      	push	{r0, r1, r2, r3}
 800b002:	b507      	push	{r0, r1, r2, lr}
 800b004:	4906      	ldr	r1, [pc, #24]	@ (800b020 <iprintf+0x20>)
 800b006:	ab04      	add	r3, sp, #16
 800b008:	6808      	ldr	r0, [r1, #0]
 800b00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b00e:	6881      	ldr	r1, [r0, #8]
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	f002 fe4d 	bl	800dcb0 <_vfiprintf_r>
 800b016:	b003      	add	sp, #12
 800b018:	f85d eb04 	ldr.w	lr, [sp], #4
 800b01c:	b004      	add	sp, #16
 800b01e:	4770      	bx	lr
 800b020:	2000001c 	.word	0x2000001c

0800b024 <_puts_r>:
 800b024:	6a03      	ldr	r3, [r0, #32]
 800b026:	b570      	push	{r4, r5, r6, lr}
 800b028:	6884      	ldr	r4, [r0, #8]
 800b02a:	4605      	mov	r5, r0
 800b02c:	460e      	mov	r6, r1
 800b02e:	b90b      	cbnz	r3, 800b034 <_puts_r+0x10>
 800b030:	f7ff ffb0 	bl	800af94 <__sinit>
 800b034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b036:	07db      	lsls	r3, r3, #31
 800b038:	d405      	bmi.n	800b046 <_puts_r+0x22>
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	0598      	lsls	r0, r3, #22
 800b03e:	d402      	bmi.n	800b046 <_puts_r+0x22>
 800b040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b042:	f000 fa18 	bl	800b476 <__retarget_lock_acquire_recursive>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	0719      	lsls	r1, r3, #28
 800b04a:	d502      	bpl.n	800b052 <_puts_r+0x2e>
 800b04c:	6923      	ldr	r3, [r4, #16]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d135      	bne.n	800b0be <_puts_r+0x9a>
 800b052:	4621      	mov	r1, r4
 800b054:	4628      	mov	r0, r5
 800b056:	f000 f8e5 	bl	800b224 <__swsetup_r>
 800b05a:	b380      	cbz	r0, 800b0be <_puts_r+0x9a>
 800b05c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b060:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b062:	07da      	lsls	r2, r3, #31
 800b064:	d405      	bmi.n	800b072 <_puts_r+0x4e>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	059b      	lsls	r3, r3, #22
 800b06a:	d402      	bmi.n	800b072 <_puts_r+0x4e>
 800b06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b06e:	f000 fa03 	bl	800b478 <__retarget_lock_release_recursive>
 800b072:	4628      	mov	r0, r5
 800b074:	bd70      	pop	{r4, r5, r6, pc}
 800b076:	2b00      	cmp	r3, #0
 800b078:	da04      	bge.n	800b084 <_puts_r+0x60>
 800b07a:	69a2      	ldr	r2, [r4, #24]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	dc17      	bgt.n	800b0b0 <_puts_r+0x8c>
 800b080:	290a      	cmp	r1, #10
 800b082:	d015      	beq.n	800b0b0 <_puts_r+0x8c>
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	6022      	str	r2, [r4, #0]
 800b08a:	7019      	strb	r1, [r3, #0]
 800b08c:	68a3      	ldr	r3, [r4, #8]
 800b08e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b092:	3b01      	subs	r3, #1
 800b094:	60a3      	str	r3, [r4, #8]
 800b096:	2900      	cmp	r1, #0
 800b098:	d1ed      	bne.n	800b076 <_puts_r+0x52>
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	da11      	bge.n	800b0c2 <_puts_r+0x9e>
 800b09e:	4622      	mov	r2, r4
 800b0a0:	210a      	movs	r1, #10
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f000 f87f 	bl	800b1a6 <__swbuf_r>
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d0d7      	beq.n	800b05c <_puts_r+0x38>
 800b0ac:	250a      	movs	r5, #10
 800b0ae:	e7d7      	b.n	800b060 <_puts_r+0x3c>
 800b0b0:	4622      	mov	r2, r4
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f000 f877 	bl	800b1a6 <__swbuf_r>
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	d1e7      	bne.n	800b08c <_puts_r+0x68>
 800b0bc:	e7ce      	b.n	800b05c <_puts_r+0x38>
 800b0be:	3e01      	subs	r6, #1
 800b0c0:	e7e4      	b.n	800b08c <_puts_r+0x68>
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	1c5a      	adds	r2, r3, #1
 800b0c6:	6022      	str	r2, [r4, #0]
 800b0c8:	220a      	movs	r2, #10
 800b0ca:	701a      	strb	r2, [r3, #0]
 800b0cc:	e7ee      	b.n	800b0ac <_puts_r+0x88>
	...

0800b0d0 <puts>:
 800b0d0:	4b02      	ldr	r3, [pc, #8]	@ (800b0dc <puts+0xc>)
 800b0d2:	4601      	mov	r1, r0
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	f7ff bfa5 	b.w	800b024 <_puts_r>
 800b0da:	bf00      	nop
 800b0dc:	2000001c 	.word	0x2000001c

0800b0e0 <siprintf>:
 800b0e0:	b40e      	push	{r1, r2, r3}
 800b0e2:	b500      	push	{lr}
 800b0e4:	b09c      	sub	sp, #112	@ 0x70
 800b0e6:	ab1d      	add	r3, sp, #116	@ 0x74
 800b0e8:	9002      	str	r0, [sp, #8]
 800b0ea:	9006      	str	r0, [sp, #24]
 800b0ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b0f0:	4809      	ldr	r0, [pc, #36]	@ (800b118 <siprintf+0x38>)
 800b0f2:	9107      	str	r1, [sp, #28]
 800b0f4:	9104      	str	r1, [sp, #16]
 800b0f6:	4909      	ldr	r1, [pc, #36]	@ (800b11c <siprintf+0x3c>)
 800b0f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fc:	9105      	str	r1, [sp, #20]
 800b0fe:	6800      	ldr	r0, [r0, #0]
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	a902      	add	r1, sp, #8
 800b104:	f002 fcae 	bl	800da64 <_svfiprintf_r>
 800b108:	9b02      	ldr	r3, [sp, #8]
 800b10a:	2200      	movs	r2, #0
 800b10c:	701a      	strb	r2, [r3, #0]
 800b10e:	b01c      	add	sp, #112	@ 0x70
 800b110:	f85d eb04 	ldr.w	lr, [sp], #4
 800b114:	b003      	add	sp, #12
 800b116:	4770      	bx	lr
 800b118:	2000001c 	.word	0x2000001c
 800b11c:	ffff0208 	.word	0xffff0208

0800b120 <__sread>:
 800b120:	b510      	push	{r4, lr}
 800b122:	460c      	mov	r4, r1
 800b124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b128:	f000 f956 	bl	800b3d8 <_read_r>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	bfab      	itete	ge
 800b130:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b132:	89a3      	ldrhlt	r3, [r4, #12]
 800b134:	181b      	addge	r3, r3, r0
 800b136:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b13a:	bfac      	ite	ge
 800b13c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b13e:	81a3      	strhlt	r3, [r4, #12]
 800b140:	bd10      	pop	{r4, pc}

0800b142 <__swrite>:
 800b142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b146:	461f      	mov	r7, r3
 800b148:	898b      	ldrh	r3, [r1, #12]
 800b14a:	05db      	lsls	r3, r3, #23
 800b14c:	4605      	mov	r5, r0
 800b14e:	460c      	mov	r4, r1
 800b150:	4616      	mov	r6, r2
 800b152:	d505      	bpl.n	800b160 <__swrite+0x1e>
 800b154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b158:	2302      	movs	r3, #2
 800b15a:	2200      	movs	r2, #0
 800b15c:	f000 f92a 	bl	800b3b4 <_lseek_r>
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b16a:	81a3      	strh	r3, [r4, #12]
 800b16c:	4632      	mov	r2, r6
 800b16e:	463b      	mov	r3, r7
 800b170:	4628      	mov	r0, r5
 800b172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b176:	f000 b941 	b.w	800b3fc <_write_r>

0800b17a <__sseek>:
 800b17a:	b510      	push	{r4, lr}
 800b17c:	460c      	mov	r4, r1
 800b17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b182:	f000 f917 	bl	800b3b4 <_lseek_r>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	bf15      	itete	ne
 800b18c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b18e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b192:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b196:	81a3      	strheq	r3, [r4, #12]
 800b198:	bf18      	it	ne
 800b19a:	81a3      	strhne	r3, [r4, #12]
 800b19c:	bd10      	pop	{r4, pc}

0800b19e <__sclose>:
 800b19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a2:	f000 b8a1 	b.w	800b2e8 <_close_r>

0800b1a6 <__swbuf_r>:
 800b1a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a8:	460e      	mov	r6, r1
 800b1aa:	4614      	mov	r4, r2
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	b118      	cbz	r0, 800b1b8 <__swbuf_r+0x12>
 800b1b0:	6a03      	ldr	r3, [r0, #32]
 800b1b2:	b90b      	cbnz	r3, 800b1b8 <__swbuf_r+0x12>
 800b1b4:	f7ff feee 	bl	800af94 <__sinit>
 800b1b8:	69a3      	ldr	r3, [r4, #24]
 800b1ba:	60a3      	str	r3, [r4, #8]
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	071a      	lsls	r2, r3, #28
 800b1c0:	d501      	bpl.n	800b1c6 <__swbuf_r+0x20>
 800b1c2:	6923      	ldr	r3, [r4, #16]
 800b1c4:	b943      	cbnz	r3, 800b1d8 <__swbuf_r+0x32>
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f000 f82b 	bl	800b224 <__swsetup_r>
 800b1ce:	b118      	cbz	r0, 800b1d8 <__swbuf_r+0x32>
 800b1d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	6922      	ldr	r2, [r4, #16]
 800b1dc:	1a98      	subs	r0, r3, r2
 800b1de:	6963      	ldr	r3, [r4, #20]
 800b1e0:	b2f6      	uxtb	r6, r6
 800b1e2:	4283      	cmp	r3, r0
 800b1e4:	4637      	mov	r7, r6
 800b1e6:	dc05      	bgt.n	800b1f4 <__swbuf_r+0x4e>
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f002 fefc 	bl	800dfe8 <_fflush_r>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d1ed      	bne.n	800b1d0 <__swbuf_r+0x2a>
 800b1f4:	68a3      	ldr	r3, [r4, #8]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	60a3      	str	r3, [r4, #8]
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	6022      	str	r2, [r4, #0]
 800b200:	701e      	strb	r6, [r3, #0]
 800b202:	6962      	ldr	r2, [r4, #20]
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	429a      	cmp	r2, r3
 800b208:	d004      	beq.n	800b214 <__swbuf_r+0x6e>
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	07db      	lsls	r3, r3, #31
 800b20e:	d5e1      	bpl.n	800b1d4 <__swbuf_r+0x2e>
 800b210:	2e0a      	cmp	r6, #10
 800b212:	d1df      	bne.n	800b1d4 <__swbuf_r+0x2e>
 800b214:	4621      	mov	r1, r4
 800b216:	4628      	mov	r0, r5
 800b218:	f002 fee6 	bl	800dfe8 <_fflush_r>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d0d9      	beq.n	800b1d4 <__swbuf_r+0x2e>
 800b220:	e7d6      	b.n	800b1d0 <__swbuf_r+0x2a>
	...

0800b224 <__swsetup_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4b29      	ldr	r3, [pc, #164]	@ (800b2cc <__swsetup_r+0xa8>)
 800b228:	4605      	mov	r5, r0
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	460c      	mov	r4, r1
 800b22e:	b118      	cbz	r0, 800b238 <__swsetup_r+0x14>
 800b230:	6a03      	ldr	r3, [r0, #32]
 800b232:	b90b      	cbnz	r3, 800b238 <__swsetup_r+0x14>
 800b234:	f7ff feae 	bl	800af94 <__sinit>
 800b238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b23c:	0719      	lsls	r1, r3, #28
 800b23e:	d422      	bmi.n	800b286 <__swsetup_r+0x62>
 800b240:	06da      	lsls	r2, r3, #27
 800b242:	d407      	bmi.n	800b254 <__swsetup_r+0x30>
 800b244:	2209      	movs	r2, #9
 800b246:	602a      	str	r2, [r5, #0]
 800b248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b24c:	81a3      	strh	r3, [r4, #12]
 800b24e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b252:	e033      	b.n	800b2bc <__swsetup_r+0x98>
 800b254:	0758      	lsls	r0, r3, #29
 800b256:	d512      	bpl.n	800b27e <__swsetup_r+0x5a>
 800b258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b25a:	b141      	cbz	r1, 800b26e <__swsetup_r+0x4a>
 800b25c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b260:	4299      	cmp	r1, r3
 800b262:	d002      	beq.n	800b26a <__swsetup_r+0x46>
 800b264:	4628      	mov	r0, r5
 800b266:	f000 ff6b 	bl	800c140 <_free_r>
 800b26a:	2300      	movs	r3, #0
 800b26c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b274:	81a3      	strh	r3, [r4, #12]
 800b276:	2300      	movs	r3, #0
 800b278:	6063      	str	r3, [r4, #4]
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	89a3      	ldrh	r3, [r4, #12]
 800b280:	f043 0308 	orr.w	r3, r3, #8
 800b284:	81a3      	strh	r3, [r4, #12]
 800b286:	6923      	ldr	r3, [r4, #16]
 800b288:	b94b      	cbnz	r3, 800b29e <__swsetup_r+0x7a>
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b294:	d003      	beq.n	800b29e <__swsetup_r+0x7a>
 800b296:	4621      	mov	r1, r4
 800b298:	4628      	mov	r0, r5
 800b29a:	f002 fef3 	bl	800e084 <__smakebuf_r>
 800b29e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a2:	f013 0201 	ands.w	r2, r3, #1
 800b2a6:	d00a      	beq.n	800b2be <__swsetup_r+0x9a>
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	60a2      	str	r2, [r4, #8]
 800b2ac:	6962      	ldr	r2, [r4, #20]
 800b2ae:	4252      	negs	r2, r2
 800b2b0:	61a2      	str	r2, [r4, #24]
 800b2b2:	6922      	ldr	r2, [r4, #16]
 800b2b4:	b942      	cbnz	r2, 800b2c8 <__swsetup_r+0xa4>
 800b2b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b2ba:	d1c5      	bne.n	800b248 <__swsetup_r+0x24>
 800b2bc:	bd38      	pop	{r3, r4, r5, pc}
 800b2be:	0799      	lsls	r1, r3, #30
 800b2c0:	bf58      	it	pl
 800b2c2:	6962      	ldrpl	r2, [r4, #20]
 800b2c4:	60a2      	str	r2, [r4, #8]
 800b2c6:	e7f4      	b.n	800b2b2 <__swsetup_r+0x8e>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	e7f7      	b.n	800b2bc <__swsetup_r+0x98>
 800b2cc:	2000001c 	.word	0x2000001c

0800b2d0 <memset>:
 800b2d0:	4402      	add	r2, r0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d100      	bne.n	800b2da <memset+0xa>
 800b2d8:	4770      	bx	lr
 800b2da:	f803 1b01 	strb.w	r1, [r3], #1
 800b2de:	e7f9      	b.n	800b2d4 <memset+0x4>

0800b2e0 <_localeconv_r>:
 800b2e0:	4800      	ldr	r0, [pc, #0]	@ (800b2e4 <_localeconv_r+0x4>)
 800b2e2:	4770      	bx	lr
 800b2e4:	2000015c 	.word	0x2000015c

0800b2e8 <_close_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	4d06      	ldr	r5, [pc, #24]	@ (800b304 <_close_r+0x1c>)
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	602b      	str	r3, [r5, #0]
 800b2f4:	f7f6 fcb6 	bl	8001c64 <_close>
 800b2f8:	1c43      	adds	r3, r0, #1
 800b2fa:	d102      	bne.n	800b302 <_close_r+0x1a>
 800b2fc:	682b      	ldr	r3, [r5, #0]
 800b2fe:	b103      	cbz	r3, 800b302 <_close_r+0x1a>
 800b300:	6023      	str	r3, [r4, #0]
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	20001468 	.word	0x20001468

0800b308 <_reclaim_reent>:
 800b308:	4b29      	ldr	r3, [pc, #164]	@ (800b3b0 <_reclaim_reent+0xa8>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4283      	cmp	r3, r0
 800b30e:	b570      	push	{r4, r5, r6, lr}
 800b310:	4604      	mov	r4, r0
 800b312:	d04b      	beq.n	800b3ac <_reclaim_reent+0xa4>
 800b314:	69c3      	ldr	r3, [r0, #28]
 800b316:	b1ab      	cbz	r3, 800b344 <_reclaim_reent+0x3c>
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	b16b      	cbz	r3, 800b338 <_reclaim_reent+0x30>
 800b31c:	2500      	movs	r5, #0
 800b31e:	69e3      	ldr	r3, [r4, #28]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	5959      	ldr	r1, [r3, r5]
 800b324:	2900      	cmp	r1, #0
 800b326:	d13b      	bne.n	800b3a0 <_reclaim_reent+0x98>
 800b328:	3504      	adds	r5, #4
 800b32a:	2d80      	cmp	r5, #128	@ 0x80
 800b32c:	d1f7      	bne.n	800b31e <_reclaim_reent+0x16>
 800b32e:	69e3      	ldr	r3, [r4, #28]
 800b330:	4620      	mov	r0, r4
 800b332:	68d9      	ldr	r1, [r3, #12]
 800b334:	f000 ff04 	bl	800c140 <_free_r>
 800b338:	69e3      	ldr	r3, [r4, #28]
 800b33a:	6819      	ldr	r1, [r3, #0]
 800b33c:	b111      	cbz	r1, 800b344 <_reclaim_reent+0x3c>
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 fefe 	bl	800c140 <_free_r>
 800b344:	6961      	ldr	r1, [r4, #20]
 800b346:	b111      	cbz	r1, 800b34e <_reclaim_reent+0x46>
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 fef9 	bl	800c140 <_free_r>
 800b34e:	69e1      	ldr	r1, [r4, #28]
 800b350:	b111      	cbz	r1, 800b358 <_reclaim_reent+0x50>
 800b352:	4620      	mov	r0, r4
 800b354:	f000 fef4 	bl	800c140 <_free_r>
 800b358:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b35a:	b111      	cbz	r1, 800b362 <_reclaim_reent+0x5a>
 800b35c:	4620      	mov	r0, r4
 800b35e:	f000 feef 	bl	800c140 <_free_r>
 800b362:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b364:	b111      	cbz	r1, 800b36c <_reclaim_reent+0x64>
 800b366:	4620      	mov	r0, r4
 800b368:	f000 feea 	bl	800c140 <_free_r>
 800b36c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b36e:	b111      	cbz	r1, 800b376 <_reclaim_reent+0x6e>
 800b370:	4620      	mov	r0, r4
 800b372:	f000 fee5 	bl	800c140 <_free_r>
 800b376:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b378:	b111      	cbz	r1, 800b380 <_reclaim_reent+0x78>
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 fee0 	bl	800c140 <_free_r>
 800b380:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b382:	b111      	cbz	r1, 800b38a <_reclaim_reent+0x82>
 800b384:	4620      	mov	r0, r4
 800b386:	f000 fedb 	bl	800c140 <_free_r>
 800b38a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b38c:	b111      	cbz	r1, 800b394 <_reclaim_reent+0x8c>
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 fed6 	bl	800c140 <_free_r>
 800b394:	6a23      	ldr	r3, [r4, #32]
 800b396:	b14b      	cbz	r3, 800b3ac <_reclaim_reent+0xa4>
 800b398:	4620      	mov	r0, r4
 800b39a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b39e:	4718      	bx	r3
 800b3a0:	680e      	ldr	r6, [r1, #0]
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f000 fecc 	bl	800c140 <_free_r>
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	e7bb      	b.n	800b324 <_reclaim_reent+0x1c>
 800b3ac:	bd70      	pop	{r4, r5, r6, pc}
 800b3ae:	bf00      	nop
 800b3b0:	2000001c 	.word	0x2000001c

0800b3b4 <_lseek_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d07      	ldr	r5, [pc, #28]	@ (800b3d4 <_lseek_r+0x20>)
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	4611      	mov	r1, r2
 800b3be:	2200      	movs	r2, #0
 800b3c0:	602a      	str	r2, [r5, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	f7f6 fc75 	bl	8001cb2 <_lseek>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d102      	bne.n	800b3d2 <_lseek_r+0x1e>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b103      	cbz	r3, 800b3d2 <_lseek_r+0x1e>
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	20001468 	.word	0x20001468

0800b3d8 <_read_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d07      	ldr	r5, [pc, #28]	@ (800b3f8 <_read_r+0x20>)
 800b3dc:	4604      	mov	r4, r0
 800b3de:	4608      	mov	r0, r1
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	602a      	str	r2, [r5, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	f7f6 fc03 	bl	8001bf2 <_read>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_read_r+0x1e>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_read_r+0x1e>
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	20001468 	.word	0x20001468

0800b3fc <_write_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4d07      	ldr	r5, [pc, #28]	@ (800b41c <_write_r+0x20>)
 800b400:	4604      	mov	r4, r0
 800b402:	4608      	mov	r0, r1
 800b404:	4611      	mov	r1, r2
 800b406:	2200      	movs	r2, #0
 800b408:	602a      	str	r2, [r5, #0]
 800b40a:	461a      	mov	r2, r3
 800b40c:	f7f6 fc0e 	bl	8001c2c <_write>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d102      	bne.n	800b41a <_write_r+0x1e>
 800b414:	682b      	ldr	r3, [r5, #0]
 800b416:	b103      	cbz	r3, 800b41a <_write_r+0x1e>
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	20001468 	.word	0x20001468

0800b420 <__errno>:
 800b420:	4b01      	ldr	r3, [pc, #4]	@ (800b428 <__errno+0x8>)
 800b422:	6818      	ldr	r0, [r3, #0]
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	2000001c 	.word	0x2000001c

0800b42c <__libc_init_array>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	4d0d      	ldr	r5, [pc, #52]	@ (800b464 <__libc_init_array+0x38>)
 800b430:	4c0d      	ldr	r4, [pc, #52]	@ (800b468 <__libc_init_array+0x3c>)
 800b432:	1b64      	subs	r4, r4, r5
 800b434:	10a4      	asrs	r4, r4, #2
 800b436:	2600      	movs	r6, #0
 800b438:	42a6      	cmp	r6, r4
 800b43a:	d109      	bne.n	800b450 <__libc_init_array+0x24>
 800b43c:	4d0b      	ldr	r5, [pc, #44]	@ (800b46c <__libc_init_array+0x40>)
 800b43e:	4c0c      	ldr	r4, [pc, #48]	@ (800b470 <__libc_init_array+0x44>)
 800b440:	f003 fae0 	bl	800ea04 <_init>
 800b444:	1b64      	subs	r4, r4, r5
 800b446:	10a4      	asrs	r4, r4, #2
 800b448:	2600      	movs	r6, #0
 800b44a:	42a6      	cmp	r6, r4
 800b44c:	d105      	bne.n	800b45a <__libc_init_array+0x2e>
 800b44e:	bd70      	pop	{r4, r5, r6, pc}
 800b450:	f855 3b04 	ldr.w	r3, [r5], #4
 800b454:	4798      	blx	r3
 800b456:	3601      	adds	r6, #1
 800b458:	e7ee      	b.n	800b438 <__libc_init_array+0xc>
 800b45a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b45e:	4798      	blx	r3
 800b460:	3601      	adds	r6, #1
 800b462:	e7f2      	b.n	800b44a <__libc_init_array+0x1e>
 800b464:	0800f060 	.word	0x0800f060
 800b468:	0800f060 	.word	0x0800f060
 800b46c:	0800f060 	.word	0x0800f060
 800b470:	0800f064 	.word	0x0800f064

0800b474 <__retarget_lock_init_recursive>:
 800b474:	4770      	bx	lr

0800b476 <__retarget_lock_acquire_recursive>:
 800b476:	4770      	bx	lr

0800b478 <__retarget_lock_release_recursive>:
 800b478:	4770      	bx	lr

0800b47a <memcpy>:
 800b47a:	440a      	add	r2, r1
 800b47c:	4291      	cmp	r1, r2
 800b47e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b482:	d100      	bne.n	800b486 <memcpy+0xc>
 800b484:	4770      	bx	lr
 800b486:	b510      	push	{r4, lr}
 800b488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b48c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b490:	4291      	cmp	r1, r2
 800b492:	d1f9      	bne.n	800b488 <memcpy+0xe>
 800b494:	bd10      	pop	{r4, pc}
	...

0800b498 <nanf>:
 800b498:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b4a0 <nanf+0x8>
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	7fc00000 	.word	0x7fc00000

0800b4a4 <quorem>:
 800b4a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a8:	6903      	ldr	r3, [r0, #16]
 800b4aa:	690c      	ldr	r4, [r1, #16]
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	4607      	mov	r7, r0
 800b4b0:	db7e      	blt.n	800b5b0 <quorem+0x10c>
 800b4b2:	3c01      	subs	r4, #1
 800b4b4:	f101 0814 	add.w	r8, r1, #20
 800b4b8:	00a3      	lsls	r3, r4, #2
 800b4ba:	f100 0514 	add.w	r5, r0, #20
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4da:	d32e      	bcc.n	800b53a <quorem+0x96>
 800b4dc:	f04f 0a00 	mov.w	sl, #0
 800b4e0:	46c4      	mov	ip, r8
 800b4e2:	46ae      	mov	lr, r5
 800b4e4:	46d3      	mov	fp, sl
 800b4e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b4ea:	b298      	uxth	r0, r3
 800b4ec:	fb06 a000 	mla	r0, r6, r0, sl
 800b4f0:	0c02      	lsrs	r2, r0, #16
 800b4f2:	0c1b      	lsrs	r3, r3, #16
 800b4f4:	fb06 2303 	mla	r3, r6, r3, r2
 800b4f8:	f8de 2000 	ldr.w	r2, [lr]
 800b4fc:	b280      	uxth	r0, r0
 800b4fe:	b292      	uxth	r2, r2
 800b500:	1a12      	subs	r2, r2, r0
 800b502:	445a      	add	r2, fp
 800b504:	f8de 0000 	ldr.w	r0, [lr]
 800b508:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b512:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b516:	b292      	uxth	r2, r2
 800b518:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b51c:	45e1      	cmp	r9, ip
 800b51e:	f84e 2b04 	str.w	r2, [lr], #4
 800b522:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b526:	d2de      	bcs.n	800b4e6 <quorem+0x42>
 800b528:	9b00      	ldr	r3, [sp, #0]
 800b52a:	58eb      	ldr	r3, [r5, r3]
 800b52c:	b92b      	cbnz	r3, 800b53a <quorem+0x96>
 800b52e:	9b01      	ldr	r3, [sp, #4]
 800b530:	3b04      	subs	r3, #4
 800b532:	429d      	cmp	r5, r3
 800b534:	461a      	mov	r2, r3
 800b536:	d32f      	bcc.n	800b598 <quorem+0xf4>
 800b538:	613c      	str	r4, [r7, #16]
 800b53a:	4638      	mov	r0, r7
 800b53c:	f001 f9c4 	bl	800c8c8 <__mcmp>
 800b540:	2800      	cmp	r0, #0
 800b542:	db25      	blt.n	800b590 <quorem+0xec>
 800b544:	4629      	mov	r1, r5
 800b546:	2000      	movs	r0, #0
 800b548:	f858 2b04 	ldr.w	r2, [r8], #4
 800b54c:	f8d1 c000 	ldr.w	ip, [r1]
 800b550:	fa1f fe82 	uxth.w	lr, r2
 800b554:	fa1f f38c 	uxth.w	r3, ip
 800b558:	eba3 030e 	sub.w	r3, r3, lr
 800b55c:	4403      	add	r3, r0
 800b55e:	0c12      	lsrs	r2, r2, #16
 800b560:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b564:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b568:	b29b      	uxth	r3, r3
 800b56a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b56e:	45c1      	cmp	r9, r8
 800b570:	f841 3b04 	str.w	r3, [r1], #4
 800b574:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b578:	d2e6      	bcs.n	800b548 <quorem+0xa4>
 800b57a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b57e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b582:	b922      	cbnz	r2, 800b58e <quorem+0xea>
 800b584:	3b04      	subs	r3, #4
 800b586:	429d      	cmp	r5, r3
 800b588:	461a      	mov	r2, r3
 800b58a:	d30b      	bcc.n	800b5a4 <quorem+0x100>
 800b58c:	613c      	str	r4, [r7, #16]
 800b58e:	3601      	adds	r6, #1
 800b590:	4630      	mov	r0, r6
 800b592:	b003      	add	sp, #12
 800b594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b598:	6812      	ldr	r2, [r2, #0]
 800b59a:	3b04      	subs	r3, #4
 800b59c:	2a00      	cmp	r2, #0
 800b59e:	d1cb      	bne.n	800b538 <quorem+0x94>
 800b5a0:	3c01      	subs	r4, #1
 800b5a2:	e7c6      	b.n	800b532 <quorem+0x8e>
 800b5a4:	6812      	ldr	r2, [r2, #0]
 800b5a6:	3b04      	subs	r3, #4
 800b5a8:	2a00      	cmp	r2, #0
 800b5aa:	d1ef      	bne.n	800b58c <quorem+0xe8>
 800b5ac:	3c01      	subs	r4, #1
 800b5ae:	e7ea      	b.n	800b586 <quorem+0xe2>
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	e7ee      	b.n	800b592 <quorem+0xee>
 800b5b4:	0000      	movs	r0, r0
	...

0800b5b8 <_dtoa_r>:
 800b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	69c7      	ldr	r7, [r0, #28]
 800b5be:	b099      	sub	sp, #100	@ 0x64
 800b5c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b5c4:	ec55 4b10 	vmov	r4, r5, d0
 800b5c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b5ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800b5cc:	4683      	mov	fp, r0
 800b5ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b5d2:	b97f      	cbnz	r7, 800b5f4 <_dtoa_r+0x3c>
 800b5d4:	2010      	movs	r0, #16
 800b5d6:	f000 fdfd 	bl	800c1d4 <malloc>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b5e0:	b920      	cbnz	r0, 800b5ec <_dtoa_r+0x34>
 800b5e2:	4ba7      	ldr	r3, [pc, #668]	@ (800b880 <_dtoa_r+0x2c8>)
 800b5e4:	21ef      	movs	r1, #239	@ 0xef
 800b5e6:	48a7      	ldr	r0, [pc, #668]	@ (800b884 <_dtoa_r+0x2cc>)
 800b5e8:	f002 fdee 	bl	800e1c8 <__assert_func>
 800b5ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b5f0:	6007      	str	r7, [r0, #0]
 800b5f2:	60c7      	str	r7, [r0, #12]
 800b5f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5f8:	6819      	ldr	r1, [r3, #0]
 800b5fa:	b159      	cbz	r1, 800b614 <_dtoa_r+0x5c>
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	604a      	str	r2, [r1, #4]
 800b600:	2301      	movs	r3, #1
 800b602:	4093      	lsls	r3, r2
 800b604:	608b      	str	r3, [r1, #8]
 800b606:	4658      	mov	r0, fp
 800b608:	f000 feda 	bl	800c3c0 <_Bfree>
 800b60c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b610:	2200      	movs	r2, #0
 800b612:	601a      	str	r2, [r3, #0]
 800b614:	1e2b      	subs	r3, r5, #0
 800b616:	bfb9      	ittee	lt
 800b618:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b61c:	9303      	strlt	r3, [sp, #12]
 800b61e:	2300      	movge	r3, #0
 800b620:	6033      	strge	r3, [r6, #0]
 800b622:	9f03      	ldr	r7, [sp, #12]
 800b624:	4b98      	ldr	r3, [pc, #608]	@ (800b888 <_dtoa_r+0x2d0>)
 800b626:	bfbc      	itt	lt
 800b628:	2201      	movlt	r2, #1
 800b62a:	6032      	strlt	r2, [r6, #0]
 800b62c:	43bb      	bics	r3, r7
 800b62e:	d112      	bne.n	800b656 <_dtoa_r+0x9e>
 800b630:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b632:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b63c:	4323      	orrs	r3, r4
 800b63e:	f000 854d 	beq.w	800c0dc <_dtoa_r+0xb24>
 800b642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b644:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b89c <_dtoa_r+0x2e4>
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f000 854f 	beq.w	800c0ec <_dtoa_r+0xb34>
 800b64e:	f10a 0303 	add.w	r3, sl, #3
 800b652:	f000 bd49 	b.w	800c0e8 <_dtoa_r+0xb30>
 800b656:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b65a:	2200      	movs	r2, #0
 800b65c:	ec51 0b17 	vmov	r0, r1, d7
 800b660:	2300      	movs	r3, #0
 800b662:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b666:	f7f5 fa57 	bl	8000b18 <__aeabi_dcmpeq>
 800b66a:	4680      	mov	r8, r0
 800b66c:	b158      	cbz	r0, 800b686 <_dtoa_r+0xce>
 800b66e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b670:	2301      	movs	r3, #1
 800b672:	6013      	str	r3, [r2, #0]
 800b674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b676:	b113      	cbz	r3, 800b67e <_dtoa_r+0xc6>
 800b678:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b67a:	4b84      	ldr	r3, [pc, #528]	@ (800b88c <_dtoa_r+0x2d4>)
 800b67c:	6013      	str	r3, [r2, #0]
 800b67e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b8a0 <_dtoa_r+0x2e8>
 800b682:	f000 bd33 	b.w	800c0ec <_dtoa_r+0xb34>
 800b686:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b68a:	aa16      	add	r2, sp, #88	@ 0x58
 800b68c:	a917      	add	r1, sp, #92	@ 0x5c
 800b68e:	4658      	mov	r0, fp
 800b690:	f001 fa3a 	bl	800cb08 <__d2b>
 800b694:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b698:	4681      	mov	r9, r0
 800b69a:	2e00      	cmp	r6, #0
 800b69c:	d077      	beq.n	800b78e <_dtoa_r+0x1d6>
 800b69e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b6a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b6b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b6b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	4b74      	ldr	r3, [pc, #464]	@ (800b890 <_dtoa_r+0x2d8>)
 800b6be:	f7f4 fe0b 	bl	80002d8 <__aeabi_dsub>
 800b6c2:	a369      	add	r3, pc, #420	@ (adr r3, 800b868 <_dtoa_r+0x2b0>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7f4 ffbe 	bl	8000648 <__aeabi_dmul>
 800b6cc:	a368      	add	r3, pc, #416	@ (adr r3, 800b870 <_dtoa_r+0x2b8>)
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	f7f4 fe03 	bl	80002dc <__adddf3>
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	4630      	mov	r0, r6
 800b6da:	460d      	mov	r5, r1
 800b6dc:	f7f4 ff4a 	bl	8000574 <__aeabi_i2d>
 800b6e0:	a365      	add	r3, pc, #404	@ (adr r3, 800b878 <_dtoa_r+0x2c0>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 ffaf 	bl	8000648 <__aeabi_dmul>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	f7f4 fdf3 	bl	80002dc <__adddf3>
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	460d      	mov	r5, r1
 800b6fa:	f7f5 fa55 	bl	8000ba8 <__aeabi_d2iz>
 800b6fe:	2200      	movs	r2, #0
 800b700:	4607      	mov	r7, r0
 800b702:	2300      	movs	r3, #0
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f5 fa10 	bl	8000b2c <__aeabi_dcmplt>
 800b70c:	b140      	cbz	r0, 800b720 <_dtoa_r+0x168>
 800b70e:	4638      	mov	r0, r7
 800b710:	f7f4 ff30 	bl	8000574 <__aeabi_i2d>
 800b714:	4622      	mov	r2, r4
 800b716:	462b      	mov	r3, r5
 800b718:	f7f5 f9fe 	bl	8000b18 <__aeabi_dcmpeq>
 800b71c:	b900      	cbnz	r0, 800b720 <_dtoa_r+0x168>
 800b71e:	3f01      	subs	r7, #1
 800b720:	2f16      	cmp	r7, #22
 800b722:	d851      	bhi.n	800b7c8 <_dtoa_r+0x210>
 800b724:	4b5b      	ldr	r3, [pc, #364]	@ (800b894 <_dtoa_r+0x2dc>)
 800b726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b732:	f7f5 f9fb 	bl	8000b2c <__aeabi_dcmplt>
 800b736:	2800      	cmp	r0, #0
 800b738:	d048      	beq.n	800b7cc <_dtoa_r+0x214>
 800b73a:	3f01      	subs	r7, #1
 800b73c:	2300      	movs	r3, #0
 800b73e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b740:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b742:	1b9b      	subs	r3, r3, r6
 800b744:	1e5a      	subs	r2, r3, #1
 800b746:	bf44      	itt	mi
 800b748:	f1c3 0801 	rsbmi	r8, r3, #1
 800b74c:	2300      	movmi	r3, #0
 800b74e:	9208      	str	r2, [sp, #32]
 800b750:	bf54      	ite	pl
 800b752:	f04f 0800 	movpl.w	r8, #0
 800b756:	9308      	strmi	r3, [sp, #32]
 800b758:	2f00      	cmp	r7, #0
 800b75a:	db39      	blt.n	800b7d0 <_dtoa_r+0x218>
 800b75c:	9b08      	ldr	r3, [sp, #32]
 800b75e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b760:	443b      	add	r3, r7
 800b762:	9308      	str	r3, [sp, #32]
 800b764:	2300      	movs	r3, #0
 800b766:	930a      	str	r3, [sp, #40]	@ 0x28
 800b768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b76a:	2b09      	cmp	r3, #9
 800b76c:	d864      	bhi.n	800b838 <_dtoa_r+0x280>
 800b76e:	2b05      	cmp	r3, #5
 800b770:	bfc4      	itt	gt
 800b772:	3b04      	subgt	r3, #4
 800b774:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b778:	f1a3 0302 	sub.w	r3, r3, #2
 800b77c:	bfcc      	ite	gt
 800b77e:	2400      	movgt	r4, #0
 800b780:	2401      	movle	r4, #1
 800b782:	2b03      	cmp	r3, #3
 800b784:	d863      	bhi.n	800b84e <_dtoa_r+0x296>
 800b786:	e8df f003 	tbb	[pc, r3]
 800b78a:	372a      	.short	0x372a
 800b78c:	5535      	.short	0x5535
 800b78e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b792:	441e      	add	r6, r3
 800b794:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b798:	2b20      	cmp	r3, #32
 800b79a:	bfc1      	itttt	gt
 800b79c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b7a0:	409f      	lslgt	r7, r3
 800b7a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b7a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b7aa:	bfd6      	itet	le
 800b7ac:	f1c3 0320 	rsble	r3, r3, #32
 800b7b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b7b4:	fa04 f003 	lslle.w	r0, r4, r3
 800b7b8:	f7f4 fecc 	bl	8000554 <__aeabi_ui2d>
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b7c2:	3e01      	subs	r6, #1
 800b7c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b7c6:	e777      	b.n	800b6b8 <_dtoa_r+0x100>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e7b8      	b.n	800b73e <_dtoa_r+0x186>
 800b7cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b7ce:	e7b7      	b.n	800b740 <_dtoa_r+0x188>
 800b7d0:	427b      	negs	r3, r7
 800b7d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	eba8 0807 	sub.w	r8, r8, r7
 800b7da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b7dc:	e7c4      	b.n	800b768 <_dtoa_r+0x1b0>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	dc35      	bgt.n	800b854 <_dtoa_r+0x29c>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	9307      	str	r3, [sp, #28]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7f2:	e00b      	b.n	800b80c <_dtoa_r+0x254>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e7f3      	b.n	800b7e0 <_dtoa_r+0x228>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7fe:	18fb      	adds	r3, r7, r3
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	3301      	adds	r3, #1
 800b804:	2b01      	cmp	r3, #1
 800b806:	9307      	str	r3, [sp, #28]
 800b808:	bfb8      	it	lt
 800b80a:	2301      	movlt	r3, #1
 800b80c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b810:	2100      	movs	r1, #0
 800b812:	2204      	movs	r2, #4
 800b814:	f102 0514 	add.w	r5, r2, #20
 800b818:	429d      	cmp	r5, r3
 800b81a:	d91f      	bls.n	800b85c <_dtoa_r+0x2a4>
 800b81c:	6041      	str	r1, [r0, #4]
 800b81e:	4658      	mov	r0, fp
 800b820:	f000 fd8e 	bl	800c340 <_Balloc>
 800b824:	4682      	mov	sl, r0
 800b826:	2800      	cmp	r0, #0
 800b828:	d13c      	bne.n	800b8a4 <_dtoa_r+0x2ec>
 800b82a:	4b1b      	ldr	r3, [pc, #108]	@ (800b898 <_dtoa_r+0x2e0>)
 800b82c:	4602      	mov	r2, r0
 800b82e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b832:	e6d8      	b.n	800b5e6 <_dtoa_r+0x2e>
 800b834:	2301      	movs	r3, #1
 800b836:	e7e0      	b.n	800b7fa <_dtoa_r+0x242>
 800b838:	2401      	movs	r4, #1
 800b83a:	2300      	movs	r3, #0
 800b83c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b83e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	9307      	str	r3, [sp, #28]
 800b848:	2200      	movs	r2, #0
 800b84a:	2312      	movs	r3, #18
 800b84c:	e7d0      	b.n	800b7f0 <_dtoa_r+0x238>
 800b84e:	2301      	movs	r3, #1
 800b850:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b852:	e7f5      	b.n	800b840 <_dtoa_r+0x288>
 800b854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	9307      	str	r3, [sp, #28]
 800b85a:	e7d7      	b.n	800b80c <_dtoa_r+0x254>
 800b85c:	3101      	adds	r1, #1
 800b85e:	0052      	lsls	r2, r2, #1
 800b860:	e7d8      	b.n	800b814 <_dtoa_r+0x25c>
 800b862:	bf00      	nop
 800b864:	f3af 8000 	nop.w
 800b868:	636f4361 	.word	0x636f4361
 800b86c:	3fd287a7 	.word	0x3fd287a7
 800b870:	8b60c8b3 	.word	0x8b60c8b3
 800b874:	3fc68a28 	.word	0x3fc68a28
 800b878:	509f79fb 	.word	0x509f79fb
 800b87c:	3fd34413 	.word	0x3fd34413
 800b880:	0800ec72 	.word	0x0800ec72
 800b884:	0800ec89 	.word	0x0800ec89
 800b888:	7ff00000 	.word	0x7ff00000
 800b88c:	0800ec3d 	.word	0x0800ec3d
 800b890:	3ff80000 	.word	0x3ff80000
 800b894:	0800ed80 	.word	0x0800ed80
 800b898:	0800ece1 	.word	0x0800ece1
 800b89c:	0800ec6e 	.word	0x0800ec6e
 800b8a0:	0800ec3c 	.word	0x0800ec3c
 800b8a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8a8:	6018      	str	r0, [r3, #0]
 800b8aa:	9b07      	ldr	r3, [sp, #28]
 800b8ac:	2b0e      	cmp	r3, #14
 800b8ae:	f200 80a4 	bhi.w	800b9fa <_dtoa_r+0x442>
 800b8b2:	2c00      	cmp	r4, #0
 800b8b4:	f000 80a1 	beq.w	800b9fa <_dtoa_r+0x442>
 800b8b8:	2f00      	cmp	r7, #0
 800b8ba:	dd33      	ble.n	800b924 <_dtoa_r+0x36c>
 800b8bc:	4bad      	ldr	r3, [pc, #692]	@ (800bb74 <_dtoa_r+0x5bc>)
 800b8be:	f007 020f 	and.w	r2, r7, #15
 800b8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8c6:	ed93 7b00 	vldr	d7, [r3]
 800b8ca:	05f8      	lsls	r0, r7, #23
 800b8cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b8d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b8d4:	d516      	bpl.n	800b904 <_dtoa_r+0x34c>
 800b8d6:	4ba8      	ldr	r3, [pc, #672]	@ (800bb78 <_dtoa_r+0x5c0>)
 800b8d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8e0:	f7f4 ffdc 	bl	800089c <__aeabi_ddiv>
 800b8e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8e8:	f004 040f 	and.w	r4, r4, #15
 800b8ec:	2603      	movs	r6, #3
 800b8ee:	4da2      	ldr	r5, [pc, #648]	@ (800bb78 <_dtoa_r+0x5c0>)
 800b8f0:	b954      	cbnz	r4, 800b908 <_dtoa_r+0x350>
 800b8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8fa:	f7f4 ffcf 	bl	800089c <__aeabi_ddiv>
 800b8fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b902:	e028      	b.n	800b956 <_dtoa_r+0x39e>
 800b904:	2602      	movs	r6, #2
 800b906:	e7f2      	b.n	800b8ee <_dtoa_r+0x336>
 800b908:	07e1      	lsls	r1, r4, #31
 800b90a:	d508      	bpl.n	800b91e <_dtoa_r+0x366>
 800b90c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b910:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b914:	f7f4 fe98 	bl	8000648 <__aeabi_dmul>
 800b918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b91c:	3601      	adds	r6, #1
 800b91e:	1064      	asrs	r4, r4, #1
 800b920:	3508      	adds	r5, #8
 800b922:	e7e5      	b.n	800b8f0 <_dtoa_r+0x338>
 800b924:	f000 80d2 	beq.w	800bacc <_dtoa_r+0x514>
 800b928:	427c      	negs	r4, r7
 800b92a:	4b92      	ldr	r3, [pc, #584]	@ (800bb74 <_dtoa_r+0x5bc>)
 800b92c:	4d92      	ldr	r5, [pc, #584]	@ (800bb78 <_dtoa_r+0x5c0>)
 800b92e:	f004 020f 	and.w	r2, r4, #15
 800b932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b93e:	f7f4 fe83 	bl	8000648 <__aeabi_dmul>
 800b942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b946:	1124      	asrs	r4, r4, #4
 800b948:	2300      	movs	r3, #0
 800b94a:	2602      	movs	r6, #2
 800b94c:	2c00      	cmp	r4, #0
 800b94e:	f040 80b2 	bne.w	800bab6 <_dtoa_r+0x4fe>
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1d3      	bne.n	800b8fe <_dtoa_r+0x346>
 800b956:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b958:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 80b7 	beq.w	800bad0 <_dtoa_r+0x518>
 800b962:	4b86      	ldr	r3, [pc, #536]	@ (800bb7c <_dtoa_r+0x5c4>)
 800b964:	2200      	movs	r2, #0
 800b966:	4620      	mov	r0, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	f7f5 f8df 	bl	8000b2c <__aeabi_dcmplt>
 800b96e:	2800      	cmp	r0, #0
 800b970:	f000 80ae 	beq.w	800bad0 <_dtoa_r+0x518>
 800b974:	9b07      	ldr	r3, [sp, #28]
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 80aa 	beq.w	800bad0 <_dtoa_r+0x518>
 800b97c:	9b00      	ldr	r3, [sp, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	dd37      	ble.n	800b9f2 <_dtoa_r+0x43a>
 800b982:	1e7b      	subs	r3, r7, #1
 800b984:	9304      	str	r3, [sp, #16]
 800b986:	4620      	mov	r0, r4
 800b988:	4b7d      	ldr	r3, [pc, #500]	@ (800bb80 <_dtoa_r+0x5c8>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	4629      	mov	r1, r5
 800b98e:	f7f4 fe5b 	bl	8000648 <__aeabi_dmul>
 800b992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b996:	9c00      	ldr	r4, [sp, #0]
 800b998:	3601      	adds	r6, #1
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7f4 fdea 	bl	8000574 <__aeabi_i2d>
 800b9a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9a4:	f7f4 fe50 	bl	8000648 <__aeabi_dmul>
 800b9a8:	4b76      	ldr	r3, [pc, #472]	@ (800bb84 <_dtoa_r+0x5cc>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f7f4 fc96 	bl	80002dc <__adddf3>
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b9b6:	2c00      	cmp	r4, #0
 800b9b8:	f040 808d 	bne.w	800bad6 <_dtoa_r+0x51e>
 800b9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9c0:	4b71      	ldr	r3, [pc, #452]	@ (800bb88 <_dtoa_r+0x5d0>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f7f4 fc88 	bl	80002d8 <__aeabi_dsub>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9d0:	462a      	mov	r2, r5
 800b9d2:	4633      	mov	r3, r6
 800b9d4:	f7f5 f8c8 	bl	8000b68 <__aeabi_dcmpgt>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	f040 828b 	bne.w	800bef4 <_dtoa_r+0x93c>
 800b9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9e2:	462a      	mov	r2, r5
 800b9e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b9e8:	f7f5 f8a0 	bl	8000b2c <__aeabi_dcmplt>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	f040 8128 	bne.w	800bc42 <_dtoa_r+0x68a>
 800b9f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b9f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b9fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f2c0 815a 	blt.w	800bcb6 <_dtoa_r+0x6fe>
 800ba02:	2f0e      	cmp	r7, #14
 800ba04:	f300 8157 	bgt.w	800bcb6 <_dtoa_r+0x6fe>
 800ba08:	4b5a      	ldr	r3, [pc, #360]	@ (800bb74 <_dtoa_r+0x5bc>)
 800ba0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba0e:	ed93 7b00 	vldr	d7, [r3]
 800ba12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	ed8d 7b00 	vstr	d7, [sp]
 800ba1a:	da03      	bge.n	800ba24 <_dtoa_r+0x46c>
 800ba1c:	9b07      	ldr	r3, [sp, #28]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f340 8101 	ble.w	800bc26 <_dtoa_r+0x66e>
 800ba24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba28:	4656      	mov	r6, sl
 800ba2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba2e:	4620      	mov	r0, r4
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7f4 ff33 	bl	800089c <__aeabi_ddiv>
 800ba36:	f7f5 f8b7 	bl	8000ba8 <__aeabi_d2iz>
 800ba3a:	4680      	mov	r8, r0
 800ba3c:	f7f4 fd9a 	bl	8000574 <__aeabi_i2d>
 800ba40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba44:	f7f4 fe00 	bl	8000648 <__aeabi_dmul>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4629      	mov	r1, r5
 800ba50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ba54:	f7f4 fc40 	bl	80002d8 <__aeabi_dsub>
 800ba58:	f806 4b01 	strb.w	r4, [r6], #1
 800ba5c:	9d07      	ldr	r5, [sp, #28]
 800ba5e:	eba6 040a 	sub.w	r4, r6, sl
 800ba62:	42a5      	cmp	r5, r4
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
 800ba68:	f040 8117 	bne.w	800bc9a <_dtoa_r+0x6e2>
 800ba6c:	f7f4 fc36 	bl	80002dc <__adddf3>
 800ba70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba74:	4604      	mov	r4, r0
 800ba76:	460d      	mov	r5, r1
 800ba78:	f7f5 f876 	bl	8000b68 <__aeabi_dcmpgt>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f040 80f9 	bne.w	800bc74 <_dtoa_r+0x6bc>
 800ba82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba86:	4620      	mov	r0, r4
 800ba88:	4629      	mov	r1, r5
 800ba8a:	f7f5 f845 	bl	8000b18 <__aeabi_dcmpeq>
 800ba8e:	b118      	cbz	r0, 800ba98 <_dtoa_r+0x4e0>
 800ba90:	f018 0f01 	tst.w	r8, #1
 800ba94:	f040 80ee 	bne.w	800bc74 <_dtoa_r+0x6bc>
 800ba98:	4649      	mov	r1, r9
 800ba9a:	4658      	mov	r0, fp
 800ba9c:	f000 fc90 	bl	800c3c0 <_Bfree>
 800baa0:	2300      	movs	r3, #0
 800baa2:	7033      	strb	r3, [r6, #0]
 800baa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800baa6:	3701      	adds	r7, #1
 800baa8:	601f      	str	r7, [r3, #0]
 800baaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800baac:	2b00      	cmp	r3, #0
 800baae:	f000 831d 	beq.w	800c0ec <_dtoa_r+0xb34>
 800bab2:	601e      	str	r6, [r3, #0]
 800bab4:	e31a      	b.n	800c0ec <_dtoa_r+0xb34>
 800bab6:	07e2      	lsls	r2, r4, #31
 800bab8:	d505      	bpl.n	800bac6 <_dtoa_r+0x50e>
 800baba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800babe:	f7f4 fdc3 	bl	8000648 <__aeabi_dmul>
 800bac2:	3601      	adds	r6, #1
 800bac4:	2301      	movs	r3, #1
 800bac6:	1064      	asrs	r4, r4, #1
 800bac8:	3508      	adds	r5, #8
 800baca:	e73f      	b.n	800b94c <_dtoa_r+0x394>
 800bacc:	2602      	movs	r6, #2
 800bace:	e742      	b.n	800b956 <_dtoa_r+0x39e>
 800bad0:	9c07      	ldr	r4, [sp, #28]
 800bad2:	9704      	str	r7, [sp, #16]
 800bad4:	e761      	b.n	800b99a <_dtoa_r+0x3e2>
 800bad6:	4b27      	ldr	r3, [pc, #156]	@ (800bb74 <_dtoa_r+0x5bc>)
 800bad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bade:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bae2:	4454      	add	r4, sl
 800bae4:	2900      	cmp	r1, #0
 800bae6:	d053      	beq.n	800bb90 <_dtoa_r+0x5d8>
 800bae8:	4928      	ldr	r1, [pc, #160]	@ (800bb8c <_dtoa_r+0x5d4>)
 800baea:	2000      	movs	r0, #0
 800baec:	f7f4 fed6 	bl	800089c <__aeabi_ddiv>
 800baf0:	4633      	mov	r3, r6
 800baf2:	462a      	mov	r2, r5
 800baf4:	f7f4 fbf0 	bl	80002d8 <__aeabi_dsub>
 800baf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bafc:	4656      	mov	r6, sl
 800bafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb02:	f7f5 f851 	bl	8000ba8 <__aeabi_d2iz>
 800bb06:	4605      	mov	r5, r0
 800bb08:	f7f4 fd34 	bl	8000574 <__aeabi_i2d>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb14:	f7f4 fbe0 	bl	80002d8 <__aeabi_dsub>
 800bb18:	3530      	adds	r5, #48	@ 0x30
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb22:	f806 5b01 	strb.w	r5, [r6], #1
 800bb26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb2a:	f7f4 ffff 	bl	8000b2c <__aeabi_dcmplt>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d171      	bne.n	800bc16 <_dtoa_r+0x65e>
 800bb32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb36:	4911      	ldr	r1, [pc, #68]	@ (800bb7c <_dtoa_r+0x5c4>)
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f7f4 fbcd 	bl	80002d8 <__aeabi_dsub>
 800bb3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb42:	f7f4 fff3 	bl	8000b2c <__aeabi_dcmplt>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	f040 8095 	bne.w	800bc76 <_dtoa_r+0x6be>
 800bb4c:	42a6      	cmp	r6, r4
 800bb4e:	f43f af50 	beq.w	800b9f2 <_dtoa_r+0x43a>
 800bb52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bb56:	4b0a      	ldr	r3, [pc, #40]	@ (800bb80 <_dtoa_r+0x5c8>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f7f4 fd75 	bl	8000648 <__aeabi_dmul>
 800bb5e:	4b08      	ldr	r3, [pc, #32]	@ (800bb80 <_dtoa_r+0x5c8>)
 800bb60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb64:	2200      	movs	r2, #0
 800bb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6a:	f7f4 fd6d 	bl	8000648 <__aeabi_dmul>
 800bb6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb72:	e7c4      	b.n	800bafe <_dtoa_r+0x546>
 800bb74:	0800ed80 	.word	0x0800ed80
 800bb78:	0800ed58 	.word	0x0800ed58
 800bb7c:	3ff00000 	.word	0x3ff00000
 800bb80:	40240000 	.word	0x40240000
 800bb84:	401c0000 	.word	0x401c0000
 800bb88:	40140000 	.word	0x40140000
 800bb8c:	3fe00000 	.word	0x3fe00000
 800bb90:	4631      	mov	r1, r6
 800bb92:	4628      	mov	r0, r5
 800bb94:	f7f4 fd58 	bl	8000648 <__aeabi_dmul>
 800bb98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb9c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bb9e:	4656      	mov	r6, sl
 800bba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bba4:	f7f5 f800 	bl	8000ba8 <__aeabi_d2iz>
 800bba8:	4605      	mov	r5, r0
 800bbaa:	f7f4 fce3 	bl	8000574 <__aeabi_i2d>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbb6:	f7f4 fb8f 	bl	80002d8 <__aeabi_dsub>
 800bbba:	3530      	adds	r5, #48	@ 0x30
 800bbbc:	f806 5b01 	strb.w	r5, [r6], #1
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	42a6      	cmp	r6, r4
 800bbc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bbca:	f04f 0200 	mov.w	r2, #0
 800bbce:	d124      	bne.n	800bc1a <_dtoa_r+0x662>
 800bbd0:	4bac      	ldr	r3, [pc, #688]	@ (800be84 <_dtoa_r+0x8cc>)
 800bbd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbd6:	f7f4 fb81 	bl	80002dc <__adddf3>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbe2:	f7f4 ffc1 	bl	8000b68 <__aeabi_dcmpgt>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d145      	bne.n	800bc76 <_dtoa_r+0x6be>
 800bbea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbee:	49a5      	ldr	r1, [pc, #660]	@ (800be84 <_dtoa_r+0x8cc>)
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	f7f4 fb71 	bl	80002d8 <__aeabi_dsub>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbfe:	f7f4 ff95 	bl	8000b2c <__aeabi_dcmplt>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	f43f aef5 	beq.w	800b9f2 <_dtoa_r+0x43a>
 800bc08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bc0a:	1e73      	subs	r3, r6, #1
 800bc0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc12:	2b30      	cmp	r3, #48	@ 0x30
 800bc14:	d0f8      	beq.n	800bc08 <_dtoa_r+0x650>
 800bc16:	9f04      	ldr	r7, [sp, #16]
 800bc18:	e73e      	b.n	800ba98 <_dtoa_r+0x4e0>
 800bc1a:	4b9b      	ldr	r3, [pc, #620]	@ (800be88 <_dtoa_r+0x8d0>)
 800bc1c:	f7f4 fd14 	bl	8000648 <__aeabi_dmul>
 800bc20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc24:	e7bc      	b.n	800bba0 <_dtoa_r+0x5e8>
 800bc26:	d10c      	bne.n	800bc42 <_dtoa_r+0x68a>
 800bc28:	4b98      	ldr	r3, [pc, #608]	@ (800be8c <_dtoa_r+0x8d4>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc30:	f7f4 fd0a 	bl	8000648 <__aeabi_dmul>
 800bc34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc38:	f7f4 ff8c 	bl	8000b54 <__aeabi_dcmpge>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	f000 8157 	beq.w	800bef0 <_dtoa_r+0x938>
 800bc42:	2400      	movs	r4, #0
 800bc44:	4625      	mov	r5, r4
 800bc46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc48:	43db      	mvns	r3, r3
 800bc4a:	9304      	str	r3, [sp, #16]
 800bc4c:	4656      	mov	r6, sl
 800bc4e:	2700      	movs	r7, #0
 800bc50:	4621      	mov	r1, r4
 800bc52:	4658      	mov	r0, fp
 800bc54:	f000 fbb4 	bl	800c3c0 <_Bfree>
 800bc58:	2d00      	cmp	r5, #0
 800bc5a:	d0dc      	beq.n	800bc16 <_dtoa_r+0x65e>
 800bc5c:	b12f      	cbz	r7, 800bc6a <_dtoa_r+0x6b2>
 800bc5e:	42af      	cmp	r7, r5
 800bc60:	d003      	beq.n	800bc6a <_dtoa_r+0x6b2>
 800bc62:	4639      	mov	r1, r7
 800bc64:	4658      	mov	r0, fp
 800bc66:	f000 fbab 	bl	800c3c0 <_Bfree>
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	4658      	mov	r0, fp
 800bc6e:	f000 fba7 	bl	800c3c0 <_Bfree>
 800bc72:	e7d0      	b.n	800bc16 <_dtoa_r+0x65e>
 800bc74:	9704      	str	r7, [sp, #16]
 800bc76:	4633      	mov	r3, r6
 800bc78:	461e      	mov	r6, r3
 800bc7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc7e:	2a39      	cmp	r2, #57	@ 0x39
 800bc80:	d107      	bne.n	800bc92 <_dtoa_r+0x6da>
 800bc82:	459a      	cmp	sl, r3
 800bc84:	d1f8      	bne.n	800bc78 <_dtoa_r+0x6c0>
 800bc86:	9a04      	ldr	r2, [sp, #16]
 800bc88:	3201      	adds	r2, #1
 800bc8a:	9204      	str	r2, [sp, #16]
 800bc8c:	2230      	movs	r2, #48	@ 0x30
 800bc8e:	f88a 2000 	strb.w	r2, [sl]
 800bc92:	781a      	ldrb	r2, [r3, #0]
 800bc94:	3201      	adds	r2, #1
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e7bd      	b.n	800bc16 <_dtoa_r+0x65e>
 800bc9a:	4b7b      	ldr	r3, [pc, #492]	@ (800be88 <_dtoa_r+0x8d0>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f7f4 fcd3 	bl	8000648 <__aeabi_dmul>
 800bca2:	2200      	movs	r2, #0
 800bca4:	2300      	movs	r3, #0
 800bca6:	4604      	mov	r4, r0
 800bca8:	460d      	mov	r5, r1
 800bcaa:	f7f4 ff35 	bl	8000b18 <__aeabi_dcmpeq>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	f43f aebb 	beq.w	800ba2a <_dtoa_r+0x472>
 800bcb4:	e6f0      	b.n	800ba98 <_dtoa_r+0x4e0>
 800bcb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bcb8:	2a00      	cmp	r2, #0
 800bcba:	f000 80db 	beq.w	800be74 <_dtoa_r+0x8bc>
 800bcbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcc0:	2a01      	cmp	r2, #1
 800bcc2:	f300 80bf 	bgt.w	800be44 <_dtoa_r+0x88c>
 800bcc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bcc8:	2a00      	cmp	r2, #0
 800bcca:	f000 80b7 	beq.w	800be3c <_dtoa_r+0x884>
 800bcce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bcd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bcd4:	4646      	mov	r6, r8
 800bcd6:	9a08      	ldr	r2, [sp, #32]
 800bcd8:	2101      	movs	r1, #1
 800bcda:	441a      	add	r2, r3
 800bcdc:	4658      	mov	r0, fp
 800bcde:	4498      	add	r8, r3
 800bce0:	9208      	str	r2, [sp, #32]
 800bce2:	f000 fc6b 	bl	800c5bc <__i2b>
 800bce6:	4605      	mov	r5, r0
 800bce8:	b15e      	cbz	r6, 800bd02 <_dtoa_r+0x74a>
 800bcea:	9b08      	ldr	r3, [sp, #32]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	dd08      	ble.n	800bd02 <_dtoa_r+0x74a>
 800bcf0:	42b3      	cmp	r3, r6
 800bcf2:	9a08      	ldr	r2, [sp, #32]
 800bcf4:	bfa8      	it	ge
 800bcf6:	4633      	movge	r3, r6
 800bcf8:	eba8 0803 	sub.w	r8, r8, r3
 800bcfc:	1af6      	subs	r6, r6, r3
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	9308      	str	r3, [sp, #32]
 800bd02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd04:	b1f3      	cbz	r3, 800bd44 <_dtoa_r+0x78c>
 800bd06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 80b7 	beq.w	800be7c <_dtoa_r+0x8c4>
 800bd0e:	b18c      	cbz	r4, 800bd34 <_dtoa_r+0x77c>
 800bd10:	4629      	mov	r1, r5
 800bd12:	4622      	mov	r2, r4
 800bd14:	4658      	mov	r0, fp
 800bd16:	f000 fd11 	bl	800c73c <__pow5mult>
 800bd1a:	464a      	mov	r2, r9
 800bd1c:	4601      	mov	r1, r0
 800bd1e:	4605      	mov	r5, r0
 800bd20:	4658      	mov	r0, fp
 800bd22:	f000 fc61 	bl	800c5e8 <__multiply>
 800bd26:	4649      	mov	r1, r9
 800bd28:	9004      	str	r0, [sp, #16]
 800bd2a:	4658      	mov	r0, fp
 800bd2c:	f000 fb48 	bl	800c3c0 <_Bfree>
 800bd30:	9b04      	ldr	r3, [sp, #16]
 800bd32:	4699      	mov	r9, r3
 800bd34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd36:	1b1a      	subs	r2, r3, r4
 800bd38:	d004      	beq.n	800bd44 <_dtoa_r+0x78c>
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	4658      	mov	r0, fp
 800bd3e:	f000 fcfd 	bl	800c73c <__pow5mult>
 800bd42:	4681      	mov	r9, r0
 800bd44:	2101      	movs	r1, #1
 800bd46:	4658      	mov	r0, fp
 800bd48:	f000 fc38 	bl	800c5bc <__i2b>
 800bd4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd4e:	4604      	mov	r4, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	f000 81cf 	beq.w	800c0f4 <_dtoa_r+0xb3c>
 800bd56:	461a      	mov	r2, r3
 800bd58:	4601      	mov	r1, r0
 800bd5a:	4658      	mov	r0, fp
 800bd5c:	f000 fcee 	bl	800c73c <__pow5mult>
 800bd60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	4604      	mov	r4, r0
 800bd66:	f300 8095 	bgt.w	800be94 <_dtoa_r+0x8dc>
 800bd6a:	9b02      	ldr	r3, [sp, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f040 8087 	bne.w	800be80 <_dtoa_r+0x8c8>
 800bd72:	9b03      	ldr	r3, [sp, #12]
 800bd74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f040 8089 	bne.w	800be90 <_dtoa_r+0x8d8>
 800bd7e:	9b03      	ldr	r3, [sp, #12]
 800bd80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd84:	0d1b      	lsrs	r3, r3, #20
 800bd86:	051b      	lsls	r3, r3, #20
 800bd88:	b12b      	cbz	r3, 800bd96 <_dtoa_r+0x7de>
 800bd8a:	9b08      	ldr	r3, [sp, #32]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	9308      	str	r3, [sp, #32]
 800bd90:	f108 0801 	add.w	r8, r8, #1
 800bd94:	2301      	movs	r3, #1
 800bd96:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 81b0 	beq.w	800c100 <_dtoa_r+0xb48>
 800bda0:	6923      	ldr	r3, [r4, #16]
 800bda2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bda6:	6918      	ldr	r0, [r3, #16]
 800bda8:	f000 fbbc 	bl	800c524 <__hi0bits>
 800bdac:	f1c0 0020 	rsb	r0, r0, #32
 800bdb0:	9b08      	ldr	r3, [sp, #32]
 800bdb2:	4418      	add	r0, r3
 800bdb4:	f010 001f 	ands.w	r0, r0, #31
 800bdb8:	d077      	beq.n	800beaa <_dtoa_r+0x8f2>
 800bdba:	f1c0 0320 	rsb	r3, r0, #32
 800bdbe:	2b04      	cmp	r3, #4
 800bdc0:	dd6b      	ble.n	800be9a <_dtoa_r+0x8e2>
 800bdc2:	9b08      	ldr	r3, [sp, #32]
 800bdc4:	f1c0 001c 	rsb	r0, r0, #28
 800bdc8:	4403      	add	r3, r0
 800bdca:	4480      	add	r8, r0
 800bdcc:	4406      	add	r6, r0
 800bdce:	9308      	str	r3, [sp, #32]
 800bdd0:	f1b8 0f00 	cmp.w	r8, #0
 800bdd4:	dd05      	ble.n	800bde2 <_dtoa_r+0x82a>
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	4642      	mov	r2, r8
 800bdda:	4658      	mov	r0, fp
 800bddc:	f000 fd08 	bl	800c7f0 <__lshift>
 800bde0:	4681      	mov	r9, r0
 800bde2:	9b08      	ldr	r3, [sp, #32]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	dd05      	ble.n	800bdf4 <_dtoa_r+0x83c>
 800bde8:	4621      	mov	r1, r4
 800bdea:	461a      	mov	r2, r3
 800bdec:	4658      	mov	r0, fp
 800bdee:	f000 fcff 	bl	800c7f0 <__lshift>
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d059      	beq.n	800beae <_dtoa_r+0x8f6>
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	4648      	mov	r0, r9
 800bdfe:	f000 fd63 	bl	800c8c8 <__mcmp>
 800be02:	2800      	cmp	r0, #0
 800be04:	da53      	bge.n	800beae <_dtoa_r+0x8f6>
 800be06:	1e7b      	subs	r3, r7, #1
 800be08:	9304      	str	r3, [sp, #16]
 800be0a:	4649      	mov	r1, r9
 800be0c:	2300      	movs	r3, #0
 800be0e:	220a      	movs	r2, #10
 800be10:	4658      	mov	r0, fp
 800be12:	f000 faf7 	bl	800c404 <__multadd>
 800be16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be18:	4681      	mov	r9, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f000 8172 	beq.w	800c104 <_dtoa_r+0xb4c>
 800be20:	2300      	movs	r3, #0
 800be22:	4629      	mov	r1, r5
 800be24:	220a      	movs	r2, #10
 800be26:	4658      	mov	r0, fp
 800be28:	f000 faec 	bl	800c404 <__multadd>
 800be2c:	9b00      	ldr	r3, [sp, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	4605      	mov	r5, r0
 800be32:	dc67      	bgt.n	800bf04 <_dtoa_r+0x94c>
 800be34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be36:	2b02      	cmp	r3, #2
 800be38:	dc41      	bgt.n	800bebe <_dtoa_r+0x906>
 800be3a:	e063      	b.n	800bf04 <_dtoa_r+0x94c>
 800be3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800be3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800be42:	e746      	b.n	800bcd2 <_dtoa_r+0x71a>
 800be44:	9b07      	ldr	r3, [sp, #28]
 800be46:	1e5c      	subs	r4, r3, #1
 800be48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be4a:	42a3      	cmp	r3, r4
 800be4c:	bfbf      	itttt	lt
 800be4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800be50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800be52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800be54:	1ae3      	sublt	r3, r4, r3
 800be56:	bfb4      	ite	lt
 800be58:	18d2      	addlt	r2, r2, r3
 800be5a:	1b1c      	subge	r4, r3, r4
 800be5c:	9b07      	ldr	r3, [sp, #28]
 800be5e:	bfbc      	itt	lt
 800be60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800be62:	2400      	movlt	r4, #0
 800be64:	2b00      	cmp	r3, #0
 800be66:	bfb5      	itete	lt
 800be68:	eba8 0603 	sublt.w	r6, r8, r3
 800be6c:	9b07      	ldrge	r3, [sp, #28]
 800be6e:	2300      	movlt	r3, #0
 800be70:	4646      	movge	r6, r8
 800be72:	e730      	b.n	800bcd6 <_dtoa_r+0x71e>
 800be74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800be78:	4646      	mov	r6, r8
 800be7a:	e735      	b.n	800bce8 <_dtoa_r+0x730>
 800be7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be7e:	e75c      	b.n	800bd3a <_dtoa_r+0x782>
 800be80:	2300      	movs	r3, #0
 800be82:	e788      	b.n	800bd96 <_dtoa_r+0x7de>
 800be84:	3fe00000 	.word	0x3fe00000
 800be88:	40240000 	.word	0x40240000
 800be8c:	40140000 	.word	0x40140000
 800be90:	9b02      	ldr	r3, [sp, #8]
 800be92:	e780      	b.n	800bd96 <_dtoa_r+0x7de>
 800be94:	2300      	movs	r3, #0
 800be96:	930a      	str	r3, [sp, #40]	@ 0x28
 800be98:	e782      	b.n	800bda0 <_dtoa_r+0x7e8>
 800be9a:	d099      	beq.n	800bdd0 <_dtoa_r+0x818>
 800be9c:	9a08      	ldr	r2, [sp, #32]
 800be9e:	331c      	adds	r3, #28
 800bea0:	441a      	add	r2, r3
 800bea2:	4498      	add	r8, r3
 800bea4:	441e      	add	r6, r3
 800bea6:	9208      	str	r2, [sp, #32]
 800bea8:	e792      	b.n	800bdd0 <_dtoa_r+0x818>
 800beaa:	4603      	mov	r3, r0
 800beac:	e7f6      	b.n	800be9c <_dtoa_r+0x8e4>
 800beae:	9b07      	ldr	r3, [sp, #28]
 800beb0:	9704      	str	r7, [sp, #16]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	dc20      	bgt.n	800bef8 <_dtoa_r+0x940>
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beba:	2b02      	cmp	r3, #2
 800bebc:	dd1e      	ble.n	800befc <_dtoa_r+0x944>
 800bebe:	9b00      	ldr	r3, [sp, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f47f aec0 	bne.w	800bc46 <_dtoa_r+0x68e>
 800bec6:	4621      	mov	r1, r4
 800bec8:	2205      	movs	r2, #5
 800beca:	4658      	mov	r0, fp
 800becc:	f000 fa9a 	bl	800c404 <__multadd>
 800bed0:	4601      	mov	r1, r0
 800bed2:	4604      	mov	r4, r0
 800bed4:	4648      	mov	r0, r9
 800bed6:	f000 fcf7 	bl	800c8c8 <__mcmp>
 800beda:	2800      	cmp	r0, #0
 800bedc:	f77f aeb3 	ble.w	800bc46 <_dtoa_r+0x68e>
 800bee0:	4656      	mov	r6, sl
 800bee2:	2331      	movs	r3, #49	@ 0x31
 800bee4:	f806 3b01 	strb.w	r3, [r6], #1
 800bee8:	9b04      	ldr	r3, [sp, #16]
 800beea:	3301      	adds	r3, #1
 800beec:	9304      	str	r3, [sp, #16]
 800beee:	e6ae      	b.n	800bc4e <_dtoa_r+0x696>
 800bef0:	9c07      	ldr	r4, [sp, #28]
 800bef2:	9704      	str	r7, [sp, #16]
 800bef4:	4625      	mov	r5, r4
 800bef6:	e7f3      	b.n	800bee0 <_dtoa_r+0x928>
 800bef8:	9b07      	ldr	r3, [sp, #28]
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f000 8104 	beq.w	800c10c <_dtoa_r+0xb54>
 800bf04:	2e00      	cmp	r6, #0
 800bf06:	dd05      	ble.n	800bf14 <_dtoa_r+0x95c>
 800bf08:	4629      	mov	r1, r5
 800bf0a:	4632      	mov	r2, r6
 800bf0c:	4658      	mov	r0, fp
 800bf0e:	f000 fc6f 	bl	800c7f0 <__lshift>
 800bf12:	4605      	mov	r5, r0
 800bf14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d05a      	beq.n	800bfd0 <_dtoa_r+0xa18>
 800bf1a:	6869      	ldr	r1, [r5, #4]
 800bf1c:	4658      	mov	r0, fp
 800bf1e:	f000 fa0f 	bl	800c340 <_Balloc>
 800bf22:	4606      	mov	r6, r0
 800bf24:	b928      	cbnz	r0, 800bf32 <_dtoa_r+0x97a>
 800bf26:	4b84      	ldr	r3, [pc, #528]	@ (800c138 <_dtoa_r+0xb80>)
 800bf28:	4602      	mov	r2, r0
 800bf2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bf2e:	f7ff bb5a 	b.w	800b5e6 <_dtoa_r+0x2e>
 800bf32:	692a      	ldr	r2, [r5, #16]
 800bf34:	3202      	adds	r2, #2
 800bf36:	0092      	lsls	r2, r2, #2
 800bf38:	f105 010c 	add.w	r1, r5, #12
 800bf3c:	300c      	adds	r0, #12
 800bf3e:	f7ff fa9c 	bl	800b47a <memcpy>
 800bf42:	2201      	movs	r2, #1
 800bf44:	4631      	mov	r1, r6
 800bf46:	4658      	mov	r0, fp
 800bf48:	f000 fc52 	bl	800c7f0 <__lshift>
 800bf4c:	f10a 0301 	add.w	r3, sl, #1
 800bf50:	9307      	str	r3, [sp, #28]
 800bf52:	9b00      	ldr	r3, [sp, #0]
 800bf54:	4453      	add	r3, sl
 800bf56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf58:	9b02      	ldr	r3, [sp, #8]
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	462f      	mov	r7, r5
 800bf60:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf62:	4605      	mov	r5, r0
 800bf64:	9b07      	ldr	r3, [sp, #28]
 800bf66:	4621      	mov	r1, r4
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	4648      	mov	r0, r9
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	f7ff fa99 	bl	800b4a4 <quorem>
 800bf72:	4639      	mov	r1, r7
 800bf74:	9002      	str	r0, [sp, #8]
 800bf76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf7a:	4648      	mov	r0, r9
 800bf7c:	f000 fca4 	bl	800c8c8 <__mcmp>
 800bf80:	462a      	mov	r2, r5
 800bf82:	9008      	str	r0, [sp, #32]
 800bf84:	4621      	mov	r1, r4
 800bf86:	4658      	mov	r0, fp
 800bf88:	f000 fcba 	bl	800c900 <__mdiff>
 800bf8c:	68c2      	ldr	r2, [r0, #12]
 800bf8e:	4606      	mov	r6, r0
 800bf90:	bb02      	cbnz	r2, 800bfd4 <_dtoa_r+0xa1c>
 800bf92:	4601      	mov	r1, r0
 800bf94:	4648      	mov	r0, r9
 800bf96:	f000 fc97 	bl	800c8c8 <__mcmp>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	4658      	mov	r0, fp
 800bfa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bfa2:	f000 fa0d 	bl	800c3c0 <_Bfree>
 800bfa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfaa:	9e07      	ldr	r6, [sp, #28]
 800bfac:	ea43 0102 	orr.w	r1, r3, r2
 800bfb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfb2:	4319      	orrs	r1, r3
 800bfb4:	d110      	bne.n	800bfd8 <_dtoa_r+0xa20>
 800bfb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bfba:	d029      	beq.n	800c010 <_dtoa_r+0xa58>
 800bfbc:	9b08      	ldr	r3, [sp, #32]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dd02      	ble.n	800bfc8 <_dtoa_r+0xa10>
 800bfc2:	9b02      	ldr	r3, [sp, #8]
 800bfc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bfc8:	9b00      	ldr	r3, [sp, #0]
 800bfca:	f883 8000 	strb.w	r8, [r3]
 800bfce:	e63f      	b.n	800bc50 <_dtoa_r+0x698>
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	e7bb      	b.n	800bf4c <_dtoa_r+0x994>
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	e7e1      	b.n	800bf9c <_dtoa_r+0x9e4>
 800bfd8:	9b08      	ldr	r3, [sp, #32]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	db04      	blt.n	800bfe8 <_dtoa_r+0xa30>
 800bfde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bfe0:	430b      	orrs	r3, r1
 800bfe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bfe4:	430b      	orrs	r3, r1
 800bfe6:	d120      	bne.n	800c02a <_dtoa_r+0xa72>
 800bfe8:	2a00      	cmp	r2, #0
 800bfea:	dded      	ble.n	800bfc8 <_dtoa_r+0xa10>
 800bfec:	4649      	mov	r1, r9
 800bfee:	2201      	movs	r2, #1
 800bff0:	4658      	mov	r0, fp
 800bff2:	f000 fbfd 	bl	800c7f0 <__lshift>
 800bff6:	4621      	mov	r1, r4
 800bff8:	4681      	mov	r9, r0
 800bffa:	f000 fc65 	bl	800c8c8 <__mcmp>
 800bffe:	2800      	cmp	r0, #0
 800c000:	dc03      	bgt.n	800c00a <_dtoa_r+0xa52>
 800c002:	d1e1      	bne.n	800bfc8 <_dtoa_r+0xa10>
 800c004:	f018 0f01 	tst.w	r8, #1
 800c008:	d0de      	beq.n	800bfc8 <_dtoa_r+0xa10>
 800c00a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c00e:	d1d8      	bne.n	800bfc2 <_dtoa_r+0xa0a>
 800c010:	9a00      	ldr	r2, [sp, #0]
 800c012:	2339      	movs	r3, #57	@ 0x39
 800c014:	7013      	strb	r3, [r2, #0]
 800c016:	4633      	mov	r3, r6
 800c018:	461e      	mov	r6, r3
 800c01a:	3b01      	subs	r3, #1
 800c01c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c020:	2a39      	cmp	r2, #57	@ 0x39
 800c022:	d052      	beq.n	800c0ca <_dtoa_r+0xb12>
 800c024:	3201      	adds	r2, #1
 800c026:	701a      	strb	r2, [r3, #0]
 800c028:	e612      	b.n	800bc50 <_dtoa_r+0x698>
 800c02a:	2a00      	cmp	r2, #0
 800c02c:	dd07      	ble.n	800c03e <_dtoa_r+0xa86>
 800c02e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c032:	d0ed      	beq.n	800c010 <_dtoa_r+0xa58>
 800c034:	9a00      	ldr	r2, [sp, #0]
 800c036:	f108 0301 	add.w	r3, r8, #1
 800c03a:	7013      	strb	r3, [r2, #0]
 800c03c:	e608      	b.n	800bc50 <_dtoa_r+0x698>
 800c03e:	9b07      	ldr	r3, [sp, #28]
 800c040:	9a07      	ldr	r2, [sp, #28]
 800c042:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c048:	4293      	cmp	r3, r2
 800c04a:	d028      	beq.n	800c09e <_dtoa_r+0xae6>
 800c04c:	4649      	mov	r1, r9
 800c04e:	2300      	movs	r3, #0
 800c050:	220a      	movs	r2, #10
 800c052:	4658      	mov	r0, fp
 800c054:	f000 f9d6 	bl	800c404 <__multadd>
 800c058:	42af      	cmp	r7, r5
 800c05a:	4681      	mov	r9, r0
 800c05c:	f04f 0300 	mov.w	r3, #0
 800c060:	f04f 020a 	mov.w	r2, #10
 800c064:	4639      	mov	r1, r7
 800c066:	4658      	mov	r0, fp
 800c068:	d107      	bne.n	800c07a <_dtoa_r+0xac2>
 800c06a:	f000 f9cb 	bl	800c404 <__multadd>
 800c06e:	4607      	mov	r7, r0
 800c070:	4605      	mov	r5, r0
 800c072:	9b07      	ldr	r3, [sp, #28]
 800c074:	3301      	adds	r3, #1
 800c076:	9307      	str	r3, [sp, #28]
 800c078:	e774      	b.n	800bf64 <_dtoa_r+0x9ac>
 800c07a:	f000 f9c3 	bl	800c404 <__multadd>
 800c07e:	4629      	mov	r1, r5
 800c080:	4607      	mov	r7, r0
 800c082:	2300      	movs	r3, #0
 800c084:	220a      	movs	r2, #10
 800c086:	4658      	mov	r0, fp
 800c088:	f000 f9bc 	bl	800c404 <__multadd>
 800c08c:	4605      	mov	r5, r0
 800c08e:	e7f0      	b.n	800c072 <_dtoa_r+0xaba>
 800c090:	9b00      	ldr	r3, [sp, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	bfcc      	ite	gt
 800c096:	461e      	movgt	r6, r3
 800c098:	2601      	movle	r6, #1
 800c09a:	4456      	add	r6, sl
 800c09c:	2700      	movs	r7, #0
 800c09e:	4649      	mov	r1, r9
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	4658      	mov	r0, fp
 800c0a4:	f000 fba4 	bl	800c7f0 <__lshift>
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	4681      	mov	r9, r0
 800c0ac:	f000 fc0c 	bl	800c8c8 <__mcmp>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	dcb0      	bgt.n	800c016 <_dtoa_r+0xa5e>
 800c0b4:	d102      	bne.n	800c0bc <_dtoa_r+0xb04>
 800c0b6:	f018 0f01 	tst.w	r8, #1
 800c0ba:	d1ac      	bne.n	800c016 <_dtoa_r+0xa5e>
 800c0bc:	4633      	mov	r3, r6
 800c0be:	461e      	mov	r6, r3
 800c0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0c4:	2a30      	cmp	r2, #48	@ 0x30
 800c0c6:	d0fa      	beq.n	800c0be <_dtoa_r+0xb06>
 800c0c8:	e5c2      	b.n	800bc50 <_dtoa_r+0x698>
 800c0ca:	459a      	cmp	sl, r3
 800c0cc:	d1a4      	bne.n	800c018 <_dtoa_r+0xa60>
 800c0ce:	9b04      	ldr	r3, [sp, #16]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	2331      	movs	r3, #49	@ 0x31
 800c0d6:	f88a 3000 	strb.w	r3, [sl]
 800c0da:	e5b9      	b.n	800bc50 <_dtoa_r+0x698>
 800c0dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c13c <_dtoa_r+0xb84>
 800c0e2:	b11b      	cbz	r3, 800c0ec <_dtoa_r+0xb34>
 800c0e4:	f10a 0308 	add.w	r3, sl, #8
 800c0e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c0ea:	6013      	str	r3, [r2, #0]
 800c0ec:	4650      	mov	r0, sl
 800c0ee:	b019      	add	sp, #100	@ 0x64
 800c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	f77f ae37 	ble.w	800bd6a <_dtoa_r+0x7b2>
 800c0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c100:	2001      	movs	r0, #1
 800c102:	e655      	b.n	800bdb0 <_dtoa_r+0x7f8>
 800c104:	9b00      	ldr	r3, [sp, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	f77f aed6 	ble.w	800beb8 <_dtoa_r+0x900>
 800c10c:	4656      	mov	r6, sl
 800c10e:	4621      	mov	r1, r4
 800c110:	4648      	mov	r0, r9
 800c112:	f7ff f9c7 	bl	800b4a4 <quorem>
 800c116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c11a:	f806 8b01 	strb.w	r8, [r6], #1
 800c11e:	9b00      	ldr	r3, [sp, #0]
 800c120:	eba6 020a 	sub.w	r2, r6, sl
 800c124:	4293      	cmp	r3, r2
 800c126:	ddb3      	ble.n	800c090 <_dtoa_r+0xad8>
 800c128:	4649      	mov	r1, r9
 800c12a:	2300      	movs	r3, #0
 800c12c:	220a      	movs	r2, #10
 800c12e:	4658      	mov	r0, fp
 800c130:	f000 f968 	bl	800c404 <__multadd>
 800c134:	4681      	mov	r9, r0
 800c136:	e7ea      	b.n	800c10e <_dtoa_r+0xb56>
 800c138:	0800ece1 	.word	0x0800ece1
 800c13c:	0800ec65 	.word	0x0800ec65

0800c140 <_free_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	4605      	mov	r5, r0
 800c144:	2900      	cmp	r1, #0
 800c146:	d041      	beq.n	800c1cc <_free_r+0x8c>
 800c148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c14c:	1f0c      	subs	r4, r1, #4
 800c14e:	2b00      	cmp	r3, #0
 800c150:	bfb8      	it	lt
 800c152:	18e4      	addlt	r4, r4, r3
 800c154:	f000 f8e8 	bl	800c328 <__malloc_lock>
 800c158:	4a1d      	ldr	r2, [pc, #116]	@ (800c1d0 <_free_r+0x90>)
 800c15a:	6813      	ldr	r3, [r2, #0]
 800c15c:	b933      	cbnz	r3, 800c16c <_free_r+0x2c>
 800c15e:	6063      	str	r3, [r4, #4]
 800c160:	6014      	str	r4, [r2, #0]
 800c162:	4628      	mov	r0, r5
 800c164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c168:	f000 b8e4 	b.w	800c334 <__malloc_unlock>
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	d908      	bls.n	800c182 <_free_r+0x42>
 800c170:	6820      	ldr	r0, [r4, #0]
 800c172:	1821      	adds	r1, r4, r0
 800c174:	428b      	cmp	r3, r1
 800c176:	bf01      	itttt	eq
 800c178:	6819      	ldreq	r1, [r3, #0]
 800c17a:	685b      	ldreq	r3, [r3, #4]
 800c17c:	1809      	addeq	r1, r1, r0
 800c17e:	6021      	streq	r1, [r4, #0]
 800c180:	e7ed      	b.n	800c15e <_free_r+0x1e>
 800c182:	461a      	mov	r2, r3
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	b10b      	cbz	r3, 800c18c <_free_r+0x4c>
 800c188:	42a3      	cmp	r3, r4
 800c18a:	d9fa      	bls.n	800c182 <_free_r+0x42>
 800c18c:	6811      	ldr	r1, [r2, #0]
 800c18e:	1850      	adds	r0, r2, r1
 800c190:	42a0      	cmp	r0, r4
 800c192:	d10b      	bne.n	800c1ac <_free_r+0x6c>
 800c194:	6820      	ldr	r0, [r4, #0]
 800c196:	4401      	add	r1, r0
 800c198:	1850      	adds	r0, r2, r1
 800c19a:	4283      	cmp	r3, r0
 800c19c:	6011      	str	r1, [r2, #0]
 800c19e:	d1e0      	bne.n	800c162 <_free_r+0x22>
 800c1a0:	6818      	ldr	r0, [r3, #0]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	6053      	str	r3, [r2, #4]
 800c1a6:	4408      	add	r0, r1
 800c1a8:	6010      	str	r0, [r2, #0]
 800c1aa:	e7da      	b.n	800c162 <_free_r+0x22>
 800c1ac:	d902      	bls.n	800c1b4 <_free_r+0x74>
 800c1ae:	230c      	movs	r3, #12
 800c1b0:	602b      	str	r3, [r5, #0]
 800c1b2:	e7d6      	b.n	800c162 <_free_r+0x22>
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	1821      	adds	r1, r4, r0
 800c1b8:	428b      	cmp	r3, r1
 800c1ba:	bf04      	itt	eq
 800c1bc:	6819      	ldreq	r1, [r3, #0]
 800c1be:	685b      	ldreq	r3, [r3, #4]
 800c1c0:	6063      	str	r3, [r4, #4]
 800c1c2:	bf04      	itt	eq
 800c1c4:	1809      	addeq	r1, r1, r0
 800c1c6:	6021      	streq	r1, [r4, #0]
 800c1c8:	6054      	str	r4, [r2, #4]
 800c1ca:	e7ca      	b.n	800c162 <_free_r+0x22>
 800c1cc:	bd38      	pop	{r3, r4, r5, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20001474 	.word	0x20001474

0800c1d4 <malloc>:
 800c1d4:	4b02      	ldr	r3, [pc, #8]	@ (800c1e0 <malloc+0xc>)
 800c1d6:	4601      	mov	r1, r0
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	f000 b825 	b.w	800c228 <_malloc_r>
 800c1de:	bf00      	nop
 800c1e0:	2000001c 	.word	0x2000001c

0800c1e4 <sbrk_aligned>:
 800c1e4:	b570      	push	{r4, r5, r6, lr}
 800c1e6:	4e0f      	ldr	r6, [pc, #60]	@ (800c224 <sbrk_aligned+0x40>)
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	6831      	ldr	r1, [r6, #0]
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	b911      	cbnz	r1, 800c1f6 <sbrk_aligned+0x12>
 800c1f0:	f001 ffd2 	bl	800e198 <_sbrk_r>
 800c1f4:	6030      	str	r0, [r6, #0]
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f001 ffcd 	bl	800e198 <_sbrk_r>
 800c1fe:	1c43      	adds	r3, r0, #1
 800c200:	d103      	bne.n	800c20a <sbrk_aligned+0x26>
 800c202:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c206:	4620      	mov	r0, r4
 800c208:	bd70      	pop	{r4, r5, r6, pc}
 800c20a:	1cc4      	adds	r4, r0, #3
 800c20c:	f024 0403 	bic.w	r4, r4, #3
 800c210:	42a0      	cmp	r0, r4
 800c212:	d0f8      	beq.n	800c206 <sbrk_aligned+0x22>
 800c214:	1a21      	subs	r1, r4, r0
 800c216:	4628      	mov	r0, r5
 800c218:	f001 ffbe 	bl	800e198 <_sbrk_r>
 800c21c:	3001      	adds	r0, #1
 800c21e:	d1f2      	bne.n	800c206 <sbrk_aligned+0x22>
 800c220:	e7ef      	b.n	800c202 <sbrk_aligned+0x1e>
 800c222:	bf00      	nop
 800c224:	20001470 	.word	0x20001470

0800c228 <_malloc_r>:
 800c228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c22c:	1ccd      	adds	r5, r1, #3
 800c22e:	f025 0503 	bic.w	r5, r5, #3
 800c232:	3508      	adds	r5, #8
 800c234:	2d0c      	cmp	r5, #12
 800c236:	bf38      	it	cc
 800c238:	250c      	movcc	r5, #12
 800c23a:	2d00      	cmp	r5, #0
 800c23c:	4606      	mov	r6, r0
 800c23e:	db01      	blt.n	800c244 <_malloc_r+0x1c>
 800c240:	42a9      	cmp	r1, r5
 800c242:	d904      	bls.n	800c24e <_malloc_r+0x26>
 800c244:	230c      	movs	r3, #12
 800c246:	6033      	str	r3, [r6, #0]
 800c248:	2000      	movs	r0, #0
 800c24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c24e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c324 <_malloc_r+0xfc>
 800c252:	f000 f869 	bl	800c328 <__malloc_lock>
 800c256:	f8d8 3000 	ldr.w	r3, [r8]
 800c25a:	461c      	mov	r4, r3
 800c25c:	bb44      	cbnz	r4, 800c2b0 <_malloc_r+0x88>
 800c25e:	4629      	mov	r1, r5
 800c260:	4630      	mov	r0, r6
 800c262:	f7ff ffbf 	bl	800c1e4 <sbrk_aligned>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	4604      	mov	r4, r0
 800c26a:	d158      	bne.n	800c31e <_malloc_r+0xf6>
 800c26c:	f8d8 4000 	ldr.w	r4, [r8]
 800c270:	4627      	mov	r7, r4
 800c272:	2f00      	cmp	r7, #0
 800c274:	d143      	bne.n	800c2fe <_malloc_r+0xd6>
 800c276:	2c00      	cmp	r4, #0
 800c278:	d04b      	beq.n	800c312 <_malloc_r+0xea>
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	4639      	mov	r1, r7
 800c27e:	4630      	mov	r0, r6
 800c280:	eb04 0903 	add.w	r9, r4, r3
 800c284:	f001 ff88 	bl	800e198 <_sbrk_r>
 800c288:	4581      	cmp	r9, r0
 800c28a:	d142      	bne.n	800c312 <_malloc_r+0xea>
 800c28c:	6821      	ldr	r1, [r4, #0]
 800c28e:	1a6d      	subs	r5, r5, r1
 800c290:	4629      	mov	r1, r5
 800c292:	4630      	mov	r0, r6
 800c294:	f7ff ffa6 	bl	800c1e4 <sbrk_aligned>
 800c298:	3001      	adds	r0, #1
 800c29a:	d03a      	beq.n	800c312 <_malloc_r+0xea>
 800c29c:	6823      	ldr	r3, [r4, #0]
 800c29e:	442b      	add	r3, r5
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	bb62      	cbnz	r2, 800c304 <_malloc_r+0xdc>
 800c2aa:	f8c8 7000 	str.w	r7, [r8]
 800c2ae:	e00f      	b.n	800c2d0 <_malloc_r+0xa8>
 800c2b0:	6822      	ldr	r2, [r4, #0]
 800c2b2:	1b52      	subs	r2, r2, r5
 800c2b4:	d420      	bmi.n	800c2f8 <_malloc_r+0xd0>
 800c2b6:	2a0b      	cmp	r2, #11
 800c2b8:	d917      	bls.n	800c2ea <_malloc_r+0xc2>
 800c2ba:	1961      	adds	r1, r4, r5
 800c2bc:	42a3      	cmp	r3, r4
 800c2be:	6025      	str	r5, [r4, #0]
 800c2c0:	bf18      	it	ne
 800c2c2:	6059      	strne	r1, [r3, #4]
 800c2c4:	6863      	ldr	r3, [r4, #4]
 800c2c6:	bf08      	it	eq
 800c2c8:	f8c8 1000 	streq.w	r1, [r8]
 800c2cc:	5162      	str	r2, [r4, r5]
 800c2ce:	604b      	str	r3, [r1, #4]
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	f000 f82f 	bl	800c334 <__malloc_unlock>
 800c2d6:	f104 000b 	add.w	r0, r4, #11
 800c2da:	1d23      	adds	r3, r4, #4
 800c2dc:	f020 0007 	bic.w	r0, r0, #7
 800c2e0:	1ac2      	subs	r2, r0, r3
 800c2e2:	bf1c      	itt	ne
 800c2e4:	1a1b      	subne	r3, r3, r0
 800c2e6:	50a3      	strne	r3, [r4, r2]
 800c2e8:	e7af      	b.n	800c24a <_malloc_r+0x22>
 800c2ea:	6862      	ldr	r2, [r4, #4]
 800c2ec:	42a3      	cmp	r3, r4
 800c2ee:	bf0c      	ite	eq
 800c2f0:	f8c8 2000 	streq.w	r2, [r8]
 800c2f4:	605a      	strne	r2, [r3, #4]
 800c2f6:	e7eb      	b.n	800c2d0 <_malloc_r+0xa8>
 800c2f8:	4623      	mov	r3, r4
 800c2fa:	6864      	ldr	r4, [r4, #4]
 800c2fc:	e7ae      	b.n	800c25c <_malloc_r+0x34>
 800c2fe:	463c      	mov	r4, r7
 800c300:	687f      	ldr	r7, [r7, #4]
 800c302:	e7b6      	b.n	800c272 <_malloc_r+0x4a>
 800c304:	461a      	mov	r2, r3
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	42a3      	cmp	r3, r4
 800c30a:	d1fb      	bne.n	800c304 <_malloc_r+0xdc>
 800c30c:	2300      	movs	r3, #0
 800c30e:	6053      	str	r3, [r2, #4]
 800c310:	e7de      	b.n	800c2d0 <_malloc_r+0xa8>
 800c312:	230c      	movs	r3, #12
 800c314:	6033      	str	r3, [r6, #0]
 800c316:	4630      	mov	r0, r6
 800c318:	f000 f80c 	bl	800c334 <__malloc_unlock>
 800c31c:	e794      	b.n	800c248 <_malloc_r+0x20>
 800c31e:	6005      	str	r5, [r0, #0]
 800c320:	e7d6      	b.n	800c2d0 <_malloc_r+0xa8>
 800c322:	bf00      	nop
 800c324:	20001474 	.word	0x20001474

0800c328 <__malloc_lock>:
 800c328:	4801      	ldr	r0, [pc, #4]	@ (800c330 <__malloc_lock+0x8>)
 800c32a:	f7ff b8a4 	b.w	800b476 <__retarget_lock_acquire_recursive>
 800c32e:	bf00      	nop
 800c330:	2000146c 	.word	0x2000146c

0800c334 <__malloc_unlock>:
 800c334:	4801      	ldr	r0, [pc, #4]	@ (800c33c <__malloc_unlock+0x8>)
 800c336:	f7ff b89f 	b.w	800b478 <__retarget_lock_release_recursive>
 800c33a:	bf00      	nop
 800c33c:	2000146c 	.word	0x2000146c

0800c340 <_Balloc>:
 800c340:	b570      	push	{r4, r5, r6, lr}
 800c342:	69c6      	ldr	r6, [r0, #28]
 800c344:	4604      	mov	r4, r0
 800c346:	460d      	mov	r5, r1
 800c348:	b976      	cbnz	r6, 800c368 <_Balloc+0x28>
 800c34a:	2010      	movs	r0, #16
 800c34c:	f7ff ff42 	bl	800c1d4 <malloc>
 800c350:	4602      	mov	r2, r0
 800c352:	61e0      	str	r0, [r4, #28]
 800c354:	b920      	cbnz	r0, 800c360 <_Balloc+0x20>
 800c356:	4b18      	ldr	r3, [pc, #96]	@ (800c3b8 <_Balloc+0x78>)
 800c358:	4818      	ldr	r0, [pc, #96]	@ (800c3bc <_Balloc+0x7c>)
 800c35a:	216b      	movs	r1, #107	@ 0x6b
 800c35c:	f001 ff34 	bl	800e1c8 <__assert_func>
 800c360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c364:	6006      	str	r6, [r0, #0]
 800c366:	60c6      	str	r6, [r0, #12]
 800c368:	69e6      	ldr	r6, [r4, #28]
 800c36a:	68f3      	ldr	r3, [r6, #12]
 800c36c:	b183      	cbz	r3, 800c390 <_Balloc+0x50>
 800c36e:	69e3      	ldr	r3, [r4, #28]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c376:	b9b8      	cbnz	r0, 800c3a8 <_Balloc+0x68>
 800c378:	2101      	movs	r1, #1
 800c37a:	fa01 f605 	lsl.w	r6, r1, r5
 800c37e:	1d72      	adds	r2, r6, #5
 800c380:	0092      	lsls	r2, r2, #2
 800c382:	4620      	mov	r0, r4
 800c384:	f001 ff3e 	bl	800e204 <_calloc_r>
 800c388:	b160      	cbz	r0, 800c3a4 <_Balloc+0x64>
 800c38a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c38e:	e00e      	b.n	800c3ae <_Balloc+0x6e>
 800c390:	2221      	movs	r2, #33	@ 0x21
 800c392:	2104      	movs	r1, #4
 800c394:	4620      	mov	r0, r4
 800c396:	f001 ff35 	bl	800e204 <_calloc_r>
 800c39a:	69e3      	ldr	r3, [r4, #28]
 800c39c:	60f0      	str	r0, [r6, #12]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1e4      	bne.n	800c36e <_Balloc+0x2e>
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}
 800c3a8:	6802      	ldr	r2, [r0, #0]
 800c3aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3b4:	e7f7      	b.n	800c3a6 <_Balloc+0x66>
 800c3b6:	bf00      	nop
 800c3b8:	0800ec72 	.word	0x0800ec72
 800c3bc:	0800ecf2 	.word	0x0800ecf2

0800c3c0 <_Bfree>:
 800c3c0:	b570      	push	{r4, r5, r6, lr}
 800c3c2:	69c6      	ldr	r6, [r0, #28]
 800c3c4:	4605      	mov	r5, r0
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	b976      	cbnz	r6, 800c3e8 <_Bfree+0x28>
 800c3ca:	2010      	movs	r0, #16
 800c3cc:	f7ff ff02 	bl	800c1d4 <malloc>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	61e8      	str	r0, [r5, #28]
 800c3d4:	b920      	cbnz	r0, 800c3e0 <_Bfree+0x20>
 800c3d6:	4b09      	ldr	r3, [pc, #36]	@ (800c3fc <_Bfree+0x3c>)
 800c3d8:	4809      	ldr	r0, [pc, #36]	@ (800c400 <_Bfree+0x40>)
 800c3da:	218f      	movs	r1, #143	@ 0x8f
 800c3dc:	f001 fef4 	bl	800e1c8 <__assert_func>
 800c3e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3e4:	6006      	str	r6, [r0, #0]
 800c3e6:	60c6      	str	r6, [r0, #12]
 800c3e8:	b13c      	cbz	r4, 800c3fa <_Bfree+0x3a>
 800c3ea:	69eb      	ldr	r3, [r5, #28]
 800c3ec:	6862      	ldr	r2, [r4, #4]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3f4:	6021      	str	r1, [r4, #0]
 800c3f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3fa:	bd70      	pop	{r4, r5, r6, pc}
 800c3fc:	0800ec72 	.word	0x0800ec72
 800c400:	0800ecf2 	.word	0x0800ecf2

0800c404 <__multadd>:
 800c404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c408:	690d      	ldr	r5, [r1, #16]
 800c40a:	4607      	mov	r7, r0
 800c40c:	460c      	mov	r4, r1
 800c40e:	461e      	mov	r6, r3
 800c410:	f101 0c14 	add.w	ip, r1, #20
 800c414:	2000      	movs	r0, #0
 800c416:	f8dc 3000 	ldr.w	r3, [ip]
 800c41a:	b299      	uxth	r1, r3
 800c41c:	fb02 6101 	mla	r1, r2, r1, r6
 800c420:	0c1e      	lsrs	r6, r3, #16
 800c422:	0c0b      	lsrs	r3, r1, #16
 800c424:	fb02 3306 	mla	r3, r2, r6, r3
 800c428:	b289      	uxth	r1, r1
 800c42a:	3001      	adds	r0, #1
 800c42c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c430:	4285      	cmp	r5, r0
 800c432:	f84c 1b04 	str.w	r1, [ip], #4
 800c436:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c43a:	dcec      	bgt.n	800c416 <__multadd+0x12>
 800c43c:	b30e      	cbz	r6, 800c482 <__multadd+0x7e>
 800c43e:	68a3      	ldr	r3, [r4, #8]
 800c440:	42ab      	cmp	r3, r5
 800c442:	dc19      	bgt.n	800c478 <__multadd+0x74>
 800c444:	6861      	ldr	r1, [r4, #4]
 800c446:	4638      	mov	r0, r7
 800c448:	3101      	adds	r1, #1
 800c44a:	f7ff ff79 	bl	800c340 <_Balloc>
 800c44e:	4680      	mov	r8, r0
 800c450:	b928      	cbnz	r0, 800c45e <__multadd+0x5a>
 800c452:	4602      	mov	r2, r0
 800c454:	4b0c      	ldr	r3, [pc, #48]	@ (800c488 <__multadd+0x84>)
 800c456:	480d      	ldr	r0, [pc, #52]	@ (800c48c <__multadd+0x88>)
 800c458:	21ba      	movs	r1, #186	@ 0xba
 800c45a:	f001 feb5 	bl	800e1c8 <__assert_func>
 800c45e:	6922      	ldr	r2, [r4, #16]
 800c460:	3202      	adds	r2, #2
 800c462:	f104 010c 	add.w	r1, r4, #12
 800c466:	0092      	lsls	r2, r2, #2
 800c468:	300c      	adds	r0, #12
 800c46a:	f7ff f806 	bl	800b47a <memcpy>
 800c46e:	4621      	mov	r1, r4
 800c470:	4638      	mov	r0, r7
 800c472:	f7ff ffa5 	bl	800c3c0 <_Bfree>
 800c476:	4644      	mov	r4, r8
 800c478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c47c:	3501      	adds	r5, #1
 800c47e:	615e      	str	r6, [r3, #20]
 800c480:	6125      	str	r5, [r4, #16]
 800c482:	4620      	mov	r0, r4
 800c484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c488:	0800ece1 	.word	0x0800ece1
 800c48c:	0800ecf2 	.word	0x0800ecf2

0800c490 <__s2b>:
 800c490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c494:	460c      	mov	r4, r1
 800c496:	4615      	mov	r5, r2
 800c498:	461f      	mov	r7, r3
 800c49a:	2209      	movs	r2, #9
 800c49c:	3308      	adds	r3, #8
 800c49e:	4606      	mov	r6, r0
 800c4a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	db09      	blt.n	800c4c0 <__s2b+0x30>
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f7ff ff47 	bl	800c340 <_Balloc>
 800c4b2:	b940      	cbnz	r0, 800c4c6 <__s2b+0x36>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	4b19      	ldr	r3, [pc, #100]	@ (800c51c <__s2b+0x8c>)
 800c4b8:	4819      	ldr	r0, [pc, #100]	@ (800c520 <__s2b+0x90>)
 800c4ba:	21d3      	movs	r1, #211	@ 0xd3
 800c4bc:	f001 fe84 	bl	800e1c8 <__assert_func>
 800c4c0:	0052      	lsls	r2, r2, #1
 800c4c2:	3101      	adds	r1, #1
 800c4c4:	e7f0      	b.n	800c4a8 <__s2b+0x18>
 800c4c6:	9b08      	ldr	r3, [sp, #32]
 800c4c8:	6143      	str	r3, [r0, #20]
 800c4ca:	2d09      	cmp	r5, #9
 800c4cc:	f04f 0301 	mov.w	r3, #1
 800c4d0:	6103      	str	r3, [r0, #16]
 800c4d2:	dd16      	ble.n	800c502 <__s2b+0x72>
 800c4d4:	f104 0909 	add.w	r9, r4, #9
 800c4d8:	46c8      	mov	r8, r9
 800c4da:	442c      	add	r4, r5
 800c4dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4e0:	4601      	mov	r1, r0
 800c4e2:	3b30      	subs	r3, #48	@ 0x30
 800c4e4:	220a      	movs	r2, #10
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f7ff ff8c 	bl	800c404 <__multadd>
 800c4ec:	45a0      	cmp	r8, r4
 800c4ee:	d1f5      	bne.n	800c4dc <__s2b+0x4c>
 800c4f0:	f1a5 0408 	sub.w	r4, r5, #8
 800c4f4:	444c      	add	r4, r9
 800c4f6:	1b2d      	subs	r5, r5, r4
 800c4f8:	1963      	adds	r3, r4, r5
 800c4fa:	42bb      	cmp	r3, r7
 800c4fc:	db04      	blt.n	800c508 <__s2b+0x78>
 800c4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c502:	340a      	adds	r4, #10
 800c504:	2509      	movs	r5, #9
 800c506:	e7f6      	b.n	800c4f6 <__s2b+0x66>
 800c508:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c50c:	4601      	mov	r1, r0
 800c50e:	3b30      	subs	r3, #48	@ 0x30
 800c510:	220a      	movs	r2, #10
 800c512:	4630      	mov	r0, r6
 800c514:	f7ff ff76 	bl	800c404 <__multadd>
 800c518:	e7ee      	b.n	800c4f8 <__s2b+0x68>
 800c51a:	bf00      	nop
 800c51c:	0800ece1 	.word	0x0800ece1
 800c520:	0800ecf2 	.word	0x0800ecf2

0800c524 <__hi0bits>:
 800c524:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c528:	4603      	mov	r3, r0
 800c52a:	bf36      	itet	cc
 800c52c:	0403      	lslcc	r3, r0, #16
 800c52e:	2000      	movcs	r0, #0
 800c530:	2010      	movcc	r0, #16
 800c532:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c536:	bf3c      	itt	cc
 800c538:	021b      	lslcc	r3, r3, #8
 800c53a:	3008      	addcc	r0, #8
 800c53c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c540:	bf3c      	itt	cc
 800c542:	011b      	lslcc	r3, r3, #4
 800c544:	3004      	addcc	r0, #4
 800c546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c54a:	bf3c      	itt	cc
 800c54c:	009b      	lslcc	r3, r3, #2
 800c54e:	3002      	addcc	r0, #2
 800c550:	2b00      	cmp	r3, #0
 800c552:	db05      	blt.n	800c560 <__hi0bits+0x3c>
 800c554:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c558:	f100 0001 	add.w	r0, r0, #1
 800c55c:	bf08      	it	eq
 800c55e:	2020      	moveq	r0, #32
 800c560:	4770      	bx	lr

0800c562 <__lo0bits>:
 800c562:	6803      	ldr	r3, [r0, #0]
 800c564:	4602      	mov	r2, r0
 800c566:	f013 0007 	ands.w	r0, r3, #7
 800c56a:	d00b      	beq.n	800c584 <__lo0bits+0x22>
 800c56c:	07d9      	lsls	r1, r3, #31
 800c56e:	d421      	bmi.n	800c5b4 <__lo0bits+0x52>
 800c570:	0798      	lsls	r0, r3, #30
 800c572:	bf49      	itett	mi
 800c574:	085b      	lsrmi	r3, r3, #1
 800c576:	089b      	lsrpl	r3, r3, #2
 800c578:	2001      	movmi	r0, #1
 800c57a:	6013      	strmi	r3, [r2, #0]
 800c57c:	bf5c      	itt	pl
 800c57e:	6013      	strpl	r3, [r2, #0]
 800c580:	2002      	movpl	r0, #2
 800c582:	4770      	bx	lr
 800c584:	b299      	uxth	r1, r3
 800c586:	b909      	cbnz	r1, 800c58c <__lo0bits+0x2a>
 800c588:	0c1b      	lsrs	r3, r3, #16
 800c58a:	2010      	movs	r0, #16
 800c58c:	b2d9      	uxtb	r1, r3
 800c58e:	b909      	cbnz	r1, 800c594 <__lo0bits+0x32>
 800c590:	3008      	adds	r0, #8
 800c592:	0a1b      	lsrs	r3, r3, #8
 800c594:	0719      	lsls	r1, r3, #28
 800c596:	bf04      	itt	eq
 800c598:	091b      	lsreq	r3, r3, #4
 800c59a:	3004      	addeq	r0, #4
 800c59c:	0799      	lsls	r1, r3, #30
 800c59e:	bf04      	itt	eq
 800c5a0:	089b      	lsreq	r3, r3, #2
 800c5a2:	3002      	addeq	r0, #2
 800c5a4:	07d9      	lsls	r1, r3, #31
 800c5a6:	d403      	bmi.n	800c5b0 <__lo0bits+0x4e>
 800c5a8:	085b      	lsrs	r3, r3, #1
 800c5aa:	f100 0001 	add.w	r0, r0, #1
 800c5ae:	d003      	beq.n	800c5b8 <__lo0bits+0x56>
 800c5b0:	6013      	str	r3, [r2, #0]
 800c5b2:	4770      	bx	lr
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	4770      	bx	lr
 800c5b8:	2020      	movs	r0, #32
 800c5ba:	4770      	bx	lr

0800c5bc <__i2b>:
 800c5bc:	b510      	push	{r4, lr}
 800c5be:	460c      	mov	r4, r1
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	f7ff febd 	bl	800c340 <_Balloc>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	b928      	cbnz	r0, 800c5d6 <__i2b+0x1a>
 800c5ca:	4b05      	ldr	r3, [pc, #20]	@ (800c5e0 <__i2b+0x24>)
 800c5cc:	4805      	ldr	r0, [pc, #20]	@ (800c5e4 <__i2b+0x28>)
 800c5ce:	f240 1145 	movw	r1, #325	@ 0x145
 800c5d2:	f001 fdf9 	bl	800e1c8 <__assert_func>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	6144      	str	r4, [r0, #20]
 800c5da:	6103      	str	r3, [r0, #16]
 800c5dc:	bd10      	pop	{r4, pc}
 800c5de:	bf00      	nop
 800c5e0:	0800ece1 	.word	0x0800ece1
 800c5e4:	0800ecf2 	.word	0x0800ecf2

0800c5e8 <__multiply>:
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ec:	4614      	mov	r4, r2
 800c5ee:	690a      	ldr	r2, [r1, #16]
 800c5f0:	6923      	ldr	r3, [r4, #16]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	bfa8      	it	ge
 800c5f6:	4623      	movge	r3, r4
 800c5f8:	460f      	mov	r7, r1
 800c5fa:	bfa4      	itt	ge
 800c5fc:	460c      	movge	r4, r1
 800c5fe:	461f      	movge	r7, r3
 800c600:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c604:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c608:	68a3      	ldr	r3, [r4, #8]
 800c60a:	6861      	ldr	r1, [r4, #4]
 800c60c:	eb0a 0609 	add.w	r6, sl, r9
 800c610:	42b3      	cmp	r3, r6
 800c612:	b085      	sub	sp, #20
 800c614:	bfb8      	it	lt
 800c616:	3101      	addlt	r1, #1
 800c618:	f7ff fe92 	bl	800c340 <_Balloc>
 800c61c:	b930      	cbnz	r0, 800c62c <__multiply+0x44>
 800c61e:	4602      	mov	r2, r0
 800c620:	4b44      	ldr	r3, [pc, #272]	@ (800c734 <__multiply+0x14c>)
 800c622:	4845      	ldr	r0, [pc, #276]	@ (800c738 <__multiply+0x150>)
 800c624:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c628:	f001 fdce 	bl	800e1c8 <__assert_func>
 800c62c:	f100 0514 	add.w	r5, r0, #20
 800c630:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c634:	462b      	mov	r3, r5
 800c636:	2200      	movs	r2, #0
 800c638:	4543      	cmp	r3, r8
 800c63a:	d321      	bcc.n	800c680 <__multiply+0x98>
 800c63c:	f107 0114 	add.w	r1, r7, #20
 800c640:	f104 0214 	add.w	r2, r4, #20
 800c644:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c648:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c64c:	9302      	str	r3, [sp, #8]
 800c64e:	1b13      	subs	r3, r2, r4
 800c650:	3b15      	subs	r3, #21
 800c652:	f023 0303 	bic.w	r3, r3, #3
 800c656:	3304      	adds	r3, #4
 800c658:	f104 0715 	add.w	r7, r4, #21
 800c65c:	42ba      	cmp	r2, r7
 800c65e:	bf38      	it	cc
 800c660:	2304      	movcc	r3, #4
 800c662:	9301      	str	r3, [sp, #4]
 800c664:	9b02      	ldr	r3, [sp, #8]
 800c666:	9103      	str	r1, [sp, #12]
 800c668:	428b      	cmp	r3, r1
 800c66a:	d80c      	bhi.n	800c686 <__multiply+0x9e>
 800c66c:	2e00      	cmp	r6, #0
 800c66e:	dd03      	ble.n	800c678 <__multiply+0x90>
 800c670:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c674:	2b00      	cmp	r3, #0
 800c676:	d05b      	beq.n	800c730 <__multiply+0x148>
 800c678:	6106      	str	r6, [r0, #16]
 800c67a:	b005      	add	sp, #20
 800c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c680:	f843 2b04 	str.w	r2, [r3], #4
 800c684:	e7d8      	b.n	800c638 <__multiply+0x50>
 800c686:	f8b1 a000 	ldrh.w	sl, [r1]
 800c68a:	f1ba 0f00 	cmp.w	sl, #0
 800c68e:	d024      	beq.n	800c6da <__multiply+0xf2>
 800c690:	f104 0e14 	add.w	lr, r4, #20
 800c694:	46a9      	mov	r9, r5
 800c696:	f04f 0c00 	mov.w	ip, #0
 800c69a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c69e:	f8d9 3000 	ldr.w	r3, [r9]
 800c6a2:	fa1f fb87 	uxth.w	fp, r7
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c6ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c6b0:	f8d9 7000 	ldr.w	r7, [r9]
 800c6b4:	4463      	add	r3, ip
 800c6b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6ba:	fb0a c70b 	mla	r7, sl, fp, ip
 800c6be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6c8:	4572      	cmp	r2, lr
 800c6ca:	f849 3b04 	str.w	r3, [r9], #4
 800c6ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6d2:	d8e2      	bhi.n	800c69a <__multiply+0xb2>
 800c6d4:	9b01      	ldr	r3, [sp, #4]
 800c6d6:	f845 c003 	str.w	ip, [r5, r3]
 800c6da:	9b03      	ldr	r3, [sp, #12]
 800c6dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6e0:	3104      	adds	r1, #4
 800c6e2:	f1b9 0f00 	cmp.w	r9, #0
 800c6e6:	d021      	beq.n	800c72c <__multiply+0x144>
 800c6e8:	682b      	ldr	r3, [r5, #0]
 800c6ea:	f104 0c14 	add.w	ip, r4, #20
 800c6ee:	46ae      	mov	lr, r5
 800c6f0:	f04f 0a00 	mov.w	sl, #0
 800c6f4:	f8bc b000 	ldrh.w	fp, [ip]
 800c6f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c6fc:	fb09 770b 	mla	r7, r9, fp, r7
 800c700:	4457      	add	r7, sl
 800c702:	b29b      	uxth	r3, r3
 800c704:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c708:	f84e 3b04 	str.w	r3, [lr], #4
 800c70c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c710:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c714:	f8be 3000 	ldrh.w	r3, [lr]
 800c718:	fb09 330a 	mla	r3, r9, sl, r3
 800c71c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c720:	4562      	cmp	r2, ip
 800c722:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c726:	d8e5      	bhi.n	800c6f4 <__multiply+0x10c>
 800c728:	9f01      	ldr	r7, [sp, #4]
 800c72a:	51eb      	str	r3, [r5, r7]
 800c72c:	3504      	adds	r5, #4
 800c72e:	e799      	b.n	800c664 <__multiply+0x7c>
 800c730:	3e01      	subs	r6, #1
 800c732:	e79b      	b.n	800c66c <__multiply+0x84>
 800c734:	0800ece1 	.word	0x0800ece1
 800c738:	0800ecf2 	.word	0x0800ecf2

0800c73c <__pow5mult>:
 800c73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c740:	4615      	mov	r5, r2
 800c742:	f012 0203 	ands.w	r2, r2, #3
 800c746:	4607      	mov	r7, r0
 800c748:	460e      	mov	r6, r1
 800c74a:	d007      	beq.n	800c75c <__pow5mult+0x20>
 800c74c:	4c25      	ldr	r4, [pc, #148]	@ (800c7e4 <__pow5mult+0xa8>)
 800c74e:	3a01      	subs	r2, #1
 800c750:	2300      	movs	r3, #0
 800c752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c756:	f7ff fe55 	bl	800c404 <__multadd>
 800c75a:	4606      	mov	r6, r0
 800c75c:	10ad      	asrs	r5, r5, #2
 800c75e:	d03d      	beq.n	800c7dc <__pow5mult+0xa0>
 800c760:	69fc      	ldr	r4, [r7, #28]
 800c762:	b97c      	cbnz	r4, 800c784 <__pow5mult+0x48>
 800c764:	2010      	movs	r0, #16
 800c766:	f7ff fd35 	bl	800c1d4 <malloc>
 800c76a:	4602      	mov	r2, r0
 800c76c:	61f8      	str	r0, [r7, #28]
 800c76e:	b928      	cbnz	r0, 800c77c <__pow5mult+0x40>
 800c770:	4b1d      	ldr	r3, [pc, #116]	@ (800c7e8 <__pow5mult+0xac>)
 800c772:	481e      	ldr	r0, [pc, #120]	@ (800c7ec <__pow5mult+0xb0>)
 800c774:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c778:	f001 fd26 	bl	800e1c8 <__assert_func>
 800c77c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c780:	6004      	str	r4, [r0, #0]
 800c782:	60c4      	str	r4, [r0, #12]
 800c784:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c78c:	b94c      	cbnz	r4, 800c7a2 <__pow5mult+0x66>
 800c78e:	f240 2171 	movw	r1, #625	@ 0x271
 800c792:	4638      	mov	r0, r7
 800c794:	f7ff ff12 	bl	800c5bc <__i2b>
 800c798:	2300      	movs	r3, #0
 800c79a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c79e:	4604      	mov	r4, r0
 800c7a0:	6003      	str	r3, [r0, #0]
 800c7a2:	f04f 0900 	mov.w	r9, #0
 800c7a6:	07eb      	lsls	r3, r5, #31
 800c7a8:	d50a      	bpl.n	800c7c0 <__pow5mult+0x84>
 800c7aa:	4631      	mov	r1, r6
 800c7ac:	4622      	mov	r2, r4
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	f7ff ff1a 	bl	800c5e8 <__multiply>
 800c7b4:	4631      	mov	r1, r6
 800c7b6:	4680      	mov	r8, r0
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f7ff fe01 	bl	800c3c0 <_Bfree>
 800c7be:	4646      	mov	r6, r8
 800c7c0:	106d      	asrs	r5, r5, #1
 800c7c2:	d00b      	beq.n	800c7dc <__pow5mult+0xa0>
 800c7c4:	6820      	ldr	r0, [r4, #0]
 800c7c6:	b938      	cbnz	r0, 800c7d8 <__pow5mult+0x9c>
 800c7c8:	4622      	mov	r2, r4
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f7ff ff0b 	bl	800c5e8 <__multiply>
 800c7d2:	6020      	str	r0, [r4, #0]
 800c7d4:	f8c0 9000 	str.w	r9, [r0]
 800c7d8:	4604      	mov	r4, r0
 800c7da:	e7e4      	b.n	800c7a6 <__pow5mult+0x6a>
 800c7dc:	4630      	mov	r0, r6
 800c7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7e2:	bf00      	nop
 800c7e4:	0800ed4c 	.word	0x0800ed4c
 800c7e8:	0800ec72 	.word	0x0800ec72
 800c7ec:	0800ecf2 	.word	0x0800ecf2

0800c7f0 <__lshift>:
 800c7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	6849      	ldr	r1, [r1, #4]
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7fe:	68a3      	ldr	r3, [r4, #8]
 800c800:	4607      	mov	r7, r0
 800c802:	4691      	mov	r9, r2
 800c804:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c808:	f108 0601 	add.w	r6, r8, #1
 800c80c:	42b3      	cmp	r3, r6
 800c80e:	db0b      	blt.n	800c828 <__lshift+0x38>
 800c810:	4638      	mov	r0, r7
 800c812:	f7ff fd95 	bl	800c340 <_Balloc>
 800c816:	4605      	mov	r5, r0
 800c818:	b948      	cbnz	r0, 800c82e <__lshift+0x3e>
 800c81a:	4602      	mov	r2, r0
 800c81c:	4b28      	ldr	r3, [pc, #160]	@ (800c8c0 <__lshift+0xd0>)
 800c81e:	4829      	ldr	r0, [pc, #164]	@ (800c8c4 <__lshift+0xd4>)
 800c820:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c824:	f001 fcd0 	bl	800e1c8 <__assert_func>
 800c828:	3101      	adds	r1, #1
 800c82a:	005b      	lsls	r3, r3, #1
 800c82c:	e7ee      	b.n	800c80c <__lshift+0x1c>
 800c82e:	2300      	movs	r3, #0
 800c830:	f100 0114 	add.w	r1, r0, #20
 800c834:	f100 0210 	add.w	r2, r0, #16
 800c838:	4618      	mov	r0, r3
 800c83a:	4553      	cmp	r3, sl
 800c83c:	db33      	blt.n	800c8a6 <__lshift+0xb6>
 800c83e:	6920      	ldr	r0, [r4, #16]
 800c840:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c844:	f104 0314 	add.w	r3, r4, #20
 800c848:	f019 091f 	ands.w	r9, r9, #31
 800c84c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c850:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c854:	d02b      	beq.n	800c8ae <__lshift+0xbe>
 800c856:	f1c9 0e20 	rsb	lr, r9, #32
 800c85a:	468a      	mov	sl, r1
 800c85c:	2200      	movs	r2, #0
 800c85e:	6818      	ldr	r0, [r3, #0]
 800c860:	fa00 f009 	lsl.w	r0, r0, r9
 800c864:	4310      	orrs	r0, r2
 800c866:	f84a 0b04 	str.w	r0, [sl], #4
 800c86a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c86e:	459c      	cmp	ip, r3
 800c870:	fa22 f20e 	lsr.w	r2, r2, lr
 800c874:	d8f3      	bhi.n	800c85e <__lshift+0x6e>
 800c876:	ebac 0304 	sub.w	r3, ip, r4
 800c87a:	3b15      	subs	r3, #21
 800c87c:	f023 0303 	bic.w	r3, r3, #3
 800c880:	3304      	adds	r3, #4
 800c882:	f104 0015 	add.w	r0, r4, #21
 800c886:	4584      	cmp	ip, r0
 800c888:	bf38      	it	cc
 800c88a:	2304      	movcc	r3, #4
 800c88c:	50ca      	str	r2, [r1, r3]
 800c88e:	b10a      	cbz	r2, 800c894 <__lshift+0xa4>
 800c890:	f108 0602 	add.w	r6, r8, #2
 800c894:	3e01      	subs	r6, #1
 800c896:	4638      	mov	r0, r7
 800c898:	612e      	str	r6, [r5, #16]
 800c89a:	4621      	mov	r1, r4
 800c89c:	f7ff fd90 	bl	800c3c0 <_Bfree>
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	e7c5      	b.n	800c83a <__lshift+0x4a>
 800c8ae:	3904      	subs	r1, #4
 800c8b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8b8:	459c      	cmp	ip, r3
 800c8ba:	d8f9      	bhi.n	800c8b0 <__lshift+0xc0>
 800c8bc:	e7ea      	b.n	800c894 <__lshift+0xa4>
 800c8be:	bf00      	nop
 800c8c0:	0800ece1 	.word	0x0800ece1
 800c8c4:	0800ecf2 	.word	0x0800ecf2

0800c8c8 <__mcmp>:
 800c8c8:	690a      	ldr	r2, [r1, #16]
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	6900      	ldr	r0, [r0, #16]
 800c8ce:	1a80      	subs	r0, r0, r2
 800c8d0:	b530      	push	{r4, r5, lr}
 800c8d2:	d10e      	bne.n	800c8f2 <__mcmp+0x2a>
 800c8d4:	3314      	adds	r3, #20
 800c8d6:	3114      	adds	r1, #20
 800c8d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8e8:	4295      	cmp	r5, r2
 800c8ea:	d003      	beq.n	800c8f4 <__mcmp+0x2c>
 800c8ec:	d205      	bcs.n	800c8fa <__mcmp+0x32>
 800c8ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8f2:	bd30      	pop	{r4, r5, pc}
 800c8f4:	42a3      	cmp	r3, r4
 800c8f6:	d3f3      	bcc.n	800c8e0 <__mcmp+0x18>
 800c8f8:	e7fb      	b.n	800c8f2 <__mcmp+0x2a>
 800c8fa:	2001      	movs	r0, #1
 800c8fc:	e7f9      	b.n	800c8f2 <__mcmp+0x2a>
	...

0800c900 <__mdiff>:
 800c900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	4689      	mov	r9, r1
 800c906:	4606      	mov	r6, r0
 800c908:	4611      	mov	r1, r2
 800c90a:	4648      	mov	r0, r9
 800c90c:	4614      	mov	r4, r2
 800c90e:	f7ff ffdb 	bl	800c8c8 <__mcmp>
 800c912:	1e05      	subs	r5, r0, #0
 800c914:	d112      	bne.n	800c93c <__mdiff+0x3c>
 800c916:	4629      	mov	r1, r5
 800c918:	4630      	mov	r0, r6
 800c91a:	f7ff fd11 	bl	800c340 <_Balloc>
 800c91e:	4602      	mov	r2, r0
 800c920:	b928      	cbnz	r0, 800c92e <__mdiff+0x2e>
 800c922:	4b3f      	ldr	r3, [pc, #252]	@ (800ca20 <__mdiff+0x120>)
 800c924:	f240 2137 	movw	r1, #567	@ 0x237
 800c928:	483e      	ldr	r0, [pc, #248]	@ (800ca24 <__mdiff+0x124>)
 800c92a:	f001 fc4d 	bl	800e1c8 <__assert_func>
 800c92e:	2301      	movs	r3, #1
 800c930:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c934:	4610      	mov	r0, r2
 800c936:	b003      	add	sp, #12
 800c938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93c:	bfbc      	itt	lt
 800c93e:	464b      	movlt	r3, r9
 800c940:	46a1      	movlt	r9, r4
 800c942:	4630      	mov	r0, r6
 800c944:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c948:	bfba      	itte	lt
 800c94a:	461c      	movlt	r4, r3
 800c94c:	2501      	movlt	r5, #1
 800c94e:	2500      	movge	r5, #0
 800c950:	f7ff fcf6 	bl	800c340 <_Balloc>
 800c954:	4602      	mov	r2, r0
 800c956:	b918      	cbnz	r0, 800c960 <__mdiff+0x60>
 800c958:	4b31      	ldr	r3, [pc, #196]	@ (800ca20 <__mdiff+0x120>)
 800c95a:	f240 2145 	movw	r1, #581	@ 0x245
 800c95e:	e7e3      	b.n	800c928 <__mdiff+0x28>
 800c960:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c964:	6926      	ldr	r6, [r4, #16]
 800c966:	60c5      	str	r5, [r0, #12]
 800c968:	f109 0310 	add.w	r3, r9, #16
 800c96c:	f109 0514 	add.w	r5, r9, #20
 800c970:	f104 0e14 	add.w	lr, r4, #20
 800c974:	f100 0b14 	add.w	fp, r0, #20
 800c978:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c97c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c980:	9301      	str	r3, [sp, #4]
 800c982:	46d9      	mov	r9, fp
 800c984:	f04f 0c00 	mov.w	ip, #0
 800c988:	9b01      	ldr	r3, [sp, #4]
 800c98a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c98e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	fa1f f38a 	uxth.w	r3, sl
 800c998:	4619      	mov	r1, r3
 800c99a:	b283      	uxth	r3, r0
 800c99c:	1acb      	subs	r3, r1, r3
 800c99e:	0c00      	lsrs	r0, r0, #16
 800c9a0:	4463      	add	r3, ip
 800c9a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c9a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c9b0:	4576      	cmp	r6, lr
 800c9b2:	f849 3b04 	str.w	r3, [r9], #4
 800c9b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9ba:	d8e5      	bhi.n	800c988 <__mdiff+0x88>
 800c9bc:	1b33      	subs	r3, r6, r4
 800c9be:	3b15      	subs	r3, #21
 800c9c0:	f023 0303 	bic.w	r3, r3, #3
 800c9c4:	3415      	adds	r4, #21
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	42a6      	cmp	r6, r4
 800c9ca:	bf38      	it	cc
 800c9cc:	2304      	movcc	r3, #4
 800c9ce:	441d      	add	r5, r3
 800c9d0:	445b      	add	r3, fp
 800c9d2:	461e      	mov	r6, r3
 800c9d4:	462c      	mov	r4, r5
 800c9d6:	4544      	cmp	r4, r8
 800c9d8:	d30e      	bcc.n	800c9f8 <__mdiff+0xf8>
 800c9da:	f108 0103 	add.w	r1, r8, #3
 800c9de:	1b49      	subs	r1, r1, r5
 800c9e0:	f021 0103 	bic.w	r1, r1, #3
 800c9e4:	3d03      	subs	r5, #3
 800c9e6:	45a8      	cmp	r8, r5
 800c9e8:	bf38      	it	cc
 800c9ea:	2100      	movcc	r1, #0
 800c9ec:	440b      	add	r3, r1
 800c9ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9f2:	b191      	cbz	r1, 800ca1a <__mdiff+0x11a>
 800c9f4:	6117      	str	r7, [r2, #16]
 800c9f6:	e79d      	b.n	800c934 <__mdiff+0x34>
 800c9f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9fc:	46e6      	mov	lr, ip
 800c9fe:	0c08      	lsrs	r0, r1, #16
 800ca00:	fa1c fc81 	uxtah	ip, ip, r1
 800ca04:	4471      	add	r1, lr
 800ca06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca0a:	b289      	uxth	r1, r1
 800ca0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca10:	f846 1b04 	str.w	r1, [r6], #4
 800ca14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca18:	e7dd      	b.n	800c9d6 <__mdiff+0xd6>
 800ca1a:	3f01      	subs	r7, #1
 800ca1c:	e7e7      	b.n	800c9ee <__mdiff+0xee>
 800ca1e:	bf00      	nop
 800ca20:	0800ece1 	.word	0x0800ece1
 800ca24:	0800ecf2 	.word	0x0800ecf2

0800ca28 <__ulp>:
 800ca28:	b082      	sub	sp, #8
 800ca2a:	ed8d 0b00 	vstr	d0, [sp]
 800ca2e:	9a01      	ldr	r2, [sp, #4]
 800ca30:	4b0f      	ldr	r3, [pc, #60]	@ (800ca70 <__ulp+0x48>)
 800ca32:	4013      	ands	r3, r2
 800ca34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dc08      	bgt.n	800ca4e <__ulp+0x26>
 800ca3c:	425b      	negs	r3, r3
 800ca3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ca42:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca46:	da04      	bge.n	800ca52 <__ulp+0x2a>
 800ca48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ca4c:	4113      	asrs	r3, r2
 800ca4e:	2200      	movs	r2, #0
 800ca50:	e008      	b.n	800ca64 <__ulp+0x3c>
 800ca52:	f1a2 0314 	sub.w	r3, r2, #20
 800ca56:	2b1e      	cmp	r3, #30
 800ca58:	bfda      	itte	le
 800ca5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ca5e:	40da      	lsrle	r2, r3
 800ca60:	2201      	movgt	r2, #1
 800ca62:	2300      	movs	r3, #0
 800ca64:	4619      	mov	r1, r3
 800ca66:	4610      	mov	r0, r2
 800ca68:	ec41 0b10 	vmov	d0, r0, r1
 800ca6c:	b002      	add	sp, #8
 800ca6e:	4770      	bx	lr
 800ca70:	7ff00000 	.word	0x7ff00000

0800ca74 <__b2d>:
 800ca74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca78:	6906      	ldr	r6, [r0, #16]
 800ca7a:	f100 0814 	add.w	r8, r0, #20
 800ca7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ca82:	1f37      	subs	r7, r6, #4
 800ca84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ca88:	4610      	mov	r0, r2
 800ca8a:	f7ff fd4b 	bl	800c524 <__hi0bits>
 800ca8e:	f1c0 0320 	rsb	r3, r0, #32
 800ca92:	280a      	cmp	r0, #10
 800ca94:	600b      	str	r3, [r1, #0]
 800ca96:	491b      	ldr	r1, [pc, #108]	@ (800cb04 <__b2d+0x90>)
 800ca98:	dc15      	bgt.n	800cac6 <__b2d+0x52>
 800ca9a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ca9e:	fa22 f30c 	lsr.w	r3, r2, ip
 800caa2:	45b8      	cmp	r8, r7
 800caa4:	ea43 0501 	orr.w	r5, r3, r1
 800caa8:	bf34      	ite	cc
 800caaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800caae:	2300      	movcs	r3, #0
 800cab0:	3015      	adds	r0, #21
 800cab2:	fa02 f000 	lsl.w	r0, r2, r0
 800cab6:	fa23 f30c 	lsr.w	r3, r3, ip
 800caba:	4303      	orrs	r3, r0
 800cabc:	461c      	mov	r4, r3
 800cabe:	ec45 4b10 	vmov	d0, r4, r5
 800cac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac6:	45b8      	cmp	r8, r7
 800cac8:	bf3a      	itte	cc
 800caca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cace:	f1a6 0708 	subcc.w	r7, r6, #8
 800cad2:	2300      	movcs	r3, #0
 800cad4:	380b      	subs	r0, #11
 800cad6:	d012      	beq.n	800cafe <__b2d+0x8a>
 800cad8:	f1c0 0120 	rsb	r1, r0, #32
 800cadc:	fa23 f401 	lsr.w	r4, r3, r1
 800cae0:	4082      	lsls	r2, r0
 800cae2:	4322      	orrs	r2, r4
 800cae4:	4547      	cmp	r7, r8
 800cae6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800caea:	bf8c      	ite	hi
 800caec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800caf0:	2200      	movls	r2, #0
 800caf2:	4083      	lsls	r3, r0
 800caf4:	40ca      	lsrs	r2, r1
 800caf6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cafa:	4313      	orrs	r3, r2
 800cafc:	e7de      	b.n	800cabc <__b2d+0x48>
 800cafe:	ea42 0501 	orr.w	r5, r2, r1
 800cb02:	e7db      	b.n	800cabc <__b2d+0x48>
 800cb04:	3ff00000 	.word	0x3ff00000

0800cb08 <__d2b>:
 800cb08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb0c:	460f      	mov	r7, r1
 800cb0e:	2101      	movs	r1, #1
 800cb10:	ec59 8b10 	vmov	r8, r9, d0
 800cb14:	4616      	mov	r6, r2
 800cb16:	f7ff fc13 	bl	800c340 <_Balloc>
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	b930      	cbnz	r0, 800cb2c <__d2b+0x24>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	4b23      	ldr	r3, [pc, #140]	@ (800cbb0 <__d2b+0xa8>)
 800cb22:	4824      	ldr	r0, [pc, #144]	@ (800cbb4 <__d2b+0xac>)
 800cb24:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb28:	f001 fb4e 	bl	800e1c8 <__assert_func>
 800cb2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb34:	b10d      	cbz	r5, 800cb3a <__d2b+0x32>
 800cb36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb3a:	9301      	str	r3, [sp, #4]
 800cb3c:	f1b8 0300 	subs.w	r3, r8, #0
 800cb40:	d023      	beq.n	800cb8a <__d2b+0x82>
 800cb42:	4668      	mov	r0, sp
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	f7ff fd0c 	bl	800c562 <__lo0bits>
 800cb4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb4e:	b1d0      	cbz	r0, 800cb86 <__d2b+0x7e>
 800cb50:	f1c0 0320 	rsb	r3, r0, #32
 800cb54:	fa02 f303 	lsl.w	r3, r2, r3
 800cb58:	430b      	orrs	r3, r1
 800cb5a:	40c2      	lsrs	r2, r0
 800cb5c:	6163      	str	r3, [r4, #20]
 800cb5e:	9201      	str	r2, [sp, #4]
 800cb60:	9b01      	ldr	r3, [sp, #4]
 800cb62:	61a3      	str	r3, [r4, #24]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	bf0c      	ite	eq
 800cb68:	2201      	moveq	r2, #1
 800cb6a:	2202      	movne	r2, #2
 800cb6c:	6122      	str	r2, [r4, #16]
 800cb6e:	b1a5      	cbz	r5, 800cb9a <__d2b+0x92>
 800cb70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cb74:	4405      	add	r5, r0
 800cb76:	603d      	str	r5, [r7, #0]
 800cb78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cb7c:	6030      	str	r0, [r6, #0]
 800cb7e:	4620      	mov	r0, r4
 800cb80:	b003      	add	sp, #12
 800cb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb86:	6161      	str	r1, [r4, #20]
 800cb88:	e7ea      	b.n	800cb60 <__d2b+0x58>
 800cb8a:	a801      	add	r0, sp, #4
 800cb8c:	f7ff fce9 	bl	800c562 <__lo0bits>
 800cb90:	9b01      	ldr	r3, [sp, #4]
 800cb92:	6163      	str	r3, [r4, #20]
 800cb94:	3020      	adds	r0, #32
 800cb96:	2201      	movs	r2, #1
 800cb98:	e7e8      	b.n	800cb6c <__d2b+0x64>
 800cb9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cba2:	6038      	str	r0, [r7, #0]
 800cba4:	6918      	ldr	r0, [r3, #16]
 800cba6:	f7ff fcbd 	bl	800c524 <__hi0bits>
 800cbaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cbae:	e7e5      	b.n	800cb7c <__d2b+0x74>
 800cbb0:	0800ece1 	.word	0x0800ece1
 800cbb4:	0800ecf2 	.word	0x0800ecf2

0800cbb8 <__ratio>:
 800cbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbbc:	b085      	sub	sp, #20
 800cbbe:	e9cd 1000 	strd	r1, r0, [sp]
 800cbc2:	a902      	add	r1, sp, #8
 800cbc4:	f7ff ff56 	bl	800ca74 <__b2d>
 800cbc8:	9800      	ldr	r0, [sp, #0]
 800cbca:	a903      	add	r1, sp, #12
 800cbcc:	ec55 4b10 	vmov	r4, r5, d0
 800cbd0:	f7ff ff50 	bl	800ca74 <__b2d>
 800cbd4:	9b01      	ldr	r3, [sp, #4]
 800cbd6:	6919      	ldr	r1, [r3, #16]
 800cbd8:	9b00      	ldr	r3, [sp, #0]
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	1ac9      	subs	r1, r1, r3
 800cbde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cbe2:	1a9b      	subs	r3, r3, r2
 800cbe4:	ec5b ab10 	vmov	sl, fp, d0
 800cbe8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	bfce      	itee	gt
 800cbf0:	462a      	movgt	r2, r5
 800cbf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cbf6:	465a      	movle	r2, fp
 800cbf8:	462f      	mov	r7, r5
 800cbfa:	46d9      	mov	r9, fp
 800cbfc:	bfcc      	ite	gt
 800cbfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cc02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cc06:	464b      	mov	r3, r9
 800cc08:	4652      	mov	r2, sl
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	4639      	mov	r1, r7
 800cc0e:	f7f3 fe45 	bl	800089c <__aeabi_ddiv>
 800cc12:	ec41 0b10 	vmov	d0, r0, r1
 800cc16:	b005      	add	sp, #20
 800cc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc1c <__copybits>:
 800cc1c:	3901      	subs	r1, #1
 800cc1e:	b570      	push	{r4, r5, r6, lr}
 800cc20:	1149      	asrs	r1, r1, #5
 800cc22:	6914      	ldr	r4, [r2, #16]
 800cc24:	3101      	adds	r1, #1
 800cc26:	f102 0314 	add.w	r3, r2, #20
 800cc2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc32:	1f05      	subs	r5, r0, #4
 800cc34:	42a3      	cmp	r3, r4
 800cc36:	d30c      	bcc.n	800cc52 <__copybits+0x36>
 800cc38:	1aa3      	subs	r3, r4, r2
 800cc3a:	3b11      	subs	r3, #17
 800cc3c:	f023 0303 	bic.w	r3, r3, #3
 800cc40:	3211      	adds	r2, #17
 800cc42:	42a2      	cmp	r2, r4
 800cc44:	bf88      	it	hi
 800cc46:	2300      	movhi	r3, #0
 800cc48:	4418      	add	r0, r3
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	4288      	cmp	r0, r1
 800cc4e:	d305      	bcc.n	800cc5c <__copybits+0x40>
 800cc50:	bd70      	pop	{r4, r5, r6, pc}
 800cc52:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc56:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc5a:	e7eb      	b.n	800cc34 <__copybits+0x18>
 800cc5c:	f840 3b04 	str.w	r3, [r0], #4
 800cc60:	e7f4      	b.n	800cc4c <__copybits+0x30>

0800cc62 <__any_on>:
 800cc62:	f100 0214 	add.w	r2, r0, #20
 800cc66:	6900      	ldr	r0, [r0, #16]
 800cc68:	114b      	asrs	r3, r1, #5
 800cc6a:	4298      	cmp	r0, r3
 800cc6c:	b510      	push	{r4, lr}
 800cc6e:	db11      	blt.n	800cc94 <__any_on+0x32>
 800cc70:	dd0a      	ble.n	800cc88 <__any_on+0x26>
 800cc72:	f011 011f 	ands.w	r1, r1, #31
 800cc76:	d007      	beq.n	800cc88 <__any_on+0x26>
 800cc78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc7c:	fa24 f001 	lsr.w	r0, r4, r1
 800cc80:	fa00 f101 	lsl.w	r1, r0, r1
 800cc84:	428c      	cmp	r4, r1
 800cc86:	d10b      	bne.n	800cca0 <__any_on+0x3e>
 800cc88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d803      	bhi.n	800cc98 <__any_on+0x36>
 800cc90:	2000      	movs	r0, #0
 800cc92:	bd10      	pop	{r4, pc}
 800cc94:	4603      	mov	r3, r0
 800cc96:	e7f7      	b.n	800cc88 <__any_on+0x26>
 800cc98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc9c:	2900      	cmp	r1, #0
 800cc9e:	d0f5      	beq.n	800cc8c <__any_on+0x2a>
 800cca0:	2001      	movs	r0, #1
 800cca2:	e7f6      	b.n	800cc92 <__any_on+0x30>

0800cca4 <sulp>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	4604      	mov	r4, r0
 800cca8:	460d      	mov	r5, r1
 800ccaa:	ec45 4b10 	vmov	d0, r4, r5
 800ccae:	4616      	mov	r6, r2
 800ccb0:	f7ff feba 	bl	800ca28 <__ulp>
 800ccb4:	ec51 0b10 	vmov	r0, r1, d0
 800ccb8:	b17e      	cbz	r6, 800ccda <sulp+0x36>
 800ccba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ccbe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	dd09      	ble.n	800ccda <sulp+0x36>
 800ccc6:	051b      	lsls	r3, r3, #20
 800ccc8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cccc:	2400      	movs	r4, #0
 800ccce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ccd2:	4622      	mov	r2, r4
 800ccd4:	462b      	mov	r3, r5
 800ccd6:	f7f3 fcb7 	bl	8000648 <__aeabi_dmul>
 800ccda:	ec41 0b10 	vmov	d0, r0, r1
 800ccde:	bd70      	pop	{r4, r5, r6, pc}

0800cce0 <_strtod_l>:
 800cce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	b09f      	sub	sp, #124	@ 0x7c
 800cce6:	460c      	mov	r4, r1
 800cce8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ccea:	2200      	movs	r2, #0
 800ccec:	921a      	str	r2, [sp, #104]	@ 0x68
 800ccee:	9005      	str	r0, [sp, #20]
 800ccf0:	f04f 0a00 	mov.w	sl, #0
 800ccf4:	f04f 0b00 	mov.w	fp, #0
 800ccf8:	460a      	mov	r2, r1
 800ccfa:	9219      	str	r2, [sp, #100]	@ 0x64
 800ccfc:	7811      	ldrb	r1, [r2, #0]
 800ccfe:	292b      	cmp	r1, #43	@ 0x2b
 800cd00:	d04a      	beq.n	800cd98 <_strtod_l+0xb8>
 800cd02:	d838      	bhi.n	800cd76 <_strtod_l+0x96>
 800cd04:	290d      	cmp	r1, #13
 800cd06:	d832      	bhi.n	800cd6e <_strtod_l+0x8e>
 800cd08:	2908      	cmp	r1, #8
 800cd0a:	d832      	bhi.n	800cd72 <_strtod_l+0x92>
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	d03b      	beq.n	800cd88 <_strtod_l+0xa8>
 800cd10:	2200      	movs	r2, #0
 800cd12:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cd14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cd16:	782a      	ldrb	r2, [r5, #0]
 800cd18:	2a30      	cmp	r2, #48	@ 0x30
 800cd1a:	f040 80b3 	bne.w	800ce84 <_strtod_l+0x1a4>
 800cd1e:	786a      	ldrb	r2, [r5, #1]
 800cd20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cd24:	2a58      	cmp	r2, #88	@ 0x58
 800cd26:	d16e      	bne.n	800ce06 <_strtod_l+0x126>
 800cd28:	9302      	str	r3, [sp, #8]
 800cd2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd2c:	9301      	str	r3, [sp, #4]
 800cd2e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	4a8e      	ldr	r2, [pc, #568]	@ (800cf6c <_strtod_l+0x28c>)
 800cd34:	9805      	ldr	r0, [sp, #20]
 800cd36:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cd38:	a919      	add	r1, sp, #100	@ 0x64
 800cd3a:	f001 fadf 	bl	800e2fc <__gethex>
 800cd3e:	f010 060f 	ands.w	r6, r0, #15
 800cd42:	4604      	mov	r4, r0
 800cd44:	d005      	beq.n	800cd52 <_strtod_l+0x72>
 800cd46:	2e06      	cmp	r6, #6
 800cd48:	d128      	bne.n	800cd9c <_strtod_l+0xbc>
 800cd4a:	3501      	adds	r5, #1
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cd50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f040 858e 	bne.w	800d876 <_strtod_l+0xb96>
 800cd5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd5c:	b1cb      	cbz	r3, 800cd92 <_strtod_l+0xb2>
 800cd5e:	4652      	mov	r2, sl
 800cd60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cd64:	ec43 2b10 	vmov	d0, r2, r3
 800cd68:	b01f      	add	sp, #124	@ 0x7c
 800cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd6e:	2920      	cmp	r1, #32
 800cd70:	d1ce      	bne.n	800cd10 <_strtod_l+0x30>
 800cd72:	3201      	adds	r2, #1
 800cd74:	e7c1      	b.n	800ccfa <_strtod_l+0x1a>
 800cd76:	292d      	cmp	r1, #45	@ 0x2d
 800cd78:	d1ca      	bne.n	800cd10 <_strtod_l+0x30>
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cd7e:	1c51      	adds	r1, r2, #1
 800cd80:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd82:	7852      	ldrb	r2, [r2, #1]
 800cd84:	2a00      	cmp	r2, #0
 800cd86:	d1c5      	bne.n	800cd14 <_strtod_l+0x34>
 800cd88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd8a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f040 8570 	bne.w	800d872 <_strtod_l+0xb92>
 800cd92:	4652      	mov	r2, sl
 800cd94:	465b      	mov	r3, fp
 800cd96:	e7e5      	b.n	800cd64 <_strtod_l+0x84>
 800cd98:	2100      	movs	r1, #0
 800cd9a:	e7ef      	b.n	800cd7c <_strtod_l+0x9c>
 800cd9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cd9e:	b13a      	cbz	r2, 800cdb0 <_strtod_l+0xd0>
 800cda0:	2135      	movs	r1, #53	@ 0x35
 800cda2:	a81c      	add	r0, sp, #112	@ 0x70
 800cda4:	f7ff ff3a 	bl	800cc1c <__copybits>
 800cda8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdaa:	9805      	ldr	r0, [sp, #20]
 800cdac:	f7ff fb08 	bl	800c3c0 <_Bfree>
 800cdb0:	3e01      	subs	r6, #1
 800cdb2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cdb4:	2e04      	cmp	r6, #4
 800cdb6:	d806      	bhi.n	800cdc6 <_strtod_l+0xe6>
 800cdb8:	e8df f006 	tbb	[pc, r6]
 800cdbc:	201d0314 	.word	0x201d0314
 800cdc0:	14          	.byte	0x14
 800cdc1:	00          	.byte	0x00
 800cdc2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cdc6:	05e1      	lsls	r1, r4, #23
 800cdc8:	bf48      	it	mi
 800cdca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cdce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cdd2:	0d1b      	lsrs	r3, r3, #20
 800cdd4:	051b      	lsls	r3, r3, #20
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1bb      	bne.n	800cd52 <_strtod_l+0x72>
 800cdda:	f7fe fb21 	bl	800b420 <__errno>
 800cdde:	2322      	movs	r3, #34	@ 0x22
 800cde0:	6003      	str	r3, [r0, #0]
 800cde2:	e7b6      	b.n	800cd52 <_strtod_l+0x72>
 800cde4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cde8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cdec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cdf0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cdf4:	e7e7      	b.n	800cdc6 <_strtod_l+0xe6>
 800cdf6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cf74 <_strtod_l+0x294>
 800cdfa:	e7e4      	b.n	800cdc6 <_strtod_l+0xe6>
 800cdfc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ce00:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ce04:	e7df      	b.n	800cdc6 <_strtod_l+0xe6>
 800ce06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	2b30      	cmp	r3, #48	@ 0x30
 800ce10:	d0f9      	beq.n	800ce06 <_strtod_l+0x126>
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d09d      	beq.n	800cd52 <_strtod_l+0x72>
 800ce16:	2301      	movs	r3, #1
 800ce18:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce1e:	2300      	movs	r3, #0
 800ce20:	9308      	str	r3, [sp, #32]
 800ce22:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce24:	461f      	mov	r7, r3
 800ce26:	220a      	movs	r2, #10
 800ce28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ce2a:	7805      	ldrb	r5, [r0, #0]
 800ce2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ce30:	b2d9      	uxtb	r1, r3
 800ce32:	2909      	cmp	r1, #9
 800ce34:	d928      	bls.n	800ce88 <_strtod_l+0x1a8>
 800ce36:	494e      	ldr	r1, [pc, #312]	@ (800cf70 <_strtod_l+0x290>)
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f001 f979 	bl	800e130 <strncmp>
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	d032      	beq.n	800cea8 <_strtod_l+0x1c8>
 800ce42:	2000      	movs	r0, #0
 800ce44:	462a      	mov	r2, r5
 800ce46:	4681      	mov	r9, r0
 800ce48:	463d      	mov	r5, r7
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2a65      	cmp	r2, #101	@ 0x65
 800ce4e:	d001      	beq.n	800ce54 <_strtod_l+0x174>
 800ce50:	2a45      	cmp	r2, #69	@ 0x45
 800ce52:	d114      	bne.n	800ce7e <_strtod_l+0x19e>
 800ce54:	b91d      	cbnz	r5, 800ce5e <_strtod_l+0x17e>
 800ce56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce58:	4302      	orrs	r2, r0
 800ce5a:	d095      	beq.n	800cd88 <_strtod_l+0xa8>
 800ce5c:	2500      	movs	r5, #0
 800ce5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ce60:	1c62      	adds	r2, r4, #1
 800ce62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce64:	7862      	ldrb	r2, [r4, #1]
 800ce66:	2a2b      	cmp	r2, #43	@ 0x2b
 800ce68:	d077      	beq.n	800cf5a <_strtod_l+0x27a>
 800ce6a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ce6c:	d07b      	beq.n	800cf66 <_strtod_l+0x286>
 800ce6e:	f04f 0c00 	mov.w	ip, #0
 800ce72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ce76:	2909      	cmp	r1, #9
 800ce78:	f240 8082 	bls.w	800cf80 <_strtod_l+0x2a0>
 800ce7c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ce7e:	f04f 0800 	mov.w	r8, #0
 800ce82:	e0a2      	b.n	800cfca <_strtod_l+0x2ea>
 800ce84:	2300      	movs	r3, #0
 800ce86:	e7c7      	b.n	800ce18 <_strtod_l+0x138>
 800ce88:	2f08      	cmp	r7, #8
 800ce8a:	bfd5      	itete	le
 800ce8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ce8e:	9908      	ldrgt	r1, [sp, #32]
 800ce90:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce94:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ce98:	f100 0001 	add.w	r0, r0, #1
 800ce9c:	bfd4      	ite	le
 800ce9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cea0:	9308      	strgt	r3, [sp, #32]
 800cea2:	3701      	adds	r7, #1
 800cea4:	9019      	str	r0, [sp, #100]	@ 0x64
 800cea6:	e7bf      	b.n	800ce28 <_strtod_l+0x148>
 800cea8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ceaa:	1c5a      	adds	r2, r3, #1
 800ceac:	9219      	str	r2, [sp, #100]	@ 0x64
 800ceae:	785a      	ldrb	r2, [r3, #1]
 800ceb0:	b37f      	cbz	r7, 800cf12 <_strtod_l+0x232>
 800ceb2:	4681      	mov	r9, r0
 800ceb4:	463d      	mov	r5, r7
 800ceb6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ceba:	2b09      	cmp	r3, #9
 800cebc:	d912      	bls.n	800cee4 <_strtod_l+0x204>
 800cebe:	2301      	movs	r3, #1
 800cec0:	e7c4      	b.n	800ce4c <_strtod_l+0x16c>
 800cec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cec4:	1c5a      	adds	r2, r3, #1
 800cec6:	9219      	str	r2, [sp, #100]	@ 0x64
 800cec8:	785a      	ldrb	r2, [r3, #1]
 800ceca:	3001      	adds	r0, #1
 800cecc:	2a30      	cmp	r2, #48	@ 0x30
 800cece:	d0f8      	beq.n	800cec2 <_strtod_l+0x1e2>
 800ced0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ced4:	2b08      	cmp	r3, #8
 800ced6:	f200 84d3 	bhi.w	800d880 <_strtod_l+0xba0>
 800ceda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cedc:	930c      	str	r3, [sp, #48]	@ 0x30
 800cede:	4681      	mov	r9, r0
 800cee0:	2000      	movs	r0, #0
 800cee2:	4605      	mov	r5, r0
 800cee4:	3a30      	subs	r2, #48	@ 0x30
 800cee6:	f100 0301 	add.w	r3, r0, #1
 800ceea:	d02a      	beq.n	800cf42 <_strtod_l+0x262>
 800ceec:	4499      	add	r9, r3
 800ceee:	eb00 0c05 	add.w	ip, r0, r5
 800cef2:	462b      	mov	r3, r5
 800cef4:	210a      	movs	r1, #10
 800cef6:	4563      	cmp	r3, ip
 800cef8:	d10d      	bne.n	800cf16 <_strtod_l+0x236>
 800cefa:	1c69      	adds	r1, r5, #1
 800cefc:	4401      	add	r1, r0
 800cefe:	4428      	add	r0, r5
 800cf00:	2808      	cmp	r0, #8
 800cf02:	dc16      	bgt.n	800cf32 <_strtod_l+0x252>
 800cf04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cf06:	230a      	movs	r3, #10
 800cf08:	fb03 2300 	mla	r3, r3, r0, r2
 800cf0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf0e:	2300      	movs	r3, #0
 800cf10:	e018      	b.n	800cf44 <_strtod_l+0x264>
 800cf12:	4638      	mov	r0, r7
 800cf14:	e7da      	b.n	800cecc <_strtod_l+0x1ec>
 800cf16:	2b08      	cmp	r3, #8
 800cf18:	f103 0301 	add.w	r3, r3, #1
 800cf1c:	dc03      	bgt.n	800cf26 <_strtod_l+0x246>
 800cf1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cf20:	434e      	muls	r6, r1
 800cf22:	960a      	str	r6, [sp, #40]	@ 0x28
 800cf24:	e7e7      	b.n	800cef6 <_strtod_l+0x216>
 800cf26:	2b10      	cmp	r3, #16
 800cf28:	bfde      	ittt	le
 800cf2a:	9e08      	ldrle	r6, [sp, #32]
 800cf2c:	434e      	mulle	r6, r1
 800cf2e:	9608      	strle	r6, [sp, #32]
 800cf30:	e7e1      	b.n	800cef6 <_strtod_l+0x216>
 800cf32:	280f      	cmp	r0, #15
 800cf34:	dceb      	bgt.n	800cf0e <_strtod_l+0x22e>
 800cf36:	9808      	ldr	r0, [sp, #32]
 800cf38:	230a      	movs	r3, #10
 800cf3a:	fb03 2300 	mla	r3, r3, r0, r2
 800cf3e:	9308      	str	r3, [sp, #32]
 800cf40:	e7e5      	b.n	800cf0e <_strtod_l+0x22e>
 800cf42:	4629      	mov	r1, r5
 800cf44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf46:	1c50      	adds	r0, r2, #1
 800cf48:	9019      	str	r0, [sp, #100]	@ 0x64
 800cf4a:	7852      	ldrb	r2, [r2, #1]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	460d      	mov	r5, r1
 800cf50:	e7b1      	b.n	800ceb6 <_strtod_l+0x1d6>
 800cf52:	f04f 0900 	mov.w	r9, #0
 800cf56:	2301      	movs	r3, #1
 800cf58:	e77d      	b.n	800ce56 <_strtod_l+0x176>
 800cf5a:	f04f 0c00 	mov.w	ip, #0
 800cf5e:	1ca2      	adds	r2, r4, #2
 800cf60:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf62:	78a2      	ldrb	r2, [r4, #2]
 800cf64:	e785      	b.n	800ce72 <_strtod_l+0x192>
 800cf66:	f04f 0c01 	mov.w	ip, #1
 800cf6a:	e7f8      	b.n	800cf5e <_strtod_l+0x27e>
 800cf6c:	0800ee60 	.word	0x0800ee60
 800cf70:	0800ee48 	.word	0x0800ee48
 800cf74:	7ff00000 	.word	0x7ff00000
 800cf78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf7a:	1c51      	adds	r1, r2, #1
 800cf7c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cf7e:	7852      	ldrb	r2, [r2, #1]
 800cf80:	2a30      	cmp	r2, #48	@ 0x30
 800cf82:	d0f9      	beq.n	800cf78 <_strtod_l+0x298>
 800cf84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cf88:	2908      	cmp	r1, #8
 800cf8a:	f63f af78 	bhi.w	800ce7e <_strtod_l+0x19e>
 800cf8e:	3a30      	subs	r2, #48	@ 0x30
 800cf90:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf94:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cf96:	f04f 080a 	mov.w	r8, #10
 800cf9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf9c:	1c56      	adds	r6, r2, #1
 800cf9e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cfa0:	7852      	ldrb	r2, [r2, #1]
 800cfa2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cfa6:	f1be 0f09 	cmp.w	lr, #9
 800cfaa:	d939      	bls.n	800d020 <_strtod_l+0x340>
 800cfac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cfae:	1a76      	subs	r6, r6, r1
 800cfb0:	2e08      	cmp	r6, #8
 800cfb2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cfb6:	dc03      	bgt.n	800cfc0 <_strtod_l+0x2e0>
 800cfb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cfba:	4588      	cmp	r8, r1
 800cfbc:	bfa8      	it	ge
 800cfbe:	4688      	movge	r8, r1
 800cfc0:	f1bc 0f00 	cmp.w	ip, #0
 800cfc4:	d001      	beq.n	800cfca <_strtod_l+0x2ea>
 800cfc6:	f1c8 0800 	rsb	r8, r8, #0
 800cfca:	2d00      	cmp	r5, #0
 800cfcc:	d14e      	bne.n	800d06c <_strtod_l+0x38c>
 800cfce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cfd0:	4308      	orrs	r0, r1
 800cfd2:	f47f aebe 	bne.w	800cd52 <_strtod_l+0x72>
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f47f aed6 	bne.w	800cd88 <_strtod_l+0xa8>
 800cfdc:	2a69      	cmp	r2, #105	@ 0x69
 800cfde:	d028      	beq.n	800d032 <_strtod_l+0x352>
 800cfe0:	dc25      	bgt.n	800d02e <_strtod_l+0x34e>
 800cfe2:	2a49      	cmp	r2, #73	@ 0x49
 800cfe4:	d025      	beq.n	800d032 <_strtod_l+0x352>
 800cfe6:	2a4e      	cmp	r2, #78	@ 0x4e
 800cfe8:	f47f aece 	bne.w	800cd88 <_strtod_l+0xa8>
 800cfec:	499b      	ldr	r1, [pc, #620]	@ (800d25c <_strtod_l+0x57c>)
 800cfee:	a819      	add	r0, sp, #100	@ 0x64
 800cff0:	f001 fba6 	bl	800e740 <__match>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	f43f aec7 	beq.w	800cd88 <_strtod_l+0xa8>
 800cffa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	2b28      	cmp	r3, #40	@ 0x28
 800d000:	d12e      	bne.n	800d060 <_strtod_l+0x380>
 800d002:	4997      	ldr	r1, [pc, #604]	@ (800d260 <_strtod_l+0x580>)
 800d004:	aa1c      	add	r2, sp, #112	@ 0x70
 800d006:	a819      	add	r0, sp, #100	@ 0x64
 800d008:	f001 fbae 	bl	800e768 <__hexnan>
 800d00c:	2805      	cmp	r0, #5
 800d00e:	d127      	bne.n	800d060 <_strtod_l+0x380>
 800d010:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d012:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d016:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d01a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d01e:	e698      	b.n	800cd52 <_strtod_l+0x72>
 800d020:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d022:	fb08 2101 	mla	r1, r8, r1, r2
 800d026:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d02a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d02c:	e7b5      	b.n	800cf9a <_strtod_l+0x2ba>
 800d02e:	2a6e      	cmp	r2, #110	@ 0x6e
 800d030:	e7da      	b.n	800cfe8 <_strtod_l+0x308>
 800d032:	498c      	ldr	r1, [pc, #560]	@ (800d264 <_strtod_l+0x584>)
 800d034:	a819      	add	r0, sp, #100	@ 0x64
 800d036:	f001 fb83 	bl	800e740 <__match>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	f43f aea4 	beq.w	800cd88 <_strtod_l+0xa8>
 800d040:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d042:	4989      	ldr	r1, [pc, #548]	@ (800d268 <_strtod_l+0x588>)
 800d044:	3b01      	subs	r3, #1
 800d046:	a819      	add	r0, sp, #100	@ 0x64
 800d048:	9319      	str	r3, [sp, #100]	@ 0x64
 800d04a:	f001 fb79 	bl	800e740 <__match>
 800d04e:	b910      	cbnz	r0, 800d056 <_strtod_l+0x376>
 800d050:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d052:	3301      	adds	r3, #1
 800d054:	9319      	str	r3, [sp, #100]	@ 0x64
 800d056:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d278 <_strtod_l+0x598>
 800d05a:	f04f 0a00 	mov.w	sl, #0
 800d05e:	e678      	b.n	800cd52 <_strtod_l+0x72>
 800d060:	4882      	ldr	r0, [pc, #520]	@ (800d26c <_strtod_l+0x58c>)
 800d062:	f001 f8a9 	bl	800e1b8 <nan>
 800d066:	ec5b ab10 	vmov	sl, fp, d0
 800d06a:	e672      	b.n	800cd52 <_strtod_l+0x72>
 800d06c:	eba8 0309 	sub.w	r3, r8, r9
 800d070:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d072:	9309      	str	r3, [sp, #36]	@ 0x24
 800d074:	2f00      	cmp	r7, #0
 800d076:	bf08      	it	eq
 800d078:	462f      	moveq	r7, r5
 800d07a:	2d10      	cmp	r5, #16
 800d07c:	462c      	mov	r4, r5
 800d07e:	bfa8      	it	ge
 800d080:	2410      	movge	r4, #16
 800d082:	f7f3 fa67 	bl	8000554 <__aeabi_ui2d>
 800d086:	2d09      	cmp	r5, #9
 800d088:	4682      	mov	sl, r0
 800d08a:	468b      	mov	fp, r1
 800d08c:	dc13      	bgt.n	800d0b6 <_strtod_l+0x3d6>
 800d08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d090:	2b00      	cmp	r3, #0
 800d092:	f43f ae5e 	beq.w	800cd52 <_strtod_l+0x72>
 800d096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d098:	dd78      	ble.n	800d18c <_strtod_l+0x4ac>
 800d09a:	2b16      	cmp	r3, #22
 800d09c:	dc5f      	bgt.n	800d15e <_strtod_l+0x47e>
 800d09e:	4974      	ldr	r1, [pc, #464]	@ (800d270 <_strtod_l+0x590>)
 800d0a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0a8:	4652      	mov	r2, sl
 800d0aa:	465b      	mov	r3, fp
 800d0ac:	f7f3 facc 	bl	8000648 <__aeabi_dmul>
 800d0b0:	4682      	mov	sl, r0
 800d0b2:	468b      	mov	fp, r1
 800d0b4:	e64d      	b.n	800cd52 <_strtod_l+0x72>
 800d0b6:	4b6e      	ldr	r3, [pc, #440]	@ (800d270 <_strtod_l+0x590>)
 800d0b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d0bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d0c0:	f7f3 fac2 	bl	8000648 <__aeabi_dmul>
 800d0c4:	4682      	mov	sl, r0
 800d0c6:	9808      	ldr	r0, [sp, #32]
 800d0c8:	468b      	mov	fp, r1
 800d0ca:	f7f3 fa43 	bl	8000554 <__aeabi_ui2d>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4650      	mov	r0, sl
 800d0d4:	4659      	mov	r1, fp
 800d0d6:	f7f3 f901 	bl	80002dc <__adddf3>
 800d0da:	2d0f      	cmp	r5, #15
 800d0dc:	4682      	mov	sl, r0
 800d0de:	468b      	mov	fp, r1
 800d0e0:	ddd5      	ble.n	800d08e <_strtod_l+0x3ae>
 800d0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0e4:	1b2c      	subs	r4, r5, r4
 800d0e6:	441c      	add	r4, r3
 800d0e8:	2c00      	cmp	r4, #0
 800d0ea:	f340 8096 	ble.w	800d21a <_strtod_l+0x53a>
 800d0ee:	f014 030f 	ands.w	r3, r4, #15
 800d0f2:	d00a      	beq.n	800d10a <_strtod_l+0x42a>
 800d0f4:	495e      	ldr	r1, [pc, #376]	@ (800d270 <_strtod_l+0x590>)
 800d0f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0fa:	4652      	mov	r2, sl
 800d0fc:	465b      	mov	r3, fp
 800d0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d102:	f7f3 faa1 	bl	8000648 <__aeabi_dmul>
 800d106:	4682      	mov	sl, r0
 800d108:	468b      	mov	fp, r1
 800d10a:	f034 040f 	bics.w	r4, r4, #15
 800d10e:	d073      	beq.n	800d1f8 <_strtod_l+0x518>
 800d110:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d114:	dd48      	ble.n	800d1a8 <_strtod_l+0x4c8>
 800d116:	2400      	movs	r4, #0
 800d118:	46a0      	mov	r8, r4
 800d11a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d11c:	46a1      	mov	r9, r4
 800d11e:	9a05      	ldr	r2, [sp, #20]
 800d120:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d278 <_strtod_l+0x598>
 800d124:	2322      	movs	r3, #34	@ 0x22
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	f04f 0a00 	mov.w	sl, #0
 800d12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f43f ae0f 	beq.w	800cd52 <_strtod_l+0x72>
 800d134:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d136:	9805      	ldr	r0, [sp, #20]
 800d138:	f7ff f942 	bl	800c3c0 <_Bfree>
 800d13c:	9805      	ldr	r0, [sp, #20]
 800d13e:	4649      	mov	r1, r9
 800d140:	f7ff f93e 	bl	800c3c0 <_Bfree>
 800d144:	9805      	ldr	r0, [sp, #20]
 800d146:	4641      	mov	r1, r8
 800d148:	f7ff f93a 	bl	800c3c0 <_Bfree>
 800d14c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d14e:	9805      	ldr	r0, [sp, #20]
 800d150:	f7ff f936 	bl	800c3c0 <_Bfree>
 800d154:	9805      	ldr	r0, [sp, #20]
 800d156:	4621      	mov	r1, r4
 800d158:	f7ff f932 	bl	800c3c0 <_Bfree>
 800d15c:	e5f9      	b.n	800cd52 <_strtod_l+0x72>
 800d15e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d160:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d164:	4293      	cmp	r3, r2
 800d166:	dbbc      	blt.n	800d0e2 <_strtod_l+0x402>
 800d168:	4c41      	ldr	r4, [pc, #260]	@ (800d270 <_strtod_l+0x590>)
 800d16a:	f1c5 050f 	rsb	r5, r5, #15
 800d16e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d172:	4652      	mov	r2, sl
 800d174:	465b      	mov	r3, fp
 800d176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d17a:	f7f3 fa65 	bl	8000648 <__aeabi_dmul>
 800d17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d180:	1b5d      	subs	r5, r3, r5
 800d182:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d186:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d18a:	e78f      	b.n	800d0ac <_strtod_l+0x3cc>
 800d18c:	3316      	adds	r3, #22
 800d18e:	dba8      	blt.n	800d0e2 <_strtod_l+0x402>
 800d190:	4b37      	ldr	r3, [pc, #220]	@ (800d270 <_strtod_l+0x590>)
 800d192:	eba9 0808 	sub.w	r8, r9, r8
 800d196:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d19a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d19e:	4650      	mov	r0, sl
 800d1a0:	4659      	mov	r1, fp
 800d1a2:	f7f3 fb7b 	bl	800089c <__aeabi_ddiv>
 800d1a6:	e783      	b.n	800d0b0 <_strtod_l+0x3d0>
 800d1a8:	4b32      	ldr	r3, [pc, #200]	@ (800d274 <_strtod_l+0x594>)
 800d1aa:	9308      	str	r3, [sp, #32]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	1124      	asrs	r4, r4, #4
 800d1b0:	4650      	mov	r0, sl
 800d1b2:	4659      	mov	r1, fp
 800d1b4:	461e      	mov	r6, r3
 800d1b6:	2c01      	cmp	r4, #1
 800d1b8:	dc21      	bgt.n	800d1fe <_strtod_l+0x51e>
 800d1ba:	b10b      	cbz	r3, 800d1c0 <_strtod_l+0x4e0>
 800d1bc:	4682      	mov	sl, r0
 800d1be:	468b      	mov	fp, r1
 800d1c0:	492c      	ldr	r1, [pc, #176]	@ (800d274 <_strtod_l+0x594>)
 800d1c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d1c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d1ca:	4652      	mov	r2, sl
 800d1cc:	465b      	mov	r3, fp
 800d1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1d2:	f7f3 fa39 	bl	8000648 <__aeabi_dmul>
 800d1d6:	4b28      	ldr	r3, [pc, #160]	@ (800d278 <_strtod_l+0x598>)
 800d1d8:	460a      	mov	r2, r1
 800d1da:	400b      	ands	r3, r1
 800d1dc:	4927      	ldr	r1, [pc, #156]	@ (800d27c <_strtod_l+0x59c>)
 800d1de:	428b      	cmp	r3, r1
 800d1e0:	4682      	mov	sl, r0
 800d1e2:	d898      	bhi.n	800d116 <_strtod_l+0x436>
 800d1e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d1e8:	428b      	cmp	r3, r1
 800d1ea:	bf86      	itte	hi
 800d1ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d280 <_strtod_l+0x5a0>
 800d1f0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800d1f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	9308      	str	r3, [sp, #32]
 800d1fc:	e07a      	b.n	800d2f4 <_strtod_l+0x614>
 800d1fe:	07e2      	lsls	r2, r4, #31
 800d200:	d505      	bpl.n	800d20e <_strtod_l+0x52e>
 800d202:	9b08      	ldr	r3, [sp, #32]
 800d204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d208:	f7f3 fa1e 	bl	8000648 <__aeabi_dmul>
 800d20c:	2301      	movs	r3, #1
 800d20e:	9a08      	ldr	r2, [sp, #32]
 800d210:	3208      	adds	r2, #8
 800d212:	3601      	adds	r6, #1
 800d214:	1064      	asrs	r4, r4, #1
 800d216:	9208      	str	r2, [sp, #32]
 800d218:	e7cd      	b.n	800d1b6 <_strtod_l+0x4d6>
 800d21a:	d0ed      	beq.n	800d1f8 <_strtod_l+0x518>
 800d21c:	4264      	negs	r4, r4
 800d21e:	f014 020f 	ands.w	r2, r4, #15
 800d222:	d00a      	beq.n	800d23a <_strtod_l+0x55a>
 800d224:	4b12      	ldr	r3, [pc, #72]	@ (800d270 <_strtod_l+0x590>)
 800d226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d22a:	4650      	mov	r0, sl
 800d22c:	4659      	mov	r1, fp
 800d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d232:	f7f3 fb33 	bl	800089c <__aeabi_ddiv>
 800d236:	4682      	mov	sl, r0
 800d238:	468b      	mov	fp, r1
 800d23a:	1124      	asrs	r4, r4, #4
 800d23c:	d0dc      	beq.n	800d1f8 <_strtod_l+0x518>
 800d23e:	2c1f      	cmp	r4, #31
 800d240:	dd20      	ble.n	800d284 <_strtod_l+0x5a4>
 800d242:	2400      	movs	r4, #0
 800d244:	46a0      	mov	r8, r4
 800d246:	940a      	str	r4, [sp, #40]	@ 0x28
 800d248:	46a1      	mov	r9, r4
 800d24a:	9a05      	ldr	r2, [sp, #20]
 800d24c:	2322      	movs	r3, #34	@ 0x22
 800d24e:	f04f 0a00 	mov.w	sl, #0
 800d252:	f04f 0b00 	mov.w	fp, #0
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	e768      	b.n	800d12c <_strtod_l+0x44c>
 800d25a:	bf00      	nop
 800d25c:	0800ec39 	.word	0x0800ec39
 800d260:	0800ee4c 	.word	0x0800ee4c
 800d264:	0800ec31 	.word	0x0800ec31
 800d268:	0800ec68 	.word	0x0800ec68
 800d26c:	0800eff5 	.word	0x0800eff5
 800d270:	0800ed80 	.word	0x0800ed80
 800d274:	0800ed58 	.word	0x0800ed58
 800d278:	7ff00000 	.word	0x7ff00000
 800d27c:	7ca00000 	.word	0x7ca00000
 800d280:	7fefffff 	.word	0x7fefffff
 800d284:	f014 0310 	ands.w	r3, r4, #16
 800d288:	bf18      	it	ne
 800d28a:	236a      	movne	r3, #106	@ 0x6a
 800d28c:	4ea9      	ldr	r6, [pc, #676]	@ (800d534 <_strtod_l+0x854>)
 800d28e:	9308      	str	r3, [sp, #32]
 800d290:	4650      	mov	r0, sl
 800d292:	4659      	mov	r1, fp
 800d294:	2300      	movs	r3, #0
 800d296:	07e2      	lsls	r2, r4, #31
 800d298:	d504      	bpl.n	800d2a4 <_strtod_l+0x5c4>
 800d29a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d29e:	f7f3 f9d3 	bl	8000648 <__aeabi_dmul>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	1064      	asrs	r4, r4, #1
 800d2a6:	f106 0608 	add.w	r6, r6, #8
 800d2aa:	d1f4      	bne.n	800d296 <_strtod_l+0x5b6>
 800d2ac:	b10b      	cbz	r3, 800d2b2 <_strtod_l+0x5d2>
 800d2ae:	4682      	mov	sl, r0
 800d2b0:	468b      	mov	fp, r1
 800d2b2:	9b08      	ldr	r3, [sp, #32]
 800d2b4:	b1b3      	cbz	r3, 800d2e4 <_strtod_l+0x604>
 800d2b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d2ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	4659      	mov	r1, fp
 800d2c2:	dd0f      	ble.n	800d2e4 <_strtod_l+0x604>
 800d2c4:	2b1f      	cmp	r3, #31
 800d2c6:	dd55      	ble.n	800d374 <_strtod_l+0x694>
 800d2c8:	2b34      	cmp	r3, #52	@ 0x34
 800d2ca:	bfde      	ittt	le
 800d2cc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800d2d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d2d4:	4093      	lslle	r3, r2
 800d2d6:	f04f 0a00 	mov.w	sl, #0
 800d2da:	bfcc      	ite	gt
 800d2dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d2e0:	ea03 0b01 	andle.w	fp, r3, r1
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	4650      	mov	r0, sl
 800d2ea:	4659      	mov	r1, fp
 800d2ec:	f7f3 fc14 	bl	8000b18 <__aeabi_dcmpeq>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d1a6      	bne.n	800d242 <_strtod_l+0x562>
 800d2f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d2fa:	9805      	ldr	r0, [sp, #20]
 800d2fc:	462b      	mov	r3, r5
 800d2fe:	463a      	mov	r2, r7
 800d300:	f7ff f8c6 	bl	800c490 <__s2b>
 800d304:	900a      	str	r0, [sp, #40]	@ 0x28
 800d306:	2800      	cmp	r0, #0
 800d308:	f43f af05 	beq.w	800d116 <_strtod_l+0x436>
 800d30c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d30e:	2a00      	cmp	r2, #0
 800d310:	eba9 0308 	sub.w	r3, r9, r8
 800d314:	bfa8      	it	ge
 800d316:	2300      	movge	r3, #0
 800d318:	9312      	str	r3, [sp, #72]	@ 0x48
 800d31a:	2400      	movs	r4, #0
 800d31c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d320:	9316      	str	r3, [sp, #88]	@ 0x58
 800d322:	46a0      	mov	r8, r4
 800d324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d326:	9805      	ldr	r0, [sp, #20]
 800d328:	6859      	ldr	r1, [r3, #4]
 800d32a:	f7ff f809 	bl	800c340 <_Balloc>
 800d32e:	4681      	mov	r9, r0
 800d330:	2800      	cmp	r0, #0
 800d332:	f43f aef4 	beq.w	800d11e <_strtod_l+0x43e>
 800d336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d338:	691a      	ldr	r2, [r3, #16]
 800d33a:	3202      	adds	r2, #2
 800d33c:	f103 010c 	add.w	r1, r3, #12
 800d340:	0092      	lsls	r2, r2, #2
 800d342:	300c      	adds	r0, #12
 800d344:	f7fe f899 	bl	800b47a <memcpy>
 800d348:	ec4b ab10 	vmov	d0, sl, fp
 800d34c:	9805      	ldr	r0, [sp, #20]
 800d34e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d350:	a91b      	add	r1, sp, #108	@ 0x6c
 800d352:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d356:	f7ff fbd7 	bl	800cb08 <__d2b>
 800d35a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d35c:	2800      	cmp	r0, #0
 800d35e:	f43f aede 	beq.w	800d11e <_strtod_l+0x43e>
 800d362:	9805      	ldr	r0, [sp, #20]
 800d364:	2101      	movs	r1, #1
 800d366:	f7ff f929 	bl	800c5bc <__i2b>
 800d36a:	4680      	mov	r8, r0
 800d36c:	b948      	cbnz	r0, 800d382 <_strtod_l+0x6a2>
 800d36e:	f04f 0800 	mov.w	r8, #0
 800d372:	e6d4      	b.n	800d11e <_strtod_l+0x43e>
 800d374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d378:	fa02 f303 	lsl.w	r3, r2, r3
 800d37c:	ea03 0a0a 	and.w	sl, r3, sl
 800d380:	e7b0      	b.n	800d2e4 <_strtod_l+0x604>
 800d382:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d384:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d386:	2d00      	cmp	r5, #0
 800d388:	bfab      	itete	ge
 800d38a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d38c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d38e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d390:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d392:	bfac      	ite	ge
 800d394:	18ef      	addge	r7, r5, r3
 800d396:	1b5e      	sublt	r6, r3, r5
 800d398:	9b08      	ldr	r3, [sp, #32]
 800d39a:	1aed      	subs	r5, r5, r3
 800d39c:	4415      	add	r5, r2
 800d39e:	4b66      	ldr	r3, [pc, #408]	@ (800d538 <_strtod_l+0x858>)
 800d3a0:	3d01      	subs	r5, #1
 800d3a2:	429d      	cmp	r5, r3
 800d3a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d3a8:	da50      	bge.n	800d44c <_strtod_l+0x76c>
 800d3aa:	1b5b      	subs	r3, r3, r5
 800d3ac:	2b1f      	cmp	r3, #31
 800d3ae:	eba2 0203 	sub.w	r2, r2, r3
 800d3b2:	f04f 0101 	mov.w	r1, #1
 800d3b6:	dc3d      	bgt.n	800d434 <_strtod_l+0x754>
 800d3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d3bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d3be:	2300      	movs	r3, #0
 800d3c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d3c2:	18bd      	adds	r5, r7, r2
 800d3c4:	9b08      	ldr	r3, [sp, #32]
 800d3c6:	42af      	cmp	r7, r5
 800d3c8:	4416      	add	r6, r2
 800d3ca:	441e      	add	r6, r3
 800d3cc:	463b      	mov	r3, r7
 800d3ce:	bfa8      	it	ge
 800d3d0:	462b      	movge	r3, r5
 800d3d2:	42b3      	cmp	r3, r6
 800d3d4:	bfa8      	it	ge
 800d3d6:	4633      	movge	r3, r6
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	bfc2      	ittt	gt
 800d3dc:	1aed      	subgt	r5, r5, r3
 800d3de:	1af6      	subgt	r6, r6, r3
 800d3e0:	1aff      	subgt	r7, r7, r3
 800d3e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	dd16      	ble.n	800d416 <_strtod_l+0x736>
 800d3e8:	4641      	mov	r1, r8
 800d3ea:	9805      	ldr	r0, [sp, #20]
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	f7ff f9a5 	bl	800c73c <__pow5mult>
 800d3f2:	4680      	mov	r8, r0
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d0ba      	beq.n	800d36e <_strtod_l+0x68e>
 800d3f8:	4601      	mov	r1, r0
 800d3fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d3fc:	9805      	ldr	r0, [sp, #20]
 800d3fe:	f7ff f8f3 	bl	800c5e8 <__multiply>
 800d402:	900e      	str	r0, [sp, #56]	@ 0x38
 800d404:	2800      	cmp	r0, #0
 800d406:	f43f ae8a 	beq.w	800d11e <_strtod_l+0x43e>
 800d40a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d40c:	9805      	ldr	r0, [sp, #20]
 800d40e:	f7fe ffd7 	bl	800c3c0 <_Bfree>
 800d412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d414:	931a      	str	r3, [sp, #104]	@ 0x68
 800d416:	2d00      	cmp	r5, #0
 800d418:	dc1d      	bgt.n	800d456 <_strtod_l+0x776>
 800d41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	dd23      	ble.n	800d468 <_strtod_l+0x788>
 800d420:	4649      	mov	r1, r9
 800d422:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d424:	9805      	ldr	r0, [sp, #20]
 800d426:	f7ff f989 	bl	800c73c <__pow5mult>
 800d42a:	4681      	mov	r9, r0
 800d42c:	b9e0      	cbnz	r0, 800d468 <_strtod_l+0x788>
 800d42e:	f04f 0900 	mov.w	r9, #0
 800d432:	e674      	b.n	800d11e <_strtod_l+0x43e>
 800d434:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d438:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d43c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d440:	35e2      	adds	r5, #226	@ 0xe2
 800d442:	fa01 f305 	lsl.w	r3, r1, r5
 800d446:	9310      	str	r3, [sp, #64]	@ 0x40
 800d448:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d44a:	e7ba      	b.n	800d3c2 <_strtod_l+0x6e2>
 800d44c:	2300      	movs	r3, #0
 800d44e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d450:	2301      	movs	r3, #1
 800d452:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d454:	e7b5      	b.n	800d3c2 <_strtod_l+0x6e2>
 800d456:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d458:	9805      	ldr	r0, [sp, #20]
 800d45a:	462a      	mov	r2, r5
 800d45c:	f7ff f9c8 	bl	800c7f0 <__lshift>
 800d460:	901a      	str	r0, [sp, #104]	@ 0x68
 800d462:	2800      	cmp	r0, #0
 800d464:	d1d9      	bne.n	800d41a <_strtod_l+0x73a>
 800d466:	e65a      	b.n	800d11e <_strtod_l+0x43e>
 800d468:	2e00      	cmp	r6, #0
 800d46a:	dd07      	ble.n	800d47c <_strtod_l+0x79c>
 800d46c:	4649      	mov	r1, r9
 800d46e:	9805      	ldr	r0, [sp, #20]
 800d470:	4632      	mov	r2, r6
 800d472:	f7ff f9bd 	bl	800c7f0 <__lshift>
 800d476:	4681      	mov	r9, r0
 800d478:	2800      	cmp	r0, #0
 800d47a:	d0d8      	beq.n	800d42e <_strtod_l+0x74e>
 800d47c:	2f00      	cmp	r7, #0
 800d47e:	dd08      	ble.n	800d492 <_strtod_l+0x7b2>
 800d480:	4641      	mov	r1, r8
 800d482:	9805      	ldr	r0, [sp, #20]
 800d484:	463a      	mov	r2, r7
 800d486:	f7ff f9b3 	bl	800c7f0 <__lshift>
 800d48a:	4680      	mov	r8, r0
 800d48c:	2800      	cmp	r0, #0
 800d48e:	f43f ae46 	beq.w	800d11e <_strtod_l+0x43e>
 800d492:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d494:	9805      	ldr	r0, [sp, #20]
 800d496:	464a      	mov	r2, r9
 800d498:	f7ff fa32 	bl	800c900 <__mdiff>
 800d49c:	4604      	mov	r4, r0
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	f43f ae3d 	beq.w	800d11e <_strtod_l+0x43e>
 800d4a4:	68c3      	ldr	r3, [r0, #12]
 800d4a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60c3      	str	r3, [r0, #12]
 800d4ac:	4641      	mov	r1, r8
 800d4ae:	f7ff fa0b 	bl	800c8c8 <__mcmp>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	da46      	bge.n	800d544 <_strtod_l+0x864>
 800d4b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4b8:	ea53 030a 	orrs.w	r3, r3, sl
 800d4bc:	d16c      	bne.n	800d598 <_strtod_l+0x8b8>
 800d4be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d168      	bne.n	800d598 <_strtod_l+0x8b8>
 800d4c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4ca:	0d1b      	lsrs	r3, r3, #20
 800d4cc:	051b      	lsls	r3, r3, #20
 800d4ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d4d2:	d961      	bls.n	800d598 <_strtod_l+0x8b8>
 800d4d4:	6963      	ldr	r3, [r4, #20]
 800d4d6:	b913      	cbnz	r3, 800d4de <_strtod_l+0x7fe>
 800d4d8:	6923      	ldr	r3, [r4, #16]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	dd5c      	ble.n	800d598 <_strtod_l+0x8b8>
 800d4de:	4621      	mov	r1, r4
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	9805      	ldr	r0, [sp, #20]
 800d4e4:	f7ff f984 	bl	800c7f0 <__lshift>
 800d4e8:	4641      	mov	r1, r8
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	f7ff f9ec 	bl	800c8c8 <__mcmp>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	dd51      	ble.n	800d598 <_strtod_l+0x8b8>
 800d4f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4f8:	9a08      	ldr	r2, [sp, #32]
 800d4fa:	0d1b      	lsrs	r3, r3, #20
 800d4fc:	051b      	lsls	r3, r3, #20
 800d4fe:	2a00      	cmp	r2, #0
 800d500:	d06b      	beq.n	800d5da <_strtod_l+0x8fa>
 800d502:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d506:	d868      	bhi.n	800d5da <_strtod_l+0x8fa>
 800d508:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d50c:	f67f ae9d 	bls.w	800d24a <_strtod_l+0x56a>
 800d510:	4b0a      	ldr	r3, [pc, #40]	@ (800d53c <_strtod_l+0x85c>)
 800d512:	4650      	mov	r0, sl
 800d514:	4659      	mov	r1, fp
 800d516:	2200      	movs	r2, #0
 800d518:	f7f3 f896 	bl	8000648 <__aeabi_dmul>
 800d51c:	4b08      	ldr	r3, [pc, #32]	@ (800d540 <_strtod_l+0x860>)
 800d51e:	400b      	ands	r3, r1
 800d520:	4682      	mov	sl, r0
 800d522:	468b      	mov	fp, r1
 800d524:	2b00      	cmp	r3, #0
 800d526:	f47f ae05 	bne.w	800d134 <_strtod_l+0x454>
 800d52a:	9a05      	ldr	r2, [sp, #20]
 800d52c:	2322      	movs	r3, #34	@ 0x22
 800d52e:	6013      	str	r3, [r2, #0]
 800d530:	e600      	b.n	800d134 <_strtod_l+0x454>
 800d532:	bf00      	nop
 800d534:	0800ee78 	.word	0x0800ee78
 800d538:	fffffc02 	.word	0xfffffc02
 800d53c:	39500000 	.word	0x39500000
 800d540:	7ff00000 	.word	0x7ff00000
 800d544:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d548:	d165      	bne.n	800d616 <_strtod_l+0x936>
 800d54a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d54c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d550:	b35a      	cbz	r2, 800d5aa <_strtod_l+0x8ca>
 800d552:	4a9f      	ldr	r2, [pc, #636]	@ (800d7d0 <_strtod_l+0xaf0>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d12b      	bne.n	800d5b0 <_strtod_l+0x8d0>
 800d558:	9b08      	ldr	r3, [sp, #32]
 800d55a:	4651      	mov	r1, sl
 800d55c:	b303      	cbz	r3, 800d5a0 <_strtod_l+0x8c0>
 800d55e:	4b9d      	ldr	r3, [pc, #628]	@ (800d7d4 <_strtod_l+0xaf4>)
 800d560:	465a      	mov	r2, fp
 800d562:	4013      	ands	r3, r2
 800d564:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d56c:	d81b      	bhi.n	800d5a6 <_strtod_l+0x8c6>
 800d56e:	0d1b      	lsrs	r3, r3, #20
 800d570:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d574:	fa02 f303 	lsl.w	r3, r2, r3
 800d578:	4299      	cmp	r1, r3
 800d57a:	d119      	bne.n	800d5b0 <_strtod_l+0x8d0>
 800d57c:	4b96      	ldr	r3, [pc, #600]	@ (800d7d8 <_strtod_l+0xaf8>)
 800d57e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d580:	429a      	cmp	r2, r3
 800d582:	d102      	bne.n	800d58a <_strtod_l+0x8aa>
 800d584:	3101      	adds	r1, #1
 800d586:	f43f adca 	beq.w	800d11e <_strtod_l+0x43e>
 800d58a:	4b92      	ldr	r3, [pc, #584]	@ (800d7d4 <_strtod_l+0xaf4>)
 800d58c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d58e:	401a      	ands	r2, r3
 800d590:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d594:	f04f 0a00 	mov.w	sl, #0
 800d598:	9b08      	ldr	r3, [sp, #32]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1b8      	bne.n	800d510 <_strtod_l+0x830>
 800d59e:	e5c9      	b.n	800d134 <_strtod_l+0x454>
 800d5a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d5a4:	e7e8      	b.n	800d578 <_strtod_l+0x898>
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	e7e6      	b.n	800d578 <_strtod_l+0x898>
 800d5aa:	ea53 030a 	orrs.w	r3, r3, sl
 800d5ae:	d0a1      	beq.n	800d4f4 <_strtod_l+0x814>
 800d5b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d5b2:	b1db      	cbz	r3, 800d5ec <_strtod_l+0x90c>
 800d5b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5b6:	4213      	tst	r3, r2
 800d5b8:	d0ee      	beq.n	800d598 <_strtod_l+0x8b8>
 800d5ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5bc:	9a08      	ldr	r2, [sp, #32]
 800d5be:	4650      	mov	r0, sl
 800d5c0:	4659      	mov	r1, fp
 800d5c2:	b1bb      	cbz	r3, 800d5f4 <_strtod_l+0x914>
 800d5c4:	f7ff fb6e 	bl	800cca4 <sulp>
 800d5c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5cc:	ec53 2b10 	vmov	r2, r3, d0
 800d5d0:	f7f2 fe84 	bl	80002dc <__adddf3>
 800d5d4:	4682      	mov	sl, r0
 800d5d6:	468b      	mov	fp, r1
 800d5d8:	e7de      	b.n	800d598 <_strtod_l+0x8b8>
 800d5da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d5de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d5e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d5e6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d5ea:	e7d5      	b.n	800d598 <_strtod_l+0x8b8>
 800d5ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d5ee:	ea13 0f0a 	tst.w	r3, sl
 800d5f2:	e7e1      	b.n	800d5b8 <_strtod_l+0x8d8>
 800d5f4:	f7ff fb56 	bl	800cca4 <sulp>
 800d5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5fc:	ec53 2b10 	vmov	r2, r3, d0
 800d600:	f7f2 fe6a 	bl	80002d8 <__aeabi_dsub>
 800d604:	2200      	movs	r2, #0
 800d606:	2300      	movs	r3, #0
 800d608:	4682      	mov	sl, r0
 800d60a:	468b      	mov	fp, r1
 800d60c:	f7f3 fa84 	bl	8000b18 <__aeabi_dcmpeq>
 800d610:	2800      	cmp	r0, #0
 800d612:	d0c1      	beq.n	800d598 <_strtod_l+0x8b8>
 800d614:	e619      	b.n	800d24a <_strtod_l+0x56a>
 800d616:	4641      	mov	r1, r8
 800d618:	4620      	mov	r0, r4
 800d61a:	f7ff facd 	bl	800cbb8 <__ratio>
 800d61e:	ec57 6b10 	vmov	r6, r7, d0
 800d622:	2200      	movs	r2, #0
 800d624:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d628:	4630      	mov	r0, r6
 800d62a:	4639      	mov	r1, r7
 800d62c:	f7f3 fa88 	bl	8000b40 <__aeabi_dcmple>
 800d630:	2800      	cmp	r0, #0
 800d632:	d06f      	beq.n	800d714 <_strtod_l+0xa34>
 800d634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d636:	2b00      	cmp	r3, #0
 800d638:	d17a      	bne.n	800d730 <_strtod_l+0xa50>
 800d63a:	f1ba 0f00 	cmp.w	sl, #0
 800d63e:	d158      	bne.n	800d6f2 <_strtod_l+0xa12>
 800d640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d646:	2b00      	cmp	r3, #0
 800d648:	d15a      	bne.n	800d700 <_strtod_l+0xa20>
 800d64a:	4b64      	ldr	r3, [pc, #400]	@ (800d7dc <_strtod_l+0xafc>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	4630      	mov	r0, r6
 800d650:	4639      	mov	r1, r7
 800d652:	f7f3 fa6b 	bl	8000b2c <__aeabi_dcmplt>
 800d656:	2800      	cmp	r0, #0
 800d658:	d159      	bne.n	800d70e <_strtod_l+0xa2e>
 800d65a:	4630      	mov	r0, r6
 800d65c:	4639      	mov	r1, r7
 800d65e:	4b60      	ldr	r3, [pc, #384]	@ (800d7e0 <_strtod_l+0xb00>)
 800d660:	2200      	movs	r2, #0
 800d662:	f7f2 fff1 	bl	8000648 <__aeabi_dmul>
 800d666:	4606      	mov	r6, r0
 800d668:	460f      	mov	r7, r1
 800d66a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d66e:	9606      	str	r6, [sp, #24]
 800d670:	9307      	str	r3, [sp, #28]
 800d672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d676:	4d57      	ldr	r5, [pc, #348]	@ (800d7d4 <_strtod_l+0xaf4>)
 800d678:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d67e:	401d      	ands	r5, r3
 800d680:	4b58      	ldr	r3, [pc, #352]	@ (800d7e4 <_strtod_l+0xb04>)
 800d682:	429d      	cmp	r5, r3
 800d684:	f040 80b2 	bne.w	800d7ec <_strtod_l+0xb0c>
 800d688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d68a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d68e:	ec4b ab10 	vmov	d0, sl, fp
 800d692:	f7ff f9c9 	bl	800ca28 <__ulp>
 800d696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d69a:	ec51 0b10 	vmov	r0, r1, d0
 800d69e:	f7f2 ffd3 	bl	8000648 <__aeabi_dmul>
 800d6a2:	4652      	mov	r2, sl
 800d6a4:	465b      	mov	r3, fp
 800d6a6:	f7f2 fe19 	bl	80002dc <__adddf3>
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	4949      	ldr	r1, [pc, #292]	@ (800d7d4 <_strtod_l+0xaf4>)
 800d6ae:	4a4e      	ldr	r2, [pc, #312]	@ (800d7e8 <_strtod_l+0xb08>)
 800d6b0:	4019      	ands	r1, r3
 800d6b2:	4291      	cmp	r1, r2
 800d6b4:	4682      	mov	sl, r0
 800d6b6:	d942      	bls.n	800d73e <_strtod_l+0xa5e>
 800d6b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d6ba:	4b47      	ldr	r3, [pc, #284]	@ (800d7d8 <_strtod_l+0xaf8>)
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d103      	bne.n	800d6c8 <_strtod_l+0x9e8>
 800d6c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	f43f ad2b 	beq.w	800d11e <_strtod_l+0x43e>
 800d6c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d7d8 <_strtod_l+0xaf8>
 800d6cc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d6d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6d2:	9805      	ldr	r0, [sp, #20]
 800d6d4:	f7fe fe74 	bl	800c3c0 <_Bfree>
 800d6d8:	9805      	ldr	r0, [sp, #20]
 800d6da:	4649      	mov	r1, r9
 800d6dc:	f7fe fe70 	bl	800c3c0 <_Bfree>
 800d6e0:	9805      	ldr	r0, [sp, #20]
 800d6e2:	4641      	mov	r1, r8
 800d6e4:	f7fe fe6c 	bl	800c3c0 <_Bfree>
 800d6e8:	9805      	ldr	r0, [sp, #20]
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	f7fe fe68 	bl	800c3c0 <_Bfree>
 800d6f0:	e618      	b.n	800d324 <_strtod_l+0x644>
 800d6f2:	f1ba 0f01 	cmp.w	sl, #1
 800d6f6:	d103      	bne.n	800d700 <_strtod_l+0xa20>
 800d6f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f43f ada5 	beq.w	800d24a <_strtod_l+0x56a>
 800d700:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d7b0 <_strtod_l+0xad0>
 800d704:	4f35      	ldr	r7, [pc, #212]	@ (800d7dc <_strtod_l+0xafc>)
 800d706:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d70a:	2600      	movs	r6, #0
 800d70c:	e7b1      	b.n	800d672 <_strtod_l+0x992>
 800d70e:	4f34      	ldr	r7, [pc, #208]	@ (800d7e0 <_strtod_l+0xb00>)
 800d710:	2600      	movs	r6, #0
 800d712:	e7aa      	b.n	800d66a <_strtod_l+0x98a>
 800d714:	4b32      	ldr	r3, [pc, #200]	@ (800d7e0 <_strtod_l+0xb00>)
 800d716:	4630      	mov	r0, r6
 800d718:	4639      	mov	r1, r7
 800d71a:	2200      	movs	r2, #0
 800d71c:	f7f2 ff94 	bl	8000648 <__aeabi_dmul>
 800d720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d722:	4606      	mov	r6, r0
 800d724:	460f      	mov	r7, r1
 800d726:	2b00      	cmp	r3, #0
 800d728:	d09f      	beq.n	800d66a <_strtod_l+0x98a>
 800d72a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d72e:	e7a0      	b.n	800d672 <_strtod_l+0x992>
 800d730:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d7b8 <_strtod_l+0xad8>
 800d734:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d738:	ec57 6b17 	vmov	r6, r7, d7
 800d73c:	e799      	b.n	800d672 <_strtod_l+0x992>
 800d73e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d742:	9b08      	ldr	r3, [sp, #32]
 800d744:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1c1      	bne.n	800d6d0 <_strtod_l+0x9f0>
 800d74c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d750:	0d1b      	lsrs	r3, r3, #20
 800d752:	051b      	lsls	r3, r3, #20
 800d754:	429d      	cmp	r5, r3
 800d756:	d1bb      	bne.n	800d6d0 <_strtod_l+0x9f0>
 800d758:	4630      	mov	r0, r6
 800d75a:	4639      	mov	r1, r7
 800d75c:	f7f3 fad4 	bl	8000d08 <__aeabi_d2lz>
 800d760:	f7f2 ff44 	bl	80005ec <__aeabi_l2d>
 800d764:	4602      	mov	r2, r0
 800d766:	460b      	mov	r3, r1
 800d768:	4630      	mov	r0, r6
 800d76a:	4639      	mov	r1, r7
 800d76c:	f7f2 fdb4 	bl	80002d8 <__aeabi_dsub>
 800d770:	460b      	mov	r3, r1
 800d772:	4602      	mov	r2, r0
 800d774:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d778:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d77e:	ea46 060a 	orr.w	r6, r6, sl
 800d782:	431e      	orrs	r6, r3
 800d784:	d06f      	beq.n	800d866 <_strtod_l+0xb86>
 800d786:	a30e      	add	r3, pc, #56	@ (adr r3, 800d7c0 <_strtod_l+0xae0>)
 800d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78c:	f7f3 f9ce 	bl	8000b2c <__aeabi_dcmplt>
 800d790:	2800      	cmp	r0, #0
 800d792:	f47f accf 	bne.w	800d134 <_strtod_l+0x454>
 800d796:	a30c      	add	r3, pc, #48	@ (adr r3, 800d7c8 <_strtod_l+0xae8>)
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7a0:	f7f3 f9e2 	bl	8000b68 <__aeabi_dcmpgt>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d093      	beq.n	800d6d0 <_strtod_l+0x9f0>
 800d7a8:	e4c4      	b.n	800d134 <_strtod_l+0x454>
 800d7aa:	bf00      	nop
 800d7ac:	f3af 8000 	nop.w
 800d7b0:	00000000 	.word	0x00000000
 800d7b4:	bff00000 	.word	0xbff00000
 800d7b8:	00000000 	.word	0x00000000
 800d7bc:	3ff00000 	.word	0x3ff00000
 800d7c0:	94a03595 	.word	0x94a03595
 800d7c4:	3fdfffff 	.word	0x3fdfffff
 800d7c8:	35afe535 	.word	0x35afe535
 800d7cc:	3fe00000 	.word	0x3fe00000
 800d7d0:	000fffff 	.word	0x000fffff
 800d7d4:	7ff00000 	.word	0x7ff00000
 800d7d8:	7fefffff 	.word	0x7fefffff
 800d7dc:	3ff00000 	.word	0x3ff00000
 800d7e0:	3fe00000 	.word	0x3fe00000
 800d7e4:	7fe00000 	.word	0x7fe00000
 800d7e8:	7c9fffff 	.word	0x7c9fffff
 800d7ec:	9b08      	ldr	r3, [sp, #32]
 800d7ee:	b323      	cbz	r3, 800d83a <_strtod_l+0xb5a>
 800d7f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d7f4:	d821      	bhi.n	800d83a <_strtod_l+0xb5a>
 800d7f6:	a328      	add	r3, pc, #160	@ (adr r3, 800d898 <_strtod_l+0xbb8>)
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	4639      	mov	r1, r7
 800d800:	f7f3 f99e 	bl	8000b40 <__aeabi_dcmple>
 800d804:	b1a0      	cbz	r0, 800d830 <_strtod_l+0xb50>
 800d806:	4639      	mov	r1, r7
 800d808:	4630      	mov	r0, r6
 800d80a:	f7f3 f9f5 	bl	8000bf8 <__aeabi_d2uiz>
 800d80e:	2801      	cmp	r0, #1
 800d810:	bf38      	it	cc
 800d812:	2001      	movcc	r0, #1
 800d814:	f7f2 fe9e 	bl	8000554 <__aeabi_ui2d>
 800d818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d81a:	4606      	mov	r6, r0
 800d81c:	460f      	mov	r7, r1
 800d81e:	b9fb      	cbnz	r3, 800d860 <_strtod_l+0xb80>
 800d820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d824:	9014      	str	r0, [sp, #80]	@ 0x50
 800d826:	9315      	str	r3, [sp, #84]	@ 0x54
 800d828:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d82c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d830:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d832:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d836:	1b5b      	subs	r3, r3, r5
 800d838:	9311      	str	r3, [sp, #68]	@ 0x44
 800d83a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d83e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d842:	f7ff f8f1 	bl	800ca28 <__ulp>
 800d846:	4650      	mov	r0, sl
 800d848:	ec53 2b10 	vmov	r2, r3, d0
 800d84c:	4659      	mov	r1, fp
 800d84e:	f7f2 fefb 	bl	8000648 <__aeabi_dmul>
 800d852:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d856:	f7f2 fd41 	bl	80002dc <__adddf3>
 800d85a:	4682      	mov	sl, r0
 800d85c:	468b      	mov	fp, r1
 800d85e:	e770      	b.n	800d742 <_strtod_l+0xa62>
 800d860:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d864:	e7e0      	b.n	800d828 <_strtod_l+0xb48>
 800d866:	a30e      	add	r3, pc, #56	@ (adr r3, 800d8a0 <_strtod_l+0xbc0>)
 800d868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86c:	f7f3 f95e 	bl	8000b2c <__aeabi_dcmplt>
 800d870:	e798      	b.n	800d7a4 <_strtod_l+0xac4>
 800d872:	2300      	movs	r3, #0
 800d874:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d876:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d87a:	6013      	str	r3, [r2, #0]
 800d87c:	f7ff ba6d 	b.w	800cd5a <_strtod_l+0x7a>
 800d880:	2a65      	cmp	r2, #101	@ 0x65
 800d882:	f43f ab66 	beq.w	800cf52 <_strtod_l+0x272>
 800d886:	2a45      	cmp	r2, #69	@ 0x45
 800d888:	f43f ab63 	beq.w	800cf52 <_strtod_l+0x272>
 800d88c:	2301      	movs	r3, #1
 800d88e:	f7ff bb9e 	b.w	800cfce <_strtod_l+0x2ee>
 800d892:	bf00      	nop
 800d894:	f3af 8000 	nop.w
 800d898:	ffc00000 	.word	0xffc00000
 800d89c:	41dfffff 	.word	0x41dfffff
 800d8a0:	94a03595 	.word	0x94a03595
 800d8a4:	3fcfffff 	.word	0x3fcfffff

0800d8a8 <_strtod_r>:
 800d8a8:	4b01      	ldr	r3, [pc, #4]	@ (800d8b0 <_strtod_r+0x8>)
 800d8aa:	f7ff ba19 	b.w	800cce0 <_strtod_l>
 800d8ae:	bf00      	nop
 800d8b0:	2000006c 	.word	0x2000006c

0800d8b4 <_strtol_l.constprop.0>:
 800d8b4:	2b24      	cmp	r3, #36	@ 0x24
 800d8b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ba:	4686      	mov	lr, r0
 800d8bc:	4690      	mov	r8, r2
 800d8be:	d801      	bhi.n	800d8c4 <_strtol_l.constprop.0+0x10>
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d106      	bne.n	800d8d2 <_strtol_l.constprop.0+0x1e>
 800d8c4:	f7fd fdac 	bl	800b420 <__errno>
 800d8c8:	2316      	movs	r3, #22
 800d8ca:	6003      	str	r3, [r0, #0]
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d2:	4834      	ldr	r0, [pc, #208]	@ (800d9a4 <_strtol_l.constprop.0+0xf0>)
 800d8d4:	460d      	mov	r5, r1
 800d8d6:	462a      	mov	r2, r5
 800d8d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8dc:	5d06      	ldrb	r6, [r0, r4]
 800d8de:	f016 0608 	ands.w	r6, r6, #8
 800d8e2:	d1f8      	bne.n	800d8d6 <_strtol_l.constprop.0+0x22>
 800d8e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d8e6:	d12d      	bne.n	800d944 <_strtol_l.constprop.0+0x90>
 800d8e8:	782c      	ldrb	r4, [r5, #0]
 800d8ea:	2601      	movs	r6, #1
 800d8ec:	1c95      	adds	r5, r2, #2
 800d8ee:	f033 0210 	bics.w	r2, r3, #16
 800d8f2:	d109      	bne.n	800d908 <_strtol_l.constprop.0+0x54>
 800d8f4:	2c30      	cmp	r4, #48	@ 0x30
 800d8f6:	d12a      	bne.n	800d94e <_strtol_l.constprop.0+0x9a>
 800d8f8:	782a      	ldrb	r2, [r5, #0]
 800d8fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8fe:	2a58      	cmp	r2, #88	@ 0x58
 800d900:	d125      	bne.n	800d94e <_strtol_l.constprop.0+0x9a>
 800d902:	786c      	ldrb	r4, [r5, #1]
 800d904:	2310      	movs	r3, #16
 800d906:	3502      	adds	r5, #2
 800d908:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d90c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d910:	2200      	movs	r2, #0
 800d912:	fbbc f9f3 	udiv	r9, ip, r3
 800d916:	4610      	mov	r0, r2
 800d918:	fb03 ca19 	mls	sl, r3, r9, ip
 800d91c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d920:	2f09      	cmp	r7, #9
 800d922:	d81b      	bhi.n	800d95c <_strtol_l.constprop.0+0xa8>
 800d924:	463c      	mov	r4, r7
 800d926:	42a3      	cmp	r3, r4
 800d928:	dd27      	ble.n	800d97a <_strtol_l.constprop.0+0xc6>
 800d92a:	1c57      	adds	r7, r2, #1
 800d92c:	d007      	beq.n	800d93e <_strtol_l.constprop.0+0x8a>
 800d92e:	4581      	cmp	r9, r0
 800d930:	d320      	bcc.n	800d974 <_strtol_l.constprop.0+0xc0>
 800d932:	d101      	bne.n	800d938 <_strtol_l.constprop.0+0x84>
 800d934:	45a2      	cmp	sl, r4
 800d936:	db1d      	blt.n	800d974 <_strtol_l.constprop.0+0xc0>
 800d938:	fb00 4003 	mla	r0, r0, r3, r4
 800d93c:	2201      	movs	r2, #1
 800d93e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d942:	e7eb      	b.n	800d91c <_strtol_l.constprop.0+0x68>
 800d944:	2c2b      	cmp	r4, #43	@ 0x2b
 800d946:	bf04      	itt	eq
 800d948:	782c      	ldrbeq	r4, [r5, #0]
 800d94a:	1c95      	addeq	r5, r2, #2
 800d94c:	e7cf      	b.n	800d8ee <_strtol_l.constprop.0+0x3a>
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1da      	bne.n	800d908 <_strtol_l.constprop.0+0x54>
 800d952:	2c30      	cmp	r4, #48	@ 0x30
 800d954:	bf0c      	ite	eq
 800d956:	2308      	moveq	r3, #8
 800d958:	230a      	movne	r3, #10
 800d95a:	e7d5      	b.n	800d908 <_strtol_l.constprop.0+0x54>
 800d95c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d960:	2f19      	cmp	r7, #25
 800d962:	d801      	bhi.n	800d968 <_strtol_l.constprop.0+0xb4>
 800d964:	3c37      	subs	r4, #55	@ 0x37
 800d966:	e7de      	b.n	800d926 <_strtol_l.constprop.0+0x72>
 800d968:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d96c:	2f19      	cmp	r7, #25
 800d96e:	d804      	bhi.n	800d97a <_strtol_l.constprop.0+0xc6>
 800d970:	3c57      	subs	r4, #87	@ 0x57
 800d972:	e7d8      	b.n	800d926 <_strtol_l.constprop.0+0x72>
 800d974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d978:	e7e1      	b.n	800d93e <_strtol_l.constprop.0+0x8a>
 800d97a:	1c53      	adds	r3, r2, #1
 800d97c:	d108      	bne.n	800d990 <_strtol_l.constprop.0+0xdc>
 800d97e:	2322      	movs	r3, #34	@ 0x22
 800d980:	f8ce 3000 	str.w	r3, [lr]
 800d984:	4660      	mov	r0, ip
 800d986:	f1b8 0f00 	cmp.w	r8, #0
 800d98a:	d0a0      	beq.n	800d8ce <_strtol_l.constprop.0+0x1a>
 800d98c:	1e69      	subs	r1, r5, #1
 800d98e:	e006      	b.n	800d99e <_strtol_l.constprop.0+0xea>
 800d990:	b106      	cbz	r6, 800d994 <_strtol_l.constprop.0+0xe0>
 800d992:	4240      	negs	r0, r0
 800d994:	f1b8 0f00 	cmp.w	r8, #0
 800d998:	d099      	beq.n	800d8ce <_strtol_l.constprop.0+0x1a>
 800d99a:	2a00      	cmp	r2, #0
 800d99c:	d1f6      	bne.n	800d98c <_strtol_l.constprop.0+0xd8>
 800d99e:	f8c8 1000 	str.w	r1, [r8]
 800d9a2:	e794      	b.n	800d8ce <_strtol_l.constprop.0+0x1a>
 800d9a4:	0800eea1 	.word	0x0800eea1

0800d9a8 <_strtol_r>:
 800d9a8:	f7ff bf84 	b.w	800d8b4 <_strtol_l.constprop.0>

0800d9ac <__ssputs_r>:
 800d9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b0:	688e      	ldr	r6, [r1, #8]
 800d9b2:	461f      	mov	r7, r3
 800d9b4:	42be      	cmp	r6, r7
 800d9b6:	680b      	ldr	r3, [r1, #0]
 800d9b8:	4682      	mov	sl, r0
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	4690      	mov	r8, r2
 800d9be:	d82d      	bhi.n	800da1c <__ssputs_r+0x70>
 800d9c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d9c8:	d026      	beq.n	800da18 <__ssputs_r+0x6c>
 800d9ca:	6965      	ldr	r5, [r4, #20]
 800d9cc:	6909      	ldr	r1, [r1, #16]
 800d9ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9d2:	eba3 0901 	sub.w	r9, r3, r1
 800d9d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9da:	1c7b      	adds	r3, r7, #1
 800d9dc:	444b      	add	r3, r9
 800d9de:	106d      	asrs	r5, r5, #1
 800d9e0:	429d      	cmp	r5, r3
 800d9e2:	bf38      	it	cc
 800d9e4:	461d      	movcc	r5, r3
 800d9e6:	0553      	lsls	r3, r2, #21
 800d9e8:	d527      	bpl.n	800da3a <__ssputs_r+0x8e>
 800d9ea:	4629      	mov	r1, r5
 800d9ec:	f7fe fc1c 	bl	800c228 <_malloc_r>
 800d9f0:	4606      	mov	r6, r0
 800d9f2:	b360      	cbz	r0, 800da4e <__ssputs_r+0xa2>
 800d9f4:	6921      	ldr	r1, [r4, #16]
 800d9f6:	464a      	mov	r2, r9
 800d9f8:	f7fd fd3f 	bl	800b47a <memcpy>
 800d9fc:	89a3      	ldrh	r3, [r4, #12]
 800d9fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da06:	81a3      	strh	r3, [r4, #12]
 800da08:	6126      	str	r6, [r4, #16]
 800da0a:	6165      	str	r5, [r4, #20]
 800da0c:	444e      	add	r6, r9
 800da0e:	eba5 0509 	sub.w	r5, r5, r9
 800da12:	6026      	str	r6, [r4, #0]
 800da14:	60a5      	str	r5, [r4, #8]
 800da16:	463e      	mov	r6, r7
 800da18:	42be      	cmp	r6, r7
 800da1a:	d900      	bls.n	800da1e <__ssputs_r+0x72>
 800da1c:	463e      	mov	r6, r7
 800da1e:	6820      	ldr	r0, [r4, #0]
 800da20:	4632      	mov	r2, r6
 800da22:	4641      	mov	r1, r8
 800da24:	f000 fb6a 	bl	800e0fc <memmove>
 800da28:	68a3      	ldr	r3, [r4, #8]
 800da2a:	1b9b      	subs	r3, r3, r6
 800da2c:	60a3      	str	r3, [r4, #8]
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	4433      	add	r3, r6
 800da32:	6023      	str	r3, [r4, #0]
 800da34:	2000      	movs	r0, #0
 800da36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da3a:	462a      	mov	r2, r5
 800da3c:	f000 ff41 	bl	800e8c2 <_realloc_r>
 800da40:	4606      	mov	r6, r0
 800da42:	2800      	cmp	r0, #0
 800da44:	d1e0      	bne.n	800da08 <__ssputs_r+0x5c>
 800da46:	6921      	ldr	r1, [r4, #16]
 800da48:	4650      	mov	r0, sl
 800da4a:	f7fe fb79 	bl	800c140 <_free_r>
 800da4e:	230c      	movs	r3, #12
 800da50:	f8ca 3000 	str.w	r3, [sl]
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da5a:	81a3      	strh	r3, [r4, #12]
 800da5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da60:	e7e9      	b.n	800da36 <__ssputs_r+0x8a>
	...

0800da64 <_svfiprintf_r>:
 800da64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da68:	4698      	mov	r8, r3
 800da6a:	898b      	ldrh	r3, [r1, #12]
 800da6c:	061b      	lsls	r3, r3, #24
 800da6e:	b09d      	sub	sp, #116	@ 0x74
 800da70:	4607      	mov	r7, r0
 800da72:	460d      	mov	r5, r1
 800da74:	4614      	mov	r4, r2
 800da76:	d510      	bpl.n	800da9a <_svfiprintf_r+0x36>
 800da78:	690b      	ldr	r3, [r1, #16]
 800da7a:	b973      	cbnz	r3, 800da9a <_svfiprintf_r+0x36>
 800da7c:	2140      	movs	r1, #64	@ 0x40
 800da7e:	f7fe fbd3 	bl	800c228 <_malloc_r>
 800da82:	6028      	str	r0, [r5, #0]
 800da84:	6128      	str	r0, [r5, #16]
 800da86:	b930      	cbnz	r0, 800da96 <_svfiprintf_r+0x32>
 800da88:	230c      	movs	r3, #12
 800da8a:	603b      	str	r3, [r7, #0]
 800da8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da90:	b01d      	add	sp, #116	@ 0x74
 800da92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da96:	2340      	movs	r3, #64	@ 0x40
 800da98:	616b      	str	r3, [r5, #20]
 800da9a:	2300      	movs	r3, #0
 800da9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800da9e:	2320      	movs	r3, #32
 800daa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800daa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800daa8:	2330      	movs	r3, #48	@ 0x30
 800daaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc48 <_svfiprintf_r+0x1e4>
 800daae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dab2:	f04f 0901 	mov.w	r9, #1
 800dab6:	4623      	mov	r3, r4
 800dab8:	469a      	mov	sl, r3
 800daba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dabe:	b10a      	cbz	r2, 800dac4 <_svfiprintf_r+0x60>
 800dac0:	2a25      	cmp	r2, #37	@ 0x25
 800dac2:	d1f9      	bne.n	800dab8 <_svfiprintf_r+0x54>
 800dac4:	ebba 0b04 	subs.w	fp, sl, r4
 800dac8:	d00b      	beq.n	800dae2 <_svfiprintf_r+0x7e>
 800daca:	465b      	mov	r3, fp
 800dacc:	4622      	mov	r2, r4
 800dace:	4629      	mov	r1, r5
 800dad0:	4638      	mov	r0, r7
 800dad2:	f7ff ff6b 	bl	800d9ac <__ssputs_r>
 800dad6:	3001      	adds	r0, #1
 800dad8:	f000 80a7 	beq.w	800dc2a <_svfiprintf_r+0x1c6>
 800dadc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dade:	445a      	add	r2, fp
 800dae0:	9209      	str	r2, [sp, #36]	@ 0x24
 800dae2:	f89a 3000 	ldrb.w	r3, [sl]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f000 809f 	beq.w	800dc2a <_svfiprintf_r+0x1c6>
 800daec:	2300      	movs	r3, #0
 800daee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800daf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daf6:	f10a 0a01 	add.w	sl, sl, #1
 800dafa:	9304      	str	r3, [sp, #16]
 800dafc:	9307      	str	r3, [sp, #28]
 800dafe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db02:	931a      	str	r3, [sp, #104]	@ 0x68
 800db04:	4654      	mov	r4, sl
 800db06:	2205      	movs	r2, #5
 800db08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db0c:	484e      	ldr	r0, [pc, #312]	@ (800dc48 <_svfiprintf_r+0x1e4>)
 800db0e:	f7f2 fb87 	bl	8000220 <memchr>
 800db12:	9a04      	ldr	r2, [sp, #16]
 800db14:	b9d8      	cbnz	r0, 800db4e <_svfiprintf_r+0xea>
 800db16:	06d0      	lsls	r0, r2, #27
 800db18:	bf44      	itt	mi
 800db1a:	2320      	movmi	r3, #32
 800db1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db20:	0711      	lsls	r1, r2, #28
 800db22:	bf44      	itt	mi
 800db24:	232b      	movmi	r3, #43	@ 0x2b
 800db26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db2a:	f89a 3000 	ldrb.w	r3, [sl]
 800db2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800db30:	d015      	beq.n	800db5e <_svfiprintf_r+0xfa>
 800db32:	9a07      	ldr	r2, [sp, #28]
 800db34:	4654      	mov	r4, sl
 800db36:	2000      	movs	r0, #0
 800db38:	f04f 0c0a 	mov.w	ip, #10
 800db3c:	4621      	mov	r1, r4
 800db3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db42:	3b30      	subs	r3, #48	@ 0x30
 800db44:	2b09      	cmp	r3, #9
 800db46:	d94b      	bls.n	800dbe0 <_svfiprintf_r+0x17c>
 800db48:	b1b0      	cbz	r0, 800db78 <_svfiprintf_r+0x114>
 800db4a:	9207      	str	r2, [sp, #28]
 800db4c:	e014      	b.n	800db78 <_svfiprintf_r+0x114>
 800db4e:	eba0 0308 	sub.w	r3, r0, r8
 800db52:	fa09 f303 	lsl.w	r3, r9, r3
 800db56:	4313      	orrs	r3, r2
 800db58:	9304      	str	r3, [sp, #16]
 800db5a:	46a2      	mov	sl, r4
 800db5c:	e7d2      	b.n	800db04 <_svfiprintf_r+0xa0>
 800db5e:	9b03      	ldr	r3, [sp, #12]
 800db60:	1d19      	adds	r1, r3, #4
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	9103      	str	r1, [sp, #12]
 800db66:	2b00      	cmp	r3, #0
 800db68:	bfbb      	ittet	lt
 800db6a:	425b      	neglt	r3, r3
 800db6c:	f042 0202 	orrlt.w	r2, r2, #2
 800db70:	9307      	strge	r3, [sp, #28]
 800db72:	9307      	strlt	r3, [sp, #28]
 800db74:	bfb8      	it	lt
 800db76:	9204      	strlt	r2, [sp, #16]
 800db78:	7823      	ldrb	r3, [r4, #0]
 800db7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800db7c:	d10a      	bne.n	800db94 <_svfiprintf_r+0x130>
 800db7e:	7863      	ldrb	r3, [r4, #1]
 800db80:	2b2a      	cmp	r3, #42	@ 0x2a
 800db82:	d132      	bne.n	800dbea <_svfiprintf_r+0x186>
 800db84:	9b03      	ldr	r3, [sp, #12]
 800db86:	1d1a      	adds	r2, r3, #4
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	9203      	str	r2, [sp, #12]
 800db8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db90:	3402      	adds	r4, #2
 800db92:	9305      	str	r3, [sp, #20]
 800db94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc58 <_svfiprintf_r+0x1f4>
 800db98:	7821      	ldrb	r1, [r4, #0]
 800db9a:	2203      	movs	r2, #3
 800db9c:	4650      	mov	r0, sl
 800db9e:	f7f2 fb3f 	bl	8000220 <memchr>
 800dba2:	b138      	cbz	r0, 800dbb4 <_svfiprintf_r+0x150>
 800dba4:	9b04      	ldr	r3, [sp, #16]
 800dba6:	eba0 000a 	sub.w	r0, r0, sl
 800dbaa:	2240      	movs	r2, #64	@ 0x40
 800dbac:	4082      	lsls	r2, r0
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	3401      	adds	r4, #1
 800dbb2:	9304      	str	r3, [sp, #16]
 800dbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb8:	4824      	ldr	r0, [pc, #144]	@ (800dc4c <_svfiprintf_r+0x1e8>)
 800dbba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbbe:	2206      	movs	r2, #6
 800dbc0:	f7f2 fb2e 	bl	8000220 <memchr>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d036      	beq.n	800dc36 <_svfiprintf_r+0x1d2>
 800dbc8:	4b21      	ldr	r3, [pc, #132]	@ (800dc50 <_svfiprintf_r+0x1ec>)
 800dbca:	bb1b      	cbnz	r3, 800dc14 <_svfiprintf_r+0x1b0>
 800dbcc:	9b03      	ldr	r3, [sp, #12]
 800dbce:	3307      	adds	r3, #7
 800dbd0:	f023 0307 	bic.w	r3, r3, #7
 800dbd4:	3308      	adds	r3, #8
 800dbd6:	9303      	str	r3, [sp, #12]
 800dbd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbda:	4433      	add	r3, r6
 800dbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbde:	e76a      	b.n	800dab6 <_svfiprintf_r+0x52>
 800dbe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	e7a8      	b.n	800db3c <_svfiprintf_r+0xd8>
 800dbea:	2300      	movs	r3, #0
 800dbec:	3401      	adds	r4, #1
 800dbee:	9305      	str	r3, [sp, #20]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	f04f 0c0a 	mov.w	ip, #10
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbfc:	3a30      	subs	r2, #48	@ 0x30
 800dbfe:	2a09      	cmp	r2, #9
 800dc00:	d903      	bls.n	800dc0a <_svfiprintf_r+0x1a6>
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d0c6      	beq.n	800db94 <_svfiprintf_r+0x130>
 800dc06:	9105      	str	r1, [sp, #20]
 800dc08:	e7c4      	b.n	800db94 <_svfiprintf_r+0x130>
 800dc0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc0e:	4604      	mov	r4, r0
 800dc10:	2301      	movs	r3, #1
 800dc12:	e7f0      	b.n	800dbf6 <_svfiprintf_r+0x192>
 800dc14:	ab03      	add	r3, sp, #12
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	462a      	mov	r2, r5
 800dc1a:	4b0e      	ldr	r3, [pc, #56]	@ (800dc54 <_svfiprintf_r+0x1f0>)
 800dc1c:	a904      	add	r1, sp, #16
 800dc1e:	4638      	mov	r0, r7
 800dc20:	f7fc fb60 	bl	800a2e4 <_printf_float>
 800dc24:	1c42      	adds	r2, r0, #1
 800dc26:	4606      	mov	r6, r0
 800dc28:	d1d6      	bne.n	800dbd8 <_svfiprintf_r+0x174>
 800dc2a:	89ab      	ldrh	r3, [r5, #12]
 800dc2c:	065b      	lsls	r3, r3, #25
 800dc2e:	f53f af2d 	bmi.w	800da8c <_svfiprintf_r+0x28>
 800dc32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc34:	e72c      	b.n	800da90 <_svfiprintf_r+0x2c>
 800dc36:	ab03      	add	r3, sp, #12
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	462a      	mov	r2, r5
 800dc3c:	4b05      	ldr	r3, [pc, #20]	@ (800dc54 <_svfiprintf_r+0x1f0>)
 800dc3e:	a904      	add	r1, sp, #16
 800dc40:	4638      	mov	r0, r7
 800dc42:	f7fc fde7 	bl	800a814 <_printf_i>
 800dc46:	e7ed      	b.n	800dc24 <_svfiprintf_r+0x1c0>
 800dc48:	0800efa1 	.word	0x0800efa1
 800dc4c:	0800efab 	.word	0x0800efab
 800dc50:	0800a2e5 	.word	0x0800a2e5
 800dc54:	0800d9ad 	.word	0x0800d9ad
 800dc58:	0800efa7 	.word	0x0800efa7

0800dc5c <__sfputc_r>:
 800dc5c:	6893      	ldr	r3, [r2, #8]
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	b410      	push	{r4}
 800dc64:	6093      	str	r3, [r2, #8]
 800dc66:	da08      	bge.n	800dc7a <__sfputc_r+0x1e>
 800dc68:	6994      	ldr	r4, [r2, #24]
 800dc6a:	42a3      	cmp	r3, r4
 800dc6c:	db01      	blt.n	800dc72 <__sfputc_r+0x16>
 800dc6e:	290a      	cmp	r1, #10
 800dc70:	d103      	bne.n	800dc7a <__sfputc_r+0x1e>
 800dc72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc76:	f7fd ba96 	b.w	800b1a6 <__swbuf_r>
 800dc7a:	6813      	ldr	r3, [r2, #0]
 800dc7c:	1c58      	adds	r0, r3, #1
 800dc7e:	6010      	str	r0, [r2, #0]
 800dc80:	7019      	strb	r1, [r3, #0]
 800dc82:	4608      	mov	r0, r1
 800dc84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <__sfputs_r>:
 800dc8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	460f      	mov	r7, r1
 800dc90:	4614      	mov	r4, r2
 800dc92:	18d5      	adds	r5, r2, r3
 800dc94:	42ac      	cmp	r4, r5
 800dc96:	d101      	bne.n	800dc9c <__sfputs_r+0x12>
 800dc98:	2000      	movs	r0, #0
 800dc9a:	e007      	b.n	800dcac <__sfputs_r+0x22>
 800dc9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dca0:	463a      	mov	r2, r7
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7ff ffda 	bl	800dc5c <__sfputc_r>
 800dca8:	1c43      	adds	r3, r0, #1
 800dcaa:	d1f3      	bne.n	800dc94 <__sfputs_r+0xa>
 800dcac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dcb0 <_vfiprintf_r>:
 800dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	460d      	mov	r5, r1
 800dcb6:	b09d      	sub	sp, #116	@ 0x74
 800dcb8:	4614      	mov	r4, r2
 800dcba:	4698      	mov	r8, r3
 800dcbc:	4606      	mov	r6, r0
 800dcbe:	b118      	cbz	r0, 800dcc8 <_vfiprintf_r+0x18>
 800dcc0:	6a03      	ldr	r3, [r0, #32]
 800dcc2:	b90b      	cbnz	r3, 800dcc8 <_vfiprintf_r+0x18>
 800dcc4:	f7fd f966 	bl	800af94 <__sinit>
 800dcc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcca:	07d9      	lsls	r1, r3, #31
 800dccc:	d405      	bmi.n	800dcda <_vfiprintf_r+0x2a>
 800dcce:	89ab      	ldrh	r3, [r5, #12]
 800dcd0:	059a      	lsls	r2, r3, #22
 800dcd2:	d402      	bmi.n	800dcda <_vfiprintf_r+0x2a>
 800dcd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcd6:	f7fd fbce 	bl	800b476 <__retarget_lock_acquire_recursive>
 800dcda:	89ab      	ldrh	r3, [r5, #12]
 800dcdc:	071b      	lsls	r3, r3, #28
 800dcde:	d501      	bpl.n	800dce4 <_vfiprintf_r+0x34>
 800dce0:	692b      	ldr	r3, [r5, #16]
 800dce2:	b99b      	cbnz	r3, 800dd0c <_vfiprintf_r+0x5c>
 800dce4:	4629      	mov	r1, r5
 800dce6:	4630      	mov	r0, r6
 800dce8:	f7fd fa9c 	bl	800b224 <__swsetup_r>
 800dcec:	b170      	cbz	r0, 800dd0c <_vfiprintf_r+0x5c>
 800dcee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcf0:	07dc      	lsls	r4, r3, #31
 800dcf2:	d504      	bpl.n	800dcfe <_vfiprintf_r+0x4e>
 800dcf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcf8:	b01d      	add	sp, #116	@ 0x74
 800dcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcfe:	89ab      	ldrh	r3, [r5, #12]
 800dd00:	0598      	lsls	r0, r3, #22
 800dd02:	d4f7      	bmi.n	800dcf4 <_vfiprintf_r+0x44>
 800dd04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd06:	f7fd fbb7 	bl	800b478 <__retarget_lock_release_recursive>
 800dd0a:	e7f3      	b.n	800dcf4 <_vfiprintf_r+0x44>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd10:	2320      	movs	r3, #32
 800dd12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd16:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd1a:	2330      	movs	r3, #48	@ 0x30
 800dd1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800decc <_vfiprintf_r+0x21c>
 800dd20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd24:	f04f 0901 	mov.w	r9, #1
 800dd28:	4623      	mov	r3, r4
 800dd2a:	469a      	mov	sl, r3
 800dd2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd30:	b10a      	cbz	r2, 800dd36 <_vfiprintf_r+0x86>
 800dd32:	2a25      	cmp	r2, #37	@ 0x25
 800dd34:	d1f9      	bne.n	800dd2a <_vfiprintf_r+0x7a>
 800dd36:	ebba 0b04 	subs.w	fp, sl, r4
 800dd3a:	d00b      	beq.n	800dd54 <_vfiprintf_r+0xa4>
 800dd3c:	465b      	mov	r3, fp
 800dd3e:	4622      	mov	r2, r4
 800dd40:	4629      	mov	r1, r5
 800dd42:	4630      	mov	r0, r6
 800dd44:	f7ff ffa1 	bl	800dc8a <__sfputs_r>
 800dd48:	3001      	adds	r0, #1
 800dd4a:	f000 80a7 	beq.w	800de9c <_vfiprintf_r+0x1ec>
 800dd4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd50:	445a      	add	r2, fp
 800dd52:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd54:	f89a 3000 	ldrb.w	r3, [sl]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f000 809f 	beq.w	800de9c <_vfiprintf_r+0x1ec>
 800dd5e:	2300      	movs	r3, #0
 800dd60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd68:	f10a 0a01 	add.w	sl, sl, #1
 800dd6c:	9304      	str	r3, [sp, #16]
 800dd6e:	9307      	str	r3, [sp, #28]
 800dd70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd74:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd76:	4654      	mov	r4, sl
 800dd78:	2205      	movs	r2, #5
 800dd7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd7e:	4853      	ldr	r0, [pc, #332]	@ (800decc <_vfiprintf_r+0x21c>)
 800dd80:	f7f2 fa4e 	bl	8000220 <memchr>
 800dd84:	9a04      	ldr	r2, [sp, #16]
 800dd86:	b9d8      	cbnz	r0, 800ddc0 <_vfiprintf_r+0x110>
 800dd88:	06d1      	lsls	r1, r2, #27
 800dd8a:	bf44      	itt	mi
 800dd8c:	2320      	movmi	r3, #32
 800dd8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd92:	0713      	lsls	r3, r2, #28
 800dd94:	bf44      	itt	mi
 800dd96:	232b      	movmi	r3, #43	@ 0x2b
 800dd98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd9c:	f89a 3000 	ldrb.w	r3, [sl]
 800dda0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dda2:	d015      	beq.n	800ddd0 <_vfiprintf_r+0x120>
 800dda4:	9a07      	ldr	r2, [sp, #28]
 800dda6:	4654      	mov	r4, sl
 800dda8:	2000      	movs	r0, #0
 800ddaa:	f04f 0c0a 	mov.w	ip, #10
 800ddae:	4621      	mov	r1, r4
 800ddb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddb4:	3b30      	subs	r3, #48	@ 0x30
 800ddb6:	2b09      	cmp	r3, #9
 800ddb8:	d94b      	bls.n	800de52 <_vfiprintf_r+0x1a2>
 800ddba:	b1b0      	cbz	r0, 800ddea <_vfiprintf_r+0x13a>
 800ddbc:	9207      	str	r2, [sp, #28]
 800ddbe:	e014      	b.n	800ddea <_vfiprintf_r+0x13a>
 800ddc0:	eba0 0308 	sub.w	r3, r0, r8
 800ddc4:	fa09 f303 	lsl.w	r3, r9, r3
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	9304      	str	r3, [sp, #16]
 800ddcc:	46a2      	mov	sl, r4
 800ddce:	e7d2      	b.n	800dd76 <_vfiprintf_r+0xc6>
 800ddd0:	9b03      	ldr	r3, [sp, #12]
 800ddd2:	1d19      	adds	r1, r3, #4
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	9103      	str	r1, [sp, #12]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	bfbb      	ittet	lt
 800dddc:	425b      	neglt	r3, r3
 800ddde:	f042 0202 	orrlt.w	r2, r2, #2
 800dde2:	9307      	strge	r3, [sp, #28]
 800dde4:	9307      	strlt	r3, [sp, #28]
 800dde6:	bfb8      	it	lt
 800dde8:	9204      	strlt	r2, [sp, #16]
 800ddea:	7823      	ldrb	r3, [r4, #0]
 800ddec:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddee:	d10a      	bne.n	800de06 <_vfiprintf_r+0x156>
 800ddf0:	7863      	ldrb	r3, [r4, #1]
 800ddf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddf4:	d132      	bne.n	800de5c <_vfiprintf_r+0x1ac>
 800ddf6:	9b03      	ldr	r3, [sp, #12]
 800ddf8:	1d1a      	adds	r2, r3, #4
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	9203      	str	r2, [sp, #12]
 800ddfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de02:	3402      	adds	r4, #2
 800de04:	9305      	str	r3, [sp, #20]
 800de06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dedc <_vfiprintf_r+0x22c>
 800de0a:	7821      	ldrb	r1, [r4, #0]
 800de0c:	2203      	movs	r2, #3
 800de0e:	4650      	mov	r0, sl
 800de10:	f7f2 fa06 	bl	8000220 <memchr>
 800de14:	b138      	cbz	r0, 800de26 <_vfiprintf_r+0x176>
 800de16:	9b04      	ldr	r3, [sp, #16]
 800de18:	eba0 000a 	sub.w	r0, r0, sl
 800de1c:	2240      	movs	r2, #64	@ 0x40
 800de1e:	4082      	lsls	r2, r0
 800de20:	4313      	orrs	r3, r2
 800de22:	3401      	adds	r4, #1
 800de24:	9304      	str	r3, [sp, #16]
 800de26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de2a:	4829      	ldr	r0, [pc, #164]	@ (800ded0 <_vfiprintf_r+0x220>)
 800de2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de30:	2206      	movs	r2, #6
 800de32:	f7f2 f9f5 	bl	8000220 <memchr>
 800de36:	2800      	cmp	r0, #0
 800de38:	d03f      	beq.n	800deba <_vfiprintf_r+0x20a>
 800de3a:	4b26      	ldr	r3, [pc, #152]	@ (800ded4 <_vfiprintf_r+0x224>)
 800de3c:	bb1b      	cbnz	r3, 800de86 <_vfiprintf_r+0x1d6>
 800de3e:	9b03      	ldr	r3, [sp, #12]
 800de40:	3307      	adds	r3, #7
 800de42:	f023 0307 	bic.w	r3, r3, #7
 800de46:	3308      	adds	r3, #8
 800de48:	9303      	str	r3, [sp, #12]
 800de4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de4c:	443b      	add	r3, r7
 800de4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800de50:	e76a      	b.n	800dd28 <_vfiprintf_r+0x78>
 800de52:	fb0c 3202 	mla	r2, ip, r2, r3
 800de56:	460c      	mov	r4, r1
 800de58:	2001      	movs	r0, #1
 800de5a:	e7a8      	b.n	800ddae <_vfiprintf_r+0xfe>
 800de5c:	2300      	movs	r3, #0
 800de5e:	3401      	adds	r4, #1
 800de60:	9305      	str	r3, [sp, #20]
 800de62:	4619      	mov	r1, r3
 800de64:	f04f 0c0a 	mov.w	ip, #10
 800de68:	4620      	mov	r0, r4
 800de6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de6e:	3a30      	subs	r2, #48	@ 0x30
 800de70:	2a09      	cmp	r2, #9
 800de72:	d903      	bls.n	800de7c <_vfiprintf_r+0x1cc>
 800de74:	2b00      	cmp	r3, #0
 800de76:	d0c6      	beq.n	800de06 <_vfiprintf_r+0x156>
 800de78:	9105      	str	r1, [sp, #20]
 800de7a:	e7c4      	b.n	800de06 <_vfiprintf_r+0x156>
 800de7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800de80:	4604      	mov	r4, r0
 800de82:	2301      	movs	r3, #1
 800de84:	e7f0      	b.n	800de68 <_vfiprintf_r+0x1b8>
 800de86:	ab03      	add	r3, sp, #12
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	462a      	mov	r2, r5
 800de8c:	4b12      	ldr	r3, [pc, #72]	@ (800ded8 <_vfiprintf_r+0x228>)
 800de8e:	a904      	add	r1, sp, #16
 800de90:	4630      	mov	r0, r6
 800de92:	f7fc fa27 	bl	800a2e4 <_printf_float>
 800de96:	4607      	mov	r7, r0
 800de98:	1c78      	adds	r0, r7, #1
 800de9a:	d1d6      	bne.n	800de4a <_vfiprintf_r+0x19a>
 800de9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de9e:	07d9      	lsls	r1, r3, #31
 800dea0:	d405      	bmi.n	800deae <_vfiprintf_r+0x1fe>
 800dea2:	89ab      	ldrh	r3, [r5, #12]
 800dea4:	059a      	lsls	r2, r3, #22
 800dea6:	d402      	bmi.n	800deae <_vfiprintf_r+0x1fe>
 800dea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800deaa:	f7fd fae5 	bl	800b478 <__retarget_lock_release_recursive>
 800deae:	89ab      	ldrh	r3, [r5, #12]
 800deb0:	065b      	lsls	r3, r3, #25
 800deb2:	f53f af1f 	bmi.w	800dcf4 <_vfiprintf_r+0x44>
 800deb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800deb8:	e71e      	b.n	800dcf8 <_vfiprintf_r+0x48>
 800deba:	ab03      	add	r3, sp, #12
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	462a      	mov	r2, r5
 800dec0:	4b05      	ldr	r3, [pc, #20]	@ (800ded8 <_vfiprintf_r+0x228>)
 800dec2:	a904      	add	r1, sp, #16
 800dec4:	4630      	mov	r0, r6
 800dec6:	f7fc fca5 	bl	800a814 <_printf_i>
 800deca:	e7e4      	b.n	800de96 <_vfiprintf_r+0x1e6>
 800decc:	0800efa1 	.word	0x0800efa1
 800ded0:	0800efab 	.word	0x0800efab
 800ded4:	0800a2e5 	.word	0x0800a2e5
 800ded8:	0800dc8b 	.word	0x0800dc8b
 800dedc:	0800efa7 	.word	0x0800efa7

0800dee0 <__sflush_r>:
 800dee0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dee8:	0716      	lsls	r6, r2, #28
 800deea:	4605      	mov	r5, r0
 800deec:	460c      	mov	r4, r1
 800deee:	d454      	bmi.n	800df9a <__sflush_r+0xba>
 800def0:	684b      	ldr	r3, [r1, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	dc02      	bgt.n	800defc <__sflush_r+0x1c>
 800def6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800def8:	2b00      	cmp	r3, #0
 800defa:	dd48      	ble.n	800df8e <__sflush_r+0xae>
 800defc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800defe:	2e00      	cmp	r6, #0
 800df00:	d045      	beq.n	800df8e <__sflush_r+0xae>
 800df02:	2300      	movs	r3, #0
 800df04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800df08:	682f      	ldr	r7, [r5, #0]
 800df0a:	6a21      	ldr	r1, [r4, #32]
 800df0c:	602b      	str	r3, [r5, #0]
 800df0e:	d030      	beq.n	800df72 <__sflush_r+0x92>
 800df10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800df12:	89a3      	ldrh	r3, [r4, #12]
 800df14:	0759      	lsls	r1, r3, #29
 800df16:	d505      	bpl.n	800df24 <__sflush_r+0x44>
 800df18:	6863      	ldr	r3, [r4, #4]
 800df1a:	1ad2      	subs	r2, r2, r3
 800df1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800df1e:	b10b      	cbz	r3, 800df24 <__sflush_r+0x44>
 800df20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800df22:	1ad2      	subs	r2, r2, r3
 800df24:	2300      	movs	r3, #0
 800df26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df28:	6a21      	ldr	r1, [r4, #32]
 800df2a:	4628      	mov	r0, r5
 800df2c:	47b0      	blx	r6
 800df2e:	1c43      	adds	r3, r0, #1
 800df30:	89a3      	ldrh	r3, [r4, #12]
 800df32:	d106      	bne.n	800df42 <__sflush_r+0x62>
 800df34:	6829      	ldr	r1, [r5, #0]
 800df36:	291d      	cmp	r1, #29
 800df38:	d82b      	bhi.n	800df92 <__sflush_r+0xb2>
 800df3a:	4a2a      	ldr	r2, [pc, #168]	@ (800dfe4 <__sflush_r+0x104>)
 800df3c:	410a      	asrs	r2, r1
 800df3e:	07d6      	lsls	r6, r2, #31
 800df40:	d427      	bmi.n	800df92 <__sflush_r+0xb2>
 800df42:	2200      	movs	r2, #0
 800df44:	6062      	str	r2, [r4, #4]
 800df46:	04d9      	lsls	r1, r3, #19
 800df48:	6922      	ldr	r2, [r4, #16]
 800df4a:	6022      	str	r2, [r4, #0]
 800df4c:	d504      	bpl.n	800df58 <__sflush_r+0x78>
 800df4e:	1c42      	adds	r2, r0, #1
 800df50:	d101      	bne.n	800df56 <__sflush_r+0x76>
 800df52:	682b      	ldr	r3, [r5, #0]
 800df54:	b903      	cbnz	r3, 800df58 <__sflush_r+0x78>
 800df56:	6560      	str	r0, [r4, #84]	@ 0x54
 800df58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df5a:	602f      	str	r7, [r5, #0]
 800df5c:	b1b9      	cbz	r1, 800df8e <__sflush_r+0xae>
 800df5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df62:	4299      	cmp	r1, r3
 800df64:	d002      	beq.n	800df6c <__sflush_r+0x8c>
 800df66:	4628      	mov	r0, r5
 800df68:	f7fe f8ea 	bl	800c140 <_free_r>
 800df6c:	2300      	movs	r3, #0
 800df6e:	6363      	str	r3, [r4, #52]	@ 0x34
 800df70:	e00d      	b.n	800df8e <__sflush_r+0xae>
 800df72:	2301      	movs	r3, #1
 800df74:	4628      	mov	r0, r5
 800df76:	47b0      	blx	r6
 800df78:	4602      	mov	r2, r0
 800df7a:	1c50      	adds	r0, r2, #1
 800df7c:	d1c9      	bne.n	800df12 <__sflush_r+0x32>
 800df7e:	682b      	ldr	r3, [r5, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d0c6      	beq.n	800df12 <__sflush_r+0x32>
 800df84:	2b1d      	cmp	r3, #29
 800df86:	d001      	beq.n	800df8c <__sflush_r+0xac>
 800df88:	2b16      	cmp	r3, #22
 800df8a:	d11e      	bne.n	800dfca <__sflush_r+0xea>
 800df8c:	602f      	str	r7, [r5, #0]
 800df8e:	2000      	movs	r0, #0
 800df90:	e022      	b.n	800dfd8 <__sflush_r+0xf8>
 800df92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df96:	b21b      	sxth	r3, r3
 800df98:	e01b      	b.n	800dfd2 <__sflush_r+0xf2>
 800df9a:	690f      	ldr	r7, [r1, #16]
 800df9c:	2f00      	cmp	r7, #0
 800df9e:	d0f6      	beq.n	800df8e <__sflush_r+0xae>
 800dfa0:	0793      	lsls	r3, r2, #30
 800dfa2:	680e      	ldr	r6, [r1, #0]
 800dfa4:	bf08      	it	eq
 800dfa6:	694b      	ldreq	r3, [r1, #20]
 800dfa8:	600f      	str	r7, [r1, #0]
 800dfaa:	bf18      	it	ne
 800dfac:	2300      	movne	r3, #0
 800dfae:	eba6 0807 	sub.w	r8, r6, r7
 800dfb2:	608b      	str	r3, [r1, #8]
 800dfb4:	f1b8 0f00 	cmp.w	r8, #0
 800dfb8:	dde9      	ble.n	800df8e <__sflush_r+0xae>
 800dfba:	6a21      	ldr	r1, [r4, #32]
 800dfbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dfbe:	4643      	mov	r3, r8
 800dfc0:	463a      	mov	r2, r7
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	47b0      	blx	r6
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	dc08      	bgt.n	800dfdc <__sflush_r+0xfc>
 800dfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfd2:	81a3      	strh	r3, [r4, #12]
 800dfd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfdc:	4407      	add	r7, r0
 800dfde:	eba8 0800 	sub.w	r8, r8, r0
 800dfe2:	e7e7      	b.n	800dfb4 <__sflush_r+0xd4>
 800dfe4:	dfbffffe 	.word	0xdfbffffe

0800dfe8 <_fflush_r>:
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	690b      	ldr	r3, [r1, #16]
 800dfec:	4605      	mov	r5, r0
 800dfee:	460c      	mov	r4, r1
 800dff0:	b913      	cbnz	r3, 800dff8 <_fflush_r+0x10>
 800dff2:	2500      	movs	r5, #0
 800dff4:	4628      	mov	r0, r5
 800dff6:	bd38      	pop	{r3, r4, r5, pc}
 800dff8:	b118      	cbz	r0, 800e002 <_fflush_r+0x1a>
 800dffa:	6a03      	ldr	r3, [r0, #32]
 800dffc:	b90b      	cbnz	r3, 800e002 <_fflush_r+0x1a>
 800dffe:	f7fc ffc9 	bl	800af94 <__sinit>
 800e002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d0f3      	beq.n	800dff2 <_fflush_r+0xa>
 800e00a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e00c:	07d0      	lsls	r0, r2, #31
 800e00e:	d404      	bmi.n	800e01a <_fflush_r+0x32>
 800e010:	0599      	lsls	r1, r3, #22
 800e012:	d402      	bmi.n	800e01a <_fflush_r+0x32>
 800e014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e016:	f7fd fa2e 	bl	800b476 <__retarget_lock_acquire_recursive>
 800e01a:	4628      	mov	r0, r5
 800e01c:	4621      	mov	r1, r4
 800e01e:	f7ff ff5f 	bl	800dee0 <__sflush_r>
 800e022:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e024:	07da      	lsls	r2, r3, #31
 800e026:	4605      	mov	r5, r0
 800e028:	d4e4      	bmi.n	800dff4 <_fflush_r+0xc>
 800e02a:	89a3      	ldrh	r3, [r4, #12]
 800e02c:	059b      	lsls	r3, r3, #22
 800e02e:	d4e1      	bmi.n	800dff4 <_fflush_r+0xc>
 800e030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e032:	f7fd fa21 	bl	800b478 <__retarget_lock_release_recursive>
 800e036:	e7dd      	b.n	800dff4 <_fflush_r+0xc>

0800e038 <__swhatbuf_r>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	460c      	mov	r4, r1
 800e03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e040:	2900      	cmp	r1, #0
 800e042:	b096      	sub	sp, #88	@ 0x58
 800e044:	4615      	mov	r5, r2
 800e046:	461e      	mov	r6, r3
 800e048:	da0d      	bge.n	800e066 <__swhatbuf_r+0x2e>
 800e04a:	89a3      	ldrh	r3, [r4, #12]
 800e04c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e050:	f04f 0100 	mov.w	r1, #0
 800e054:	bf14      	ite	ne
 800e056:	2340      	movne	r3, #64	@ 0x40
 800e058:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e05c:	2000      	movs	r0, #0
 800e05e:	6031      	str	r1, [r6, #0]
 800e060:	602b      	str	r3, [r5, #0]
 800e062:	b016      	add	sp, #88	@ 0x58
 800e064:	bd70      	pop	{r4, r5, r6, pc}
 800e066:	466a      	mov	r2, sp
 800e068:	f000 f874 	bl	800e154 <_fstat_r>
 800e06c:	2800      	cmp	r0, #0
 800e06e:	dbec      	blt.n	800e04a <__swhatbuf_r+0x12>
 800e070:	9901      	ldr	r1, [sp, #4]
 800e072:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e076:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e07a:	4259      	negs	r1, r3
 800e07c:	4159      	adcs	r1, r3
 800e07e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e082:	e7eb      	b.n	800e05c <__swhatbuf_r+0x24>

0800e084 <__smakebuf_r>:
 800e084:	898b      	ldrh	r3, [r1, #12]
 800e086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e088:	079d      	lsls	r5, r3, #30
 800e08a:	4606      	mov	r6, r0
 800e08c:	460c      	mov	r4, r1
 800e08e:	d507      	bpl.n	800e0a0 <__smakebuf_r+0x1c>
 800e090:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	6123      	str	r3, [r4, #16]
 800e098:	2301      	movs	r3, #1
 800e09a:	6163      	str	r3, [r4, #20]
 800e09c:	b003      	add	sp, #12
 800e09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0a0:	ab01      	add	r3, sp, #4
 800e0a2:	466a      	mov	r2, sp
 800e0a4:	f7ff ffc8 	bl	800e038 <__swhatbuf_r>
 800e0a8:	9f00      	ldr	r7, [sp, #0]
 800e0aa:	4605      	mov	r5, r0
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	f7fe f8ba 	bl	800c228 <_malloc_r>
 800e0b4:	b948      	cbnz	r0, 800e0ca <__smakebuf_r+0x46>
 800e0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ba:	059a      	lsls	r2, r3, #22
 800e0bc:	d4ee      	bmi.n	800e09c <__smakebuf_r+0x18>
 800e0be:	f023 0303 	bic.w	r3, r3, #3
 800e0c2:	f043 0302 	orr.w	r3, r3, #2
 800e0c6:	81a3      	strh	r3, [r4, #12]
 800e0c8:	e7e2      	b.n	800e090 <__smakebuf_r+0xc>
 800e0ca:	89a3      	ldrh	r3, [r4, #12]
 800e0cc:	6020      	str	r0, [r4, #0]
 800e0ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0d2:	81a3      	strh	r3, [r4, #12]
 800e0d4:	9b01      	ldr	r3, [sp, #4]
 800e0d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e0da:	b15b      	cbz	r3, 800e0f4 <__smakebuf_r+0x70>
 800e0dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	f000 f849 	bl	800e178 <_isatty_r>
 800e0e6:	b128      	cbz	r0, 800e0f4 <__smakebuf_r+0x70>
 800e0e8:	89a3      	ldrh	r3, [r4, #12]
 800e0ea:	f023 0303 	bic.w	r3, r3, #3
 800e0ee:	f043 0301 	orr.w	r3, r3, #1
 800e0f2:	81a3      	strh	r3, [r4, #12]
 800e0f4:	89a3      	ldrh	r3, [r4, #12]
 800e0f6:	431d      	orrs	r5, r3
 800e0f8:	81a5      	strh	r5, [r4, #12]
 800e0fa:	e7cf      	b.n	800e09c <__smakebuf_r+0x18>

0800e0fc <memmove>:
 800e0fc:	4288      	cmp	r0, r1
 800e0fe:	b510      	push	{r4, lr}
 800e100:	eb01 0402 	add.w	r4, r1, r2
 800e104:	d902      	bls.n	800e10c <memmove+0x10>
 800e106:	4284      	cmp	r4, r0
 800e108:	4623      	mov	r3, r4
 800e10a:	d807      	bhi.n	800e11c <memmove+0x20>
 800e10c:	1e43      	subs	r3, r0, #1
 800e10e:	42a1      	cmp	r1, r4
 800e110:	d008      	beq.n	800e124 <memmove+0x28>
 800e112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e11a:	e7f8      	b.n	800e10e <memmove+0x12>
 800e11c:	4402      	add	r2, r0
 800e11e:	4601      	mov	r1, r0
 800e120:	428a      	cmp	r2, r1
 800e122:	d100      	bne.n	800e126 <memmove+0x2a>
 800e124:	bd10      	pop	{r4, pc}
 800e126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e12a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e12e:	e7f7      	b.n	800e120 <memmove+0x24>

0800e130 <strncmp>:
 800e130:	b510      	push	{r4, lr}
 800e132:	b16a      	cbz	r2, 800e150 <strncmp+0x20>
 800e134:	3901      	subs	r1, #1
 800e136:	1884      	adds	r4, r0, r2
 800e138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e13c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e140:	429a      	cmp	r2, r3
 800e142:	d103      	bne.n	800e14c <strncmp+0x1c>
 800e144:	42a0      	cmp	r0, r4
 800e146:	d001      	beq.n	800e14c <strncmp+0x1c>
 800e148:	2a00      	cmp	r2, #0
 800e14a:	d1f5      	bne.n	800e138 <strncmp+0x8>
 800e14c:	1ad0      	subs	r0, r2, r3
 800e14e:	bd10      	pop	{r4, pc}
 800e150:	4610      	mov	r0, r2
 800e152:	e7fc      	b.n	800e14e <strncmp+0x1e>

0800e154 <_fstat_r>:
 800e154:	b538      	push	{r3, r4, r5, lr}
 800e156:	4d07      	ldr	r5, [pc, #28]	@ (800e174 <_fstat_r+0x20>)
 800e158:	2300      	movs	r3, #0
 800e15a:	4604      	mov	r4, r0
 800e15c:	4608      	mov	r0, r1
 800e15e:	4611      	mov	r1, r2
 800e160:	602b      	str	r3, [r5, #0]
 800e162:	f7f3 fd8b 	bl	8001c7c <_fstat>
 800e166:	1c43      	adds	r3, r0, #1
 800e168:	d102      	bne.n	800e170 <_fstat_r+0x1c>
 800e16a:	682b      	ldr	r3, [r5, #0]
 800e16c:	b103      	cbz	r3, 800e170 <_fstat_r+0x1c>
 800e16e:	6023      	str	r3, [r4, #0]
 800e170:	bd38      	pop	{r3, r4, r5, pc}
 800e172:	bf00      	nop
 800e174:	20001468 	.word	0x20001468

0800e178 <_isatty_r>:
 800e178:	b538      	push	{r3, r4, r5, lr}
 800e17a:	4d06      	ldr	r5, [pc, #24]	@ (800e194 <_isatty_r+0x1c>)
 800e17c:	2300      	movs	r3, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	4608      	mov	r0, r1
 800e182:	602b      	str	r3, [r5, #0]
 800e184:	f7f3 fd8a 	bl	8001c9c <_isatty>
 800e188:	1c43      	adds	r3, r0, #1
 800e18a:	d102      	bne.n	800e192 <_isatty_r+0x1a>
 800e18c:	682b      	ldr	r3, [r5, #0]
 800e18e:	b103      	cbz	r3, 800e192 <_isatty_r+0x1a>
 800e190:	6023      	str	r3, [r4, #0]
 800e192:	bd38      	pop	{r3, r4, r5, pc}
 800e194:	20001468 	.word	0x20001468

0800e198 <_sbrk_r>:
 800e198:	b538      	push	{r3, r4, r5, lr}
 800e19a:	4d06      	ldr	r5, [pc, #24]	@ (800e1b4 <_sbrk_r+0x1c>)
 800e19c:	2300      	movs	r3, #0
 800e19e:	4604      	mov	r4, r0
 800e1a0:	4608      	mov	r0, r1
 800e1a2:	602b      	str	r3, [r5, #0]
 800e1a4:	f7f3 fd92 	bl	8001ccc <_sbrk>
 800e1a8:	1c43      	adds	r3, r0, #1
 800e1aa:	d102      	bne.n	800e1b2 <_sbrk_r+0x1a>
 800e1ac:	682b      	ldr	r3, [r5, #0]
 800e1ae:	b103      	cbz	r3, 800e1b2 <_sbrk_r+0x1a>
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	bd38      	pop	{r3, r4, r5, pc}
 800e1b4:	20001468 	.word	0x20001468

0800e1b8 <nan>:
 800e1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e1c0 <nan+0x8>
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	00000000 	.word	0x00000000
 800e1c4:	7ff80000 	.word	0x7ff80000

0800e1c8 <__assert_func>:
 800e1c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1ca:	4614      	mov	r4, r2
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	4b09      	ldr	r3, [pc, #36]	@ (800e1f4 <__assert_func+0x2c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	68d8      	ldr	r0, [r3, #12]
 800e1d6:	b954      	cbnz	r4, 800e1ee <__assert_func+0x26>
 800e1d8:	4b07      	ldr	r3, [pc, #28]	@ (800e1f8 <__assert_func+0x30>)
 800e1da:	461c      	mov	r4, r3
 800e1dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1e0:	9100      	str	r1, [sp, #0]
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	4905      	ldr	r1, [pc, #20]	@ (800e1fc <__assert_func+0x34>)
 800e1e6:	f000 fba7 	bl	800e938 <fiprintf>
 800e1ea:	f000 fbb7 	bl	800e95c <abort>
 800e1ee:	4b04      	ldr	r3, [pc, #16]	@ (800e200 <__assert_func+0x38>)
 800e1f0:	e7f4      	b.n	800e1dc <__assert_func+0x14>
 800e1f2:	bf00      	nop
 800e1f4:	2000001c 	.word	0x2000001c
 800e1f8:	0800eff5 	.word	0x0800eff5
 800e1fc:	0800efc7 	.word	0x0800efc7
 800e200:	0800efba 	.word	0x0800efba

0800e204 <_calloc_r>:
 800e204:	b570      	push	{r4, r5, r6, lr}
 800e206:	fba1 5402 	umull	r5, r4, r1, r2
 800e20a:	b93c      	cbnz	r4, 800e21c <_calloc_r+0x18>
 800e20c:	4629      	mov	r1, r5
 800e20e:	f7fe f80b 	bl	800c228 <_malloc_r>
 800e212:	4606      	mov	r6, r0
 800e214:	b928      	cbnz	r0, 800e222 <_calloc_r+0x1e>
 800e216:	2600      	movs	r6, #0
 800e218:	4630      	mov	r0, r6
 800e21a:	bd70      	pop	{r4, r5, r6, pc}
 800e21c:	220c      	movs	r2, #12
 800e21e:	6002      	str	r2, [r0, #0]
 800e220:	e7f9      	b.n	800e216 <_calloc_r+0x12>
 800e222:	462a      	mov	r2, r5
 800e224:	4621      	mov	r1, r4
 800e226:	f7fd f853 	bl	800b2d0 <memset>
 800e22a:	e7f5      	b.n	800e218 <_calloc_r+0x14>

0800e22c <rshift>:
 800e22c:	6903      	ldr	r3, [r0, #16]
 800e22e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e232:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e236:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e23a:	f100 0414 	add.w	r4, r0, #20
 800e23e:	dd45      	ble.n	800e2cc <rshift+0xa0>
 800e240:	f011 011f 	ands.w	r1, r1, #31
 800e244:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e248:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e24c:	d10c      	bne.n	800e268 <rshift+0x3c>
 800e24e:	f100 0710 	add.w	r7, r0, #16
 800e252:	4629      	mov	r1, r5
 800e254:	42b1      	cmp	r1, r6
 800e256:	d334      	bcc.n	800e2c2 <rshift+0x96>
 800e258:	1a9b      	subs	r3, r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	1eea      	subs	r2, r5, #3
 800e25e:	4296      	cmp	r6, r2
 800e260:	bf38      	it	cc
 800e262:	2300      	movcc	r3, #0
 800e264:	4423      	add	r3, r4
 800e266:	e015      	b.n	800e294 <rshift+0x68>
 800e268:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e26c:	f1c1 0820 	rsb	r8, r1, #32
 800e270:	40cf      	lsrs	r7, r1
 800e272:	f105 0e04 	add.w	lr, r5, #4
 800e276:	46a1      	mov	r9, r4
 800e278:	4576      	cmp	r6, lr
 800e27a:	46f4      	mov	ip, lr
 800e27c:	d815      	bhi.n	800e2aa <rshift+0x7e>
 800e27e:	1a9a      	subs	r2, r3, r2
 800e280:	0092      	lsls	r2, r2, #2
 800e282:	3a04      	subs	r2, #4
 800e284:	3501      	adds	r5, #1
 800e286:	42ae      	cmp	r6, r5
 800e288:	bf38      	it	cc
 800e28a:	2200      	movcc	r2, #0
 800e28c:	18a3      	adds	r3, r4, r2
 800e28e:	50a7      	str	r7, [r4, r2]
 800e290:	b107      	cbz	r7, 800e294 <rshift+0x68>
 800e292:	3304      	adds	r3, #4
 800e294:	1b1a      	subs	r2, r3, r4
 800e296:	42a3      	cmp	r3, r4
 800e298:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e29c:	bf08      	it	eq
 800e29e:	2300      	moveq	r3, #0
 800e2a0:	6102      	str	r2, [r0, #16]
 800e2a2:	bf08      	it	eq
 800e2a4:	6143      	streq	r3, [r0, #20]
 800e2a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2aa:	f8dc c000 	ldr.w	ip, [ip]
 800e2ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800e2b2:	ea4c 0707 	orr.w	r7, ip, r7
 800e2b6:	f849 7b04 	str.w	r7, [r9], #4
 800e2ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e2be:	40cf      	lsrs	r7, r1
 800e2c0:	e7da      	b.n	800e278 <rshift+0x4c>
 800e2c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e2c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e2ca:	e7c3      	b.n	800e254 <rshift+0x28>
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	e7e1      	b.n	800e294 <rshift+0x68>

0800e2d0 <__hexdig_fun>:
 800e2d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e2d4:	2b09      	cmp	r3, #9
 800e2d6:	d802      	bhi.n	800e2de <__hexdig_fun+0xe>
 800e2d8:	3820      	subs	r0, #32
 800e2da:	b2c0      	uxtb	r0, r0
 800e2dc:	4770      	bx	lr
 800e2de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e2e2:	2b05      	cmp	r3, #5
 800e2e4:	d801      	bhi.n	800e2ea <__hexdig_fun+0x1a>
 800e2e6:	3847      	subs	r0, #71	@ 0x47
 800e2e8:	e7f7      	b.n	800e2da <__hexdig_fun+0xa>
 800e2ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e2ee:	2b05      	cmp	r3, #5
 800e2f0:	d801      	bhi.n	800e2f6 <__hexdig_fun+0x26>
 800e2f2:	3827      	subs	r0, #39	@ 0x27
 800e2f4:	e7f1      	b.n	800e2da <__hexdig_fun+0xa>
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	4770      	bx	lr
	...

0800e2fc <__gethex>:
 800e2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e300:	b085      	sub	sp, #20
 800e302:	468a      	mov	sl, r1
 800e304:	9302      	str	r3, [sp, #8]
 800e306:	680b      	ldr	r3, [r1, #0]
 800e308:	9001      	str	r0, [sp, #4]
 800e30a:	4690      	mov	r8, r2
 800e30c:	1c9c      	adds	r4, r3, #2
 800e30e:	46a1      	mov	r9, r4
 800e310:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e314:	2830      	cmp	r0, #48	@ 0x30
 800e316:	d0fa      	beq.n	800e30e <__gethex+0x12>
 800e318:	eba9 0303 	sub.w	r3, r9, r3
 800e31c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e320:	f7ff ffd6 	bl	800e2d0 <__hexdig_fun>
 800e324:	4605      	mov	r5, r0
 800e326:	2800      	cmp	r0, #0
 800e328:	d168      	bne.n	800e3fc <__gethex+0x100>
 800e32a:	49a0      	ldr	r1, [pc, #640]	@ (800e5ac <__gethex+0x2b0>)
 800e32c:	2201      	movs	r2, #1
 800e32e:	4648      	mov	r0, r9
 800e330:	f7ff fefe 	bl	800e130 <strncmp>
 800e334:	4607      	mov	r7, r0
 800e336:	2800      	cmp	r0, #0
 800e338:	d167      	bne.n	800e40a <__gethex+0x10e>
 800e33a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e33e:	4626      	mov	r6, r4
 800e340:	f7ff ffc6 	bl	800e2d0 <__hexdig_fun>
 800e344:	2800      	cmp	r0, #0
 800e346:	d062      	beq.n	800e40e <__gethex+0x112>
 800e348:	4623      	mov	r3, r4
 800e34a:	7818      	ldrb	r0, [r3, #0]
 800e34c:	2830      	cmp	r0, #48	@ 0x30
 800e34e:	4699      	mov	r9, r3
 800e350:	f103 0301 	add.w	r3, r3, #1
 800e354:	d0f9      	beq.n	800e34a <__gethex+0x4e>
 800e356:	f7ff ffbb 	bl	800e2d0 <__hexdig_fun>
 800e35a:	fab0 f580 	clz	r5, r0
 800e35e:	096d      	lsrs	r5, r5, #5
 800e360:	f04f 0b01 	mov.w	fp, #1
 800e364:	464a      	mov	r2, r9
 800e366:	4616      	mov	r6, r2
 800e368:	3201      	adds	r2, #1
 800e36a:	7830      	ldrb	r0, [r6, #0]
 800e36c:	f7ff ffb0 	bl	800e2d0 <__hexdig_fun>
 800e370:	2800      	cmp	r0, #0
 800e372:	d1f8      	bne.n	800e366 <__gethex+0x6a>
 800e374:	498d      	ldr	r1, [pc, #564]	@ (800e5ac <__gethex+0x2b0>)
 800e376:	2201      	movs	r2, #1
 800e378:	4630      	mov	r0, r6
 800e37a:	f7ff fed9 	bl	800e130 <strncmp>
 800e37e:	2800      	cmp	r0, #0
 800e380:	d13f      	bne.n	800e402 <__gethex+0x106>
 800e382:	b944      	cbnz	r4, 800e396 <__gethex+0x9a>
 800e384:	1c74      	adds	r4, r6, #1
 800e386:	4622      	mov	r2, r4
 800e388:	4616      	mov	r6, r2
 800e38a:	3201      	adds	r2, #1
 800e38c:	7830      	ldrb	r0, [r6, #0]
 800e38e:	f7ff ff9f 	bl	800e2d0 <__hexdig_fun>
 800e392:	2800      	cmp	r0, #0
 800e394:	d1f8      	bne.n	800e388 <__gethex+0x8c>
 800e396:	1ba4      	subs	r4, r4, r6
 800e398:	00a7      	lsls	r7, r4, #2
 800e39a:	7833      	ldrb	r3, [r6, #0]
 800e39c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e3a0:	2b50      	cmp	r3, #80	@ 0x50
 800e3a2:	d13e      	bne.n	800e422 <__gethex+0x126>
 800e3a4:	7873      	ldrb	r3, [r6, #1]
 800e3a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e3a8:	d033      	beq.n	800e412 <__gethex+0x116>
 800e3aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800e3ac:	d034      	beq.n	800e418 <__gethex+0x11c>
 800e3ae:	1c71      	adds	r1, r6, #1
 800e3b0:	2400      	movs	r4, #0
 800e3b2:	7808      	ldrb	r0, [r1, #0]
 800e3b4:	f7ff ff8c 	bl	800e2d0 <__hexdig_fun>
 800e3b8:	1e43      	subs	r3, r0, #1
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	2b18      	cmp	r3, #24
 800e3be:	d830      	bhi.n	800e422 <__gethex+0x126>
 800e3c0:	f1a0 0210 	sub.w	r2, r0, #16
 800e3c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e3c8:	f7ff ff82 	bl	800e2d0 <__hexdig_fun>
 800e3cc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800e3d0:	fa5f fc8c 	uxtb.w	ip, ip
 800e3d4:	f1bc 0f18 	cmp.w	ip, #24
 800e3d8:	f04f 030a 	mov.w	r3, #10
 800e3dc:	d91e      	bls.n	800e41c <__gethex+0x120>
 800e3de:	b104      	cbz	r4, 800e3e2 <__gethex+0xe6>
 800e3e0:	4252      	negs	r2, r2
 800e3e2:	4417      	add	r7, r2
 800e3e4:	f8ca 1000 	str.w	r1, [sl]
 800e3e8:	b1ed      	cbz	r5, 800e426 <__gethex+0x12a>
 800e3ea:	f1bb 0f00 	cmp.w	fp, #0
 800e3ee:	bf0c      	ite	eq
 800e3f0:	2506      	moveq	r5, #6
 800e3f2:	2500      	movne	r5, #0
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	b005      	add	sp, #20
 800e3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3fc:	2500      	movs	r5, #0
 800e3fe:	462c      	mov	r4, r5
 800e400:	e7b0      	b.n	800e364 <__gethex+0x68>
 800e402:	2c00      	cmp	r4, #0
 800e404:	d1c7      	bne.n	800e396 <__gethex+0x9a>
 800e406:	4627      	mov	r7, r4
 800e408:	e7c7      	b.n	800e39a <__gethex+0x9e>
 800e40a:	464e      	mov	r6, r9
 800e40c:	462f      	mov	r7, r5
 800e40e:	2501      	movs	r5, #1
 800e410:	e7c3      	b.n	800e39a <__gethex+0x9e>
 800e412:	2400      	movs	r4, #0
 800e414:	1cb1      	adds	r1, r6, #2
 800e416:	e7cc      	b.n	800e3b2 <__gethex+0xb6>
 800e418:	2401      	movs	r4, #1
 800e41a:	e7fb      	b.n	800e414 <__gethex+0x118>
 800e41c:	fb03 0002 	mla	r0, r3, r2, r0
 800e420:	e7ce      	b.n	800e3c0 <__gethex+0xc4>
 800e422:	4631      	mov	r1, r6
 800e424:	e7de      	b.n	800e3e4 <__gethex+0xe8>
 800e426:	eba6 0309 	sub.w	r3, r6, r9
 800e42a:	3b01      	subs	r3, #1
 800e42c:	4629      	mov	r1, r5
 800e42e:	2b07      	cmp	r3, #7
 800e430:	dc0a      	bgt.n	800e448 <__gethex+0x14c>
 800e432:	9801      	ldr	r0, [sp, #4]
 800e434:	f7fd ff84 	bl	800c340 <_Balloc>
 800e438:	4604      	mov	r4, r0
 800e43a:	b940      	cbnz	r0, 800e44e <__gethex+0x152>
 800e43c:	4b5c      	ldr	r3, [pc, #368]	@ (800e5b0 <__gethex+0x2b4>)
 800e43e:	4602      	mov	r2, r0
 800e440:	21e4      	movs	r1, #228	@ 0xe4
 800e442:	485c      	ldr	r0, [pc, #368]	@ (800e5b4 <__gethex+0x2b8>)
 800e444:	f7ff fec0 	bl	800e1c8 <__assert_func>
 800e448:	3101      	adds	r1, #1
 800e44a:	105b      	asrs	r3, r3, #1
 800e44c:	e7ef      	b.n	800e42e <__gethex+0x132>
 800e44e:	f100 0a14 	add.w	sl, r0, #20
 800e452:	2300      	movs	r3, #0
 800e454:	4655      	mov	r5, sl
 800e456:	469b      	mov	fp, r3
 800e458:	45b1      	cmp	r9, r6
 800e45a:	d337      	bcc.n	800e4cc <__gethex+0x1d0>
 800e45c:	f845 bb04 	str.w	fp, [r5], #4
 800e460:	eba5 050a 	sub.w	r5, r5, sl
 800e464:	10ad      	asrs	r5, r5, #2
 800e466:	6125      	str	r5, [r4, #16]
 800e468:	4658      	mov	r0, fp
 800e46a:	f7fe f85b 	bl	800c524 <__hi0bits>
 800e46e:	016d      	lsls	r5, r5, #5
 800e470:	f8d8 6000 	ldr.w	r6, [r8]
 800e474:	1a2d      	subs	r5, r5, r0
 800e476:	42b5      	cmp	r5, r6
 800e478:	dd54      	ble.n	800e524 <__gethex+0x228>
 800e47a:	1bad      	subs	r5, r5, r6
 800e47c:	4629      	mov	r1, r5
 800e47e:	4620      	mov	r0, r4
 800e480:	f7fe fbef 	bl	800cc62 <__any_on>
 800e484:	4681      	mov	r9, r0
 800e486:	b178      	cbz	r0, 800e4a8 <__gethex+0x1ac>
 800e488:	1e6b      	subs	r3, r5, #1
 800e48a:	1159      	asrs	r1, r3, #5
 800e48c:	f003 021f 	and.w	r2, r3, #31
 800e490:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e494:	f04f 0901 	mov.w	r9, #1
 800e498:	fa09 f202 	lsl.w	r2, r9, r2
 800e49c:	420a      	tst	r2, r1
 800e49e:	d003      	beq.n	800e4a8 <__gethex+0x1ac>
 800e4a0:	454b      	cmp	r3, r9
 800e4a2:	dc36      	bgt.n	800e512 <__gethex+0x216>
 800e4a4:	f04f 0902 	mov.w	r9, #2
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f7ff febe 	bl	800e22c <rshift>
 800e4b0:	442f      	add	r7, r5
 800e4b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4b6:	42bb      	cmp	r3, r7
 800e4b8:	da42      	bge.n	800e540 <__gethex+0x244>
 800e4ba:	9801      	ldr	r0, [sp, #4]
 800e4bc:	4621      	mov	r1, r4
 800e4be:	f7fd ff7f 	bl	800c3c0 <_Bfree>
 800e4c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	6013      	str	r3, [r2, #0]
 800e4c8:	25a3      	movs	r5, #163	@ 0xa3
 800e4ca:	e793      	b.n	800e3f4 <__gethex+0xf8>
 800e4cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e4d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e4d2:	d012      	beq.n	800e4fa <__gethex+0x1fe>
 800e4d4:	2b20      	cmp	r3, #32
 800e4d6:	d104      	bne.n	800e4e2 <__gethex+0x1e6>
 800e4d8:	f845 bb04 	str.w	fp, [r5], #4
 800e4dc:	f04f 0b00 	mov.w	fp, #0
 800e4e0:	465b      	mov	r3, fp
 800e4e2:	7830      	ldrb	r0, [r6, #0]
 800e4e4:	9303      	str	r3, [sp, #12]
 800e4e6:	f7ff fef3 	bl	800e2d0 <__hexdig_fun>
 800e4ea:	9b03      	ldr	r3, [sp, #12]
 800e4ec:	f000 000f 	and.w	r0, r0, #15
 800e4f0:	4098      	lsls	r0, r3
 800e4f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	e7ae      	b.n	800e458 <__gethex+0x15c>
 800e4fa:	45b1      	cmp	r9, r6
 800e4fc:	d8ea      	bhi.n	800e4d4 <__gethex+0x1d8>
 800e4fe:	492b      	ldr	r1, [pc, #172]	@ (800e5ac <__gethex+0x2b0>)
 800e500:	9303      	str	r3, [sp, #12]
 800e502:	2201      	movs	r2, #1
 800e504:	4630      	mov	r0, r6
 800e506:	f7ff fe13 	bl	800e130 <strncmp>
 800e50a:	9b03      	ldr	r3, [sp, #12]
 800e50c:	2800      	cmp	r0, #0
 800e50e:	d1e1      	bne.n	800e4d4 <__gethex+0x1d8>
 800e510:	e7a2      	b.n	800e458 <__gethex+0x15c>
 800e512:	1ea9      	subs	r1, r5, #2
 800e514:	4620      	mov	r0, r4
 800e516:	f7fe fba4 	bl	800cc62 <__any_on>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d0c2      	beq.n	800e4a4 <__gethex+0x1a8>
 800e51e:	f04f 0903 	mov.w	r9, #3
 800e522:	e7c1      	b.n	800e4a8 <__gethex+0x1ac>
 800e524:	da09      	bge.n	800e53a <__gethex+0x23e>
 800e526:	1b75      	subs	r5, r6, r5
 800e528:	4621      	mov	r1, r4
 800e52a:	9801      	ldr	r0, [sp, #4]
 800e52c:	462a      	mov	r2, r5
 800e52e:	f7fe f95f 	bl	800c7f0 <__lshift>
 800e532:	1b7f      	subs	r7, r7, r5
 800e534:	4604      	mov	r4, r0
 800e536:	f100 0a14 	add.w	sl, r0, #20
 800e53a:	f04f 0900 	mov.w	r9, #0
 800e53e:	e7b8      	b.n	800e4b2 <__gethex+0x1b6>
 800e540:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e544:	42bd      	cmp	r5, r7
 800e546:	dd6f      	ble.n	800e628 <__gethex+0x32c>
 800e548:	1bed      	subs	r5, r5, r7
 800e54a:	42ae      	cmp	r6, r5
 800e54c:	dc34      	bgt.n	800e5b8 <__gethex+0x2bc>
 800e54e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e552:	2b02      	cmp	r3, #2
 800e554:	d022      	beq.n	800e59c <__gethex+0x2a0>
 800e556:	2b03      	cmp	r3, #3
 800e558:	d024      	beq.n	800e5a4 <__gethex+0x2a8>
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d115      	bne.n	800e58a <__gethex+0x28e>
 800e55e:	42ae      	cmp	r6, r5
 800e560:	d113      	bne.n	800e58a <__gethex+0x28e>
 800e562:	2e01      	cmp	r6, #1
 800e564:	d10b      	bne.n	800e57e <__gethex+0x282>
 800e566:	9a02      	ldr	r2, [sp, #8]
 800e568:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e56c:	6013      	str	r3, [r2, #0]
 800e56e:	2301      	movs	r3, #1
 800e570:	6123      	str	r3, [r4, #16]
 800e572:	f8ca 3000 	str.w	r3, [sl]
 800e576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e578:	2562      	movs	r5, #98	@ 0x62
 800e57a:	601c      	str	r4, [r3, #0]
 800e57c:	e73a      	b.n	800e3f4 <__gethex+0xf8>
 800e57e:	1e71      	subs	r1, r6, #1
 800e580:	4620      	mov	r0, r4
 800e582:	f7fe fb6e 	bl	800cc62 <__any_on>
 800e586:	2800      	cmp	r0, #0
 800e588:	d1ed      	bne.n	800e566 <__gethex+0x26a>
 800e58a:	9801      	ldr	r0, [sp, #4]
 800e58c:	4621      	mov	r1, r4
 800e58e:	f7fd ff17 	bl	800c3c0 <_Bfree>
 800e592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e594:	2300      	movs	r3, #0
 800e596:	6013      	str	r3, [r2, #0]
 800e598:	2550      	movs	r5, #80	@ 0x50
 800e59a:	e72b      	b.n	800e3f4 <__gethex+0xf8>
 800e59c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d1f3      	bne.n	800e58a <__gethex+0x28e>
 800e5a2:	e7e0      	b.n	800e566 <__gethex+0x26a>
 800e5a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1dd      	bne.n	800e566 <__gethex+0x26a>
 800e5aa:	e7ee      	b.n	800e58a <__gethex+0x28e>
 800e5ac:	0800ee48 	.word	0x0800ee48
 800e5b0:	0800ece1 	.word	0x0800ece1
 800e5b4:	0800eff6 	.word	0x0800eff6
 800e5b8:	1e6f      	subs	r7, r5, #1
 800e5ba:	f1b9 0f00 	cmp.w	r9, #0
 800e5be:	d130      	bne.n	800e622 <__gethex+0x326>
 800e5c0:	b127      	cbz	r7, 800e5cc <__gethex+0x2d0>
 800e5c2:	4639      	mov	r1, r7
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	f7fe fb4c 	bl	800cc62 <__any_on>
 800e5ca:	4681      	mov	r9, r0
 800e5cc:	117a      	asrs	r2, r7, #5
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e5d4:	f007 071f 	and.w	r7, r7, #31
 800e5d8:	40bb      	lsls	r3, r7
 800e5da:	4213      	tst	r3, r2
 800e5dc:	4629      	mov	r1, r5
 800e5de:	4620      	mov	r0, r4
 800e5e0:	bf18      	it	ne
 800e5e2:	f049 0902 	orrne.w	r9, r9, #2
 800e5e6:	f7ff fe21 	bl	800e22c <rshift>
 800e5ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e5ee:	1b76      	subs	r6, r6, r5
 800e5f0:	2502      	movs	r5, #2
 800e5f2:	f1b9 0f00 	cmp.w	r9, #0
 800e5f6:	d047      	beq.n	800e688 <__gethex+0x38c>
 800e5f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e5fc:	2b02      	cmp	r3, #2
 800e5fe:	d015      	beq.n	800e62c <__gethex+0x330>
 800e600:	2b03      	cmp	r3, #3
 800e602:	d017      	beq.n	800e634 <__gethex+0x338>
 800e604:	2b01      	cmp	r3, #1
 800e606:	d109      	bne.n	800e61c <__gethex+0x320>
 800e608:	f019 0f02 	tst.w	r9, #2
 800e60c:	d006      	beq.n	800e61c <__gethex+0x320>
 800e60e:	f8da 3000 	ldr.w	r3, [sl]
 800e612:	ea49 0903 	orr.w	r9, r9, r3
 800e616:	f019 0f01 	tst.w	r9, #1
 800e61a:	d10e      	bne.n	800e63a <__gethex+0x33e>
 800e61c:	f045 0510 	orr.w	r5, r5, #16
 800e620:	e032      	b.n	800e688 <__gethex+0x38c>
 800e622:	f04f 0901 	mov.w	r9, #1
 800e626:	e7d1      	b.n	800e5cc <__gethex+0x2d0>
 800e628:	2501      	movs	r5, #1
 800e62a:	e7e2      	b.n	800e5f2 <__gethex+0x2f6>
 800e62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e62e:	f1c3 0301 	rsb	r3, r3, #1
 800e632:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e636:	2b00      	cmp	r3, #0
 800e638:	d0f0      	beq.n	800e61c <__gethex+0x320>
 800e63a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e63e:	f104 0314 	add.w	r3, r4, #20
 800e642:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e646:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e64a:	f04f 0c00 	mov.w	ip, #0
 800e64e:	4618      	mov	r0, r3
 800e650:	f853 2b04 	ldr.w	r2, [r3], #4
 800e654:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e658:	d01b      	beq.n	800e692 <__gethex+0x396>
 800e65a:	3201      	adds	r2, #1
 800e65c:	6002      	str	r2, [r0, #0]
 800e65e:	2d02      	cmp	r5, #2
 800e660:	f104 0314 	add.w	r3, r4, #20
 800e664:	d13c      	bne.n	800e6e0 <__gethex+0x3e4>
 800e666:	f8d8 2000 	ldr.w	r2, [r8]
 800e66a:	3a01      	subs	r2, #1
 800e66c:	42b2      	cmp	r2, r6
 800e66e:	d109      	bne.n	800e684 <__gethex+0x388>
 800e670:	1171      	asrs	r1, r6, #5
 800e672:	2201      	movs	r2, #1
 800e674:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e678:	f006 061f 	and.w	r6, r6, #31
 800e67c:	fa02 f606 	lsl.w	r6, r2, r6
 800e680:	421e      	tst	r6, r3
 800e682:	d13a      	bne.n	800e6fa <__gethex+0x3fe>
 800e684:	f045 0520 	orr.w	r5, r5, #32
 800e688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e68a:	601c      	str	r4, [r3, #0]
 800e68c:	9b02      	ldr	r3, [sp, #8]
 800e68e:	601f      	str	r7, [r3, #0]
 800e690:	e6b0      	b.n	800e3f4 <__gethex+0xf8>
 800e692:	4299      	cmp	r1, r3
 800e694:	f843 cc04 	str.w	ip, [r3, #-4]
 800e698:	d8d9      	bhi.n	800e64e <__gethex+0x352>
 800e69a:	68a3      	ldr	r3, [r4, #8]
 800e69c:	459b      	cmp	fp, r3
 800e69e:	db17      	blt.n	800e6d0 <__gethex+0x3d4>
 800e6a0:	6861      	ldr	r1, [r4, #4]
 800e6a2:	9801      	ldr	r0, [sp, #4]
 800e6a4:	3101      	adds	r1, #1
 800e6a6:	f7fd fe4b 	bl	800c340 <_Balloc>
 800e6aa:	4681      	mov	r9, r0
 800e6ac:	b918      	cbnz	r0, 800e6b6 <__gethex+0x3ba>
 800e6ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e718 <__gethex+0x41c>)
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	2184      	movs	r1, #132	@ 0x84
 800e6b4:	e6c5      	b.n	800e442 <__gethex+0x146>
 800e6b6:	6922      	ldr	r2, [r4, #16]
 800e6b8:	3202      	adds	r2, #2
 800e6ba:	f104 010c 	add.w	r1, r4, #12
 800e6be:	0092      	lsls	r2, r2, #2
 800e6c0:	300c      	adds	r0, #12
 800e6c2:	f7fc feda 	bl	800b47a <memcpy>
 800e6c6:	4621      	mov	r1, r4
 800e6c8:	9801      	ldr	r0, [sp, #4]
 800e6ca:	f7fd fe79 	bl	800c3c0 <_Bfree>
 800e6ce:	464c      	mov	r4, r9
 800e6d0:	6923      	ldr	r3, [r4, #16]
 800e6d2:	1c5a      	adds	r2, r3, #1
 800e6d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6d8:	6122      	str	r2, [r4, #16]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	615a      	str	r2, [r3, #20]
 800e6de:	e7be      	b.n	800e65e <__gethex+0x362>
 800e6e0:	6922      	ldr	r2, [r4, #16]
 800e6e2:	455a      	cmp	r2, fp
 800e6e4:	dd0b      	ble.n	800e6fe <__gethex+0x402>
 800e6e6:	2101      	movs	r1, #1
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	f7ff fd9f 	bl	800e22c <rshift>
 800e6ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6f2:	3701      	adds	r7, #1
 800e6f4:	42bb      	cmp	r3, r7
 800e6f6:	f6ff aee0 	blt.w	800e4ba <__gethex+0x1be>
 800e6fa:	2501      	movs	r5, #1
 800e6fc:	e7c2      	b.n	800e684 <__gethex+0x388>
 800e6fe:	f016 061f 	ands.w	r6, r6, #31
 800e702:	d0fa      	beq.n	800e6fa <__gethex+0x3fe>
 800e704:	4453      	add	r3, sl
 800e706:	f1c6 0620 	rsb	r6, r6, #32
 800e70a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e70e:	f7fd ff09 	bl	800c524 <__hi0bits>
 800e712:	42b0      	cmp	r0, r6
 800e714:	dbe7      	blt.n	800e6e6 <__gethex+0x3ea>
 800e716:	e7f0      	b.n	800e6fa <__gethex+0x3fe>
 800e718:	0800ece1 	.word	0x0800ece1

0800e71c <L_shift>:
 800e71c:	f1c2 0208 	rsb	r2, r2, #8
 800e720:	0092      	lsls	r2, r2, #2
 800e722:	b570      	push	{r4, r5, r6, lr}
 800e724:	f1c2 0620 	rsb	r6, r2, #32
 800e728:	6843      	ldr	r3, [r0, #4]
 800e72a:	6804      	ldr	r4, [r0, #0]
 800e72c:	fa03 f506 	lsl.w	r5, r3, r6
 800e730:	432c      	orrs	r4, r5
 800e732:	40d3      	lsrs	r3, r2
 800e734:	6004      	str	r4, [r0, #0]
 800e736:	f840 3f04 	str.w	r3, [r0, #4]!
 800e73a:	4288      	cmp	r0, r1
 800e73c:	d3f4      	bcc.n	800e728 <L_shift+0xc>
 800e73e:	bd70      	pop	{r4, r5, r6, pc}

0800e740 <__match>:
 800e740:	b530      	push	{r4, r5, lr}
 800e742:	6803      	ldr	r3, [r0, #0]
 800e744:	3301      	adds	r3, #1
 800e746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e74a:	b914      	cbnz	r4, 800e752 <__match+0x12>
 800e74c:	6003      	str	r3, [r0, #0]
 800e74e:	2001      	movs	r0, #1
 800e750:	bd30      	pop	{r4, r5, pc}
 800e752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e756:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e75a:	2d19      	cmp	r5, #25
 800e75c:	bf98      	it	ls
 800e75e:	3220      	addls	r2, #32
 800e760:	42a2      	cmp	r2, r4
 800e762:	d0f0      	beq.n	800e746 <__match+0x6>
 800e764:	2000      	movs	r0, #0
 800e766:	e7f3      	b.n	800e750 <__match+0x10>

0800e768 <__hexnan>:
 800e768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76c:	680b      	ldr	r3, [r1, #0]
 800e76e:	6801      	ldr	r1, [r0, #0]
 800e770:	115e      	asrs	r6, r3, #5
 800e772:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e776:	f013 031f 	ands.w	r3, r3, #31
 800e77a:	b087      	sub	sp, #28
 800e77c:	bf18      	it	ne
 800e77e:	3604      	addne	r6, #4
 800e780:	2500      	movs	r5, #0
 800e782:	1f37      	subs	r7, r6, #4
 800e784:	4682      	mov	sl, r0
 800e786:	4690      	mov	r8, r2
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e78e:	46b9      	mov	r9, r7
 800e790:	463c      	mov	r4, r7
 800e792:	9502      	str	r5, [sp, #8]
 800e794:	46ab      	mov	fp, r5
 800e796:	784a      	ldrb	r2, [r1, #1]
 800e798:	1c4b      	adds	r3, r1, #1
 800e79a:	9303      	str	r3, [sp, #12]
 800e79c:	b342      	cbz	r2, 800e7f0 <__hexnan+0x88>
 800e79e:	4610      	mov	r0, r2
 800e7a0:	9105      	str	r1, [sp, #20]
 800e7a2:	9204      	str	r2, [sp, #16]
 800e7a4:	f7ff fd94 	bl	800e2d0 <__hexdig_fun>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d151      	bne.n	800e850 <__hexnan+0xe8>
 800e7ac:	9a04      	ldr	r2, [sp, #16]
 800e7ae:	9905      	ldr	r1, [sp, #20]
 800e7b0:	2a20      	cmp	r2, #32
 800e7b2:	d818      	bhi.n	800e7e6 <__hexnan+0x7e>
 800e7b4:	9b02      	ldr	r3, [sp, #8]
 800e7b6:	459b      	cmp	fp, r3
 800e7b8:	dd13      	ble.n	800e7e2 <__hexnan+0x7a>
 800e7ba:	454c      	cmp	r4, r9
 800e7bc:	d206      	bcs.n	800e7cc <__hexnan+0x64>
 800e7be:	2d07      	cmp	r5, #7
 800e7c0:	dc04      	bgt.n	800e7cc <__hexnan+0x64>
 800e7c2:	462a      	mov	r2, r5
 800e7c4:	4649      	mov	r1, r9
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	f7ff ffa8 	bl	800e71c <L_shift>
 800e7cc:	4544      	cmp	r4, r8
 800e7ce:	d952      	bls.n	800e876 <__hexnan+0x10e>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	f1a4 0904 	sub.w	r9, r4, #4
 800e7d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7da:	f8cd b008 	str.w	fp, [sp, #8]
 800e7de:	464c      	mov	r4, r9
 800e7e0:	461d      	mov	r5, r3
 800e7e2:	9903      	ldr	r1, [sp, #12]
 800e7e4:	e7d7      	b.n	800e796 <__hexnan+0x2e>
 800e7e6:	2a29      	cmp	r2, #41	@ 0x29
 800e7e8:	d157      	bne.n	800e89a <__hexnan+0x132>
 800e7ea:	3102      	adds	r1, #2
 800e7ec:	f8ca 1000 	str.w	r1, [sl]
 800e7f0:	f1bb 0f00 	cmp.w	fp, #0
 800e7f4:	d051      	beq.n	800e89a <__hexnan+0x132>
 800e7f6:	454c      	cmp	r4, r9
 800e7f8:	d206      	bcs.n	800e808 <__hexnan+0xa0>
 800e7fa:	2d07      	cmp	r5, #7
 800e7fc:	dc04      	bgt.n	800e808 <__hexnan+0xa0>
 800e7fe:	462a      	mov	r2, r5
 800e800:	4649      	mov	r1, r9
 800e802:	4620      	mov	r0, r4
 800e804:	f7ff ff8a 	bl	800e71c <L_shift>
 800e808:	4544      	cmp	r4, r8
 800e80a:	d936      	bls.n	800e87a <__hexnan+0x112>
 800e80c:	f1a8 0204 	sub.w	r2, r8, #4
 800e810:	4623      	mov	r3, r4
 800e812:	f853 1b04 	ldr.w	r1, [r3], #4
 800e816:	f842 1f04 	str.w	r1, [r2, #4]!
 800e81a:	429f      	cmp	r7, r3
 800e81c:	d2f9      	bcs.n	800e812 <__hexnan+0xaa>
 800e81e:	1b3b      	subs	r3, r7, r4
 800e820:	f023 0303 	bic.w	r3, r3, #3
 800e824:	3304      	adds	r3, #4
 800e826:	3401      	adds	r4, #1
 800e828:	3e03      	subs	r6, #3
 800e82a:	42b4      	cmp	r4, r6
 800e82c:	bf88      	it	hi
 800e82e:	2304      	movhi	r3, #4
 800e830:	4443      	add	r3, r8
 800e832:	2200      	movs	r2, #0
 800e834:	f843 2b04 	str.w	r2, [r3], #4
 800e838:	429f      	cmp	r7, r3
 800e83a:	d2fb      	bcs.n	800e834 <__hexnan+0xcc>
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	b91b      	cbnz	r3, 800e848 <__hexnan+0xe0>
 800e840:	4547      	cmp	r7, r8
 800e842:	d128      	bne.n	800e896 <__hexnan+0x12e>
 800e844:	2301      	movs	r3, #1
 800e846:	603b      	str	r3, [r7, #0]
 800e848:	2005      	movs	r0, #5
 800e84a:	b007      	add	sp, #28
 800e84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e850:	3501      	adds	r5, #1
 800e852:	2d08      	cmp	r5, #8
 800e854:	f10b 0b01 	add.w	fp, fp, #1
 800e858:	dd06      	ble.n	800e868 <__hexnan+0x100>
 800e85a:	4544      	cmp	r4, r8
 800e85c:	d9c1      	bls.n	800e7e2 <__hexnan+0x7a>
 800e85e:	2300      	movs	r3, #0
 800e860:	f844 3c04 	str.w	r3, [r4, #-4]
 800e864:	2501      	movs	r5, #1
 800e866:	3c04      	subs	r4, #4
 800e868:	6822      	ldr	r2, [r4, #0]
 800e86a:	f000 000f 	and.w	r0, r0, #15
 800e86e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e872:	6020      	str	r0, [r4, #0]
 800e874:	e7b5      	b.n	800e7e2 <__hexnan+0x7a>
 800e876:	2508      	movs	r5, #8
 800e878:	e7b3      	b.n	800e7e2 <__hexnan+0x7a>
 800e87a:	9b01      	ldr	r3, [sp, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d0dd      	beq.n	800e83c <__hexnan+0xd4>
 800e880:	f1c3 0320 	rsb	r3, r3, #32
 800e884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e888:	40da      	lsrs	r2, r3
 800e88a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e88e:	4013      	ands	r3, r2
 800e890:	f846 3c04 	str.w	r3, [r6, #-4]
 800e894:	e7d2      	b.n	800e83c <__hexnan+0xd4>
 800e896:	3f04      	subs	r7, #4
 800e898:	e7d0      	b.n	800e83c <__hexnan+0xd4>
 800e89a:	2004      	movs	r0, #4
 800e89c:	e7d5      	b.n	800e84a <__hexnan+0xe2>

0800e89e <__ascii_mbtowc>:
 800e89e:	b082      	sub	sp, #8
 800e8a0:	b901      	cbnz	r1, 800e8a4 <__ascii_mbtowc+0x6>
 800e8a2:	a901      	add	r1, sp, #4
 800e8a4:	b142      	cbz	r2, 800e8b8 <__ascii_mbtowc+0x1a>
 800e8a6:	b14b      	cbz	r3, 800e8bc <__ascii_mbtowc+0x1e>
 800e8a8:	7813      	ldrb	r3, [r2, #0]
 800e8aa:	600b      	str	r3, [r1, #0]
 800e8ac:	7812      	ldrb	r2, [r2, #0]
 800e8ae:	1e10      	subs	r0, r2, #0
 800e8b0:	bf18      	it	ne
 800e8b2:	2001      	movne	r0, #1
 800e8b4:	b002      	add	sp, #8
 800e8b6:	4770      	bx	lr
 800e8b8:	4610      	mov	r0, r2
 800e8ba:	e7fb      	b.n	800e8b4 <__ascii_mbtowc+0x16>
 800e8bc:	f06f 0001 	mvn.w	r0, #1
 800e8c0:	e7f8      	b.n	800e8b4 <__ascii_mbtowc+0x16>

0800e8c2 <_realloc_r>:
 800e8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c6:	4680      	mov	r8, r0
 800e8c8:	4615      	mov	r5, r2
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	b921      	cbnz	r1, 800e8d8 <_realloc_r+0x16>
 800e8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	f7fd bca8 	b.w	800c228 <_malloc_r>
 800e8d8:	b92a      	cbnz	r2, 800e8e6 <_realloc_r+0x24>
 800e8da:	f7fd fc31 	bl	800c140 <_free_r>
 800e8de:	2400      	movs	r4, #0
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e6:	f000 f840 	bl	800e96a <_malloc_usable_size_r>
 800e8ea:	4285      	cmp	r5, r0
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	d802      	bhi.n	800e8f6 <_realloc_r+0x34>
 800e8f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e8f4:	d8f4      	bhi.n	800e8e0 <_realloc_r+0x1e>
 800e8f6:	4629      	mov	r1, r5
 800e8f8:	4640      	mov	r0, r8
 800e8fa:	f7fd fc95 	bl	800c228 <_malloc_r>
 800e8fe:	4607      	mov	r7, r0
 800e900:	2800      	cmp	r0, #0
 800e902:	d0ec      	beq.n	800e8de <_realloc_r+0x1c>
 800e904:	42b5      	cmp	r5, r6
 800e906:	462a      	mov	r2, r5
 800e908:	4621      	mov	r1, r4
 800e90a:	bf28      	it	cs
 800e90c:	4632      	movcs	r2, r6
 800e90e:	f7fc fdb4 	bl	800b47a <memcpy>
 800e912:	4621      	mov	r1, r4
 800e914:	4640      	mov	r0, r8
 800e916:	f7fd fc13 	bl	800c140 <_free_r>
 800e91a:	463c      	mov	r4, r7
 800e91c:	e7e0      	b.n	800e8e0 <_realloc_r+0x1e>

0800e91e <__ascii_wctomb>:
 800e91e:	4603      	mov	r3, r0
 800e920:	4608      	mov	r0, r1
 800e922:	b141      	cbz	r1, 800e936 <__ascii_wctomb+0x18>
 800e924:	2aff      	cmp	r2, #255	@ 0xff
 800e926:	d904      	bls.n	800e932 <__ascii_wctomb+0x14>
 800e928:	228a      	movs	r2, #138	@ 0x8a
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e930:	4770      	bx	lr
 800e932:	700a      	strb	r2, [r1, #0]
 800e934:	2001      	movs	r0, #1
 800e936:	4770      	bx	lr

0800e938 <fiprintf>:
 800e938:	b40e      	push	{r1, r2, r3}
 800e93a:	b503      	push	{r0, r1, lr}
 800e93c:	4601      	mov	r1, r0
 800e93e:	ab03      	add	r3, sp, #12
 800e940:	4805      	ldr	r0, [pc, #20]	@ (800e958 <fiprintf+0x20>)
 800e942:	f853 2b04 	ldr.w	r2, [r3], #4
 800e946:	6800      	ldr	r0, [r0, #0]
 800e948:	9301      	str	r3, [sp, #4]
 800e94a:	f7ff f9b1 	bl	800dcb0 <_vfiprintf_r>
 800e94e:	b002      	add	sp, #8
 800e950:	f85d eb04 	ldr.w	lr, [sp], #4
 800e954:	b003      	add	sp, #12
 800e956:	4770      	bx	lr
 800e958:	2000001c 	.word	0x2000001c

0800e95c <abort>:
 800e95c:	b508      	push	{r3, lr}
 800e95e:	2006      	movs	r0, #6
 800e960:	f000 f834 	bl	800e9cc <raise>
 800e964:	2001      	movs	r0, #1
 800e966:	f7f3 f939 	bl	8001bdc <_exit>

0800e96a <_malloc_usable_size_r>:
 800e96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e96e:	1f18      	subs	r0, r3, #4
 800e970:	2b00      	cmp	r3, #0
 800e972:	bfbc      	itt	lt
 800e974:	580b      	ldrlt	r3, [r1, r0]
 800e976:	18c0      	addlt	r0, r0, r3
 800e978:	4770      	bx	lr

0800e97a <_raise_r>:
 800e97a:	291f      	cmp	r1, #31
 800e97c:	b538      	push	{r3, r4, r5, lr}
 800e97e:	4605      	mov	r5, r0
 800e980:	460c      	mov	r4, r1
 800e982:	d904      	bls.n	800e98e <_raise_r+0x14>
 800e984:	2316      	movs	r3, #22
 800e986:	6003      	str	r3, [r0, #0]
 800e988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e98c:	bd38      	pop	{r3, r4, r5, pc}
 800e98e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e990:	b112      	cbz	r2, 800e998 <_raise_r+0x1e>
 800e992:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e996:	b94b      	cbnz	r3, 800e9ac <_raise_r+0x32>
 800e998:	4628      	mov	r0, r5
 800e99a:	f000 f831 	bl	800ea00 <_getpid_r>
 800e99e:	4622      	mov	r2, r4
 800e9a0:	4601      	mov	r1, r0
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9a8:	f000 b818 	b.w	800e9dc <_kill_r>
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d00a      	beq.n	800e9c6 <_raise_r+0x4c>
 800e9b0:	1c59      	adds	r1, r3, #1
 800e9b2:	d103      	bne.n	800e9bc <_raise_r+0x42>
 800e9b4:	2316      	movs	r3, #22
 800e9b6:	6003      	str	r3, [r0, #0]
 800e9b8:	2001      	movs	r0, #1
 800e9ba:	e7e7      	b.n	800e98c <_raise_r+0x12>
 800e9bc:	2100      	movs	r1, #0
 800e9be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	4798      	blx	r3
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	e7e0      	b.n	800e98c <_raise_r+0x12>
	...

0800e9cc <raise>:
 800e9cc:	4b02      	ldr	r3, [pc, #8]	@ (800e9d8 <raise+0xc>)
 800e9ce:	4601      	mov	r1, r0
 800e9d0:	6818      	ldr	r0, [r3, #0]
 800e9d2:	f7ff bfd2 	b.w	800e97a <_raise_r>
 800e9d6:	bf00      	nop
 800e9d8:	2000001c 	.word	0x2000001c

0800e9dc <_kill_r>:
 800e9dc:	b538      	push	{r3, r4, r5, lr}
 800e9de:	4d07      	ldr	r5, [pc, #28]	@ (800e9fc <_kill_r+0x20>)
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	4608      	mov	r0, r1
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	602b      	str	r3, [r5, #0]
 800e9ea:	f7f3 f8e7 	bl	8001bbc <_kill>
 800e9ee:	1c43      	adds	r3, r0, #1
 800e9f0:	d102      	bne.n	800e9f8 <_kill_r+0x1c>
 800e9f2:	682b      	ldr	r3, [r5, #0]
 800e9f4:	b103      	cbz	r3, 800e9f8 <_kill_r+0x1c>
 800e9f6:	6023      	str	r3, [r4, #0]
 800e9f8:	bd38      	pop	{r3, r4, r5, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20001468 	.word	0x20001468

0800ea00 <_getpid_r>:
 800ea00:	f7f3 b8d4 	b.w	8001bac <_getpid>

0800ea04 <_init>:
 800ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea06:	bf00      	nop
 800ea08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea0a:	bc08      	pop	{r3}
 800ea0c:	469e      	mov	lr, r3
 800ea0e:	4770      	bx	lr

0800ea10 <_fini>:
 800ea10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea12:	bf00      	nop
 800ea14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea16:	bc08      	pop	{r3}
 800ea18:	469e      	mov	lr, r3
 800ea1a:	4770      	bx	lr
