
Projet_V-NOM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f86c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800fa50  0800fa50  00010a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010220  08010220  000121d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010220  08010220  00011220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010228  08010228  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010228  08010228  00011228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801022c  0801022c  0001122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08010230  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b4  200001d8  08010408  000121d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000148c  08010408  0001248c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024333  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ead  00000000  00000000  0003653b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  0003b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000170f  00000000  00000000  0003d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255be  00000000  00000000  0003e8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022fdc  00000000  00000000  00063e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9557  00000000  00000000  00086e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001703c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009310  00000000  00000000  0017040c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0017971c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fa34 	.word	0x0800fa34

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800fa34 	.word	0x0800fa34

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00b f957 	bl	800c300 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2201      	movs	r2, #1
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f002 f885 	bl	80031cc <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fc08 	bl	80018dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f003 fa2c 	bl	8004534 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fbfb 	bl	80018dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f002 fd48 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 fbe5 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f4 	.word	0x200001f4
 8001120:	0c900008 	.word	0x0c900008

08001124 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	2220      	movs	r2, #32
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f00b f8e5 	bl	800c300 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001136:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001138:	4a2b      	ldr	r2, [pc, #172]	@ (80011e8 <MX_ADC2_Init+0xc4>)
 800113a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800113e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001142:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115c:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800115e:	2204      	movs	r2, #4
 8001160:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001164:	2200      	movs	r2, #0
 8001166:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800116a:	2201      	movs	r2, #1
 800116c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001170:	2201      	movs	r2, #1
 8001172:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001184:	2200      	movs	r2, #0
 8001186:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800119e:	4811      	ldr	r0, [pc, #68]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 80011a0:	f002 f814 	bl	80031cc <HAL_ADC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011aa:	f000 fb97 	bl	80018dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_ADC2_Init+0xc8>)
 80011b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b2:	2306      	movs	r3, #6
 80011b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ba:	237f      	movs	r3, #127	@ 0x7f
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011be:	2304      	movs	r3, #4
 80011c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <MX_ADC2_Init+0xc0>)
 80011cc:	f002 fce4 	bl	8003b98 <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011d6:	f000 fb81 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000260 	.word	0x20000260
 80011e8:	50000100 	.word	0x50000100
 80011ec:	04300002 	.word	0x04300002

080011f0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b09c      	sub	sp, #112	@ 0x70
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	2244      	movs	r2, #68	@ 0x44
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f00b f875 	bl	800c300 <memset>
  if(adcHandle->Instance==ADC1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800121e:	d146      	bne.n	80012ae <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001220:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001224:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001226:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800122a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	4618      	mov	r0, r3
 8001232:	f004 fb6d 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800123c:	f000 fb4e 	bl	80018dc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001240:	4b42      	ldr	r3, [pc, #264]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a41      	ldr	r2, [pc, #260]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 8001248:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800124a:	4b40      	ldr	r3, [pc, #256]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10b      	bne.n	800126a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001252:	4b3f      	ldr	r3, [pc, #252]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a3e      	ldr	r2, [pc, #248]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001258:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b3c      	ldr	r3, [pc, #240]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a38      	ldr	r2, [pc, #224]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ToF2_Pin|GPIO_PIN_2;
 8001282:	2305      	movs	r3, #5
 8001284:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001298:	f003 fb90 	bl	80049bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2105      	movs	r1, #5
 80012a0:	2012      	movs	r0, #18
 80012a2:	f003 faa3 	bl	80047ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012a6:	2012      	movs	r0, #18
 80012a8:	f003 faba 	bl	8004820 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012ac:	e04a      	b.n	8001344 <HAL_ADC_MspInit+0x154>
  else if(adcHandle->Instance==ADC2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a28      	ldr	r2, [pc, #160]	@ (8001354 <HAL_ADC_MspInit+0x164>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d145      	bne.n	8001344 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 fb21 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80012d4:	f000 fb02 	bl	80018dc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 80012e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <HAL_ADC_MspInit+0x15c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d10b      	bne.n	8001302 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 80012f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_ADC_MspInit+0x160>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ToF2_Pin;
 800131a:	2301      	movs	r3, #1
 800131c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ToF2_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001330:	f003 fb44 	bl	80049bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2105      	movs	r1, #5
 8001338:	2012      	movs	r0, #18
 800133a:	f003 fa57 	bl	80047ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800133e:	2012      	movs	r0, #18
 8001340:	f003 fa6e 	bl	8004820 <HAL_NVIC_EnableIRQ>
}
 8001344:	bf00      	nop
 8001346:	3770      	adds	r7, #112	@ 0x70
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200002cc 	.word	0x200002cc
 8001350:	40021000 	.word	0x40021000
 8001354:	50000100 	.word	0x50000100

08001358 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_FREERTOS_Init+0x2c>)
 8001360:	1d3c      	adds	r4, r7, #4
 8001362:	461d      	mov	r5, r3
 8001364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f008 fd7e 	bl	8009e72 <osThreadCreate>
 8001376:	4603      	mov	r3, r0
 8001378:	4a03      	ldr	r2, [pc, #12]	@ (8001388 <MX_FREERTOS_Init+0x30>)
 800137a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	0800fa5c 	.word	0x0800fa5c
 8001388:	200002d0 	.word	0x200002d0

0800138c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001394:	2001      	movs	r0, #1
 8001396:	f008 fd93 	bl	8009ec0 <osDelay>
 800139a:	e7fb      	b.n	8001394 <StartDefaultTask+0x8>

0800139c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4b42      	ldr	r3, [pc, #264]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	4a41      	ldr	r2, [pc, #260]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013be:	4b3f      	ldr	r3, [pc, #252]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ca:	4b3c      	ldr	r3, [pc, #240]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a3b      	ldr	r2, [pc, #236]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b39      	ldr	r3, [pc, #228]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b36      	ldr	r3, [pc, #216]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	4a35      	ldr	r2, [pc, #212]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ee:	4b33      	ldr	r3, [pc, #204]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <MX_GPIO_Init+0x120>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	4a2f      	ldr	r2, [pc, #188]	@ (80014bc <MX_GPIO_Init+0x120>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001406:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <MX_GPIO_Init+0x120>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8001418:	4829      	ldr	r0, [pc, #164]	@ (80014c0 <MX_GPIO_Init+0x124>)
 800141a:	f003 fc51 	bl	8004cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2103      	movs	r1, #3
 8001422:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <MX_GPIO_Init+0x128>)
 8001424:	f003 fc4c 	bl	8004cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 8001428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4820      	ldr	r0, [pc, #128]	@ (80014c0 <MX_GPIO_Init+0x124>)
 800143e:	f003 fabd 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AG_INT1_Pin|AG_INT2_Pin;
 8001442:	2318      	movs	r3, #24
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001446:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145a:	f003 faaf 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin;
 800145e:	f44f 6341 	mov.w	r3, #3088	@ 0xc10
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4812      	ldr	r0, [pc, #72]	@ (80014c0 <MX_GPIO_Init+0x124>)
 8001478:	f003 faa0 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 800147c:	2303      	movs	r3, #3
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <MX_GPIO_Init+0x128>)
 8001494:	f003 fa92 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin;
 8001498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_MODE_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_GPIO_Init+0x128>)
 80014ae:	f003 fa85 	bl	80049bc <HAL_GPIO_Init>

}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	@ 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000800 	.word	0x48000800
 80014c4:	48000400 	.word	0x48000400

080014c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014cc:	f3bf 8f4f 	dsb	sy
}
 80014d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <__NVIC_SystemReset+0x24>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014da:	4904      	ldr	r1, [pc, #16]	@ (80014ec <__NVIC_SystemReset+0x24>)
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__NVIC_SystemReset+0x28>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014e2:	f3bf 8f4f 	dsb	sy
}
 80014e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <__NVIC_SystemReset+0x20>
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	05fa0004 	.word	0x05fa0004

080014f4 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014fc:	1d39      	adds	r1, r7, #4
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001502:	2201      	movs	r2, #1
 8001504:	4803      	ldr	r0, [pc, #12]	@ (8001514 <__io_putchar+0x20>)
 8001506:	f007 fa52 	bl	80089ae <HAL_UART_Transmit>

	return ch;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200004c0 	.word	0x200004c0

08001518 <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	@ (800158c <HAL_UART_ErrorCallback+0x74>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d12b      	bne.n	8001582 <HAL_UART_ErrorCallback+0x6a>
	{
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f007 fe26 	bl	800917c <HAL_UART_GetError>
 8001530:	4603      	mov	r3, r0
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <HAL_UART_ErrorCallback+0x28>
			DEBUG_PRINT("Parity Error!\r\n");
 800153a:	4815      	ldr	r0, [pc, #84]	@ (8001590 <HAL_UART_ErrorCallback+0x78>)
 800153c:	f00a fde0 	bl	800c100 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f007 fe1b 	bl	800917c <HAL_UART_GetError>
 8001546:	4603      	mov	r3, r0
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HAL_UART_ErrorCallback+0x3e>
			DEBUG_PRINT("Noise Error!\r\n");
 8001550:	4810      	ldr	r0, [pc, #64]	@ (8001594 <HAL_UART_ErrorCallback+0x7c>)
 8001552:	f00a fdd5 	bl	800c100 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f007 fe10 	bl	800917c <HAL_UART_GetError>
 800155c:	4603      	mov	r3, r0
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <HAL_UART_ErrorCallback+0x54>
			DEBUG_PRINT("Framing Error!\r\n");
 8001566:	480c      	ldr	r0, [pc, #48]	@ (8001598 <HAL_UART_ErrorCallback+0x80>)
 8001568:	f00a fdca 	bl	800c100 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f007 fe05 	bl	800917c <HAL_UART_GetError>
 8001572:	4603      	mov	r3, r0
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HAL_UART_ErrorCallback+0x6a>
			DEBUG_PRINT("Overrun Error!\r\n");
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <HAL_UART_ErrorCallback+0x84>)
 800157e:	f00a fdbf 	bl	800c100 <puts>

		//YLIDARX2_RestartDMA(&hlidar);
	}
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40004400 	.word	0x40004400
 8001590:	0800fa70 	.word	0x0800fa70
 8001594:	0800fa80 	.word	0x0800fa80
 8001598:	0800fa90 	.word	0x0800fa90
 800159c:	0800faa0 	.word	0x0800faa0

080015a0 <HAL_ADC_ConvCpltCallback>:
/**
 * @brief ADC conversion complete callback.
 * This function is called when an ADC conversion is complete.
 * It retrieves the ADC value and processes the data.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_ConvCpltCallback+0x26>
		hTof.adc_val_tof1 = HAL_ADC_GetValue(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f002 f8be 	bl	8003734 <HAL_ADC_GetValue>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015bc:	6093      	str	r3, [r2, #8]
		GP2Y0A41SK0F_get_distance1(&hTof);
 80015be:	480b      	ldr	r0, [pc, #44]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015c0:	f001 f986 	bl	80028d0 <GP2Y0A41SK0F_get_distance1>
	}
	else if (hadc->Instance == ADC2) {
		hTof.adc_val_tof2 = HAL_ADC_GetValue(hadc);
		GP2Y0A41SK0F_get_distance2(&hTof);
	}
}
 80015c4:	e00d      	b.n	80015e2 <HAL_ADC_ConvCpltCallback+0x42>
	else if (hadc->Instance == ADC2) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <HAL_ADC_ConvCpltCallback+0x50>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d108      	bne.n	80015e2 <HAL_ADC_ConvCpltCallback+0x42>
		hTof.adc_val_tof2 = HAL_ADC_GetValue(hadc);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f002 f8af 	bl	8003734 <HAL_ADC_GetValue>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015da:	60d3      	str	r3, [r2, #12]
		GP2Y0A41SK0F_get_distance2(&hTof);
 80015dc:	4803      	ldr	r0, [pc, #12]	@ (80015ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80015de:	f001 f9cb 	bl	8002978 <GP2Y0A41SK0F_get_distance2>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002f4 	.word	0x200002f4
 80015f0:	50000100 	.word	0x50000100

080015f4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	if (hadc->ErrorCode != HAL_ADC_ERROR_NONE) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <HAL_ADC_ErrorCallback+0x22>
		printf("ADC Error Code: %lx\n", hadc->ErrorCode);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001608:	4619      	mov	r1, r3
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <HAL_ADC_ErrorCallback+0x2c>)
 800160c:	f00a fd10 	bl	800c030 <iprintf>

		GP2Y0A41SK0F_Start_Interrupt(&hTof);
 8001610:	4804      	ldr	r0, [pc, #16]	@ (8001624 <HAL_ADC_ErrorCallback+0x30>)
 8001612:	f001 f92d 	bl	8002870 <GP2Y0A41SK0F_Start_Interrupt>
	}
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	0800fab0 	.word	0x0800fab0
 8001624:	200002f4 	.word	0x200002f4

08001628 <errHandler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void errHandler_xTaskCreate(BaseType_t r)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d103      	bne.n	800163e <errHandler_xTaskCreate+0x16>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
		DEBUG_PRINT("Tâche crée avec succès\r\n");
 8001636:	480c      	ldr	r0, [pc, #48]	@ (8001668 <errHandler_xTaskCreate+0x40>)
 8001638:	f00a fd62 	bl	800c100 <puts>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		DEBUG_PRINT("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 800163c:	e010      	b.n	8001660 <errHandler_xTaskCreate+0x38>
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001644:	d105      	bne.n	8001652 <errHandler_xTaskCreate+0x2a>
		DEBUG_PRINT("Erreur: Mémoire insuffisante\r\n");
 8001646:	4809      	ldr	r0, [pc, #36]	@ (800166c <errHandler_xTaskCreate+0x44>)
 8001648:	f00a fd5a 	bl	800c100 <puts>
		Error_Handler();
 800164c:	f000 f946 	bl	80018dc <Error_Handler>
}
 8001650:	e006      	b.n	8001660 <errHandler_xTaskCreate+0x38>
		DEBUG_PRINT("Erreur inconnue lors de la création de la tâche\r\n");
 8001652:	4807      	ldr	r0, [pc, #28]	@ (8001670 <errHandler_xTaskCreate+0x48>)
 8001654:	f00a fd54 	bl	800c100 <puts>
		Error_Handler();  	// Gestion d'erreur générique
 8001658:	f000 f940 	bl	80018dc <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 800165c:	f7ff ff34 	bl	80014c8 <__NVIC_SystemReset>
}
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	0800fafc 	.word	0x0800fafc
 800166c:	0800fb18 	.word	0x0800fb18
 8001670:	0800fb38 	.word	0x0800fb38

08001674 <task_Motors>:

#define TOF_TRESHHOLD 40

void task_Motors(void * unsused)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		DEBUG_PRINT("Mot1 speed: %d, Mot2 speed: %d\r\n", hMotors.current_speed1, hMotors.current_speed2);
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <task_Motors+0x24>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4a05      	ldr	r2, [pc, #20]	@ (8001698 <task_Motors+0x24>)
 8001682:	6912      	ldr	r2, [r2, #16]
 8001684:	4619      	mov	r1, r3
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <task_Motors+0x28>)
 8001688:	f00a fcd2 	bl	800c030 <iprintf>
		Motor_UpdateSpeed(&hMotors);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <task_Motors+0x24>)
 800168e:	f001 fadd 	bl	8002c4c <Motor_UpdateSpeed>
		DEBUG_PRINT("Mot1 speed: %d, Mot2 speed: %d\r\n", hMotors.current_speed1, hMotors.current_speed2);
 8001692:	bf00      	nop
 8001694:	e7f2      	b.n	800167c <task_Motors+0x8>
 8001696:	bf00      	nop
 8001698:	200002d4 	.word	0x200002d4
 800169c:	0800fb6c 	.word	0x0800fb6c

080016a0 <task_Behaviour>:
	}
}

void task_Behaviour(void * unsused)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	while (1)
	{
		DEBUG_PRINT("ToF1 distance: %d mm, ToF2 distance: %d mm\r\n", hTof.distance_tof1, hTof.distance_tof2);
 80016a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <task_Behaviour+0xb8>)
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001758 <task_Behaviour+0xb8>)
 80016ae:	6952      	ldr	r2, [r2, #20]
 80016b0:	4619      	mov	r1, r3
 80016b2:	482a      	ldr	r0, [pc, #168]	@ (800175c <task_Behaviour+0xbc>)
 80016b4:	f00a fcbc 	bl	800c030 <iprintf>

		/* Motors test */
		if (hTof.distance_tof2 > TOF_TRESHHOLD && hTof.distance_tof1 > TOF_TRESHHOLD)
 80016b8:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <task_Behaviour+0xb8>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	2b28      	cmp	r3, #40	@ 0x28
 80016be:	dd18      	ble.n	80016f2 <task_Behaviour+0x52>
 80016c0:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <task_Behaviour+0xb8>)
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	2b28      	cmp	r3, #40	@ 0x28
 80016c6:	dd14      	ble.n	80016f2 <task_Behaviour+0x52>
		{
			hMotors.mode_mot1 = FORWARD_MODE;
 80016c8:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <task_Behaviour+0xc0>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = FORWARD_MODE;
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <task_Behaviour+0xc0>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	705a      	strb	r2, [r3, #1]

			Motor_SetMode(&hMotors);
 80016d4:	4822      	ldr	r0, [pc, #136]	@ (8001760 <task_Behaviour+0xc0>)
 80016d6:	f001 f9f1 	bl	8002abc <Motor_SetMode>
			Motor_SetSpeed_percent(&hMotors, 40, 40);
 80016da:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8001764 <task_Behaviour+0xc4>
 80016de:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001764 <task_Behaviour+0xc4>
 80016e2:	481f      	ldr	r0, [pc, #124]	@ (8001760 <task_Behaviour+0xc0>)
 80016e4:	f001 fa58 	bl	8002b98 <Motor_SetSpeed_percent>
			vTaskDelay(1000 / portTICK_PERIOD_MS);
 80016e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ec:	f008 fdfc 	bl	800a2e8 <vTaskDelay>
 80016f0:	e023      	b.n	800173a <task_Behaviour+0x9a>
		}
		else if (hTof.distance_tof2 > TOF_TRESHHOLD && hTof.distance_tof1 <= TOF_TRESHHOLD)
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <task_Behaviour+0xb8>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b28      	cmp	r3, #40	@ 0x28
 80016f8:	dd0a      	ble.n	8001710 <task_Behaviour+0x70>
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <task_Behaviour+0xb8>)
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b28      	cmp	r3, #40	@ 0x28
 8001700:	dc06      	bgt.n	8001710 <task_Behaviour+0x70>
		{
			hMotors.mode_mot1 = FORWARD_MODE;
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <task_Behaviour+0xc0>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = REVERSE_MODE;
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <task_Behaviour+0xc0>)
 800170a:	2202      	movs	r2, #2
 800170c:	705a      	strb	r2, [r3, #1]
 800170e:	e014      	b.n	800173a <task_Behaviour+0x9a>
		}
		else if (hTof.distance_tof2 <= TOF_TRESHHOLD && hTof.distance_tof1 > TOF_TRESHHOLD)
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <task_Behaviour+0xb8>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	2b28      	cmp	r3, #40	@ 0x28
 8001716:	dc0a      	bgt.n	800172e <task_Behaviour+0x8e>
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <task_Behaviour+0xb8>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	2b28      	cmp	r3, #40	@ 0x28
 800171e:	dd06      	ble.n	800172e <task_Behaviour+0x8e>
		{
			hMotors.mode_mot1 = REVERSE_MODE;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <task_Behaviour+0xc0>)
 8001722:	2202      	movs	r2, #2
 8001724:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = FORWARD_MODE;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <task_Behaviour+0xc0>)
 8001728:	2201      	movs	r2, #1
 800172a:	705a      	strb	r2, [r3, #1]
 800172c:	e005      	b.n	800173a <task_Behaviour+0x9a>
		}
		else //if (hTof.distance_tof2 <= TOF_TRESHHOLD && hTof.distance_tof1 <= TOF_TRESHHOLD)
		{
			hMotors.mode_mot1 = REVERSE_MODE;
 800172e:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <task_Behaviour+0xc0>)
 8001730:	2202      	movs	r2, #2
 8001732:	701a      	strb	r2, [r3, #0]
			hMotors.mode_mot2 = REVERSE_MODE;
 8001734:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <task_Behaviour+0xc0>)
 8001736:	2202      	movs	r2, #2
 8001738:	705a      	strb	r2, [r3, #1]
		}

		Motor_SetMode(&hMotors);
 800173a:	4809      	ldr	r0, [pc, #36]	@ (8001760 <task_Behaviour+0xc0>)
 800173c:	f001 f9be 	bl	8002abc <Motor_SetMode>
		Motor_SetSpeed_percent(&hMotors, 40, 40);
 8001740:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001764 <task_Behaviour+0xc4>
 8001744:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001764 <task_Behaviour+0xc4>
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <task_Behaviour+0xc0>)
 800174a:	f001 fa25 	bl	8002b98 <Motor_SetSpeed_percent>

		vTaskDelay(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f008 fdca 	bl	800a2e8 <vTaskDelay>
		DEBUG_PRINT("ToF1 distance: %d mm, ToF2 distance: %d mm\r\n", hTof.distance_tof1, hTof.distance_tof2);
 8001754:	e7a8      	b.n	80016a8 <task_Behaviour+0x8>
 8001756:	bf00      	nop
 8001758:	200002f4 	.word	0x200002f4
 800175c:	0800fb90 	.word	0x0800fb90
 8001760:	200002d4 	.word	0x200002d4
 8001764:	42200000 	.word	0x42200000

08001768 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800176e:	f001 fab7 	bl	8002ce0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001772:	f000 f859 	bl	8001828 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001776:	f7ff fe11 	bl	800139c <MX_GPIO_Init>
	MX_SPI1_Init();
 800177a:	f000 f8b5 	bl	80018e8 <MX_SPI1_Init>
	MX_TIM1_Init();
 800177e:	f000 faf1 	bl	8001d64 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001782:	f000 fbb7 	bl	8001ef4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001786:	f000 fc0b 	bl	8001fa0 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 800178a:	f000 fd97 	bl	80022bc <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800178e:	f000 fd49 	bl	8002224 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8001792:	f7ff fc4f 	bl	8001034 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001796:	f7ff fcc5 	bl	8001124 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n*** Waking up V-NOM ***\r\n");
 800179a:	4818      	ldr	r0, [pc, #96]	@ (80017fc <main+0x94>)
 800179c:	f00a fcb0 	bl	800c100 <puts>
	//printf("%s", jumbo_logo_msg);

	/* ToF sensors Initialization */
	GP2Y0A41SK0F_Init(&hTof);
 80017a0:	4817      	ldr	r0, [pc, #92]	@ (8001800 <main+0x98>)
 80017a2:	f001 f83f 	bl	8002824 <GP2Y0A41SK0F_Init>

	/* ADXL343 Initialization */
	ADXL343_Init(&hADXL);
 80017a6:	4817      	ldr	r0, [pc, #92]	@ (8001804 <main+0x9c>)
 80017a8:	f000 ff84 	bl	80026b4 <ADXL343_Init>

	/* Motors Initialization */
	Motor_Init(&hMotors, &htim1);
 80017ac:	4916      	ldr	r1, [pc, #88]	@ (8001808 <main+0xa0>)
 80017ae:	4817      	ldr	r0, [pc, #92]	@ (800180c <main+0xa4>)
 80017b0:	f001 f934 	bl	8002a1c <Motor_Init>
	/* YLIDAR X2 Initialization with DMA *
	LIDAR_RX_GPIO_Port->PUPDR = GPIO_PULLUP;
	YLIDARX2_InitDMA(&hlidar, &huart2);*/

	/* Motors task */
	xReturned = xTaskCreate(
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <main+0xa8>)
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	2301      	movs	r3, #1
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2300      	movs	r3, #0
 80017be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017c2:	4914      	ldr	r1, [pc, #80]	@ (8001814 <main+0xac>)
 80017c4:	4814      	ldr	r0, [pc, #80]	@ (8001818 <main+0xb0>)
 80017c6:	f008 fc43 	bl	800a050 <xTaskCreate>
 80017ca:	6078      	str	r0, [r7, #4]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) 0, // Parameter passed into the task.
			TASK_PRIORITY_MOTOR,// Priority at which the task is created.
			&xHandle1); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff2b 	bl	8001628 <errHandler_xTaskCreate>

	/* Behaviour task */
	xReturned = xTaskCreate(
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <main+0xb4>)
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	2301      	movs	r3, #1
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e0:	490f      	ldr	r1, [pc, #60]	@ (8001820 <main+0xb8>)
 80017e2:	4810      	ldr	r0, [pc, #64]	@ (8001824 <main+0xbc>)
 80017e4:	f008 fc34 	bl	800a050 <xTaskCreate>
 80017e8:	6078      	str	r0, [r7, #4]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) 0, // Parameter passed into the task.
			TASK_PRIORITY_MOTOR,// Priority at which the task is created.
			&xHandle2); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff1c 	bl	8001628 <errHandler_xTaskCreate>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80017f0:	f7ff fdb2 	bl	8001358 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80017f4:	f008 fb36 	bl	8009e64 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <main+0x90>
 80017fc:	0800fbc0 	.word	0x0800fbc0
 8001800:	200002f4 	.word	0x200002f4
 8001804:	2000030c 	.word	0x2000030c
 8001808:	200003dc 	.word	0x200003dc
 800180c:	200002d4 	.word	0x200002d4
 8001810:	20000320 	.word	0x20000320
 8001814:	0800fbdc 	.word	0x0800fbdc
 8001818:	08001675 	.word	0x08001675
 800181c:	20000324 	.word	0x20000324
 8001820:	0800fbe8 	.word	0x0800fbe8
 8001824:	080016a1 	.word	0x080016a1

08001828 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b094      	sub	sp, #80	@ 0x50
 800182c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182e:	f107 0318 	add.w	r3, r7, #24
 8001832:	2238      	movs	r2, #56	@ 0x38
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f00a fd62 	bl	800c300 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800184a:	2000      	movs	r0, #0
 800184c:	f003 fa50 	bl	8004cf0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001850:	2302      	movs	r3, #2
 8001852:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800185a:	2340      	movs	r3, #64	@ 0x40
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185e:	2302      	movs	r3, #2
 8001860:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001862:	2302      	movs	r3, #2
 8001864:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001866:	2304      	movs	r3, #4
 8001868:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800186a:	2355      	movs	r3, #85	@ 0x55
 800186c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800186e:	2302      	movs	r3, #2
 8001870:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001872:	2302      	movs	r3, #2
 8001874:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001876:	2302      	movs	r3, #2
 8001878:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	4618      	mov	r0, r3
 8001880:	f003 faea 	bl	8004e58 <HAL_RCC_OscConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800188a:	f000 f827 	bl	80018dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188e:	230f      	movs	r3, #15
 8001890:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001892:	2303      	movs	r3, #3
 8001894:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2104      	movs	r1, #4
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fde8 	bl	800547c <HAL_RCC_ClockConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80018b2:	f000 f813 	bl	80018dc <Error_Handler>
	}
}
 80018b6:	bf00      	nop
 80018b8:	3750      	adds	r7, #80	@ 0x50
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ce:	d101      	bne.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80018d0:	f001 fa1e 	bl	8002d10 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <Error_Handler+0x8>

080018e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <MX_SPI1_Init+0x74>)
 80018ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001960 <MX_SPI1_Init+0x78>)
 80018f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_SPI1_Init+0x74>)
 80018f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <MX_SPI1_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <MX_SPI1_Init+0x74>)
 8001902:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001906:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MX_SPI1_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800190e:	4b13      	ldr	r3, [pc, #76]	@ (800195c <MX_SPI1_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <MX_SPI1_Init+0x74>)
 8001916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800191a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <MX_SPI1_Init+0x74>)
 800191e:	2228      	movs	r2, #40	@ 0x28
 8001920:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <MX_SPI1_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <MX_SPI1_Init+0x74>)
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <MX_SPI1_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001934:	4b09      	ldr	r3, [pc, #36]	@ (800195c <MX_SPI1_Init+0x74>)
 8001936:	2207      	movs	r2, #7
 8001938:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <MX_SPI1_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_SPI1_Init+0x74>)
 8001942:	2208      	movs	r2, #8
 8001944:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	@ (800195c <MX_SPI1_Init+0x74>)
 8001948:	f004 f9d2 	bl	8005cf0 <HAL_SPI_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001952:	f7ff ffc3 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000328 	.word	0x20000328
 8001960:	40013000 	.word	0x40013000

08001964 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	@ 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <HAL_SPI_MspInit+0x8c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d130      	bne.n	80019e8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_SPI_MspInit+0x90>)
 8001988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198a:	4a1a      	ldr	r2, [pc, #104]	@ (80019f4 <HAL_SPI_MspInit+0x90>)
 800198c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001990:	6613      	str	r3, [r2, #96]	@ 0x60
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <HAL_SPI_MspInit+0x90>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001996:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_SPI_MspInit+0x90>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <HAL_SPI_MspInit+0x90>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_SPI_MspInit+0x90>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019b6:	23e0      	movs	r3, #224	@ 0xe0
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019c6:	2305      	movs	r3, #5
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d4:	f002 fff2 	bl	80049bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2105      	movs	r1, #5
 80019dc:	2023      	movs	r0, #35	@ 0x23
 80019de:	f002 ff05 	bl	80047ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019e2:	2023      	movs	r0, #35	@ 0x23
 80019e4:	f002 ff1c 	bl	8004820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	@ 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40013000 	.word	0x40013000
 80019f4:	40021000 	.word	0x40021000

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_MspInit+0x50>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a02:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <HAL_MspInit+0x50>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <HAL_MspInit+0x50>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <HAL_MspInit+0x50>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a48 <HAL_MspInit+0x50>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_MspInit+0x50>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	210f      	movs	r1, #15
 8001a32:	f06f 0001 	mvn.w	r0, #1
 8001a36:	f002 fed9 	bl	80047ec <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a3a:	f003 f9fd 	bl	8004e38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	@ 0x30
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b14 <HAL_InitTick+0xc8>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a60:	4a2c      	ldr	r2, [pc, #176]	@ (8001b14 <HAL_InitTick+0xc8>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a68:	4b2a      	ldr	r3, [pc, #168]	@ (8001b14 <HAL_InitTick+0xc8>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fed0 	bl	8005824 <HAL_RCC_GetClockConfig>
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a84:	f003 fea2 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8001a88:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8c:	4a22      	ldr	r2, [pc, #136]	@ (8001b18 <HAL_InitTick+0xcc>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	3b01      	subs	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <HAL_InitTick+0xd0>)
 8001a9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <HAL_InitTick+0xd0>)
 8001aa2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b1c <HAL_InitTick+0xd0>)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001aae:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <HAL_InitTick+0xd0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <HAL_InitTick+0xd0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8001aba:	4818      	ldr	r0, [pc, #96]	@ (8001b1c <HAL_InitTick+0xd0>)
 8001abc:	f005 f962 	bl	8006d84 <HAL_TIM_Base_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11b      	bne.n	8001b06 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001ace:	4813      	ldr	r0, [pc, #76]	@ (8001b1c <HAL_InitTick+0xd0>)
 8001ad0:	f005 f9b0 	bl	8006e34 <HAL_TIM_Base_Start_IT>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ada:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d111      	bne.n	8001b06 <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae2:	201c      	movs	r0, #28
 8001ae4:	f002 fe9c 	bl	8004820 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b0f      	cmp	r3, #15
 8001aec:	d808      	bhi.n	8001b00 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001aee:	2200      	movs	r2, #0
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	201c      	movs	r0, #28
 8001af4:	f002 fe7a 	bl	80047ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af8:	4a09      	ldr	r2, [pc, #36]	@ (8001b20 <HAL_InitTick+0xd4>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e002      	b.n	8001b06 <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3730      	adds	r7, #48	@ 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	2000038c 	.word	0x2000038c
 8001b20:	20000004 	.word	0x20000004

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <NMI_Handler+0x4>

08001b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b60:	4803      	ldr	r0, [pc, #12]	@ (8001b70 <ADC1_2_IRQHandler+0x14>)
 8001b62:	f001 fdf5 	bl	8003750 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001b66:	4803      	ldr	r0, [pc, #12]	@ (8001b74 <ADC1_2_IRQHandler+0x18>)
 8001b68:	f001 fdf2 	bl	8003750 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200001f4 	.word	0x200001f4
 8001b74:	20000260 	.word	0x20000260

08001b78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <TIM2_IRQHandler+0x10>)
 8001b7e:	f005 fc61 	bl	8007444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000038c 	.word	0x2000038c

08001b8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <SPI1_IRQHandler+0x10>)
 8001b92:	f004 fe27 	bl	80067e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000328 	.word	0x20000328

08001ba0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <USART2_IRQHandler+0x10>)
 8001ba6:	f006 ff91 	bl	8008acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000554 	.word	0x20000554

08001bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_kill>:

int _kill(int pid, int sig)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bce:	f00a fc3f 	bl	800c450 <__errno>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2216      	movs	r2, #22
 8001bd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_exit>:

void _exit (int status)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ffe7 	bl	8001bc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf6:	bf00      	nop
 8001bf8:	e7fd      	b.n	8001bf6 <_exit+0x12>

08001bfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e00a      	b.n	8001c22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0c:	f3af 8000 	nop.w
 8001c10:	4601      	mov	r1, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	60ba      	str	r2, [r7, #8]
 8001c18:	b2ca      	uxtb	r2, r1
 8001c1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dbf0      	blt.n	8001c0c <_read+0x12>
  }

  return len;
 8001c2a:	687b      	ldr	r3, [r7, #4]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	e009      	b.n	8001c5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	60ba      	str	r2, [r7, #8]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fc50 	bl	80014f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbf1      	blt.n	8001c46 <_write+0x12>
  }
  return len;
 8001c62:	687b      	ldr	r3, [r7, #4]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_close>:

int _close(int file)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c94:	605a      	str	r2, [r3, #4]
  return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_isatty>:

int _isatty(int file)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	@ (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f00a fba4 	bl	800c450 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	@ (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20008000 	.word	0x20008000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	200003d8 	.word	0x200003d8
 8001d3c:	20001490 	.word	0x20001490

08001d40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	@ (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b09c      	sub	sp, #112	@ 0x70
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2234      	movs	r2, #52	@ 0x34
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f00a faae 	bl	800c300 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001da4:	4b51      	ldr	r3, [pc, #324]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001da6:	4a52      	ldr	r2, [pc, #328]	@ (8001ef0 <MX_TIM1_Init+0x18c>)
 8001da8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001daa:	4b50      	ldr	r3, [pc, #320]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db0:	4b4e      	ldr	r3, [pc, #312]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001db6:	4b4d      	ldr	r3, [pc, #308]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001db8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dc4:	4b49      	ldr	r3, [pc, #292]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dca:	4b48      	ldr	r3, [pc, #288]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dd0:	4846      	ldr	r0, [pc, #280]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001dd2:	f004 ffd7 	bl	8006d84 <HAL_TIM_Base_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ddc:	f7ff fd7e 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001de6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001dea:	4619      	mov	r1, r3
 8001dec:	483f      	ldr	r0, [pc, #252]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001dee:	f005 fd8d 	bl	800790c <HAL_TIM_ConfigClockSource>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001df8:	f7ff fd70 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dfc:	483b      	ldr	r0, [pc, #236]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001dfe:	f005 f883 	bl	8006f08 <HAL_TIM_PWM_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e08:	f7ff fd68 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4833      	ldr	r0, [pc, #204]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001e20:	f006 fbfc 	bl	800861c <HAL_TIMEx_MasterConfigSynchronization>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e2a:	f7ff fd57 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e2e:	2360      	movs	r3, #96	@ 0x60
 8001e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e36:	2300      	movs	r3, #0
 8001e38:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4619      	mov	r1, r3
 8001e52:	4826      	ldr	r0, [pc, #152]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001e54:	f005 fc46 	bl	80076e4 <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e5e:	f7ff fd3d 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e66:	2204      	movs	r2, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4820      	ldr	r0, [pc, #128]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001e6c:	f005 fc3a 	bl	80076e4 <HAL_TIM_PWM_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001e76:	f7ff fd31 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e7e:	2208      	movs	r2, #8
 8001e80:	4619      	mov	r1, r3
 8001e82:	481a      	ldr	r0, [pc, #104]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001e84:	f005 fc2e 	bl	80076e4 <HAL_TIM_PWM_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001e8e:	f7ff fd25 	bl	80018dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ea6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eaa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001eb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4807      	ldr	r0, [pc, #28]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001ed0:	f006 fc26 	bl	8008720 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001eda:	f7ff fcff 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ede:	4803      	ldr	r0, [pc, #12]	@ (8001eec <MX_TIM1_Init+0x188>)
 8001ee0:	f000 f94a 	bl	8002178 <HAL_TIM_MspPostInit>

}
 8001ee4:	bf00      	nop
 8001ee6:	3770      	adds	r7, #112	@ 0x70
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200003dc 	.word	0x200003dc
 8001ef0:	40012c00 	.word	0x40012c00

08001ef4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08c      	sub	sp, #48	@ 0x30
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	2224      	movs	r2, #36	@ 0x24
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f00a f9fc 	bl	800c300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f08:	463b      	mov	r3, r7
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f12:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <MX_TIM3_Init+0xa4>)
 8001f14:	4a21      	ldr	r2, [pc, #132]	@ (8001f9c <MX_TIM3_Init+0xa8>)
 8001f16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f18:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <MX_TIM3_Init+0xa4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <MX_TIM3_Init+0xa4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <MX_TIM3_Init+0xa4>)
 8001f26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <MX_TIM3_Init+0xa4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <MX_TIM3_Init+0xa4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f40:	2301      	movs	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f50:	2301      	movs	r3, #1
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	4619      	mov	r1, r3
 8001f62:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <MX_TIM3_Init+0xa4>)
 8001f64:	f005 f9c8 	bl	80072f8 <HAL_TIM_Encoder_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001f6e:	f7ff fcb5 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4806      	ldr	r0, [pc, #24]	@ (8001f98 <MX_TIM3_Init+0xa4>)
 8001f80:	f006 fb4c 	bl	800861c <HAL_TIMEx_MasterConfigSynchronization>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001f8a:	f7ff fca7 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	3730      	adds	r7, #48	@ 0x30
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000428 	.word	0x20000428
 8001f9c:	40000400 	.word	0x40000400

08001fa0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	@ 0x30
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	2224      	movs	r2, #36	@ 0x24
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f00a f9a6 	bl	800c300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fbe:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <MX_TIM4_Init+0xa4>)
 8001fc0:	4a21      	ldr	r2, [pc, #132]	@ (8002048 <MX_TIM4_Init+0xa8>)
 8001fc2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <MX_TIM4_Init+0xa4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b1e      	ldr	r3, [pc, #120]	@ (8002044 <MX_TIM4_Init+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <MX_TIM4_Init+0xa4>)
 8001fd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <MX_TIM4_Init+0xa4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fde:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <MX_TIM4_Init+0xa4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fec:	2301      	movs	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	4619      	mov	r1, r3
 800200e:	480d      	ldr	r0, [pc, #52]	@ (8002044 <MX_TIM4_Init+0xa4>)
 8002010:	f005 f972 	bl	80072f8 <HAL_TIM_Encoder_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800201a:	f7ff fc5f 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002026:	463b      	mov	r3, r7
 8002028:	4619      	mov	r1, r3
 800202a:	4806      	ldr	r0, [pc, #24]	@ (8002044 <MX_TIM4_Init+0xa4>)
 800202c:	f006 faf6 	bl	800861c <HAL_TIMEx_MasterConfigSynchronization>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002036:	f7ff fc51 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	3730      	adds	r7, #48	@ 0x30
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000474 	.word	0x20000474
 8002048:	40000800 	.word	0x40000800

0800204c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <HAL_TIM_Base_MspInit+0x38>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10b      	bne.n	8002076 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_TIM_Base_MspInit+0x3c>)
 8002060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002062:	4a09      	ldr	r2, [pc, #36]	@ (8002088 <HAL_TIM_Base_MspInit+0x3c>)
 8002064:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002068:	6613      	str	r3, [r2, #96]	@ 0x60
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <HAL_TIM_Base_MspInit+0x3c>)
 800206c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	@ 0x30
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002168 <HAL_TIM_Encoder_MspInit+0xdc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d128      	bne.n	8002100 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ae:	4b2f      	ldr	r3, [pc, #188]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	4a2e      	ldr	r2, [pc, #184]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ba:	4b2c      	ldr	r3, [pc, #176]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	4b29      	ldr	r3, [pc, #164]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	4a28      	ldr	r2, [pc, #160]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020de:	2330      	movs	r3, #48	@ 0x30
 80020e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020ee:	2302      	movs	r3, #2
 80020f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	4619      	mov	r1, r3
 80020f8:	481d      	ldr	r0, [pc, #116]	@ (8002170 <HAL_TIM_Encoder_MspInit+0xe4>)
 80020fa:	f002 fc5f 	bl	80049bc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020fe:	e02e      	b.n	800215e <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1b      	ldr	r2, [pc, #108]	@ (8002174 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d129      	bne.n	800215e <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800210a:	4b18      	ldr	r3, [pc, #96]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	4a17      	ldr	r2, [pc, #92]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6593      	str	r3, [r2, #88]	@ 0x58
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	4a11      	ldr	r2, [pc, #68]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800212e:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800213a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800214c:	230a      	movs	r3, #10
 800214e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800215a:	f002 fc2f 	bl	80049bc <HAL_GPIO_Init>
}
 800215e:	bf00      	nop
 8002160:	3730      	adds	r7, #48	@ 0x30
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40000400 	.word	0x40000400
 800216c:	40021000 	.word	0x40021000
 8002170:	48000400 	.word	0x48000400
 8002174:	40000800 	.word	0x40000800

08002178 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	@ 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a20      	ldr	r2, [pc, #128]	@ (8002218 <HAL_TIM_MspPostInit+0xa0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d13a      	bne.n	8002210 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b20      	ldr	r3, [pc, #128]	@ (800221c <HAL_TIM_MspPostInit+0xa4>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	4a1f      	ldr	r2, [pc, #124]	@ (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a6:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b6:	4a19      	ldr	r2, [pc, #100]	@ (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021be:	4b17      	ldr	r3, [pc, #92]	@ (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80021ca:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80021ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021dc:	2306      	movs	r3, #6
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	480e      	ldr	r0, [pc, #56]	@ (8002220 <HAL_TIM_MspPostInit+0xa8>)
 80021e8:	f002 fbe8 	bl	80049bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80021ec:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021fe:	2306      	movs	r3, #6
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800220c:	f002 fbd6 	bl	80049bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002210:	bf00      	nop
 8002212:	3728      	adds	r7, #40	@ 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40012c00 	.word	0x40012c00
 800221c:	40021000 	.word	0x40021000
 8002220:	48000400 	.word	0x48000400

08002224 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002228:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 800222a:	4a23      	ldr	r2, [pc, #140]	@ (80022b8 <MX_USART1_UART_Init+0x94>)
 800222c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800222e:	4b21      	ldr	r3, [pc, #132]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 8002230:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b1d      	ldr	r3, [pc, #116]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002242:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002260:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002266:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 8002268:	2200      	movs	r2, #0
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800226c:	4811      	ldr	r0, [pc, #68]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 800226e:	f006 fb4e 	bl	800890e <HAL_UART_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002278:	f7ff fb30 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800227c:	2100      	movs	r1, #0
 800227e:	480d      	ldr	r0, [pc, #52]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 8002280:	f007 fd0d 	bl	8009c9e <HAL_UARTEx_SetTxFifoThreshold>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800228a:	f7ff fb27 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800228e:	2100      	movs	r1, #0
 8002290:	4808      	ldr	r0, [pc, #32]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 8002292:	f007 fd42 	bl	8009d1a <HAL_UARTEx_SetRxFifoThreshold>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800229c:	f7ff fb1e 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022a0:	4804      	ldr	r0, [pc, #16]	@ (80022b4 <MX_USART1_UART_Init+0x90>)
 80022a2:	f007 fcc3 	bl	8009c2c <HAL_UARTEx_DisableFifoMode>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022ac:	f7ff fb16 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	200004c0 	.word	0x200004c0
 80022b8:	40013800 	.word	0x40013800

080022bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022c0:	4b22      	ldr	r3, [pc, #136]	@ (800234c <MX_USART2_UART_Init+0x90>)
 80022c2:	4a23      	ldr	r2, [pc, #140]	@ (8002350 <MX_USART2_UART_Init+0x94>)
 80022c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022c6:	4b21      	ldr	r3, [pc, #132]	@ (800234c <MX_USART2_UART_Init+0x90>)
 80022c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ce:	4b1f      	ldr	r3, [pc, #124]	@ (800234c <MX_USART2_UART_Init+0x90>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <MX_USART2_UART_Init+0x90>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022da:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <MX_USART2_UART_Init+0x90>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80022e0:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <MX_USART2_UART_Init+0x90>)
 80022e2:	2204      	movs	r2, #4
 80022e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e6:	4b19      	ldr	r3, [pc, #100]	@ (800234c <MX_USART2_UART_Init+0x90>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ec:	4b17      	ldr	r3, [pc, #92]	@ (800234c <MX_USART2_UART_Init+0x90>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f2:	4b16      	ldr	r3, [pc, #88]	@ (800234c <MX_USART2_UART_Init+0x90>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022f8:	4b14      	ldr	r3, [pc, #80]	@ (800234c <MX_USART2_UART_Init+0x90>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022fe:	4b13      	ldr	r3, [pc, #76]	@ (800234c <MX_USART2_UART_Init+0x90>)
 8002300:	2200      	movs	r2, #0
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002304:	4811      	ldr	r0, [pc, #68]	@ (800234c <MX_USART2_UART_Init+0x90>)
 8002306:	f006 fb02 	bl	800890e <HAL_UART_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002310:	f7ff fae4 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002314:	2100      	movs	r1, #0
 8002316:	480d      	ldr	r0, [pc, #52]	@ (800234c <MX_USART2_UART_Init+0x90>)
 8002318:	f007 fcc1 	bl	8009c9e <HAL_UARTEx_SetTxFifoThreshold>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002322:	f7ff fadb 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002326:	2100      	movs	r1, #0
 8002328:	4808      	ldr	r0, [pc, #32]	@ (800234c <MX_USART2_UART_Init+0x90>)
 800232a:	f007 fcf6 	bl	8009d1a <HAL_UARTEx_SetRxFifoThreshold>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002334:	f7ff fad2 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	@ (800234c <MX_USART2_UART_Init+0x90>)
 800233a:	f007 fc77 	bl	8009c2c <HAL_UARTEx_DisableFifoMode>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002344:	f7ff faca 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000554 	.word	0x20000554
 8002350:	40004400 	.word	0x40004400

08002354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b09e      	sub	sp, #120	@ 0x78
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	2244      	movs	r2, #68	@ 0x44
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f009 ffc3 	bl	800c300 <memset>
  if(uartHandle->Instance==USART1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a4f      	ldr	r2, [pc, #316]	@ (80024bc <HAL_UART_MspInit+0x168>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d136      	bne.n	80023f2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002384:	2301      	movs	r3, #1
 8002386:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fabd 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800239c:	f7ff fa9e 	bl	80018dc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a0:	4b47      	ldr	r3, [pc, #284]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 80023a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a4:	4a46      	ldr	r2, [pc, #280]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 80023a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80023ac:	4b44      	ldr	r3, [pc, #272]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 80023ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b8:	4b41      	ldr	r3, [pc, #260]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023bc:	4a40      	ldr	r2, [pc, #256]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c4:	4b3e      	ldr	r3, [pc, #248]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80023d0:	23c0      	movs	r3, #192	@ 0xc0
 80023d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023e0:	2307      	movs	r3, #7
 80023e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023e8:	4619      	mov	r1, r3
 80023ea:	4836      	ldr	r0, [pc, #216]	@ (80024c4 <HAL_UART_MspInit+0x170>)
 80023ec:	f002 fae6 	bl	80049bc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023f0:	e060      	b.n	80024b4 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a34      	ldr	r2, [pc, #208]	@ (80024c8 <HAL_UART_MspInit+0x174>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d15b      	bne.n	80024b4 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023fc:	2302      	movs	r3, #2
 80023fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002400:	2300      	movs	r3, #0
 8002402:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002404:	f107 0320 	add.w	r3, r7, #32
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fa81 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002414:	f7ff fa62 	bl	80018dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002418:	4b29      	ldr	r3, [pc, #164]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241c:	4a28      	ldr	r2, [pc, #160]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 800241e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002422:	6593      	str	r3, [r2, #88]	@ 0x58
 8002424:	4b26      	ldr	r3, [pc, #152]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002430:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 8002432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002434:	4a22      	ldr	r2, [pc, #136]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800243c:	4b20      	ldr	r3, [pc, #128]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 800243e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 800244a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244c:	4a1c      	ldr	r2, [pc, #112]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002454:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <HAL_UART_MspInit+0x16c>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8002460:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002464:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002472:	2307      	movs	r3, #7
 8002474:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 8002476:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800247a:	4619      	mov	r1, r3
 800247c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002480:	f002 fa9c 	bl	80049bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 8002484:	2308      	movs	r3, #8
 8002486:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002494:	2307      	movs	r3, #7
 8002496:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8002498:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800249c:	4619      	mov	r1, r3
 800249e:	4809      	ldr	r0, [pc, #36]	@ (80024c4 <HAL_UART_MspInit+0x170>)
 80024a0:	f002 fa8c 	bl	80049bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2105      	movs	r1, #5
 80024a8:	2026      	movs	r0, #38	@ 0x26
 80024aa:	f002 f99f 	bl	80047ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024ae:	2026      	movs	r0, #38	@ 0x26
 80024b0:	f002 f9b6 	bl	8004820 <HAL_NVIC_EnableIRQ>
}
 80024b4:	bf00      	nop
 80024b6:	3778      	adds	r7, #120	@ 0x78
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40013800 	.word	0x40013800
 80024c0:	40021000 	.word	0x40021000
 80024c4:	48000400 	.word	0x48000400
 80024c8:	40004400 	.word	0x40004400

080024cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024cc:	480d      	ldr	r0, [pc, #52]	@ (8002504 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024d0:	f7ff fc36 	bl	8001d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d4:	480c      	ldr	r0, [pc, #48]	@ (8002508 <LoopForever+0x6>)
  ldr r1, =_edata
 80024d6:	490d      	ldr	r1, [pc, #52]	@ (800250c <LoopForever+0xa>)
  ldr r2, =_sidata
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <LoopForever+0xe>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024dc:	e002      	b.n	80024e4 <LoopCopyDataInit>

080024de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e2:	3304      	adds	r3, #4

080024e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e8:	d3f9      	bcc.n	80024de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002518 <LoopForever+0x16>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f0:	e001      	b.n	80024f6 <LoopFillZerobss>

080024f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f4:	3204      	adds	r2, #4

080024f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f8:	d3fb      	bcc.n	80024f2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80024fa:	f009 ffaf 	bl	800c45c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024fe:	f7ff f933 	bl	8001768 <main>

08002502 <LoopForever>:

LoopForever:
    b LoopForever
 8002502:	e7fe      	b.n	8002502 <LoopForever>
  ldr   r0, =_estack
 8002504:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800250c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002510:	08010230 	.word	0x08010230
  ldr r2, =_sbss
 8002514:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002518:	2000148c 	.word	0x2000148c

0800251c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800251c:	e7fe      	b.n	800251c <COMP1_2_3_IRQHandler>
	...

08002520 <spiWrite>:
 * @param address The address of the register to write to.
 * @param data Pointer to the data to send.
 * @param length Number of bytes to send.
 */
void spiWrite(uint8_t address, uint8_t *data, uint16_t length)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	4613      	mov	r3, r2
 800252e:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status;

    // Set the write command (clear MSB of the register address)
    uint8_t writeAddress = address & 0x7F;
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002536:	b2db      	uxtb	r3, r3
 8002538:	73bb      	strb	r3, [r7, #14]

    // Pull CS low to start the SPI transaction
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800253a:	2200      	movs	r2, #0
 800253c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002540:	481a      	ldr	r0, [pc, #104]	@ (80025ac <spiWrite+0x8c>)
 8002542:	f002 fbbd 	bl	8004cc0 <HAL_GPIO_WritePin>

    // Transmit the address
    status = HAL_SPI_Transmit(&hspi1, &writeAddress, 1, HAL_MAX_DELAY);
 8002546:	f107 010e 	add.w	r1, r7, #14
 800254a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800254e:	2201      	movs	r2, #1
 8002550:	4817      	ldr	r0, [pc, #92]	@ (80025b0 <spiWrite+0x90>)
 8002552:	f003 fc78 	bl	8005e46 <HAL_SPI_Transmit>
 8002556:	4603      	mov	r3, r0
 8002558:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <spiWrite+0x56>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set CS high on error
 8002560:	2201      	movs	r2, #1
 8002562:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002566:	4811      	ldr	r0, [pc, #68]	@ (80025ac <spiWrite+0x8c>)
 8002568:	f002 fbaa 	bl	8004cc0 <HAL_GPIO_WritePin>
        DEBUG_PRINT("SPI Write Error during address transmission!\n");
 800256c:	4811      	ldr	r0, [pc, #68]	@ (80025b4 <spiWrite+0x94>)
 800256e:	f009 fdc7 	bl	800c100 <puts>
        Error_Handler();
 8002572:	f7ff f9b3 	bl	80018dc <Error_Handler>
    }

    // Transmit the data
    status = HAL_SPI_Transmit(&hspi1, data, length, HAL_MAX_DELAY);
 8002576:	88ba      	ldrh	r2, [r7, #4]
 8002578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800257c:	6839      	ldr	r1, [r7, #0]
 800257e:	480c      	ldr	r0, [pc, #48]	@ (80025b0 <spiWrite+0x90>)
 8002580:	f003 fc61 	bl	8005e46 <HAL_SPI_Transmit>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set CS high after transaction
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800258e:	4807      	ldr	r0, [pc, #28]	@ (80025ac <spiWrite+0x8c>)
 8002590:	f002 fb96 	bl	8004cc0 <HAL_GPIO_WritePin>

    if (status != HAL_OK)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <spiWrite+0x84>
    {
        DEBUG_PRINT("SPI Write Error during data transmission!\n");
 800259a:	4807      	ldr	r0, [pc, #28]	@ (80025b8 <spiWrite+0x98>)
 800259c:	f009 fdb0 	bl	800c100 <puts>
        Error_Handler();
 80025a0:	f7ff f99c 	bl	80018dc <Error_Handler>
    }
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	48000400 	.word	0x48000400
 80025b0:	20000328 	.word	0x20000328
 80025b4:	0800fbf8 	.word	0x0800fbf8
 80025b8:	0800fc28 	.word	0x0800fc28

080025bc <spiRead>:
 * @param address The address of the register to read from.
 * @param data Pointer to the buffer to store the received data.
 * @param length Number of bytes to read.
 */
void spiRead(uint8_t address, uint8_t *data, uint16_t length)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	4613      	mov	r3, r2
 80025ca:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status;

    // Pull CS low to start the SPI transaction
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025d2:	481a      	ldr	r0, [pc, #104]	@ (800263c <spiRead+0x80>)
 80025d4:	f002 fb74 	bl	8004cc0 <HAL_GPIO_WritePin>

    // Transmit the address
    status = HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 80025d8:	1df9      	adds	r1, r7, #7
 80025da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025de:	2201      	movs	r2, #1
 80025e0:	4817      	ldr	r0, [pc, #92]	@ (8002640 <spiRead+0x84>)
 80025e2:	f003 fc30 	bl	8005e46 <HAL_SPI_Transmit>
 80025e6:	4603      	mov	r3, r0
 80025e8:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <spiRead+0x4a>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set CS high on error
 80025f0:	2201      	movs	r2, #1
 80025f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025f6:	4811      	ldr	r0, [pc, #68]	@ (800263c <spiRead+0x80>)
 80025f8:	f002 fb62 	bl	8004cc0 <HAL_GPIO_WritePin>
        DEBUG_PRINT("SPI Read Error during address transmission!\n");
 80025fc:	4811      	ldr	r0, [pc, #68]	@ (8002644 <spiRead+0x88>)
 80025fe:	f009 fd7f 	bl	800c100 <puts>
        Error_Handler();
 8002602:	f7ff f96b 	bl	80018dc <Error_Handler>
    }

    // Receive the data
    status = HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 8002606:	88ba      	ldrh	r2, [r7, #4]
 8002608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800260c:	6839      	ldr	r1, [r7, #0]
 800260e:	480c      	ldr	r0, [pc, #48]	@ (8002640 <spiRead+0x84>)
 8002610:	f003 fd8e 	bl	8006130 <HAL_SPI_Receive>
 8002614:	4603      	mov	r3, r0
 8002616:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set CS high after transaction
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800261e:	4807      	ldr	r0, [pc, #28]	@ (800263c <spiRead+0x80>)
 8002620:	f002 fb4e 	bl	8004cc0 <HAL_GPIO_WritePin>

    if (status != HAL_OK)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <spiRead+0x78>
    {
        DEBUG_PRINT("SPI Read Error during data reception!\n");
 800262a:	4807      	ldr	r0, [pc, #28]	@ (8002648 <spiRead+0x8c>)
 800262c:	f009 fd68 	bl	800c100 <puts>
        Error_Handler();
 8002630:	f7ff f954 	bl	80018dc <Error_Handler>
    }
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	48000400 	.word	0x48000400
 8002640:	20000328 	.word	0x20000328
 8002644:	0800fc54 	.word	0x0800fc54
 8002648:	0800fc80 	.word	0x0800fc80

0800264c <ADXL343_writeRegister>:
 * @param reg The register address to write to.
 * @param values Pointer to the data to write.
 * @param length Number of bytes to write.
 */
void ADXL343_writeRegister(uint8_t reg, uint8_t *values, uint16_t length)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	4613      	mov	r3, r2
 800265a:	80bb      	strh	r3, [r7, #4]
    uint8_t writeAddress = reg & ~(0x80); // Write mode
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002662:	73fb      	strb	r3, [r7, #15]
    spiWrite(writeAddress, values, length);
 8002664:	88ba      	ldrh	r2, [r7, #4]
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff58 	bl	8002520 <spiWrite>
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <ADXL343_readRegister>:
 * @param reg The register address to read from.
 * @param data Pointer to the buffer to store the read data.
 * @param num Number of bytes to read.
 */
void ADXL343_readRegister(uint8_t reg, uint8_t *data, uint16_t num)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
 8002684:	4613      	mov	r3, r2
 8002686:	80bb      	strh	r3, [r7, #4]
    if (num > 1)
 8002688:	88bb      	ldrh	r3, [r7, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d903      	bls.n	8002696 <ADXL343_readRegister+0x1e>
        reg |= 0x40; // Enable multiple-byte read
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002694:	71fb      	strb	r3, [r7, #7]
    reg |= 0x80;    // Set read mode
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800269c:	71fb      	strb	r3, [r7, #7]

    spiRead(reg, data, num);
 800269e:	88ba      	ldrh	r2, [r7, #4]
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	6839      	ldr	r1, [r7, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff89 	bl	80025bc <spiRead>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <ADXL343_Init>:
 * @param hadxl Pointer to the ADXL343 handle structure.
 * @note
 * - Verifies device ID and configures for single-tap detection.
 */
void ADXL343_Init(h_ADXL343_t *hadxl)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("Setting CSn\n");
 80026bc:	481f      	ldr	r0, [pc, #124]	@ (800273c <ADXL343_Init+0x88>)
 80026be:	f009 fd1f 	bl	800c100 <puts>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set CS high
 80026c2:	2201      	movs	r2, #1
 80026c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026c8:	481d      	ldr	r0, [pc, #116]	@ (8002740 <ADXL343_Init+0x8c>)
 80026ca:	f002 faf9 	bl	8004cc0 <HAL_GPIO_WritePin>

    uint8_t deviceID;
    ADXL343_readRegister(ADXL343_DEVID, &deviceID, 1);
 80026ce:	f107 030f 	add.w	r3, r7, #15
 80026d2:	2201      	movs	r2, #1
 80026d4:	4619      	mov	r1, r3
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7ff ffce 	bl	8002678 <ADXL343_readRegister>

    if (deviceID == 0xE5)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2be5      	cmp	r3, #229	@ 0xe5
 80026e0:	d105      	bne.n	80026ee <ADXL343_Init+0x3a>
    {
        DEBUG_PRINT("ADXL343 detected successfully! Device ID: 0x%02X\n", deviceID);
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	4619      	mov	r1, r3
 80026e6:	4817      	ldr	r0, [pc, #92]	@ (8002744 <ADXL343_Init+0x90>)
 80026e8:	f009 fca2 	bl	800c030 <iprintf>
 80026ec:	e004      	b.n	80026f8 <ADXL343_Init+0x44>
    }
    else
    {
        DEBUG_PRINT("Failed to detect ADXL343. Read Device ID: 0x%02X\n", deviceID);
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	4619      	mov	r1, r3
 80026f2:	4815      	ldr	r0, [pc, #84]	@ (8002748 <ADXL343_Init+0x94>)
 80026f4:	f009 fc9c 	bl	800c030 <iprintf>
    }

    uint8_t val = 0x00;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73bb      	strb	r3, [r7, #14]
    ADXL343_writeRegister(ADXL343_POWER_CTL, &val, 1); // Standby mode
 80026fc:	f107 030e 	add.w	r3, r7, #14
 8002700:	2201      	movs	r2, #1
 8002702:	4619      	mov	r1, r3
 8002704:	202d      	movs	r0, #45	@ 0x2d
 8002706:	f7ff ffa1 	bl	800264c <ADXL343_writeRegister>

    val = 0x08;
 800270a:	2308      	movs	r3, #8
 800270c:	73bb      	strb	r3, [r7, #14]
    ADXL343_writeRegister(ADXL343_POWER_CTL, &val, 1); // Measure mode
 800270e:	f107 030e 	add.w	r3, r7, #14
 8002712:	2201      	movs	r2, #1
 8002714:	4619      	mov	r1, r3
 8002716:	202d      	movs	r0, #45	@ 0x2d
 8002718:	f7ff ff98 	bl	800264c <ADXL343_writeRegister>

    val = 0x01;
 800271c:	2301      	movs	r3, #1
 800271e:	73bb      	strb	r3, [r7, #14]
    ADXL343_writeRegister(ADXL343_DATA_FORMAT, &val, 1); // ±4g range
 8002720:	f107 030e 	add.w	r3, r7, #14
 8002724:	2201      	movs	r2, #1
 8002726:	4619      	mov	r1, r3
 8002728:	2031      	movs	r0, #49	@ 0x31
 800272a:	f7ff ff8f 	bl	800264c <ADXL343_writeRegister>

    ADXL343_ConfigureTap(hadxl);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f80c 	bl	800274c <ADXL343_ConfigureTap>
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	0800fca8 	.word	0x0800fca8
 8002740:	48000400 	.word	0x48000400
 8002744:	0800fcb4 	.word	0x0800fcb4
 8002748:	0800fce8 	.word	0x0800fce8

0800274c <ADXL343_ConfigureTap>:
 * @param hadxl Pointer to the ADXL343 handle structure.
 * @note
 * - Configures tap threshold, duration, and interrupt mapping.
 */
void ADXL343_ConfigureTap(h_ADXL343_t *hadxl)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	@ 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
    uint8_t val;

    // Set tap threshold
    val = 50; // 50 * 0.0625g per LSB
 8002754:	2332      	movs	r3, #50	@ 0x32
 8002756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    ADXL343_writeRegister(ADXL343_THRESH_TAP, &val, 1);
 800275a:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800275e:	2201      	movs	r2, #1
 8002760:	4619      	mov	r1, r3
 8002762:	201d      	movs	r0, #29
 8002764:	f7ff ff72 	bl	800264c <ADXL343_writeRegister>

    // Set tap duration
    val = 30; // 30 ms
 8002768:	231e      	movs	r3, #30
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    ADXL343_writeRegister(ADXL343_DUR, &val, 1);
 800276e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8002772:	2201      	movs	r2, #1
 8002774:	4619      	mov	r1, r3
 8002776:	2021      	movs	r0, #33	@ 0x21
 8002778:	f7ff ff68 	bl	800264c <ADXL343_writeRegister>

    // Enable tap detection on all axes
    val = 0x07; // X, Y, Z enabled
 800277c:	2307      	movs	r3, #7
 800277e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    ADXL343_writeRegister(ADXL343_TAP_AXES, &val, 1);
 8002782:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8002786:	2201      	movs	r2, #1
 8002788:	4619      	mov	r1, r3
 800278a:	202a      	movs	r0, #42	@ 0x2a
 800278c:	f7ff ff5e 	bl	800264c <ADXL343_writeRegister>

    // Enable single-tap interrupt
    val = 0x40; // SINGLE_TAP bit
 8002790:	2340      	movs	r3, #64	@ 0x40
 8002792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    ADXL343_writeRegister(ADXL343_INT_ENABLE, &val, 1);
 8002796:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800279a:	2201      	movs	r2, #1
 800279c:	4619      	mov	r1, r3
 800279e:	202e      	movs	r0, #46	@ 0x2e
 80027a0:	f7ff ff54 	bl	800264c <ADXL343_writeRegister>

    // Map single-tap interrupt to INT1
    val = 0x00; // Map to INT1
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    ADXL343_writeRegister(ADXL343_INT_MAP, &val, 1);
 80027aa:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 80027ae:	2201      	movs	r2, #1
 80027b0:	4619      	mov	r1, r3
 80027b2:	202f      	movs	r0, #47	@ 0x2f
 80027b4:	f7ff ff4a 	bl	800264c <ADXL343_writeRegister>

    // Configure GPIO for INT1
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	4b14      	ldr	r3, [pc, #80]	@ (800281c <ADXL343_ConfigureTap+0xd0>)
 80027ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027cc:	4a13      	ldr	r2, [pc, #76]	@ (800281c <ADXL343_ConfigureTap+0xd0>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027d4:	4b11      	ldr	r3, [pc, #68]	@ (800281c <ADXL343_ConfigureTap+0xd0>)
 80027d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AG_INT1_Pin;
 80027e0:	2308      	movs	r3, #8
 80027e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	f107 0310 	add.w	r3, r7, #16
 80027f2:	4619      	mov	r1, r3
 80027f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027f8:	f002 f8e0 	bl	80049bc <HAL_GPIO_Init>

    // Enable EXTI interrupt
    HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2105      	movs	r1, #5
 8002800:	2009      	movs	r0, #9
 8002802:	f001 fff3 	bl	80047ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002806:	2009      	movs	r0, #9
 8002808:	f002 f80a 	bl	8004820 <HAL_NVIC_EnableIRQ>

    DEBUG_PRINT("ADXL343 configured for single-tap detection.\n");
 800280c:	4804      	ldr	r0, [pc, #16]	@ (8002820 <ADXL343_ConfigureTap+0xd4>)
 800280e:	f009 fc77 	bl	800c100 <puts>
}
 8002812:	bf00      	nop
 8002814:	3728      	adds	r7, #40	@ 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	0800fd1c 	.word	0x0800fd1c

08002824 <GP2Y0A41SK0F_Init>:

/**
 * @brief Initialize the GP2Y0A41SK0F sensors.
 * @param htof Pointer to the GP2Y0A41SK0F handle structure.
 */
void GP2Y0A41SK0F_Init(h_GP2Y0A41SK0F_t *htof) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    // Assign ADC handles
    htof->hadc1 = &hadc1; // For ToF1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a0e      	ldr	r2, [pc, #56]	@ (8002868 <GP2Y0A41SK0F_Init+0x44>)
 8002830:	601a      	str	r2, [r3, #0]
    htof->hadc2 = &hadc2; // For ToF2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a0d      	ldr	r2, [pc, #52]	@ (800286c <GP2Y0A41SK0F_Init+0x48>)
 8002836:	605a      	str	r2, [r3, #4]

    // Initialize ADC1
    if (HAL_ADC_Init(htof->hadc1) != HAL_OK) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fcc5 	bl	80031cc <HAL_ADC_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <GP2Y0A41SK0F_Init+0x28>
        Error_Handler();
 8002848:	f7ff f848 	bl	80018dc <Error_Handler>
    }

    // Initialize ADC2
    if (HAL_ADC_Init(htof->hadc2) != HAL_OK) {
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fcbb 	bl	80031cc <HAL_ADC_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <GP2Y0A41SK0F_Init+0x3c>
        Error_Handler();
 800285c:	f7ff f83e 	bl	80018dc <Error_Handler>
    }
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200001f4 	.word	0x200001f4
 800286c:	20000260 	.word	0x20000260

08002870 <GP2Y0A41SK0F_Start_Interrupt>:

/**
 * @brief Start ADC conversion using interrupts.
 * @param htof Pointer to the GP2Y0A41SK0F handle structure.
 */
void GP2Y0A41SK0F_Start_Interrupt(h_GP2Y0A41SK0F_t *htof) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Start ADC1 in interrupt mode
    status = HAL_ADC_Start_IT(htof->hadc1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fe29 	bl	80034d4 <HAL_ADC_Start_IT>
 8002882:	4603      	mov	r3, r0
 8002884:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <GP2Y0A41SK0F_Start_Interrupt+0x2a>
        printf("ADC1 Interrupt Start Error: %d\n", status);
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	4619      	mov	r1, r3
 8002890:	480c      	ldr	r0, [pc, #48]	@ (80028c4 <GP2Y0A41SK0F_Start_Interrupt+0x54>)
 8002892:	f009 fbcd 	bl	800c030 <iprintf>
        Error_Handler();
 8002896:	f7ff f821 	bl	80018dc <Error_Handler>
    }

    // Start ADC2 in interrupt mode
    status = HAL_ADC_Start_IT(htof->hadc2);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fe18 	bl	80034d4 <HAL_ADC_Start_IT>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <GP2Y0A41SK0F_Start_Interrupt+0x4c>
        printf("ADC2 Interrupt Start Error: %d\n", status);
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	4619      	mov	r1, r3
 80028b2:	4805      	ldr	r0, [pc, #20]	@ (80028c8 <GP2Y0A41SK0F_Start_Interrupt+0x58>)
 80028b4:	f009 fbbc 	bl	800c030 <iprintf>
        Error_Handler();
 80028b8:	f7ff f810 	bl	80018dc <Error_Handler>
    }
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	0800fd68 	.word	0x0800fd68
 80028c8:	0800fd88 	.word	0x0800fd88
 80028cc:	00000000 	.word	0x00000000

080028d0 <GP2Y0A41SK0F_get_distance1>:
}

/**
 * @brief Compute distances for ToF1 based on ADC readings.
 */
void GP2Y0A41SK0F_get_distance1(h_GP2Y0A41SK0F_t *htof) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
    const float a = 120;
 80028d8:	4b23      	ldr	r3, [pc, #140]	@ (8002968 <GP2Y0A41SK0F_get_distance1+0x98>)
 80028da:	617b      	str	r3, [r7, #20]
    const float b = 0.03;
 80028dc:	4b23      	ldr	r3, [pc, #140]	@ (800296c <GP2Y0A41SK0F_get_distance1+0x9c>)
 80028de:	613b      	str	r3, [r7, #16]

    float Vo1 = (GP2Y0A41SK0F_ADC_VCC * htof->adc_val_tof1) / GP2Y0A41SK0F_ADC_MAX_VALUE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fe35 	bl	8000554 <__aeabi_ui2d>
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <GP2Y0A41SK0F_get_distance1+0xa0>)
 80028f0:	f7fd feaa 	bl	8000648 <__aeabi_dmul>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	a318      	add	r3, pc, #96	@ (adr r3, 8002960 <GP2Y0A41SK0F_get_distance1+0x90>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fd ffcb 	bl	800089c <__aeabi_ddiv>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	f7fe f993 	bl	8000c38 <__aeabi_d2f>
 8002912:	4603      	mov	r3, r0
 8002914:	60fb      	str	r3, [r7, #12]
    if (Vo1 > b) {
 8002916:	ed97 7a03 	vldr	s14, [r7, #12]
 800291a:	edd7 7a04 	vldr	s15, [r7, #16]
 800291e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002926:	dd10      	ble.n	800294a <GP2Y0A41SK0F_get_distance1+0x7a>
        htof->distance_tof1 = (int)(a / (Vo1 - b));
 8002928:	ed97 7a03 	vldr	s14, [r7, #12]
 800292c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002934:	edd7 6a05 	vldr	s13, [r7, #20]
 8002938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800293c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002940:	ee17 2a90 	vmov	r2, s15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]
    } else {
        htof->distance_tof1 = -1; // Invalid distance
    }
}
 8002948:	e003      	b.n	8002952 <GP2Y0A41SK0F_get_distance1+0x82>
        htof->distance_tof1 = -1; // Invalid distance
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002950:	611a      	str	r2, [r3, #16]
}
 8002952:	bf00      	nop
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	f3af 8000 	nop.w
 8002960:	00000000 	.word	0x00000000
 8002964:	40affe00 	.word	0x40affe00
 8002968:	42f00000 	.word	0x42f00000
 800296c:	3cf5c28f 	.word	0x3cf5c28f
 8002970:	40140000 	.word	0x40140000
 8002974:	00000000 	.word	0x00000000

08002978 <GP2Y0A41SK0F_get_distance2>:

/**
 * @brief Compute distances for ToF2 based on ADC readings.
 */
void GP2Y0A41SK0F_get_distance2(h_GP2Y0A41SK0F_t *htof) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    const float a = 120;
 8002980:	4b23      	ldr	r3, [pc, #140]	@ (8002a10 <GP2Y0A41SK0F_get_distance2+0x98>)
 8002982:	617b      	str	r3, [r7, #20]
    const float b = 0.03;
 8002984:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <GP2Y0A41SK0F_get_distance2+0x9c>)
 8002986:	613b      	str	r3, [r7, #16]

    float Vo2 = (GP2Y0A41SK0F_ADC_VCC * htof->adc_val_tof2) / GP2Y0A41SK0F_ADC_MAX_VALUE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fde1 	bl	8000554 <__aeabi_ui2d>
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4b20      	ldr	r3, [pc, #128]	@ (8002a18 <GP2Y0A41SK0F_get_distance2+0xa0>)
 8002998:	f7fd fe56 	bl	8000648 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	a318      	add	r3, pc, #96	@ (adr r3, 8002a08 <GP2Y0A41SK0F_get_distance2+0x90>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd ff77 	bl	800089c <__aeabi_ddiv>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fe f93f 	bl	8000c38 <__aeabi_d2f>
 80029ba:	4603      	mov	r3, r0
 80029bc:	60fb      	str	r3, [r7, #12]
    if (Vo2 > b) {
 80029be:	ed97 7a03 	vldr	s14, [r7, #12]
 80029c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80029c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	dd10      	ble.n	80029f2 <GP2Y0A41SK0F_get_distance2+0x7a>
        htof->distance_tof2 = (int)(a / (Vo2 - b));
 80029d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80029d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80029d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029dc:	edd7 6a05 	vldr	s13, [r7, #20]
 80029e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e8:	ee17 2a90 	vmov	r2, s15
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	615a      	str	r2, [r3, #20]
    } else {
        htof->distance_tof2 = -1; // Invalid distance
    }
}
 80029f0:	e003      	b.n	80029fa <GP2Y0A41SK0F_get_distance2+0x82>
        htof->distance_tof2 = -1; // Invalid distance
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029f8:	615a      	str	r2, [r3, #20]
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	f3af 8000 	nop.w
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	40affe00 	.word	0x40affe00
 8002a10:	42f00000 	.word	0x42f00000
 8002a14:	3cf5c28f 	.word	0x3cf5c28f
 8002a18:	40140000 	.word	0x40140000

08002a1c <Motor_Init>:
/**
 * @brief Initialize the motors.
 * @param hMotors Pointer to the motor handle structure.
 * @param htim Pointer to the timer handle used for PWM control.
 */
void Motor_Init(h_Motor_t * hMotors, TIM_HandleTypeDef * htim) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
	// Allows to get direct parameters from the timer used
	hMotors->htim = htim;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	61da      	str	r2, [r3, #28]
	hMotors->speed_increase_rate1 = 10;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	220a      	movs	r2, #10
 8002a30:	615a      	str	r2, [r3, #20]
	hMotors->speed_increase_rate2 = 10;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	220a      	movs	r2, #10
 8002a36:	619a      	str	r2, [r3, #24]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002a38:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab8 <Motor_Init+0x9c>)
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab8 <Motor_Init+0x9c>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a44:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <Motor_Init+0x9c>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <Motor_Init+0x9c>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a54:	4a18      	ldr	r2, [pc, #96]	@ (8002ab8 <Motor_Init+0x9c>)
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a5c:	4b16      	ldr	r3, [pc, #88]	@ (8002ab8 <Motor_Init+0x9c>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]

	MX_TIM1_Init();
 8002a68:	f7ff f97c 	bl	8001d64 <MX_TIM1_Init>
	//MX_TIM2_Init();

	HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 faaa 	bl	8006fcc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_2);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 faa4 	bl	8006fcc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f005 fcb4 	bl	80083f8 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_2);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2104      	movs	r1, #4
 8002a96:	4618      	mov	r0, r3
 8002a98:	f005 fcae 	bl	80083f8 <HAL_TIMEx_PWMN_Start>

	hMotors->mode_mot1 = STANDBY_MODE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
	hMotors->mode_mot2 = STANDBY_MODE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	705a      	strb	r2, [r3, #1]
	Motor_SetMode(hMotors);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f807 	bl	8002abc <Motor_SetMode>
}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000

08002abc <Motor_SetMode>:
/**
 * @brief Set the operating mode of the motors.
 * @param hMotors Pointer to the motor handle structure.
 */
void Motor_SetMode(h_Motor_t * hMotors)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	switch (hMotors->mode_mot1) {
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d002      	beq.n	8002ad2 <Motor_SetMode+0x16>
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d00d      	beq.n	8002aec <Motor_SetMode+0x30>
 8002ad0:	e019      	b.n	8002b06 <Motor_SetMode+0x4a>
	case FORWARD_MODE:
		DEBUG_PRINT("Mot1: FORWARD_MODE\r\n");
		HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f004 fa77 	bl	8006fcc <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_1);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f005 fd3b 	bl	8008560 <HAL_TIMEx_PWMN_Stop>
		break;
 8002aea:	e01e      	b.n	8002b2a <Motor_SetMode+0x6e>

	case REVERSE_MODE:
		DEBUG_PRINT("Mot1: REVERSE_MODE\r\n");
		HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f005 fc80 	bl	80083f8 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fb64 	bl	80071cc <HAL_TIM_PWM_Stop>
		break;
 8002b04:	e011      	b.n	8002b2a <Motor_SetMode+0x6e>

	case STANDBY_MODE:
	default:
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_1);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f005 fd27 	bl	8008560 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_1);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f004 fb57 	bl	80071cc <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_1, 0);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2200      	movs	r2, #0
 8002b26:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8002b28:	bf00      	nop
	}

	switch (hMotors->mode_mot2) {
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	785b      	ldrb	r3, [r3, #1]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d002      	beq.n	8002b38 <Motor_SetMode+0x7c>
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d00d      	beq.n	8002b52 <Motor_SetMode+0x96>
 8002b36:	e019      	b.n	8002b6c <Motor_SetMode+0xb0>
	case FORWARD_MODE:
		DEBUG_PRINT("Mot2: FORWARD_MODE\r\n");
		HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_2);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 fa44 	bl	8006fcc <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2104      	movs	r1, #4
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f005 fd08 	bl	8008560 <HAL_TIMEx_PWMN_Stop>
		break;
 8002b50:	e01e      	b.n	8002b90 <Motor_SetMode+0xd4>

	case REVERSE_MODE:
		DEBUG_PRINT("Mot2: REVERSE_MODE\r\n");
		HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_2);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	2104      	movs	r1, #4
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f005 fc4d 	bl	80083f8 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	2104      	movs	r1, #4
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 fb31 	bl	80071cc <HAL_TIM_PWM_Stop>
		break;
 8002b6a:	e011      	b.n	8002b90 <Motor_SetMode+0xd4>

	case STANDBY_MODE:
	default:
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2104      	movs	r1, #4
 8002b72:	4618      	mov	r0, r3
 8002b74:	f005 fcf4 	bl	8008560 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f004 fb24 	bl	80071cc <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_2, 0);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8002b8e:	bf00      	nop
	}
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <Motor_SetSpeed_percent>:
 * @brief Set the speed of the motors as a percentage of maximum speed.
 * @param hMotor Pointer to the motor handle structure.
 * @param percent1 Speed percentage for motor 1 (0.0 to 100.0).
 * @param percent2 Speed percentage for motor 2 (0.0 to 100.0).
 */
void Motor_SetSpeed_percent(h_Motor_t * hMotor, float percent1, float percent2) {
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ba4:	edc7 0a01 	vstr	s1, [r7, #4]
	hMotor->speed1 = (int)(MOTOR1_REV_DIFF * hMotor->htim->Init.Period * percent1/100.0);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fcd0 	bl	8000554 <__aeabi_ui2d>
 8002bb4:	a323      	add	r3, pc, #140	@ (adr r3, 8002c44 <Motor_SetSpeed_percent+0xac>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f7fd fd45 	bl	8000648 <__aeabi_dmul>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4614      	mov	r4, r2
 8002bc4:	461d      	mov	r5, r3
 8002bc6:	68b8      	ldr	r0, [r7, #8]
 8002bc8:	f7fd fce6 	bl	8000598 <__aeabi_f2d>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	f7fd fd38 	bl	8000648 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <Motor_SetSpeed_percent+0xa8>)
 8002be6:	f7fd fe59 	bl	800089c <__aeabi_ddiv>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7fd ffd9 	bl	8000ba8 <__aeabi_d2iz>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
	hMotor->speed2 = (int)(hMotor->htim->Init.Period * percent2/100.0);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c12:	ee17 0a90 	vmov	r0, s15
 8002c16:	f7fd fcbf 	bl	8000598 <__aeabi_f2d>
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <Motor_SetSpeed_percent+0xa8>)
 8002c20:	f7fd fe3c 	bl	800089c <__aeabi_ddiv>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fd ffbc 	bl	8000ba8 <__aeabi_d2iz>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	609a      	str	r2, [r3, #8]
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40590000 	.word	0x40590000
 8002c44:	33333333 	.word	0x33333333
 8002c48:	3feb3333 	.word	0x3feb3333

08002c4c <Motor_UpdateSpeed>:

/**
 * @brief Update motor speeds gradually to achieve smoother transitions.
 * @param hMotor Pointer to the motor handle structure.
 */
void Motor_UpdateSpeed(h_Motor_t * hMotors) {
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	// Increase speed progressively
	if (hMotors->speed1 > hMotors->current_speed1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	dd06      	ble.n	8002c6e <Motor_UpdateSpeed+0x22>
		hMotors->current_speed1 += hMotors->speed_increase_rate1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	441a      	add	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
	if (hMotors->speed2 > hMotors->current_speed2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	dd06      	ble.n	8002c88 <Motor_UpdateSpeed+0x3c>
		hMotors->current_speed2 += hMotors->speed_increase_rate2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	611a      	str	r2, [r3, #16]

	// Decrease speed progressively
	if (hMotors->speed1 < hMotors->current_speed1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	da06      	bge.n	8002ca2 <Motor_UpdateSpeed+0x56>
		hMotors->current_speed1 -= hMotors->speed_increase_rate1;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	1ad2      	subs	r2, r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	60da      	str	r2, [r3, #12]
	if (hMotors->speed2 < hMotors->current_speed2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	da06      	bge.n	8002cbc <Motor_UpdateSpeed+0x70>
		hMotors->current_speed2 -= hMotors->speed_increase_rate2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	1ad2      	subs	r2, r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	611a      	str	r2, [r3, #16]

	__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_1, hMotors->current_speed1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_2, hMotors->current_speed2);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cea:	2003      	movs	r0, #3
 8002cec:	f001 fd73 	bl	80047d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cf0:	200f      	movs	r0, #15
 8002cf2:	f7fe feab 	bl	8001a4c <HAL_InitTick>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	71fb      	strb	r3, [r7, #7]
 8002d00:	e001      	b.n	8002d06 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d02:	f7fe fe79 	bl	80019f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d06:	79fb      	ldrb	r3, [r7, #7]

}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d14:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <HAL_IncTick+0x1c>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_IncTick+0x20>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4a03      	ldr	r2, [pc, #12]	@ (8002d2c <HAL_IncTick+0x1c>)
 8002d20:	6013      	str	r3, [r2, #0]
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	200005e8 	.word	0x200005e8
 8002d30:	20000008 	.word	0x20000008

08002d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return uwTick;
 8002d38:	4b03      	ldr	r3, [pc, #12]	@ (8002d48 <HAL_GetTick+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	200005e8 	.word	0x200005e8

08002d4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	609a      	str	r2, [r3, #8]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3360      	adds	r3, #96	@ 0x60
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <LL_ADC_SetOffset+0x44>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	03fff000 	.word	0x03fff000

08002dfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3360      	adds	r3, #96	@ 0x60
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3360      	adds	r3, #96	@ 0x60
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3360      	adds	r3, #96	@ 0x60
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3360      	adds	r3, #96	@ 0x60
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	615a      	str	r2, [r3, #20]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b087      	sub	sp, #28
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3330      	adds	r3, #48	@ 0x30
 8002f26:	461a      	mov	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	4413      	add	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	211f      	movs	r1, #31
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	401a      	ands	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	f003 011f 	and.w	r1, r3, #31
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0e5b      	lsrs	r3, r3, #25
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	4413      	add	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	0d1b      	lsrs	r3, r3, #20
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2107      	movs	r1, #7
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	401a      	ands	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	0d1b      	lsrs	r3, r3, #20
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003004:	43db      	mvns	r3, r3
 8003006:	401a      	ands	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0318 	and.w	r3, r3, #24
 800300e:	4908      	ldr	r1, [pc, #32]	@ (8003030 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003010:	40d9      	lsrs	r1, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	400b      	ands	r3, r1
 8003016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301a:	431a      	orrs	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	0007ffff 	.word	0x0007ffff

08003034 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 031f 	and.w	r3, r3, #31
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800307c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6093      	str	r3, [r2, #8]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030a4:	d101      	bne.n	80030aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80030c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030f4:	d101      	bne.n	80030fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003118:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <LL_ADC_IsEnabled+0x18>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <LL_ADC_IsEnabled+0x1a>
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003166:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800316a:	f043 0204 	orr.w	r2, r3, #4
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b04      	cmp	r3, #4
 8003190:	d101      	bne.n	8003196 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d101      	bne.n	80031bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b089      	sub	sp, #36	@ 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e167      	b.n	80034b6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fd fffb 	bl	80011f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff3f 	bl	8003090 <LL_ADC_IsDeepPowerDownEnabled>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff25 	bl	800306c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ff5a 	bl	80030e0 <LL_ADC_IsInternalRegulatorEnabled>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d115      	bne.n	800325e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff3e 	bl	80030b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800323c:	4ba0      	ldr	r3, [pc, #640]	@ (80034c0 <HAL_ADC_Init+0x2f4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	4aa0      	ldr	r2, [pc, #640]	@ (80034c4 <HAL_ADC_Init+0x2f8>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	3301      	adds	r3, #1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003250:	e002      	b.n	8003258 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3b01      	subs	r3, #1
 8003256:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f9      	bne.n	8003252 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff3c 	bl	80030e0 <LL_ADC_IsInternalRegulatorEnabled>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	f043 0210 	orr.w	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327e:	f043 0201 	orr.w	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ff75 	bl	800317e <LL_ADC_REG_IsConversionOngoing>
 8003294:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 8100 	bne.w	80034a4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 80fc 	bne.w	80034a4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80032b4:	f043 0202 	orr.w	r2, r3, #2
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff35 	bl	8003130 <LL_ADC_IsEnabled>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d111      	bne.n	80032f0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032d0:	f7ff ff2e 	bl	8003130 <LL_ADC_IsEnabled>
 80032d4:	4604      	mov	r4, r0
 80032d6:	487c      	ldr	r0, [pc, #496]	@ (80034c8 <HAL_ADC_Init+0x2fc>)
 80032d8:	f7ff ff2a 	bl	8003130 <LL_ADC_IsEnabled>
 80032dc:	4603      	mov	r3, r0
 80032de:	4323      	orrs	r3, r4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4619      	mov	r1, r3
 80032ea:	4878      	ldr	r0, [pc, #480]	@ (80034cc <HAL_ADC_Init+0x300>)
 80032ec:	f7ff fd2e 	bl	8002d4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7f5b      	ldrb	r3, [r3, #29]
 80032f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003300:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003306:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800330e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800331a:	2b01      	cmp	r3, #1
 800331c:	d106      	bne.n	800332c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003322:	3b01      	subs	r3, #1
 8003324:	045b      	lsls	r3, r3, #17
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d009      	beq.n	8003348 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003338:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	4b60      	ldr	r3, [pc, #384]	@ (80034d0 <HAL_ADC_Init+0x304>)
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	430b      	orrs	r3, r1
 800335a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff14 	bl	80031a4 <LL_ADC_INJ_IsConversionOngoing>
 800337c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d16d      	bne.n	8003460 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d16a      	bne.n	8003460 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800338e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003396:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033a6:	f023 0302 	bic.w	r3, r3, #2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d017      	beq.n	80033ec <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80033ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6911      	ldr	r1, [r2, #16]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	430b      	orrs	r3, r1
 80033e6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80033ea:	e013      	b.n	8003414 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80033fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800340c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003410:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800341a:	2b01      	cmp	r3, #1
 800341c:	d118      	bne.n	8003450 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003434:	4311      	orrs	r1, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003440:	430a      	orrs	r2, r1
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	611a      	str	r2, [r3, #16]
 800344e:	e007      	b.n	8003460 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d10c      	bne.n	8003482 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	f023 010f 	bic.w	r1, r3, #15
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	1e5a      	subs	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003480:	e007      	b.n	8003492 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 020f 	bic.w	r2, r2, #15
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034a2:	e007      	b.n	80034b4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	f043 0210 	orr.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	@ 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd90      	pop	{r4, r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000000 	.word	0x20000000
 80034c4:	053e2d63 	.word	0x053e2d63
 80034c8:	50000100 	.word	0x50000100
 80034cc:	50000300 	.word	0x50000300
 80034d0:	fff04007 	.word	0xfff04007

080034d4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034dc:	4893      	ldr	r0, [pc, #588]	@ (800372c <HAL_ADC_Start_IT+0x258>)
 80034de:	f7ff fda9 	bl	8003034 <LL_ADC_GetMultimode>
 80034e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fe48 	bl	800317e <LL_ADC_REG_IsConversionOngoing>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f040 8113 	bne.w	800371c <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_Start_IT+0x30>
 8003500:	2302      	movs	r3, #2
 8003502:	e10e      	b.n	8003722 <HAL_ADC_Start_IT+0x24e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 ff33 	bl	8004378 <ADC_Enable>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003516:	7dfb      	ldrb	r3, [r7, #23]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f040 80fa 	bne.w	8003712 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7e      	ldr	r2, [pc, #504]	@ (8003730 <HAL_ADC_Start_IT+0x25c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d002      	beq.n	8003542 <HAL_ADC_Start_IT+0x6e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	e001      	b.n	8003546 <HAL_ADC_Start_IT+0x72>
 8003542:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	4293      	cmp	r3, r2
 800354c:	d002      	beq.n	8003554 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003558:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003570:	f023 0206 	bic.w	r2, r3, #6
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	661a      	str	r2, [r3, #96]	@ 0x60
 8003578:	e002      	b.n	8003580 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	221c      	movs	r2, #28
 8003586:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 021c 	bic.w	r2, r2, #28
 800359e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d108      	bne.n	80035ba <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0208 	orr.w	r2, r2, #8
 80035b6:	605a      	str	r2, [r3, #4]
          break;
 80035b8:	e008      	b.n	80035cc <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0204 	orr.w	r2, r2, #4
 80035c8:	605a      	str	r2, [r3, #4]
          break;
 80035ca:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d107      	bne.n	80035e4 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0210 	orr.w	r2, r2, #16
 80035e2:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a51      	ldr	r2, [pc, #324]	@ (8003730 <HAL_ADC_Start_IT+0x25c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d002      	beq.n	80035f4 <HAL_ADC_Start_IT+0x120>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	e001      	b.n	80035f8 <HAL_ADC_Start_IT+0x124>
 80035f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d008      	beq.n	8003612 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d002      	beq.n	8003612 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b09      	cmp	r3, #9
 8003610:	d13a      	bne.n	8003688 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02d      	beq.n	800367c <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003624:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003628:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d110      	bne.n	800365a <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0220 	bic.w	r2, r2, #32
 8003646:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003656:	605a      	str	r2, [r3, #4]
              break;
 8003658:	e010      	b.n	800367c <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003668:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0220 	orr.w	r2, r2, #32
 8003678:	605a      	str	r2, [r3, #4]
              break;
 800367a:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fd68 	bl	8003156 <LL_ADC_REG_StartConversion>
 8003686:	e04b      	b.n	8003720 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a25      	ldr	r2, [pc, #148]	@ (8003730 <HAL_ADC_Start_IT+0x25c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d002      	beq.n	80036a4 <HAL_ADC_Start_IT+0x1d0>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	e001      	b.n	80036a8 <HAL_ADC_Start_IT+0x1d4>
 80036a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036a8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d034      	beq.n	8003720 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d110      	bne.n	80036f0 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0220 	bic.w	r2, r2, #32
 80036dc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036ec:	605a      	str	r2, [r3, #4]
              break;
 80036ee:	e017      	b.n	8003720 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036fe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0220 	orr.w	r2, r2, #32
 800370e:	605a      	str	r2, [r3, #4]
              break;
 8003710:	e006      	b.n	8003720 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800371a:	e001      	b.n	8003720 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003720:	7dfb      	ldrb	r3, [r7, #23]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	50000300 	.word	0x50000300
 8003730:	50000100 	.word	0x50000100

08003734 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	@ 0x28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003758:	2300      	movs	r3, #0
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800376c:	4883      	ldr	r0, [pc, #524]	@ (800397c <HAL_ADC_IRQHandler+0x22c>)
 800376e:	f7ff fc61 	bl	8003034 <LL_ADC_GetMultimode>
 8003772:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d017      	beq.n	80037ae <HAL_ADC_IRQHandler+0x5e>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d012      	beq.n	80037ae <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003798:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 febd 	bl	8004520 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2202      	movs	r2, #2
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <HAL_ADC_IRQHandler+0x72>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8085 	beq.w	80038d8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d07f      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fb7b 	bl	8002ef0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d064      	beq.n	80038ca <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5e      	ldr	r2, [pc, #376]	@ (8003980 <HAL_ADC_IRQHandler+0x230>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d002      	beq.n	8003810 <HAL_ADC_IRQHandler+0xc0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	e001      	b.n	8003814 <HAL_ADC_IRQHandler+0xc4>
 8003810:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	4293      	cmp	r3, r2
 800381a:	d008      	beq.n	800382e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b05      	cmp	r3, #5
 8003826:	d002      	beq.n	800382e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b09      	cmp	r3, #9
 800382c:	d104      	bne.n	8003838 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	623b      	str	r3, [r7, #32]
 8003836:	e00d      	b.n	8003854 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a50      	ldr	r2, [pc, #320]	@ (8003980 <HAL_ADC_IRQHandler+0x230>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d002      	beq.n	8003848 <HAL_ADC_IRQHandler+0xf8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	e001      	b.n	800384c <HAL_ADC_IRQHandler+0xfc>
 8003848:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800384c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d135      	bne.n	80038ca <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b08      	cmp	r3, #8
 800386a:	d12e      	bne.n	80038ca <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fc84 	bl	800317e <LL_ADC_REG_IsConversionOngoing>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d11a      	bne.n	80038b2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020c 	bic.w	r2, r2, #12
 800388a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d112      	bne.n	80038ca <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f043 0201 	orr.w	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038b0:	e00b      	b.n	80038ca <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fe68 	bl	80015a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	220c      	movs	r2, #12
 80038d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <HAL_ADC_IRQHandler+0x19c>
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 809e 	beq.w	8003a34 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8098 	beq.w	8003a34 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003914:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fb24 	bl	8002f6e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003926:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fadf 	bl	8002ef0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003932:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a11      	ldr	r2, [pc, #68]	@ (8003980 <HAL_ADC_IRQHandler+0x230>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d002      	beq.n	8003944 <HAL_ADC_IRQHandler+0x1f4>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	e001      	b.n	8003948 <HAL_ADC_IRQHandler+0x1f8>
 8003944:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	4293      	cmp	r3, r2
 800394e:	d008      	beq.n	8003962 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b06      	cmp	r3, #6
 800395a:	d002      	beq.n	8003962 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b07      	cmp	r3, #7
 8003960:	d104      	bne.n	800396c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	623b      	str	r3, [r7, #32]
 800396a:	e011      	b.n	8003990 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a03      	ldr	r2, [pc, #12]	@ (8003980 <HAL_ADC_IRQHandler+0x230>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d006      	beq.n	8003984 <HAL_ADC_IRQHandler+0x234>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	e005      	b.n	8003988 <HAL_ADC_IRQHandler+0x238>
 800397c:	50000300 	.word	0x50000300
 8003980:	50000100 	.word	0x50000100
 8003984:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003988:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d047      	beq.n	8003a26 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <HAL_ADC_IRQHandler+0x260>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d03f      	beq.n	8003a26 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d13a      	bne.n	8003a26 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ba:	2b40      	cmp	r3, #64	@ 0x40
 80039bc:	d133      	bne.n	8003a26 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d12e      	bne.n	8003a26 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fbe9 	bl	80031a4 <LL_ADC_INJ_IsConversionOngoing>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d11a      	bne.n	8003a0e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039e6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d112      	bne.n	8003a26 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a04:	f043 0201 	orr.w	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a0c:	e00b      	b.n	8003a26 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	f043 0210 	orr.w	r2, r3, #16
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1e:	f043 0201 	orr.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fd52 	bl	80044d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2260      	movs	r2, #96	@ 0x60
 8003a32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d011      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x312>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00c      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f895 	bl	8003b84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2280      	movs	r2, #128	@ 0x80
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <HAL_ADC_IRQHandler+0x342>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00d      	beq.n	8003a92 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fd38 	bl	80044f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a90:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d012      	beq.n	8003ac2 <HAL_ADC_IRQHandler+0x372>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aaa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fd2a 	bl	800450c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d036      	beq.n	8003b3a <HAL_ADC_IRQHandler+0x3ea>
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d031      	beq.n	8003b3a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae2:	e014      	b.n	8003b0e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003aea:	4825      	ldr	r0, [pc, #148]	@ (8003b80 <HAL_ADC_IRQHandler+0x430>)
 8003aec:	f7ff fab0 	bl	8003050 <LL_ADC_GetMultiDMATransfer>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003af6:	2301      	movs	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afa:	e008      	b.n	8003b0e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d10e      	bne.n	8003b32 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b18:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b24:	f043 0202 	orr.w	r2, r3, #2
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7fd fd61 	bl	80015f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2210      	movs	r2, #16
 8003b38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d018      	beq.n	8003b76 <HAL_ADC_IRQHandler+0x426>
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d013      	beq.n	8003b76 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5e:	f043 0208 	orr.w	r2, r3, #8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fcb7 	bl	80044e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003b76:	bf00      	nop
 8003b78:	3728      	adds	r7, #40	@ 0x28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	50000300 	.word	0x50000300

08003b84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b0b6      	sub	sp, #216	@ 0xd8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x22>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e3c8      	b.n	800434c <HAL_ADC_ConfigChannel+0x7b4>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fad9 	bl	800317e <LL_ADC_REG_IsConversionOngoing>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 83ad 	bne.w	800432e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	f7ff f998 	bl	8002f16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff fac7 	bl	800317e <LL_ADC_REG_IsConversionOngoing>
 8003bf0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fad3 	bl	80031a4 <LL_ADC_INJ_IsConversionOngoing>
 8003bfe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 81d9 	bne.w	8003fbe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 81d4 	bne.w	8003fbe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c1e:	d10f      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f7ff f9b2 	bl	8002f94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff f946 	bl	8002eca <LL_ADC_SetSamplingTimeCommonConfig>
 8003c3e:	e00e      	b.n	8003c5e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f7ff f9a1 	bl	8002f94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2100      	movs	r1, #0
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff f936 	bl	8002eca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	08db      	lsrs	r3, r3, #3
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d022      	beq.n	8003cc6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	6919      	ldr	r1, [r3, #16]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c90:	f7ff f890 	bl	8002db4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6919      	ldr	r1, [r3, #16]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f7ff f8dc 	bl	8002e5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d102      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x124>
 8003cb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cba:	e000      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x126>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f7ff f8e8 	bl	8002e94 <LL_ADC_SetOffsetSaturation>
 8003cc4:	e17b      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff f895 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x15a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f88a 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	0e9b      	lsrs	r3, r3, #26
 8003cec:	f003 021f 	and.w	r2, r3, #31
 8003cf0:	e01e      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x198>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff f87f 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e004      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003d24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x1b0>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	0e9b      	lsrs	r3, r3, #26
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	e018      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x1e2>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d54:	fa93 f3a3 	rbit	r3, r3
 8003d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003d64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	e004      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003d70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d74:	fab3 f383 	clz	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d106      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff f84e 	bl	8002e28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2101      	movs	r1, #1
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff f832 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x220>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff f827 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	0e9b      	lsrs	r3, r3, #26
 8003db2:	f003 021f 	and.w	r2, r3, #31
 8003db6:	e01e      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x25e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff f81c 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003de6:	2320      	movs	r3, #32
 8003de8:	e004      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d105      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x276>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0e9b      	lsrs	r3, r3, #26
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	e018      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x2a8>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003e2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003e32:	2320      	movs	r3, #32
 8003e34:	e004      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003e36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d106      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe ffeb 	bl	8002e28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2102      	movs	r1, #2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe ffcf 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x2e6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe ffc4 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	0e9b      	lsrs	r3, r3, #26
 8003e78:	f003 021f 	and.w	r2, r3, #31
 8003e7c:	e01e      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x324>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2102      	movs	r1, #2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe ffb9 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ea0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e004      	b.n	8003eba <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003eb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003eb4:	fab3 f383 	clz	r3, r3
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x33c>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0e9b      	lsrs	r3, r3, #26
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	e016      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x36a>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003ee6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	e004      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d106      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe ff8a 	bl	8002e28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2103      	movs	r1, #3
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe ff6e 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x3a8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2103      	movs	r1, #3
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe ff63 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003f36:	4603      	mov	r3, r0
 8003f38:	0e9b      	lsrs	r3, r3, #26
 8003f3a:	f003 021f 	and.w	r2, r3, #31
 8003f3e:	e017      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x3d8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2103      	movs	r1, #3
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe ff58 	bl	8002dfc <LL_ADC_GetOffsetChannel>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003f5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003f62:	2320      	movs	r3, #32
 8003f64:	e003      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x3f0>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	0e9b      	lsrs	r3, r3, #26
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	e011      	b.n	8003fac <HAL_ADC_ConfigChannel+0x414>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003f96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f98:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	e003      	b.n	8003fac <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d106      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2103      	movs	r1, #3
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe ff35 	bl	8002e28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff f8b4 	bl	8003130 <LL_ADC_IsEnabled>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 8140 	bne.w	8004250 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f7ff f805 	bl	8002fec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	4a8f      	ldr	r2, [pc, #572]	@ (8004224 <HAL_ADC_ConfigChannel+0x68c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	f040 8131 	bne.w	8004250 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x47e>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	0e9b      	lsrs	r3, r3, #26
 8004004:	3301      	adds	r3, #1
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2b09      	cmp	r3, #9
 800400c:	bf94      	ite	ls
 800400e:	2301      	movls	r3, #1
 8004010:	2300      	movhi	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	e019      	b.n	800404a <HAL_ADC_ConfigChannel+0x4b2>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004026:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800402e:	2320      	movs	r3, #32
 8004030:	e003      	b.n	800403a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004032:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	b2db      	uxtb	r3, r3
 800403a:	3301      	adds	r3, #1
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2b09      	cmp	r3, #9
 8004042:	bf94      	ite	ls
 8004044:	2301      	movls	r3, #1
 8004046:	2300      	movhi	r3, #0
 8004048:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800404a:	2b00      	cmp	r3, #0
 800404c:	d079      	beq.n	8004142 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <HAL_ADC_ConfigChannel+0x4d2>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	0e9b      	lsrs	r3, r3, #26
 8004060:	3301      	adds	r3, #1
 8004062:	069b      	lsls	r3, r3, #26
 8004064:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004068:	e015      	b.n	8004096 <HAL_ADC_ConfigChannel+0x4fe>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800407a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800407c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004082:	2320      	movs	r3, #32
 8004084:	e003      	b.n	800408e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004088:	fab3 f383 	clz	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	3301      	adds	r3, #1
 8004090:	069b      	lsls	r3, r3, #26
 8004092:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x51e>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	0e9b      	lsrs	r3, r3, #26
 80040a8:	3301      	adds	r3, #1
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	2101      	movs	r1, #1
 80040b0:	fa01 f303 	lsl.w	r3, r1, r3
 80040b4:	e017      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x54e>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80040c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80040c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80040ce:	2320      	movs	r3, #32
 80040d0:	e003      	b.n	80040da <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80040d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	3301      	adds	r3, #1
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2101      	movs	r1, #1
 80040e2:	fa01 f303 	lsl.w	r3, r1, r3
 80040e6:	ea42 0103 	orr.w	r1, r2, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_ADC_ConfigChannel+0x574>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	0e9b      	lsrs	r3, r3, #26
 80040fc:	3301      	adds	r3, #1
 80040fe:	f003 021f 	and.w	r2, r3, #31
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	051b      	lsls	r3, r3, #20
 800410a:	e018      	b.n	800413e <HAL_ADC_ConfigChannel+0x5a6>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800411a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800411e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004124:	2320      	movs	r3, #32
 8004126:	e003      	b.n	8004130 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3301      	adds	r3, #1
 8004132:	f003 021f 	and.w	r2, r3, #31
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800413e:	430b      	orrs	r3, r1
 8004140:	e081      	b.n	8004246 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800414a:	2b00      	cmp	r3, #0
 800414c:	d107      	bne.n	800415e <HAL_ADC_ConfigChannel+0x5c6>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	0e9b      	lsrs	r3, r3, #26
 8004154:	3301      	adds	r3, #1
 8004156:	069b      	lsls	r3, r3, #26
 8004158:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800415c:	e015      	b.n	800418a <HAL_ADC_ConfigChannel+0x5f2>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004176:	2320      	movs	r3, #32
 8004178:	e003      	b.n	8004182 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	3301      	adds	r3, #1
 8004184:	069b      	lsls	r3, r3, #26
 8004186:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x612>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	0e9b      	lsrs	r3, r3, #26
 800419c:	3301      	adds	r3, #1
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	2101      	movs	r1, #1
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	e017      	b.n	80041da <HAL_ADC_ConfigChannel+0x642>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	61fb      	str	r3, [r7, #28]
  return result;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80041c2:	2320      	movs	r3, #32
 80041c4:	e003      	b.n	80041ce <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	fab3 f383 	clz	r3, r3
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	3301      	adds	r3, #1
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	2101      	movs	r1, #1
 80041d6:	fa01 f303 	lsl.w	r3, r1, r3
 80041da:	ea42 0103 	orr.w	r1, r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10d      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x66e>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	0e9b      	lsrs	r3, r3, #26
 80041f0:	3301      	adds	r3, #1
 80041f2:	f003 021f 	and.w	r2, r3, #31
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	3b1e      	subs	r3, #30
 80041fe:	051b      	lsls	r3, r3, #20
 8004200:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004204:	e01e      	b.n	8004244 <HAL_ADC_ConfigChannel+0x6ac>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	fa93 f3a3 	rbit	r3, r3
 8004212:	613b      	str	r3, [r7, #16]
  return result;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d104      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800421e:	2320      	movs	r3, #32
 8004220:	e006      	b.n	8004230 <HAL_ADC_ConfigChannel+0x698>
 8004222:	bf00      	nop
 8004224:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	fab3 f383 	clz	r3, r3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	3301      	adds	r3, #1
 8004232:	f003 021f 	and.w	r2, r3, #31
 8004236:	4613      	mov	r3, r2
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	4413      	add	r3, r2
 800423c:	3b1e      	subs	r3, #30
 800423e:	051b      	lsls	r3, r3, #20
 8004240:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004244:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800424a:	4619      	mov	r1, r3
 800424c:	f7fe fea2 	bl	8002f94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b3f      	ldr	r3, [pc, #252]	@ (8004354 <HAL_ADC_ConfigChannel+0x7bc>)
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d071      	beq.n	8004340 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800425c:	483e      	ldr	r0, [pc, #248]	@ (8004358 <HAL_ADC_ConfigChannel+0x7c0>)
 800425e:	f7fe fd9b 	bl	8002d98 <LL_ADC_GetCommonPathInternalCh>
 8004262:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a3c      	ldr	r2, [pc, #240]	@ (800435c <HAL_ADC_ConfigChannel+0x7c4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d004      	beq.n	800427a <HAL_ADC_ConfigChannel+0x6e2>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a3a      	ldr	r2, [pc, #232]	@ (8004360 <HAL_ADC_ConfigChannel+0x7c8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d127      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800427a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800427e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d121      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800428e:	d157      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004294:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004298:	4619      	mov	r1, r3
 800429a:	482f      	ldr	r0, [pc, #188]	@ (8004358 <HAL_ADC_ConfigChannel+0x7c0>)
 800429c:	f7fe fd69 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042a0:	4b30      	ldr	r3, [pc, #192]	@ (8004364 <HAL_ADC_ConfigChannel+0x7cc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	099b      	lsrs	r3, r3, #6
 80042a6:	4a30      	ldr	r2, [pc, #192]	@ (8004368 <HAL_ADC_ConfigChannel+0x7d0>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	099b      	lsrs	r3, r3, #6
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042ba:	e002      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3b01      	subs	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f9      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042c8:	e03a      	b.n	8004340 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a27      	ldr	r2, [pc, #156]	@ (800436c <HAL_ADC_ConfigChannel+0x7d4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d113      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10d      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a22      	ldr	r2, [pc, #136]	@ (8004370 <HAL_ADC_ConfigChannel+0x7d8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d02a      	beq.n	8004340 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042f2:	4619      	mov	r1, r3
 80042f4:	4818      	ldr	r0, [pc, #96]	@ (8004358 <HAL_ADC_ConfigChannel+0x7c0>)
 80042f6:	f7fe fd3c 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042fa:	e021      	b.n	8004340 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1c      	ldr	r2, [pc, #112]	@ (8004374 <HAL_ADC_ConfigChannel+0x7dc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d11c      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800430a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a16      	ldr	r2, [pc, #88]	@ (8004370 <HAL_ADC_ConfigChannel+0x7d8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d011      	beq.n	8004340 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800431c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004320:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004324:	4619      	mov	r1, r3
 8004326:	480c      	ldr	r0, [pc, #48]	@ (8004358 <HAL_ADC_ConfigChannel+0x7c0>)
 8004328:	f7fe fd23 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
 800432c:	e008      	b.n	8004340 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004348:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800434c:	4618      	mov	r0, r3
 800434e:	37d8      	adds	r7, #216	@ 0xd8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	80080000 	.word	0x80080000
 8004358:	50000300 	.word	0x50000300
 800435c:	c3210000 	.word	0xc3210000
 8004360:	90c00010 	.word	0x90c00010
 8004364:	20000000 	.word	0x20000000
 8004368:	053e2d63 	.word	0x053e2d63
 800436c:	c7520000 	.word	0xc7520000
 8004370:	50000100 	.word	0x50000100
 8004374:	cb840000 	.word	0xcb840000

08004378 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004380:	2300      	movs	r3, #0
 8004382:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe fed1 	bl	8003130 <LL_ADC_IsEnabled>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d169      	bne.n	8004468 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	4b36      	ldr	r3, [pc, #216]	@ (8004474 <ADC_Enable+0xfc>)
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a6:	f043 0210 	orr.w	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e055      	b.n	800446a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe fea0 	bl	8003108 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80043c8:	482b      	ldr	r0, [pc, #172]	@ (8004478 <ADC_Enable+0x100>)
 80043ca:	f7fe fce5 	bl	8002d98 <LL_ADC_GetCommonPathInternalCh>
 80043ce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80043d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043d8:	4b28      	ldr	r3, [pc, #160]	@ (800447c <ADC_Enable+0x104>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	099b      	lsrs	r3, r3, #6
 80043de:	4a28      	ldr	r2, [pc, #160]	@ (8004480 <ADC_Enable+0x108>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043f2:	e002      	b.n	80043fa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f9      	bne.n	80043f4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004400:	f7fe fc98 	bl	8002d34 <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004406:	e028      	b.n	800445a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fe8f 	bl	8003130 <LL_ADC_IsEnabled>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe fe73 	bl	8003108 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004422:	f7fe fc87 	bl	8002d34 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d914      	bls.n	800445a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d00d      	beq.n	800445a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004442:	f043 0210 	orr.w	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e007      	b.n	800446a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d1cf      	bne.n	8004408 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	8000003f 	.word	0x8000003f
 8004478:	50000300 	.word	0x50000300
 800447c:	20000000 	.word	0x20000000
 8004480:	053e2d63 	.word	0x053e2d63

08004484 <LL_ADC_IsEnabled>:
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <LL_ADC_IsEnabled+0x18>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <LL_ADC_IsEnabled+0x1a>
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_ADC_REG_IsConversionOngoing>:
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d101      	bne.n	80044c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004534:	b590      	push	{r4, r7, lr}
 8004536:	b0a1      	sub	sp, #132	@ 0x84
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800454e:	2302      	movs	r3, #2
 8004550:	e08b      	b.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800455a:	2300      	movs	r3, #0
 800455c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800455e:	2300      	movs	r3, #0
 8004560:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800456a:	d102      	bne.n	8004572 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800456c:	4b41      	ldr	r3, [pc, #260]	@ (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	e001      	b.n	8004576 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e06a      	b.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff ff87 	bl	80044aa <LL_ADC_REG_IsConversionOngoing>
 800459c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff ff81 	bl	80044aa <LL_ADC_REG_IsConversionOngoing>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d14c      	bne.n	8004648 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80045ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d149      	bne.n	8004648 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045b4:	4b30      	ldr	r3, [pc, #192]	@ (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80045b6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d028      	beq.n	8004612 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80045c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045d2:	035b      	lsls	r3, r3, #13
 80045d4:	430b      	orrs	r3, r1
 80045d6:	431a      	orrs	r2, r3
 80045d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80045e0:	f7ff ff50 	bl	8004484 <LL_ADC_IsEnabled>
 80045e4:	4604      	mov	r4, r0
 80045e6:	4823      	ldr	r0, [pc, #140]	@ (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80045e8:	f7ff ff4c 	bl	8004484 <LL_ADC_IsEnabled>
 80045ec:	4603      	mov	r3, r0
 80045ee:	4323      	orrs	r3, r4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d133      	bne.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80045fc:	f023 030f 	bic.w	r3, r3, #15
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	6811      	ldr	r1, [r2, #0]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	6892      	ldr	r2, [r2, #8]
 8004608:	430a      	orrs	r2, r1
 800460a:	431a      	orrs	r2, r3
 800460c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800460e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004610:	e024      	b.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800461a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800461c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800461e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004622:	f7ff ff2f 	bl	8004484 <LL_ADC_IsEnabled>
 8004626:	4604      	mov	r4, r0
 8004628:	4812      	ldr	r0, [pc, #72]	@ (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800462a:	f7ff ff2b 	bl	8004484 <LL_ADC_IsEnabled>
 800462e:	4603      	mov	r3, r0
 8004630:	4323      	orrs	r3, r4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d112      	bne.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800463e:	f023 030f 	bic.w	r3, r3, #15
 8004642:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004644:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004646:	e009      	b.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464c:	f043 0220 	orr.w	r2, r3, #32
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800465a:	e000      	b.n	800465e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800465c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004666:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800466a:	4618      	mov	r0, r3
 800466c:	3784      	adds	r7, #132	@ 0x84
 800466e:	46bd      	mov	sp, r7
 8004670:	bd90      	pop	{r4, r7, pc}
 8004672:	bf00      	nop
 8004674:	50000100 	.word	0x50000100
 8004678:	50000300 	.word	0x50000300

0800467c <__NVIC_SetPriorityGrouping>:
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800468c:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <__NVIC_SetPriorityGrouping+0x44>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004698:	4013      	ands	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ae:	4a04      	ldr	r2, [pc, #16]	@ (80046c0 <__NVIC_SetPriorityGrouping+0x44>)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	60d3      	str	r3, [r2, #12]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	e000ed00 	.word	0xe000ed00

080046c4 <__NVIC_GetPriorityGrouping>:
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046c8:	4b04      	ldr	r3, [pc, #16]	@ (80046dc <__NVIC_GetPriorityGrouping+0x18>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	f003 0307 	and.w	r3, r3, #7
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <__NVIC_EnableIRQ>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	db0b      	blt.n	800470a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	f003 021f 	and.w	r2, r3, #31
 80046f8:	4907      	ldr	r1, [pc, #28]	@ (8004718 <__NVIC_EnableIRQ+0x38>)
 80046fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	2001      	movs	r0, #1
 8004702:	fa00 f202 	lsl.w	r2, r0, r2
 8004706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	e000e100 	.word	0xe000e100

0800471c <__NVIC_SetPriority>:
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	6039      	str	r1, [r7, #0]
 8004726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472c:	2b00      	cmp	r3, #0
 800472e:	db0a      	blt.n	8004746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	b2da      	uxtb	r2, r3
 8004734:	490c      	ldr	r1, [pc, #48]	@ (8004768 <__NVIC_SetPriority+0x4c>)
 8004736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473a:	0112      	lsls	r2, r2, #4
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	440b      	add	r3, r1
 8004740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004744:	e00a      	b.n	800475c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	4908      	ldr	r1, [pc, #32]	@ (800476c <__NVIC_SetPriority+0x50>)
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	3b04      	subs	r3, #4
 8004754:	0112      	lsls	r2, r2, #4
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	440b      	add	r3, r1
 800475a:	761a      	strb	r2, [r3, #24]
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	e000e100 	.word	0xe000e100
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <NVIC_EncodePriority>:
{
 8004770:	b480      	push	{r7}
 8004772:	b089      	sub	sp, #36	@ 0x24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f1c3 0307 	rsb	r3, r3, #7
 800478a:	2b04      	cmp	r3, #4
 800478c:	bf28      	it	cs
 800478e:	2304      	movcs	r3, #4
 8004790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	3304      	adds	r3, #4
 8004796:	2b06      	cmp	r3, #6
 8004798:	d902      	bls.n	80047a0 <NVIC_EncodePriority+0x30>
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	3b03      	subs	r3, #3
 800479e:	e000      	b.n	80047a2 <NVIC_EncodePriority+0x32>
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43da      	mvns	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	401a      	ands	r2, r3
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	fa01 f303 	lsl.w	r3, r1, r3
 80047c2:	43d9      	mvns	r1, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c8:	4313      	orrs	r3, r2
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3724      	adds	r7, #36	@ 0x24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff ff4c 	bl	800467c <__NVIC_SetPriorityGrouping>
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047fa:	f7ff ff63 	bl	80046c4 <__NVIC_GetPriorityGrouping>
 80047fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	6978      	ldr	r0, [r7, #20]
 8004806:	f7ff ffb3 	bl	8004770 <NVIC_EncodePriority>
 800480a:	4602      	mov	r2, r0
 800480c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004810:	4611      	mov	r1, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff ff82 	bl	800471c <__NVIC_SetPriority>
}
 8004818:	bf00      	nop
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800482a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff ff56 	bl	80046e0 <__NVIC_EnableIRQ>
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d005      	beq.n	8004860 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2204      	movs	r2, #4
 8004858:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
 800485e:	e037      	b.n	80048d0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 020e 	bic.w	r2, r2, #14
 800486e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800487e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004894:	f003 021f 	and.w	r2, r3, #31
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	2101      	movs	r1, #1
 800489e:	fa01 f202 	lsl.w	r2, r1, r2
 80048a2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048ac:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00c      	beq.n	80048d0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048c4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048ce:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d00d      	beq.n	8004922 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2204      	movs	r2, #4
 800490a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
 8004920:	e047      	b.n	80049b2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 020e 	bic.w	r2, r2, #14
 8004930:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800494c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004950:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f003 021f 	and.w	r2, r3, #31
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	2101      	movs	r1, #1
 8004960:	fa01 f202 	lsl.w	r2, r1, r2
 8004964:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800496e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004982:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004986:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004990:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4798      	blx	r3
    }
  }
  return status;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049ca:	e15a      	b.n	8004c82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2101      	movs	r1, #1
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	fa01 f303 	lsl.w	r3, r1, r3
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 814c 	beq.w	8004c7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d005      	beq.n	80049fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d130      	bne.n	8004a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	2203      	movs	r2, #3
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4013      	ands	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a32:	2201      	movs	r2, #1
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 0201 	and.w	r2, r3, #1
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d017      	beq.n	8004a9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	2203      	movs	r2, #3
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d123      	bne.n	8004aee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	08da      	lsrs	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3208      	adds	r2, #8
 8004aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	220f      	movs	r2, #15
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	08da      	lsrs	r2, r3, #3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3208      	adds	r2, #8
 8004ae8:	6939      	ldr	r1, [r7, #16]
 8004aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	2203      	movs	r2, #3
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0203 	and.w	r2, r3, #3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80a6 	beq.w	8004c7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b30:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca0 <HAL_GPIO_Init+0x2e4>)
 8004b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b34:	4a5a      	ldr	r2, [pc, #360]	@ (8004ca0 <HAL_GPIO_Init+0x2e4>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b3c:	4b58      	ldr	r3, [pc, #352]	@ (8004ca0 <HAL_GPIO_Init+0x2e4>)
 8004b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b48:	4a56      	ldr	r2, [pc, #344]	@ (8004ca4 <HAL_GPIO_Init+0x2e8>)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	089b      	lsrs	r3, r3, #2
 8004b4e:	3302      	adds	r3, #2
 8004b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	220f      	movs	r2, #15
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b72:	d01f      	beq.n	8004bb4 <HAL_GPIO_Init+0x1f8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a4c      	ldr	r2, [pc, #304]	@ (8004ca8 <HAL_GPIO_Init+0x2ec>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d019      	beq.n	8004bb0 <HAL_GPIO_Init+0x1f4>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8004cac <HAL_GPIO_Init+0x2f0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <HAL_GPIO_Init+0x1f0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a4a      	ldr	r2, [pc, #296]	@ (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00d      	beq.n	8004ba8 <HAL_GPIO_Init+0x1ec>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a49      	ldr	r2, [pc, #292]	@ (8004cb4 <HAL_GPIO_Init+0x2f8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d007      	beq.n	8004ba4 <HAL_GPIO_Init+0x1e8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a48      	ldr	r2, [pc, #288]	@ (8004cb8 <HAL_GPIO_Init+0x2fc>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d101      	bne.n	8004ba0 <HAL_GPIO_Init+0x1e4>
 8004b9c:	2305      	movs	r3, #5
 8004b9e:	e00a      	b.n	8004bb6 <HAL_GPIO_Init+0x1fa>
 8004ba0:	2306      	movs	r3, #6
 8004ba2:	e008      	b.n	8004bb6 <HAL_GPIO_Init+0x1fa>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	e006      	b.n	8004bb6 <HAL_GPIO_Init+0x1fa>
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e004      	b.n	8004bb6 <HAL_GPIO_Init+0x1fa>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e002      	b.n	8004bb6 <HAL_GPIO_Init+0x1fa>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <HAL_GPIO_Init+0x1fa>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	f002 0203 	and.w	r2, r2, #3
 8004bbc:	0092      	lsls	r2, r2, #2
 8004bbe:	4093      	lsls	r3, r2
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc6:	4937      	ldr	r1, [pc, #220]	@ (8004ca4 <HAL_GPIO_Init+0x2e8>)
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	3302      	adds	r3, #2
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bd4:	4b39      	ldr	r3, [pc, #228]	@ (8004cbc <HAL_GPIO_Init+0x300>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4013      	ands	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bf8:	4a30      	ldr	r2, [pc, #192]	@ (8004cbc <HAL_GPIO_Init+0x300>)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8004cbc <HAL_GPIO_Init+0x300>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	43db      	mvns	r3, r3
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c22:	4a26      	ldr	r2, [pc, #152]	@ (8004cbc <HAL_GPIO_Init+0x300>)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c28:	4b24      	ldr	r3, [pc, #144]	@ (8004cbc <HAL_GPIO_Init+0x300>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4013      	ands	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cbc <HAL_GPIO_Init+0x300>)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c52:	4b1a      	ldr	r3, [pc, #104]	@ (8004cbc <HAL_GPIO_Init+0x300>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c76:	4a11      	ldr	r2, [pc, #68]	@ (8004cbc <HAL_GPIO_Init+0x300>)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f47f ae9d 	bne.w	80049cc <HAL_GPIO_Init+0x10>
  }
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	48000400 	.word	0x48000400
 8004cac:	48000800 	.word	0x48000800
 8004cb0:	48000c00 	.word	0x48000c00
 8004cb4:	48001000 	.word	0x48001000
 8004cb8:	48001400 	.word	0x48001400
 8004cbc:	40010400 	.word	0x40010400

08004cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	807b      	strh	r3, [r7, #2]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cd0:	787b      	ldrb	r3, [r7, #1]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cd6:	887a      	ldrh	r2, [r7, #2]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004cdc:	e002      	b.n	8004ce4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cde:	887a      	ldrh	r2, [r7, #2]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d141      	bne.n	8004d82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d0a:	d131      	bne.n	8004d70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d0c:	4b47      	ldr	r3, [pc, #284]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d12:	4a46      	ldr	r2, [pc, #280]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d1c:	4b43      	ldr	r3, [pc, #268]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d24:	4a41      	ldr	r2, [pc, #260]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d2c:	4b40      	ldr	r3, [pc, #256]	@ (8004e30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2232      	movs	r2, #50	@ 0x32
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	4a3f      	ldr	r2, [pc, #252]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	0c9b      	lsrs	r3, r3, #18
 8004d3e:	3301      	adds	r3, #1
 8004d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d42:	e002      	b.n	8004d4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d4a:	4b38      	ldr	r3, [pc, #224]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d56:	d102      	bne.n	8004d5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f2      	bne.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d5e:	4b33      	ldr	r3, [pc, #204]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d6a:	d158      	bne.n	8004e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e057      	b.n	8004e20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d70:	4b2e      	ldr	r3, [pc, #184]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d76:	4a2d      	ldr	r2, [pc, #180]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d80:	e04d      	b.n	8004e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d88:	d141      	bne.n	8004e0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d8a:	4b28      	ldr	r3, [pc, #160]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d96:	d131      	bne.n	8004dfc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d98:	4b24      	ldr	r3, [pc, #144]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d9e:	4a23      	ldr	r2, [pc, #140]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004da8:	4b20      	ldr	r3, [pc, #128]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004db0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004db6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004db8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2232      	movs	r2, #50	@ 0x32
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	0c9b      	lsrs	r3, r3, #18
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dce:	e002      	b.n	8004dd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dd6:	4b15      	ldr	r3, [pc, #84]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de2:	d102      	bne.n	8004dea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f2      	bne.n	8004dd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df6:	d112      	bne.n	8004e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e011      	b.n	8004e20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e02:	4a0a      	ldr	r2, [pc, #40]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e0c:	e007      	b.n	8004e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e0e:	4b07      	ldr	r3, [pc, #28]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e16:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40007000 	.word	0x40007000
 8004e30:	20000000 	.word	0x20000000
 8004e34:	431bde83 	.word	0x431bde83

08004e38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e3c:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4a04      	ldr	r2, [pc, #16]	@ (8004e54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e46:	6093      	str	r3, [r2, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40007000 	.word	0x40007000

08004e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e2fe      	b.n	8005468 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d075      	beq.n	8004f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e76:	4b97      	ldr	r3, [pc, #604]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e80:	4b94      	ldr	r3, [pc, #592]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b0c      	cmp	r3, #12
 8004e8e:	d102      	bne.n	8004e96 <HAL_RCC_OscConfig+0x3e>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d002      	beq.n	8004e9c <HAL_RCC_OscConfig+0x44>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9c:	4b8d      	ldr	r3, [pc, #564]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d05b      	beq.n	8004f60 <HAL_RCC_OscConfig+0x108>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d157      	bne.n	8004f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e2d9      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ebc:	d106      	bne.n	8004ecc <HAL_RCC_OscConfig+0x74>
 8004ebe:	4b85      	ldr	r3, [pc, #532]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a84      	ldr	r2, [pc, #528]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e01d      	b.n	8004f08 <HAL_RCC_OscConfig+0xb0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x98>
 8004ed6:	4b7f      	ldr	r3, [pc, #508]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7e      	ldr	r2, [pc, #504]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b7c      	ldr	r3, [pc, #496]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7b      	ldr	r2, [pc, #492]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0xb0>
 8004ef0:	4b78      	ldr	r3, [pc, #480]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a77      	ldr	r2, [pc, #476]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b75      	ldr	r3, [pc, #468]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a74      	ldr	r2, [pc, #464]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fd ff10 	bl	8002d34 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fd ff0c 	bl	8002d34 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	@ 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e29e      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0xc0>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fd fefc 	bl	8002d34 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fd fef8 	bl	8002d34 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	@ 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e28a      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f52:	4b60      	ldr	r3, [pc, #384]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0xe8>
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d075      	beq.n	800505a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f6e:	4b59      	ldr	r3, [pc, #356]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f78:	4b56      	ldr	r3, [pc, #344]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	d102      	bne.n	8004f8e <HAL_RCC_OscConfig+0x136>
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d002      	beq.n	8004f94 <HAL_RCC_OscConfig+0x13c>
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d11f      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f94:	4b4f      	ldr	r3, [pc, #316]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_OscConfig+0x154>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e25d      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fac:	4b49      	ldr	r3, [pc, #292]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	061b      	lsls	r3, r3, #24
 8004fba:	4946      	ldr	r1, [pc, #280]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fc0:	4b45      	ldr	r3, [pc, #276]	@ (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fc fd41 	bl	8001a4c <HAL_InitTick>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d043      	beq.n	8005058 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e249      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d023      	beq.n	8005024 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fd fea4 	bl	8002d34 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ff0:	f7fd fea0 	bl	8002d34 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e232      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005002:	4b34      	ldr	r3, [pc, #208]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500e:	4b31      	ldr	r3, [pc, #196]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	492d      	ldr	r1, [pc, #180]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
 8005022:	e01a      	b.n	800505a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005024:	4b2b      	ldr	r3, [pc, #172]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2a      	ldr	r2, [pc, #168]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 800502a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800502e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fd fe80 	bl	8002d34 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005038:	f7fd fe7c 	bl	8002d34 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e20e      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800504a:	4b22      	ldr	r3, [pc, #136]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x1e0>
 8005056:	e000      	b.n	800505a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005058:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d041      	beq.n	80050ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01c      	beq.n	80050a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506e:	4b19      	ldr	r3, [pc, #100]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8005070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005074:	4a17      	ldr	r2, [pc, #92]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507e:	f7fd fe59 	bl	8002d34 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005086:	f7fd fe55 	bl	8002d34 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e1e7      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005098:	4b0e      	ldr	r3, [pc, #56]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 800509a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0ef      	beq.n	8005086 <HAL_RCC_OscConfig+0x22e>
 80050a6:	e020      	b.n	80050ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a8:	4b0a      	ldr	r3, [pc, #40]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 80050aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ae:	4a09      	ldr	r2, [pc, #36]	@ (80050d4 <HAL_RCC_OscConfig+0x27c>)
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b8:	f7fd fe3c 	bl	8002d34 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050be:	e00d      	b.n	80050dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c0:	f7fd fe38 	bl	8002d34 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d906      	bls.n	80050dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e1ca      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
 80050d2:	bf00      	nop
 80050d4:	40021000 	.word	0x40021000
 80050d8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80050de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1ea      	bne.n	80050c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80a6 	beq.w	8005244 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f8:	2300      	movs	r3, #0
 80050fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050fc:	4b84      	ldr	r3, [pc, #528]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_OscConfig+0x2b4>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x2b6>
 800510c:	2300      	movs	r3, #0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005112:	4b7f      	ldr	r3, [pc, #508]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 8005114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005116:	4a7e      	ldr	r2, [pc, #504]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 8005118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800511c:	6593      	str	r3, [r2, #88]	@ 0x58
 800511e:	4b7c      	ldr	r3, [pc, #496]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800512a:	2301      	movs	r3, #1
 800512c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800512e:	4b79      	ldr	r3, [pc, #484]	@ (8005314 <HAL_RCC_OscConfig+0x4bc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d118      	bne.n	800516c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800513a:	4b76      	ldr	r3, [pc, #472]	@ (8005314 <HAL_RCC_OscConfig+0x4bc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a75      	ldr	r2, [pc, #468]	@ (8005314 <HAL_RCC_OscConfig+0x4bc>)
 8005140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005146:	f7fd fdf5 	bl	8002d34 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514e:	f7fd fdf1 	bl	8002d34 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e183      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005160:	4b6c      	ldr	r3, [pc, #432]	@ (8005314 <HAL_RCC_OscConfig+0x4bc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d108      	bne.n	8005186 <HAL_RCC_OscConfig+0x32e>
 8005174:	4b66      	ldr	r3, [pc, #408]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517a:	4a65      	ldr	r2, [pc, #404]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005184:	e024      	b.n	80051d0 <HAL_RCC_OscConfig+0x378>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b05      	cmp	r3, #5
 800518c:	d110      	bne.n	80051b0 <HAL_RCC_OscConfig+0x358>
 800518e:	4b60      	ldr	r3, [pc, #384]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005194:	4a5e      	ldr	r2, [pc, #376]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 8005196:	f043 0304 	orr.w	r3, r3, #4
 800519a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800519e:	4b5c      	ldr	r3, [pc, #368]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a4:	4a5a      	ldr	r2, [pc, #360]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051ae:	e00f      	b.n	80051d0 <HAL_RCC_OscConfig+0x378>
 80051b0:	4b57      	ldr	r3, [pc, #348]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b6:	4a56      	ldr	r2, [pc, #344]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051c0:	4b53      	ldr	r3, [pc, #332]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c6:	4a52      	ldr	r2, [pc, #328]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80051c8:	f023 0304 	bic.w	r3, r3, #4
 80051cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d016      	beq.n	8005206 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fd fdac 	bl	8002d34 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fd fda8 	bl	8002d34 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e138      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f6:	4b46      	ldr	r3, [pc, #280]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ed      	beq.n	80051e0 <HAL_RCC_OscConfig+0x388>
 8005204:	e015      	b.n	8005232 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005206:	f7fd fd95 	bl	8002d34 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fd fd91 	bl	8002d34 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e121      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005224:	4b3a      	ldr	r3, [pc, #232]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1ed      	bne.n	800520e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005232:	7ffb      	ldrb	r3, [r7, #31]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d105      	bne.n	8005244 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005238:	4b35      	ldr	r3, [pc, #212]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523c:	4a34      	ldr	r2, [pc, #208]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 800523e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005242:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d03c      	beq.n	80052ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01c      	beq.n	8005292 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005258:	4b2d      	ldr	r3, [pc, #180]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 800525a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800525e:	4a2c      	ldr	r2, [pc, #176]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fd fd64 	bl	8002d34 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005270:	f7fd fd60 	bl	8002d34 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e0f2      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005282:	4b23      	ldr	r3, [pc, #140]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 8005284:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ef      	beq.n	8005270 <HAL_RCC_OscConfig+0x418>
 8005290:	e01b      	b.n	80052ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005292:	4b1f      	ldr	r3, [pc, #124]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 8005294:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005298:	4a1d      	ldr	r2, [pc, #116]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a2:	f7fd fd47 	bl	8002d34 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052aa:	f7fd fd43 	bl	8002d34 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e0d5      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052bc:	4b14      	ldr	r3, [pc, #80]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80052be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1ef      	bne.n	80052aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80c9 	beq.w	8005466 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 030c 	and.w	r3, r3, #12
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	f000 8083 	beq.w	80053e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d15e      	bne.n	80053a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ea:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a08      	ldr	r2, [pc, #32]	@ (8005310 <HAL_RCC_OscConfig+0x4b8>)
 80052f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fd fd1d 	bl	8002d34 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052fc:	e00c      	b.n	8005318 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fe:	f7fd fd19 	bl	8002d34 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d905      	bls.n	8005318 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e0ab      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
 8005310:	40021000 	.word	0x40021000
 8005314:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005318:	4b55      	ldr	r3, [pc, #340]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ec      	bne.n	80052fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005324:	4b52      	ldr	r3, [pc, #328]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	4b52      	ldr	r3, [pc, #328]	@ (8005474 <HAL_RCC_OscConfig+0x61c>)
 800532a:	4013      	ands	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6a11      	ldr	r1, [r2, #32]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005334:	3a01      	subs	r2, #1
 8005336:	0112      	lsls	r2, r2, #4
 8005338:	4311      	orrs	r1, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800533e:	0212      	lsls	r2, r2, #8
 8005340:	4311      	orrs	r1, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005346:	0852      	lsrs	r2, r2, #1
 8005348:	3a01      	subs	r2, #1
 800534a:	0552      	lsls	r2, r2, #21
 800534c:	4311      	orrs	r1, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005352:	0852      	lsrs	r2, r2, #1
 8005354:	3a01      	subs	r2, #1
 8005356:	0652      	lsls	r2, r2, #25
 8005358:	4311      	orrs	r1, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800535e:	06d2      	lsls	r2, r2, #27
 8005360:	430a      	orrs	r2, r1
 8005362:	4943      	ldr	r1, [pc, #268]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 8005364:	4313      	orrs	r3, r2
 8005366:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005368:	4b41      	ldr	r3, [pc, #260]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a40      	ldr	r2, [pc, #256]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 800536e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005372:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005374:	4b3e      	ldr	r3, [pc, #248]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4a3d      	ldr	r2, [pc, #244]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 800537a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800537e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fd fcd8 	bl	8002d34 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005388:	f7fd fcd4 	bl	8002d34 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e066      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800539a:	4b35      	ldr	r3, [pc, #212]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0x530>
 80053a6:	e05e      	b.n	8005466 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a8:	4b31      	ldr	r3, [pc, #196]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a30      	ldr	r2, [pc, #192]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 80053ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fd fcbe 	bl	8002d34 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fd fcba 	bl	8002d34 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e04c      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ce:	4b28      	ldr	r3, [pc, #160]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80053da:	4b25      	ldr	r3, [pc, #148]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	4924      	ldr	r1, [pc, #144]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 80053e0:	4b25      	ldr	r3, [pc, #148]	@ (8005478 <HAL_RCC_OscConfig+0x620>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	60cb      	str	r3, [r1, #12]
 80053e6:	e03e      	b.n	8005466 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e039      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80053f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005470 <HAL_RCC_OscConfig+0x618>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f003 0203 	and.w	r2, r3, #3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	429a      	cmp	r2, r3
 8005406:	d12c      	bne.n	8005462 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	3b01      	subs	r3, #1
 8005414:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	429a      	cmp	r2, r3
 8005418:	d123      	bne.n	8005462 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005424:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005426:	429a      	cmp	r2, r3
 8005428:	d11b      	bne.n	8005462 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005436:	429a      	cmp	r2, r3
 8005438:	d113      	bne.n	8005462 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	3b01      	subs	r3, #1
 8005448:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d109      	bne.n	8005462 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	3b01      	subs	r3, #1
 800545c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d001      	beq.n	8005466 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	019f800c 	.word	0x019f800c
 8005478:	feeefffc 	.word	0xfeeefffc

0800547c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e11e      	b.n	80056d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005494:	4b91      	ldr	r3, [pc, #580]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d910      	bls.n	80054c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b8e      	ldr	r3, [pc, #568]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 020f 	bic.w	r2, r3, #15
 80054aa:	498c      	ldr	r1, [pc, #560]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b8a      	ldr	r3, [pc, #552]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e106      	b.n	80056d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d073      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d129      	bne.n	800552c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054d8:	4b81      	ldr	r3, [pc, #516]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0f4      	b.n	80056d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80054e8:	f000 f9ce 	bl	8005888 <RCC_GetSysClockFreqFromPLLSource>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4a7c      	ldr	r2, [pc, #496]	@ (80056e4 <HAL_RCC_ClockConfig+0x268>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d93f      	bls.n	8005576 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054f6:	4b7a      	ldr	r3, [pc, #488]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800550a:	2b00      	cmp	r3, #0
 800550c:	d033      	beq.n	8005576 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005512:	2b00      	cmp	r3, #0
 8005514:	d12f      	bne.n	8005576 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005516:	4b72      	ldr	r3, [pc, #456]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800551e:	4a70      	ldr	r2, [pc, #448]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005524:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005526:	2380      	movs	r3, #128	@ 0x80
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e024      	b.n	8005576 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d107      	bne.n	8005544 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005534:	4b6a      	ldr	r3, [pc, #424]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0c6      	b.n	80056d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005544:	4b66      	ldr	r3, [pc, #408]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0be      	b.n	80056d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005554:	f000 f8ce 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 8005558:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4a61      	ldr	r2, [pc, #388]	@ (80056e4 <HAL_RCC_ClockConfig+0x268>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d909      	bls.n	8005576 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005562:	4b5f      	ldr	r3, [pc, #380]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800556a:	4a5d      	ldr	r2, [pc, #372]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 800556c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005570:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005572:	2380      	movs	r3, #128	@ 0x80
 8005574:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005576:	4b5a      	ldr	r3, [pc, #360]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f023 0203 	bic.w	r2, r3, #3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	4957      	ldr	r1, [pc, #348]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005584:	4313      	orrs	r3, r2
 8005586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005588:	f7fd fbd4 	bl	8002d34 <HAL_GetTick>
 800558c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005590:	f7fd fbd0 	bl	8002d34 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e095      	b.n	80056d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a6:	4b4e      	ldr	r3, [pc, #312]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 020c 	and.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d1eb      	bne.n	8005590 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d023      	beq.n	800560c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d0:	4b43      	ldr	r3, [pc, #268]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4a42      	ldr	r2, [pc, #264]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 80055d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055e8:	4b3d      	ldr	r3, [pc, #244]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055f0:	4a3b      	ldr	r2, [pc, #236]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 80055f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f8:	4b39      	ldr	r3, [pc, #228]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4936      	ldr	r1, [pc, #216]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005606:	4313      	orrs	r3, r2
 8005608:	608b      	str	r3, [r1, #8]
 800560a:	e008      	b.n	800561e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b80      	cmp	r3, #128	@ 0x80
 8005610:	d105      	bne.n	800561e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005612:	4b33      	ldr	r3, [pc, #204]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	4a32      	ldr	r2, [pc, #200]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005618:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800561c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800561e:	4b2f      	ldr	r3, [pc, #188]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d21d      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562c:	4b2b      	ldr	r3, [pc, #172]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f023 020f 	bic.w	r2, r3, #15
 8005634:	4929      	ldr	r1, [pc, #164]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800563c:	f7fd fb7a 	bl	8002d34 <HAL_GetTick>
 8005640:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	e00a      	b.n	800565a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005644:	f7fd fb76 	bl	8002d34 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e03b      	b.n	80056d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565a:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d1ed      	bne.n	8005644 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005674:	4b1a      	ldr	r3, [pc, #104]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4917      	ldr	r1, [pc, #92]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005682:	4313      	orrs	r3, r2
 8005684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005692:	4b13      	ldr	r3, [pc, #76]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	490f      	ldr	r1, [pc, #60]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056a6:	f000 f825 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 80056aa:	4602      	mov	r2, r0
 80056ac:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	490c      	ldr	r1, [pc, #48]	@ (80056e8 <HAL_RCC_ClockConfig+0x26c>)
 80056b8:	5ccb      	ldrb	r3, [r1, r3]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	fa22 f303 	lsr.w	r3, r2, r3
 80056c2:	4a0a      	ldr	r2, [pc, #40]	@ (80056ec <HAL_RCC_ClockConfig+0x270>)
 80056c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056c6:	4b0a      	ldr	r3, [pc, #40]	@ (80056f0 <HAL_RCC_ClockConfig+0x274>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fc f9be 	bl	8001a4c <HAL_InitTick>
 80056d0:	4603      	mov	r3, r0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40022000 	.word	0x40022000
 80056e0:	40021000 	.word	0x40021000
 80056e4:	04c4b400 	.word	0x04c4b400
 80056e8:	0800fdb0 	.word	0x0800fdb0
 80056ec:	20000000 	.word	0x20000000
 80056f0:	20000004 	.word	0x20000004

080056f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056fa:	4b2c      	ldr	r3, [pc, #176]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	2b04      	cmp	r3, #4
 8005704:	d102      	bne.n	800570c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005706:	4b2a      	ldr	r3, [pc, #168]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	e047      	b.n	800579c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800570c:	4b27      	ldr	r3, [pc, #156]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b08      	cmp	r3, #8
 8005716:	d102      	bne.n	800571e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005718:	4b25      	ldr	r3, [pc, #148]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e03e      	b.n	800579c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800571e:	4b23      	ldr	r3, [pc, #140]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d136      	bne.n	8005798 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800572a:	4b20      	ldr	r3, [pc, #128]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005734:	4b1d      	ldr	r3, [pc, #116]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	3301      	adds	r3, #1
 8005740:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b03      	cmp	r3, #3
 8005746:	d10c      	bne.n	8005762 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005748:	4a19      	ldr	r2, [pc, #100]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	4a16      	ldr	r2, [pc, #88]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005752:	68d2      	ldr	r2, [r2, #12]
 8005754:	0a12      	lsrs	r2, r2, #8
 8005756:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800575a:	fb02 f303 	mul.w	r3, r2, r3
 800575e:	617b      	str	r3, [r7, #20]
      break;
 8005760:	e00c      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005762:	4a13      	ldr	r2, [pc, #76]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	fbb2 f3f3 	udiv	r3, r2, r3
 800576a:	4a10      	ldr	r2, [pc, #64]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800576c:	68d2      	ldr	r2, [r2, #12]
 800576e:	0a12      	lsrs	r2, r2, #8
 8005770:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005774:	fb02 f303 	mul.w	r3, r2, r3
 8005778:	617b      	str	r3, [r7, #20]
      break;
 800577a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800577c:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	0e5b      	lsrs	r3, r3, #25
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	3301      	adds	r3, #1
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	fbb2 f3f3 	udiv	r3, r2, r3
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	e001      	b.n	800579c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800579c:	693b      	ldr	r3, [r7, #16]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000
 80057b0:	00f42400 	.word	0x00f42400

080057b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b8:	4b03      	ldr	r3, [pc, #12]	@ (80057c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ba:	681b      	ldr	r3, [r3, #0]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000000 	.word	0x20000000

080057cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057d0:	f7ff fff0 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4904      	ldr	r1, [pc, #16]	@ (80057f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	0800fdc0 	.word	0x0800fdc0

080057f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057fc:	f7ff ffda 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 8005800:	4602      	mov	r2, r0
 8005802:	4b06      	ldr	r3, [pc, #24]	@ (800581c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	0adb      	lsrs	r3, r3, #11
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	4904      	ldr	r1, [pc, #16]	@ (8005820 <HAL_RCC_GetPCLK2Freq+0x28>)
 800580e:	5ccb      	ldrb	r3, [r1, r3]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	0800fdc0 	.word	0x0800fdc0

08005824 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	220f      	movs	r2, #15
 8005832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005834:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <HAL_RCC_GetClockConfig+0x5c>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0203 	and.w	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005840:	4b0f      	ldr	r3, [pc, #60]	@ (8005880 <HAL_RCC_GetClockConfig+0x5c>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800584c:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <HAL_RCC_GetClockConfig+0x5c>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005858:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <HAL_RCC_GetClockConfig+0x5c>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	08db      	lsrs	r3, r3, #3
 800585e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005866:	4b07      	ldr	r3, [pc, #28]	@ (8005884 <HAL_RCC_GetClockConfig+0x60>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 020f 	and.w	r2, r3, #15
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	601a      	str	r2, [r3, #0]
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000
 8005884:	40022000 	.word	0x40022000

08005888 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800588e:	4b1e      	ldr	r3, [pc, #120]	@ (8005908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005898:	4b1b      	ldr	r3, [pc, #108]	@ (8005908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d10c      	bne.n	80058c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058ac:	4a17      	ldr	r2, [pc, #92]	@ (800590c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	4a14      	ldr	r2, [pc, #80]	@ (8005908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058b6:	68d2      	ldr	r2, [r2, #12]
 80058b8:	0a12      	lsrs	r2, r2, #8
 80058ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	617b      	str	r3, [r7, #20]
    break;
 80058c4:	e00c      	b.n	80058e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058c6:	4a11      	ldr	r2, [pc, #68]	@ (800590c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058d0:	68d2      	ldr	r2, [r2, #12]
 80058d2:	0a12      	lsrs	r2, r2, #8
 80058d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058d8:	fb02 f303 	mul.w	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]
    break;
 80058de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058e0:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	0e5b      	lsrs	r3, r3, #25
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	3301      	adds	r3, #1
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80058fa:	687b      	ldr	r3, [r7, #4]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40021000 	.word	0x40021000
 800590c:	00f42400 	.word	0x00f42400

08005910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005918:	2300      	movs	r3, #0
 800591a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800591c:	2300      	movs	r3, #0
 800591e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8098 	beq.w	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800592e:	2300      	movs	r3, #0
 8005930:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005932:	4b43      	ldr	r3, [pc, #268]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10d      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	4b40      	ldr	r3, [pc, #256]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005942:	4a3f      	ldr	r2, [pc, #252]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005948:	6593      	str	r3, [r2, #88]	@ 0x58
 800594a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005956:	2301      	movs	r3, #1
 8005958:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800595a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a39      	ldr	r2, [pc, #228]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005964:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005966:	f7fd f9e5 	bl	8002d34 <HAL_GetTick>
 800596a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800596c:	e009      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596e:	f7fd f9e1 	bl	8002d34 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d902      	bls.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	74fb      	strb	r3, [r7, #19]
        break;
 8005980:	e005      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005982:	4b30      	ldr	r3, [pc, #192]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0ef      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800598e:	7cfb      	ldrb	r3, [r7, #19]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d159      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005994:	4b2a      	ldr	r3, [pc, #168]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800599e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01e      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d019      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059b0:	4b23      	ldr	r3, [pc, #140]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059bc:	4b20      	ldr	r3, [pc, #128]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059dc:	4a18      	ldr	r2, [pc, #96]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d016      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ee:	f7fd f9a1 	bl	8002d34 <HAL_GetTick>
 80059f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f4:	e00b      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f6:	f7fd f99d 	bl	8002d34 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d902      	bls.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	74fb      	strb	r3, [r7, #19]
            break;
 8005a0c:	e006      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0ec      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10b      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a22:	4b07      	ldr	r3, [pc, #28]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a30:	4903      	ldr	r1, [pc, #12]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a38:	e008      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a3a:	7cfb      	ldrb	r3, [r7, #19]
 8005a3c:	74bb      	strb	r3, [r7, #18]
 8005a3e:	e005      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a40:	40021000 	.word	0x40021000
 8005a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a48:	7cfb      	ldrb	r3, [r7, #19]
 8005a4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a4c:	7c7b      	ldrb	r3, [r7, #17]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d105      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a52:	4ba6      	ldr	r3, [pc, #664]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a56:	4aa5      	ldr	r2, [pc, #660]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a6a:	4ba0      	ldr	r3, [pc, #640]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a70:	f023 0203 	bic.w	r2, r3, #3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	499c      	ldr	r1, [pc, #624]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a8c:	4b97      	ldr	r3, [pc, #604]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a92:	f023 020c 	bic.w	r2, r3, #12
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	4994      	ldr	r1, [pc, #592]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aae:	4b8f      	ldr	r3, [pc, #572]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	498b      	ldr	r1, [pc, #556]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ad0:	4b86      	ldr	r3, [pc, #536]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	4983      	ldr	r1, [pc, #524]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005af2:	4b7e      	ldr	r3, [pc, #504]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	497a      	ldr	r1, [pc, #488]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b14:	4b75      	ldr	r3, [pc, #468]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	4972      	ldr	r1, [pc, #456]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b36:	4b6d      	ldr	r3, [pc, #436]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	4969      	ldr	r1, [pc, #420]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b58:	4b64      	ldr	r3, [pc, #400]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	4961      	ldr	r1, [pc, #388]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	4958      	ldr	r1, [pc, #352]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d015      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b9c:	4b53      	ldr	r3, [pc, #332]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005baa:	4950      	ldr	r1, [pc, #320]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bba:	d105      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bc6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d015      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bd4:	4b45      	ldr	r3, [pc, #276]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be2:	4942      	ldr	r1, [pc, #264]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bf2:	d105      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bfe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d015      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c0c:	4b37      	ldr	r3, [pc, #220]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1a:	4934      	ldr	r1, [pc, #208]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c2a:	d105      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	4a2e      	ldr	r2, [pc, #184]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d015      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c44:	4b29      	ldr	r3, [pc, #164]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c52:	4926      	ldr	r1, [pc, #152]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c62:	d105      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c64:	4b21      	ldr	r3, [pc, #132]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4a20      	ldr	r2, [pc, #128]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d015      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8a:	4918      	ldr	r1, [pc, #96]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c9c:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	4a12      	ldr	r2, [pc, #72]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ca6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d015      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc2:	490a      	ldr	r1, [pc, #40]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cd2:	d105      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005cd4:	4b05      	ldr	r3, [pc, #20]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4a04      	ldr	r2, [pc, #16]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ce0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40021000 	.word	0x40021000

08005cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e09d      	b.n	8005e3e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d108      	bne.n	8005d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d12:	d009      	beq.n	8005d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	61da      	str	r2, [r3, #28]
 8005d1a:	e005      	b.n	8005d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fb fe0e 	bl	8001964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d68:	d902      	bls.n	8005d70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e002      	b.n	8005d76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d7e:	d007      	beq.n	8005d90 <HAL_SPI_Init+0xa0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d88:	d002      	beq.n	8005d90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd2:	ea42 0103 	orr.w	r1, r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	0c1b      	lsrs	r3, r3, #16
 8005dec:	f003 0204 	and.w	r2, r3, #4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e0c:	ea42 0103 	orr.w	r1, r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b088      	sub	sp, #32
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_SPI_Transmit+0x22>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e15f      	b.n	8006128 <HAL_SPI_Transmit+0x2e2>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e70:	f7fc ff60 	bl	8002d34 <HAL_GetTick>
 8005e74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d002      	beq.n	8005e8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e86:	2302      	movs	r3, #2
 8005e88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e8a:	e148      	b.n	800611e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_SPI_Transmit+0x52>
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e9c:	e13f      	b.n	800611e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2203      	movs	r2, #3
 8005ea2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	88fa      	ldrh	r2, [r7, #6]
 8005eb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ee8:	d10f      	bne.n	8005f0a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ef8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f14:	2b40      	cmp	r3, #64	@ 0x40
 8005f16:	d007      	beq.n	8005f28 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f30:	d94f      	bls.n	8005fd2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_SPI_Transmit+0xfa>
 8005f3a:	8afb      	ldrh	r3, [r7, #22]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d142      	bne.n	8005fc6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f44:	881a      	ldrh	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	1c9a      	adds	r2, r3, #2
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f64:	e02f      	b.n	8005fc6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d112      	bne.n	8005f9a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	881a      	ldrh	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	1c9a      	adds	r2, r3, #2
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f98:	e015      	b.n	8005fc6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f9a:	f7fc fecb 	bl	8002d34 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d803      	bhi.n	8005fb2 <HAL_SPI_Transmit+0x16c>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fb0:	d102      	bne.n	8005fb8 <HAL_SPI_Transmit+0x172>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005fc4:	e0ab      	b.n	800611e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1ca      	bne.n	8005f66 <HAL_SPI_Transmit+0x120>
 8005fd0:	e080      	b.n	80060d4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_SPI_Transmit+0x19a>
 8005fda:	8afb      	ldrh	r3, [r7, #22]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d174      	bne.n	80060ca <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d912      	bls.n	8006010 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fee:	881a      	ldrh	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	1c9a      	adds	r2, r3, #2
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b02      	subs	r3, #2
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800600e:	e05c      	b.n	80060ca <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006036:	e048      	b.n	80060ca <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b02      	cmp	r3, #2
 8006044:	d12b      	bne.n	800609e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d912      	bls.n	8006076 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006054:	881a      	ldrh	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006060:	1c9a      	adds	r2, r3, #2
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b02      	subs	r3, #2
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006074:	e029      	b.n	80060ca <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	7812      	ldrb	r2, [r2, #0]
 8006082:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800609c:	e015      	b.n	80060ca <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800609e:	f7fc fe49 	bl	8002d34 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d803      	bhi.n	80060b6 <HAL_SPI_Transmit+0x270>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060b4:	d102      	bne.n	80060bc <HAL_SPI_Transmit+0x276>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80060c8:	e029      	b.n	800611e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1b1      	bne.n	8006038 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 fe0d 	bl	8006cf8 <SPI_EndRxTxTransaction>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f2:	2300      	movs	r3, #0
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e003      	b.n	800611e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006126:	7ffb      	ldrb	r3, [r7, #31]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	4613      	mov	r3, r2
 800613e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d002      	beq.n	8006156 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006150:	2302      	movs	r3, #2
 8006152:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006154:	e11a      	b.n	800638c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800615e:	d112      	bne.n	8006186 <HAL_SPI_Receive+0x56>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10e      	bne.n	8006186 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2204      	movs	r2, #4
 800616c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006170:	88fa      	ldrh	r2, [r7, #6]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4613      	mov	r3, r2
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f90e 	bl	800639e <HAL_SPI_TransmitReceive>
 8006182:	4603      	mov	r3, r0
 8006184:	e107      	b.n	8006396 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_SPI_Receive+0x64>
 8006190:	2302      	movs	r3, #2
 8006192:	e100      	b.n	8006396 <HAL_SPI_Receive+0x266>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800619c:	f7fc fdca 	bl	8002d34 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_SPI_Receive+0x7e>
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061b2:	e0eb      	b.n	800638c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2204      	movs	r2, #4
 80061b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	88fa      	ldrh	r2, [r7, #6]
 80061d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061fe:	d908      	bls.n	8006212 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800620e:	605a      	str	r2, [r3, #4]
 8006210:	e007      	b.n	8006222 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006220:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622a:	d10f      	bne.n	800624c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800623a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800624a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006256:	2b40      	cmp	r3, #64	@ 0x40
 8006258:	d007      	beq.n	800626a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006268:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006272:	d86f      	bhi.n	8006354 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006274:	e034      	b.n	80062e0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b01      	cmp	r3, #1
 8006282:	d117      	bne.n	80062b4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f103 020c 	add.w	r2, r3, #12
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80062b2:	e015      	b.n	80062e0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b4:	f7fc fd3e 	bl	8002d34 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d803      	bhi.n	80062cc <HAL_SPI_Receive+0x19c>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062ca:	d102      	bne.n	80062d2 <HAL_SPI_Receive+0x1a2>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80062de:	e055      	b.n	800638c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1c4      	bne.n	8006276 <HAL_SPI_Receive+0x146>
 80062ec:	e038      	b.n	8006360 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d115      	bne.n	8006328 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	b292      	uxth	r2, r2
 8006308:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	1c9a      	adds	r2, r3, #2
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006326:	e015      	b.n	8006354 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006328:	f7fc fd04 	bl	8002d34 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d803      	bhi.n	8006340 <HAL_SPI_Receive+0x210>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800633e:	d102      	bne.n	8006346 <HAL_SPI_Receive+0x216>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006352:	e01b      	b.n	800638c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1c6      	bne.n	80062ee <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fc6f 	bl	8006c48 <SPI_EndRxTransaction>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	75fb      	strb	r3, [r7, #23]
 8006382:	e003      	b.n	800638c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b08a      	sub	sp, #40	@ 0x28
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063ac:	2301      	movs	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x26>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e20a      	b.n	80067da <HAL_SPI_TransmitReceive+0x43c>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063cc:	f7fc fcb2 	bl	8002d34 <HAL_GetTick>
 80063d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80063e0:	887b      	ldrh	r3, [r7, #2]
 80063e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063e8:	7efb      	ldrb	r3, [r7, #27]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d00e      	beq.n	800640c <HAL_SPI_TransmitReceive+0x6e>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063f4:	d106      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x66>
 80063fe:	7efb      	ldrb	r3, [r7, #27]
 8006400:	2b04      	cmp	r3, #4
 8006402:	d003      	beq.n	800640c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006404:	2302      	movs	r3, #2
 8006406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800640a:	e1e0      	b.n	80067ce <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <HAL_SPI_TransmitReceive+0x80>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <HAL_SPI_TransmitReceive+0x80>
 8006418:	887b      	ldrh	r3, [r7, #2]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d103      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006424:	e1d3      	b.n	80067ce <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b04      	cmp	r3, #4
 8006430:	d003      	beq.n	800643a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2205      	movs	r2, #5
 8006436:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	887a      	ldrh	r2, [r7, #2]
 800644a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	887a      	ldrh	r2, [r7, #2]
 8006452:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	887a      	ldrh	r2, [r7, #2]
 8006460:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	887a      	ldrh	r2, [r7, #2]
 8006466:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800647c:	d802      	bhi.n	8006484 <HAL_SPI_TransmitReceive+0xe6>
 800647e:	8a3b      	ldrh	r3, [r7, #16]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d908      	bls.n	8006496 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006492:	605a      	str	r2, [r3, #4]
 8006494:	e007      	b.n	80064a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b0:	2b40      	cmp	r3, #64	@ 0x40
 80064b2:	d007      	beq.n	80064c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064cc:	f240 8081 	bls.w	80065d2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <HAL_SPI_TransmitReceive+0x140>
 80064d8:	8a7b      	ldrh	r3, [r7, #18]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d16d      	bne.n	80065ba <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e2:	881a      	ldrh	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ee:	1c9a      	adds	r2, r3, #2
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006502:	e05a      	b.n	80065ba <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b02      	cmp	r3, #2
 8006510:	d11b      	bne.n	800654a <HAL_SPI_TransmitReceive+0x1ac>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d016      	beq.n	800654a <HAL_SPI_TransmitReceive+0x1ac>
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	2b01      	cmp	r3, #1
 8006520:	d113      	bne.n	800654a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006526:	881a      	ldrh	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006532:	1c9a      	adds	r2, r3, #2
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b01      	cmp	r3, #1
 8006556:	d11c      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x1f4>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d016      	beq.n	8006592 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	b292      	uxth	r2, r2
 8006570:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	1c9a      	adds	r2, r3, #2
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800658e:	2301      	movs	r3, #1
 8006590:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006592:	f7fc fbcf 	bl	8002d34 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800659e:	429a      	cmp	r2, r3
 80065a0:	d80b      	bhi.n	80065ba <HAL_SPI_TransmitReceive+0x21c>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065a8:	d007      	beq.n	80065ba <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80065b8:	e109      	b.n	80067ce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d19f      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x166>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d199      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x166>
 80065d0:	e0e3      	b.n	800679a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_SPI_TransmitReceive+0x244>
 80065da:	8a7b      	ldrh	r3, [r7, #18]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	f040 80cf 	bne.w	8006780 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d912      	bls.n	8006612 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	881a      	ldrh	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fc:	1c9a      	adds	r2, r3, #2
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b02      	subs	r3, #2
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006610:	e0b6      	b.n	8006780 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	330c      	adds	r3, #12
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800662e:	b29b      	uxth	r3, r3
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006638:	e0a2      	b.n	8006780 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b02      	cmp	r3, #2
 8006646:	d134      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x314>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d02f      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x314>
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	2b01      	cmp	r3, #1
 8006656:	d12c      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b01      	cmp	r3, #1
 8006660:	d912      	bls.n	8006688 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006666:	881a      	ldrh	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006672:	1c9a      	adds	r2, r3, #2
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b02      	subs	r3, #2
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006686:	e012      	b.n	80066ae <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	330c      	adds	r3, #12
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d148      	bne.n	8006752 <HAL_SPI_TransmitReceive+0x3b4>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d042      	beq.n	8006752 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d923      	bls.n	8006720 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e2:	b292      	uxth	r2, r2
 80066e4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ea:	1c9a      	adds	r2, r3, #2
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b02      	subs	r3, #2
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b01      	cmp	r3, #1
 800670c:	d81f      	bhi.n	800674e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800671c:	605a      	str	r2, [r3, #4]
 800671e:	e016      	b.n	800674e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f103 020c 	add.w	r2, r3, #12
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672c:	7812      	ldrb	r2, [r2, #0]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800674e:	2301      	movs	r3, #1
 8006750:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006752:	f7fc faef 	bl	8002d34 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800675e:	429a      	cmp	r2, r3
 8006760:	d803      	bhi.n	800676a <HAL_SPI_TransmitReceive+0x3cc>
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006768:	d102      	bne.n	8006770 <HAL_SPI_TransmitReceive+0x3d2>
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	2b00      	cmp	r3, #0
 800676e:	d107      	bne.n	8006780 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800677e:	e026      	b.n	80067ce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	f47f af57 	bne.w	800663a <HAL_SPI_TransmitReceive+0x29c>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	f47f af50 	bne.w	800663a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 faaa 	bl	8006cf8 <SPI_EndRxTxTransaction>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2220      	movs	r2, #32
 80067b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067c4:	e003      	b.n	80067ce <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80067d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3728      	adds	r7, #40	@ 0x28
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10e      	bne.n	8006824 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800680c:	2b00      	cmp	r3, #0
 800680e:	d009      	beq.n	8006824 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
    return;
 8006822:	e0ce      	b.n	80069c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_SPI_IRQHandler+0x5e>
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
    return;
 8006840:	e0bf      	b.n	80069c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	f003 0320 	and.w	r3, r3, #32
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <HAL_SPI_IRQHandler+0x7e>
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d105      	bne.n	8006862 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80b0 	beq.w	80069c2 <HAL_SPI_IRQHandler+0x1de>
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80aa 	beq.w	80069c2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d023      	beq.n	80068c0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b03      	cmp	r3, #3
 8006882:	d011      	beq.n	80068a8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006888:	f043 0204 	orr.w	r2, r3, #4
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	e00b      	b.n	80068c0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	693b      	ldr	r3, [r7, #16]
        return;
 80068be:	e080      	b.n	80069c2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d014      	beq.n	80068f4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ce:	f043 0201 	orr.w	r2, r3, #1
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006902:	f043 0208 	orr.w	r2, r3, #8
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	60bb      	str	r3, [r7, #8]
 8006916:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800691c:	2b00      	cmp	r3, #0
 800691e:	d04f      	beq.n	80069c0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800692e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <HAL_SPI_IRQHandler+0x168>
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d034      	beq.n	80069b6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0203 	bic.w	r2, r2, #3
 800695a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006960:	2b00      	cmp	r3, #0
 8006962:	d011      	beq.n	8006988 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006968:	4a17      	ldr	r2, [pc, #92]	@ (80069c8 <HAL_SPI_IRQHandler+0x1e4>)
 800696a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006970:	4618      	mov	r0, r3
 8006972:	f7fd ffbc 	bl	80048ee <HAL_DMA_Abort_IT>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006980:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698c:	2b00      	cmp	r3, #0
 800698e:	d016      	beq.n	80069be <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006994:	4a0c      	ldr	r2, [pc, #48]	@ (80069c8 <HAL_SPI_IRQHandler+0x1e4>)
 8006996:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699c:	4618      	mov	r0, r3
 800699e:	f7fd ffa6 	bl	80048ee <HAL_DMA_Abort_IT>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80069b4:	e003      	b.n	80069be <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f808 	bl	80069cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80069bc:	e000      	b.n	80069c0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80069be:	bf00      	nop
    return;
 80069c0:	bf00      	nop
  }
}
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	080069e1 	.word	0x080069e1

080069cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff ffe5 	bl	80069cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a1c:	f7fc f98a 	bl	8002d34 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	4413      	add	r3, r2
 8006a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a2c:	f7fc f982 	bl	8002d34 <HAL_GetTick>
 8006a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a32:	4b39      	ldr	r3, [pc, #228]	@ (8006b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	015b      	lsls	r3, r3, #5
 8006a38:	0d1b      	lsrs	r3, r3, #20
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	fb02 f303 	mul.w	r3, r2, r3
 8006a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a42:	e054      	b.n	8006aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a4a:	d050      	beq.n	8006aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a4c:	f7fc f972 	bl	8002d34 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d902      	bls.n	8006a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d13d      	bne.n	8006ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a7a:	d111      	bne.n	8006aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a84:	d004      	beq.n	8006a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8e:	d107      	bne.n	8006aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa8:	d10f      	bne.n	8006aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e017      	b.n	8006b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4013      	ands	r3, r2
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	bf0c      	ite	eq
 8006afe:	2301      	moveq	r3, #1
 8006b00:	2300      	movne	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d19b      	bne.n	8006a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3720      	adds	r7, #32
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20000000 	.word	0x20000000

08006b1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08a      	sub	sp, #40	@ 0x28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b2e:	f7fc f901 	bl	8002d34 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006b3e:	f7fc f8f9 	bl	8002d34 <HAL_GetTick>
 8006b42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	330c      	adds	r3, #12
 8006b4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8006c44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	00da      	lsls	r2, r3, #3
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	0d1b      	lsrs	r3, r3, #20
 8006b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b5e:	fb02 f303 	mul.w	r3, r2, r3
 8006b62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b64:	e060      	b.n	8006c28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006b6c:	d107      	bne.n	8006b7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b84:	d050      	beq.n	8006c28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b86:	f7fc f8d5 	bl	8002d34 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d902      	bls.n	8006b9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d13d      	bne.n	8006c18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006baa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bb4:	d111      	bne.n	8006bda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bbe:	d004      	beq.n	8006bca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bc8:	d107      	bne.n	8006bda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006be2:	d10f      	bne.n	8006c04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e010      	b.n	8006c3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	4013      	ands	r3, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d196      	bne.n	8006b66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3728      	adds	r7, #40	@ 0x28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000000 	.word	0x20000000

08006c48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c5c:	d111      	bne.n	8006c82 <SPI_EndRxTransaction+0x3a>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c66:	d004      	beq.n	8006c72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c70:	d107      	bne.n	8006c82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c80:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2180      	movs	r1, #128	@ 0x80
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f7ff febd 	bl	8006a0c <SPI_WaitFlagStateUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c9c:	f043 0220 	orr.w	r2, r3, #32
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e023      	b.n	8006cf0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cb0:	d11d      	bne.n	8006cee <SPI_EndRxTransaction+0xa6>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cba:	d004      	beq.n	8006cc6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc4:	d113      	bne.n	8006cee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f7ff ff22 	bl	8006b1c <SPI_WaitFifoStateUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ce2:	f043 0220 	orr.w	r2, r3, #32
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e000      	b.n	8006cf0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff ff03 	bl	8006b1c <SPI_WaitFifoStateUntilTimeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d20:	f043 0220 	orr.w	r2, r3, #32
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e027      	b.n	8006d7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	2180      	movs	r1, #128	@ 0x80
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff fe68 	bl	8006a0c <SPI_WaitFlagStateUntilTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d007      	beq.n	8006d52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d46:	f043 0220 	orr.w	r2, r3, #32
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e014      	b.n	8006d7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f7ff fedc 	bl	8006b1c <SPI_WaitFifoStateUntilTimeout>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d007      	beq.n	8006d7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d6e:	f043 0220 	orr.w	r2, r3, #32
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e000      	b.n	8006d7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e049      	b.n	8006e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fb f94e 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	f000 fec4 	bl	8007b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d001      	beq.n	8006e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e04a      	b.n	8006ee2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a21      	ldr	r2, [pc, #132]	@ (8006ef0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d018      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e76:	d013      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00e      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d009      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1a      	ldr	r2, [pc, #104]	@ (8006efc <HAL_TIM_Base_Start_IT+0xc8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a19      	ldr	r2, [pc, #100]	@ (8006f00 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d115      	bne.n	8006ecc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	4b17      	ldr	r3, [pc, #92]	@ (8006f04 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b06      	cmp	r3, #6
 8006eb0:	d015      	beq.n	8006ede <HAL_TIM_Base_Start_IT+0xaa>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eb8:	d011      	beq.n	8006ede <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0201 	orr.w	r2, r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eca:	e008      	b.n	8006ede <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	e000      	b.n	8006ee0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ede:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40012c00 	.word	0x40012c00
 8006ef4:	40000400 	.word	0x40000400
 8006ef8:	40000800 	.word	0x40000800
 8006efc:	40013400 	.word	0x40013400
 8006f00:	40014000 	.word	0x40014000
 8006f04:	00010007 	.word	0x00010007

08006f08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e049      	b.n	8006fae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f841 	bl	8006fb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f000 fe02 	bl	8007b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
	...

08006fcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d109      	bne.n	8006ff0 <HAL_TIM_PWM_Start+0x24>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	bf14      	ite	ne
 8006fe8:	2301      	movne	r3, #1
 8006fea:	2300      	moveq	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	e03c      	b.n	800706a <HAL_TIM_PWM_Start+0x9e>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d109      	bne.n	800700a <HAL_TIM_PWM_Start+0x3e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	bf14      	ite	ne
 8007002:	2301      	movne	r3, #1
 8007004:	2300      	moveq	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	e02f      	b.n	800706a <HAL_TIM_PWM_Start+0x9e>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d109      	bne.n	8007024 <HAL_TIM_PWM_Start+0x58>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b01      	cmp	r3, #1
 800701a:	bf14      	ite	ne
 800701c:	2301      	movne	r3, #1
 800701e:	2300      	moveq	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	e022      	b.n	800706a <HAL_TIM_PWM_Start+0x9e>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b0c      	cmp	r3, #12
 8007028:	d109      	bne.n	800703e <HAL_TIM_PWM_Start+0x72>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b01      	cmp	r3, #1
 8007034:	bf14      	ite	ne
 8007036:	2301      	movne	r3, #1
 8007038:	2300      	moveq	r3, #0
 800703a:	b2db      	uxtb	r3, r3
 800703c:	e015      	b.n	800706a <HAL_TIM_PWM_Start+0x9e>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b10      	cmp	r3, #16
 8007042:	d109      	bne.n	8007058 <HAL_TIM_PWM_Start+0x8c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b01      	cmp	r3, #1
 800704e:	bf14      	ite	ne
 8007050:	2301      	movne	r3, #1
 8007052:	2300      	moveq	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	e008      	b.n	800706a <HAL_TIM_PWM_Start+0x9e>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b01      	cmp	r3, #1
 8007062:	bf14      	ite	ne
 8007064:	2301      	movne	r3, #1
 8007066:	2300      	moveq	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e097      	b.n	80071a2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d104      	bne.n	8007082 <HAL_TIM_PWM_Start+0xb6>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007080:	e023      	b.n	80070ca <HAL_TIM_PWM_Start+0xfe>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b04      	cmp	r3, #4
 8007086:	d104      	bne.n	8007092 <HAL_TIM_PWM_Start+0xc6>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007090:	e01b      	b.n	80070ca <HAL_TIM_PWM_Start+0xfe>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b08      	cmp	r3, #8
 8007096:	d104      	bne.n	80070a2 <HAL_TIM_PWM_Start+0xd6>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070a0:	e013      	b.n	80070ca <HAL_TIM_PWM_Start+0xfe>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b0c      	cmp	r3, #12
 80070a6:	d104      	bne.n	80070b2 <HAL_TIM_PWM_Start+0xe6>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070b0:	e00b      	b.n	80070ca <HAL_TIM_PWM_Start+0xfe>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b10      	cmp	r3, #16
 80070b6:	d104      	bne.n	80070c2 <HAL_TIM_PWM_Start+0xf6>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070c0:	e003      	b.n	80070ca <HAL_TIM_PWM_Start+0xfe>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2202      	movs	r2, #2
 80070c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2201      	movs	r2, #1
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f001 f96a 	bl	80083ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a33      	ldr	r2, [pc, #204]	@ (80071ac <HAL_TIM_PWM_Start+0x1e0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <HAL_TIM_PWM_Start+0x13e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a32      	ldr	r2, [pc, #200]	@ (80071b0 <HAL_TIM_PWM_Start+0x1e4>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_TIM_PWM_Start+0x13e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a30      	ldr	r2, [pc, #192]	@ (80071b4 <HAL_TIM_PWM_Start+0x1e8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_TIM_PWM_Start+0x13e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a2f      	ldr	r2, [pc, #188]	@ (80071b8 <HAL_TIM_PWM_Start+0x1ec>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_TIM_PWM_Start+0x13e>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a2d      	ldr	r2, [pc, #180]	@ (80071bc <HAL_TIM_PWM_Start+0x1f0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d101      	bne.n	800710e <HAL_TIM_PWM_Start+0x142>
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <HAL_TIM_PWM_Start+0x144>
 800710e:	2300      	movs	r3, #0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007122:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a20      	ldr	r2, [pc, #128]	@ (80071ac <HAL_TIM_PWM_Start+0x1e0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <HAL_TIM_PWM_Start+0x194>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007136:	d013      	beq.n	8007160 <HAL_TIM_PWM_Start+0x194>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a20      	ldr	r2, [pc, #128]	@ (80071c0 <HAL_TIM_PWM_Start+0x1f4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <HAL_TIM_PWM_Start+0x194>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a1f      	ldr	r2, [pc, #124]	@ (80071c4 <HAL_TIM_PWM_Start+0x1f8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_TIM_PWM_Start+0x194>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a17      	ldr	r2, [pc, #92]	@ (80071b0 <HAL_TIM_PWM_Start+0x1e4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_TIM_PWM_Start+0x194>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a16      	ldr	r2, [pc, #88]	@ (80071b4 <HAL_TIM_PWM_Start+0x1e8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d115      	bne.n	800718c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	4b18      	ldr	r3, [pc, #96]	@ (80071c8 <HAL_TIM_PWM_Start+0x1fc>)
 8007168:	4013      	ands	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b06      	cmp	r3, #6
 8007170:	d015      	beq.n	800719e <HAL_TIM_PWM_Start+0x1d2>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007178:	d011      	beq.n	800719e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718a:	e008      	b.n	800719e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e000      	b.n	80071a0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800719e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40012c00 	.word	0x40012c00
 80071b0:	40013400 	.word	0x40013400
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40014400 	.word	0x40014400
 80071bc:	40014800 	.word	0x40014800
 80071c0:	40000400 	.word	0x40000400
 80071c4:	40000800 	.word	0x40000800
 80071c8:	00010007 	.word	0x00010007

080071cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2200      	movs	r2, #0
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 f8e4 	bl	80083ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a3e      	ldr	r2, [pc, #248]	@ (80072e4 <HAL_TIM_PWM_Stop+0x118>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d013      	beq.n	8007216 <HAL_TIM_PWM_Stop+0x4a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a3d      	ldr	r2, [pc, #244]	@ (80072e8 <HAL_TIM_PWM_Stop+0x11c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00e      	beq.n	8007216 <HAL_TIM_PWM_Stop+0x4a>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a3b      	ldr	r2, [pc, #236]	@ (80072ec <HAL_TIM_PWM_Stop+0x120>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d009      	beq.n	8007216 <HAL_TIM_PWM_Stop+0x4a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a3a      	ldr	r2, [pc, #232]	@ (80072f0 <HAL_TIM_PWM_Stop+0x124>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d004      	beq.n	8007216 <HAL_TIM_PWM_Stop+0x4a>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a38      	ldr	r2, [pc, #224]	@ (80072f4 <HAL_TIM_PWM_Stop+0x128>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d101      	bne.n	800721a <HAL_TIM_PWM_Stop+0x4e>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <HAL_TIM_PWM_Stop+0x50>
 800721a:	2300      	movs	r3, #0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d017      	beq.n	8007250 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6a1a      	ldr	r2, [r3, #32]
 8007226:	f241 1311 	movw	r3, #4369	@ 0x1111
 800722a:	4013      	ands	r3, r2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10f      	bne.n	8007250 <HAL_TIM_PWM_Stop+0x84>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6a1a      	ldr	r2, [r3, #32]
 8007236:	f244 4344 	movw	r3, #17476	@ 0x4444
 800723a:	4013      	ands	r3, r2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d107      	bne.n	8007250 <HAL_TIM_PWM_Stop+0x84>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800724e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6a1a      	ldr	r2, [r3, #32]
 8007256:	f241 1311 	movw	r3, #4369	@ 0x1111
 800725a:	4013      	ands	r3, r2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10f      	bne.n	8007280 <HAL_TIM_PWM_Stop+0xb4>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6a1a      	ldr	r2, [r3, #32]
 8007266:	f244 4344 	movw	r3, #17476	@ 0x4444
 800726a:	4013      	ands	r3, r2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d107      	bne.n	8007280 <HAL_TIM_PWM_Stop+0xb4>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0201 	bic.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <HAL_TIM_PWM_Stop+0xc4>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800728e:	e023      	b.n	80072d8 <HAL_TIM_PWM_Stop+0x10c>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2b04      	cmp	r3, #4
 8007294:	d104      	bne.n	80072a0 <HAL_TIM_PWM_Stop+0xd4>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800729e:	e01b      	b.n	80072d8 <HAL_TIM_PWM_Stop+0x10c>
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b08      	cmp	r3, #8
 80072a4:	d104      	bne.n	80072b0 <HAL_TIM_PWM_Stop+0xe4>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072ae:	e013      	b.n	80072d8 <HAL_TIM_PWM_Stop+0x10c>
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b0c      	cmp	r3, #12
 80072b4:	d104      	bne.n	80072c0 <HAL_TIM_PWM_Stop+0xf4>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072be:	e00b      	b.n	80072d8 <HAL_TIM_PWM_Stop+0x10c>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b10      	cmp	r3, #16
 80072c4:	d104      	bne.n	80072d0 <HAL_TIM_PWM_Stop+0x104>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072ce:	e003      	b.n	80072d8 <HAL_TIM_PWM_Stop+0x10c>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40012c00 	.word	0x40012c00
 80072e8:	40013400 	.word	0x40013400
 80072ec:	40014000 	.word	0x40014000
 80072f0:	40014400 	.word	0x40014400
 80072f4:	40014800 	.word	0x40014800

080072f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e097      	b.n	800743c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d106      	bne.n	8007326 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fa feb3 	bl	800208c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6812      	ldr	r2, [r2, #0]
 8007338:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800733c:	f023 0307 	bic.w	r3, r3, #7
 8007340:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3304      	adds	r3, #4
 800734a:	4619      	mov	r1, r3
 800734c:	4610      	mov	r0, r2
 800734e:	f000 fbff 	bl	8007b50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800737a:	f023 0303 	bic.w	r3, r3, #3
 800737e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	4313      	orrs	r3, r2
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4313      	orrs	r3, r2
 8007390:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007398:	f023 030c 	bic.w	r3, r3, #12
 800739c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	4313      	orrs	r3, r2
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	011a      	lsls	r2, r3, #4
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	031b      	lsls	r3, r3, #12
 80073c8:	4313      	orrs	r3, r2
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80073d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80073de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	4313      	orrs	r3, r2
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d020      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01b      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0202 	mvn.w	r2, #2
 8007478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fb40 	bl	8007b14 <HAL_TIM_IC_CaptureCallback>
 8007494:	e005      	b.n	80074a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fb32 	bl	8007b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fb43 	bl	8007b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d020      	beq.n	80074f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01b      	beq.n	80074f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0204 	mvn.w	r2, #4
 80074c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2202      	movs	r2, #2
 80074ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fb1a 	bl	8007b14 <HAL_TIM_IC_CaptureCallback>
 80074e0:	e005      	b.n	80074ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fb0c 	bl	8007b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fb1d 	bl	8007b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d020      	beq.n	8007540 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d01b      	beq.n	8007540 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0208 	mvn.w	r2, #8
 8007510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2204      	movs	r2, #4
 8007516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 faf4 	bl	8007b14 <HAL_TIM_IC_CaptureCallback>
 800752c:	e005      	b.n	800753a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fae6 	bl	8007b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 faf7 	bl	8007b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f003 0310 	and.w	r3, r3, #16
 8007546:	2b00      	cmp	r3, #0
 8007548:	d020      	beq.n	800758c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01b      	beq.n	800758c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0210 	mvn.w	r2, #16
 800755c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2208      	movs	r2, #8
 8007562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 face 	bl	8007b14 <HAL_TIM_IC_CaptureCallback>
 8007578:	e005      	b.n	8007586 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fac0 	bl	8007b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fad1 	bl	8007b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00c      	beq.n	80075b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0201 	mvn.w	r2, #1
 80075a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fa f987 	bl	80018be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d104      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00c      	beq.n	80075de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80075d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 f937 	bl	800884c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00c      	beq.n	8007602 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80075fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f92f 	bl	8008860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00c      	beq.n	8007626 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800761e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fa8b 	bl	8007b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00c      	beq.n	800764a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f06f 0220 	mvn.w	r2, #32
 8007642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 f8f7 	bl	8008838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00c      	beq.n	800766e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 f903 	bl	8008874 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00c      	beq.n	8007692 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800768a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f8fb 	bl	8008888 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00c      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80076ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f8f3 	bl	800889c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00c      	beq.n	80076da <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80076d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 f8eb 	bl	80088b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076fe:	2302      	movs	r3, #2
 8007700:	e0ff      	b.n	8007902 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b14      	cmp	r3, #20
 800770e:	f200 80f0 	bhi.w	80078f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007712:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	0800776d 	.word	0x0800776d
 800771c:	080078f3 	.word	0x080078f3
 8007720:	080078f3 	.word	0x080078f3
 8007724:	080078f3 	.word	0x080078f3
 8007728:	080077ad 	.word	0x080077ad
 800772c:	080078f3 	.word	0x080078f3
 8007730:	080078f3 	.word	0x080078f3
 8007734:	080078f3 	.word	0x080078f3
 8007738:	080077ef 	.word	0x080077ef
 800773c:	080078f3 	.word	0x080078f3
 8007740:	080078f3 	.word	0x080078f3
 8007744:	080078f3 	.word	0x080078f3
 8007748:	0800782f 	.word	0x0800782f
 800774c:	080078f3 	.word	0x080078f3
 8007750:	080078f3 	.word	0x080078f3
 8007754:	080078f3 	.word	0x080078f3
 8007758:	08007871 	.word	0x08007871
 800775c:	080078f3 	.word	0x080078f3
 8007760:	080078f3 	.word	0x080078f3
 8007764:	080078f3 	.word	0x080078f3
 8007768:	080078b1 	.word	0x080078b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68b9      	ldr	r1, [r7, #8]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 fa88 	bl	8007c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699a      	ldr	r2, [r3, #24]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0208 	orr.w	r2, r2, #8
 8007786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0204 	bic.w	r2, r2, #4
 8007796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6999      	ldr	r1, [r3, #24]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	691a      	ldr	r2, [r3, #16]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	619a      	str	r2, [r3, #24]
      break;
 80077aa:	e0a5      	b.n	80078f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68b9      	ldr	r1, [r7, #8]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 faf8 	bl	8007da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6999      	ldr	r1, [r3, #24]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	021a      	lsls	r2, r3, #8
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	619a      	str	r2, [r3, #24]
      break;
 80077ec:	e084      	b.n	80078f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68b9      	ldr	r1, [r7, #8]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fb61 	bl	8007ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0208 	orr.w	r2, r2, #8
 8007808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0204 	bic.w	r2, r2, #4
 8007818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69d9      	ldr	r1, [r3, #28]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	61da      	str	r2, [r3, #28]
      break;
 800782c:	e064      	b.n	80078f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fbc9 	bl	8007fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69da      	ldr	r2, [r3, #28]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69d9      	ldr	r1, [r3, #28]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	021a      	lsls	r2, r3, #8
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	61da      	str	r2, [r3, #28]
      break;
 800786e:	e043      	b.n	80078f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fc32 	bl	80080e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0208 	orr.w	r2, r2, #8
 800788a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0204 	bic.w	r2, r2, #4
 800789a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80078ae:	e023      	b.n	80078f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fc76 	bl	80081a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	021a      	lsls	r2, r3, #8
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80078f0:	e002      	b.n	80078f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	75fb      	strb	r3, [r7, #23]
      break;
 80078f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop

0800790c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007920:	2b01      	cmp	r3, #1
 8007922:	d101      	bne.n	8007928 <HAL_TIM_ConfigClockSource+0x1c>
 8007924:	2302      	movs	r3, #2
 8007926:	e0de      	b.n	8007ae6 <HAL_TIM_ConfigClockSource+0x1da>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007946:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800794a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a63      	ldr	r2, [pc, #396]	@ (8007af0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	f000 80a9 	beq.w	8007aba <HAL_TIM_ConfigClockSource+0x1ae>
 8007968:	4a61      	ldr	r2, [pc, #388]	@ (8007af0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	f200 80ae 	bhi.w	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 8007970:	4a60      	ldr	r2, [pc, #384]	@ (8007af4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	f000 80a1 	beq.w	8007aba <HAL_TIM_ConfigClockSource+0x1ae>
 8007978:	4a5e      	ldr	r2, [pc, #376]	@ (8007af4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	f200 80a6 	bhi.w	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 8007980:	4a5d      	ldr	r2, [pc, #372]	@ (8007af8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007982:	4293      	cmp	r3, r2
 8007984:	f000 8099 	beq.w	8007aba <HAL_TIM_ConfigClockSource+0x1ae>
 8007988:	4a5b      	ldr	r2, [pc, #364]	@ (8007af8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800798a:	4293      	cmp	r3, r2
 800798c:	f200 809e 	bhi.w	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 8007990:	4a5a      	ldr	r2, [pc, #360]	@ (8007afc <HAL_TIM_ConfigClockSource+0x1f0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	f000 8091 	beq.w	8007aba <HAL_TIM_ConfigClockSource+0x1ae>
 8007998:	4a58      	ldr	r2, [pc, #352]	@ (8007afc <HAL_TIM_ConfigClockSource+0x1f0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	f200 8096 	bhi.w	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 80079a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80079a4:	f000 8089 	beq.w	8007aba <HAL_TIM_ConfigClockSource+0x1ae>
 80079a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80079ac:	f200 808e 	bhi.w	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 80079b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b4:	d03e      	beq.n	8007a34 <HAL_TIM_ConfigClockSource+0x128>
 80079b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ba:	f200 8087 	bhi.w	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 80079be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c2:	f000 8086 	beq.w	8007ad2 <HAL_TIM_ConfigClockSource+0x1c6>
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ca:	d87f      	bhi.n	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 80079cc:	2b70      	cmp	r3, #112	@ 0x70
 80079ce:	d01a      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0xfa>
 80079d0:	2b70      	cmp	r3, #112	@ 0x70
 80079d2:	d87b      	bhi.n	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 80079d4:	2b60      	cmp	r3, #96	@ 0x60
 80079d6:	d050      	beq.n	8007a7a <HAL_TIM_ConfigClockSource+0x16e>
 80079d8:	2b60      	cmp	r3, #96	@ 0x60
 80079da:	d877      	bhi.n	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 80079dc:	2b50      	cmp	r3, #80	@ 0x50
 80079de:	d03c      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x14e>
 80079e0:	2b50      	cmp	r3, #80	@ 0x50
 80079e2:	d873      	bhi.n	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 80079e4:	2b40      	cmp	r3, #64	@ 0x40
 80079e6:	d058      	beq.n	8007a9a <HAL_TIM_ConfigClockSource+0x18e>
 80079e8:	2b40      	cmp	r3, #64	@ 0x40
 80079ea:	d86f      	bhi.n	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 80079ec:	2b30      	cmp	r3, #48	@ 0x30
 80079ee:	d064      	beq.n	8007aba <HAL_TIM_ConfigClockSource+0x1ae>
 80079f0:	2b30      	cmp	r3, #48	@ 0x30
 80079f2:	d86b      	bhi.n	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d060      	beq.n	8007aba <HAL_TIM_ConfigClockSource+0x1ae>
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d867      	bhi.n	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d05c      	beq.n	8007aba <HAL_TIM_ConfigClockSource+0x1ae>
 8007a00:	2b10      	cmp	r3, #16
 8007a02:	d05a      	beq.n	8007aba <HAL_TIM_ConfigClockSource+0x1ae>
 8007a04:	e062      	b.n	8007acc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a16:	f000 fca9 	bl	800836c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	609a      	str	r2, [r3, #8]
      break;
 8007a32:	e04f      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a44:	f000 fc92 	bl	800836c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689a      	ldr	r2, [r3, #8]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a56:	609a      	str	r2, [r3, #8]
      break;
 8007a58:	e03c      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a66:	461a      	mov	r2, r3
 8007a68:	f000 fc04 	bl	8008274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2150      	movs	r1, #80	@ 0x50
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fc5d 	bl	8008332 <TIM_ITRx_SetConfig>
      break;
 8007a78:	e02c      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a86:	461a      	mov	r2, r3
 8007a88:	f000 fc23 	bl	80082d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2160      	movs	r1, #96	@ 0x60
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 fc4d 	bl	8008332 <TIM_ITRx_SetConfig>
      break;
 8007a98:	e01c      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f000 fbe4 	bl	8008274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2140      	movs	r1, #64	@ 0x40
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 fc3d 	bl	8008332 <TIM_ITRx_SetConfig>
      break;
 8007ab8:	e00c      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	f000 fc34 	bl	8008332 <TIM_ITRx_SetConfig>
      break;
 8007aca:	e003      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad0:	e000      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	00100070 	.word	0x00100070
 8007af4:	00100040 	.word	0x00100040
 8007af8:	00100030 	.word	0x00100030
 8007afc:	00100020 	.word	0x00100020

08007b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a42      	ldr	r2, [pc, #264]	@ (8007c6c <TIM_Base_SetConfig+0x11c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00f      	beq.n	8007b88 <TIM_Base_SetConfig+0x38>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b6e:	d00b      	beq.n	8007b88 <TIM_Base_SetConfig+0x38>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a3f      	ldr	r2, [pc, #252]	@ (8007c70 <TIM_Base_SetConfig+0x120>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d007      	beq.n	8007b88 <TIM_Base_SetConfig+0x38>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8007c74 <TIM_Base_SetConfig+0x124>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d003      	beq.n	8007b88 <TIM_Base_SetConfig+0x38>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a3d      	ldr	r2, [pc, #244]	@ (8007c78 <TIM_Base_SetConfig+0x128>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d108      	bne.n	8007b9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a33      	ldr	r2, [pc, #204]	@ (8007c6c <TIM_Base_SetConfig+0x11c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d01b      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ba8:	d017      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a30      	ldr	r2, [pc, #192]	@ (8007c70 <TIM_Base_SetConfig+0x120>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8007c74 <TIM_Base_SetConfig+0x124>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00f      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8007c78 <TIM_Base_SetConfig+0x128>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00b      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8007c7c <TIM_Base_SetConfig+0x12c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d007      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8007c80 <TIM_Base_SetConfig+0x130>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d003      	beq.n	8007bda <TIM_Base_SetConfig+0x8a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8007c84 <TIM_Base_SetConfig+0x134>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d108      	bne.n	8007bec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a16      	ldr	r2, [pc, #88]	@ (8007c6c <TIM_Base_SetConfig+0x11c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00f      	beq.n	8007c38 <TIM_Base_SetConfig+0xe8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a17      	ldr	r2, [pc, #92]	@ (8007c78 <TIM_Base_SetConfig+0x128>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d00b      	beq.n	8007c38 <TIM_Base_SetConfig+0xe8>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a16      	ldr	r2, [pc, #88]	@ (8007c7c <TIM_Base_SetConfig+0x12c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d007      	beq.n	8007c38 <TIM_Base_SetConfig+0xe8>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a15      	ldr	r2, [pc, #84]	@ (8007c80 <TIM_Base_SetConfig+0x130>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d003      	beq.n	8007c38 <TIM_Base_SetConfig+0xe8>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a14      	ldr	r2, [pc, #80]	@ (8007c84 <TIM_Base_SetConfig+0x134>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d103      	bne.n	8007c40 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	691a      	ldr	r2, [r3, #16]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d105      	bne.n	8007c5e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	f023 0201 	bic.w	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	611a      	str	r2, [r3, #16]
  }
}
 8007c5e:	bf00      	nop
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40000400 	.word	0x40000400
 8007c74:	40000800 	.word	0x40000800
 8007c78:	40013400 	.word	0x40013400
 8007c7c:	40014000 	.word	0x40014000
 8007c80:	40014400 	.word	0x40014400
 8007c84:	40014800 	.word	0x40014800

08007c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	f023 0201 	bic.w	r2, r3, #1
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0303 	bic.w	r3, r3, #3
 8007cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f023 0302 	bic.w	r3, r3, #2
 8007cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8007d94 <TIM_OC1_SetConfig+0x10c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d00f      	beq.n	8007d08 <TIM_OC1_SetConfig+0x80>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a2b      	ldr	r2, [pc, #172]	@ (8007d98 <TIM_OC1_SetConfig+0x110>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00b      	beq.n	8007d08 <TIM_OC1_SetConfig+0x80>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8007d9c <TIM_OC1_SetConfig+0x114>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d007      	beq.n	8007d08 <TIM_OC1_SetConfig+0x80>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a29      	ldr	r2, [pc, #164]	@ (8007da0 <TIM_OC1_SetConfig+0x118>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <TIM_OC1_SetConfig+0x80>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a28      	ldr	r2, [pc, #160]	@ (8007da4 <TIM_OC1_SetConfig+0x11c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d10c      	bne.n	8007d22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f023 0308 	bic.w	r3, r3, #8
 8007d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f023 0304 	bic.w	r3, r3, #4
 8007d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a1b      	ldr	r2, [pc, #108]	@ (8007d94 <TIM_OC1_SetConfig+0x10c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00f      	beq.n	8007d4a <TIM_OC1_SetConfig+0xc2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8007d98 <TIM_OC1_SetConfig+0x110>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00b      	beq.n	8007d4a <TIM_OC1_SetConfig+0xc2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a19      	ldr	r2, [pc, #100]	@ (8007d9c <TIM_OC1_SetConfig+0x114>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d007      	beq.n	8007d4a <TIM_OC1_SetConfig+0xc2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a18      	ldr	r2, [pc, #96]	@ (8007da0 <TIM_OC1_SetConfig+0x118>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d003      	beq.n	8007d4a <TIM_OC1_SetConfig+0xc2>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a17      	ldr	r2, [pc, #92]	@ (8007da4 <TIM_OC1_SetConfig+0x11c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d111      	bne.n	8007d6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	621a      	str	r2, [r3, #32]
}
 8007d88:	bf00      	nop
 8007d8a:	371c      	adds	r7, #28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	40012c00 	.word	0x40012c00
 8007d98:	40013400 	.word	0x40013400
 8007d9c:	40014000 	.word	0x40014000
 8007da0:	40014400 	.word	0x40014400
 8007da4:	40014800 	.word	0x40014800

08007da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	f023 0210 	bic.w	r2, r3, #16
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	021b      	lsls	r3, r3, #8
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f023 0320 	bic.w	r3, r3, #32
 8007df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	011b      	lsls	r3, r3, #4
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a28      	ldr	r2, [pc, #160]	@ (8007ea8 <TIM_OC2_SetConfig+0x100>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d003      	beq.n	8007e14 <TIM_OC2_SetConfig+0x6c>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a27      	ldr	r2, [pc, #156]	@ (8007eac <TIM_OC2_SetConfig+0x104>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d10d      	bne.n	8007e30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	011b      	lsls	r3, r3, #4
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea8 <TIM_OC2_SetConfig+0x100>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d00f      	beq.n	8007e58 <TIM_OC2_SetConfig+0xb0>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8007eac <TIM_OC2_SetConfig+0x104>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00b      	beq.n	8007e58 <TIM_OC2_SetConfig+0xb0>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb0 <TIM_OC2_SetConfig+0x108>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d007      	beq.n	8007e58 <TIM_OC2_SetConfig+0xb0>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8007eb4 <TIM_OC2_SetConfig+0x10c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d003      	beq.n	8007e58 <TIM_OC2_SetConfig+0xb0>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a19      	ldr	r2, [pc, #100]	@ (8007eb8 <TIM_OC2_SetConfig+0x110>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d113      	bne.n	8007e80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	621a      	str	r2, [r3, #32]
}
 8007e9a:	bf00      	nop
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40012c00 	.word	0x40012c00
 8007eac:	40013400 	.word	0x40013400
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40014400 	.word	0x40014400
 8007eb8:	40014800 	.word	0x40014800

08007ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0303 	bic.w	r3, r3, #3
 8007ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a27      	ldr	r2, [pc, #156]	@ (8007fb8 <TIM_OC3_SetConfig+0xfc>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d003      	beq.n	8007f26 <TIM_OC3_SetConfig+0x6a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a26      	ldr	r2, [pc, #152]	@ (8007fbc <TIM_OC3_SetConfig+0x100>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d10d      	bne.n	8007f42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb8 <TIM_OC3_SetConfig+0xfc>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00f      	beq.n	8007f6a <TIM_OC3_SetConfig+0xae>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007fbc <TIM_OC3_SetConfig+0x100>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00b      	beq.n	8007f6a <TIM_OC3_SetConfig+0xae>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a1a      	ldr	r2, [pc, #104]	@ (8007fc0 <TIM_OC3_SetConfig+0x104>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d007      	beq.n	8007f6a <TIM_OC3_SetConfig+0xae>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a19      	ldr	r2, [pc, #100]	@ (8007fc4 <TIM_OC3_SetConfig+0x108>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d003      	beq.n	8007f6a <TIM_OC3_SetConfig+0xae>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a18      	ldr	r2, [pc, #96]	@ (8007fc8 <TIM_OC3_SetConfig+0x10c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d113      	bne.n	8007f92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	621a      	str	r2, [r3, #32]
}
 8007fac:	bf00      	nop
 8007fae:	371c      	adds	r7, #28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	40013400 	.word	0x40013400
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40014400 	.word	0x40014400
 8007fc8:	40014800 	.word	0x40014800

08007fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	021b      	lsls	r3, r3, #8
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800801a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	031b      	lsls	r3, r3, #12
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a28      	ldr	r2, [pc, #160]	@ (80080cc <TIM_OC4_SetConfig+0x100>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d003      	beq.n	8008038 <TIM_OC4_SetConfig+0x6c>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a27      	ldr	r2, [pc, #156]	@ (80080d0 <TIM_OC4_SetConfig+0x104>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d10d      	bne.n	8008054 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800803e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	031b      	lsls	r3, r3, #12
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008052:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a1d      	ldr	r2, [pc, #116]	@ (80080cc <TIM_OC4_SetConfig+0x100>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00f      	beq.n	800807c <TIM_OC4_SetConfig+0xb0>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a1c      	ldr	r2, [pc, #112]	@ (80080d0 <TIM_OC4_SetConfig+0x104>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00b      	beq.n	800807c <TIM_OC4_SetConfig+0xb0>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a1b      	ldr	r2, [pc, #108]	@ (80080d4 <TIM_OC4_SetConfig+0x108>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d007      	beq.n	800807c <TIM_OC4_SetConfig+0xb0>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a1a      	ldr	r2, [pc, #104]	@ (80080d8 <TIM_OC4_SetConfig+0x10c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d003      	beq.n	800807c <TIM_OC4_SetConfig+0xb0>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a19      	ldr	r2, [pc, #100]	@ (80080dc <TIM_OC4_SetConfig+0x110>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d113      	bne.n	80080a4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008082:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800808a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	019b      	lsls	r3, r3, #6
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4313      	orrs	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	019b      	lsls	r3, r3, #6
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	621a      	str	r2, [r3, #32]
}
 80080be:	bf00      	nop
 80080c0:	371c      	adds	r7, #28
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	40012c00 	.word	0x40012c00
 80080d0:	40013400 	.word	0x40013400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	40014400 	.word	0x40014400
 80080dc:	40014800 	.word	0x40014800

080080e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800810e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4313      	orrs	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008124:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	041b      	lsls	r3, r3, #16
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a17      	ldr	r2, [pc, #92]	@ (8008194 <TIM_OC5_SetConfig+0xb4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00f      	beq.n	800815a <TIM_OC5_SetConfig+0x7a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a16      	ldr	r2, [pc, #88]	@ (8008198 <TIM_OC5_SetConfig+0xb8>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00b      	beq.n	800815a <TIM_OC5_SetConfig+0x7a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a15      	ldr	r2, [pc, #84]	@ (800819c <TIM_OC5_SetConfig+0xbc>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d007      	beq.n	800815a <TIM_OC5_SetConfig+0x7a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a14      	ldr	r2, [pc, #80]	@ (80081a0 <TIM_OC5_SetConfig+0xc0>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d003      	beq.n	800815a <TIM_OC5_SetConfig+0x7a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a13      	ldr	r2, [pc, #76]	@ (80081a4 <TIM_OC5_SetConfig+0xc4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d109      	bne.n	800816e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008160:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	4313      	orrs	r3, r2
 800816c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	621a      	str	r2, [r3, #32]
}
 8008188:	bf00      	nop
 800818a:	371c      	adds	r7, #28
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	40012c00 	.word	0x40012c00
 8008198:	40013400 	.word	0x40013400
 800819c:	40014000 	.word	0x40014000
 80081a0:	40014400 	.word	0x40014400
 80081a4:	40014800 	.word	0x40014800

080081a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	051b      	lsls	r3, r3, #20
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a18      	ldr	r2, [pc, #96]	@ (8008260 <TIM_OC6_SetConfig+0xb8>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00f      	beq.n	8008224 <TIM_OC6_SetConfig+0x7c>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a17      	ldr	r2, [pc, #92]	@ (8008264 <TIM_OC6_SetConfig+0xbc>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00b      	beq.n	8008224 <TIM_OC6_SetConfig+0x7c>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a16      	ldr	r2, [pc, #88]	@ (8008268 <TIM_OC6_SetConfig+0xc0>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d007      	beq.n	8008224 <TIM_OC6_SetConfig+0x7c>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a15      	ldr	r2, [pc, #84]	@ (800826c <TIM_OC6_SetConfig+0xc4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d003      	beq.n	8008224 <TIM_OC6_SetConfig+0x7c>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a14      	ldr	r2, [pc, #80]	@ (8008270 <TIM_OC6_SetConfig+0xc8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d109      	bne.n	8008238 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800822a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	029b      	lsls	r3, r3, #10
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	621a      	str	r2, [r3, #32]
}
 8008252:	bf00      	nop
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	40012c00 	.word	0x40012c00
 8008264:	40013400 	.word	0x40013400
 8008268:	40014000 	.word	0x40014000
 800826c:	40014400 	.word	0x40014400
 8008270:	40014800 	.word	0x40014800

08008274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	f023 0201 	bic.w	r2, r3, #1
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800829e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f023 030a 	bic.w	r3, r3, #10
 80082b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	621a      	str	r2, [r3, #32]
}
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b087      	sub	sp, #28
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	f023 0210 	bic.w	r2, r3, #16
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	031b      	lsls	r3, r3, #12
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800830e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	621a      	str	r2, [r3, #32]
}
 8008326:	bf00      	nop
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800834c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4313      	orrs	r3, r2
 8008354:	f043 0307 	orr.w	r3, r3, #7
 8008358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	609a      	str	r2, [r3, #8]
}
 8008360:	bf00      	nop
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	021a      	lsls	r2, r3, #8
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	431a      	orrs	r2, r3
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	4313      	orrs	r3, r2
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	4313      	orrs	r3, r2
 8008398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	609a      	str	r2, [r3, #8]
}
 80083a0:	bf00      	nop
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f003 031f 	and.w	r3, r3, #31
 80083be:	2201      	movs	r2, #1
 80083c0:	fa02 f303 	lsl.w	r3, r2, r3
 80083c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6a1a      	ldr	r2, [r3, #32]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	43db      	mvns	r3, r3
 80083ce:	401a      	ands	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6a1a      	ldr	r2, [r3, #32]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 031f 	and.w	r3, r3, #31
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	fa01 f303 	lsl.w	r3, r1, r3
 80083e4:	431a      	orrs	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	621a      	str	r2, [r3, #32]
}
 80083ea:	bf00      	nop
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
	...

080083f8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d109      	bne.n	800841c <HAL_TIMEx_PWMN_Start+0x24>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	bf14      	ite	ne
 8008414:	2301      	movne	r3, #1
 8008416:	2300      	moveq	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	e022      	b.n	8008462 <HAL_TIMEx_PWMN_Start+0x6a>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b04      	cmp	r3, #4
 8008420:	d109      	bne.n	8008436 <HAL_TIMEx_PWMN_Start+0x3e>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b01      	cmp	r3, #1
 800842c:	bf14      	ite	ne
 800842e:	2301      	movne	r3, #1
 8008430:	2300      	moveq	r3, #0
 8008432:	b2db      	uxtb	r3, r3
 8008434:	e015      	b.n	8008462 <HAL_TIMEx_PWMN_Start+0x6a>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b08      	cmp	r3, #8
 800843a:	d109      	bne.n	8008450 <HAL_TIMEx_PWMN_Start+0x58>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b01      	cmp	r3, #1
 8008446:	bf14      	ite	ne
 8008448:	2301      	movne	r3, #1
 800844a:	2300      	moveq	r3, #0
 800844c:	b2db      	uxtb	r3, r3
 800844e:	e008      	b.n	8008462 <HAL_TIMEx_PWMN_Start+0x6a>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b01      	cmp	r3, #1
 800845a:	bf14      	ite	ne
 800845c:	2301      	movne	r3, #1
 800845e:	2300      	moveq	r3, #0
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e069      	b.n	800853e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <HAL_TIMEx_PWMN_Start+0x82>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008478:	e013      	b.n	80084a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b04      	cmp	r3, #4
 800847e:	d104      	bne.n	800848a <HAL_TIMEx_PWMN_Start+0x92>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008488:	e00b      	b.n	80084a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b08      	cmp	r3, #8
 800848e:	d104      	bne.n	800849a <HAL_TIMEx_PWMN_Start+0xa2>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008498:	e003      	b.n	80084a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2204      	movs	r2, #4
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fa0a 	bl	80088c4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a20      	ldr	r2, [pc, #128]	@ (8008548 <HAL_TIMEx_PWMN_Start+0x150>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d018      	beq.n	80084fc <HAL_TIMEx_PWMN_Start+0x104>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084d2:	d013      	beq.n	80084fc <HAL_TIMEx_PWMN_Start+0x104>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a1c      	ldr	r2, [pc, #112]	@ (800854c <HAL_TIMEx_PWMN_Start+0x154>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00e      	beq.n	80084fc <HAL_TIMEx_PWMN_Start+0x104>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008550 <HAL_TIMEx_PWMN_Start+0x158>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d009      	beq.n	80084fc <HAL_TIMEx_PWMN_Start+0x104>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a19      	ldr	r2, [pc, #100]	@ (8008554 <HAL_TIMEx_PWMN_Start+0x15c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d004      	beq.n	80084fc <HAL_TIMEx_PWMN_Start+0x104>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a18      	ldr	r2, [pc, #96]	@ (8008558 <HAL_TIMEx_PWMN_Start+0x160>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d115      	bne.n	8008528 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	4b16      	ldr	r3, [pc, #88]	@ (800855c <HAL_TIMEx_PWMN_Start+0x164>)
 8008504:	4013      	ands	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b06      	cmp	r3, #6
 800850c:	d015      	beq.n	800853a <HAL_TIMEx_PWMN_Start+0x142>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008514:	d011      	beq.n	800853a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f042 0201 	orr.w	r2, r2, #1
 8008524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008526:	e008      	b.n	800853a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f042 0201 	orr.w	r2, r2, #1
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	e000      	b.n	800853c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800853a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	40012c00 	.word	0x40012c00
 800854c:	40000400 	.word	0x40000400
 8008550:	40000800 	.word	0x40000800
 8008554:	40013400 	.word	0x40013400
 8008558:	40014000 	.word	0x40014000
 800855c:	00010007 	.word	0x00010007

08008560 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2200      	movs	r2, #0
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f9a6 	bl	80088c4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6a1a      	ldr	r2, [r3, #32]
 800857e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008582:	4013      	ands	r3, r2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10f      	bne.n	80085a8 <HAL_TIMEx_PWMN_Stop+0x48>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6a1a      	ldr	r2, [r3, #32]
 800858e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008592:	4013      	ands	r3, r2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d107      	bne.n	80085a8 <HAL_TIMEx_PWMN_Stop+0x48>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80085a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6a1a      	ldr	r2, [r3, #32]
 80085ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80085b2:	4013      	ands	r3, r2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10f      	bne.n	80085d8 <HAL_TIMEx_PWMN_Stop+0x78>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6a1a      	ldr	r2, [r3, #32]
 80085be:	f244 4344 	movw	r3, #17476	@ 0x4444
 80085c2:	4013      	ands	r3, r2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d107      	bne.n	80085d8 <HAL_TIMEx_PWMN_Stop+0x78>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0201 	bic.w	r2, r2, #1
 80085d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d104      	bne.n	80085e8 <HAL_TIMEx_PWMN_Stop+0x88>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085e6:	e013      	b.n	8008610 <HAL_TIMEx_PWMN_Stop+0xb0>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d104      	bne.n	80085f8 <HAL_TIMEx_PWMN_Stop+0x98>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085f6:	e00b      	b.n	8008610 <HAL_TIMEx_PWMN_Stop+0xb0>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	d104      	bne.n	8008608 <HAL_TIMEx_PWMN_Stop+0xa8>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008606:	e003      	b.n	8008610 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800862c:	2b01      	cmp	r3, #1
 800862e:	d101      	bne.n	8008634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008630:	2302      	movs	r3, #2
 8008632:	e065      	b.n	8008700 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a2c      	ldr	r2, [pc, #176]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d004      	beq.n	8008668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a2b      	ldr	r2, [pc, #172]	@ (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d108      	bne.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800866e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008684:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4313      	orrs	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a1b      	ldr	r2, [pc, #108]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d018      	beq.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086aa:	d013      	beq.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a18      	ldr	r2, [pc, #96]	@ (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d00e      	beq.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a17      	ldr	r2, [pc, #92]	@ (8008718 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d009      	beq.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a12      	ldr	r2, [pc, #72]	@ (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d004      	beq.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a13      	ldr	r2, [pc, #76]	@ (800871c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d10c      	bne.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	40012c00 	.word	0x40012c00
 8008710:	40013400 	.word	0x40013400
 8008714:	40000400 	.word	0x40000400
 8008718:	40000800 	.word	0x40000800
 800871c:	40014000 	.word	0x40014000

08008720 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008738:	2302      	movs	r3, #2
 800873a:	e073      	b.n	8008824 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	4313      	orrs	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4313      	orrs	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	041b      	lsls	r3, r3, #16
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a19      	ldr	r2, [pc, #100]	@ (8008830 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d004      	beq.n	80087d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a18      	ldr	r2, [pc, #96]	@ (8008834 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d11c      	bne.n	8008812 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e2:	051b      	lsls	r3, r3, #20
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	40012c00 	.word	0x40012c00
 8008834:	40013400 	.word	0x40013400

08008838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f003 030f 	and.w	r3, r3, #15
 80088d6:	2204      	movs	r2, #4
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a1a      	ldr	r2, [r3, #32]
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	43db      	mvns	r3, r3
 80088e6:	401a      	ands	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a1a      	ldr	r2, [r3, #32]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	fa01 f303 	lsl.w	r3, r1, r3
 80088fc:	431a      	orrs	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	621a      	str	r2, [r3, #32]
}
 8008902:	bf00      	nop
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e042      	b.n	80089a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7f9 fd0e 	bl	8002354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2224      	movs	r2, #36	@ 0x24
 800893c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0201 	bic.w	r2, r2, #1
 800894e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fee9 	bl	8009730 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fc1a 	bl	8009198 <UART_SetConfig>
 8008964:	4603      	mov	r3, r0
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e01b      	b.n	80089a6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800897c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800898c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f042 0201 	orr.w	r2, r2, #1
 800899c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 ff68 	bl	8009874 <UART_CheckIdleState>
 80089a4:	4603      	mov	r3, r0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b08a      	sub	sp, #40	@ 0x28
 80089b2:	af02      	add	r7, sp, #8
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	603b      	str	r3, [r7, #0]
 80089ba:	4613      	mov	r3, r2
 80089bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c4:	2b20      	cmp	r3, #32
 80089c6:	d17b      	bne.n	8008ac0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <HAL_UART_Transmit+0x26>
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e074      	b.n	8008ac2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2221      	movs	r2, #33	@ 0x21
 80089e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089e8:	f7fa f9a4 	bl	8002d34 <HAL_GetTick>
 80089ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	88fa      	ldrh	r2, [r7, #6]
 80089f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	88fa      	ldrh	r2, [r7, #6]
 80089fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a06:	d108      	bne.n	8008a1a <HAL_UART_Transmit+0x6c>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d104      	bne.n	8008a1a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	61bb      	str	r3, [r7, #24]
 8008a18:	e003      	b.n	8008a22 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a22:	e030      	b.n	8008a86 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2180      	movs	r1, #128	@ 0x80
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 ffca 	bl	80099c8 <UART_WaitOnFlagUntilTimeout>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e03d      	b.n	8008ac2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10b      	bne.n	8008a64 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	3302      	adds	r3, #2
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	e007      	b.n	8008a74 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	781a      	ldrb	r2, [r3, #0]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	3301      	adds	r3, #1
 8008a72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1c8      	bne.n	8008a24 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2140      	movs	r1, #64	@ 0x40
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 ff93 	bl	80099c8 <UART_WaitOnFlagUntilTimeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e006      	b.n	8008ac2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	e000      	b.n	8008ac2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ac0:	2302      	movs	r3, #2
  }
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3720      	adds	r7, #32
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b0ba      	sub	sp, #232	@ 0xe8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008af2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008af6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008afa:	4013      	ands	r3, r2
 8008afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d11b      	bne.n	8008b40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d015      	beq.n	8008b40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d105      	bne.n	8008b2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d009      	beq.n	8008b40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 8300 	beq.w	8009136 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	4798      	blx	r3
      }
      return;
 8008b3e:	e2fa      	b.n	8009136 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 8123 	beq.w	8008d90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008b4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8008d84 <HAL_UART_IRQHandler+0x2b8>)
 8008b50:	4013      	ands	r3, r2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008b56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8008d88 <HAL_UART_IRQHandler+0x2bc>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 8116 	beq.w	8008d90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d011      	beq.n	8008b94 <HAL_UART_IRQHandler+0xc8>
 8008b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2201      	movs	r2, #1
 8008b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b8a:	f043 0201 	orr.w	r2, r3, #1
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d011      	beq.n	8008bc4 <HAL_UART_IRQHandler+0xf8>
 8008ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bba:	f043 0204 	orr.w	r2, r3, #4
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d011      	beq.n	8008bf4 <HAL_UART_IRQHandler+0x128>
 8008bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00b      	beq.n	8008bf4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2204      	movs	r2, #4
 8008be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bea:	f043 0202 	orr.w	r2, r3, #2
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bf8:	f003 0308 	and.w	r3, r3, #8
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d017      	beq.n	8008c30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c04:	f003 0320 	and.w	r3, r3, #32
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d105      	bne.n	8008c18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008c0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c10:	4b5c      	ldr	r3, [pc, #368]	@ (8008d84 <HAL_UART_IRQHandler+0x2b8>)
 8008c12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00b      	beq.n	8008c30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2208      	movs	r2, #8
 8008c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c26:	f043 0208 	orr.w	r2, r3, #8
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d012      	beq.n	8008c62 <HAL_UART_IRQHandler+0x196>
 8008c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00c      	beq.n	8008c62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c58:	f043 0220 	orr.w	r2, r3, #32
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 8266 	beq.w	800913a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d013      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d105      	bne.n	8008c92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d007      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb6:	2b40      	cmp	r3, #64	@ 0x40
 8008cb8:	d005      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008cbe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d054      	beq.n	8008d70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 feeb 	bl	8009aa2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd6:	2b40      	cmp	r3, #64	@ 0x40
 8008cd8:	d146      	bne.n	8008d68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3308      	adds	r3, #8
 8008d02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d16:	e841 2300 	strex	r3, r2, [r1]
 8008d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1d9      	bne.n	8008cda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d017      	beq.n	8008d60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d36:	4a15      	ldr	r2, [pc, #84]	@ (8008d8c <HAL_UART_IRQHandler+0x2c0>)
 8008d38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fb fdd4 	bl	80048ee <HAL_DMA_Abort_IT>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d019      	beq.n	8008d80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d5e:	e00f      	b.n	8008d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7f8 fbd9 	bl	8001518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d66:	e00b      	b.n	8008d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7f8 fbd5 	bl	8001518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d6e:	e007      	b.n	8008d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7f8 fbd1 	bl	8001518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008d7e:	e1dc      	b.n	800913a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d80:	bf00      	nop
    return;
 8008d82:	e1da      	b.n	800913a <HAL_UART_IRQHandler+0x66e>
 8008d84:	10000001 	.word	0x10000001
 8008d88:	04000120 	.word	0x04000120
 8008d8c:	08009b6f 	.word	0x08009b6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	f040 8170 	bne.w	800907a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d9e:	f003 0310 	and.w	r3, r3, #16
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 8169 	beq.w	800907a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 8162 	beq.w	800907a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2210      	movs	r2, #16
 8008dbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc8:	2b40      	cmp	r3, #64	@ 0x40
 8008dca:	f040 80d8 	bne.w	8008f7e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ddc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 80af 	beq.w	8008f44 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008df0:	429a      	cmp	r2, r3
 8008df2:	f080 80a7 	bcs.w	8008f44 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f040 8087 	bne.w	8008f22 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e4e:	e841 2300 	strex	r3, r2, [r1]
 8008e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1da      	bne.n	8008e14 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3308      	adds	r3, #8
 8008e64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e68:	e853 3f00 	ldrex	r3, [r3]
 8008e6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e70:	f023 0301 	bic.w	r3, r3, #1
 8008e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3308      	adds	r3, #8
 8008e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e1      	bne.n	8008e5e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3308      	adds	r3, #8
 8008ea0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	3308      	adds	r3, #8
 8008eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ebe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ec4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e3      	bne.n	8008e9a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ee8:	e853 3f00 	ldrex	r3, [r3]
 8008eec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ef0:	f023 0310 	bic.w	r3, r3, #16
 8008ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	461a      	mov	r2, r3
 8008efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e4      	bne.n	8008ee0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fb fc8d 	bl	800483c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f911 	bl	8009164 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008f42:	e0fc      	b.n	800913e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	f040 80f5 	bne.w	800913e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	f040 80eb 	bne.w	800913e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f8f4 	bl	8009164 <HAL_UARTEx_RxEventCallback>
      return;
 8008f7c:	e0df      	b.n	800913e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80d1 	beq.w	8009142 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 80cc 	beq.w	8009142 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fd4:	e841 2300 	strex	r3, r2, [r1]
 8008fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e4      	bne.n	8008faa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fea:	e853 3f00 	ldrex	r3, [r3]
 8008fee:	623b      	str	r3, [r7, #32]
   return(result);
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ff6:	f023 0301 	bic.w	r3, r3, #1
 8008ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009008:	633a      	str	r2, [r7, #48]	@ 0x30
 800900a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800900e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e1      	bne.n	8008fe0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2220      	movs	r2, #32
 8009020:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	60fb      	str	r3, [r7, #12]
   return(result);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f023 0310 	bic.w	r3, r3, #16
 8009044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009052:	61fb      	str	r3, [r7, #28]
 8009054:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	69b9      	ldr	r1, [r7, #24]
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	617b      	str	r3, [r7, #20]
   return(result);
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e4      	bne.n	8009030 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2202      	movs	r2, #2
 800906a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800906c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f876 	bl	8009164 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009078:	e063      	b.n	8009142 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800907a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800907e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00e      	beq.n	80090a4 <HAL_UART_IRQHandler+0x5d8>
 8009086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800908a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d008      	beq.n	80090a4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800909a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fda7 	bl	8009bf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090a2:	e051      	b.n	8009148 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80090a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d014      	beq.n	80090da <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80090b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d105      	bne.n	80090c8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80090bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d008      	beq.n	80090da <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d03a      	beq.n	8009146 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	4798      	blx	r3
    }
    return;
 80090d8:	e035      	b.n	8009146 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d009      	beq.n	80090fa <HAL_UART_IRQHandler+0x62e>
 80090e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fd51 	bl	8009b9a <UART_EndTransmit_IT>
    return;
 80090f8:	e026      	b.n	8009148 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80090fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <HAL_UART_IRQHandler+0x64e>
 8009106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800910a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fd80 	bl	8009c18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009118:	e016      	b.n	8009148 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800911a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800911e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d010      	beq.n	8009148 <HAL_UART_IRQHandler+0x67c>
 8009126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800912a:	2b00      	cmp	r3, #0
 800912c:	da0c      	bge.n	8009148 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fd68 	bl	8009c04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009134:	e008      	b.n	8009148 <HAL_UART_IRQHandler+0x67c>
      return;
 8009136:	bf00      	nop
 8009138:	e006      	b.n	8009148 <HAL_UART_IRQHandler+0x67c>
    return;
 800913a:	bf00      	nop
 800913c:	e004      	b.n	8009148 <HAL_UART_IRQHandler+0x67c>
      return;
 800913e:	bf00      	nop
 8009140:	e002      	b.n	8009148 <HAL_UART_IRQHandler+0x67c>
      return;
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <HAL_UART_IRQHandler+0x67c>
    return;
 8009146:	bf00      	nop
  }
}
 8009148:	37e8      	adds	r7, #232	@ 0xe8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop

08009150 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
	...

08009198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800919c:	b08c      	sub	sp, #48	@ 0x30
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	431a      	orrs	r2, r3
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	69db      	ldr	r3, [r3, #28]
 80091bc:	4313      	orrs	r3, r2
 80091be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	4bab      	ldr	r3, [pc, #684]	@ (8009474 <UART_SetConfig+0x2dc>)
 80091c8:	4013      	ands	r3, r2
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	6812      	ldr	r2, [r2, #0]
 80091ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091d0:	430b      	orrs	r3, r1
 80091d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4aa0      	ldr	r2, [pc, #640]	@ (8009478 <UART_SetConfig+0x2e0>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009200:	4313      	orrs	r3, r2
 8009202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800920e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	6812      	ldr	r2, [r2, #0]
 8009216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009218:	430b      	orrs	r3, r1
 800921a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009222:	f023 010f 	bic.w	r1, r3, #15
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a91      	ldr	r2, [pc, #580]	@ (800947c <UART_SetConfig+0x2e4>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d125      	bne.n	8009288 <UART_SetConfig+0xf0>
 800923c:	4b90      	ldr	r3, [pc, #576]	@ (8009480 <UART_SetConfig+0x2e8>)
 800923e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009242:	f003 0303 	and.w	r3, r3, #3
 8009246:	2b03      	cmp	r3, #3
 8009248:	d81a      	bhi.n	8009280 <UART_SetConfig+0xe8>
 800924a:	a201      	add	r2, pc, #4	@ (adr r2, 8009250 <UART_SetConfig+0xb8>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	08009261 	.word	0x08009261
 8009254:	08009271 	.word	0x08009271
 8009258:	08009269 	.word	0x08009269
 800925c:	08009279 	.word	0x08009279
 8009260:	2301      	movs	r3, #1
 8009262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009266:	e0d6      	b.n	8009416 <UART_SetConfig+0x27e>
 8009268:	2302      	movs	r3, #2
 800926a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800926e:	e0d2      	b.n	8009416 <UART_SetConfig+0x27e>
 8009270:	2304      	movs	r3, #4
 8009272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009276:	e0ce      	b.n	8009416 <UART_SetConfig+0x27e>
 8009278:	2308      	movs	r3, #8
 800927a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800927e:	e0ca      	b.n	8009416 <UART_SetConfig+0x27e>
 8009280:	2310      	movs	r3, #16
 8009282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009286:	e0c6      	b.n	8009416 <UART_SetConfig+0x27e>
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a7d      	ldr	r2, [pc, #500]	@ (8009484 <UART_SetConfig+0x2ec>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d138      	bne.n	8009304 <UART_SetConfig+0x16c>
 8009292:	4b7b      	ldr	r3, [pc, #492]	@ (8009480 <UART_SetConfig+0x2e8>)
 8009294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009298:	f003 030c 	and.w	r3, r3, #12
 800929c:	2b0c      	cmp	r3, #12
 800929e:	d82d      	bhi.n	80092fc <UART_SetConfig+0x164>
 80092a0:	a201      	add	r2, pc, #4	@ (adr r2, 80092a8 <UART_SetConfig+0x110>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080092dd 	.word	0x080092dd
 80092ac:	080092fd 	.word	0x080092fd
 80092b0:	080092fd 	.word	0x080092fd
 80092b4:	080092fd 	.word	0x080092fd
 80092b8:	080092ed 	.word	0x080092ed
 80092bc:	080092fd 	.word	0x080092fd
 80092c0:	080092fd 	.word	0x080092fd
 80092c4:	080092fd 	.word	0x080092fd
 80092c8:	080092e5 	.word	0x080092e5
 80092cc:	080092fd 	.word	0x080092fd
 80092d0:	080092fd 	.word	0x080092fd
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	080092f5 	.word	0x080092f5
 80092dc:	2300      	movs	r3, #0
 80092de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092e2:	e098      	b.n	8009416 <UART_SetConfig+0x27e>
 80092e4:	2302      	movs	r3, #2
 80092e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ea:	e094      	b.n	8009416 <UART_SetConfig+0x27e>
 80092ec:	2304      	movs	r3, #4
 80092ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092f2:	e090      	b.n	8009416 <UART_SetConfig+0x27e>
 80092f4:	2308      	movs	r3, #8
 80092f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092fa:	e08c      	b.n	8009416 <UART_SetConfig+0x27e>
 80092fc:	2310      	movs	r3, #16
 80092fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009302:	e088      	b.n	8009416 <UART_SetConfig+0x27e>
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a5f      	ldr	r2, [pc, #380]	@ (8009488 <UART_SetConfig+0x2f0>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d125      	bne.n	800935a <UART_SetConfig+0x1c2>
 800930e:	4b5c      	ldr	r3, [pc, #368]	@ (8009480 <UART_SetConfig+0x2e8>)
 8009310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009314:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009318:	2b30      	cmp	r3, #48	@ 0x30
 800931a:	d016      	beq.n	800934a <UART_SetConfig+0x1b2>
 800931c:	2b30      	cmp	r3, #48	@ 0x30
 800931e:	d818      	bhi.n	8009352 <UART_SetConfig+0x1ba>
 8009320:	2b20      	cmp	r3, #32
 8009322:	d00a      	beq.n	800933a <UART_SetConfig+0x1a2>
 8009324:	2b20      	cmp	r3, #32
 8009326:	d814      	bhi.n	8009352 <UART_SetConfig+0x1ba>
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <UART_SetConfig+0x19a>
 800932c:	2b10      	cmp	r3, #16
 800932e:	d008      	beq.n	8009342 <UART_SetConfig+0x1aa>
 8009330:	e00f      	b.n	8009352 <UART_SetConfig+0x1ba>
 8009332:	2300      	movs	r3, #0
 8009334:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009338:	e06d      	b.n	8009416 <UART_SetConfig+0x27e>
 800933a:	2302      	movs	r3, #2
 800933c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009340:	e069      	b.n	8009416 <UART_SetConfig+0x27e>
 8009342:	2304      	movs	r3, #4
 8009344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009348:	e065      	b.n	8009416 <UART_SetConfig+0x27e>
 800934a:	2308      	movs	r3, #8
 800934c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009350:	e061      	b.n	8009416 <UART_SetConfig+0x27e>
 8009352:	2310      	movs	r3, #16
 8009354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009358:	e05d      	b.n	8009416 <UART_SetConfig+0x27e>
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a4b      	ldr	r2, [pc, #300]	@ (800948c <UART_SetConfig+0x2f4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d125      	bne.n	80093b0 <UART_SetConfig+0x218>
 8009364:	4b46      	ldr	r3, [pc, #280]	@ (8009480 <UART_SetConfig+0x2e8>)
 8009366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800936a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800936e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009370:	d016      	beq.n	80093a0 <UART_SetConfig+0x208>
 8009372:	2bc0      	cmp	r3, #192	@ 0xc0
 8009374:	d818      	bhi.n	80093a8 <UART_SetConfig+0x210>
 8009376:	2b80      	cmp	r3, #128	@ 0x80
 8009378:	d00a      	beq.n	8009390 <UART_SetConfig+0x1f8>
 800937a:	2b80      	cmp	r3, #128	@ 0x80
 800937c:	d814      	bhi.n	80093a8 <UART_SetConfig+0x210>
 800937e:	2b00      	cmp	r3, #0
 8009380:	d002      	beq.n	8009388 <UART_SetConfig+0x1f0>
 8009382:	2b40      	cmp	r3, #64	@ 0x40
 8009384:	d008      	beq.n	8009398 <UART_SetConfig+0x200>
 8009386:	e00f      	b.n	80093a8 <UART_SetConfig+0x210>
 8009388:	2300      	movs	r3, #0
 800938a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800938e:	e042      	b.n	8009416 <UART_SetConfig+0x27e>
 8009390:	2302      	movs	r3, #2
 8009392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009396:	e03e      	b.n	8009416 <UART_SetConfig+0x27e>
 8009398:	2304      	movs	r3, #4
 800939a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800939e:	e03a      	b.n	8009416 <UART_SetConfig+0x27e>
 80093a0:	2308      	movs	r3, #8
 80093a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093a6:	e036      	b.n	8009416 <UART_SetConfig+0x27e>
 80093a8:	2310      	movs	r3, #16
 80093aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ae:	e032      	b.n	8009416 <UART_SetConfig+0x27e>
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a30      	ldr	r2, [pc, #192]	@ (8009478 <UART_SetConfig+0x2e0>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d12a      	bne.n	8009410 <UART_SetConfig+0x278>
 80093ba:	4b31      	ldr	r3, [pc, #196]	@ (8009480 <UART_SetConfig+0x2e8>)
 80093bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80093c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093c8:	d01a      	beq.n	8009400 <UART_SetConfig+0x268>
 80093ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093ce:	d81b      	bhi.n	8009408 <UART_SetConfig+0x270>
 80093d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093d4:	d00c      	beq.n	80093f0 <UART_SetConfig+0x258>
 80093d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093da:	d815      	bhi.n	8009408 <UART_SetConfig+0x270>
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <UART_SetConfig+0x250>
 80093e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093e4:	d008      	beq.n	80093f8 <UART_SetConfig+0x260>
 80093e6:	e00f      	b.n	8009408 <UART_SetConfig+0x270>
 80093e8:	2300      	movs	r3, #0
 80093ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ee:	e012      	b.n	8009416 <UART_SetConfig+0x27e>
 80093f0:	2302      	movs	r3, #2
 80093f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093f6:	e00e      	b.n	8009416 <UART_SetConfig+0x27e>
 80093f8:	2304      	movs	r3, #4
 80093fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093fe:	e00a      	b.n	8009416 <UART_SetConfig+0x27e>
 8009400:	2308      	movs	r3, #8
 8009402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009406:	e006      	b.n	8009416 <UART_SetConfig+0x27e>
 8009408:	2310      	movs	r3, #16
 800940a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800940e:	e002      	b.n	8009416 <UART_SetConfig+0x27e>
 8009410:	2310      	movs	r3, #16
 8009412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a17      	ldr	r2, [pc, #92]	@ (8009478 <UART_SetConfig+0x2e0>)
 800941c:	4293      	cmp	r3, r2
 800941e:	f040 80a8 	bne.w	8009572 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009422:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009426:	2b08      	cmp	r3, #8
 8009428:	d834      	bhi.n	8009494 <UART_SetConfig+0x2fc>
 800942a:	a201      	add	r2, pc, #4	@ (adr r2, 8009430 <UART_SetConfig+0x298>)
 800942c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009430:	08009455 	.word	0x08009455
 8009434:	08009495 	.word	0x08009495
 8009438:	0800945d 	.word	0x0800945d
 800943c:	08009495 	.word	0x08009495
 8009440:	08009463 	.word	0x08009463
 8009444:	08009495 	.word	0x08009495
 8009448:	08009495 	.word	0x08009495
 800944c:	08009495 	.word	0x08009495
 8009450:	0800946b 	.word	0x0800946b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009454:	f7fc f9ba 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8009458:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800945a:	e021      	b.n	80094a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800945c:	4b0c      	ldr	r3, [pc, #48]	@ (8009490 <UART_SetConfig+0x2f8>)
 800945e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009460:	e01e      	b.n	80094a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009462:	f7fc f947 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 8009466:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009468:	e01a      	b.n	80094a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800946a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800946e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009470:	e016      	b.n	80094a0 <UART_SetConfig+0x308>
 8009472:	bf00      	nop
 8009474:	cfff69f3 	.word	0xcfff69f3
 8009478:	40008000 	.word	0x40008000
 800947c:	40013800 	.word	0x40013800
 8009480:	40021000 	.word	0x40021000
 8009484:	40004400 	.word	0x40004400
 8009488:	40004800 	.word	0x40004800
 800948c:	40004c00 	.word	0x40004c00
 8009490:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800949e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 812a 	beq.w	80096fc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ac:	4a9e      	ldr	r2, [pc, #632]	@ (8009728 <UART_SetConfig+0x590>)
 80094ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094b2:	461a      	mov	r2, r3
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	4613      	mov	r3, r2
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	4413      	add	r3, r2
 80094c6:	69ba      	ldr	r2, [r7, #24]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d305      	bcc.n	80094d8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d903      	bls.n	80094e0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80094de:	e10d      	b.n	80096fc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e2:	2200      	movs	r2, #0
 80094e4:	60bb      	str	r3, [r7, #8]
 80094e6:	60fa      	str	r2, [r7, #12]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ec:	4a8e      	ldr	r2, [pc, #568]	@ (8009728 <UART_SetConfig+0x590>)
 80094ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2200      	movs	r2, #0
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	607a      	str	r2, [r7, #4]
 80094fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009502:	f7f7 fbe9 	bl	8000cd8 <__aeabi_uldivmod>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4610      	mov	r0, r2
 800950c:	4619      	mov	r1, r3
 800950e:	f04f 0200 	mov.w	r2, #0
 8009512:	f04f 0300 	mov.w	r3, #0
 8009516:	020b      	lsls	r3, r1, #8
 8009518:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800951c:	0202      	lsls	r2, r0, #8
 800951e:	6979      	ldr	r1, [r7, #20]
 8009520:	6849      	ldr	r1, [r1, #4]
 8009522:	0849      	lsrs	r1, r1, #1
 8009524:	2000      	movs	r0, #0
 8009526:	460c      	mov	r4, r1
 8009528:	4605      	mov	r5, r0
 800952a:	eb12 0804 	adds.w	r8, r2, r4
 800952e:	eb43 0905 	adc.w	r9, r3, r5
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	469a      	mov	sl, r3
 800953a:	4693      	mov	fp, r2
 800953c:	4652      	mov	r2, sl
 800953e:	465b      	mov	r3, fp
 8009540:	4640      	mov	r0, r8
 8009542:	4649      	mov	r1, r9
 8009544:	f7f7 fbc8 	bl	8000cd8 <__aeabi_uldivmod>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4613      	mov	r3, r2
 800954e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009556:	d308      	bcc.n	800956a <UART_SetConfig+0x3d2>
 8009558:	6a3b      	ldr	r3, [r7, #32]
 800955a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800955e:	d204      	bcs.n	800956a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6a3a      	ldr	r2, [r7, #32]
 8009566:	60da      	str	r2, [r3, #12]
 8009568:	e0c8      	b.n	80096fc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009570:	e0c4      	b.n	80096fc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800957a:	d167      	bne.n	800964c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800957c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009580:	2b08      	cmp	r3, #8
 8009582:	d828      	bhi.n	80095d6 <UART_SetConfig+0x43e>
 8009584:	a201      	add	r2, pc, #4	@ (adr r2, 800958c <UART_SetConfig+0x3f4>)
 8009586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958a:	bf00      	nop
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095b9 	.word	0x080095b9
 8009594:	080095c1 	.word	0x080095c1
 8009598:	080095d7 	.word	0x080095d7
 800959c:	080095c7 	.word	0x080095c7
 80095a0:	080095d7 	.word	0x080095d7
 80095a4:	080095d7 	.word	0x080095d7
 80095a8:	080095d7 	.word	0x080095d7
 80095ac:	080095cf 	.word	0x080095cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095b0:	f7fc f90c 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 80095b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095b6:	e014      	b.n	80095e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095b8:	f7fc f91e 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 80095bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095be:	e010      	b.n	80095e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095c0:	4b5a      	ldr	r3, [pc, #360]	@ (800972c <UART_SetConfig+0x594>)
 80095c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095c4:	e00d      	b.n	80095e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095c6:	f7fc f895 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 80095ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095cc:	e009      	b.n	80095e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095d4:	e005      	b.n	80095e2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80095e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 8089 	beq.w	80096fc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ee:	4a4e      	ldr	r2, [pc, #312]	@ (8009728 <UART_SetConfig+0x590>)
 80095f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095f4:	461a      	mov	r2, r3
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80095fc:	005a      	lsls	r2, r3, #1
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	085b      	lsrs	r3, r3, #1
 8009604:	441a      	add	r2, r3
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	fbb2 f3f3 	udiv	r3, r2, r3
 800960e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	2b0f      	cmp	r3, #15
 8009614:	d916      	bls.n	8009644 <UART_SetConfig+0x4ac>
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800961c:	d212      	bcs.n	8009644 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	b29b      	uxth	r3, r3
 8009622:	f023 030f 	bic.w	r3, r3, #15
 8009626:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	085b      	lsrs	r3, r3, #1
 800962c:	b29b      	uxth	r3, r3
 800962e:	f003 0307 	and.w	r3, r3, #7
 8009632:	b29a      	uxth	r2, r3
 8009634:	8bfb      	ldrh	r3, [r7, #30]
 8009636:	4313      	orrs	r3, r2
 8009638:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	8bfa      	ldrh	r2, [r7, #30]
 8009640:	60da      	str	r2, [r3, #12]
 8009642:	e05b      	b.n	80096fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800964a:	e057      	b.n	80096fc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800964c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009650:	2b08      	cmp	r3, #8
 8009652:	d828      	bhi.n	80096a6 <UART_SetConfig+0x50e>
 8009654:	a201      	add	r2, pc, #4	@ (adr r2, 800965c <UART_SetConfig+0x4c4>)
 8009656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965a:	bf00      	nop
 800965c:	08009681 	.word	0x08009681
 8009660:	08009689 	.word	0x08009689
 8009664:	08009691 	.word	0x08009691
 8009668:	080096a7 	.word	0x080096a7
 800966c:	08009697 	.word	0x08009697
 8009670:	080096a7 	.word	0x080096a7
 8009674:	080096a7 	.word	0x080096a7
 8009678:	080096a7 	.word	0x080096a7
 800967c:	0800969f 	.word	0x0800969f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009680:	f7fc f8a4 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8009684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009686:	e014      	b.n	80096b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009688:	f7fc f8b6 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 800968c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800968e:	e010      	b.n	80096b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009690:	4b26      	ldr	r3, [pc, #152]	@ (800972c <UART_SetConfig+0x594>)
 8009692:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009694:	e00d      	b.n	80096b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009696:	f7fc f82d 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 800969a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800969c:	e009      	b.n	80096b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800969e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096a4:	e005      	b.n	80096b2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80096a6:	2300      	movs	r3, #0
 80096a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80096b0:	bf00      	nop
    }

    if (pclk != 0U)
 80096b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d021      	beq.n	80096fc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009728 <UART_SetConfig+0x590>)
 80096be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096c2:	461a      	mov	r2, r3
 80096c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	085b      	lsrs	r3, r3, #1
 80096d0:	441a      	add	r2, r3
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096dc:	6a3b      	ldr	r3, [r7, #32]
 80096de:	2b0f      	cmp	r3, #15
 80096e0:	d909      	bls.n	80096f6 <UART_SetConfig+0x55e>
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096e8:	d205      	bcs.n	80096f6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60da      	str	r2, [r3, #12]
 80096f4:	e002      	b.n	80096fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2201      	movs	r2, #1
 8009700:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	2201      	movs	r2, #1
 8009708:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2200      	movs	r2, #0
 8009710:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2200      	movs	r2, #0
 8009716:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009718:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800971c:	4618      	mov	r0, r3
 800971e:	3730      	adds	r7, #48	@ 0x30
 8009720:	46bd      	mov	sp, r7
 8009722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009726:	bf00      	nop
 8009728:	0800fdc8 	.word	0x0800fdc8
 800972c:	00f42400 	.word	0x00f42400

08009730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973c:	f003 0308 	and.w	r3, r3, #8
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00a      	beq.n	800975a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	430a      	orrs	r2, r1
 8009758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00a      	beq.n	800977c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	430a      	orrs	r2, r1
 800977a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009780:	f003 0302 	and.w	r3, r3, #2
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00a      	beq.n	800979e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	430a      	orrs	r2, r1
 800979c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a2:	f003 0304 	and.w	r3, r3, #4
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	430a      	orrs	r2, r1
 80097be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00a      	beq.n	80097e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	430a      	orrs	r2, r1
 8009802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	d01a      	beq.n	8009846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	430a      	orrs	r2, r1
 8009824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800982a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800982e:	d10a      	bne.n	8009846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	430a      	orrs	r2, r1
 8009844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00a      	beq.n	8009868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	430a      	orrs	r2, r1
 8009866:	605a      	str	r2, [r3, #4]
  }
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b098      	sub	sp, #96	@ 0x60
 8009878:	af02      	add	r7, sp, #8
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009884:	f7f9 fa56 	bl	8002d34 <HAL_GetTick>
 8009888:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0308 	and.w	r3, r3, #8
 8009894:	2b08      	cmp	r3, #8
 8009896:	d12f      	bne.n	80098f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009898:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098a0:	2200      	movs	r2, #0
 80098a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f88e 	bl	80099c8 <UART_WaitOnFlagUntilTimeout>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d022      	beq.n	80098f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ba:	e853 3f00 	ldrex	r3, [r3]
 80098be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	461a      	mov	r2, r3
 80098ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098d8:	e841 2300 	strex	r3, r2, [r1]
 80098dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1e6      	bne.n	80098b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098f4:	2303      	movs	r3, #3
 80098f6:	e063      	b.n	80099c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0304 	and.w	r3, r3, #4
 8009902:	2b04      	cmp	r3, #4
 8009904:	d149      	bne.n	800999a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009906:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800990e:	2200      	movs	r2, #0
 8009910:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f857 	bl	80099c8 <UART_WaitOnFlagUntilTimeout>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d03c      	beq.n	800999a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	623b      	str	r3, [r7, #32]
   return(result);
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800993e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009940:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800994c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e6      	bne.n	8009920 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3308      	adds	r3, #8
 8009958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	60fb      	str	r3, [r7, #12]
   return(result);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f023 0301 	bic.w	r3, r3, #1
 8009968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3308      	adds	r3, #8
 8009970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009972:	61fa      	str	r2, [r7, #28]
 8009974:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	69b9      	ldr	r1, [r7, #24]
 8009978:	69fa      	ldr	r2, [r7, #28]
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	617b      	str	r3, [r7, #20]
   return(result);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1e5      	bne.n	8009952 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2220      	movs	r2, #32
 800998a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e012      	b.n	80099c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2220      	movs	r2, #32
 800999e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2220      	movs	r2, #32
 80099a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3758      	adds	r7, #88	@ 0x58
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	4613      	mov	r3, r2
 80099d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099d8:	e04f      	b.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099e0:	d04b      	beq.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099e2:	f7f9 f9a7 	bl	8002d34 <HAL_GetTick>
 80099e6:	4602      	mov	r2, r0
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d302      	bcc.n	80099f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e04e      	b.n	8009a9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0304 	and.w	r3, r3, #4
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d037      	beq.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2b80      	cmp	r3, #128	@ 0x80
 8009a0e:	d034      	beq.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b40      	cmp	r3, #64	@ 0x40
 8009a14:	d031      	beq.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	f003 0308 	and.w	r3, r3, #8
 8009a20:	2b08      	cmp	r3, #8
 8009a22:	d110      	bne.n	8009a46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2208      	movs	r2, #8
 8009a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 f838 	bl	8009aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2208      	movs	r2, #8
 8009a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e029      	b.n	8009a9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a54:	d111      	bne.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f81e 	bl	8009aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e00f      	b.n	8009a9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69da      	ldr	r2, [r3, #28]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4013      	ands	r3, r2
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	bf0c      	ite	eq
 8009a8a:	2301      	moveq	r3, #1
 8009a8c:	2300      	movne	r3, #0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	461a      	mov	r2, r3
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d0a0      	beq.n	80099da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b095      	sub	sp, #84	@ 0x54
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009acc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ace:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ad0:	e841 2300 	strex	r3, r2, [r1]
 8009ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e6      	bne.n	8009aaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	e853 3f00 	ldrex	r3, [r3]
 8009aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009af2:	f023 0301 	bic.w	r3, r3, #1
 8009af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3308      	adds	r3, #8
 8009afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b08:	e841 2300 	strex	r3, r2, [r1]
 8009b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e3      	bne.n	8009adc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d118      	bne.n	8009b4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	e853 3f00 	ldrex	r3, [r3]
 8009b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	f023 0310 	bic.w	r3, r3, #16
 8009b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b3a:	61bb      	str	r3, [r7, #24]
 8009b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	6979      	ldr	r1, [r7, #20]
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	e841 2300 	strex	r3, r2, [r1]
 8009b46:	613b      	str	r3, [r7, #16]
   return(result);
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1e6      	bne.n	8009b1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b62:	bf00      	nop
 8009b64:	3754      	adds	r7, #84	@ 0x54
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f7f7 fcc3 	bl	8001518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b92:	bf00      	nop
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b088      	sub	sp, #32
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	61bb      	str	r3, [r7, #24]
 8009bc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6979      	ldr	r1, [r7, #20]
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e6      	bne.n	8009ba2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff fab4 	bl	8009150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009be8:	bf00      	nop
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d101      	bne.n	8009c42 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e027      	b.n	8009c92 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2224      	movs	r2, #36	@ 0x24
 8009c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0201 	bic.w	r2, r2, #1
 8009c68:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d101      	bne.n	8009cb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	e02d      	b.n	8009d12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2224      	movs	r2, #36	@ 0x24
 8009cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f022 0201 	bic.w	r2, r2, #1
 8009cdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f850 	bl	8009d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2220      	movs	r2, #32
 8009d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d101      	bne.n	8009d32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e02d      	b.n	8009d8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2224      	movs	r2, #36	@ 0x24
 8009d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 0201 	bic.w	r2, r2, #1
 8009d58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f812 	bl	8009d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d108      	bne.n	8009dba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009db8:	e031      	b.n	8009e1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009dba:	2308      	movs	r3, #8
 8009dbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009dbe:	2308      	movs	r3, #8
 8009dc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	0e5b      	lsrs	r3, r3, #25
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	f003 0307 	and.w	r3, r3, #7
 8009dd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	0f5b      	lsrs	r3, r3, #29
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	f003 0307 	and.w	r3, r3, #7
 8009de0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	7b3a      	ldrb	r2, [r7, #12]
 8009de6:	4911      	ldr	r1, [pc, #68]	@ (8009e2c <UARTEx_SetNbDataToProcess+0x94>)
 8009de8:	5c8a      	ldrb	r2, [r1, r2]
 8009dea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009dee:	7b3a      	ldrb	r2, [r7, #12]
 8009df0:	490f      	ldr	r1, [pc, #60]	@ (8009e30 <UARTEx_SetNbDataToProcess+0x98>)
 8009df2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009df4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	7b7a      	ldrb	r2, [r7, #13]
 8009e04:	4909      	ldr	r1, [pc, #36]	@ (8009e2c <UARTEx_SetNbDataToProcess+0x94>)
 8009e06:	5c8a      	ldrb	r2, [r1, r2]
 8009e08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e0c:	7b7a      	ldrb	r2, [r7, #13]
 8009e0e:	4908      	ldr	r1, [pc, #32]	@ (8009e30 <UARTEx_SetNbDataToProcess+0x98>)
 8009e10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e12:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009e1e:	bf00      	nop
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	0800fde0 	.word	0x0800fde0
 8009e30:	0800fde8 	.word	0x0800fde8

08009e34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e46:	2b84      	cmp	r3, #132	@ 0x84
 8009e48:	d005      	beq.n	8009e56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009e4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	4413      	add	r3, r2
 8009e52:	3303      	adds	r3, #3
 8009e54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009e56:	68fb      	ldr	r3, [r7, #12]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009e68:	f000 fa74 	bl	800a354 <vTaskStartScheduler>
  
  return osOK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e74:	b087      	sub	sp, #28
 8009e76:	af02      	add	r7, sp, #8
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685c      	ldr	r4, [r3, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e88:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff ffcf 	bl	8009e34 <makeFreeRtosPriority>
 8009e96:	4602      	mov	r2, r0
 8009e98:	f107 030c 	add.w	r3, r7, #12
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	9200      	str	r2, [sp, #0]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	4632      	mov	r2, r6
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 f8d2 	bl	800a050 <xTaskCreate>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d001      	beq.n	8009eb6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	e000      	b.n	8009eb8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ec0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <osDelay+0x16>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	e000      	b.n	8009ed8 <osDelay+0x18>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fa05 	bl	800a2e8 <vTaskDelay>
  
  return osOK;
 8009ede:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f103 0208 	add.w	r2, r3, #8
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f103 0208 	add.w	r2, r3, #8
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f103 0208 	add.w	r2, r3, #8
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f36:	bf00      	nop
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	601a      	str	r2, [r3, #0]
}
 8009f7e:	bf00      	nop
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fa0:	d103      	bne.n	8009faa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	e00c      	b.n	8009fc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3308      	adds	r3, #8
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	e002      	b.n	8009fb8 <vListInsert+0x2e>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d2f6      	bcs.n	8009fb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	601a      	str	r2, [r3, #0]
}
 8009ff0:	bf00      	nop
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	6892      	ldr	r2, [r2, #8]
 800a012:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6852      	ldr	r2, [r2, #4]
 800a01c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	429a      	cmp	r2, r3
 800a026:	d103      	bne.n	800a030 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	689a      	ldr	r2, [r3, #8]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	1e5a      	subs	r2, r3, #1
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08c      	sub	sp, #48	@ 0x30
 800a054:	af04      	add	r7, sp, #16
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	4613      	mov	r3, r2
 800a05e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a060:	88fb      	ldrh	r3, [r7, #6]
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4618      	mov	r0, r3
 800a066:	f000 fec7 	bl	800adf8 <pvPortMalloc>
 800a06a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00e      	beq.n	800a090 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a072:	20a0      	movs	r0, #160	@ 0xa0
 800a074:	f000 fec0 	bl	800adf8 <pvPortMalloc>
 800a078:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	631a      	str	r2, [r3, #48]	@ 0x30
 800a086:	e005      	b.n	800a094 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a088:	6978      	ldr	r0, [r7, #20]
 800a08a:	f000 ff83 	bl	800af94 <vPortFree>
 800a08e:	e001      	b.n	800a094 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a090:	2300      	movs	r3, #0
 800a092:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d013      	beq.n	800a0c2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a09a:	88fa      	ldrh	r2, [r7, #6]
 800a09c:	2300      	movs	r3, #0
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	9302      	str	r3, [sp, #8]
 800a0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f80f 	bl	800a0d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0b6:	69f8      	ldr	r0, [r7, #28]
 800a0b8:	f000 f8ac 	bl	800a214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	61bb      	str	r3, [r7, #24]
 800a0c0:	e002      	b.n	800a0c8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0c8:	69bb      	ldr	r3, [r7, #24]
	}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	f023 0307 	bic.w	r3, r3, #7
 800a0fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	f003 0307 	and.w	r3, r3, #7
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00b      	beq.n	800a11e <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	e7fd      	b.n	800a11a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d01f      	beq.n	800a164 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a124:	2300      	movs	r3, #0
 800a126:	61fb      	str	r3, [r7, #28]
 800a128:	e012      	b.n	800a150 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	4413      	add	r3, r2
 800a130:	7819      	ldrb	r1, [r3, #0]
 800a132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	4413      	add	r3, r2
 800a138:	3334      	adds	r3, #52	@ 0x34
 800a13a:	460a      	mov	r2, r1
 800a13c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	4413      	add	r3, r2
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d006      	beq.n	800a158 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	3301      	adds	r3, #1
 800a14e:	61fb      	str	r3, [r7, #28]
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	2b0f      	cmp	r3, #15
 800a154:	d9e9      	bls.n	800a12a <prvInitialiseNewTask+0x56>
 800a156:	e000      	b.n	800a15a <prvInitialiseNewTask+0x86>
			{
				break;
 800a158:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a162:	e003      	b.n	800a16c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16e:	2b06      	cmp	r3, #6
 800a170:	d901      	bls.n	800a176 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a172:	2306      	movs	r3, #6
 800a174:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a17a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a180:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a184:	2200      	movs	r2, #0
 800a186:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18a:	3304      	adds	r3, #4
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7ff fecb 	bl	8009f28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a194:	3318      	adds	r3, #24
 800a196:	4618      	mov	r0, r3
 800a198:	f7ff fec6 	bl	8009f28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	f1c3 0207 	rsb	r2, r3, #7
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	334c      	adds	r3, #76	@ 0x4c
 800a1c6:	224c      	movs	r2, #76	@ 0x4c
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f002 f898 	bl	800c300 <memset>
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d2:	4a0d      	ldr	r2, [pc, #52]	@ (800a208 <prvInitialiseNewTask+0x134>)
 800a1d4:	651a      	str	r2, [r3, #80]	@ 0x50
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	4a0c      	ldr	r2, [pc, #48]	@ (800a20c <prvInitialiseNewTask+0x138>)
 800a1da:	655a      	str	r2, [r3, #84]	@ 0x54
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1de:	4a0c      	ldr	r2, [pc, #48]	@ (800a210 <prvInitialiseNewTask+0x13c>)
 800a1e0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	68f9      	ldr	r1, [r7, #12]
 800a1e6:	69b8      	ldr	r0, [r7, #24]
 800a1e8:	f000 fbf2 	bl	800a9d0 <pxPortInitialiseStack>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1fe:	bf00      	nop
 800a200:	3720      	adds	r7, #32
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20001340 	.word	0x20001340
 800a20c:	200013a8 	.word	0x200013a8
 800a210:	20001410 	.word	0x20001410

0800a214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a21c:	f000 fd0c 	bl	800ac38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a220:	4b2a      	ldr	r3, [pc, #168]	@ (800a2cc <prvAddNewTaskToReadyList+0xb8>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3301      	adds	r3, #1
 800a226:	4a29      	ldr	r2, [pc, #164]	@ (800a2cc <prvAddNewTaskToReadyList+0xb8>)
 800a228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a22a:	4b29      	ldr	r3, [pc, #164]	@ (800a2d0 <prvAddNewTaskToReadyList+0xbc>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d109      	bne.n	800a246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a232:	4a27      	ldr	r2, [pc, #156]	@ (800a2d0 <prvAddNewTaskToReadyList+0xbc>)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a238:	4b24      	ldr	r3, [pc, #144]	@ (800a2cc <prvAddNewTaskToReadyList+0xb8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d110      	bne.n	800a262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a240:	f000 fabc 	bl	800a7bc <prvInitialiseTaskLists>
 800a244:	e00d      	b.n	800a262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a246:	4b23      	ldr	r3, [pc, #140]	@ (800a2d4 <prvAddNewTaskToReadyList+0xc0>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d109      	bne.n	800a262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a24e:	4b20      	ldr	r3, [pc, #128]	@ (800a2d0 <prvAddNewTaskToReadyList+0xbc>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a258:	429a      	cmp	r2, r3
 800a25a:	d802      	bhi.n	800a262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a25c:	4a1c      	ldr	r2, [pc, #112]	@ (800a2d0 <prvAddNewTaskToReadyList+0xbc>)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a262:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d8 <prvAddNewTaskToReadyList+0xc4>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3301      	adds	r3, #1
 800a268:	4a1b      	ldr	r2, [pc, #108]	@ (800a2d8 <prvAddNewTaskToReadyList+0xc4>)
 800a26a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a270:	2201      	movs	r2, #1
 800a272:	409a      	lsls	r2, r3
 800a274:	4b19      	ldr	r3, [pc, #100]	@ (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4313      	orrs	r3, r2
 800a27a:	4a18      	ldr	r2, [pc, #96]	@ (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a27c:	6013      	str	r3, [r2, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a282:	4613      	mov	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4a15      	ldr	r2, [pc, #84]	@ (800a2e0 <prvAddNewTaskToReadyList+0xcc>)
 800a28c:	441a      	add	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3304      	adds	r3, #4
 800a292:	4619      	mov	r1, r3
 800a294:	4610      	mov	r0, r2
 800a296:	f7ff fe54 	bl	8009f42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a29a:	f000 fcff 	bl	800ac9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a29e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d4 <prvAddNewTaskToReadyList+0xc0>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00e      	beq.n	800a2c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d0 <prvAddNewTaskToReadyList+0xbc>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d207      	bcs.n	800a2c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2b4:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e4 <prvAddNewTaskToReadyList+0xd0>)
 800a2b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2c4:	bf00      	nop
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	200006ec 	.word	0x200006ec
 800a2d0:	200005ec 	.word	0x200005ec
 800a2d4:	200006f8 	.word	0x200006f8
 800a2d8:	20000708 	.word	0x20000708
 800a2dc:	200006f4 	.word	0x200006f4
 800a2e0:	200005f0 	.word	0x200005f0
 800a2e4:	e000ed04 	.word	0xe000ed04

0800a2e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d018      	beq.n	800a32c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a2fa:	4b14      	ldr	r3, [pc, #80]	@ (800a34c <vTaskDelay+0x64>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00b      	beq.n	800a31a <vTaskDelay+0x32>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	60bb      	str	r3, [r7, #8]
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop
 800a318:	e7fd      	b.n	800a316 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a31a:	f000 f86d 	bl	800a3f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a31e:	2100      	movs	r1, #0
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 faef 	bl	800a904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a326:	f000 f875 	bl	800a414 <xTaskResumeAll>
 800a32a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d107      	bne.n	800a342 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a332:	4b07      	ldr	r3, [pc, #28]	@ (800a350 <vTaskDelay+0x68>)
 800a334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a342:	bf00      	nop
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20000714 	.word	0x20000714
 800a350:	e000ed04 	.word	0xe000ed04

0800a354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a35a:	4b1f      	ldr	r3, [pc, #124]	@ (800a3d8 <vTaskStartScheduler+0x84>)
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	2300      	movs	r3, #0
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	2300      	movs	r3, #0
 800a364:	2280      	movs	r2, #128	@ 0x80
 800a366:	491d      	ldr	r1, [pc, #116]	@ (800a3dc <vTaskStartScheduler+0x88>)
 800a368:	481d      	ldr	r0, [pc, #116]	@ (800a3e0 <vTaskStartScheduler+0x8c>)
 800a36a:	f7ff fe71 	bl	800a050 <xTaskCreate>
 800a36e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d11b      	bne.n	800a3ae <vTaskStartScheduler+0x5a>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	60bb      	str	r3, [r7, #8]
}
 800a388:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a38a:	4b16      	ldr	r3, [pc, #88]	@ (800a3e4 <vTaskStartScheduler+0x90>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	334c      	adds	r3, #76	@ 0x4c
 800a390:	4a15      	ldr	r2, [pc, #84]	@ (800a3e8 <vTaskStartScheduler+0x94>)
 800a392:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a394:	4b15      	ldr	r3, [pc, #84]	@ (800a3ec <vTaskStartScheduler+0x98>)
 800a396:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a39a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a39c:	4b14      	ldr	r3, [pc, #80]	@ (800a3f0 <vTaskStartScheduler+0x9c>)
 800a39e:	2201      	movs	r2, #1
 800a3a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3a2:	4b14      	ldr	r3, [pc, #80]	@ (800a3f4 <vTaskStartScheduler+0xa0>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3a8:	f000 fba2 	bl	800aaf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3ac:	e00f      	b.n	800a3ce <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3b4:	d10b      	bne.n	800a3ce <vTaskStartScheduler+0x7a>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	607b      	str	r3, [r7, #4]
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	e7fd      	b.n	800a3ca <vTaskStartScheduler+0x76>
}
 800a3ce:	bf00      	nop
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20000710 	.word	0x20000710
 800a3dc:	0800fda8 	.word	0x0800fda8
 800a3e0:	0800a78d 	.word	0x0800a78d
 800a3e4:	200005ec 	.word	0x200005ec
 800a3e8:	2000001c 	.word	0x2000001c
 800a3ec:	2000070c 	.word	0x2000070c
 800a3f0:	200006f8 	.word	0x200006f8
 800a3f4:	200006f0 	.word	0x200006f0

0800a3f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a3fc:	4b04      	ldr	r3, [pc, #16]	@ (800a410 <vTaskSuspendAll+0x18>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3301      	adds	r3, #1
 800a402:	4a03      	ldr	r2, [pc, #12]	@ (800a410 <vTaskSuspendAll+0x18>)
 800a404:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a406:	bf00      	nop
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	20000714 	.word	0x20000714

0800a414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a41e:	2300      	movs	r3, #0
 800a420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a422:	4b42      	ldr	r3, [pc, #264]	@ (800a52c <xTaskResumeAll+0x118>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10b      	bne.n	800a442 <xTaskResumeAll+0x2e>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	603b      	str	r3, [r7, #0]
}
 800a43c:	bf00      	nop
 800a43e:	bf00      	nop
 800a440:	e7fd      	b.n	800a43e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a442:	f000 fbf9 	bl	800ac38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a446:	4b39      	ldr	r3, [pc, #228]	@ (800a52c <xTaskResumeAll+0x118>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	4a37      	ldr	r2, [pc, #220]	@ (800a52c <xTaskResumeAll+0x118>)
 800a44e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a450:	4b36      	ldr	r3, [pc, #216]	@ (800a52c <xTaskResumeAll+0x118>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d161      	bne.n	800a51c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a458:	4b35      	ldr	r3, [pc, #212]	@ (800a530 <xTaskResumeAll+0x11c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d05d      	beq.n	800a51c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a460:	e02e      	b.n	800a4c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a462:	4b34      	ldr	r3, [pc, #208]	@ (800a534 <xTaskResumeAll+0x120>)
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3318      	adds	r3, #24
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff fdc4 	bl	8009ffc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3304      	adds	r3, #4
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff fdbf 	bl	8009ffc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a482:	2201      	movs	r2, #1
 800a484:	409a      	lsls	r2, r3
 800a486:	4b2c      	ldr	r3, [pc, #176]	@ (800a538 <xTaskResumeAll+0x124>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	4a2a      	ldr	r2, [pc, #168]	@ (800a538 <xTaskResumeAll+0x124>)
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a494:	4613      	mov	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4413      	add	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4a27      	ldr	r2, [pc, #156]	@ (800a53c <xTaskResumeAll+0x128>)
 800a49e:	441a      	add	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f7ff fd4b 	bl	8009f42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b0:	4b23      	ldr	r3, [pc, #140]	@ (800a540 <xTaskResumeAll+0x12c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d302      	bcc.n	800a4c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a4ba:	4b22      	ldr	r3, [pc, #136]	@ (800a544 <xTaskResumeAll+0x130>)
 800a4bc:	2201      	movs	r2, #1
 800a4be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a534 <xTaskResumeAll+0x120>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1cc      	bne.n	800a462 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4ce:	f000 f9f9 	bl	800a8c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a4d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a548 <xTaskResumeAll+0x134>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d010      	beq.n	800a500 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a4de:	f000 f837 	bl	800a550 <xTaskIncrementTick>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a4e8:	4b16      	ldr	r3, [pc, #88]	@ (800a544 <xTaskResumeAll+0x130>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1f1      	bne.n	800a4de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a4fa:	4b13      	ldr	r3, [pc, #76]	@ (800a548 <xTaskResumeAll+0x134>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a500:	4b10      	ldr	r3, [pc, #64]	@ (800a544 <xTaskResumeAll+0x130>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d009      	beq.n	800a51c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a50c:	4b0f      	ldr	r3, [pc, #60]	@ (800a54c <xTaskResumeAll+0x138>)
 800a50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a51c:	f000 fbbe 	bl	800ac9c <vPortExitCritical>

	return xAlreadyYielded;
 800a520:	68bb      	ldr	r3, [r7, #8]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20000714 	.word	0x20000714
 800a530:	200006ec 	.word	0x200006ec
 800a534:	200006ac 	.word	0x200006ac
 800a538:	200006f4 	.word	0x200006f4
 800a53c:	200005f0 	.word	0x200005f0
 800a540:	200005ec 	.word	0x200005ec
 800a544:	20000700 	.word	0x20000700
 800a548:	200006fc 	.word	0x200006fc
 800a54c:	e000ed04 	.word	0xe000ed04

0800a550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a55a:	4b4f      	ldr	r3, [pc, #316]	@ (800a698 <xTaskIncrementTick+0x148>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f040 808f 	bne.w	800a682 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a564:	4b4d      	ldr	r3, [pc, #308]	@ (800a69c <xTaskIncrementTick+0x14c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3301      	adds	r3, #1
 800a56a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a56c:	4a4b      	ldr	r2, [pc, #300]	@ (800a69c <xTaskIncrementTick+0x14c>)
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d121      	bne.n	800a5bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a578:	4b49      	ldr	r3, [pc, #292]	@ (800a6a0 <xTaskIncrementTick+0x150>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00b      	beq.n	800a59a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	603b      	str	r3, [r7, #0]
}
 800a594:	bf00      	nop
 800a596:	bf00      	nop
 800a598:	e7fd      	b.n	800a596 <xTaskIncrementTick+0x46>
 800a59a:	4b41      	ldr	r3, [pc, #260]	@ (800a6a0 <xTaskIncrementTick+0x150>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	4b40      	ldr	r3, [pc, #256]	@ (800a6a4 <xTaskIncrementTick+0x154>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a3e      	ldr	r2, [pc, #248]	@ (800a6a0 <xTaskIncrementTick+0x150>)
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	4a3e      	ldr	r2, [pc, #248]	@ (800a6a4 <xTaskIncrementTick+0x154>)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6013      	str	r3, [r2, #0]
 800a5ae:	4b3e      	ldr	r3, [pc, #248]	@ (800a6a8 <xTaskIncrementTick+0x158>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	4a3c      	ldr	r2, [pc, #240]	@ (800a6a8 <xTaskIncrementTick+0x158>)
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	f000 f984 	bl	800a8c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a5bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a6ac <xTaskIncrementTick+0x15c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d348      	bcc.n	800a658 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5c6:	4b36      	ldr	r3, [pc, #216]	@ (800a6a0 <xTaskIncrementTick+0x150>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d104      	bne.n	800a5da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5d0:	4b36      	ldr	r3, [pc, #216]	@ (800a6ac <xTaskIncrementTick+0x15c>)
 800a5d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5d6:	601a      	str	r2, [r3, #0]
					break;
 800a5d8:	e03e      	b.n	800a658 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5da:	4b31      	ldr	r3, [pc, #196]	@ (800a6a0 <xTaskIncrementTick+0x150>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d203      	bcs.n	800a5fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5f2:	4a2e      	ldr	r2, [pc, #184]	@ (800a6ac <xTaskIncrementTick+0x15c>)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5f8:	e02e      	b.n	800a658 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff fcfc 	bl	8009ffc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d004      	beq.n	800a616 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	3318      	adds	r3, #24
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff fcf3 	bl	8009ffc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a61a:	2201      	movs	r2, #1
 800a61c:	409a      	lsls	r2, r3
 800a61e:	4b24      	ldr	r3, [pc, #144]	@ (800a6b0 <xTaskIncrementTick+0x160>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4313      	orrs	r3, r2
 800a624:	4a22      	ldr	r2, [pc, #136]	@ (800a6b0 <xTaskIncrementTick+0x160>)
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4a1f      	ldr	r2, [pc, #124]	@ (800a6b4 <xTaskIncrementTick+0x164>)
 800a636:	441a      	add	r2, r3
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	3304      	adds	r3, #4
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	f7ff fc7f 	bl	8009f42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a648:	4b1b      	ldr	r3, [pc, #108]	@ (800a6b8 <xTaskIncrementTick+0x168>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a64e:	429a      	cmp	r2, r3
 800a650:	d3b9      	bcc.n	800a5c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a652:	2301      	movs	r3, #1
 800a654:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a656:	e7b6      	b.n	800a5c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a658:	4b17      	ldr	r3, [pc, #92]	@ (800a6b8 <xTaskIncrementTick+0x168>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a65e:	4915      	ldr	r1, [pc, #84]	@ (800a6b4 <xTaskIncrementTick+0x164>)
 800a660:	4613      	mov	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	4413      	add	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	440b      	add	r3, r1
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d901      	bls.n	800a674 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a670:	2301      	movs	r3, #1
 800a672:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a674:	4b11      	ldr	r3, [pc, #68]	@ (800a6bc <xTaskIncrementTick+0x16c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d007      	beq.n	800a68c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a67c:	2301      	movs	r3, #1
 800a67e:	617b      	str	r3, [r7, #20]
 800a680:	e004      	b.n	800a68c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a682:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c0 <xTaskIncrementTick+0x170>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3301      	adds	r3, #1
 800a688:	4a0d      	ldr	r2, [pc, #52]	@ (800a6c0 <xTaskIncrementTick+0x170>)
 800a68a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a68c:	697b      	ldr	r3, [r7, #20]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20000714 	.word	0x20000714
 800a69c:	200006f0 	.word	0x200006f0
 800a6a0:	200006a4 	.word	0x200006a4
 800a6a4:	200006a8 	.word	0x200006a8
 800a6a8:	20000704 	.word	0x20000704
 800a6ac:	2000070c 	.word	0x2000070c
 800a6b0:	200006f4 	.word	0x200006f4
 800a6b4:	200005f0 	.word	0x200005f0
 800a6b8:	200005ec 	.word	0x200005ec
 800a6bc:	20000700 	.word	0x20000700
 800a6c0:	200006fc 	.word	0x200006fc

0800a6c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6ca:	4b2a      	ldr	r3, [pc, #168]	@ (800a774 <vTaskSwitchContext+0xb0>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d003      	beq.n	800a6da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a6d2:	4b29      	ldr	r3, [pc, #164]	@ (800a778 <vTaskSwitchContext+0xb4>)
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a6d8:	e045      	b.n	800a766 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800a6da:	4b27      	ldr	r3, [pc, #156]	@ (800a778 <vTaskSwitchContext+0xb4>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e0:	4b26      	ldr	r3, [pc, #152]	@ (800a77c <vTaskSwitchContext+0xb8>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	fab3 f383 	clz	r3, r3
 800a6ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a6ee:	7afb      	ldrb	r3, [r7, #11]
 800a6f0:	f1c3 031f 	rsb	r3, r3, #31
 800a6f4:	617b      	str	r3, [r7, #20]
 800a6f6:	4922      	ldr	r1, [pc, #136]	@ (800a780 <vTaskSwitchContext+0xbc>)
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	440b      	add	r3, r1
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	607b      	str	r3, [r7, #4]
}
 800a71c:	bf00      	nop
 800a71e:	bf00      	nop
 800a720:	e7fd      	b.n	800a71e <vTaskSwitchContext+0x5a>
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	4613      	mov	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4a14      	ldr	r2, [pc, #80]	@ (800a780 <vTaskSwitchContext+0xbc>)
 800a72e:	4413      	add	r3, r2
 800a730:	613b      	str	r3, [r7, #16]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	605a      	str	r2, [r3, #4]
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	685a      	ldr	r2, [r3, #4]
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	3308      	adds	r3, #8
 800a744:	429a      	cmp	r2, r3
 800a746:	d104      	bne.n	800a752 <vTaskSwitchContext+0x8e>
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	605a      	str	r2, [r3, #4]
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	4a0a      	ldr	r2, [pc, #40]	@ (800a784 <vTaskSwitchContext+0xc0>)
 800a75a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a75c:	4b09      	ldr	r3, [pc, #36]	@ (800a784 <vTaskSwitchContext+0xc0>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	334c      	adds	r3, #76	@ 0x4c
 800a762:	4a09      	ldr	r2, [pc, #36]	@ (800a788 <vTaskSwitchContext+0xc4>)
 800a764:	6013      	str	r3, [r2, #0]
}
 800a766:	bf00      	nop
 800a768:	371c      	adds	r7, #28
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	20000714 	.word	0x20000714
 800a778:	20000700 	.word	0x20000700
 800a77c:	200006f4 	.word	0x200006f4
 800a780:	200005f0 	.word	0x200005f0
 800a784:	200005ec 	.word	0x200005ec
 800a788:	2000001c 	.word	0x2000001c

0800a78c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a794:	f000 f852 	bl	800a83c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a798:	4b06      	ldr	r3, [pc, #24]	@ (800a7b4 <prvIdleTask+0x28>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d9f9      	bls.n	800a794 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7a0:	4b05      	ldr	r3, [pc, #20]	@ (800a7b8 <prvIdleTask+0x2c>)
 800a7a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a7b0:	e7f0      	b.n	800a794 <prvIdleTask+0x8>
 800a7b2:	bf00      	nop
 800a7b4:	200005f0 	.word	0x200005f0
 800a7b8:	e000ed04 	.word	0xe000ed04

0800a7bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	607b      	str	r3, [r7, #4]
 800a7c6:	e00c      	b.n	800a7e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4a12      	ldr	r2, [pc, #72]	@ (800a81c <prvInitialiseTaskLists+0x60>)
 800a7d4:	4413      	add	r3, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7ff fb86 	bl	8009ee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b06      	cmp	r3, #6
 800a7e6:	d9ef      	bls.n	800a7c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7e8:	480d      	ldr	r0, [pc, #52]	@ (800a820 <prvInitialiseTaskLists+0x64>)
 800a7ea:	f7ff fb7d 	bl	8009ee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7ee:	480d      	ldr	r0, [pc, #52]	@ (800a824 <prvInitialiseTaskLists+0x68>)
 800a7f0:	f7ff fb7a 	bl	8009ee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7f4:	480c      	ldr	r0, [pc, #48]	@ (800a828 <prvInitialiseTaskLists+0x6c>)
 800a7f6:	f7ff fb77 	bl	8009ee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7fa:	480c      	ldr	r0, [pc, #48]	@ (800a82c <prvInitialiseTaskLists+0x70>)
 800a7fc:	f7ff fb74 	bl	8009ee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a800:	480b      	ldr	r0, [pc, #44]	@ (800a830 <prvInitialiseTaskLists+0x74>)
 800a802:	f7ff fb71 	bl	8009ee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a806:	4b0b      	ldr	r3, [pc, #44]	@ (800a834 <prvInitialiseTaskLists+0x78>)
 800a808:	4a05      	ldr	r2, [pc, #20]	@ (800a820 <prvInitialiseTaskLists+0x64>)
 800a80a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a80c:	4b0a      	ldr	r3, [pc, #40]	@ (800a838 <prvInitialiseTaskLists+0x7c>)
 800a80e:	4a05      	ldr	r2, [pc, #20]	@ (800a824 <prvInitialiseTaskLists+0x68>)
 800a810:	601a      	str	r2, [r3, #0]
}
 800a812:	bf00      	nop
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	200005f0 	.word	0x200005f0
 800a820:	2000067c 	.word	0x2000067c
 800a824:	20000690 	.word	0x20000690
 800a828:	200006ac 	.word	0x200006ac
 800a82c:	200006c0 	.word	0x200006c0
 800a830:	200006d8 	.word	0x200006d8
 800a834:	200006a4 	.word	0x200006a4
 800a838:	200006a8 	.word	0x200006a8

0800a83c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a842:	e019      	b.n	800a878 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a844:	f000 f9f8 	bl	800ac38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a848:	4b10      	ldr	r3, [pc, #64]	@ (800a88c <prvCheckTasksWaitingTermination+0x50>)
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3304      	adds	r3, #4
 800a854:	4618      	mov	r0, r3
 800a856:	f7ff fbd1 	bl	8009ffc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a85a:	4b0d      	ldr	r3, [pc, #52]	@ (800a890 <prvCheckTasksWaitingTermination+0x54>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3b01      	subs	r3, #1
 800a860:	4a0b      	ldr	r2, [pc, #44]	@ (800a890 <prvCheckTasksWaitingTermination+0x54>)
 800a862:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a864:	4b0b      	ldr	r3, [pc, #44]	@ (800a894 <prvCheckTasksWaitingTermination+0x58>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3b01      	subs	r3, #1
 800a86a:	4a0a      	ldr	r2, [pc, #40]	@ (800a894 <prvCheckTasksWaitingTermination+0x58>)
 800a86c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a86e:	f000 fa15 	bl	800ac9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f810 	bl	800a898 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a878:	4b06      	ldr	r3, [pc, #24]	@ (800a894 <prvCheckTasksWaitingTermination+0x58>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e1      	bne.n	800a844 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a880:	bf00      	nop
 800a882:	bf00      	nop
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	200006c0 	.word	0x200006c0
 800a890:	200006ec 	.word	0x200006ec
 800a894:	200006d4 	.word	0x200006d4

0800a898 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	334c      	adds	r3, #76	@ 0x4c
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f001 fd47 	bl	800c338 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 fb70 	bl	800af94 <vPortFree>
			vPortFree( pxTCB );
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fb6d 	bl	800af94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a8fc <prvResetNextTaskUnblockTime+0x38>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d104      	bne.n	800a8de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a900 <prvResetNextTaskUnblockTime+0x3c>)
 800a8d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8dc:	e008      	b.n	800a8f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8de:	4b07      	ldr	r3, [pc, #28]	@ (800a8fc <prvResetNextTaskUnblockTime+0x38>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	4a04      	ldr	r2, [pc, #16]	@ (800a900 <prvResetNextTaskUnblockTime+0x3c>)
 800a8ee:	6013      	str	r3, [r2, #0]
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr
 800a8fc:	200006a4 	.word	0x200006a4
 800a900:	2000070c 	.word	0x2000070c

0800a904 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a90e:	4b29      	ldr	r3, [pc, #164]	@ (800a9b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a914:	4b28      	ldr	r3, [pc, #160]	@ (800a9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3304      	adds	r3, #4
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7ff fb6e 	bl	8009ffc <uxListRemove>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10b      	bne.n	800a93e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a926:	4b24      	ldr	r3, [pc, #144]	@ (800a9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a92c:	2201      	movs	r2, #1
 800a92e:	fa02 f303 	lsl.w	r3, r2, r3
 800a932:	43da      	mvns	r2, r3
 800a934:	4b21      	ldr	r3, [pc, #132]	@ (800a9bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4013      	ands	r3, r2
 800a93a:	4a20      	ldr	r2, [pc, #128]	@ (800a9bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a93c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a944:	d10a      	bne.n	800a95c <prvAddCurrentTaskToDelayedList+0x58>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a94c:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3304      	adds	r3, #4
 800a952:	4619      	mov	r1, r3
 800a954:	481a      	ldr	r0, [pc, #104]	@ (800a9c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a956:	f7ff faf4 	bl	8009f42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a95a:	e026      	b.n	800a9aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4413      	add	r3, r2
 800a962:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a964:	4b14      	ldr	r3, [pc, #80]	@ (800a9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	429a      	cmp	r2, r3
 800a972:	d209      	bcs.n	800a988 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a974:	4b13      	ldr	r3, [pc, #76]	@ (800a9c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	4b0f      	ldr	r3, [pc, #60]	@ (800a9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3304      	adds	r3, #4
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7ff fb02 	bl	8009f8a <vListInsert>
}
 800a986:	e010      	b.n	800a9aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a988:	4b0f      	ldr	r3, [pc, #60]	@ (800a9c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	3304      	adds	r3, #4
 800a992:	4619      	mov	r1, r3
 800a994:	4610      	mov	r0, r2
 800a996:	f7ff faf8 	bl	8009f8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a99a:	4b0c      	ldr	r3, [pc, #48]	@ (800a9cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d202      	bcs.n	800a9aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a9a4:	4a09      	ldr	r2, [pc, #36]	@ (800a9cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	6013      	str	r3, [r2, #0]
}
 800a9aa:	bf00      	nop
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	200006f0 	.word	0x200006f0
 800a9b8:	200005ec 	.word	0x200005ec
 800a9bc:	200006f4 	.word	0x200006f4
 800a9c0:	200006d8 	.word	0x200006d8
 800a9c4:	200006a8 	.word	0x200006a8
 800a9c8:	200006a4 	.word	0x200006a4
 800a9cc:	2000070c 	.word	0x2000070c

0800a9d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	3b04      	subs	r3, #4
 800a9e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a9e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3b04      	subs	r3, #4
 800a9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f023 0201 	bic.w	r2, r3, #1
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3b04      	subs	r3, #4
 800a9fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa00:	4a0c      	ldr	r2, [pc, #48]	@ (800aa34 <pxPortInitialiseStack+0x64>)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3b14      	subs	r3, #20
 800aa0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	3b04      	subs	r3, #4
 800aa16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f06f 0202 	mvn.w	r2, #2
 800aa1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3b20      	subs	r3, #32
 800aa24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa26:	68fb      	ldr	r3, [r7, #12]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	0800aa39 	.word	0x0800aa39

0800aa38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa42:	4b13      	ldr	r3, [pc, #76]	@ (800aa90 <prvTaskExitError+0x58>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa4a:	d00b      	beq.n	800aa64 <prvTaskExitError+0x2c>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	60fb      	str	r3, [r7, #12]
}
 800aa5e:	bf00      	nop
 800aa60:	bf00      	nop
 800aa62:	e7fd      	b.n	800aa60 <prvTaskExitError+0x28>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	60bb      	str	r3, [r7, #8]
}
 800aa76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa78:	bf00      	nop
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0fc      	beq.n	800aa7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	2000000c 	.word	0x2000000c
	...

0800aaa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aaa0:	4b07      	ldr	r3, [pc, #28]	@ (800aac0 <pxCurrentTCBConst2>)
 800aaa2:	6819      	ldr	r1, [r3, #0]
 800aaa4:	6808      	ldr	r0, [r1, #0]
 800aaa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaaa:	f380 8809 	msr	PSP, r0
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f04f 0000 	mov.w	r0, #0
 800aab6:	f380 8811 	msr	BASEPRI, r0
 800aaba:	4770      	bx	lr
 800aabc:	f3af 8000 	nop.w

0800aac0 <pxCurrentTCBConst2>:
 800aac0:	200005ec 	.word	0x200005ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop

0800aac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aac8:	4808      	ldr	r0, [pc, #32]	@ (800aaec <prvPortStartFirstTask+0x24>)
 800aaca:	6800      	ldr	r0, [r0, #0]
 800aacc:	6800      	ldr	r0, [r0, #0]
 800aace:	f380 8808 	msr	MSP, r0
 800aad2:	f04f 0000 	mov.w	r0, #0
 800aad6:	f380 8814 	msr	CONTROL, r0
 800aada:	b662      	cpsie	i
 800aadc:	b661      	cpsie	f
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	df00      	svc	0
 800aae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aaea:	bf00      	nop
 800aaec:	e000ed08 	.word	0xe000ed08

0800aaf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b086      	sub	sp, #24
 800aaf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aaf6:	4b47      	ldr	r3, [pc, #284]	@ (800ac14 <xPortStartScheduler+0x124>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a47      	ldr	r2, [pc, #284]	@ (800ac18 <xPortStartScheduler+0x128>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d10b      	bne.n	800ab18 <xPortStartScheduler+0x28>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	613b      	str	r3, [r7, #16]
}
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	e7fd      	b.n	800ab14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab18:	4b3e      	ldr	r3, [pc, #248]	@ (800ac14 <xPortStartScheduler+0x124>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a3f      	ldr	r2, [pc, #252]	@ (800ac1c <xPortStartScheduler+0x12c>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d10b      	bne.n	800ab3a <xPortStartScheduler+0x4a>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	60fb      	str	r3, [r7, #12]
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop
 800ab38:	e7fd      	b.n	800ab36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab3a:	4b39      	ldr	r3, [pc, #228]	@ (800ac20 <xPortStartScheduler+0x130>)
 800ab3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	22ff      	movs	r2, #255	@ 0xff
 800ab4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab54:	78fb      	ldrb	r3, [r7, #3]
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	4b31      	ldr	r3, [pc, #196]	@ (800ac24 <xPortStartScheduler+0x134>)
 800ab60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab62:	4b31      	ldr	r3, [pc, #196]	@ (800ac28 <xPortStartScheduler+0x138>)
 800ab64:	2207      	movs	r2, #7
 800ab66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab68:	e009      	b.n	800ab7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ab6a:	4b2f      	ldr	r3, [pc, #188]	@ (800ac28 <xPortStartScheduler+0x138>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	4a2d      	ldr	r2, [pc, #180]	@ (800ac28 <xPortStartScheduler+0x138>)
 800ab72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab74:	78fb      	ldrb	r3, [r7, #3]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	005b      	lsls	r3, r3, #1
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab7e:	78fb      	ldrb	r3, [r7, #3]
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab86:	2b80      	cmp	r3, #128	@ 0x80
 800ab88:	d0ef      	beq.n	800ab6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab8a:	4b27      	ldr	r3, [pc, #156]	@ (800ac28 <xPortStartScheduler+0x138>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f1c3 0307 	rsb	r3, r3, #7
 800ab92:	2b04      	cmp	r3, #4
 800ab94:	d00b      	beq.n	800abae <xPortStartScheduler+0xbe>
	__asm volatile
 800ab96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	60bb      	str	r3, [r7, #8]
}
 800aba8:	bf00      	nop
 800abaa:	bf00      	nop
 800abac:	e7fd      	b.n	800abaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abae:	4b1e      	ldr	r3, [pc, #120]	@ (800ac28 <xPortStartScheduler+0x138>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	021b      	lsls	r3, r3, #8
 800abb4:	4a1c      	ldr	r2, [pc, #112]	@ (800ac28 <xPortStartScheduler+0x138>)
 800abb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abb8:	4b1b      	ldr	r3, [pc, #108]	@ (800ac28 <xPortStartScheduler+0x138>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800abc0:	4a19      	ldr	r2, [pc, #100]	@ (800ac28 <xPortStartScheduler+0x138>)
 800abc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abcc:	4b17      	ldr	r3, [pc, #92]	@ (800ac2c <xPortStartScheduler+0x13c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a16      	ldr	r2, [pc, #88]	@ (800ac2c <xPortStartScheduler+0x13c>)
 800abd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800abd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abd8:	4b14      	ldr	r3, [pc, #80]	@ (800ac2c <xPortStartScheduler+0x13c>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a13      	ldr	r2, [pc, #76]	@ (800ac2c <xPortStartScheduler+0x13c>)
 800abde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800abe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800abe4:	f000 f8da 	bl	800ad9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800abe8:	4b11      	ldr	r3, [pc, #68]	@ (800ac30 <xPortStartScheduler+0x140>)
 800abea:	2200      	movs	r2, #0
 800abec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800abee:	f000 f8f9 	bl	800ade4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800abf2:	4b10      	ldr	r3, [pc, #64]	@ (800ac34 <xPortStartScheduler+0x144>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a0f      	ldr	r2, [pc, #60]	@ (800ac34 <xPortStartScheduler+0x144>)
 800abf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800abfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800abfe:	f7ff ff63 	bl	800aac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac02:	f7ff fd5f 	bl	800a6c4 <vTaskSwitchContext>
	prvTaskExitError();
 800ac06:	f7ff ff17 	bl	800aa38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	e000ed00 	.word	0xe000ed00
 800ac18:	410fc271 	.word	0x410fc271
 800ac1c:	410fc270 	.word	0x410fc270
 800ac20:	e000e400 	.word	0xe000e400
 800ac24:	20000718 	.word	0x20000718
 800ac28:	2000071c 	.word	0x2000071c
 800ac2c:	e000ed20 	.word	0xe000ed20
 800ac30:	2000000c 	.word	0x2000000c
 800ac34:	e000ef34 	.word	0xe000ef34

0800ac38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	607b      	str	r3, [r7, #4]
}
 800ac50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac52:	4b10      	ldr	r3, [pc, #64]	@ (800ac94 <vPortEnterCritical+0x5c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3301      	adds	r3, #1
 800ac58:	4a0e      	ldr	r2, [pc, #56]	@ (800ac94 <vPortEnterCritical+0x5c>)
 800ac5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac94 <vPortEnterCritical+0x5c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d110      	bne.n	800ac86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac64:	4b0c      	ldr	r3, [pc, #48]	@ (800ac98 <vPortEnterCritical+0x60>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00b      	beq.n	800ac86 <vPortEnterCritical+0x4e>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	603b      	str	r3, [r7, #0]
}
 800ac80:	bf00      	nop
 800ac82:	bf00      	nop
 800ac84:	e7fd      	b.n	800ac82 <vPortEnterCritical+0x4a>
	}
}
 800ac86:	bf00      	nop
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	2000000c 	.word	0x2000000c
 800ac98:	e000ed04 	.word	0xe000ed04

0800ac9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aca2:	4b12      	ldr	r3, [pc, #72]	@ (800acec <vPortExitCritical+0x50>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10b      	bne.n	800acc2 <vPortExitCritical+0x26>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	607b      	str	r3, [r7, #4]
}
 800acbc:	bf00      	nop
 800acbe:	bf00      	nop
 800acc0:	e7fd      	b.n	800acbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800acc2:	4b0a      	ldr	r3, [pc, #40]	@ (800acec <vPortExitCritical+0x50>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	4a08      	ldr	r2, [pc, #32]	@ (800acec <vPortExitCritical+0x50>)
 800acca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800accc:	4b07      	ldr	r3, [pc, #28]	@ (800acec <vPortExitCritical+0x50>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d105      	bne.n	800ace0 <vPortExitCritical+0x44>
 800acd4:	2300      	movs	r3, #0
 800acd6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800acde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	2000000c 	.word	0x2000000c

0800acf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800acf0:	f3ef 8009 	mrs	r0, PSP
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	4b15      	ldr	r3, [pc, #84]	@ (800ad50 <pxCurrentTCBConst>)
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	f01e 0f10 	tst.w	lr, #16
 800ad00:	bf08      	it	eq
 800ad02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0a:	6010      	str	r0, [r2, #0]
 800ad0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ad14:	f380 8811 	msr	BASEPRI, r0
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f7ff fcd0 	bl	800a6c4 <vTaskSwitchContext>
 800ad24:	f04f 0000 	mov.w	r0, #0
 800ad28:	f380 8811 	msr	BASEPRI, r0
 800ad2c:	bc09      	pop	{r0, r3}
 800ad2e:	6819      	ldr	r1, [r3, #0]
 800ad30:	6808      	ldr	r0, [r1, #0]
 800ad32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad36:	f01e 0f10 	tst.w	lr, #16
 800ad3a:	bf08      	it	eq
 800ad3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad40:	f380 8809 	msr	PSP, r0
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	f3af 8000 	nop.w

0800ad50 <pxCurrentTCBConst>:
 800ad50:	200005ec 	.word	0x200005ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop

0800ad58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	607b      	str	r3, [r7, #4]
}
 800ad70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad72:	f7ff fbed 	bl	800a550 <xTaskIncrementTick>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad7c:	4b06      	ldr	r3, [pc, #24]	@ (800ad98 <SysTick_Handler+0x40>)
 800ad7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	2300      	movs	r3, #0
 800ad86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	f383 8811 	msr	BASEPRI, r3
}
 800ad8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	e000ed04 	.word	0xe000ed04

0800ad9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ada0:	4b0b      	ldr	r3, [pc, #44]	@ (800add0 <vPortSetupTimerInterrupt+0x34>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ada6:	4b0b      	ldr	r3, [pc, #44]	@ (800add4 <vPortSetupTimerInterrupt+0x38>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adac:	4b0a      	ldr	r3, [pc, #40]	@ (800add8 <vPortSetupTimerInterrupt+0x3c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a0a      	ldr	r2, [pc, #40]	@ (800addc <vPortSetupTimerInterrupt+0x40>)
 800adb2:	fba2 2303 	umull	r2, r3, r2, r3
 800adb6:	099b      	lsrs	r3, r3, #6
 800adb8:	4a09      	ldr	r2, [pc, #36]	@ (800ade0 <vPortSetupTimerInterrupt+0x44>)
 800adba:	3b01      	subs	r3, #1
 800adbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adbe:	4b04      	ldr	r3, [pc, #16]	@ (800add0 <vPortSetupTimerInterrupt+0x34>)
 800adc0:	2207      	movs	r2, #7
 800adc2:	601a      	str	r2, [r3, #0]
}
 800adc4:	bf00      	nop
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	e000e010 	.word	0xe000e010
 800add4:	e000e018 	.word	0xe000e018
 800add8:	20000000 	.word	0x20000000
 800addc:	10624dd3 	.word	0x10624dd3
 800ade0:	e000e014 	.word	0xe000e014

0800ade4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ade4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800adf4 <vPortEnableVFP+0x10>
 800ade8:	6801      	ldr	r1, [r0, #0]
 800adea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800adee:	6001      	str	r1, [r0, #0]
 800adf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800adf2:	bf00      	nop
 800adf4:	e000ed88 	.word	0xe000ed88

0800adf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08a      	sub	sp, #40	@ 0x28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae00:	2300      	movs	r3, #0
 800ae02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae04:	f7ff faf8 	bl	800a3f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae08:	4b5c      	ldr	r3, [pc, #368]	@ (800af7c <pvPortMalloc+0x184>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae10:	f000 f924 	bl	800b05c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae14:	4b5a      	ldr	r3, [pc, #360]	@ (800af80 <pvPortMalloc+0x188>)
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f040 8095 	bne.w	800af4c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01e      	beq.n	800ae66 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ae28:	2208      	movs	r2, #8
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d015      	beq.n	800ae66 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f023 0307 	bic.w	r3, r3, #7
 800ae40:	3308      	adds	r3, #8
 800ae42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00b      	beq.n	800ae66 <pvPortMalloc+0x6e>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	617b      	str	r3, [r7, #20]
}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	e7fd      	b.n	800ae62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d06f      	beq.n	800af4c <pvPortMalloc+0x154>
 800ae6c:	4b45      	ldr	r3, [pc, #276]	@ (800af84 <pvPortMalloc+0x18c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d86a      	bhi.n	800af4c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae76:	4b44      	ldr	r3, [pc, #272]	@ (800af88 <pvPortMalloc+0x190>)
 800ae78:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae7a:	4b43      	ldr	r3, [pc, #268]	@ (800af88 <pvPortMalloc+0x190>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae80:	e004      	b.n	800ae8c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d903      	bls.n	800ae9e <pvPortMalloc+0xa6>
 800ae96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1f1      	bne.n	800ae82 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae9e:	4b37      	ldr	r3, [pc, #220]	@ (800af7c <pvPortMalloc+0x184>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d051      	beq.n	800af4c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2208      	movs	r2, #8
 800aeae:	4413      	add	r3, r2
 800aeb0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	1ad2      	subs	r2, r2, r3
 800aec2:	2308      	movs	r3, #8
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d920      	bls.n	800af0c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aeca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4413      	add	r3, r2
 800aed0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	f003 0307 	and.w	r3, r3, #7
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00b      	beq.n	800aef4 <pvPortMalloc+0xfc>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	613b      	str	r3, [r7, #16]
}
 800aeee:	bf00      	nop
 800aef0:	bf00      	nop
 800aef2:	e7fd      	b.n	800aef0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	1ad2      	subs	r2, r2, r3
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af06:	69b8      	ldr	r0, [r7, #24]
 800af08:	f000 f90a 	bl	800b120 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af0c:	4b1d      	ldr	r3, [pc, #116]	@ (800af84 <pvPortMalloc+0x18c>)
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	4a1b      	ldr	r2, [pc, #108]	@ (800af84 <pvPortMalloc+0x18c>)
 800af18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af1a:	4b1a      	ldr	r3, [pc, #104]	@ (800af84 <pvPortMalloc+0x18c>)
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	4b1b      	ldr	r3, [pc, #108]	@ (800af8c <pvPortMalloc+0x194>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	429a      	cmp	r2, r3
 800af24:	d203      	bcs.n	800af2e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af26:	4b17      	ldr	r3, [pc, #92]	@ (800af84 <pvPortMalloc+0x18c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a18      	ldr	r2, [pc, #96]	@ (800af8c <pvPortMalloc+0x194>)
 800af2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	4b13      	ldr	r3, [pc, #76]	@ (800af80 <pvPortMalloc+0x188>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	431a      	orrs	r2, r3
 800af38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3e:	2200      	movs	r2, #0
 800af40:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800af42:	4b13      	ldr	r3, [pc, #76]	@ (800af90 <pvPortMalloc+0x198>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3301      	adds	r3, #1
 800af48:	4a11      	ldr	r2, [pc, #68]	@ (800af90 <pvPortMalloc+0x198>)
 800af4a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af4c:	f7ff fa62 	bl	800a414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00b      	beq.n	800af72 <pvPortMalloc+0x17a>
	__asm volatile
 800af5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af5e:	f383 8811 	msr	BASEPRI, r3
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	f3bf 8f4f 	dsb	sy
 800af6a:	60fb      	str	r3, [r7, #12]
}
 800af6c:	bf00      	nop
 800af6e:	bf00      	nop
 800af70:	e7fd      	b.n	800af6e <pvPortMalloc+0x176>
	return pvReturn;
 800af72:	69fb      	ldr	r3, [r7, #28]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3728      	adds	r7, #40	@ 0x28
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	20001328 	.word	0x20001328
 800af80:	2000133c 	.word	0x2000133c
 800af84:	2000132c 	.word	0x2000132c
 800af88:	20001320 	.word	0x20001320
 800af8c:	20001330 	.word	0x20001330
 800af90:	20001334 	.word	0x20001334

0800af94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d04f      	beq.n	800b046 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afa6:	2308      	movs	r3, #8
 800afa8:	425b      	negs	r3, r3
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	4413      	add	r3, r2
 800afae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	685a      	ldr	r2, [r3, #4]
 800afb8:	4b25      	ldr	r3, [pc, #148]	@ (800b050 <vPortFree+0xbc>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4013      	ands	r3, r2
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10b      	bne.n	800afda <vPortFree+0x46>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	60fb      	str	r3, [r7, #12]
}
 800afd4:	bf00      	nop
 800afd6:	bf00      	nop
 800afd8:	e7fd      	b.n	800afd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00b      	beq.n	800affa <vPortFree+0x66>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	60bb      	str	r3, [r7, #8]
}
 800aff4:	bf00      	nop
 800aff6:	bf00      	nop
 800aff8:	e7fd      	b.n	800aff6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	685a      	ldr	r2, [r3, #4]
 800affe:	4b14      	ldr	r3, [pc, #80]	@ (800b050 <vPortFree+0xbc>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4013      	ands	r3, r2
 800b004:	2b00      	cmp	r3, #0
 800b006:	d01e      	beq.n	800b046 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d11a      	bne.n	800b046 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	685a      	ldr	r2, [r3, #4]
 800b014:	4b0e      	ldr	r3, [pc, #56]	@ (800b050 <vPortFree+0xbc>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	43db      	mvns	r3, r3
 800b01a:	401a      	ands	r2, r3
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b020:	f7ff f9ea 	bl	800a3f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	685a      	ldr	r2, [r3, #4]
 800b028:	4b0a      	ldr	r3, [pc, #40]	@ (800b054 <vPortFree+0xc0>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4413      	add	r3, r2
 800b02e:	4a09      	ldr	r2, [pc, #36]	@ (800b054 <vPortFree+0xc0>)
 800b030:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b032:	6938      	ldr	r0, [r7, #16]
 800b034:	f000 f874 	bl	800b120 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b038:	4b07      	ldr	r3, [pc, #28]	@ (800b058 <vPortFree+0xc4>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3301      	adds	r3, #1
 800b03e:	4a06      	ldr	r2, [pc, #24]	@ (800b058 <vPortFree+0xc4>)
 800b040:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b042:	f7ff f9e7 	bl	800a414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b046:	bf00      	nop
 800b048:	3718      	adds	r7, #24
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	2000133c 	.word	0x2000133c
 800b054:	2000132c 	.word	0x2000132c
 800b058:	20001338 	.word	0x20001338

0800b05c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b062:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b066:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b068:	4b27      	ldr	r3, [pc, #156]	@ (800b108 <prvHeapInit+0xac>)
 800b06a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f003 0307 	and.w	r3, r3, #7
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00c      	beq.n	800b090 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	3307      	adds	r3, #7
 800b07a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f023 0307 	bic.w	r3, r3, #7
 800b082:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	4a1f      	ldr	r2, [pc, #124]	@ (800b108 <prvHeapInit+0xac>)
 800b08c:	4413      	add	r3, r2
 800b08e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b094:	4a1d      	ldr	r2, [pc, #116]	@ (800b10c <prvHeapInit+0xb0>)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b09a:	4b1c      	ldr	r3, [pc, #112]	@ (800b10c <prvHeapInit+0xb0>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0a8:	2208      	movs	r2, #8
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	1a9b      	subs	r3, r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f023 0307 	bic.w	r3, r3, #7
 800b0b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	4a15      	ldr	r2, [pc, #84]	@ (800b110 <prvHeapInit+0xb4>)
 800b0bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0be:	4b14      	ldr	r3, [pc, #80]	@ (800b110 <prvHeapInit+0xb4>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0c6:	4b12      	ldr	r3, [pc, #72]	@ (800b110 <prvHeapInit+0xb4>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	1ad2      	subs	r2, r2, r3
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b110 <prvHeapInit+0xb4>)
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	4a0a      	ldr	r2, [pc, #40]	@ (800b114 <prvHeapInit+0xb8>)
 800b0ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4a09      	ldr	r2, [pc, #36]	@ (800b118 <prvHeapInit+0xbc>)
 800b0f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0f4:	4b09      	ldr	r3, [pc, #36]	@ (800b11c <prvHeapInit+0xc0>)
 800b0f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b0fa:	601a      	str	r2, [r3, #0]
}
 800b0fc:	bf00      	nop
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	20000720 	.word	0x20000720
 800b10c:	20001320 	.word	0x20001320
 800b110:	20001328 	.word	0x20001328
 800b114:	20001330 	.word	0x20001330
 800b118:	2000132c 	.word	0x2000132c
 800b11c:	2000133c 	.word	0x2000133c

0800b120 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b128:	4b28      	ldr	r3, [pc, #160]	@ (800b1cc <prvInsertBlockIntoFreeList+0xac>)
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	e002      	b.n	800b134 <prvInsertBlockIntoFreeList+0x14>
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d8f7      	bhi.n	800b12e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	4413      	add	r3, r2
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d108      	bne.n	800b162 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	441a      	add	r2, r3
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	441a      	add	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d118      	bne.n	800b1a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	4b15      	ldr	r3, [pc, #84]	@ (800b1d0 <prvInsertBlockIntoFreeList+0xb0>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d00d      	beq.n	800b19e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	441a      	add	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	601a      	str	r2, [r3, #0]
 800b19c:	e008      	b.n	800b1b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b19e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d0 <prvInsertBlockIntoFreeList+0xb0>)
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	e003      	b.n	800b1b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d002      	beq.n	800b1be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1be:	bf00      	nop
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	20001320 	.word	0x20001320
 800b1d0:	20001328 	.word	0x20001328

0800b1d4 <__cvt>:
 800b1d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d8:	ec57 6b10 	vmov	r6, r7, d0
 800b1dc:	2f00      	cmp	r7, #0
 800b1de:	460c      	mov	r4, r1
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	bfbb      	ittet	lt
 800b1e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b1ea:	461f      	movlt	r7, r3
 800b1ec:	2300      	movge	r3, #0
 800b1ee:	232d      	movlt	r3, #45	@ 0x2d
 800b1f0:	700b      	strb	r3, [r1, #0]
 800b1f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b1f8:	4691      	mov	r9, r2
 800b1fa:	f023 0820 	bic.w	r8, r3, #32
 800b1fe:	bfbc      	itt	lt
 800b200:	4632      	movlt	r2, r6
 800b202:	4616      	movlt	r6, r2
 800b204:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b208:	d005      	beq.n	800b216 <__cvt+0x42>
 800b20a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b20e:	d100      	bne.n	800b212 <__cvt+0x3e>
 800b210:	3401      	adds	r4, #1
 800b212:	2102      	movs	r1, #2
 800b214:	e000      	b.n	800b218 <__cvt+0x44>
 800b216:	2103      	movs	r1, #3
 800b218:	ab03      	add	r3, sp, #12
 800b21a:	9301      	str	r3, [sp, #4]
 800b21c:	ab02      	add	r3, sp, #8
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	ec47 6b10 	vmov	d0, r6, r7
 800b224:	4653      	mov	r3, sl
 800b226:	4622      	mov	r2, r4
 800b228:	f001 f9de 	bl	800c5e8 <_dtoa_r>
 800b22c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b230:	4605      	mov	r5, r0
 800b232:	d119      	bne.n	800b268 <__cvt+0x94>
 800b234:	f019 0f01 	tst.w	r9, #1
 800b238:	d00e      	beq.n	800b258 <__cvt+0x84>
 800b23a:	eb00 0904 	add.w	r9, r0, r4
 800b23e:	2200      	movs	r2, #0
 800b240:	2300      	movs	r3, #0
 800b242:	4630      	mov	r0, r6
 800b244:	4639      	mov	r1, r7
 800b246:	f7f5 fc67 	bl	8000b18 <__aeabi_dcmpeq>
 800b24a:	b108      	cbz	r0, 800b250 <__cvt+0x7c>
 800b24c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b250:	2230      	movs	r2, #48	@ 0x30
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	454b      	cmp	r3, r9
 800b256:	d31e      	bcc.n	800b296 <__cvt+0xc2>
 800b258:	9b03      	ldr	r3, [sp, #12]
 800b25a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b25c:	1b5b      	subs	r3, r3, r5
 800b25e:	4628      	mov	r0, r5
 800b260:	6013      	str	r3, [r2, #0]
 800b262:	b004      	add	sp, #16
 800b264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b268:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b26c:	eb00 0904 	add.w	r9, r0, r4
 800b270:	d1e5      	bne.n	800b23e <__cvt+0x6a>
 800b272:	7803      	ldrb	r3, [r0, #0]
 800b274:	2b30      	cmp	r3, #48	@ 0x30
 800b276:	d10a      	bne.n	800b28e <__cvt+0xba>
 800b278:	2200      	movs	r2, #0
 800b27a:	2300      	movs	r3, #0
 800b27c:	4630      	mov	r0, r6
 800b27e:	4639      	mov	r1, r7
 800b280:	f7f5 fc4a 	bl	8000b18 <__aeabi_dcmpeq>
 800b284:	b918      	cbnz	r0, 800b28e <__cvt+0xba>
 800b286:	f1c4 0401 	rsb	r4, r4, #1
 800b28a:	f8ca 4000 	str.w	r4, [sl]
 800b28e:	f8da 3000 	ldr.w	r3, [sl]
 800b292:	4499      	add	r9, r3
 800b294:	e7d3      	b.n	800b23e <__cvt+0x6a>
 800b296:	1c59      	adds	r1, r3, #1
 800b298:	9103      	str	r1, [sp, #12]
 800b29a:	701a      	strb	r2, [r3, #0]
 800b29c:	e7d9      	b.n	800b252 <__cvt+0x7e>

0800b29e <__exponent>:
 800b29e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2a0:	2900      	cmp	r1, #0
 800b2a2:	bfba      	itte	lt
 800b2a4:	4249      	neglt	r1, r1
 800b2a6:	232d      	movlt	r3, #45	@ 0x2d
 800b2a8:	232b      	movge	r3, #43	@ 0x2b
 800b2aa:	2909      	cmp	r1, #9
 800b2ac:	7002      	strb	r2, [r0, #0]
 800b2ae:	7043      	strb	r3, [r0, #1]
 800b2b0:	dd29      	ble.n	800b306 <__exponent+0x68>
 800b2b2:	f10d 0307 	add.w	r3, sp, #7
 800b2b6:	461d      	mov	r5, r3
 800b2b8:	270a      	movs	r7, #10
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2c0:	fb07 1416 	mls	r4, r7, r6, r1
 800b2c4:	3430      	adds	r4, #48	@ 0x30
 800b2c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	2c63      	cmp	r4, #99	@ 0x63
 800b2ce:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	dcf1      	bgt.n	800b2ba <__exponent+0x1c>
 800b2d6:	3130      	adds	r1, #48	@ 0x30
 800b2d8:	1e94      	subs	r4, r2, #2
 800b2da:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b2de:	1c41      	adds	r1, r0, #1
 800b2e0:	4623      	mov	r3, r4
 800b2e2:	42ab      	cmp	r3, r5
 800b2e4:	d30a      	bcc.n	800b2fc <__exponent+0x5e>
 800b2e6:	f10d 0309 	add.w	r3, sp, #9
 800b2ea:	1a9b      	subs	r3, r3, r2
 800b2ec:	42ac      	cmp	r4, r5
 800b2ee:	bf88      	it	hi
 800b2f0:	2300      	movhi	r3, #0
 800b2f2:	3302      	adds	r3, #2
 800b2f4:	4403      	add	r3, r0
 800b2f6:	1a18      	subs	r0, r3, r0
 800b2f8:	b003      	add	sp, #12
 800b2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b300:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b304:	e7ed      	b.n	800b2e2 <__exponent+0x44>
 800b306:	2330      	movs	r3, #48	@ 0x30
 800b308:	3130      	adds	r1, #48	@ 0x30
 800b30a:	7083      	strb	r3, [r0, #2]
 800b30c:	70c1      	strb	r1, [r0, #3]
 800b30e:	1d03      	adds	r3, r0, #4
 800b310:	e7f1      	b.n	800b2f6 <__exponent+0x58>
	...

0800b314 <_printf_float>:
 800b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b318:	b08d      	sub	sp, #52	@ 0x34
 800b31a:	460c      	mov	r4, r1
 800b31c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b320:	4616      	mov	r6, r2
 800b322:	461f      	mov	r7, r3
 800b324:	4605      	mov	r5, r0
 800b326:	f000 fff3 	bl	800c310 <_localeconv_r>
 800b32a:	6803      	ldr	r3, [r0, #0]
 800b32c:	9304      	str	r3, [sp, #16]
 800b32e:	4618      	mov	r0, r3
 800b330:	f7f4 ffc6 	bl	80002c0 <strlen>
 800b334:	2300      	movs	r3, #0
 800b336:	930a      	str	r3, [sp, #40]	@ 0x28
 800b338:	f8d8 3000 	ldr.w	r3, [r8]
 800b33c:	9005      	str	r0, [sp, #20]
 800b33e:	3307      	adds	r3, #7
 800b340:	f023 0307 	bic.w	r3, r3, #7
 800b344:	f103 0208 	add.w	r2, r3, #8
 800b348:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b34c:	f8d4 b000 	ldr.w	fp, [r4]
 800b350:	f8c8 2000 	str.w	r2, [r8]
 800b354:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b358:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b35c:	9307      	str	r3, [sp, #28]
 800b35e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b362:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b366:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b36a:	4b9c      	ldr	r3, [pc, #624]	@ (800b5dc <_printf_float+0x2c8>)
 800b36c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b370:	f7f5 fc04 	bl	8000b7c <__aeabi_dcmpun>
 800b374:	bb70      	cbnz	r0, 800b3d4 <_printf_float+0xc0>
 800b376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b37a:	4b98      	ldr	r3, [pc, #608]	@ (800b5dc <_printf_float+0x2c8>)
 800b37c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b380:	f7f5 fbde 	bl	8000b40 <__aeabi_dcmple>
 800b384:	bb30      	cbnz	r0, 800b3d4 <_printf_float+0xc0>
 800b386:	2200      	movs	r2, #0
 800b388:	2300      	movs	r3, #0
 800b38a:	4640      	mov	r0, r8
 800b38c:	4649      	mov	r1, r9
 800b38e:	f7f5 fbcd 	bl	8000b2c <__aeabi_dcmplt>
 800b392:	b110      	cbz	r0, 800b39a <_printf_float+0x86>
 800b394:	232d      	movs	r3, #45	@ 0x2d
 800b396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b39a:	4a91      	ldr	r2, [pc, #580]	@ (800b5e0 <_printf_float+0x2cc>)
 800b39c:	4b91      	ldr	r3, [pc, #580]	@ (800b5e4 <_printf_float+0x2d0>)
 800b39e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b3a2:	bf94      	ite	ls
 800b3a4:	4690      	movls	r8, r2
 800b3a6:	4698      	movhi	r8, r3
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	6123      	str	r3, [r4, #16]
 800b3ac:	f02b 0304 	bic.w	r3, fp, #4
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	f04f 0900 	mov.w	r9, #0
 800b3b6:	9700      	str	r7, [sp, #0]
 800b3b8:	4633      	mov	r3, r6
 800b3ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f000 f9d2 	bl	800b768 <_printf_common>
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	f040 808d 	bne.w	800b4e4 <_printf_float+0x1d0>
 800b3ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3ce:	b00d      	add	sp, #52	@ 0x34
 800b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d4:	4642      	mov	r2, r8
 800b3d6:	464b      	mov	r3, r9
 800b3d8:	4640      	mov	r0, r8
 800b3da:	4649      	mov	r1, r9
 800b3dc:	f7f5 fbce 	bl	8000b7c <__aeabi_dcmpun>
 800b3e0:	b140      	cbz	r0, 800b3f4 <_printf_float+0xe0>
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	bfbc      	itt	lt
 800b3e8:	232d      	movlt	r3, #45	@ 0x2d
 800b3ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b3ee:	4a7e      	ldr	r2, [pc, #504]	@ (800b5e8 <_printf_float+0x2d4>)
 800b3f0:	4b7e      	ldr	r3, [pc, #504]	@ (800b5ec <_printf_float+0x2d8>)
 800b3f2:	e7d4      	b.n	800b39e <_printf_float+0x8a>
 800b3f4:	6863      	ldr	r3, [r4, #4]
 800b3f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b3fa:	9206      	str	r2, [sp, #24]
 800b3fc:	1c5a      	adds	r2, r3, #1
 800b3fe:	d13b      	bne.n	800b478 <_printf_float+0x164>
 800b400:	2306      	movs	r3, #6
 800b402:	6063      	str	r3, [r4, #4]
 800b404:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b408:	2300      	movs	r3, #0
 800b40a:	6022      	str	r2, [r4, #0]
 800b40c:	9303      	str	r3, [sp, #12]
 800b40e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b410:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b414:	ab09      	add	r3, sp, #36	@ 0x24
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	6861      	ldr	r1, [r4, #4]
 800b41a:	ec49 8b10 	vmov	d0, r8, r9
 800b41e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b422:	4628      	mov	r0, r5
 800b424:	f7ff fed6 	bl	800b1d4 <__cvt>
 800b428:	9b06      	ldr	r3, [sp, #24]
 800b42a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b42c:	2b47      	cmp	r3, #71	@ 0x47
 800b42e:	4680      	mov	r8, r0
 800b430:	d129      	bne.n	800b486 <_printf_float+0x172>
 800b432:	1cc8      	adds	r0, r1, #3
 800b434:	db02      	blt.n	800b43c <_printf_float+0x128>
 800b436:	6863      	ldr	r3, [r4, #4]
 800b438:	4299      	cmp	r1, r3
 800b43a:	dd41      	ble.n	800b4c0 <_printf_float+0x1ac>
 800b43c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b440:	fa5f fa8a 	uxtb.w	sl, sl
 800b444:	3901      	subs	r1, #1
 800b446:	4652      	mov	r2, sl
 800b448:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b44c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b44e:	f7ff ff26 	bl	800b29e <__exponent>
 800b452:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b454:	1813      	adds	r3, r2, r0
 800b456:	2a01      	cmp	r2, #1
 800b458:	4681      	mov	r9, r0
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	dc02      	bgt.n	800b464 <_printf_float+0x150>
 800b45e:	6822      	ldr	r2, [r4, #0]
 800b460:	07d2      	lsls	r2, r2, #31
 800b462:	d501      	bpl.n	800b468 <_printf_float+0x154>
 800b464:	3301      	adds	r3, #1
 800b466:	6123      	str	r3, [r4, #16]
 800b468:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d0a2      	beq.n	800b3b6 <_printf_float+0xa2>
 800b470:	232d      	movs	r3, #45	@ 0x2d
 800b472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b476:	e79e      	b.n	800b3b6 <_printf_float+0xa2>
 800b478:	9a06      	ldr	r2, [sp, #24]
 800b47a:	2a47      	cmp	r2, #71	@ 0x47
 800b47c:	d1c2      	bne.n	800b404 <_printf_float+0xf0>
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1c0      	bne.n	800b404 <_printf_float+0xf0>
 800b482:	2301      	movs	r3, #1
 800b484:	e7bd      	b.n	800b402 <_printf_float+0xee>
 800b486:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b48a:	d9db      	bls.n	800b444 <_printf_float+0x130>
 800b48c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b490:	d118      	bne.n	800b4c4 <_printf_float+0x1b0>
 800b492:	2900      	cmp	r1, #0
 800b494:	6863      	ldr	r3, [r4, #4]
 800b496:	dd0b      	ble.n	800b4b0 <_printf_float+0x19c>
 800b498:	6121      	str	r1, [r4, #16]
 800b49a:	b913      	cbnz	r3, 800b4a2 <_printf_float+0x18e>
 800b49c:	6822      	ldr	r2, [r4, #0]
 800b49e:	07d0      	lsls	r0, r2, #31
 800b4a0:	d502      	bpl.n	800b4a8 <_printf_float+0x194>
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	440b      	add	r3, r1
 800b4a6:	6123      	str	r3, [r4, #16]
 800b4a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b4aa:	f04f 0900 	mov.w	r9, #0
 800b4ae:	e7db      	b.n	800b468 <_printf_float+0x154>
 800b4b0:	b913      	cbnz	r3, 800b4b8 <_printf_float+0x1a4>
 800b4b2:	6822      	ldr	r2, [r4, #0]
 800b4b4:	07d2      	lsls	r2, r2, #31
 800b4b6:	d501      	bpl.n	800b4bc <_printf_float+0x1a8>
 800b4b8:	3302      	adds	r3, #2
 800b4ba:	e7f4      	b.n	800b4a6 <_printf_float+0x192>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e7f2      	b.n	800b4a6 <_printf_float+0x192>
 800b4c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	db05      	blt.n	800b4d6 <_printf_float+0x1c2>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	6121      	str	r1, [r4, #16]
 800b4ce:	07d8      	lsls	r0, r3, #31
 800b4d0:	d5ea      	bpl.n	800b4a8 <_printf_float+0x194>
 800b4d2:	1c4b      	adds	r3, r1, #1
 800b4d4:	e7e7      	b.n	800b4a6 <_printf_float+0x192>
 800b4d6:	2900      	cmp	r1, #0
 800b4d8:	bfd4      	ite	le
 800b4da:	f1c1 0202 	rsble	r2, r1, #2
 800b4de:	2201      	movgt	r2, #1
 800b4e0:	4413      	add	r3, r2
 800b4e2:	e7e0      	b.n	800b4a6 <_printf_float+0x192>
 800b4e4:	6823      	ldr	r3, [r4, #0]
 800b4e6:	055a      	lsls	r2, r3, #21
 800b4e8:	d407      	bmi.n	800b4fa <_printf_float+0x1e6>
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	4642      	mov	r2, r8
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d12b      	bne.n	800b550 <_printf_float+0x23c>
 800b4f8:	e767      	b.n	800b3ca <_printf_float+0xb6>
 800b4fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b4fe:	f240 80dd 	bls.w	800b6bc <_printf_float+0x3a8>
 800b502:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b506:	2200      	movs	r2, #0
 800b508:	2300      	movs	r3, #0
 800b50a:	f7f5 fb05 	bl	8000b18 <__aeabi_dcmpeq>
 800b50e:	2800      	cmp	r0, #0
 800b510:	d033      	beq.n	800b57a <_printf_float+0x266>
 800b512:	4a37      	ldr	r2, [pc, #220]	@ (800b5f0 <_printf_float+0x2dc>)
 800b514:	2301      	movs	r3, #1
 800b516:	4631      	mov	r1, r6
 800b518:	4628      	mov	r0, r5
 800b51a:	47b8      	blx	r7
 800b51c:	3001      	adds	r0, #1
 800b51e:	f43f af54 	beq.w	800b3ca <_printf_float+0xb6>
 800b522:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b526:	4543      	cmp	r3, r8
 800b528:	db02      	blt.n	800b530 <_printf_float+0x21c>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	07d8      	lsls	r0, r3, #31
 800b52e:	d50f      	bpl.n	800b550 <_printf_float+0x23c>
 800b530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b534:	4631      	mov	r1, r6
 800b536:	4628      	mov	r0, r5
 800b538:	47b8      	blx	r7
 800b53a:	3001      	adds	r0, #1
 800b53c:	f43f af45 	beq.w	800b3ca <_printf_float+0xb6>
 800b540:	f04f 0900 	mov.w	r9, #0
 800b544:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b548:	f104 0a1a 	add.w	sl, r4, #26
 800b54c:	45c8      	cmp	r8, r9
 800b54e:	dc09      	bgt.n	800b564 <_printf_float+0x250>
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	079b      	lsls	r3, r3, #30
 800b554:	f100 8103 	bmi.w	800b75e <_printf_float+0x44a>
 800b558:	68e0      	ldr	r0, [r4, #12]
 800b55a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b55c:	4298      	cmp	r0, r3
 800b55e:	bfb8      	it	lt
 800b560:	4618      	movlt	r0, r3
 800b562:	e734      	b.n	800b3ce <_printf_float+0xba>
 800b564:	2301      	movs	r3, #1
 800b566:	4652      	mov	r2, sl
 800b568:	4631      	mov	r1, r6
 800b56a:	4628      	mov	r0, r5
 800b56c:	47b8      	blx	r7
 800b56e:	3001      	adds	r0, #1
 800b570:	f43f af2b 	beq.w	800b3ca <_printf_float+0xb6>
 800b574:	f109 0901 	add.w	r9, r9, #1
 800b578:	e7e8      	b.n	800b54c <_printf_float+0x238>
 800b57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	dc39      	bgt.n	800b5f4 <_printf_float+0x2e0>
 800b580:	4a1b      	ldr	r2, [pc, #108]	@ (800b5f0 <_printf_float+0x2dc>)
 800b582:	2301      	movs	r3, #1
 800b584:	4631      	mov	r1, r6
 800b586:	4628      	mov	r0, r5
 800b588:	47b8      	blx	r7
 800b58a:	3001      	adds	r0, #1
 800b58c:	f43f af1d 	beq.w	800b3ca <_printf_float+0xb6>
 800b590:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b594:	ea59 0303 	orrs.w	r3, r9, r3
 800b598:	d102      	bne.n	800b5a0 <_printf_float+0x28c>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	07d9      	lsls	r1, r3, #31
 800b59e:	d5d7      	bpl.n	800b550 <_printf_float+0x23c>
 800b5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	47b8      	blx	r7
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	f43f af0d 	beq.w	800b3ca <_printf_float+0xb6>
 800b5b0:	f04f 0a00 	mov.w	sl, #0
 800b5b4:	f104 0b1a 	add.w	fp, r4, #26
 800b5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ba:	425b      	negs	r3, r3
 800b5bc:	4553      	cmp	r3, sl
 800b5be:	dc01      	bgt.n	800b5c4 <_printf_float+0x2b0>
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	e793      	b.n	800b4ec <_printf_float+0x1d8>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	465a      	mov	r2, fp
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	47b8      	blx	r7
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	f43f aefb 	beq.w	800b3ca <_printf_float+0xb6>
 800b5d4:	f10a 0a01 	add.w	sl, sl, #1
 800b5d8:	e7ee      	b.n	800b5b8 <_printf_float+0x2a4>
 800b5da:	bf00      	nop
 800b5dc:	7fefffff 	.word	0x7fefffff
 800b5e0:	0800fdf0 	.word	0x0800fdf0
 800b5e4:	0800fdf4 	.word	0x0800fdf4
 800b5e8:	0800fdf8 	.word	0x0800fdf8
 800b5ec:	0800fdfc 	.word	0x0800fdfc
 800b5f0:	0800fe00 	.word	0x0800fe00
 800b5f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b5f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5fa:	4553      	cmp	r3, sl
 800b5fc:	bfa8      	it	ge
 800b5fe:	4653      	movge	r3, sl
 800b600:	2b00      	cmp	r3, #0
 800b602:	4699      	mov	r9, r3
 800b604:	dc36      	bgt.n	800b674 <_printf_float+0x360>
 800b606:	f04f 0b00 	mov.w	fp, #0
 800b60a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b60e:	f104 021a 	add.w	r2, r4, #26
 800b612:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b614:	9306      	str	r3, [sp, #24]
 800b616:	eba3 0309 	sub.w	r3, r3, r9
 800b61a:	455b      	cmp	r3, fp
 800b61c:	dc31      	bgt.n	800b682 <_printf_float+0x36e>
 800b61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b620:	459a      	cmp	sl, r3
 800b622:	dc3a      	bgt.n	800b69a <_printf_float+0x386>
 800b624:	6823      	ldr	r3, [r4, #0]
 800b626:	07da      	lsls	r2, r3, #31
 800b628:	d437      	bmi.n	800b69a <_printf_float+0x386>
 800b62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b62c:	ebaa 0903 	sub.w	r9, sl, r3
 800b630:	9b06      	ldr	r3, [sp, #24]
 800b632:	ebaa 0303 	sub.w	r3, sl, r3
 800b636:	4599      	cmp	r9, r3
 800b638:	bfa8      	it	ge
 800b63a:	4699      	movge	r9, r3
 800b63c:	f1b9 0f00 	cmp.w	r9, #0
 800b640:	dc33      	bgt.n	800b6aa <_printf_float+0x396>
 800b642:	f04f 0800 	mov.w	r8, #0
 800b646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b64a:	f104 0b1a 	add.w	fp, r4, #26
 800b64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b650:	ebaa 0303 	sub.w	r3, sl, r3
 800b654:	eba3 0309 	sub.w	r3, r3, r9
 800b658:	4543      	cmp	r3, r8
 800b65a:	f77f af79 	ble.w	800b550 <_printf_float+0x23c>
 800b65e:	2301      	movs	r3, #1
 800b660:	465a      	mov	r2, fp
 800b662:	4631      	mov	r1, r6
 800b664:	4628      	mov	r0, r5
 800b666:	47b8      	blx	r7
 800b668:	3001      	adds	r0, #1
 800b66a:	f43f aeae 	beq.w	800b3ca <_printf_float+0xb6>
 800b66e:	f108 0801 	add.w	r8, r8, #1
 800b672:	e7ec      	b.n	800b64e <_printf_float+0x33a>
 800b674:	4642      	mov	r2, r8
 800b676:	4631      	mov	r1, r6
 800b678:	4628      	mov	r0, r5
 800b67a:	47b8      	blx	r7
 800b67c:	3001      	adds	r0, #1
 800b67e:	d1c2      	bne.n	800b606 <_printf_float+0x2f2>
 800b680:	e6a3      	b.n	800b3ca <_printf_float+0xb6>
 800b682:	2301      	movs	r3, #1
 800b684:	4631      	mov	r1, r6
 800b686:	4628      	mov	r0, r5
 800b688:	9206      	str	r2, [sp, #24]
 800b68a:	47b8      	blx	r7
 800b68c:	3001      	adds	r0, #1
 800b68e:	f43f ae9c 	beq.w	800b3ca <_printf_float+0xb6>
 800b692:	9a06      	ldr	r2, [sp, #24]
 800b694:	f10b 0b01 	add.w	fp, fp, #1
 800b698:	e7bb      	b.n	800b612 <_printf_float+0x2fe>
 800b69a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	47b8      	blx	r7
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d1c0      	bne.n	800b62a <_printf_float+0x316>
 800b6a8:	e68f      	b.n	800b3ca <_printf_float+0xb6>
 800b6aa:	9a06      	ldr	r2, [sp, #24]
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	4442      	add	r2, r8
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	47b8      	blx	r7
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	d1c3      	bne.n	800b642 <_printf_float+0x32e>
 800b6ba:	e686      	b.n	800b3ca <_printf_float+0xb6>
 800b6bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b6c0:	f1ba 0f01 	cmp.w	sl, #1
 800b6c4:	dc01      	bgt.n	800b6ca <_printf_float+0x3b6>
 800b6c6:	07db      	lsls	r3, r3, #31
 800b6c8:	d536      	bpl.n	800b738 <_printf_float+0x424>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	4642      	mov	r2, r8
 800b6ce:	4631      	mov	r1, r6
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	47b8      	blx	r7
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	f43f ae78 	beq.w	800b3ca <_printf_float+0xb6>
 800b6da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6de:	4631      	mov	r1, r6
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	47b8      	blx	r7
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	f43f ae70 	beq.w	800b3ca <_printf_float+0xb6>
 800b6ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b6f6:	f7f5 fa0f 	bl	8000b18 <__aeabi_dcmpeq>
 800b6fa:	b9c0      	cbnz	r0, 800b72e <_printf_float+0x41a>
 800b6fc:	4653      	mov	r3, sl
 800b6fe:	f108 0201 	add.w	r2, r8, #1
 800b702:	4631      	mov	r1, r6
 800b704:	4628      	mov	r0, r5
 800b706:	47b8      	blx	r7
 800b708:	3001      	adds	r0, #1
 800b70a:	d10c      	bne.n	800b726 <_printf_float+0x412>
 800b70c:	e65d      	b.n	800b3ca <_printf_float+0xb6>
 800b70e:	2301      	movs	r3, #1
 800b710:	465a      	mov	r2, fp
 800b712:	4631      	mov	r1, r6
 800b714:	4628      	mov	r0, r5
 800b716:	47b8      	blx	r7
 800b718:	3001      	adds	r0, #1
 800b71a:	f43f ae56 	beq.w	800b3ca <_printf_float+0xb6>
 800b71e:	f108 0801 	add.w	r8, r8, #1
 800b722:	45d0      	cmp	r8, sl
 800b724:	dbf3      	blt.n	800b70e <_printf_float+0x3fa>
 800b726:	464b      	mov	r3, r9
 800b728:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b72c:	e6df      	b.n	800b4ee <_printf_float+0x1da>
 800b72e:	f04f 0800 	mov.w	r8, #0
 800b732:	f104 0b1a 	add.w	fp, r4, #26
 800b736:	e7f4      	b.n	800b722 <_printf_float+0x40e>
 800b738:	2301      	movs	r3, #1
 800b73a:	4642      	mov	r2, r8
 800b73c:	e7e1      	b.n	800b702 <_printf_float+0x3ee>
 800b73e:	2301      	movs	r3, #1
 800b740:	464a      	mov	r2, r9
 800b742:	4631      	mov	r1, r6
 800b744:	4628      	mov	r0, r5
 800b746:	47b8      	blx	r7
 800b748:	3001      	adds	r0, #1
 800b74a:	f43f ae3e 	beq.w	800b3ca <_printf_float+0xb6>
 800b74e:	f108 0801 	add.w	r8, r8, #1
 800b752:	68e3      	ldr	r3, [r4, #12]
 800b754:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b756:	1a5b      	subs	r3, r3, r1
 800b758:	4543      	cmp	r3, r8
 800b75a:	dcf0      	bgt.n	800b73e <_printf_float+0x42a>
 800b75c:	e6fc      	b.n	800b558 <_printf_float+0x244>
 800b75e:	f04f 0800 	mov.w	r8, #0
 800b762:	f104 0919 	add.w	r9, r4, #25
 800b766:	e7f4      	b.n	800b752 <_printf_float+0x43e>

0800b768 <_printf_common>:
 800b768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b76c:	4616      	mov	r6, r2
 800b76e:	4698      	mov	r8, r3
 800b770:	688a      	ldr	r2, [r1, #8]
 800b772:	690b      	ldr	r3, [r1, #16]
 800b774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b778:	4293      	cmp	r3, r2
 800b77a:	bfb8      	it	lt
 800b77c:	4613      	movlt	r3, r2
 800b77e:	6033      	str	r3, [r6, #0]
 800b780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b784:	4607      	mov	r7, r0
 800b786:	460c      	mov	r4, r1
 800b788:	b10a      	cbz	r2, 800b78e <_printf_common+0x26>
 800b78a:	3301      	adds	r3, #1
 800b78c:	6033      	str	r3, [r6, #0]
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	0699      	lsls	r1, r3, #26
 800b792:	bf42      	ittt	mi
 800b794:	6833      	ldrmi	r3, [r6, #0]
 800b796:	3302      	addmi	r3, #2
 800b798:	6033      	strmi	r3, [r6, #0]
 800b79a:	6825      	ldr	r5, [r4, #0]
 800b79c:	f015 0506 	ands.w	r5, r5, #6
 800b7a0:	d106      	bne.n	800b7b0 <_printf_common+0x48>
 800b7a2:	f104 0a19 	add.w	sl, r4, #25
 800b7a6:	68e3      	ldr	r3, [r4, #12]
 800b7a8:	6832      	ldr	r2, [r6, #0]
 800b7aa:	1a9b      	subs	r3, r3, r2
 800b7ac:	42ab      	cmp	r3, r5
 800b7ae:	dc26      	bgt.n	800b7fe <_printf_common+0x96>
 800b7b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7b4:	6822      	ldr	r2, [r4, #0]
 800b7b6:	3b00      	subs	r3, #0
 800b7b8:	bf18      	it	ne
 800b7ba:	2301      	movne	r3, #1
 800b7bc:	0692      	lsls	r2, r2, #26
 800b7be:	d42b      	bmi.n	800b818 <_printf_common+0xb0>
 800b7c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7c4:	4641      	mov	r1, r8
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	47c8      	blx	r9
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	d01e      	beq.n	800b80c <_printf_common+0xa4>
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	6922      	ldr	r2, [r4, #16]
 800b7d2:	f003 0306 	and.w	r3, r3, #6
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	bf02      	ittt	eq
 800b7da:	68e5      	ldreq	r5, [r4, #12]
 800b7dc:	6833      	ldreq	r3, [r6, #0]
 800b7de:	1aed      	subeq	r5, r5, r3
 800b7e0:	68a3      	ldr	r3, [r4, #8]
 800b7e2:	bf0c      	ite	eq
 800b7e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7e8:	2500      	movne	r5, #0
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	bfc4      	itt	gt
 800b7ee:	1a9b      	subgt	r3, r3, r2
 800b7f0:	18ed      	addgt	r5, r5, r3
 800b7f2:	2600      	movs	r6, #0
 800b7f4:	341a      	adds	r4, #26
 800b7f6:	42b5      	cmp	r5, r6
 800b7f8:	d11a      	bne.n	800b830 <_printf_common+0xc8>
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	e008      	b.n	800b810 <_printf_common+0xa8>
 800b7fe:	2301      	movs	r3, #1
 800b800:	4652      	mov	r2, sl
 800b802:	4641      	mov	r1, r8
 800b804:	4638      	mov	r0, r7
 800b806:	47c8      	blx	r9
 800b808:	3001      	adds	r0, #1
 800b80a:	d103      	bne.n	800b814 <_printf_common+0xac>
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b814:	3501      	adds	r5, #1
 800b816:	e7c6      	b.n	800b7a6 <_printf_common+0x3e>
 800b818:	18e1      	adds	r1, r4, r3
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	2030      	movs	r0, #48	@ 0x30
 800b81e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b822:	4422      	add	r2, r4
 800b824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b82c:	3302      	adds	r3, #2
 800b82e:	e7c7      	b.n	800b7c0 <_printf_common+0x58>
 800b830:	2301      	movs	r3, #1
 800b832:	4622      	mov	r2, r4
 800b834:	4641      	mov	r1, r8
 800b836:	4638      	mov	r0, r7
 800b838:	47c8      	blx	r9
 800b83a:	3001      	adds	r0, #1
 800b83c:	d0e6      	beq.n	800b80c <_printf_common+0xa4>
 800b83e:	3601      	adds	r6, #1
 800b840:	e7d9      	b.n	800b7f6 <_printf_common+0x8e>
	...

0800b844 <_printf_i>:
 800b844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b848:	7e0f      	ldrb	r7, [r1, #24]
 800b84a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b84c:	2f78      	cmp	r7, #120	@ 0x78
 800b84e:	4691      	mov	r9, r2
 800b850:	4680      	mov	r8, r0
 800b852:	460c      	mov	r4, r1
 800b854:	469a      	mov	sl, r3
 800b856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b85a:	d807      	bhi.n	800b86c <_printf_i+0x28>
 800b85c:	2f62      	cmp	r7, #98	@ 0x62
 800b85e:	d80a      	bhi.n	800b876 <_printf_i+0x32>
 800b860:	2f00      	cmp	r7, #0
 800b862:	f000 80d2 	beq.w	800ba0a <_printf_i+0x1c6>
 800b866:	2f58      	cmp	r7, #88	@ 0x58
 800b868:	f000 80b9 	beq.w	800b9de <_printf_i+0x19a>
 800b86c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b874:	e03a      	b.n	800b8ec <_printf_i+0xa8>
 800b876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b87a:	2b15      	cmp	r3, #21
 800b87c:	d8f6      	bhi.n	800b86c <_printf_i+0x28>
 800b87e:	a101      	add	r1, pc, #4	@ (adr r1, 800b884 <_printf_i+0x40>)
 800b880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b884:	0800b8dd 	.word	0x0800b8dd
 800b888:	0800b8f1 	.word	0x0800b8f1
 800b88c:	0800b86d 	.word	0x0800b86d
 800b890:	0800b86d 	.word	0x0800b86d
 800b894:	0800b86d 	.word	0x0800b86d
 800b898:	0800b86d 	.word	0x0800b86d
 800b89c:	0800b8f1 	.word	0x0800b8f1
 800b8a0:	0800b86d 	.word	0x0800b86d
 800b8a4:	0800b86d 	.word	0x0800b86d
 800b8a8:	0800b86d 	.word	0x0800b86d
 800b8ac:	0800b86d 	.word	0x0800b86d
 800b8b0:	0800b9f1 	.word	0x0800b9f1
 800b8b4:	0800b91b 	.word	0x0800b91b
 800b8b8:	0800b9ab 	.word	0x0800b9ab
 800b8bc:	0800b86d 	.word	0x0800b86d
 800b8c0:	0800b86d 	.word	0x0800b86d
 800b8c4:	0800ba13 	.word	0x0800ba13
 800b8c8:	0800b86d 	.word	0x0800b86d
 800b8cc:	0800b91b 	.word	0x0800b91b
 800b8d0:	0800b86d 	.word	0x0800b86d
 800b8d4:	0800b86d 	.word	0x0800b86d
 800b8d8:	0800b9b3 	.word	0x0800b9b3
 800b8dc:	6833      	ldr	r3, [r6, #0]
 800b8de:	1d1a      	adds	r2, r3, #4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6032      	str	r2, [r6, #0]
 800b8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e09d      	b.n	800ba2c <_printf_i+0x1e8>
 800b8f0:	6833      	ldr	r3, [r6, #0]
 800b8f2:	6820      	ldr	r0, [r4, #0]
 800b8f4:	1d19      	adds	r1, r3, #4
 800b8f6:	6031      	str	r1, [r6, #0]
 800b8f8:	0606      	lsls	r6, r0, #24
 800b8fa:	d501      	bpl.n	800b900 <_printf_i+0xbc>
 800b8fc:	681d      	ldr	r5, [r3, #0]
 800b8fe:	e003      	b.n	800b908 <_printf_i+0xc4>
 800b900:	0645      	lsls	r5, r0, #25
 800b902:	d5fb      	bpl.n	800b8fc <_printf_i+0xb8>
 800b904:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b908:	2d00      	cmp	r5, #0
 800b90a:	da03      	bge.n	800b914 <_printf_i+0xd0>
 800b90c:	232d      	movs	r3, #45	@ 0x2d
 800b90e:	426d      	negs	r5, r5
 800b910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b914:	4859      	ldr	r0, [pc, #356]	@ (800ba7c <_printf_i+0x238>)
 800b916:	230a      	movs	r3, #10
 800b918:	e011      	b.n	800b93e <_printf_i+0xfa>
 800b91a:	6821      	ldr	r1, [r4, #0]
 800b91c:	6833      	ldr	r3, [r6, #0]
 800b91e:	0608      	lsls	r0, r1, #24
 800b920:	f853 5b04 	ldr.w	r5, [r3], #4
 800b924:	d402      	bmi.n	800b92c <_printf_i+0xe8>
 800b926:	0649      	lsls	r1, r1, #25
 800b928:	bf48      	it	mi
 800b92a:	b2ad      	uxthmi	r5, r5
 800b92c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b92e:	4853      	ldr	r0, [pc, #332]	@ (800ba7c <_printf_i+0x238>)
 800b930:	6033      	str	r3, [r6, #0]
 800b932:	bf14      	ite	ne
 800b934:	230a      	movne	r3, #10
 800b936:	2308      	moveq	r3, #8
 800b938:	2100      	movs	r1, #0
 800b93a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b93e:	6866      	ldr	r6, [r4, #4]
 800b940:	60a6      	str	r6, [r4, #8]
 800b942:	2e00      	cmp	r6, #0
 800b944:	bfa2      	ittt	ge
 800b946:	6821      	ldrge	r1, [r4, #0]
 800b948:	f021 0104 	bicge.w	r1, r1, #4
 800b94c:	6021      	strge	r1, [r4, #0]
 800b94e:	b90d      	cbnz	r5, 800b954 <_printf_i+0x110>
 800b950:	2e00      	cmp	r6, #0
 800b952:	d04b      	beq.n	800b9ec <_printf_i+0x1a8>
 800b954:	4616      	mov	r6, r2
 800b956:	fbb5 f1f3 	udiv	r1, r5, r3
 800b95a:	fb03 5711 	mls	r7, r3, r1, r5
 800b95e:	5dc7      	ldrb	r7, [r0, r7]
 800b960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b964:	462f      	mov	r7, r5
 800b966:	42bb      	cmp	r3, r7
 800b968:	460d      	mov	r5, r1
 800b96a:	d9f4      	bls.n	800b956 <_printf_i+0x112>
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d10b      	bne.n	800b988 <_printf_i+0x144>
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	07df      	lsls	r7, r3, #31
 800b974:	d508      	bpl.n	800b988 <_printf_i+0x144>
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	6861      	ldr	r1, [r4, #4]
 800b97a:	4299      	cmp	r1, r3
 800b97c:	bfde      	ittt	le
 800b97e:	2330      	movle	r3, #48	@ 0x30
 800b980:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b984:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b988:	1b92      	subs	r2, r2, r6
 800b98a:	6122      	str	r2, [r4, #16]
 800b98c:	f8cd a000 	str.w	sl, [sp]
 800b990:	464b      	mov	r3, r9
 800b992:	aa03      	add	r2, sp, #12
 800b994:	4621      	mov	r1, r4
 800b996:	4640      	mov	r0, r8
 800b998:	f7ff fee6 	bl	800b768 <_printf_common>
 800b99c:	3001      	adds	r0, #1
 800b99e:	d14a      	bne.n	800ba36 <_printf_i+0x1f2>
 800b9a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9a4:	b004      	add	sp, #16
 800b9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	f043 0320 	orr.w	r3, r3, #32
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	4833      	ldr	r0, [pc, #204]	@ (800ba80 <_printf_i+0x23c>)
 800b9b4:	2778      	movs	r7, #120	@ 0x78
 800b9b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	6831      	ldr	r1, [r6, #0]
 800b9be:	061f      	lsls	r7, r3, #24
 800b9c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9c4:	d402      	bmi.n	800b9cc <_printf_i+0x188>
 800b9c6:	065f      	lsls	r7, r3, #25
 800b9c8:	bf48      	it	mi
 800b9ca:	b2ad      	uxthmi	r5, r5
 800b9cc:	6031      	str	r1, [r6, #0]
 800b9ce:	07d9      	lsls	r1, r3, #31
 800b9d0:	bf44      	itt	mi
 800b9d2:	f043 0320 	orrmi.w	r3, r3, #32
 800b9d6:	6023      	strmi	r3, [r4, #0]
 800b9d8:	b11d      	cbz	r5, 800b9e2 <_printf_i+0x19e>
 800b9da:	2310      	movs	r3, #16
 800b9dc:	e7ac      	b.n	800b938 <_printf_i+0xf4>
 800b9de:	4827      	ldr	r0, [pc, #156]	@ (800ba7c <_printf_i+0x238>)
 800b9e0:	e7e9      	b.n	800b9b6 <_printf_i+0x172>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	f023 0320 	bic.w	r3, r3, #32
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	e7f6      	b.n	800b9da <_printf_i+0x196>
 800b9ec:	4616      	mov	r6, r2
 800b9ee:	e7bd      	b.n	800b96c <_printf_i+0x128>
 800b9f0:	6833      	ldr	r3, [r6, #0]
 800b9f2:	6825      	ldr	r5, [r4, #0]
 800b9f4:	6961      	ldr	r1, [r4, #20]
 800b9f6:	1d18      	adds	r0, r3, #4
 800b9f8:	6030      	str	r0, [r6, #0]
 800b9fa:	062e      	lsls	r6, r5, #24
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	d501      	bpl.n	800ba04 <_printf_i+0x1c0>
 800ba00:	6019      	str	r1, [r3, #0]
 800ba02:	e002      	b.n	800ba0a <_printf_i+0x1c6>
 800ba04:	0668      	lsls	r0, r5, #25
 800ba06:	d5fb      	bpl.n	800ba00 <_printf_i+0x1bc>
 800ba08:	8019      	strh	r1, [r3, #0]
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	6123      	str	r3, [r4, #16]
 800ba0e:	4616      	mov	r6, r2
 800ba10:	e7bc      	b.n	800b98c <_printf_i+0x148>
 800ba12:	6833      	ldr	r3, [r6, #0]
 800ba14:	1d1a      	adds	r2, r3, #4
 800ba16:	6032      	str	r2, [r6, #0]
 800ba18:	681e      	ldr	r6, [r3, #0]
 800ba1a:	6862      	ldr	r2, [r4, #4]
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7f4 fbfe 	bl	8000220 <memchr>
 800ba24:	b108      	cbz	r0, 800ba2a <_printf_i+0x1e6>
 800ba26:	1b80      	subs	r0, r0, r6
 800ba28:	6060      	str	r0, [r4, #4]
 800ba2a:	6863      	ldr	r3, [r4, #4]
 800ba2c:	6123      	str	r3, [r4, #16]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba34:	e7aa      	b.n	800b98c <_printf_i+0x148>
 800ba36:	6923      	ldr	r3, [r4, #16]
 800ba38:	4632      	mov	r2, r6
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	47d0      	blx	sl
 800ba40:	3001      	adds	r0, #1
 800ba42:	d0ad      	beq.n	800b9a0 <_printf_i+0x15c>
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	079b      	lsls	r3, r3, #30
 800ba48:	d413      	bmi.n	800ba72 <_printf_i+0x22e>
 800ba4a:	68e0      	ldr	r0, [r4, #12]
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	4298      	cmp	r0, r3
 800ba50:	bfb8      	it	lt
 800ba52:	4618      	movlt	r0, r3
 800ba54:	e7a6      	b.n	800b9a4 <_printf_i+0x160>
 800ba56:	2301      	movs	r3, #1
 800ba58:	4632      	mov	r2, r6
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	47d0      	blx	sl
 800ba60:	3001      	adds	r0, #1
 800ba62:	d09d      	beq.n	800b9a0 <_printf_i+0x15c>
 800ba64:	3501      	adds	r5, #1
 800ba66:	68e3      	ldr	r3, [r4, #12]
 800ba68:	9903      	ldr	r1, [sp, #12]
 800ba6a:	1a5b      	subs	r3, r3, r1
 800ba6c:	42ab      	cmp	r3, r5
 800ba6e:	dcf2      	bgt.n	800ba56 <_printf_i+0x212>
 800ba70:	e7eb      	b.n	800ba4a <_printf_i+0x206>
 800ba72:	2500      	movs	r5, #0
 800ba74:	f104 0619 	add.w	r6, r4, #25
 800ba78:	e7f5      	b.n	800ba66 <_printf_i+0x222>
 800ba7a:	bf00      	nop
 800ba7c:	0800fe02 	.word	0x0800fe02
 800ba80:	0800fe13 	.word	0x0800fe13

0800ba84 <_scanf_float>:
 800ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	b087      	sub	sp, #28
 800ba8a:	4617      	mov	r7, r2
 800ba8c:	9303      	str	r3, [sp, #12]
 800ba8e:	688b      	ldr	r3, [r1, #8]
 800ba90:	1e5a      	subs	r2, r3, #1
 800ba92:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ba96:	bf81      	itttt	hi
 800ba98:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ba9c:	eb03 0b05 	addhi.w	fp, r3, r5
 800baa0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800baa4:	608b      	strhi	r3, [r1, #8]
 800baa6:	680b      	ldr	r3, [r1, #0]
 800baa8:	460a      	mov	r2, r1
 800baaa:	f04f 0500 	mov.w	r5, #0
 800baae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bab2:	f842 3b1c 	str.w	r3, [r2], #28
 800bab6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800baba:	4680      	mov	r8, r0
 800babc:	460c      	mov	r4, r1
 800babe:	bf98      	it	ls
 800bac0:	f04f 0b00 	movls.w	fp, #0
 800bac4:	9201      	str	r2, [sp, #4]
 800bac6:	4616      	mov	r6, r2
 800bac8:	46aa      	mov	sl, r5
 800baca:	46a9      	mov	r9, r5
 800bacc:	9502      	str	r5, [sp, #8]
 800bace:	68a2      	ldr	r2, [r4, #8]
 800bad0:	b152      	cbz	r2, 800bae8 <_scanf_float+0x64>
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2b4e      	cmp	r3, #78	@ 0x4e
 800bad8:	d864      	bhi.n	800bba4 <_scanf_float+0x120>
 800bada:	2b40      	cmp	r3, #64	@ 0x40
 800badc:	d83c      	bhi.n	800bb58 <_scanf_float+0xd4>
 800bade:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bae2:	b2c8      	uxtb	r0, r1
 800bae4:	280e      	cmp	r0, #14
 800bae6:	d93a      	bls.n	800bb5e <_scanf_float+0xda>
 800bae8:	f1b9 0f00 	cmp.w	r9, #0
 800baec:	d003      	beq.n	800baf6 <_scanf_float+0x72>
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bafa:	f1ba 0f01 	cmp.w	sl, #1
 800bafe:	f200 8117 	bhi.w	800bd30 <_scanf_float+0x2ac>
 800bb02:	9b01      	ldr	r3, [sp, #4]
 800bb04:	429e      	cmp	r6, r3
 800bb06:	f200 8108 	bhi.w	800bd1a <_scanf_float+0x296>
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	b007      	add	sp, #28
 800bb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb12:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bb16:	2a0d      	cmp	r2, #13
 800bb18:	d8e6      	bhi.n	800bae8 <_scanf_float+0x64>
 800bb1a:	a101      	add	r1, pc, #4	@ (adr r1, 800bb20 <_scanf_float+0x9c>)
 800bb1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb20:	0800bc67 	.word	0x0800bc67
 800bb24:	0800bae9 	.word	0x0800bae9
 800bb28:	0800bae9 	.word	0x0800bae9
 800bb2c:	0800bae9 	.word	0x0800bae9
 800bb30:	0800bcc7 	.word	0x0800bcc7
 800bb34:	0800bc9f 	.word	0x0800bc9f
 800bb38:	0800bae9 	.word	0x0800bae9
 800bb3c:	0800bae9 	.word	0x0800bae9
 800bb40:	0800bc75 	.word	0x0800bc75
 800bb44:	0800bae9 	.word	0x0800bae9
 800bb48:	0800bae9 	.word	0x0800bae9
 800bb4c:	0800bae9 	.word	0x0800bae9
 800bb50:	0800bae9 	.word	0x0800bae9
 800bb54:	0800bc2d 	.word	0x0800bc2d
 800bb58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bb5c:	e7db      	b.n	800bb16 <_scanf_float+0x92>
 800bb5e:	290e      	cmp	r1, #14
 800bb60:	d8c2      	bhi.n	800bae8 <_scanf_float+0x64>
 800bb62:	a001      	add	r0, pc, #4	@ (adr r0, 800bb68 <_scanf_float+0xe4>)
 800bb64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb68:	0800bc1d 	.word	0x0800bc1d
 800bb6c:	0800bae9 	.word	0x0800bae9
 800bb70:	0800bc1d 	.word	0x0800bc1d
 800bb74:	0800bcb3 	.word	0x0800bcb3
 800bb78:	0800bae9 	.word	0x0800bae9
 800bb7c:	0800bbc5 	.word	0x0800bbc5
 800bb80:	0800bc03 	.word	0x0800bc03
 800bb84:	0800bc03 	.word	0x0800bc03
 800bb88:	0800bc03 	.word	0x0800bc03
 800bb8c:	0800bc03 	.word	0x0800bc03
 800bb90:	0800bc03 	.word	0x0800bc03
 800bb94:	0800bc03 	.word	0x0800bc03
 800bb98:	0800bc03 	.word	0x0800bc03
 800bb9c:	0800bc03 	.word	0x0800bc03
 800bba0:	0800bc03 	.word	0x0800bc03
 800bba4:	2b6e      	cmp	r3, #110	@ 0x6e
 800bba6:	d809      	bhi.n	800bbbc <_scanf_float+0x138>
 800bba8:	2b60      	cmp	r3, #96	@ 0x60
 800bbaa:	d8b2      	bhi.n	800bb12 <_scanf_float+0x8e>
 800bbac:	2b54      	cmp	r3, #84	@ 0x54
 800bbae:	d07b      	beq.n	800bca8 <_scanf_float+0x224>
 800bbb0:	2b59      	cmp	r3, #89	@ 0x59
 800bbb2:	d199      	bne.n	800bae8 <_scanf_float+0x64>
 800bbb4:	2d07      	cmp	r5, #7
 800bbb6:	d197      	bne.n	800bae8 <_scanf_float+0x64>
 800bbb8:	2508      	movs	r5, #8
 800bbba:	e02c      	b.n	800bc16 <_scanf_float+0x192>
 800bbbc:	2b74      	cmp	r3, #116	@ 0x74
 800bbbe:	d073      	beq.n	800bca8 <_scanf_float+0x224>
 800bbc0:	2b79      	cmp	r3, #121	@ 0x79
 800bbc2:	e7f6      	b.n	800bbb2 <_scanf_float+0x12e>
 800bbc4:	6821      	ldr	r1, [r4, #0]
 800bbc6:	05c8      	lsls	r0, r1, #23
 800bbc8:	d51b      	bpl.n	800bc02 <_scanf_float+0x17e>
 800bbca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bbce:	6021      	str	r1, [r4, #0]
 800bbd0:	f109 0901 	add.w	r9, r9, #1
 800bbd4:	f1bb 0f00 	cmp.w	fp, #0
 800bbd8:	d003      	beq.n	800bbe2 <_scanf_float+0x15e>
 800bbda:	3201      	adds	r2, #1
 800bbdc:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800bbe0:	60a2      	str	r2, [r4, #8]
 800bbe2:	68a3      	ldr	r3, [r4, #8]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	60a3      	str	r3, [r4, #8]
 800bbe8:	6923      	ldr	r3, [r4, #16]
 800bbea:	3301      	adds	r3, #1
 800bbec:	6123      	str	r3, [r4, #16]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	607b      	str	r3, [r7, #4]
 800bbf6:	f340 8087 	ble.w	800bd08 <_scanf_float+0x284>
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	e765      	b.n	800bace <_scanf_float+0x4a>
 800bc02:	eb1a 0105 	adds.w	r1, sl, r5
 800bc06:	f47f af6f 	bne.w	800bae8 <_scanf_float+0x64>
 800bc0a:	6822      	ldr	r2, [r4, #0]
 800bc0c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bc10:	6022      	str	r2, [r4, #0]
 800bc12:	460d      	mov	r5, r1
 800bc14:	468a      	mov	sl, r1
 800bc16:	f806 3b01 	strb.w	r3, [r6], #1
 800bc1a:	e7e2      	b.n	800bbe2 <_scanf_float+0x15e>
 800bc1c:	6822      	ldr	r2, [r4, #0]
 800bc1e:	0610      	lsls	r0, r2, #24
 800bc20:	f57f af62 	bpl.w	800bae8 <_scanf_float+0x64>
 800bc24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bc28:	6022      	str	r2, [r4, #0]
 800bc2a:	e7f4      	b.n	800bc16 <_scanf_float+0x192>
 800bc2c:	f1ba 0f00 	cmp.w	sl, #0
 800bc30:	d10e      	bne.n	800bc50 <_scanf_float+0x1cc>
 800bc32:	f1b9 0f00 	cmp.w	r9, #0
 800bc36:	d10e      	bne.n	800bc56 <_scanf_float+0x1d2>
 800bc38:	6822      	ldr	r2, [r4, #0]
 800bc3a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bc3e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bc42:	d108      	bne.n	800bc56 <_scanf_float+0x1d2>
 800bc44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc48:	6022      	str	r2, [r4, #0]
 800bc4a:	f04f 0a01 	mov.w	sl, #1
 800bc4e:	e7e2      	b.n	800bc16 <_scanf_float+0x192>
 800bc50:	f1ba 0f02 	cmp.w	sl, #2
 800bc54:	d055      	beq.n	800bd02 <_scanf_float+0x27e>
 800bc56:	2d01      	cmp	r5, #1
 800bc58:	d002      	beq.n	800bc60 <_scanf_float+0x1dc>
 800bc5a:	2d04      	cmp	r5, #4
 800bc5c:	f47f af44 	bne.w	800bae8 <_scanf_float+0x64>
 800bc60:	3501      	adds	r5, #1
 800bc62:	b2ed      	uxtb	r5, r5
 800bc64:	e7d7      	b.n	800bc16 <_scanf_float+0x192>
 800bc66:	f1ba 0f01 	cmp.w	sl, #1
 800bc6a:	f47f af3d 	bne.w	800bae8 <_scanf_float+0x64>
 800bc6e:	f04f 0a02 	mov.w	sl, #2
 800bc72:	e7d0      	b.n	800bc16 <_scanf_float+0x192>
 800bc74:	b97d      	cbnz	r5, 800bc96 <_scanf_float+0x212>
 800bc76:	f1b9 0f00 	cmp.w	r9, #0
 800bc7a:	f47f af38 	bne.w	800baee <_scanf_float+0x6a>
 800bc7e:	6822      	ldr	r2, [r4, #0]
 800bc80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bc84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bc88:	f040 8108 	bne.w	800be9c <_scanf_float+0x418>
 800bc8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc90:	6022      	str	r2, [r4, #0]
 800bc92:	2501      	movs	r5, #1
 800bc94:	e7bf      	b.n	800bc16 <_scanf_float+0x192>
 800bc96:	2d03      	cmp	r5, #3
 800bc98:	d0e2      	beq.n	800bc60 <_scanf_float+0x1dc>
 800bc9a:	2d05      	cmp	r5, #5
 800bc9c:	e7de      	b.n	800bc5c <_scanf_float+0x1d8>
 800bc9e:	2d02      	cmp	r5, #2
 800bca0:	f47f af22 	bne.w	800bae8 <_scanf_float+0x64>
 800bca4:	2503      	movs	r5, #3
 800bca6:	e7b6      	b.n	800bc16 <_scanf_float+0x192>
 800bca8:	2d06      	cmp	r5, #6
 800bcaa:	f47f af1d 	bne.w	800bae8 <_scanf_float+0x64>
 800bcae:	2507      	movs	r5, #7
 800bcb0:	e7b1      	b.n	800bc16 <_scanf_float+0x192>
 800bcb2:	6822      	ldr	r2, [r4, #0]
 800bcb4:	0591      	lsls	r1, r2, #22
 800bcb6:	f57f af17 	bpl.w	800bae8 <_scanf_float+0x64>
 800bcba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bcbe:	6022      	str	r2, [r4, #0]
 800bcc0:	f8cd 9008 	str.w	r9, [sp, #8]
 800bcc4:	e7a7      	b.n	800bc16 <_scanf_float+0x192>
 800bcc6:	6822      	ldr	r2, [r4, #0]
 800bcc8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bccc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bcd0:	d006      	beq.n	800bce0 <_scanf_float+0x25c>
 800bcd2:	0550      	lsls	r0, r2, #21
 800bcd4:	f57f af08 	bpl.w	800bae8 <_scanf_float+0x64>
 800bcd8:	f1b9 0f00 	cmp.w	r9, #0
 800bcdc:	f000 80de 	beq.w	800be9c <_scanf_float+0x418>
 800bce0:	0591      	lsls	r1, r2, #22
 800bce2:	bf58      	it	pl
 800bce4:	9902      	ldrpl	r1, [sp, #8]
 800bce6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bcea:	bf58      	it	pl
 800bcec:	eba9 0101 	subpl.w	r1, r9, r1
 800bcf0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bcf4:	bf58      	it	pl
 800bcf6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bcfa:	6022      	str	r2, [r4, #0]
 800bcfc:	f04f 0900 	mov.w	r9, #0
 800bd00:	e789      	b.n	800bc16 <_scanf_float+0x192>
 800bd02:	f04f 0a03 	mov.w	sl, #3
 800bd06:	e786      	b.n	800bc16 <_scanf_float+0x192>
 800bd08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bd0c:	4639      	mov	r1, r7
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4798      	blx	r3
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f43f aedb 	beq.w	800bace <_scanf_float+0x4a>
 800bd18:	e6e6      	b.n	800bae8 <_scanf_float+0x64>
 800bd1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd22:	463a      	mov	r2, r7
 800bd24:	4640      	mov	r0, r8
 800bd26:	4798      	blx	r3
 800bd28:	6923      	ldr	r3, [r4, #16]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	6123      	str	r3, [r4, #16]
 800bd2e:	e6e8      	b.n	800bb02 <_scanf_float+0x7e>
 800bd30:	1e6b      	subs	r3, r5, #1
 800bd32:	2b06      	cmp	r3, #6
 800bd34:	d824      	bhi.n	800bd80 <_scanf_float+0x2fc>
 800bd36:	2d02      	cmp	r5, #2
 800bd38:	d836      	bhi.n	800bda8 <_scanf_float+0x324>
 800bd3a:	9b01      	ldr	r3, [sp, #4]
 800bd3c:	429e      	cmp	r6, r3
 800bd3e:	f67f aee4 	bls.w	800bb0a <_scanf_float+0x86>
 800bd42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd4a:	463a      	mov	r2, r7
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	4798      	blx	r3
 800bd50:	6923      	ldr	r3, [r4, #16]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	6123      	str	r3, [r4, #16]
 800bd56:	e7f0      	b.n	800bd3a <_scanf_float+0x2b6>
 800bd58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bd60:	463a      	mov	r2, r7
 800bd62:	4640      	mov	r0, r8
 800bd64:	4798      	blx	r3
 800bd66:	6923      	ldr	r3, [r4, #16]
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	6123      	str	r3, [r4, #16]
 800bd6c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bd70:	fa5f fa8a 	uxtb.w	sl, sl
 800bd74:	f1ba 0f02 	cmp.w	sl, #2
 800bd78:	d1ee      	bne.n	800bd58 <_scanf_float+0x2d4>
 800bd7a:	3d03      	subs	r5, #3
 800bd7c:	b2ed      	uxtb	r5, r5
 800bd7e:	1b76      	subs	r6, r6, r5
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	05da      	lsls	r2, r3, #23
 800bd84:	d530      	bpl.n	800bde8 <_scanf_float+0x364>
 800bd86:	055b      	lsls	r3, r3, #21
 800bd88:	d511      	bpl.n	800bdae <_scanf_float+0x32a>
 800bd8a:	9b01      	ldr	r3, [sp, #4]
 800bd8c:	429e      	cmp	r6, r3
 800bd8e:	f67f aebc 	bls.w	800bb0a <_scanf_float+0x86>
 800bd92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd9a:	463a      	mov	r2, r7
 800bd9c:	4640      	mov	r0, r8
 800bd9e:	4798      	blx	r3
 800bda0:	6923      	ldr	r3, [r4, #16]
 800bda2:	3b01      	subs	r3, #1
 800bda4:	6123      	str	r3, [r4, #16]
 800bda6:	e7f0      	b.n	800bd8a <_scanf_float+0x306>
 800bda8:	46aa      	mov	sl, r5
 800bdaa:	46b3      	mov	fp, r6
 800bdac:	e7de      	b.n	800bd6c <_scanf_float+0x2e8>
 800bdae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	2965      	cmp	r1, #101	@ 0x65
 800bdb6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bdba:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800bdbe:	6123      	str	r3, [r4, #16]
 800bdc0:	d00c      	beq.n	800bddc <_scanf_float+0x358>
 800bdc2:	2945      	cmp	r1, #69	@ 0x45
 800bdc4:	d00a      	beq.n	800bddc <_scanf_float+0x358>
 800bdc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bdca:	463a      	mov	r2, r7
 800bdcc:	4640      	mov	r0, r8
 800bdce:	4798      	blx	r3
 800bdd0:	6923      	ldr	r3, [r4, #16]
 800bdd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	1eb5      	subs	r5, r6, #2
 800bdda:	6123      	str	r3, [r4, #16]
 800bddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bde0:	463a      	mov	r2, r7
 800bde2:	4640      	mov	r0, r8
 800bde4:	4798      	blx	r3
 800bde6:	462e      	mov	r6, r5
 800bde8:	6822      	ldr	r2, [r4, #0]
 800bdea:	f012 0210 	ands.w	r2, r2, #16
 800bdee:	d001      	beq.n	800bdf4 <_scanf_float+0x370>
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	e68b      	b.n	800bb0c <_scanf_float+0x88>
 800bdf4:	7032      	strb	r2, [r6, #0]
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bdfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be00:	d11c      	bne.n	800be3c <_scanf_float+0x3b8>
 800be02:	9b02      	ldr	r3, [sp, #8]
 800be04:	454b      	cmp	r3, r9
 800be06:	eba3 0209 	sub.w	r2, r3, r9
 800be0a:	d123      	bne.n	800be54 <_scanf_float+0x3d0>
 800be0c:	9901      	ldr	r1, [sp, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	4640      	mov	r0, r8
 800be12:	f002 fd61 	bl	800e8d8 <_strtod_r>
 800be16:	9b03      	ldr	r3, [sp, #12]
 800be18:	6821      	ldr	r1, [r4, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f011 0f02 	tst.w	r1, #2
 800be20:	ec57 6b10 	vmov	r6, r7, d0
 800be24:	f103 0204 	add.w	r2, r3, #4
 800be28:	d01f      	beq.n	800be6a <_scanf_float+0x3e6>
 800be2a:	9903      	ldr	r1, [sp, #12]
 800be2c:	600a      	str	r2, [r1, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	e9c3 6700 	strd	r6, r7, [r3]
 800be34:	68e3      	ldr	r3, [r4, #12]
 800be36:	3301      	adds	r3, #1
 800be38:	60e3      	str	r3, [r4, #12]
 800be3a:	e7d9      	b.n	800bdf0 <_scanf_float+0x36c>
 800be3c:	9b04      	ldr	r3, [sp, #16]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d0e4      	beq.n	800be0c <_scanf_float+0x388>
 800be42:	9905      	ldr	r1, [sp, #20]
 800be44:	230a      	movs	r3, #10
 800be46:	3101      	adds	r1, #1
 800be48:	4640      	mov	r0, r8
 800be4a:	f002 fdc5 	bl	800e9d8 <_strtol_r>
 800be4e:	9b04      	ldr	r3, [sp, #16]
 800be50:	9e05      	ldr	r6, [sp, #20]
 800be52:	1ac2      	subs	r2, r0, r3
 800be54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800be58:	429e      	cmp	r6, r3
 800be5a:	bf28      	it	cs
 800be5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800be60:	4910      	ldr	r1, [pc, #64]	@ (800bea4 <_scanf_float+0x420>)
 800be62:	4630      	mov	r0, r6
 800be64:	f000 f954 	bl	800c110 <siprintf>
 800be68:	e7d0      	b.n	800be0c <_scanf_float+0x388>
 800be6a:	f011 0f04 	tst.w	r1, #4
 800be6e:	9903      	ldr	r1, [sp, #12]
 800be70:	600a      	str	r2, [r1, #0]
 800be72:	d1dc      	bne.n	800be2e <_scanf_float+0x3aa>
 800be74:	681d      	ldr	r5, [r3, #0]
 800be76:	4632      	mov	r2, r6
 800be78:	463b      	mov	r3, r7
 800be7a:	4630      	mov	r0, r6
 800be7c:	4639      	mov	r1, r7
 800be7e:	f7f4 fe7d 	bl	8000b7c <__aeabi_dcmpun>
 800be82:	b128      	cbz	r0, 800be90 <_scanf_float+0x40c>
 800be84:	4808      	ldr	r0, [pc, #32]	@ (800bea8 <_scanf_float+0x424>)
 800be86:	f000 fb1f 	bl	800c4c8 <nanf>
 800be8a:	ed85 0a00 	vstr	s0, [r5]
 800be8e:	e7d1      	b.n	800be34 <_scanf_float+0x3b0>
 800be90:	4630      	mov	r0, r6
 800be92:	4639      	mov	r1, r7
 800be94:	f7f4 fed0 	bl	8000c38 <__aeabi_d2f>
 800be98:	6028      	str	r0, [r5, #0]
 800be9a:	e7cb      	b.n	800be34 <_scanf_float+0x3b0>
 800be9c:	f04f 0900 	mov.w	r9, #0
 800bea0:	e629      	b.n	800baf6 <_scanf_float+0x72>
 800bea2:	bf00      	nop
 800bea4:	0800fe24 	.word	0x0800fe24
 800bea8:	080101bd 	.word	0x080101bd

0800beac <std>:
 800beac:	2300      	movs	r3, #0
 800beae:	b510      	push	{r4, lr}
 800beb0:	4604      	mov	r4, r0
 800beb2:	e9c0 3300 	strd	r3, r3, [r0]
 800beb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800beba:	6083      	str	r3, [r0, #8]
 800bebc:	8181      	strh	r1, [r0, #12]
 800bebe:	6643      	str	r3, [r0, #100]	@ 0x64
 800bec0:	81c2      	strh	r2, [r0, #14]
 800bec2:	6183      	str	r3, [r0, #24]
 800bec4:	4619      	mov	r1, r3
 800bec6:	2208      	movs	r2, #8
 800bec8:	305c      	adds	r0, #92	@ 0x5c
 800beca:	f000 fa19 	bl	800c300 <memset>
 800bece:	4b0d      	ldr	r3, [pc, #52]	@ (800bf04 <std+0x58>)
 800bed0:	6263      	str	r3, [r4, #36]	@ 0x24
 800bed2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf08 <std+0x5c>)
 800bed4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bed6:	4b0d      	ldr	r3, [pc, #52]	@ (800bf0c <std+0x60>)
 800bed8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800beda:	4b0d      	ldr	r3, [pc, #52]	@ (800bf10 <std+0x64>)
 800bedc:	6323      	str	r3, [r4, #48]	@ 0x30
 800bede:	4b0d      	ldr	r3, [pc, #52]	@ (800bf14 <std+0x68>)
 800bee0:	6224      	str	r4, [r4, #32]
 800bee2:	429c      	cmp	r4, r3
 800bee4:	d006      	beq.n	800bef4 <std+0x48>
 800bee6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800beea:	4294      	cmp	r4, r2
 800beec:	d002      	beq.n	800bef4 <std+0x48>
 800beee:	33d0      	adds	r3, #208	@ 0xd0
 800bef0:	429c      	cmp	r4, r3
 800bef2:	d105      	bne.n	800bf00 <std+0x54>
 800bef4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befc:	f000 bad2 	b.w	800c4a4 <__retarget_lock_init_recursive>
 800bf00:	bd10      	pop	{r4, pc}
 800bf02:	bf00      	nop
 800bf04:	0800c151 	.word	0x0800c151
 800bf08:	0800c173 	.word	0x0800c173
 800bf0c:	0800c1ab 	.word	0x0800c1ab
 800bf10:	0800c1cf 	.word	0x0800c1cf
 800bf14:	20001340 	.word	0x20001340

0800bf18 <stdio_exit_handler>:
 800bf18:	4a02      	ldr	r2, [pc, #8]	@ (800bf24 <stdio_exit_handler+0xc>)
 800bf1a:	4903      	ldr	r1, [pc, #12]	@ (800bf28 <stdio_exit_handler+0x10>)
 800bf1c:	4803      	ldr	r0, [pc, #12]	@ (800bf2c <stdio_exit_handler+0x14>)
 800bf1e:	f000 b869 	b.w	800bff4 <_fwalk_sglue>
 800bf22:	bf00      	nop
 800bf24:	20000010 	.word	0x20000010
 800bf28:	0800f019 	.word	0x0800f019
 800bf2c:	20000020 	.word	0x20000020

0800bf30 <cleanup_stdio>:
 800bf30:	6841      	ldr	r1, [r0, #4]
 800bf32:	4b0c      	ldr	r3, [pc, #48]	@ (800bf64 <cleanup_stdio+0x34>)
 800bf34:	4299      	cmp	r1, r3
 800bf36:	b510      	push	{r4, lr}
 800bf38:	4604      	mov	r4, r0
 800bf3a:	d001      	beq.n	800bf40 <cleanup_stdio+0x10>
 800bf3c:	f003 f86c 	bl	800f018 <_fflush_r>
 800bf40:	68a1      	ldr	r1, [r4, #8]
 800bf42:	4b09      	ldr	r3, [pc, #36]	@ (800bf68 <cleanup_stdio+0x38>)
 800bf44:	4299      	cmp	r1, r3
 800bf46:	d002      	beq.n	800bf4e <cleanup_stdio+0x1e>
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f003 f865 	bl	800f018 <_fflush_r>
 800bf4e:	68e1      	ldr	r1, [r4, #12]
 800bf50:	4b06      	ldr	r3, [pc, #24]	@ (800bf6c <cleanup_stdio+0x3c>)
 800bf52:	4299      	cmp	r1, r3
 800bf54:	d004      	beq.n	800bf60 <cleanup_stdio+0x30>
 800bf56:	4620      	mov	r0, r4
 800bf58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf5c:	f003 b85c 	b.w	800f018 <_fflush_r>
 800bf60:	bd10      	pop	{r4, pc}
 800bf62:	bf00      	nop
 800bf64:	20001340 	.word	0x20001340
 800bf68:	200013a8 	.word	0x200013a8
 800bf6c:	20001410 	.word	0x20001410

0800bf70 <global_stdio_init.part.0>:
 800bf70:	b510      	push	{r4, lr}
 800bf72:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa0 <global_stdio_init.part.0+0x30>)
 800bf74:	4c0b      	ldr	r4, [pc, #44]	@ (800bfa4 <global_stdio_init.part.0+0x34>)
 800bf76:	4a0c      	ldr	r2, [pc, #48]	@ (800bfa8 <global_stdio_init.part.0+0x38>)
 800bf78:	601a      	str	r2, [r3, #0]
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	2104      	movs	r1, #4
 800bf80:	f7ff ff94 	bl	800beac <std>
 800bf84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf88:	2201      	movs	r2, #1
 800bf8a:	2109      	movs	r1, #9
 800bf8c:	f7ff ff8e 	bl	800beac <std>
 800bf90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf94:	2202      	movs	r2, #2
 800bf96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf9a:	2112      	movs	r1, #18
 800bf9c:	f7ff bf86 	b.w	800beac <std>
 800bfa0:	20001478 	.word	0x20001478
 800bfa4:	20001340 	.word	0x20001340
 800bfa8:	0800bf19 	.word	0x0800bf19

0800bfac <__sfp_lock_acquire>:
 800bfac:	4801      	ldr	r0, [pc, #4]	@ (800bfb4 <__sfp_lock_acquire+0x8>)
 800bfae:	f000 ba7a 	b.w	800c4a6 <__retarget_lock_acquire_recursive>
 800bfb2:	bf00      	nop
 800bfb4:	20001481 	.word	0x20001481

0800bfb8 <__sfp_lock_release>:
 800bfb8:	4801      	ldr	r0, [pc, #4]	@ (800bfc0 <__sfp_lock_release+0x8>)
 800bfba:	f000 ba75 	b.w	800c4a8 <__retarget_lock_release_recursive>
 800bfbe:	bf00      	nop
 800bfc0:	20001481 	.word	0x20001481

0800bfc4 <__sinit>:
 800bfc4:	b510      	push	{r4, lr}
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	f7ff fff0 	bl	800bfac <__sfp_lock_acquire>
 800bfcc:	6a23      	ldr	r3, [r4, #32]
 800bfce:	b11b      	cbz	r3, 800bfd8 <__sinit+0x14>
 800bfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd4:	f7ff bff0 	b.w	800bfb8 <__sfp_lock_release>
 800bfd8:	4b04      	ldr	r3, [pc, #16]	@ (800bfec <__sinit+0x28>)
 800bfda:	6223      	str	r3, [r4, #32]
 800bfdc:	4b04      	ldr	r3, [pc, #16]	@ (800bff0 <__sinit+0x2c>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1f5      	bne.n	800bfd0 <__sinit+0xc>
 800bfe4:	f7ff ffc4 	bl	800bf70 <global_stdio_init.part.0>
 800bfe8:	e7f2      	b.n	800bfd0 <__sinit+0xc>
 800bfea:	bf00      	nop
 800bfec:	0800bf31 	.word	0x0800bf31
 800bff0:	20001478 	.word	0x20001478

0800bff4 <_fwalk_sglue>:
 800bff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff8:	4607      	mov	r7, r0
 800bffa:	4688      	mov	r8, r1
 800bffc:	4614      	mov	r4, r2
 800bffe:	2600      	movs	r6, #0
 800c000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c004:	f1b9 0901 	subs.w	r9, r9, #1
 800c008:	d505      	bpl.n	800c016 <_fwalk_sglue+0x22>
 800c00a:	6824      	ldr	r4, [r4, #0]
 800c00c:	2c00      	cmp	r4, #0
 800c00e:	d1f7      	bne.n	800c000 <_fwalk_sglue+0xc>
 800c010:	4630      	mov	r0, r6
 800c012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c016:	89ab      	ldrh	r3, [r5, #12]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d907      	bls.n	800c02c <_fwalk_sglue+0x38>
 800c01c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c020:	3301      	adds	r3, #1
 800c022:	d003      	beq.n	800c02c <_fwalk_sglue+0x38>
 800c024:	4629      	mov	r1, r5
 800c026:	4638      	mov	r0, r7
 800c028:	47c0      	blx	r8
 800c02a:	4306      	orrs	r6, r0
 800c02c:	3568      	adds	r5, #104	@ 0x68
 800c02e:	e7e9      	b.n	800c004 <_fwalk_sglue+0x10>

0800c030 <iprintf>:
 800c030:	b40f      	push	{r0, r1, r2, r3}
 800c032:	b507      	push	{r0, r1, r2, lr}
 800c034:	4906      	ldr	r1, [pc, #24]	@ (800c050 <iprintf+0x20>)
 800c036:	ab04      	add	r3, sp, #16
 800c038:	6808      	ldr	r0, [r1, #0]
 800c03a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c03e:	6881      	ldr	r1, [r0, #8]
 800c040:	9301      	str	r3, [sp, #4]
 800c042:	f002 fe4d 	bl	800ece0 <_vfiprintf_r>
 800c046:	b003      	add	sp, #12
 800c048:	f85d eb04 	ldr.w	lr, [sp], #4
 800c04c:	b004      	add	sp, #16
 800c04e:	4770      	bx	lr
 800c050:	2000001c 	.word	0x2000001c

0800c054 <_puts_r>:
 800c054:	6a03      	ldr	r3, [r0, #32]
 800c056:	b570      	push	{r4, r5, r6, lr}
 800c058:	6884      	ldr	r4, [r0, #8]
 800c05a:	4605      	mov	r5, r0
 800c05c:	460e      	mov	r6, r1
 800c05e:	b90b      	cbnz	r3, 800c064 <_puts_r+0x10>
 800c060:	f7ff ffb0 	bl	800bfc4 <__sinit>
 800c064:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c066:	07db      	lsls	r3, r3, #31
 800c068:	d405      	bmi.n	800c076 <_puts_r+0x22>
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	0598      	lsls	r0, r3, #22
 800c06e:	d402      	bmi.n	800c076 <_puts_r+0x22>
 800c070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c072:	f000 fa18 	bl	800c4a6 <__retarget_lock_acquire_recursive>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	0719      	lsls	r1, r3, #28
 800c07a:	d502      	bpl.n	800c082 <_puts_r+0x2e>
 800c07c:	6923      	ldr	r3, [r4, #16]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d135      	bne.n	800c0ee <_puts_r+0x9a>
 800c082:	4621      	mov	r1, r4
 800c084:	4628      	mov	r0, r5
 800c086:	f000 f8e5 	bl	800c254 <__swsetup_r>
 800c08a:	b380      	cbz	r0, 800c0ee <_puts_r+0x9a>
 800c08c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c090:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c092:	07da      	lsls	r2, r3, #31
 800c094:	d405      	bmi.n	800c0a2 <_puts_r+0x4e>
 800c096:	89a3      	ldrh	r3, [r4, #12]
 800c098:	059b      	lsls	r3, r3, #22
 800c09a:	d402      	bmi.n	800c0a2 <_puts_r+0x4e>
 800c09c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c09e:	f000 fa03 	bl	800c4a8 <__retarget_lock_release_recursive>
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	bd70      	pop	{r4, r5, r6, pc}
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	da04      	bge.n	800c0b4 <_puts_r+0x60>
 800c0aa:	69a2      	ldr	r2, [r4, #24]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	dc17      	bgt.n	800c0e0 <_puts_r+0x8c>
 800c0b0:	290a      	cmp	r1, #10
 800c0b2:	d015      	beq.n	800c0e0 <_puts_r+0x8c>
 800c0b4:	6823      	ldr	r3, [r4, #0]
 800c0b6:	1c5a      	adds	r2, r3, #1
 800c0b8:	6022      	str	r2, [r4, #0]
 800c0ba:	7019      	strb	r1, [r3, #0]
 800c0bc:	68a3      	ldr	r3, [r4, #8]
 800c0be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	60a3      	str	r3, [r4, #8]
 800c0c6:	2900      	cmp	r1, #0
 800c0c8:	d1ed      	bne.n	800c0a6 <_puts_r+0x52>
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	da11      	bge.n	800c0f2 <_puts_r+0x9e>
 800c0ce:	4622      	mov	r2, r4
 800c0d0:	210a      	movs	r1, #10
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f000 f87f 	bl	800c1d6 <__swbuf_r>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d0d7      	beq.n	800c08c <_puts_r+0x38>
 800c0dc:	250a      	movs	r5, #10
 800c0de:	e7d7      	b.n	800c090 <_puts_r+0x3c>
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f000 f877 	bl	800c1d6 <__swbuf_r>
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d1e7      	bne.n	800c0bc <_puts_r+0x68>
 800c0ec:	e7ce      	b.n	800c08c <_puts_r+0x38>
 800c0ee:	3e01      	subs	r6, #1
 800c0f0:	e7e4      	b.n	800c0bc <_puts_r+0x68>
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	1c5a      	adds	r2, r3, #1
 800c0f6:	6022      	str	r2, [r4, #0]
 800c0f8:	220a      	movs	r2, #10
 800c0fa:	701a      	strb	r2, [r3, #0]
 800c0fc:	e7ee      	b.n	800c0dc <_puts_r+0x88>
	...

0800c100 <puts>:
 800c100:	4b02      	ldr	r3, [pc, #8]	@ (800c10c <puts+0xc>)
 800c102:	4601      	mov	r1, r0
 800c104:	6818      	ldr	r0, [r3, #0]
 800c106:	f7ff bfa5 	b.w	800c054 <_puts_r>
 800c10a:	bf00      	nop
 800c10c:	2000001c 	.word	0x2000001c

0800c110 <siprintf>:
 800c110:	b40e      	push	{r1, r2, r3}
 800c112:	b500      	push	{lr}
 800c114:	b09c      	sub	sp, #112	@ 0x70
 800c116:	ab1d      	add	r3, sp, #116	@ 0x74
 800c118:	9002      	str	r0, [sp, #8]
 800c11a:	9006      	str	r0, [sp, #24]
 800c11c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c120:	4809      	ldr	r0, [pc, #36]	@ (800c148 <siprintf+0x38>)
 800c122:	9107      	str	r1, [sp, #28]
 800c124:	9104      	str	r1, [sp, #16]
 800c126:	4909      	ldr	r1, [pc, #36]	@ (800c14c <siprintf+0x3c>)
 800c128:	f853 2b04 	ldr.w	r2, [r3], #4
 800c12c:	9105      	str	r1, [sp, #20]
 800c12e:	6800      	ldr	r0, [r0, #0]
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	a902      	add	r1, sp, #8
 800c134:	f002 fcae 	bl	800ea94 <_svfiprintf_r>
 800c138:	9b02      	ldr	r3, [sp, #8]
 800c13a:	2200      	movs	r2, #0
 800c13c:	701a      	strb	r2, [r3, #0]
 800c13e:	b01c      	add	sp, #112	@ 0x70
 800c140:	f85d eb04 	ldr.w	lr, [sp], #4
 800c144:	b003      	add	sp, #12
 800c146:	4770      	bx	lr
 800c148:	2000001c 	.word	0x2000001c
 800c14c:	ffff0208 	.word	0xffff0208

0800c150 <__sread>:
 800c150:	b510      	push	{r4, lr}
 800c152:	460c      	mov	r4, r1
 800c154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c158:	f000 f956 	bl	800c408 <_read_r>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	bfab      	itete	ge
 800c160:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c162:	89a3      	ldrhlt	r3, [r4, #12]
 800c164:	181b      	addge	r3, r3, r0
 800c166:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c16a:	bfac      	ite	ge
 800c16c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c16e:	81a3      	strhlt	r3, [r4, #12]
 800c170:	bd10      	pop	{r4, pc}

0800c172 <__swrite>:
 800c172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c176:	461f      	mov	r7, r3
 800c178:	898b      	ldrh	r3, [r1, #12]
 800c17a:	05db      	lsls	r3, r3, #23
 800c17c:	4605      	mov	r5, r0
 800c17e:	460c      	mov	r4, r1
 800c180:	4616      	mov	r6, r2
 800c182:	d505      	bpl.n	800c190 <__swrite+0x1e>
 800c184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c188:	2302      	movs	r3, #2
 800c18a:	2200      	movs	r2, #0
 800c18c:	f000 f92a 	bl	800c3e4 <_lseek_r>
 800c190:	89a3      	ldrh	r3, [r4, #12]
 800c192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c196:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c19a:	81a3      	strh	r3, [r4, #12]
 800c19c:	4632      	mov	r2, r6
 800c19e:	463b      	mov	r3, r7
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a6:	f000 b941 	b.w	800c42c <_write_r>

0800c1aa <__sseek>:
 800c1aa:	b510      	push	{r4, lr}
 800c1ac:	460c      	mov	r4, r1
 800c1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b2:	f000 f917 	bl	800c3e4 <_lseek_r>
 800c1b6:	1c43      	adds	r3, r0, #1
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	bf15      	itete	ne
 800c1bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1c6:	81a3      	strheq	r3, [r4, #12]
 800c1c8:	bf18      	it	ne
 800c1ca:	81a3      	strhne	r3, [r4, #12]
 800c1cc:	bd10      	pop	{r4, pc}

0800c1ce <__sclose>:
 800c1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d2:	f000 b8a1 	b.w	800c318 <_close_r>

0800c1d6 <__swbuf_r>:
 800c1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d8:	460e      	mov	r6, r1
 800c1da:	4614      	mov	r4, r2
 800c1dc:	4605      	mov	r5, r0
 800c1de:	b118      	cbz	r0, 800c1e8 <__swbuf_r+0x12>
 800c1e0:	6a03      	ldr	r3, [r0, #32]
 800c1e2:	b90b      	cbnz	r3, 800c1e8 <__swbuf_r+0x12>
 800c1e4:	f7ff feee 	bl	800bfc4 <__sinit>
 800c1e8:	69a3      	ldr	r3, [r4, #24]
 800c1ea:	60a3      	str	r3, [r4, #8]
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	071a      	lsls	r2, r3, #28
 800c1f0:	d501      	bpl.n	800c1f6 <__swbuf_r+0x20>
 800c1f2:	6923      	ldr	r3, [r4, #16]
 800c1f4:	b943      	cbnz	r3, 800c208 <__swbuf_r+0x32>
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f000 f82b 	bl	800c254 <__swsetup_r>
 800c1fe:	b118      	cbz	r0, 800c208 <__swbuf_r+0x32>
 800c200:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c204:	4638      	mov	r0, r7
 800c206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	6922      	ldr	r2, [r4, #16]
 800c20c:	1a98      	subs	r0, r3, r2
 800c20e:	6963      	ldr	r3, [r4, #20]
 800c210:	b2f6      	uxtb	r6, r6
 800c212:	4283      	cmp	r3, r0
 800c214:	4637      	mov	r7, r6
 800c216:	dc05      	bgt.n	800c224 <__swbuf_r+0x4e>
 800c218:	4621      	mov	r1, r4
 800c21a:	4628      	mov	r0, r5
 800c21c:	f002 fefc 	bl	800f018 <_fflush_r>
 800c220:	2800      	cmp	r0, #0
 800c222:	d1ed      	bne.n	800c200 <__swbuf_r+0x2a>
 800c224:	68a3      	ldr	r3, [r4, #8]
 800c226:	3b01      	subs	r3, #1
 800c228:	60a3      	str	r3, [r4, #8]
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	1c5a      	adds	r2, r3, #1
 800c22e:	6022      	str	r2, [r4, #0]
 800c230:	701e      	strb	r6, [r3, #0]
 800c232:	6962      	ldr	r2, [r4, #20]
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	429a      	cmp	r2, r3
 800c238:	d004      	beq.n	800c244 <__swbuf_r+0x6e>
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	07db      	lsls	r3, r3, #31
 800c23e:	d5e1      	bpl.n	800c204 <__swbuf_r+0x2e>
 800c240:	2e0a      	cmp	r6, #10
 800c242:	d1df      	bne.n	800c204 <__swbuf_r+0x2e>
 800c244:	4621      	mov	r1, r4
 800c246:	4628      	mov	r0, r5
 800c248:	f002 fee6 	bl	800f018 <_fflush_r>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d0d9      	beq.n	800c204 <__swbuf_r+0x2e>
 800c250:	e7d6      	b.n	800c200 <__swbuf_r+0x2a>
	...

0800c254 <__swsetup_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4b29      	ldr	r3, [pc, #164]	@ (800c2fc <__swsetup_r+0xa8>)
 800c258:	4605      	mov	r5, r0
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	460c      	mov	r4, r1
 800c25e:	b118      	cbz	r0, 800c268 <__swsetup_r+0x14>
 800c260:	6a03      	ldr	r3, [r0, #32]
 800c262:	b90b      	cbnz	r3, 800c268 <__swsetup_r+0x14>
 800c264:	f7ff feae 	bl	800bfc4 <__sinit>
 800c268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26c:	0719      	lsls	r1, r3, #28
 800c26e:	d422      	bmi.n	800c2b6 <__swsetup_r+0x62>
 800c270:	06da      	lsls	r2, r3, #27
 800c272:	d407      	bmi.n	800c284 <__swsetup_r+0x30>
 800c274:	2209      	movs	r2, #9
 800c276:	602a      	str	r2, [r5, #0]
 800c278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c27c:	81a3      	strh	r3, [r4, #12]
 800c27e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c282:	e033      	b.n	800c2ec <__swsetup_r+0x98>
 800c284:	0758      	lsls	r0, r3, #29
 800c286:	d512      	bpl.n	800c2ae <__swsetup_r+0x5a>
 800c288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c28a:	b141      	cbz	r1, 800c29e <__swsetup_r+0x4a>
 800c28c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c290:	4299      	cmp	r1, r3
 800c292:	d002      	beq.n	800c29a <__swsetup_r+0x46>
 800c294:	4628      	mov	r0, r5
 800c296:	f000 ff6b 	bl	800d170 <_free_r>
 800c29a:	2300      	movs	r3, #0
 800c29c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	6063      	str	r3, [r4, #4]
 800c2aa:	6923      	ldr	r3, [r4, #16]
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f043 0308 	orr.w	r3, r3, #8
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	6923      	ldr	r3, [r4, #16]
 800c2b8:	b94b      	cbnz	r3, 800c2ce <__swsetup_r+0x7a>
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2c4:	d003      	beq.n	800c2ce <__swsetup_r+0x7a>
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f002 fef3 	bl	800f0b4 <__smakebuf_r>
 800c2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d2:	f013 0201 	ands.w	r2, r3, #1
 800c2d6:	d00a      	beq.n	800c2ee <__swsetup_r+0x9a>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	60a2      	str	r2, [r4, #8]
 800c2dc:	6962      	ldr	r2, [r4, #20]
 800c2de:	4252      	negs	r2, r2
 800c2e0:	61a2      	str	r2, [r4, #24]
 800c2e2:	6922      	ldr	r2, [r4, #16]
 800c2e4:	b942      	cbnz	r2, 800c2f8 <__swsetup_r+0xa4>
 800c2e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2ea:	d1c5      	bne.n	800c278 <__swsetup_r+0x24>
 800c2ec:	bd38      	pop	{r3, r4, r5, pc}
 800c2ee:	0799      	lsls	r1, r3, #30
 800c2f0:	bf58      	it	pl
 800c2f2:	6962      	ldrpl	r2, [r4, #20]
 800c2f4:	60a2      	str	r2, [r4, #8]
 800c2f6:	e7f4      	b.n	800c2e2 <__swsetup_r+0x8e>
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	e7f7      	b.n	800c2ec <__swsetup_r+0x98>
 800c2fc:	2000001c 	.word	0x2000001c

0800c300 <memset>:
 800c300:	4402      	add	r2, r0
 800c302:	4603      	mov	r3, r0
 800c304:	4293      	cmp	r3, r2
 800c306:	d100      	bne.n	800c30a <memset+0xa>
 800c308:	4770      	bx	lr
 800c30a:	f803 1b01 	strb.w	r1, [r3], #1
 800c30e:	e7f9      	b.n	800c304 <memset+0x4>

0800c310 <_localeconv_r>:
 800c310:	4800      	ldr	r0, [pc, #0]	@ (800c314 <_localeconv_r+0x4>)
 800c312:	4770      	bx	lr
 800c314:	2000015c 	.word	0x2000015c

0800c318 <_close_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	4d06      	ldr	r5, [pc, #24]	@ (800c334 <_close_r+0x1c>)
 800c31c:	2300      	movs	r3, #0
 800c31e:	4604      	mov	r4, r0
 800c320:	4608      	mov	r0, r1
 800c322:	602b      	str	r3, [r5, #0]
 800c324:	f7f5 fca2 	bl	8001c6c <_close>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_close_r+0x1a>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_close_r+0x1a>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	2000147c 	.word	0x2000147c

0800c338 <_reclaim_reent>:
 800c338:	4b29      	ldr	r3, [pc, #164]	@ (800c3e0 <_reclaim_reent+0xa8>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4283      	cmp	r3, r0
 800c33e:	b570      	push	{r4, r5, r6, lr}
 800c340:	4604      	mov	r4, r0
 800c342:	d04b      	beq.n	800c3dc <_reclaim_reent+0xa4>
 800c344:	69c3      	ldr	r3, [r0, #28]
 800c346:	b1ab      	cbz	r3, 800c374 <_reclaim_reent+0x3c>
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	b16b      	cbz	r3, 800c368 <_reclaim_reent+0x30>
 800c34c:	2500      	movs	r5, #0
 800c34e:	69e3      	ldr	r3, [r4, #28]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	5959      	ldr	r1, [r3, r5]
 800c354:	2900      	cmp	r1, #0
 800c356:	d13b      	bne.n	800c3d0 <_reclaim_reent+0x98>
 800c358:	3504      	adds	r5, #4
 800c35a:	2d80      	cmp	r5, #128	@ 0x80
 800c35c:	d1f7      	bne.n	800c34e <_reclaim_reent+0x16>
 800c35e:	69e3      	ldr	r3, [r4, #28]
 800c360:	4620      	mov	r0, r4
 800c362:	68d9      	ldr	r1, [r3, #12]
 800c364:	f000 ff04 	bl	800d170 <_free_r>
 800c368:	69e3      	ldr	r3, [r4, #28]
 800c36a:	6819      	ldr	r1, [r3, #0]
 800c36c:	b111      	cbz	r1, 800c374 <_reclaim_reent+0x3c>
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 fefe 	bl	800d170 <_free_r>
 800c374:	6961      	ldr	r1, [r4, #20]
 800c376:	b111      	cbz	r1, 800c37e <_reclaim_reent+0x46>
 800c378:	4620      	mov	r0, r4
 800c37a:	f000 fef9 	bl	800d170 <_free_r>
 800c37e:	69e1      	ldr	r1, [r4, #28]
 800c380:	b111      	cbz	r1, 800c388 <_reclaim_reent+0x50>
 800c382:	4620      	mov	r0, r4
 800c384:	f000 fef4 	bl	800d170 <_free_r>
 800c388:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c38a:	b111      	cbz	r1, 800c392 <_reclaim_reent+0x5a>
 800c38c:	4620      	mov	r0, r4
 800c38e:	f000 feef 	bl	800d170 <_free_r>
 800c392:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c394:	b111      	cbz	r1, 800c39c <_reclaim_reent+0x64>
 800c396:	4620      	mov	r0, r4
 800c398:	f000 feea 	bl	800d170 <_free_r>
 800c39c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c39e:	b111      	cbz	r1, 800c3a6 <_reclaim_reent+0x6e>
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f000 fee5 	bl	800d170 <_free_r>
 800c3a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c3a8:	b111      	cbz	r1, 800c3b0 <_reclaim_reent+0x78>
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f000 fee0 	bl	800d170 <_free_r>
 800c3b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c3b2:	b111      	cbz	r1, 800c3ba <_reclaim_reent+0x82>
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f000 fedb 	bl	800d170 <_free_r>
 800c3ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c3bc:	b111      	cbz	r1, 800c3c4 <_reclaim_reent+0x8c>
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f000 fed6 	bl	800d170 <_free_r>
 800c3c4:	6a23      	ldr	r3, [r4, #32]
 800c3c6:	b14b      	cbz	r3, 800c3dc <_reclaim_reent+0xa4>
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3ce:	4718      	bx	r3
 800c3d0:	680e      	ldr	r6, [r1, #0]
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 fecc 	bl	800d170 <_free_r>
 800c3d8:	4631      	mov	r1, r6
 800c3da:	e7bb      	b.n	800c354 <_reclaim_reent+0x1c>
 800c3dc:	bd70      	pop	{r4, r5, r6, pc}
 800c3de:	bf00      	nop
 800c3e0:	2000001c 	.word	0x2000001c

0800c3e4 <_lseek_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4d07      	ldr	r5, [pc, #28]	@ (800c404 <_lseek_r+0x20>)
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	4608      	mov	r0, r1
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	602a      	str	r2, [r5, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f7f5 fc61 	bl	8001cba <_lseek>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_lseek_r+0x1e>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_lseek_r+0x1e>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	2000147c 	.word	0x2000147c

0800c408 <_read_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d07      	ldr	r5, [pc, #28]	@ (800c428 <_read_r+0x20>)
 800c40c:	4604      	mov	r4, r0
 800c40e:	4608      	mov	r0, r1
 800c410:	4611      	mov	r1, r2
 800c412:	2200      	movs	r2, #0
 800c414:	602a      	str	r2, [r5, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	f7f5 fbef 	bl	8001bfa <_read>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_read_r+0x1e>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_read_r+0x1e>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	2000147c 	.word	0x2000147c

0800c42c <_write_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4d07      	ldr	r5, [pc, #28]	@ (800c44c <_write_r+0x20>)
 800c430:	4604      	mov	r4, r0
 800c432:	4608      	mov	r0, r1
 800c434:	4611      	mov	r1, r2
 800c436:	2200      	movs	r2, #0
 800c438:	602a      	str	r2, [r5, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	f7f5 fbfa 	bl	8001c34 <_write>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_write_r+0x1e>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_write_r+0x1e>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	2000147c 	.word	0x2000147c

0800c450 <__errno>:
 800c450:	4b01      	ldr	r3, [pc, #4]	@ (800c458 <__errno+0x8>)
 800c452:	6818      	ldr	r0, [r3, #0]
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	2000001c 	.word	0x2000001c

0800c45c <__libc_init_array>:
 800c45c:	b570      	push	{r4, r5, r6, lr}
 800c45e:	4d0d      	ldr	r5, [pc, #52]	@ (800c494 <__libc_init_array+0x38>)
 800c460:	4c0d      	ldr	r4, [pc, #52]	@ (800c498 <__libc_init_array+0x3c>)
 800c462:	1b64      	subs	r4, r4, r5
 800c464:	10a4      	asrs	r4, r4, #2
 800c466:	2600      	movs	r6, #0
 800c468:	42a6      	cmp	r6, r4
 800c46a:	d109      	bne.n	800c480 <__libc_init_array+0x24>
 800c46c:	4d0b      	ldr	r5, [pc, #44]	@ (800c49c <__libc_init_array+0x40>)
 800c46e:	4c0c      	ldr	r4, [pc, #48]	@ (800c4a0 <__libc_init_array+0x44>)
 800c470:	f003 fae0 	bl	800fa34 <_init>
 800c474:	1b64      	subs	r4, r4, r5
 800c476:	10a4      	asrs	r4, r4, #2
 800c478:	2600      	movs	r6, #0
 800c47a:	42a6      	cmp	r6, r4
 800c47c:	d105      	bne.n	800c48a <__libc_init_array+0x2e>
 800c47e:	bd70      	pop	{r4, r5, r6, pc}
 800c480:	f855 3b04 	ldr.w	r3, [r5], #4
 800c484:	4798      	blx	r3
 800c486:	3601      	adds	r6, #1
 800c488:	e7ee      	b.n	800c468 <__libc_init_array+0xc>
 800c48a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c48e:	4798      	blx	r3
 800c490:	3601      	adds	r6, #1
 800c492:	e7f2      	b.n	800c47a <__libc_init_array+0x1e>
 800c494:	08010228 	.word	0x08010228
 800c498:	08010228 	.word	0x08010228
 800c49c:	08010228 	.word	0x08010228
 800c4a0:	0801022c 	.word	0x0801022c

0800c4a4 <__retarget_lock_init_recursive>:
 800c4a4:	4770      	bx	lr

0800c4a6 <__retarget_lock_acquire_recursive>:
 800c4a6:	4770      	bx	lr

0800c4a8 <__retarget_lock_release_recursive>:
 800c4a8:	4770      	bx	lr

0800c4aa <memcpy>:
 800c4aa:	440a      	add	r2, r1
 800c4ac:	4291      	cmp	r1, r2
 800c4ae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c4b2:	d100      	bne.n	800c4b6 <memcpy+0xc>
 800c4b4:	4770      	bx	lr
 800c4b6:	b510      	push	{r4, lr}
 800c4b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4c0:	4291      	cmp	r1, r2
 800c4c2:	d1f9      	bne.n	800c4b8 <memcpy+0xe>
 800c4c4:	bd10      	pop	{r4, pc}
	...

0800c4c8 <nanf>:
 800c4c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c4d0 <nanf+0x8>
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	7fc00000 	.word	0x7fc00000

0800c4d4 <quorem>:
 800c4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d8:	6903      	ldr	r3, [r0, #16]
 800c4da:	690c      	ldr	r4, [r1, #16]
 800c4dc:	42a3      	cmp	r3, r4
 800c4de:	4607      	mov	r7, r0
 800c4e0:	db7e      	blt.n	800c5e0 <quorem+0x10c>
 800c4e2:	3c01      	subs	r4, #1
 800c4e4:	f101 0814 	add.w	r8, r1, #20
 800c4e8:	00a3      	lsls	r3, r4, #2
 800c4ea:	f100 0514 	add.w	r5, r0, #20
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c4fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4fe:	3301      	adds	r3, #1
 800c500:	429a      	cmp	r2, r3
 800c502:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c506:	fbb2 f6f3 	udiv	r6, r2, r3
 800c50a:	d32e      	bcc.n	800c56a <quorem+0x96>
 800c50c:	f04f 0a00 	mov.w	sl, #0
 800c510:	46c4      	mov	ip, r8
 800c512:	46ae      	mov	lr, r5
 800c514:	46d3      	mov	fp, sl
 800c516:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c51a:	b298      	uxth	r0, r3
 800c51c:	fb06 a000 	mla	r0, r6, r0, sl
 800c520:	0c02      	lsrs	r2, r0, #16
 800c522:	0c1b      	lsrs	r3, r3, #16
 800c524:	fb06 2303 	mla	r3, r6, r3, r2
 800c528:	f8de 2000 	ldr.w	r2, [lr]
 800c52c:	b280      	uxth	r0, r0
 800c52e:	b292      	uxth	r2, r2
 800c530:	1a12      	subs	r2, r2, r0
 800c532:	445a      	add	r2, fp
 800c534:	f8de 0000 	ldr.w	r0, [lr]
 800c538:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c542:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c546:	b292      	uxth	r2, r2
 800c548:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c54c:	45e1      	cmp	r9, ip
 800c54e:	f84e 2b04 	str.w	r2, [lr], #4
 800c552:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c556:	d2de      	bcs.n	800c516 <quorem+0x42>
 800c558:	9b00      	ldr	r3, [sp, #0]
 800c55a:	58eb      	ldr	r3, [r5, r3]
 800c55c:	b92b      	cbnz	r3, 800c56a <quorem+0x96>
 800c55e:	9b01      	ldr	r3, [sp, #4]
 800c560:	3b04      	subs	r3, #4
 800c562:	429d      	cmp	r5, r3
 800c564:	461a      	mov	r2, r3
 800c566:	d32f      	bcc.n	800c5c8 <quorem+0xf4>
 800c568:	613c      	str	r4, [r7, #16]
 800c56a:	4638      	mov	r0, r7
 800c56c:	f001 f9c4 	bl	800d8f8 <__mcmp>
 800c570:	2800      	cmp	r0, #0
 800c572:	db25      	blt.n	800c5c0 <quorem+0xec>
 800c574:	4629      	mov	r1, r5
 800c576:	2000      	movs	r0, #0
 800c578:	f858 2b04 	ldr.w	r2, [r8], #4
 800c57c:	f8d1 c000 	ldr.w	ip, [r1]
 800c580:	fa1f fe82 	uxth.w	lr, r2
 800c584:	fa1f f38c 	uxth.w	r3, ip
 800c588:	eba3 030e 	sub.w	r3, r3, lr
 800c58c:	4403      	add	r3, r0
 800c58e:	0c12      	lsrs	r2, r2, #16
 800c590:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c594:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c598:	b29b      	uxth	r3, r3
 800c59a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c59e:	45c1      	cmp	r9, r8
 800c5a0:	f841 3b04 	str.w	r3, [r1], #4
 800c5a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c5a8:	d2e6      	bcs.n	800c578 <quorem+0xa4>
 800c5aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5b2:	b922      	cbnz	r2, 800c5be <quorem+0xea>
 800c5b4:	3b04      	subs	r3, #4
 800c5b6:	429d      	cmp	r5, r3
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	d30b      	bcc.n	800c5d4 <quorem+0x100>
 800c5bc:	613c      	str	r4, [r7, #16]
 800c5be:	3601      	adds	r6, #1
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	b003      	add	sp, #12
 800c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c8:	6812      	ldr	r2, [r2, #0]
 800c5ca:	3b04      	subs	r3, #4
 800c5cc:	2a00      	cmp	r2, #0
 800c5ce:	d1cb      	bne.n	800c568 <quorem+0x94>
 800c5d0:	3c01      	subs	r4, #1
 800c5d2:	e7c6      	b.n	800c562 <quorem+0x8e>
 800c5d4:	6812      	ldr	r2, [r2, #0]
 800c5d6:	3b04      	subs	r3, #4
 800c5d8:	2a00      	cmp	r2, #0
 800c5da:	d1ef      	bne.n	800c5bc <quorem+0xe8>
 800c5dc:	3c01      	subs	r4, #1
 800c5de:	e7ea      	b.n	800c5b6 <quorem+0xe2>
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	e7ee      	b.n	800c5c2 <quorem+0xee>
 800c5e4:	0000      	movs	r0, r0
	...

0800c5e8 <_dtoa_r>:
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ec:	69c7      	ldr	r7, [r0, #28]
 800c5ee:	b099      	sub	sp, #100	@ 0x64
 800c5f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c5f4:	ec55 4b10 	vmov	r4, r5, d0
 800c5f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c5fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800c5fc:	4683      	mov	fp, r0
 800c5fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800c600:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c602:	b97f      	cbnz	r7, 800c624 <_dtoa_r+0x3c>
 800c604:	2010      	movs	r0, #16
 800c606:	f000 fdfd 	bl	800d204 <malloc>
 800c60a:	4602      	mov	r2, r0
 800c60c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c610:	b920      	cbnz	r0, 800c61c <_dtoa_r+0x34>
 800c612:	4ba7      	ldr	r3, [pc, #668]	@ (800c8b0 <_dtoa_r+0x2c8>)
 800c614:	21ef      	movs	r1, #239	@ 0xef
 800c616:	48a7      	ldr	r0, [pc, #668]	@ (800c8b4 <_dtoa_r+0x2cc>)
 800c618:	f002 fdee 	bl	800f1f8 <__assert_func>
 800c61c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c620:	6007      	str	r7, [r0, #0]
 800c622:	60c7      	str	r7, [r0, #12]
 800c624:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c628:	6819      	ldr	r1, [r3, #0]
 800c62a:	b159      	cbz	r1, 800c644 <_dtoa_r+0x5c>
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	604a      	str	r2, [r1, #4]
 800c630:	2301      	movs	r3, #1
 800c632:	4093      	lsls	r3, r2
 800c634:	608b      	str	r3, [r1, #8]
 800c636:	4658      	mov	r0, fp
 800c638:	f000 feda 	bl	800d3f0 <_Bfree>
 800c63c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c640:	2200      	movs	r2, #0
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	1e2b      	subs	r3, r5, #0
 800c646:	bfb9      	ittee	lt
 800c648:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c64c:	9303      	strlt	r3, [sp, #12]
 800c64e:	2300      	movge	r3, #0
 800c650:	6033      	strge	r3, [r6, #0]
 800c652:	9f03      	ldr	r7, [sp, #12]
 800c654:	4b98      	ldr	r3, [pc, #608]	@ (800c8b8 <_dtoa_r+0x2d0>)
 800c656:	bfbc      	itt	lt
 800c658:	2201      	movlt	r2, #1
 800c65a:	6032      	strlt	r2, [r6, #0]
 800c65c:	43bb      	bics	r3, r7
 800c65e:	d112      	bne.n	800c686 <_dtoa_r+0x9e>
 800c660:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c662:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c66c:	4323      	orrs	r3, r4
 800c66e:	f000 854d 	beq.w	800d10c <_dtoa_r+0xb24>
 800c672:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c674:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c8cc <_dtoa_r+0x2e4>
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 854f 	beq.w	800d11c <_dtoa_r+0xb34>
 800c67e:	f10a 0303 	add.w	r3, sl, #3
 800c682:	f000 bd49 	b.w	800d118 <_dtoa_r+0xb30>
 800c686:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c68a:	2200      	movs	r2, #0
 800c68c:	ec51 0b17 	vmov	r0, r1, d7
 800c690:	2300      	movs	r3, #0
 800c692:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c696:	f7f4 fa3f 	bl	8000b18 <__aeabi_dcmpeq>
 800c69a:	4680      	mov	r8, r0
 800c69c:	b158      	cbz	r0, 800c6b6 <_dtoa_r+0xce>
 800c69e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	6013      	str	r3, [r2, #0]
 800c6a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c6a6:	b113      	cbz	r3, 800c6ae <_dtoa_r+0xc6>
 800c6a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c6aa:	4b84      	ldr	r3, [pc, #528]	@ (800c8bc <_dtoa_r+0x2d4>)
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c8d0 <_dtoa_r+0x2e8>
 800c6b2:	f000 bd33 	b.w	800d11c <_dtoa_r+0xb34>
 800c6b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c6ba:	aa16      	add	r2, sp, #88	@ 0x58
 800c6bc:	a917      	add	r1, sp, #92	@ 0x5c
 800c6be:	4658      	mov	r0, fp
 800c6c0:	f001 fa3a 	bl	800db38 <__d2b>
 800c6c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c6c8:	4681      	mov	r9, r0
 800c6ca:	2e00      	cmp	r6, #0
 800c6cc:	d077      	beq.n	800c7be <_dtoa_r+0x1d6>
 800c6ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c6d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c6e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c6e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	4b74      	ldr	r3, [pc, #464]	@ (800c8c0 <_dtoa_r+0x2d8>)
 800c6ee:	f7f3 fdf3 	bl	80002d8 <__aeabi_dsub>
 800c6f2:	a369      	add	r3, pc, #420	@ (adr r3, 800c898 <_dtoa_r+0x2b0>)
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	f7f3 ffa6 	bl	8000648 <__aeabi_dmul>
 800c6fc:	a368      	add	r3, pc, #416	@ (adr r3, 800c8a0 <_dtoa_r+0x2b8>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f7f3 fdeb 	bl	80002dc <__adddf3>
 800c706:	4604      	mov	r4, r0
 800c708:	4630      	mov	r0, r6
 800c70a:	460d      	mov	r5, r1
 800c70c:	f7f3 ff32 	bl	8000574 <__aeabi_i2d>
 800c710:	a365      	add	r3, pc, #404	@ (adr r3, 800c8a8 <_dtoa_r+0x2c0>)
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	f7f3 ff97 	bl	8000648 <__aeabi_dmul>
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4620      	mov	r0, r4
 800c720:	4629      	mov	r1, r5
 800c722:	f7f3 fddb 	bl	80002dc <__adddf3>
 800c726:	4604      	mov	r4, r0
 800c728:	460d      	mov	r5, r1
 800c72a:	f7f4 fa3d 	bl	8000ba8 <__aeabi_d2iz>
 800c72e:	2200      	movs	r2, #0
 800c730:	4607      	mov	r7, r0
 800c732:	2300      	movs	r3, #0
 800c734:	4620      	mov	r0, r4
 800c736:	4629      	mov	r1, r5
 800c738:	f7f4 f9f8 	bl	8000b2c <__aeabi_dcmplt>
 800c73c:	b140      	cbz	r0, 800c750 <_dtoa_r+0x168>
 800c73e:	4638      	mov	r0, r7
 800c740:	f7f3 ff18 	bl	8000574 <__aeabi_i2d>
 800c744:	4622      	mov	r2, r4
 800c746:	462b      	mov	r3, r5
 800c748:	f7f4 f9e6 	bl	8000b18 <__aeabi_dcmpeq>
 800c74c:	b900      	cbnz	r0, 800c750 <_dtoa_r+0x168>
 800c74e:	3f01      	subs	r7, #1
 800c750:	2f16      	cmp	r7, #22
 800c752:	d851      	bhi.n	800c7f8 <_dtoa_r+0x210>
 800c754:	4b5b      	ldr	r3, [pc, #364]	@ (800c8c4 <_dtoa_r+0x2dc>)
 800c756:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c762:	f7f4 f9e3 	bl	8000b2c <__aeabi_dcmplt>
 800c766:	2800      	cmp	r0, #0
 800c768:	d048      	beq.n	800c7fc <_dtoa_r+0x214>
 800c76a:	3f01      	subs	r7, #1
 800c76c:	2300      	movs	r3, #0
 800c76e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c770:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c772:	1b9b      	subs	r3, r3, r6
 800c774:	1e5a      	subs	r2, r3, #1
 800c776:	bf44      	itt	mi
 800c778:	f1c3 0801 	rsbmi	r8, r3, #1
 800c77c:	2300      	movmi	r3, #0
 800c77e:	9208      	str	r2, [sp, #32]
 800c780:	bf54      	ite	pl
 800c782:	f04f 0800 	movpl.w	r8, #0
 800c786:	9308      	strmi	r3, [sp, #32]
 800c788:	2f00      	cmp	r7, #0
 800c78a:	db39      	blt.n	800c800 <_dtoa_r+0x218>
 800c78c:	9b08      	ldr	r3, [sp, #32]
 800c78e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c790:	443b      	add	r3, r7
 800c792:	9308      	str	r3, [sp, #32]
 800c794:	2300      	movs	r3, #0
 800c796:	930a      	str	r3, [sp, #40]	@ 0x28
 800c798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c79a:	2b09      	cmp	r3, #9
 800c79c:	d864      	bhi.n	800c868 <_dtoa_r+0x280>
 800c79e:	2b05      	cmp	r3, #5
 800c7a0:	bfc4      	itt	gt
 800c7a2:	3b04      	subgt	r3, #4
 800c7a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7a8:	f1a3 0302 	sub.w	r3, r3, #2
 800c7ac:	bfcc      	ite	gt
 800c7ae:	2400      	movgt	r4, #0
 800c7b0:	2401      	movle	r4, #1
 800c7b2:	2b03      	cmp	r3, #3
 800c7b4:	d863      	bhi.n	800c87e <_dtoa_r+0x296>
 800c7b6:	e8df f003 	tbb	[pc, r3]
 800c7ba:	372a      	.short	0x372a
 800c7bc:	5535      	.short	0x5535
 800c7be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c7c2:	441e      	add	r6, r3
 800c7c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c7c8:	2b20      	cmp	r3, #32
 800c7ca:	bfc1      	itttt	gt
 800c7cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c7d0:	409f      	lslgt	r7, r3
 800c7d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c7d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c7da:	bfd6      	itet	le
 800c7dc:	f1c3 0320 	rsble	r3, r3, #32
 800c7e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800c7e4:	fa04 f003 	lslle.w	r0, r4, r3
 800c7e8:	f7f3 feb4 	bl	8000554 <__aeabi_ui2d>
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c7f2:	3e01      	subs	r6, #1
 800c7f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800c7f6:	e777      	b.n	800c6e8 <_dtoa_r+0x100>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e7b8      	b.n	800c76e <_dtoa_r+0x186>
 800c7fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800c7fe:	e7b7      	b.n	800c770 <_dtoa_r+0x188>
 800c800:	427b      	negs	r3, r7
 800c802:	930a      	str	r3, [sp, #40]	@ 0x28
 800c804:	2300      	movs	r3, #0
 800c806:	eba8 0807 	sub.w	r8, r8, r7
 800c80a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c80c:	e7c4      	b.n	800c798 <_dtoa_r+0x1b0>
 800c80e:	2300      	movs	r3, #0
 800c810:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c814:	2b00      	cmp	r3, #0
 800c816:	dc35      	bgt.n	800c884 <_dtoa_r+0x29c>
 800c818:	2301      	movs	r3, #1
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	9307      	str	r3, [sp, #28]
 800c81e:	461a      	mov	r2, r3
 800c820:	920e      	str	r2, [sp, #56]	@ 0x38
 800c822:	e00b      	b.n	800c83c <_dtoa_r+0x254>
 800c824:	2301      	movs	r3, #1
 800c826:	e7f3      	b.n	800c810 <_dtoa_r+0x228>
 800c828:	2300      	movs	r3, #0
 800c82a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c82c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c82e:	18fb      	adds	r3, r7, r3
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	3301      	adds	r3, #1
 800c834:	2b01      	cmp	r3, #1
 800c836:	9307      	str	r3, [sp, #28]
 800c838:	bfb8      	it	lt
 800c83a:	2301      	movlt	r3, #1
 800c83c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c840:	2100      	movs	r1, #0
 800c842:	2204      	movs	r2, #4
 800c844:	f102 0514 	add.w	r5, r2, #20
 800c848:	429d      	cmp	r5, r3
 800c84a:	d91f      	bls.n	800c88c <_dtoa_r+0x2a4>
 800c84c:	6041      	str	r1, [r0, #4]
 800c84e:	4658      	mov	r0, fp
 800c850:	f000 fd8e 	bl	800d370 <_Balloc>
 800c854:	4682      	mov	sl, r0
 800c856:	2800      	cmp	r0, #0
 800c858:	d13c      	bne.n	800c8d4 <_dtoa_r+0x2ec>
 800c85a:	4b1b      	ldr	r3, [pc, #108]	@ (800c8c8 <_dtoa_r+0x2e0>)
 800c85c:	4602      	mov	r2, r0
 800c85e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c862:	e6d8      	b.n	800c616 <_dtoa_r+0x2e>
 800c864:	2301      	movs	r3, #1
 800c866:	e7e0      	b.n	800c82a <_dtoa_r+0x242>
 800c868:	2401      	movs	r4, #1
 800c86a:	2300      	movs	r3, #0
 800c86c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c86e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	9307      	str	r3, [sp, #28]
 800c878:	2200      	movs	r2, #0
 800c87a:	2312      	movs	r3, #18
 800c87c:	e7d0      	b.n	800c820 <_dtoa_r+0x238>
 800c87e:	2301      	movs	r3, #1
 800c880:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c882:	e7f5      	b.n	800c870 <_dtoa_r+0x288>
 800c884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	9307      	str	r3, [sp, #28]
 800c88a:	e7d7      	b.n	800c83c <_dtoa_r+0x254>
 800c88c:	3101      	adds	r1, #1
 800c88e:	0052      	lsls	r2, r2, #1
 800c890:	e7d8      	b.n	800c844 <_dtoa_r+0x25c>
 800c892:	bf00      	nop
 800c894:	f3af 8000 	nop.w
 800c898:	636f4361 	.word	0x636f4361
 800c89c:	3fd287a7 	.word	0x3fd287a7
 800c8a0:	8b60c8b3 	.word	0x8b60c8b3
 800c8a4:	3fc68a28 	.word	0x3fc68a28
 800c8a8:	509f79fb 	.word	0x509f79fb
 800c8ac:	3fd34413 	.word	0x3fd34413
 800c8b0:	0800fe36 	.word	0x0800fe36
 800c8b4:	0800fe4d 	.word	0x0800fe4d
 800c8b8:	7ff00000 	.word	0x7ff00000
 800c8bc:	0800fe01 	.word	0x0800fe01
 800c8c0:	3ff80000 	.word	0x3ff80000
 800c8c4:	0800ff48 	.word	0x0800ff48
 800c8c8:	0800fea5 	.word	0x0800fea5
 800c8cc:	0800fe32 	.word	0x0800fe32
 800c8d0:	0800fe00 	.word	0x0800fe00
 800c8d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8d8:	6018      	str	r0, [r3, #0]
 800c8da:	9b07      	ldr	r3, [sp, #28]
 800c8dc:	2b0e      	cmp	r3, #14
 800c8de:	f200 80a4 	bhi.w	800ca2a <_dtoa_r+0x442>
 800c8e2:	2c00      	cmp	r4, #0
 800c8e4:	f000 80a1 	beq.w	800ca2a <_dtoa_r+0x442>
 800c8e8:	2f00      	cmp	r7, #0
 800c8ea:	dd33      	ble.n	800c954 <_dtoa_r+0x36c>
 800c8ec:	4bad      	ldr	r3, [pc, #692]	@ (800cba4 <_dtoa_r+0x5bc>)
 800c8ee:	f007 020f 	and.w	r2, r7, #15
 800c8f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8f6:	ed93 7b00 	vldr	d7, [r3]
 800c8fa:	05f8      	lsls	r0, r7, #23
 800c8fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c900:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c904:	d516      	bpl.n	800c934 <_dtoa_r+0x34c>
 800c906:	4ba8      	ldr	r3, [pc, #672]	@ (800cba8 <_dtoa_r+0x5c0>)
 800c908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c90c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c910:	f7f3 ffc4 	bl	800089c <__aeabi_ddiv>
 800c914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c918:	f004 040f 	and.w	r4, r4, #15
 800c91c:	2603      	movs	r6, #3
 800c91e:	4da2      	ldr	r5, [pc, #648]	@ (800cba8 <_dtoa_r+0x5c0>)
 800c920:	b954      	cbnz	r4, 800c938 <_dtoa_r+0x350>
 800c922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c92a:	f7f3 ffb7 	bl	800089c <__aeabi_ddiv>
 800c92e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c932:	e028      	b.n	800c986 <_dtoa_r+0x39e>
 800c934:	2602      	movs	r6, #2
 800c936:	e7f2      	b.n	800c91e <_dtoa_r+0x336>
 800c938:	07e1      	lsls	r1, r4, #31
 800c93a:	d508      	bpl.n	800c94e <_dtoa_r+0x366>
 800c93c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c940:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c944:	f7f3 fe80 	bl	8000648 <__aeabi_dmul>
 800c948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c94c:	3601      	adds	r6, #1
 800c94e:	1064      	asrs	r4, r4, #1
 800c950:	3508      	adds	r5, #8
 800c952:	e7e5      	b.n	800c920 <_dtoa_r+0x338>
 800c954:	f000 80d2 	beq.w	800cafc <_dtoa_r+0x514>
 800c958:	427c      	negs	r4, r7
 800c95a:	4b92      	ldr	r3, [pc, #584]	@ (800cba4 <_dtoa_r+0x5bc>)
 800c95c:	4d92      	ldr	r5, [pc, #584]	@ (800cba8 <_dtoa_r+0x5c0>)
 800c95e:	f004 020f 	and.w	r2, r4, #15
 800c962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c96e:	f7f3 fe6b 	bl	8000648 <__aeabi_dmul>
 800c972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c976:	1124      	asrs	r4, r4, #4
 800c978:	2300      	movs	r3, #0
 800c97a:	2602      	movs	r6, #2
 800c97c:	2c00      	cmp	r4, #0
 800c97e:	f040 80b2 	bne.w	800cae6 <_dtoa_r+0x4fe>
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1d3      	bne.n	800c92e <_dtoa_r+0x346>
 800c986:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c988:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 80b7 	beq.w	800cb00 <_dtoa_r+0x518>
 800c992:	4b86      	ldr	r3, [pc, #536]	@ (800cbac <_dtoa_r+0x5c4>)
 800c994:	2200      	movs	r2, #0
 800c996:	4620      	mov	r0, r4
 800c998:	4629      	mov	r1, r5
 800c99a:	f7f4 f8c7 	bl	8000b2c <__aeabi_dcmplt>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f000 80ae 	beq.w	800cb00 <_dtoa_r+0x518>
 800c9a4:	9b07      	ldr	r3, [sp, #28]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f000 80aa 	beq.w	800cb00 <_dtoa_r+0x518>
 800c9ac:	9b00      	ldr	r3, [sp, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	dd37      	ble.n	800ca22 <_dtoa_r+0x43a>
 800c9b2:	1e7b      	subs	r3, r7, #1
 800c9b4:	9304      	str	r3, [sp, #16]
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	4b7d      	ldr	r3, [pc, #500]	@ (800cbb0 <_dtoa_r+0x5c8>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	4629      	mov	r1, r5
 800c9be:	f7f3 fe43 	bl	8000648 <__aeabi_dmul>
 800c9c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9c6:	9c00      	ldr	r4, [sp, #0]
 800c9c8:	3601      	adds	r6, #1
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f7f3 fdd2 	bl	8000574 <__aeabi_i2d>
 800c9d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9d4:	f7f3 fe38 	bl	8000648 <__aeabi_dmul>
 800c9d8:	4b76      	ldr	r3, [pc, #472]	@ (800cbb4 <_dtoa_r+0x5cc>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f7f3 fc7e 	bl	80002dc <__adddf3>
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c9e6:	2c00      	cmp	r4, #0
 800c9e8:	f040 808d 	bne.w	800cb06 <_dtoa_r+0x51e>
 800c9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9f0:	4b71      	ldr	r3, [pc, #452]	@ (800cbb8 <_dtoa_r+0x5d0>)
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f7f3 fc70 	bl	80002d8 <__aeabi_dsub>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca00:	462a      	mov	r2, r5
 800ca02:	4633      	mov	r3, r6
 800ca04:	f7f4 f8b0 	bl	8000b68 <__aeabi_dcmpgt>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	f040 828b 	bne.w	800cf24 <_dtoa_r+0x93c>
 800ca0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca12:	462a      	mov	r2, r5
 800ca14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ca18:	f7f4 f888 	bl	8000b2c <__aeabi_dcmplt>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	f040 8128 	bne.w	800cc72 <_dtoa_r+0x68a>
 800ca22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ca26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ca2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f2c0 815a 	blt.w	800cce6 <_dtoa_r+0x6fe>
 800ca32:	2f0e      	cmp	r7, #14
 800ca34:	f300 8157 	bgt.w	800cce6 <_dtoa_r+0x6fe>
 800ca38:	4b5a      	ldr	r3, [pc, #360]	@ (800cba4 <_dtoa_r+0x5bc>)
 800ca3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca3e:	ed93 7b00 	vldr	d7, [r3]
 800ca42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	ed8d 7b00 	vstr	d7, [sp]
 800ca4a:	da03      	bge.n	800ca54 <_dtoa_r+0x46c>
 800ca4c:	9b07      	ldr	r3, [sp, #28]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f340 8101 	ble.w	800cc56 <_dtoa_r+0x66e>
 800ca54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca58:	4656      	mov	r6, sl
 800ca5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	4629      	mov	r1, r5
 800ca62:	f7f3 ff1b 	bl	800089c <__aeabi_ddiv>
 800ca66:	f7f4 f89f 	bl	8000ba8 <__aeabi_d2iz>
 800ca6a:	4680      	mov	r8, r0
 800ca6c:	f7f3 fd82 	bl	8000574 <__aeabi_i2d>
 800ca70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca74:	f7f3 fde8 	bl	8000648 <__aeabi_dmul>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	4629      	mov	r1, r5
 800ca80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ca84:	f7f3 fc28 	bl	80002d8 <__aeabi_dsub>
 800ca88:	f806 4b01 	strb.w	r4, [r6], #1
 800ca8c:	9d07      	ldr	r5, [sp, #28]
 800ca8e:	eba6 040a 	sub.w	r4, r6, sl
 800ca92:	42a5      	cmp	r5, r4
 800ca94:	4602      	mov	r2, r0
 800ca96:	460b      	mov	r3, r1
 800ca98:	f040 8117 	bne.w	800ccca <_dtoa_r+0x6e2>
 800ca9c:	f7f3 fc1e 	bl	80002dc <__adddf3>
 800caa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caa4:	4604      	mov	r4, r0
 800caa6:	460d      	mov	r5, r1
 800caa8:	f7f4 f85e 	bl	8000b68 <__aeabi_dcmpgt>
 800caac:	2800      	cmp	r0, #0
 800caae:	f040 80f9 	bne.w	800cca4 <_dtoa_r+0x6bc>
 800cab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cab6:	4620      	mov	r0, r4
 800cab8:	4629      	mov	r1, r5
 800caba:	f7f4 f82d 	bl	8000b18 <__aeabi_dcmpeq>
 800cabe:	b118      	cbz	r0, 800cac8 <_dtoa_r+0x4e0>
 800cac0:	f018 0f01 	tst.w	r8, #1
 800cac4:	f040 80ee 	bne.w	800cca4 <_dtoa_r+0x6bc>
 800cac8:	4649      	mov	r1, r9
 800caca:	4658      	mov	r0, fp
 800cacc:	f000 fc90 	bl	800d3f0 <_Bfree>
 800cad0:	2300      	movs	r3, #0
 800cad2:	7033      	strb	r3, [r6, #0]
 800cad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cad6:	3701      	adds	r7, #1
 800cad8:	601f      	str	r7, [r3, #0]
 800cada:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f000 831d 	beq.w	800d11c <_dtoa_r+0xb34>
 800cae2:	601e      	str	r6, [r3, #0]
 800cae4:	e31a      	b.n	800d11c <_dtoa_r+0xb34>
 800cae6:	07e2      	lsls	r2, r4, #31
 800cae8:	d505      	bpl.n	800caf6 <_dtoa_r+0x50e>
 800caea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800caee:	f7f3 fdab 	bl	8000648 <__aeabi_dmul>
 800caf2:	3601      	adds	r6, #1
 800caf4:	2301      	movs	r3, #1
 800caf6:	1064      	asrs	r4, r4, #1
 800caf8:	3508      	adds	r5, #8
 800cafa:	e73f      	b.n	800c97c <_dtoa_r+0x394>
 800cafc:	2602      	movs	r6, #2
 800cafe:	e742      	b.n	800c986 <_dtoa_r+0x39e>
 800cb00:	9c07      	ldr	r4, [sp, #28]
 800cb02:	9704      	str	r7, [sp, #16]
 800cb04:	e761      	b.n	800c9ca <_dtoa_r+0x3e2>
 800cb06:	4b27      	ldr	r3, [pc, #156]	@ (800cba4 <_dtoa_r+0x5bc>)
 800cb08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb12:	4454      	add	r4, sl
 800cb14:	2900      	cmp	r1, #0
 800cb16:	d053      	beq.n	800cbc0 <_dtoa_r+0x5d8>
 800cb18:	4928      	ldr	r1, [pc, #160]	@ (800cbbc <_dtoa_r+0x5d4>)
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	f7f3 febe 	bl	800089c <__aeabi_ddiv>
 800cb20:	4633      	mov	r3, r6
 800cb22:	462a      	mov	r2, r5
 800cb24:	f7f3 fbd8 	bl	80002d8 <__aeabi_dsub>
 800cb28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb2c:	4656      	mov	r6, sl
 800cb2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb32:	f7f4 f839 	bl	8000ba8 <__aeabi_d2iz>
 800cb36:	4605      	mov	r5, r0
 800cb38:	f7f3 fd1c 	bl	8000574 <__aeabi_i2d>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	460b      	mov	r3, r1
 800cb40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb44:	f7f3 fbc8 	bl	80002d8 <__aeabi_dsub>
 800cb48:	3530      	adds	r5, #48	@ 0x30
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb52:	f806 5b01 	strb.w	r5, [r6], #1
 800cb56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb5a:	f7f3 ffe7 	bl	8000b2c <__aeabi_dcmplt>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d171      	bne.n	800cc46 <_dtoa_r+0x65e>
 800cb62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb66:	4911      	ldr	r1, [pc, #68]	@ (800cbac <_dtoa_r+0x5c4>)
 800cb68:	2000      	movs	r0, #0
 800cb6a:	f7f3 fbb5 	bl	80002d8 <__aeabi_dsub>
 800cb6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb72:	f7f3 ffdb 	bl	8000b2c <__aeabi_dcmplt>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	f040 8095 	bne.w	800cca6 <_dtoa_r+0x6be>
 800cb7c:	42a6      	cmp	r6, r4
 800cb7e:	f43f af50 	beq.w	800ca22 <_dtoa_r+0x43a>
 800cb82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cb86:	4b0a      	ldr	r3, [pc, #40]	@ (800cbb0 <_dtoa_r+0x5c8>)
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f7f3 fd5d 	bl	8000648 <__aeabi_dmul>
 800cb8e:	4b08      	ldr	r3, [pc, #32]	@ (800cbb0 <_dtoa_r+0x5c8>)
 800cb90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb94:	2200      	movs	r2, #0
 800cb96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb9a:	f7f3 fd55 	bl	8000648 <__aeabi_dmul>
 800cb9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cba2:	e7c4      	b.n	800cb2e <_dtoa_r+0x546>
 800cba4:	0800ff48 	.word	0x0800ff48
 800cba8:	0800ff20 	.word	0x0800ff20
 800cbac:	3ff00000 	.word	0x3ff00000
 800cbb0:	40240000 	.word	0x40240000
 800cbb4:	401c0000 	.word	0x401c0000
 800cbb8:	40140000 	.word	0x40140000
 800cbbc:	3fe00000 	.word	0x3fe00000
 800cbc0:	4631      	mov	r1, r6
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	f7f3 fd40 	bl	8000648 <__aeabi_dmul>
 800cbc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cbcc:	9415      	str	r4, [sp, #84]	@ 0x54
 800cbce:	4656      	mov	r6, sl
 800cbd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbd4:	f7f3 ffe8 	bl	8000ba8 <__aeabi_d2iz>
 800cbd8:	4605      	mov	r5, r0
 800cbda:	f7f3 fccb 	bl	8000574 <__aeabi_i2d>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbe6:	f7f3 fb77 	bl	80002d8 <__aeabi_dsub>
 800cbea:	3530      	adds	r5, #48	@ 0x30
 800cbec:	f806 5b01 	strb.w	r5, [r6], #1
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	42a6      	cmp	r6, r4
 800cbf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbfa:	f04f 0200 	mov.w	r2, #0
 800cbfe:	d124      	bne.n	800cc4a <_dtoa_r+0x662>
 800cc00:	4bac      	ldr	r3, [pc, #688]	@ (800ceb4 <_dtoa_r+0x8cc>)
 800cc02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc06:	f7f3 fb69 	bl	80002dc <__adddf3>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc12:	f7f3 ffa9 	bl	8000b68 <__aeabi_dcmpgt>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d145      	bne.n	800cca6 <_dtoa_r+0x6be>
 800cc1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc1e:	49a5      	ldr	r1, [pc, #660]	@ (800ceb4 <_dtoa_r+0x8cc>)
 800cc20:	2000      	movs	r0, #0
 800cc22:	f7f3 fb59 	bl	80002d8 <__aeabi_dsub>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc2e:	f7f3 ff7d 	bl	8000b2c <__aeabi_dcmplt>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	f43f aef5 	beq.w	800ca22 <_dtoa_r+0x43a>
 800cc38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cc3a:	1e73      	subs	r3, r6, #1
 800cc3c:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc42:	2b30      	cmp	r3, #48	@ 0x30
 800cc44:	d0f8      	beq.n	800cc38 <_dtoa_r+0x650>
 800cc46:	9f04      	ldr	r7, [sp, #16]
 800cc48:	e73e      	b.n	800cac8 <_dtoa_r+0x4e0>
 800cc4a:	4b9b      	ldr	r3, [pc, #620]	@ (800ceb8 <_dtoa_r+0x8d0>)
 800cc4c:	f7f3 fcfc 	bl	8000648 <__aeabi_dmul>
 800cc50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc54:	e7bc      	b.n	800cbd0 <_dtoa_r+0x5e8>
 800cc56:	d10c      	bne.n	800cc72 <_dtoa_r+0x68a>
 800cc58:	4b98      	ldr	r3, [pc, #608]	@ (800cebc <_dtoa_r+0x8d4>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc60:	f7f3 fcf2 	bl	8000648 <__aeabi_dmul>
 800cc64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc68:	f7f3 ff74 	bl	8000b54 <__aeabi_dcmpge>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	f000 8157 	beq.w	800cf20 <_dtoa_r+0x938>
 800cc72:	2400      	movs	r4, #0
 800cc74:	4625      	mov	r5, r4
 800cc76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc78:	43db      	mvns	r3, r3
 800cc7a:	9304      	str	r3, [sp, #16]
 800cc7c:	4656      	mov	r6, sl
 800cc7e:	2700      	movs	r7, #0
 800cc80:	4621      	mov	r1, r4
 800cc82:	4658      	mov	r0, fp
 800cc84:	f000 fbb4 	bl	800d3f0 <_Bfree>
 800cc88:	2d00      	cmp	r5, #0
 800cc8a:	d0dc      	beq.n	800cc46 <_dtoa_r+0x65e>
 800cc8c:	b12f      	cbz	r7, 800cc9a <_dtoa_r+0x6b2>
 800cc8e:	42af      	cmp	r7, r5
 800cc90:	d003      	beq.n	800cc9a <_dtoa_r+0x6b2>
 800cc92:	4639      	mov	r1, r7
 800cc94:	4658      	mov	r0, fp
 800cc96:	f000 fbab 	bl	800d3f0 <_Bfree>
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	4658      	mov	r0, fp
 800cc9e:	f000 fba7 	bl	800d3f0 <_Bfree>
 800cca2:	e7d0      	b.n	800cc46 <_dtoa_r+0x65e>
 800cca4:	9704      	str	r7, [sp, #16]
 800cca6:	4633      	mov	r3, r6
 800cca8:	461e      	mov	r6, r3
 800ccaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccae:	2a39      	cmp	r2, #57	@ 0x39
 800ccb0:	d107      	bne.n	800ccc2 <_dtoa_r+0x6da>
 800ccb2:	459a      	cmp	sl, r3
 800ccb4:	d1f8      	bne.n	800cca8 <_dtoa_r+0x6c0>
 800ccb6:	9a04      	ldr	r2, [sp, #16]
 800ccb8:	3201      	adds	r2, #1
 800ccba:	9204      	str	r2, [sp, #16]
 800ccbc:	2230      	movs	r2, #48	@ 0x30
 800ccbe:	f88a 2000 	strb.w	r2, [sl]
 800ccc2:	781a      	ldrb	r2, [r3, #0]
 800ccc4:	3201      	adds	r2, #1
 800ccc6:	701a      	strb	r2, [r3, #0]
 800ccc8:	e7bd      	b.n	800cc46 <_dtoa_r+0x65e>
 800ccca:	4b7b      	ldr	r3, [pc, #492]	@ (800ceb8 <_dtoa_r+0x8d0>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	f7f3 fcbb 	bl	8000648 <__aeabi_dmul>
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	f7f3 ff1d 	bl	8000b18 <__aeabi_dcmpeq>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f43f aebb 	beq.w	800ca5a <_dtoa_r+0x472>
 800cce4:	e6f0      	b.n	800cac8 <_dtoa_r+0x4e0>
 800cce6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cce8:	2a00      	cmp	r2, #0
 800ccea:	f000 80db 	beq.w	800cea4 <_dtoa_r+0x8bc>
 800ccee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccf0:	2a01      	cmp	r2, #1
 800ccf2:	f300 80bf 	bgt.w	800ce74 <_dtoa_r+0x88c>
 800ccf6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ccf8:	2a00      	cmp	r2, #0
 800ccfa:	f000 80b7 	beq.w	800ce6c <_dtoa_r+0x884>
 800ccfe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cd02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cd04:	4646      	mov	r6, r8
 800cd06:	9a08      	ldr	r2, [sp, #32]
 800cd08:	2101      	movs	r1, #1
 800cd0a:	441a      	add	r2, r3
 800cd0c:	4658      	mov	r0, fp
 800cd0e:	4498      	add	r8, r3
 800cd10:	9208      	str	r2, [sp, #32]
 800cd12:	f000 fc6b 	bl	800d5ec <__i2b>
 800cd16:	4605      	mov	r5, r0
 800cd18:	b15e      	cbz	r6, 800cd32 <_dtoa_r+0x74a>
 800cd1a:	9b08      	ldr	r3, [sp, #32]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	dd08      	ble.n	800cd32 <_dtoa_r+0x74a>
 800cd20:	42b3      	cmp	r3, r6
 800cd22:	9a08      	ldr	r2, [sp, #32]
 800cd24:	bfa8      	it	ge
 800cd26:	4633      	movge	r3, r6
 800cd28:	eba8 0803 	sub.w	r8, r8, r3
 800cd2c:	1af6      	subs	r6, r6, r3
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	9308      	str	r3, [sp, #32]
 800cd32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd34:	b1f3      	cbz	r3, 800cd74 <_dtoa_r+0x78c>
 800cd36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f000 80b7 	beq.w	800ceac <_dtoa_r+0x8c4>
 800cd3e:	b18c      	cbz	r4, 800cd64 <_dtoa_r+0x77c>
 800cd40:	4629      	mov	r1, r5
 800cd42:	4622      	mov	r2, r4
 800cd44:	4658      	mov	r0, fp
 800cd46:	f000 fd11 	bl	800d76c <__pow5mult>
 800cd4a:	464a      	mov	r2, r9
 800cd4c:	4601      	mov	r1, r0
 800cd4e:	4605      	mov	r5, r0
 800cd50:	4658      	mov	r0, fp
 800cd52:	f000 fc61 	bl	800d618 <__multiply>
 800cd56:	4649      	mov	r1, r9
 800cd58:	9004      	str	r0, [sp, #16]
 800cd5a:	4658      	mov	r0, fp
 800cd5c:	f000 fb48 	bl	800d3f0 <_Bfree>
 800cd60:	9b04      	ldr	r3, [sp, #16]
 800cd62:	4699      	mov	r9, r3
 800cd64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd66:	1b1a      	subs	r2, r3, r4
 800cd68:	d004      	beq.n	800cd74 <_dtoa_r+0x78c>
 800cd6a:	4649      	mov	r1, r9
 800cd6c:	4658      	mov	r0, fp
 800cd6e:	f000 fcfd 	bl	800d76c <__pow5mult>
 800cd72:	4681      	mov	r9, r0
 800cd74:	2101      	movs	r1, #1
 800cd76:	4658      	mov	r0, fp
 800cd78:	f000 fc38 	bl	800d5ec <__i2b>
 800cd7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd7e:	4604      	mov	r4, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f000 81cf 	beq.w	800d124 <_dtoa_r+0xb3c>
 800cd86:	461a      	mov	r2, r3
 800cd88:	4601      	mov	r1, r0
 800cd8a:	4658      	mov	r0, fp
 800cd8c:	f000 fcee 	bl	800d76c <__pow5mult>
 800cd90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	4604      	mov	r4, r0
 800cd96:	f300 8095 	bgt.w	800cec4 <_dtoa_r+0x8dc>
 800cd9a:	9b02      	ldr	r3, [sp, #8]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f040 8087 	bne.w	800ceb0 <_dtoa_r+0x8c8>
 800cda2:	9b03      	ldr	r3, [sp, #12]
 800cda4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f040 8089 	bne.w	800cec0 <_dtoa_r+0x8d8>
 800cdae:	9b03      	ldr	r3, [sp, #12]
 800cdb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cdb4:	0d1b      	lsrs	r3, r3, #20
 800cdb6:	051b      	lsls	r3, r3, #20
 800cdb8:	b12b      	cbz	r3, 800cdc6 <_dtoa_r+0x7de>
 800cdba:	9b08      	ldr	r3, [sp, #32]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	9308      	str	r3, [sp, #32]
 800cdc0:	f108 0801 	add.w	r8, r8, #1
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f000 81b0 	beq.w	800d130 <_dtoa_r+0xb48>
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cdd6:	6918      	ldr	r0, [r3, #16]
 800cdd8:	f000 fbbc 	bl	800d554 <__hi0bits>
 800cddc:	f1c0 0020 	rsb	r0, r0, #32
 800cde0:	9b08      	ldr	r3, [sp, #32]
 800cde2:	4418      	add	r0, r3
 800cde4:	f010 001f 	ands.w	r0, r0, #31
 800cde8:	d077      	beq.n	800ceda <_dtoa_r+0x8f2>
 800cdea:	f1c0 0320 	rsb	r3, r0, #32
 800cdee:	2b04      	cmp	r3, #4
 800cdf0:	dd6b      	ble.n	800ceca <_dtoa_r+0x8e2>
 800cdf2:	9b08      	ldr	r3, [sp, #32]
 800cdf4:	f1c0 001c 	rsb	r0, r0, #28
 800cdf8:	4403      	add	r3, r0
 800cdfa:	4480      	add	r8, r0
 800cdfc:	4406      	add	r6, r0
 800cdfe:	9308      	str	r3, [sp, #32]
 800ce00:	f1b8 0f00 	cmp.w	r8, #0
 800ce04:	dd05      	ble.n	800ce12 <_dtoa_r+0x82a>
 800ce06:	4649      	mov	r1, r9
 800ce08:	4642      	mov	r2, r8
 800ce0a:	4658      	mov	r0, fp
 800ce0c:	f000 fd08 	bl	800d820 <__lshift>
 800ce10:	4681      	mov	r9, r0
 800ce12:	9b08      	ldr	r3, [sp, #32]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	dd05      	ble.n	800ce24 <_dtoa_r+0x83c>
 800ce18:	4621      	mov	r1, r4
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	4658      	mov	r0, fp
 800ce1e:	f000 fcff 	bl	800d820 <__lshift>
 800ce22:	4604      	mov	r4, r0
 800ce24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d059      	beq.n	800cede <_dtoa_r+0x8f6>
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	4648      	mov	r0, r9
 800ce2e:	f000 fd63 	bl	800d8f8 <__mcmp>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	da53      	bge.n	800cede <_dtoa_r+0x8f6>
 800ce36:	1e7b      	subs	r3, r7, #1
 800ce38:	9304      	str	r3, [sp, #16]
 800ce3a:	4649      	mov	r1, r9
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	220a      	movs	r2, #10
 800ce40:	4658      	mov	r0, fp
 800ce42:	f000 faf7 	bl	800d434 <__multadd>
 800ce46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce48:	4681      	mov	r9, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f000 8172 	beq.w	800d134 <_dtoa_r+0xb4c>
 800ce50:	2300      	movs	r3, #0
 800ce52:	4629      	mov	r1, r5
 800ce54:	220a      	movs	r2, #10
 800ce56:	4658      	mov	r0, fp
 800ce58:	f000 faec 	bl	800d434 <__multadd>
 800ce5c:	9b00      	ldr	r3, [sp, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	4605      	mov	r5, r0
 800ce62:	dc67      	bgt.n	800cf34 <_dtoa_r+0x94c>
 800ce64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	dc41      	bgt.n	800ceee <_dtoa_r+0x906>
 800ce6a:	e063      	b.n	800cf34 <_dtoa_r+0x94c>
 800ce6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ce72:	e746      	b.n	800cd02 <_dtoa_r+0x71a>
 800ce74:	9b07      	ldr	r3, [sp, #28]
 800ce76:	1e5c      	subs	r4, r3, #1
 800ce78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce7a:	42a3      	cmp	r3, r4
 800ce7c:	bfbf      	itttt	lt
 800ce7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ce80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ce82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ce84:	1ae3      	sublt	r3, r4, r3
 800ce86:	bfb4      	ite	lt
 800ce88:	18d2      	addlt	r2, r2, r3
 800ce8a:	1b1c      	subge	r4, r3, r4
 800ce8c:	9b07      	ldr	r3, [sp, #28]
 800ce8e:	bfbc      	itt	lt
 800ce90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ce92:	2400      	movlt	r4, #0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	bfb5      	itete	lt
 800ce98:	eba8 0603 	sublt.w	r6, r8, r3
 800ce9c:	9b07      	ldrge	r3, [sp, #28]
 800ce9e:	2300      	movlt	r3, #0
 800cea0:	4646      	movge	r6, r8
 800cea2:	e730      	b.n	800cd06 <_dtoa_r+0x71e>
 800cea4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cea6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cea8:	4646      	mov	r6, r8
 800ceaa:	e735      	b.n	800cd18 <_dtoa_r+0x730>
 800ceac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ceae:	e75c      	b.n	800cd6a <_dtoa_r+0x782>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	e788      	b.n	800cdc6 <_dtoa_r+0x7de>
 800ceb4:	3fe00000 	.word	0x3fe00000
 800ceb8:	40240000 	.word	0x40240000
 800cebc:	40140000 	.word	0x40140000
 800cec0:	9b02      	ldr	r3, [sp, #8]
 800cec2:	e780      	b.n	800cdc6 <_dtoa_r+0x7de>
 800cec4:	2300      	movs	r3, #0
 800cec6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cec8:	e782      	b.n	800cdd0 <_dtoa_r+0x7e8>
 800ceca:	d099      	beq.n	800ce00 <_dtoa_r+0x818>
 800cecc:	9a08      	ldr	r2, [sp, #32]
 800cece:	331c      	adds	r3, #28
 800ced0:	441a      	add	r2, r3
 800ced2:	4498      	add	r8, r3
 800ced4:	441e      	add	r6, r3
 800ced6:	9208      	str	r2, [sp, #32]
 800ced8:	e792      	b.n	800ce00 <_dtoa_r+0x818>
 800ceda:	4603      	mov	r3, r0
 800cedc:	e7f6      	b.n	800cecc <_dtoa_r+0x8e4>
 800cede:	9b07      	ldr	r3, [sp, #28]
 800cee0:	9704      	str	r7, [sp, #16]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	dc20      	bgt.n	800cf28 <_dtoa_r+0x940>
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	dd1e      	ble.n	800cf2c <_dtoa_r+0x944>
 800ceee:	9b00      	ldr	r3, [sp, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f47f aec0 	bne.w	800cc76 <_dtoa_r+0x68e>
 800cef6:	4621      	mov	r1, r4
 800cef8:	2205      	movs	r2, #5
 800cefa:	4658      	mov	r0, fp
 800cefc:	f000 fa9a 	bl	800d434 <__multadd>
 800cf00:	4601      	mov	r1, r0
 800cf02:	4604      	mov	r4, r0
 800cf04:	4648      	mov	r0, r9
 800cf06:	f000 fcf7 	bl	800d8f8 <__mcmp>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	f77f aeb3 	ble.w	800cc76 <_dtoa_r+0x68e>
 800cf10:	4656      	mov	r6, sl
 800cf12:	2331      	movs	r3, #49	@ 0x31
 800cf14:	f806 3b01 	strb.w	r3, [r6], #1
 800cf18:	9b04      	ldr	r3, [sp, #16]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	9304      	str	r3, [sp, #16]
 800cf1e:	e6ae      	b.n	800cc7e <_dtoa_r+0x696>
 800cf20:	9c07      	ldr	r4, [sp, #28]
 800cf22:	9704      	str	r7, [sp, #16]
 800cf24:	4625      	mov	r5, r4
 800cf26:	e7f3      	b.n	800cf10 <_dtoa_r+0x928>
 800cf28:	9b07      	ldr	r3, [sp, #28]
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 8104 	beq.w	800d13c <_dtoa_r+0xb54>
 800cf34:	2e00      	cmp	r6, #0
 800cf36:	dd05      	ble.n	800cf44 <_dtoa_r+0x95c>
 800cf38:	4629      	mov	r1, r5
 800cf3a:	4632      	mov	r2, r6
 800cf3c:	4658      	mov	r0, fp
 800cf3e:	f000 fc6f 	bl	800d820 <__lshift>
 800cf42:	4605      	mov	r5, r0
 800cf44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d05a      	beq.n	800d000 <_dtoa_r+0xa18>
 800cf4a:	6869      	ldr	r1, [r5, #4]
 800cf4c:	4658      	mov	r0, fp
 800cf4e:	f000 fa0f 	bl	800d370 <_Balloc>
 800cf52:	4606      	mov	r6, r0
 800cf54:	b928      	cbnz	r0, 800cf62 <_dtoa_r+0x97a>
 800cf56:	4b84      	ldr	r3, [pc, #528]	@ (800d168 <_dtoa_r+0xb80>)
 800cf58:	4602      	mov	r2, r0
 800cf5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf5e:	f7ff bb5a 	b.w	800c616 <_dtoa_r+0x2e>
 800cf62:	692a      	ldr	r2, [r5, #16]
 800cf64:	3202      	adds	r2, #2
 800cf66:	0092      	lsls	r2, r2, #2
 800cf68:	f105 010c 	add.w	r1, r5, #12
 800cf6c:	300c      	adds	r0, #12
 800cf6e:	f7ff fa9c 	bl	800c4aa <memcpy>
 800cf72:	2201      	movs	r2, #1
 800cf74:	4631      	mov	r1, r6
 800cf76:	4658      	mov	r0, fp
 800cf78:	f000 fc52 	bl	800d820 <__lshift>
 800cf7c:	f10a 0301 	add.w	r3, sl, #1
 800cf80:	9307      	str	r3, [sp, #28]
 800cf82:	9b00      	ldr	r3, [sp, #0]
 800cf84:	4453      	add	r3, sl
 800cf86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf88:	9b02      	ldr	r3, [sp, #8]
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	462f      	mov	r7, r5
 800cf90:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf92:	4605      	mov	r5, r0
 800cf94:	9b07      	ldr	r3, [sp, #28]
 800cf96:	4621      	mov	r1, r4
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	4648      	mov	r0, r9
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	f7ff fa99 	bl	800c4d4 <quorem>
 800cfa2:	4639      	mov	r1, r7
 800cfa4:	9002      	str	r0, [sp, #8]
 800cfa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cfaa:	4648      	mov	r0, r9
 800cfac:	f000 fca4 	bl	800d8f8 <__mcmp>
 800cfb0:	462a      	mov	r2, r5
 800cfb2:	9008      	str	r0, [sp, #32]
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	4658      	mov	r0, fp
 800cfb8:	f000 fcba 	bl	800d930 <__mdiff>
 800cfbc:	68c2      	ldr	r2, [r0, #12]
 800cfbe:	4606      	mov	r6, r0
 800cfc0:	bb02      	cbnz	r2, 800d004 <_dtoa_r+0xa1c>
 800cfc2:	4601      	mov	r1, r0
 800cfc4:	4648      	mov	r0, r9
 800cfc6:	f000 fc97 	bl	800d8f8 <__mcmp>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	4631      	mov	r1, r6
 800cfce:	4658      	mov	r0, fp
 800cfd0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cfd2:	f000 fa0d 	bl	800d3f0 <_Bfree>
 800cfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfda:	9e07      	ldr	r6, [sp, #28]
 800cfdc:	ea43 0102 	orr.w	r1, r3, r2
 800cfe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfe2:	4319      	orrs	r1, r3
 800cfe4:	d110      	bne.n	800d008 <_dtoa_r+0xa20>
 800cfe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cfea:	d029      	beq.n	800d040 <_dtoa_r+0xa58>
 800cfec:	9b08      	ldr	r3, [sp, #32]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	dd02      	ble.n	800cff8 <_dtoa_r+0xa10>
 800cff2:	9b02      	ldr	r3, [sp, #8]
 800cff4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cff8:	9b00      	ldr	r3, [sp, #0]
 800cffa:	f883 8000 	strb.w	r8, [r3]
 800cffe:	e63f      	b.n	800cc80 <_dtoa_r+0x698>
 800d000:	4628      	mov	r0, r5
 800d002:	e7bb      	b.n	800cf7c <_dtoa_r+0x994>
 800d004:	2201      	movs	r2, #1
 800d006:	e7e1      	b.n	800cfcc <_dtoa_r+0x9e4>
 800d008:	9b08      	ldr	r3, [sp, #32]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	db04      	blt.n	800d018 <_dtoa_r+0xa30>
 800d00e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d010:	430b      	orrs	r3, r1
 800d012:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d014:	430b      	orrs	r3, r1
 800d016:	d120      	bne.n	800d05a <_dtoa_r+0xa72>
 800d018:	2a00      	cmp	r2, #0
 800d01a:	dded      	ble.n	800cff8 <_dtoa_r+0xa10>
 800d01c:	4649      	mov	r1, r9
 800d01e:	2201      	movs	r2, #1
 800d020:	4658      	mov	r0, fp
 800d022:	f000 fbfd 	bl	800d820 <__lshift>
 800d026:	4621      	mov	r1, r4
 800d028:	4681      	mov	r9, r0
 800d02a:	f000 fc65 	bl	800d8f8 <__mcmp>
 800d02e:	2800      	cmp	r0, #0
 800d030:	dc03      	bgt.n	800d03a <_dtoa_r+0xa52>
 800d032:	d1e1      	bne.n	800cff8 <_dtoa_r+0xa10>
 800d034:	f018 0f01 	tst.w	r8, #1
 800d038:	d0de      	beq.n	800cff8 <_dtoa_r+0xa10>
 800d03a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d03e:	d1d8      	bne.n	800cff2 <_dtoa_r+0xa0a>
 800d040:	9a00      	ldr	r2, [sp, #0]
 800d042:	2339      	movs	r3, #57	@ 0x39
 800d044:	7013      	strb	r3, [r2, #0]
 800d046:	4633      	mov	r3, r6
 800d048:	461e      	mov	r6, r3
 800d04a:	3b01      	subs	r3, #1
 800d04c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d050:	2a39      	cmp	r2, #57	@ 0x39
 800d052:	d052      	beq.n	800d0fa <_dtoa_r+0xb12>
 800d054:	3201      	adds	r2, #1
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	e612      	b.n	800cc80 <_dtoa_r+0x698>
 800d05a:	2a00      	cmp	r2, #0
 800d05c:	dd07      	ble.n	800d06e <_dtoa_r+0xa86>
 800d05e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d062:	d0ed      	beq.n	800d040 <_dtoa_r+0xa58>
 800d064:	9a00      	ldr	r2, [sp, #0]
 800d066:	f108 0301 	add.w	r3, r8, #1
 800d06a:	7013      	strb	r3, [r2, #0]
 800d06c:	e608      	b.n	800cc80 <_dtoa_r+0x698>
 800d06e:	9b07      	ldr	r3, [sp, #28]
 800d070:	9a07      	ldr	r2, [sp, #28]
 800d072:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d078:	4293      	cmp	r3, r2
 800d07a:	d028      	beq.n	800d0ce <_dtoa_r+0xae6>
 800d07c:	4649      	mov	r1, r9
 800d07e:	2300      	movs	r3, #0
 800d080:	220a      	movs	r2, #10
 800d082:	4658      	mov	r0, fp
 800d084:	f000 f9d6 	bl	800d434 <__multadd>
 800d088:	42af      	cmp	r7, r5
 800d08a:	4681      	mov	r9, r0
 800d08c:	f04f 0300 	mov.w	r3, #0
 800d090:	f04f 020a 	mov.w	r2, #10
 800d094:	4639      	mov	r1, r7
 800d096:	4658      	mov	r0, fp
 800d098:	d107      	bne.n	800d0aa <_dtoa_r+0xac2>
 800d09a:	f000 f9cb 	bl	800d434 <__multadd>
 800d09e:	4607      	mov	r7, r0
 800d0a0:	4605      	mov	r5, r0
 800d0a2:	9b07      	ldr	r3, [sp, #28]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	9307      	str	r3, [sp, #28]
 800d0a8:	e774      	b.n	800cf94 <_dtoa_r+0x9ac>
 800d0aa:	f000 f9c3 	bl	800d434 <__multadd>
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	4607      	mov	r7, r0
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	220a      	movs	r2, #10
 800d0b6:	4658      	mov	r0, fp
 800d0b8:	f000 f9bc 	bl	800d434 <__multadd>
 800d0bc:	4605      	mov	r5, r0
 800d0be:	e7f0      	b.n	800d0a2 <_dtoa_r+0xaba>
 800d0c0:	9b00      	ldr	r3, [sp, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	bfcc      	ite	gt
 800d0c6:	461e      	movgt	r6, r3
 800d0c8:	2601      	movle	r6, #1
 800d0ca:	4456      	add	r6, sl
 800d0cc:	2700      	movs	r7, #0
 800d0ce:	4649      	mov	r1, r9
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	4658      	mov	r0, fp
 800d0d4:	f000 fba4 	bl	800d820 <__lshift>
 800d0d8:	4621      	mov	r1, r4
 800d0da:	4681      	mov	r9, r0
 800d0dc:	f000 fc0c 	bl	800d8f8 <__mcmp>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	dcb0      	bgt.n	800d046 <_dtoa_r+0xa5e>
 800d0e4:	d102      	bne.n	800d0ec <_dtoa_r+0xb04>
 800d0e6:	f018 0f01 	tst.w	r8, #1
 800d0ea:	d1ac      	bne.n	800d046 <_dtoa_r+0xa5e>
 800d0ec:	4633      	mov	r3, r6
 800d0ee:	461e      	mov	r6, r3
 800d0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0f4:	2a30      	cmp	r2, #48	@ 0x30
 800d0f6:	d0fa      	beq.n	800d0ee <_dtoa_r+0xb06>
 800d0f8:	e5c2      	b.n	800cc80 <_dtoa_r+0x698>
 800d0fa:	459a      	cmp	sl, r3
 800d0fc:	d1a4      	bne.n	800d048 <_dtoa_r+0xa60>
 800d0fe:	9b04      	ldr	r3, [sp, #16]
 800d100:	3301      	adds	r3, #1
 800d102:	9304      	str	r3, [sp, #16]
 800d104:	2331      	movs	r3, #49	@ 0x31
 800d106:	f88a 3000 	strb.w	r3, [sl]
 800d10a:	e5b9      	b.n	800cc80 <_dtoa_r+0x698>
 800d10c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d10e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d16c <_dtoa_r+0xb84>
 800d112:	b11b      	cbz	r3, 800d11c <_dtoa_r+0xb34>
 800d114:	f10a 0308 	add.w	r3, sl, #8
 800d118:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d11a:	6013      	str	r3, [r2, #0]
 800d11c:	4650      	mov	r0, sl
 800d11e:	b019      	add	sp, #100	@ 0x64
 800d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d126:	2b01      	cmp	r3, #1
 800d128:	f77f ae37 	ble.w	800cd9a <_dtoa_r+0x7b2>
 800d12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d12e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d130:	2001      	movs	r0, #1
 800d132:	e655      	b.n	800cde0 <_dtoa_r+0x7f8>
 800d134:	9b00      	ldr	r3, [sp, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	f77f aed6 	ble.w	800cee8 <_dtoa_r+0x900>
 800d13c:	4656      	mov	r6, sl
 800d13e:	4621      	mov	r1, r4
 800d140:	4648      	mov	r0, r9
 800d142:	f7ff f9c7 	bl	800c4d4 <quorem>
 800d146:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d14a:	f806 8b01 	strb.w	r8, [r6], #1
 800d14e:	9b00      	ldr	r3, [sp, #0]
 800d150:	eba6 020a 	sub.w	r2, r6, sl
 800d154:	4293      	cmp	r3, r2
 800d156:	ddb3      	ble.n	800d0c0 <_dtoa_r+0xad8>
 800d158:	4649      	mov	r1, r9
 800d15a:	2300      	movs	r3, #0
 800d15c:	220a      	movs	r2, #10
 800d15e:	4658      	mov	r0, fp
 800d160:	f000 f968 	bl	800d434 <__multadd>
 800d164:	4681      	mov	r9, r0
 800d166:	e7ea      	b.n	800d13e <_dtoa_r+0xb56>
 800d168:	0800fea5 	.word	0x0800fea5
 800d16c:	0800fe29 	.word	0x0800fe29

0800d170 <_free_r>:
 800d170:	b538      	push	{r3, r4, r5, lr}
 800d172:	4605      	mov	r5, r0
 800d174:	2900      	cmp	r1, #0
 800d176:	d041      	beq.n	800d1fc <_free_r+0x8c>
 800d178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d17c:	1f0c      	subs	r4, r1, #4
 800d17e:	2b00      	cmp	r3, #0
 800d180:	bfb8      	it	lt
 800d182:	18e4      	addlt	r4, r4, r3
 800d184:	f000 f8e8 	bl	800d358 <__malloc_lock>
 800d188:	4a1d      	ldr	r2, [pc, #116]	@ (800d200 <_free_r+0x90>)
 800d18a:	6813      	ldr	r3, [r2, #0]
 800d18c:	b933      	cbnz	r3, 800d19c <_free_r+0x2c>
 800d18e:	6063      	str	r3, [r4, #4]
 800d190:	6014      	str	r4, [r2, #0]
 800d192:	4628      	mov	r0, r5
 800d194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d198:	f000 b8e4 	b.w	800d364 <__malloc_unlock>
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	d908      	bls.n	800d1b2 <_free_r+0x42>
 800d1a0:	6820      	ldr	r0, [r4, #0]
 800d1a2:	1821      	adds	r1, r4, r0
 800d1a4:	428b      	cmp	r3, r1
 800d1a6:	bf01      	itttt	eq
 800d1a8:	6819      	ldreq	r1, [r3, #0]
 800d1aa:	685b      	ldreq	r3, [r3, #4]
 800d1ac:	1809      	addeq	r1, r1, r0
 800d1ae:	6021      	streq	r1, [r4, #0]
 800d1b0:	e7ed      	b.n	800d18e <_free_r+0x1e>
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	b10b      	cbz	r3, 800d1bc <_free_r+0x4c>
 800d1b8:	42a3      	cmp	r3, r4
 800d1ba:	d9fa      	bls.n	800d1b2 <_free_r+0x42>
 800d1bc:	6811      	ldr	r1, [r2, #0]
 800d1be:	1850      	adds	r0, r2, r1
 800d1c0:	42a0      	cmp	r0, r4
 800d1c2:	d10b      	bne.n	800d1dc <_free_r+0x6c>
 800d1c4:	6820      	ldr	r0, [r4, #0]
 800d1c6:	4401      	add	r1, r0
 800d1c8:	1850      	adds	r0, r2, r1
 800d1ca:	4283      	cmp	r3, r0
 800d1cc:	6011      	str	r1, [r2, #0]
 800d1ce:	d1e0      	bne.n	800d192 <_free_r+0x22>
 800d1d0:	6818      	ldr	r0, [r3, #0]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	6053      	str	r3, [r2, #4]
 800d1d6:	4408      	add	r0, r1
 800d1d8:	6010      	str	r0, [r2, #0]
 800d1da:	e7da      	b.n	800d192 <_free_r+0x22>
 800d1dc:	d902      	bls.n	800d1e4 <_free_r+0x74>
 800d1de:	230c      	movs	r3, #12
 800d1e0:	602b      	str	r3, [r5, #0]
 800d1e2:	e7d6      	b.n	800d192 <_free_r+0x22>
 800d1e4:	6820      	ldr	r0, [r4, #0]
 800d1e6:	1821      	adds	r1, r4, r0
 800d1e8:	428b      	cmp	r3, r1
 800d1ea:	bf04      	itt	eq
 800d1ec:	6819      	ldreq	r1, [r3, #0]
 800d1ee:	685b      	ldreq	r3, [r3, #4]
 800d1f0:	6063      	str	r3, [r4, #4]
 800d1f2:	bf04      	itt	eq
 800d1f4:	1809      	addeq	r1, r1, r0
 800d1f6:	6021      	streq	r1, [r4, #0]
 800d1f8:	6054      	str	r4, [r2, #4]
 800d1fa:	e7ca      	b.n	800d192 <_free_r+0x22>
 800d1fc:	bd38      	pop	{r3, r4, r5, pc}
 800d1fe:	bf00      	nop
 800d200:	20001488 	.word	0x20001488

0800d204 <malloc>:
 800d204:	4b02      	ldr	r3, [pc, #8]	@ (800d210 <malloc+0xc>)
 800d206:	4601      	mov	r1, r0
 800d208:	6818      	ldr	r0, [r3, #0]
 800d20a:	f000 b825 	b.w	800d258 <_malloc_r>
 800d20e:	bf00      	nop
 800d210:	2000001c 	.word	0x2000001c

0800d214 <sbrk_aligned>:
 800d214:	b570      	push	{r4, r5, r6, lr}
 800d216:	4e0f      	ldr	r6, [pc, #60]	@ (800d254 <sbrk_aligned+0x40>)
 800d218:	460c      	mov	r4, r1
 800d21a:	6831      	ldr	r1, [r6, #0]
 800d21c:	4605      	mov	r5, r0
 800d21e:	b911      	cbnz	r1, 800d226 <sbrk_aligned+0x12>
 800d220:	f001 ffd2 	bl	800f1c8 <_sbrk_r>
 800d224:	6030      	str	r0, [r6, #0]
 800d226:	4621      	mov	r1, r4
 800d228:	4628      	mov	r0, r5
 800d22a:	f001 ffcd 	bl	800f1c8 <_sbrk_r>
 800d22e:	1c43      	adds	r3, r0, #1
 800d230:	d103      	bne.n	800d23a <sbrk_aligned+0x26>
 800d232:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d236:	4620      	mov	r0, r4
 800d238:	bd70      	pop	{r4, r5, r6, pc}
 800d23a:	1cc4      	adds	r4, r0, #3
 800d23c:	f024 0403 	bic.w	r4, r4, #3
 800d240:	42a0      	cmp	r0, r4
 800d242:	d0f8      	beq.n	800d236 <sbrk_aligned+0x22>
 800d244:	1a21      	subs	r1, r4, r0
 800d246:	4628      	mov	r0, r5
 800d248:	f001 ffbe 	bl	800f1c8 <_sbrk_r>
 800d24c:	3001      	adds	r0, #1
 800d24e:	d1f2      	bne.n	800d236 <sbrk_aligned+0x22>
 800d250:	e7ef      	b.n	800d232 <sbrk_aligned+0x1e>
 800d252:	bf00      	nop
 800d254:	20001484 	.word	0x20001484

0800d258 <_malloc_r>:
 800d258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d25c:	1ccd      	adds	r5, r1, #3
 800d25e:	f025 0503 	bic.w	r5, r5, #3
 800d262:	3508      	adds	r5, #8
 800d264:	2d0c      	cmp	r5, #12
 800d266:	bf38      	it	cc
 800d268:	250c      	movcc	r5, #12
 800d26a:	2d00      	cmp	r5, #0
 800d26c:	4606      	mov	r6, r0
 800d26e:	db01      	blt.n	800d274 <_malloc_r+0x1c>
 800d270:	42a9      	cmp	r1, r5
 800d272:	d904      	bls.n	800d27e <_malloc_r+0x26>
 800d274:	230c      	movs	r3, #12
 800d276:	6033      	str	r3, [r6, #0]
 800d278:	2000      	movs	r0, #0
 800d27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d27e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d354 <_malloc_r+0xfc>
 800d282:	f000 f869 	bl	800d358 <__malloc_lock>
 800d286:	f8d8 3000 	ldr.w	r3, [r8]
 800d28a:	461c      	mov	r4, r3
 800d28c:	bb44      	cbnz	r4, 800d2e0 <_malloc_r+0x88>
 800d28e:	4629      	mov	r1, r5
 800d290:	4630      	mov	r0, r6
 800d292:	f7ff ffbf 	bl	800d214 <sbrk_aligned>
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	4604      	mov	r4, r0
 800d29a:	d158      	bne.n	800d34e <_malloc_r+0xf6>
 800d29c:	f8d8 4000 	ldr.w	r4, [r8]
 800d2a0:	4627      	mov	r7, r4
 800d2a2:	2f00      	cmp	r7, #0
 800d2a4:	d143      	bne.n	800d32e <_malloc_r+0xd6>
 800d2a6:	2c00      	cmp	r4, #0
 800d2a8:	d04b      	beq.n	800d342 <_malloc_r+0xea>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	eb04 0903 	add.w	r9, r4, r3
 800d2b4:	f001 ff88 	bl	800f1c8 <_sbrk_r>
 800d2b8:	4581      	cmp	r9, r0
 800d2ba:	d142      	bne.n	800d342 <_malloc_r+0xea>
 800d2bc:	6821      	ldr	r1, [r4, #0]
 800d2be:	1a6d      	subs	r5, r5, r1
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f7ff ffa6 	bl	800d214 <sbrk_aligned>
 800d2c8:	3001      	adds	r0, #1
 800d2ca:	d03a      	beq.n	800d342 <_malloc_r+0xea>
 800d2cc:	6823      	ldr	r3, [r4, #0]
 800d2ce:	442b      	add	r3, r5
 800d2d0:	6023      	str	r3, [r4, #0]
 800d2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800d2d6:	685a      	ldr	r2, [r3, #4]
 800d2d8:	bb62      	cbnz	r2, 800d334 <_malloc_r+0xdc>
 800d2da:	f8c8 7000 	str.w	r7, [r8]
 800d2de:	e00f      	b.n	800d300 <_malloc_r+0xa8>
 800d2e0:	6822      	ldr	r2, [r4, #0]
 800d2e2:	1b52      	subs	r2, r2, r5
 800d2e4:	d420      	bmi.n	800d328 <_malloc_r+0xd0>
 800d2e6:	2a0b      	cmp	r2, #11
 800d2e8:	d917      	bls.n	800d31a <_malloc_r+0xc2>
 800d2ea:	1961      	adds	r1, r4, r5
 800d2ec:	42a3      	cmp	r3, r4
 800d2ee:	6025      	str	r5, [r4, #0]
 800d2f0:	bf18      	it	ne
 800d2f2:	6059      	strne	r1, [r3, #4]
 800d2f4:	6863      	ldr	r3, [r4, #4]
 800d2f6:	bf08      	it	eq
 800d2f8:	f8c8 1000 	streq.w	r1, [r8]
 800d2fc:	5162      	str	r2, [r4, r5]
 800d2fe:	604b      	str	r3, [r1, #4]
 800d300:	4630      	mov	r0, r6
 800d302:	f000 f82f 	bl	800d364 <__malloc_unlock>
 800d306:	f104 000b 	add.w	r0, r4, #11
 800d30a:	1d23      	adds	r3, r4, #4
 800d30c:	f020 0007 	bic.w	r0, r0, #7
 800d310:	1ac2      	subs	r2, r0, r3
 800d312:	bf1c      	itt	ne
 800d314:	1a1b      	subne	r3, r3, r0
 800d316:	50a3      	strne	r3, [r4, r2]
 800d318:	e7af      	b.n	800d27a <_malloc_r+0x22>
 800d31a:	6862      	ldr	r2, [r4, #4]
 800d31c:	42a3      	cmp	r3, r4
 800d31e:	bf0c      	ite	eq
 800d320:	f8c8 2000 	streq.w	r2, [r8]
 800d324:	605a      	strne	r2, [r3, #4]
 800d326:	e7eb      	b.n	800d300 <_malloc_r+0xa8>
 800d328:	4623      	mov	r3, r4
 800d32a:	6864      	ldr	r4, [r4, #4]
 800d32c:	e7ae      	b.n	800d28c <_malloc_r+0x34>
 800d32e:	463c      	mov	r4, r7
 800d330:	687f      	ldr	r7, [r7, #4]
 800d332:	e7b6      	b.n	800d2a2 <_malloc_r+0x4a>
 800d334:	461a      	mov	r2, r3
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	42a3      	cmp	r3, r4
 800d33a:	d1fb      	bne.n	800d334 <_malloc_r+0xdc>
 800d33c:	2300      	movs	r3, #0
 800d33e:	6053      	str	r3, [r2, #4]
 800d340:	e7de      	b.n	800d300 <_malloc_r+0xa8>
 800d342:	230c      	movs	r3, #12
 800d344:	6033      	str	r3, [r6, #0]
 800d346:	4630      	mov	r0, r6
 800d348:	f000 f80c 	bl	800d364 <__malloc_unlock>
 800d34c:	e794      	b.n	800d278 <_malloc_r+0x20>
 800d34e:	6005      	str	r5, [r0, #0]
 800d350:	e7d6      	b.n	800d300 <_malloc_r+0xa8>
 800d352:	bf00      	nop
 800d354:	20001488 	.word	0x20001488

0800d358 <__malloc_lock>:
 800d358:	4801      	ldr	r0, [pc, #4]	@ (800d360 <__malloc_lock+0x8>)
 800d35a:	f7ff b8a4 	b.w	800c4a6 <__retarget_lock_acquire_recursive>
 800d35e:	bf00      	nop
 800d360:	20001480 	.word	0x20001480

0800d364 <__malloc_unlock>:
 800d364:	4801      	ldr	r0, [pc, #4]	@ (800d36c <__malloc_unlock+0x8>)
 800d366:	f7ff b89f 	b.w	800c4a8 <__retarget_lock_release_recursive>
 800d36a:	bf00      	nop
 800d36c:	20001480 	.word	0x20001480

0800d370 <_Balloc>:
 800d370:	b570      	push	{r4, r5, r6, lr}
 800d372:	69c6      	ldr	r6, [r0, #28]
 800d374:	4604      	mov	r4, r0
 800d376:	460d      	mov	r5, r1
 800d378:	b976      	cbnz	r6, 800d398 <_Balloc+0x28>
 800d37a:	2010      	movs	r0, #16
 800d37c:	f7ff ff42 	bl	800d204 <malloc>
 800d380:	4602      	mov	r2, r0
 800d382:	61e0      	str	r0, [r4, #28]
 800d384:	b920      	cbnz	r0, 800d390 <_Balloc+0x20>
 800d386:	4b18      	ldr	r3, [pc, #96]	@ (800d3e8 <_Balloc+0x78>)
 800d388:	4818      	ldr	r0, [pc, #96]	@ (800d3ec <_Balloc+0x7c>)
 800d38a:	216b      	movs	r1, #107	@ 0x6b
 800d38c:	f001 ff34 	bl	800f1f8 <__assert_func>
 800d390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d394:	6006      	str	r6, [r0, #0]
 800d396:	60c6      	str	r6, [r0, #12]
 800d398:	69e6      	ldr	r6, [r4, #28]
 800d39a:	68f3      	ldr	r3, [r6, #12]
 800d39c:	b183      	cbz	r3, 800d3c0 <_Balloc+0x50>
 800d39e:	69e3      	ldr	r3, [r4, #28]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3a6:	b9b8      	cbnz	r0, 800d3d8 <_Balloc+0x68>
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	fa01 f605 	lsl.w	r6, r1, r5
 800d3ae:	1d72      	adds	r2, r6, #5
 800d3b0:	0092      	lsls	r2, r2, #2
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f001 ff3e 	bl	800f234 <_calloc_r>
 800d3b8:	b160      	cbz	r0, 800d3d4 <_Balloc+0x64>
 800d3ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3be:	e00e      	b.n	800d3de <_Balloc+0x6e>
 800d3c0:	2221      	movs	r2, #33	@ 0x21
 800d3c2:	2104      	movs	r1, #4
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f001 ff35 	bl	800f234 <_calloc_r>
 800d3ca:	69e3      	ldr	r3, [r4, #28]
 800d3cc:	60f0      	str	r0, [r6, #12]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d1e4      	bne.n	800d39e <_Balloc+0x2e>
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	bd70      	pop	{r4, r5, r6, pc}
 800d3d8:	6802      	ldr	r2, [r0, #0]
 800d3da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3de:	2300      	movs	r3, #0
 800d3e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3e4:	e7f7      	b.n	800d3d6 <_Balloc+0x66>
 800d3e6:	bf00      	nop
 800d3e8:	0800fe36 	.word	0x0800fe36
 800d3ec:	0800feb6 	.word	0x0800feb6

0800d3f0 <_Bfree>:
 800d3f0:	b570      	push	{r4, r5, r6, lr}
 800d3f2:	69c6      	ldr	r6, [r0, #28]
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	b976      	cbnz	r6, 800d418 <_Bfree+0x28>
 800d3fa:	2010      	movs	r0, #16
 800d3fc:	f7ff ff02 	bl	800d204 <malloc>
 800d400:	4602      	mov	r2, r0
 800d402:	61e8      	str	r0, [r5, #28]
 800d404:	b920      	cbnz	r0, 800d410 <_Bfree+0x20>
 800d406:	4b09      	ldr	r3, [pc, #36]	@ (800d42c <_Bfree+0x3c>)
 800d408:	4809      	ldr	r0, [pc, #36]	@ (800d430 <_Bfree+0x40>)
 800d40a:	218f      	movs	r1, #143	@ 0x8f
 800d40c:	f001 fef4 	bl	800f1f8 <__assert_func>
 800d410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d414:	6006      	str	r6, [r0, #0]
 800d416:	60c6      	str	r6, [r0, #12]
 800d418:	b13c      	cbz	r4, 800d42a <_Bfree+0x3a>
 800d41a:	69eb      	ldr	r3, [r5, #28]
 800d41c:	6862      	ldr	r2, [r4, #4]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d424:	6021      	str	r1, [r4, #0]
 800d426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d42a:	bd70      	pop	{r4, r5, r6, pc}
 800d42c:	0800fe36 	.word	0x0800fe36
 800d430:	0800feb6 	.word	0x0800feb6

0800d434 <__multadd>:
 800d434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d438:	690d      	ldr	r5, [r1, #16]
 800d43a:	4607      	mov	r7, r0
 800d43c:	460c      	mov	r4, r1
 800d43e:	461e      	mov	r6, r3
 800d440:	f101 0c14 	add.w	ip, r1, #20
 800d444:	2000      	movs	r0, #0
 800d446:	f8dc 3000 	ldr.w	r3, [ip]
 800d44a:	b299      	uxth	r1, r3
 800d44c:	fb02 6101 	mla	r1, r2, r1, r6
 800d450:	0c1e      	lsrs	r6, r3, #16
 800d452:	0c0b      	lsrs	r3, r1, #16
 800d454:	fb02 3306 	mla	r3, r2, r6, r3
 800d458:	b289      	uxth	r1, r1
 800d45a:	3001      	adds	r0, #1
 800d45c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d460:	4285      	cmp	r5, r0
 800d462:	f84c 1b04 	str.w	r1, [ip], #4
 800d466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d46a:	dcec      	bgt.n	800d446 <__multadd+0x12>
 800d46c:	b30e      	cbz	r6, 800d4b2 <__multadd+0x7e>
 800d46e:	68a3      	ldr	r3, [r4, #8]
 800d470:	42ab      	cmp	r3, r5
 800d472:	dc19      	bgt.n	800d4a8 <__multadd+0x74>
 800d474:	6861      	ldr	r1, [r4, #4]
 800d476:	4638      	mov	r0, r7
 800d478:	3101      	adds	r1, #1
 800d47a:	f7ff ff79 	bl	800d370 <_Balloc>
 800d47e:	4680      	mov	r8, r0
 800d480:	b928      	cbnz	r0, 800d48e <__multadd+0x5a>
 800d482:	4602      	mov	r2, r0
 800d484:	4b0c      	ldr	r3, [pc, #48]	@ (800d4b8 <__multadd+0x84>)
 800d486:	480d      	ldr	r0, [pc, #52]	@ (800d4bc <__multadd+0x88>)
 800d488:	21ba      	movs	r1, #186	@ 0xba
 800d48a:	f001 feb5 	bl	800f1f8 <__assert_func>
 800d48e:	6922      	ldr	r2, [r4, #16]
 800d490:	3202      	adds	r2, #2
 800d492:	f104 010c 	add.w	r1, r4, #12
 800d496:	0092      	lsls	r2, r2, #2
 800d498:	300c      	adds	r0, #12
 800d49a:	f7ff f806 	bl	800c4aa <memcpy>
 800d49e:	4621      	mov	r1, r4
 800d4a0:	4638      	mov	r0, r7
 800d4a2:	f7ff ffa5 	bl	800d3f0 <_Bfree>
 800d4a6:	4644      	mov	r4, r8
 800d4a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4ac:	3501      	adds	r5, #1
 800d4ae:	615e      	str	r6, [r3, #20]
 800d4b0:	6125      	str	r5, [r4, #16]
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b8:	0800fea5 	.word	0x0800fea5
 800d4bc:	0800feb6 	.word	0x0800feb6

0800d4c0 <__s2b>:
 800d4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4c4:	460c      	mov	r4, r1
 800d4c6:	4615      	mov	r5, r2
 800d4c8:	461f      	mov	r7, r3
 800d4ca:	2209      	movs	r2, #9
 800d4cc:	3308      	adds	r3, #8
 800d4ce:	4606      	mov	r6, r0
 800d4d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	db09      	blt.n	800d4f0 <__s2b+0x30>
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f7ff ff47 	bl	800d370 <_Balloc>
 800d4e2:	b940      	cbnz	r0, 800d4f6 <__s2b+0x36>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	4b19      	ldr	r3, [pc, #100]	@ (800d54c <__s2b+0x8c>)
 800d4e8:	4819      	ldr	r0, [pc, #100]	@ (800d550 <__s2b+0x90>)
 800d4ea:	21d3      	movs	r1, #211	@ 0xd3
 800d4ec:	f001 fe84 	bl	800f1f8 <__assert_func>
 800d4f0:	0052      	lsls	r2, r2, #1
 800d4f2:	3101      	adds	r1, #1
 800d4f4:	e7f0      	b.n	800d4d8 <__s2b+0x18>
 800d4f6:	9b08      	ldr	r3, [sp, #32]
 800d4f8:	6143      	str	r3, [r0, #20]
 800d4fa:	2d09      	cmp	r5, #9
 800d4fc:	f04f 0301 	mov.w	r3, #1
 800d500:	6103      	str	r3, [r0, #16]
 800d502:	dd16      	ble.n	800d532 <__s2b+0x72>
 800d504:	f104 0909 	add.w	r9, r4, #9
 800d508:	46c8      	mov	r8, r9
 800d50a:	442c      	add	r4, r5
 800d50c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d510:	4601      	mov	r1, r0
 800d512:	3b30      	subs	r3, #48	@ 0x30
 800d514:	220a      	movs	r2, #10
 800d516:	4630      	mov	r0, r6
 800d518:	f7ff ff8c 	bl	800d434 <__multadd>
 800d51c:	45a0      	cmp	r8, r4
 800d51e:	d1f5      	bne.n	800d50c <__s2b+0x4c>
 800d520:	f1a5 0408 	sub.w	r4, r5, #8
 800d524:	444c      	add	r4, r9
 800d526:	1b2d      	subs	r5, r5, r4
 800d528:	1963      	adds	r3, r4, r5
 800d52a:	42bb      	cmp	r3, r7
 800d52c:	db04      	blt.n	800d538 <__s2b+0x78>
 800d52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d532:	340a      	adds	r4, #10
 800d534:	2509      	movs	r5, #9
 800d536:	e7f6      	b.n	800d526 <__s2b+0x66>
 800d538:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d53c:	4601      	mov	r1, r0
 800d53e:	3b30      	subs	r3, #48	@ 0x30
 800d540:	220a      	movs	r2, #10
 800d542:	4630      	mov	r0, r6
 800d544:	f7ff ff76 	bl	800d434 <__multadd>
 800d548:	e7ee      	b.n	800d528 <__s2b+0x68>
 800d54a:	bf00      	nop
 800d54c:	0800fea5 	.word	0x0800fea5
 800d550:	0800feb6 	.word	0x0800feb6

0800d554 <__hi0bits>:
 800d554:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d558:	4603      	mov	r3, r0
 800d55a:	bf36      	itet	cc
 800d55c:	0403      	lslcc	r3, r0, #16
 800d55e:	2000      	movcs	r0, #0
 800d560:	2010      	movcc	r0, #16
 800d562:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d566:	bf3c      	itt	cc
 800d568:	021b      	lslcc	r3, r3, #8
 800d56a:	3008      	addcc	r0, #8
 800d56c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d570:	bf3c      	itt	cc
 800d572:	011b      	lslcc	r3, r3, #4
 800d574:	3004      	addcc	r0, #4
 800d576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d57a:	bf3c      	itt	cc
 800d57c:	009b      	lslcc	r3, r3, #2
 800d57e:	3002      	addcc	r0, #2
 800d580:	2b00      	cmp	r3, #0
 800d582:	db05      	blt.n	800d590 <__hi0bits+0x3c>
 800d584:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d588:	f100 0001 	add.w	r0, r0, #1
 800d58c:	bf08      	it	eq
 800d58e:	2020      	moveq	r0, #32
 800d590:	4770      	bx	lr

0800d592 <__lo0bits>:
 800d592:	6803      	ldr	r3, [r0, #0]
 800d594:	4602      	mov	r2, r0
 800d596:	f013 0007 	ands.w	r0, r3, #7
 800d59a:	d00b      	beq.n	800d5b4 <__lo0bits+0x22>
 800d59c:	07d9      	lsls	r1, r3, #31
 800d59e:	d421      	bmi.n	800d5e4 <__lo0bits+0x52>
 800d5a0:	0798      	lsls	r0, r3, #30
 800d5a2:	bf49      	itett	mi
 800d5a4:	085b      	lsrmi	r3, r3, #1
 800d5a6:	089b      	lsrpl	r3, r3, #2
 800d5a8:	2001      	movmi	r0, #1
 800d5aa:	6013      	strmi	r3, [r2, #0]
 800d5ac:	bf5c      	itt	pl
 800d5ae:	6013      	strpl	r3, [r2, #0]
 800d5b0:	2002      	movpl	r0, #2
 800d5b2:	4770      	bx	lr
 800d5b4:	b299      	uxth	r1, r3
 800d5b6:	b909      	cbnz	r1, 800d5bc <__lo0bits+0x2a>
 800d5b8:	0c1b      	lsrs	r3, r3, #16
 800d5ba:	2010      	movs	r0, #16
 800d5bc:	b2d9      	uxtb	r1, r3
 800d5be:	b909      	cbnz	r1, 800d5c4 <__lo0bits+0x32>
 800d5c0:	3008      	adds	r0, #8
 800d5c2:	0a1b      	lsrs	r3, r3, #8
 800d5c4:	0719      	lsls	r1, r3, #28
 800d5c6:	bf04      	itt	eq
 800d5c8:	091b      	lsreq	r3, r3, #4
 800d5ca:	3004      	addeq	r0, #4
 800d5cc:	0799      	lsls	r1, r3, #30
 800d5ce:	bf04      	itt	eq
 800d5d0:	089b      	lsreq	r3, r3, #2
 800d5d2:	3002      	addeq	r0, #2
 800d5d4:	07d9      	lsls	r1, r3, #31
 800d5d6:	d403      	bmi.n	800d5e0 <__lo0bits+0x4e>
 800d5d8:	085b      	lsrs	r3, r3, #1
 800d5da:	f100 0001 	add.w	r0, r0, #1
 800d5de:	d003      	beq.n	800d5e8 <__lo0bits+0x56>
 800d5e0:	6013      	str	r3, [r2, #0]
 800d5e2:	4770      	bx	lr
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	4770      	bx	lr
 800d5e8:	2020      	movs	r0, #32
 800d5ea:	4770      	bx	lr

0800d5ec <__i2b>:
 800d5ec:	b510      	push	{r4, lr}
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	2101      	movs	r1, #1
 800d5f2:	f7ff febd 	bl	800d370 <_Balloc>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	b928      	cbnz	r0, 800d606 <__i2b+0x1a>
 800d5fa:	4b05      	ldr	r3, [pc, #20]	@ (800d610 <__i2b+0x24>)
 800d5fc:	4805      	ldr	r0, [pc, #20]	@ (800d614 <__i2b+0x28>)
 800d5fe:	f240 1145 	movw	r1, #325	@ 0x145
 800d602:	f001 fdf9 	bl	800f1f8 <__assert_func>
 800d606:	2301      	movs	r3, #1
 800d608:	6144      	str	r4, [r0, #20]
 800d60a:	6103      	str	r3, [r0, #16]
 800d60c:	bd10      	pop	{r4, pc}
 800d60e:	bf00      	nop
 800d610:	0800fea5 	.word	0x0800fea5
 800d614:	0800feb6 	.word	0x0800feb6

0800d618 <__multiply>:
 800d618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	4614      	mov	r4, r2
 800d61e:	690a      	ldr	r2, [r1, #16]
 800d620:	6923      	ldr	r3, [r4, #16]
 800d622:	429a      	cmp	r2, r3
 800d624:	bfa8      	it	ge
 800d626:	4623      	movge	r3, r4
 800d628:	460f      	mov	r7, r1
 800d62a:	bfa4      	itt	ge
 800d62c:	460c      	movge	r4, r1
 800d62e:	461f      	movge	r7, r3
 800d630:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d634:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d638:	68a3      	ldr	r3, [r4, #8]
 800d63a:	6861      	ldr	r1, [r4, #4]
 800d63c:	eb0a 0609 	add.w	r6, sl, r9
 800d640:	42b3      	cmp	r3, r6
 800d642:	b085      	sub	sp, #20
 800d644:	bfb8      	it	lt
 800d646:	3101      	addlt	r1, #1
 800d648:	f7ff fe92 	bl	800d370 <_Balloc>
 800d64c:	b930      	cbnz	r0, 800d65c <__multiply+0x44>
 800d64e:	4602      	mov	r2, r0
 800d650:	4b44      	ldr	r3, [pc, #272]	@ (800d764 <__multiply+0x14c>)
 800d652:	4845      	ldr	r0, [pc, #276]	@ (800d768 <__multiply+0x150>)
 800d654:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d658:	f001 fdce 	bl	800f1f8 <__assert_func>
 800d65c:	f100 0514 	add.w	r5, r0, #20
 800d660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d664:	462b      	mov	r3, r5
 800d666:	2200      	movs	r2, #0
 800d668:	4543      	cmp	r3, r8
 800d66a:	d321      	bcc.n	800d6b0 <__multiply+0x98>
 800d66c:	f107 0114 	add.w	r1, r7, #20
 800d670:	f104 0214 	add.w	r2, r4, #20
 800d674:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d678:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d67c:	9302      	str	r3, [sp, #8]
 800d67e:	1b13      	subs	r3, r2, r4
 800d680:	3b15      	subs	r3, #21
 800d682:	f023 0303 	bic.w	r3, r3, #3
 800d686:	3304      	adds	r3, #4
 800d688:	f104 0715 	add.w	r7, r4, #21
 800d68c:	42ba      	cmp	r2, r7
 800d68e:	bf38      	it	cc
 800d690:	2304      	movcc	r3, #4
 800d692:	9301      	str	r3, [sp, #4]
 800d694:	9b02      	ldr	r3, [sp, #8]
 800d696:	9103      	str	r1, [sp, #12]
 800d698:	428b      	cmp	r3, r1
 800d69a:	d80c      	bhi.n	800d6b6 <__multiply+0x9e>
 800d69c:	2e00      	cmp	r6, #0
 800d69e:	dd03      	ble.n	800d6a8 <__multiply+0x90>
 800d6a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d05b      	beq.n	800d760 <__multiply+0x148>
 800d6a8:	6106      	str	r6, [r0, #16]
 800d6aa:	b005      	add	sp, #20
 800d6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b0:	f843 2b04 	str.w	r2, [r3], #4
 800d6b4:	e7d8      	b.n	800d668 <__multiply+0x50>
 800d6b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d6ba:	f1ba 0f00 	cmp.w	sl, #0
 800d6be:	d024      	beq.n	800d70a <__multiply+0xf2>
 800d6c0:	f104 0e14 	add.w	lr, r4, #20
 800d6c4:	46a9      	mov	r9, r5
 800d6c6:	f04f 0c00 	mov.w	ip, #0
 800d6ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d6ce:	f8d9 3000 	ldr.w	r3, [r9]
 800d6d2:	fa1f fb87 	uxth.w	fp, r7
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d6dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d6e0:	f8d9 7000 	ldr.w	r7, [r9]
 800d6e4:	4463      	add	r3, ip
 800d6e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d6ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800d6ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d6f8:	4572      	cmp	r2, lr
 800d6fa:	f849 3b04 	str.w	r3, [r9], #4
 800d6fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d702:	d8e2      	bhi.n	800d6ca <__multiply+0xb2>
 800d704:	9b01      	ldr	r3, [sp, #4]
 800d706:	f845 c003 	str.w	ip, [r5, r3]
 800d70a:	9b03      	ldr	r3, [sp, #12]
 800d70c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d710:	3104      	adds	r1, #4
 800d712:	f1b9 0f00 	cmp.w	r9, #0
 800d716:	d021      	beq.n	800d75c <__multiply+0x144>
 800d718:	682b      	ldr	r3, [r5, #0]
 800d71a:	f104 0c14 	add.w	ip, r4, #20
 800d71e:	46ae      	mov	lr, r5
 800d720:	f04f 0a00 	mov.w	sl, #0
 800d724:	f8bc b000 	ldrh.w	fp, [ip]
 800d728:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d72c:	fb09 770b 	mla	r7, r9, fp, r7
 800d730:	4457      	add	r7, sl
 800d732:	b29b      	uxth	r3, r3
 800d734:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d738:	f84e 3b04 	str.w	r3, [lr], #4
 800d73c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d740:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d744:	f8be 3000 	ldrh.w	r3, [lr]
 800d748:	fb09 330a 	mla	r3, r9, sl, r3
 800d74c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d750:	4562      	cmp	r2, ip
 800d752:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d756:	d8e5      	bhi.n	800d724 <__multiply+0x10c>
 800d758:	9f01      	ldr	r7, [sp, #4]
 800d75a:	51eb      	str	r3, [r5, r7]
 800d75c:	3504      	adds	r5, #4
 800d75e:	e799      	b.n	800d694 <__multiply+0x7c>
 800d760:	3e01      	subs	r6, #1
 800d762:	e79b      	b.n	800d69c <__multiply+0x84>
 800d764:	0800fea5 	.word	0x0800fea5
 800d768:	0800feb6 	.word	0x0800feb6

0800d76c <__pow5mult>:
 800d76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d770:	4615      	mov	r5, r2
 800d772:	f012 0203 	ands.w	r2, r2, #3
 800d776:	4607      	mov	r7, r0
 800d778:	460e      	mov	r6, r1
 800d77a:	d007      	beq.n	800d78c <__pow5mult+0x20>
 800d77c:	4c25      	ldr	r4, [pc, #148]	@ (800d814 <__pow5mult+0xa8>)
 800d77e:	3a01      	subs	r2, #1
 800d780:	2300      	movs	r3, #0
 800d782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d786:	f7ff fe55 	bl	800d434 <__multadd>
 800d78a:	4606      	mov	r6, r0
 800d78c:	10ad      	asrs	r5, r5, #2
 800d78e:	d03d      	beq.n	800d80c <__pow5mult+0xa0>
 800d790:	69fc      	ldr	r4, [r7, #28]
 800d792:	b97c      	cbnz	r4, 800d7b4 <__pow5mult+0x48>
 800d794:	2010      	movs	r0, #16
 800d796:	f7ff fd35 	bl	800d204 <malloc>
 800d79a:	4602      	mov	r2, r0
 800d79c:	61f8      	str	r0, [r7, #28]
 800d79e:	b928      	cbnz	r0, 800d7ac <__pow5mult+0x40>
 800d7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800d818 <__pow5mult+0xac>)
 800d7a2:	481e      	ldr	r0, [pc, #120]	@ (800d81c <__pow5mult+0xb0>)
 800d7a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d7a8:	f001 fd26 	bl	800f1f8 <__assert_func>
 800d7ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7b0:	6004      	str	r4, [r0, #0]
 800d7b2:	60c4      	str	r4, [r0, #12]
 800d7b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d7b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7bc:	b94c      	cbnz	r4, 800d7d2 <__pow5mult+0x66>
 800d7be:	f240 2171 	movw	r1, #625	@ 0x271
 800d7c2:	4638      	mov	r0, r7
 800d7c4:	f7ff ff12 	bl	800d5ec <__i2b>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	6003      	str	r3, [r0, #0]
 800d7d2:	f04f 0900 	mov.w	r9, #0
 800d7d6:	07eb      	lsls	r3, r5, #31
 800d7d8:	d50a      	bpl.n	800d7f0 <__pow5mult+0x84>
 800d7da:	4631      	mov	r1, r6
 800d7dc:	4622      	mov	r2, r4
 800d7de:	4638      	mov	r0, r7
 800d7e0:	f7ff ff1a 	bl	800d618 <__multiply>
 800d7e4:	4631      	mov	r1, r6
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	4638      	mov	r0, r7
 800d7ea:	f7ff fe01 	bl	800d3f0 <_Bfree>
 800d7ee:	4646      	mov	r6, r8
 800d7f0:	106d      	asrs	r5, r5, #1
 800d7f2:	d00b      	beq.n	800d80c <__pow5mult+0xa0>
 800d7f4:	6820      	ldr	r0, [r4, #0]
 800d7f6:	b938      	cbnz	r0, 800d808 <__pow5mult+0x9c>
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	4638      	mov	r0, r7
 800d7fe:	f7ff ff0b 	bl	800d618 <__multiply>
 800d802:	6020      	str	r0, [r4, #0]
 800d804:	f8c0 9000 	str.w	r9, [r0]
 800d808:	4604      	mov	r4, r0
 800d80a:	e7e4      	b.n	800d7d6 <__pow5mult+0x6a>
 800d80c:	4630      	mov	r0, r6
 800d80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d812:	bf00      	nop
 800d814:	0800ff10 	.word	0x0800ff10
 800d818:	0800fe36 	.word	0x0800fe36
 800d81c:	0800feb6 	.word	0x0800feb6

0800d820 <__lshift>:
 800d820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d824:	460c      	mov	r4, r1
 800d826:	6849      	ldr	r1, [r1, #4]
 800d828:	6923      	ldr	r3, [r4, #16]
 800d82a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d82e:	68a3      	ldr	r3, [r4, #8]
 800d830:	4607      	mov	r7, r0
 800d832:	4691      	mov	r9, r2
 800d834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d838:	f108 0601 	add.w	r6, r8, #1
 800d83c:	42b3      	cmp	r3, r6
 800d83e:	db0b      	blt.n	800d858 <__lshift+0x38>
 800d840:	4638      	mov	r0, r7
 800d842:	f7ff fd95 	bl	800d370 <_Balloc>
 800d846:	4605      	mov	r5, r0
 800d848:	b948      	cbnz	r0, 800d85e <__lshift+0x3e>
 800d84a:	4602      	mov	r2, r0
 800d84c:	4b28      	ldr	r3, [pc, #160]	@ (800d8f0 <__lshift+0xd0>)
 800d84e:	4829      	ldr	r0, [pc, #164]	@ (800d8f4 <__lshift+0xd4>)
 800d850:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d854:	f001 fcd0 	bl	800f1f8 <__assert_func>
 800d858:	3101      	adds	r1, #1
 800d85a:	005b      	lsls	r3, r3, #1
 800d85c:	e7ee      	b.n	800d83c <__lshift+0x1c>
 800d85e:	2300      	movs	r3, #0
 800d860:	f100 0114 	add.w	r1, r0, #20
 800d864:	f100 0210 	add.w	r2, r0, #16
 800d868:	4618      	mov	r0, r3
 800d86a:	4553      	cmp	r3, sl
 800d86c:	db33      	blt.n	800d8d6 <__lshift+0xb6>
 800d86e:	6920      	ldr	r0, [r4, #16]
 800d870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d874:	f104 0314 	add.w	r3, r4, #20
 800d878:	f019 091f 	ands.w	r9, r9, #31
 800d87c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d884:	d02b      	beq.n	800d8de <__lshift+0xbe>
 800d886:	f1c9 0e20 	rsb	lr, r9, #32
 800d88a:	468a      	mov	sl, r1
 800d88c:	2200      	movs	r2, #0
 800d88e:	6818      	ldr	r0, [r3, #0]
 800d890:	fa00 f009 	lsl.w	r0, r0, r9
 800d894:	4310      	orrs	r0, r2
 800d896:	f84a 0b04 	str.w	r0, [sl], #4
 800d89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d89e:	459c      	cmp	ip, r3
 800d8a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8a4:	d8f3      	bhi.n	800d88e <__lshift+0x6e>
 800d8a6:	ebac 0304 	sub.w	r3, ip, r4
 800d8aa:	3b15      	subs	r3, #21
 800d8ac:	f023 0303 	bic.w	r3, r3, #3
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	f104 0015 	add.w	r0, r4, #21
 800d8b6:	4584      	cmp	ip, r0
 800d8b8:	bf38      	it	cc
 800d8ba:	2304      	movcc	r3, #4
 800d8bc:	50ca      	str	r2, [r1, r3]
 800d8be:	b10a      	cbz	r2, 800d8c4 <__lshift+0xa4>
 800d8c0:	f108 0602 	add.w	r6, r8, #2
 800d8c4:	3e01      	subs	r6, #1
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	612e      	str	r6, [r5, #16]
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	f7ff fd90 	bl	800d3f0 <_Bfree>
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8da:	3301      	adds	r3, #1
 800d8dc:	e7c5      	b.n	800d86a <__lshift+0x4a>
 800d8de:	3904      	subs	r1, #4
 800d8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8e8:	459c      	cmp	ip, r3
 800d8ea:	d8f9      	bhi.n	800d8e0 <__lshift+0xc0>
 800d8ec:	e7ea      	b.n	800d8c4 <__lshift+0xa4>
 800d8ee:	bf00      	nop
 800d8f0:	0800fea5 	.word	0x0800fea5
 800d8f4:	0800feb6 	.word	0x0800feb6

0800d8f8 <__mcmp>:
 800d8f8:	690a      	ldr	r2, [r1, #16]
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	6900      	ldr	r0, [r0, #16]
 800d8fe:	1a80      	subs	r0, r0, r2
 800d900:	b530      	push	{r4, r5, lr}
 800d902:	d10e      	bne.n	800d922 <__mcmp+0x2a>
 800d904:	3314      	adds	r3, #20
 800d906:	3114      	adds	r1, #20
 800d908:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d90c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d910:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d914:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d918:	4295      	cmp	r5, r2
 800d91a:	d003      	beq.n	800d924 <__mcmp+0x2c>
 800d91c:	d205      	bcs.n	800d92a <__mcmp+0x32>
 800d91e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d922:	bd30      	pop	{r4, r5, pc}
 800d924:	42a3      	cmp	r3, r4
 800d926:	d3f3      	bcc.n	800d910 <__mcmp+0x18>
 800d928:	e7fb      	b.n	800d922 <__mcmp+0x2a>
 800d92a:	2001      	movs	r0, #1
 800d92c:	e7f9      	b.n	800d922 <__mcmp+0x2a>
	...

0800d930 <__mdiff>:
 800d930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d934:	4689      	mov	r9, r1
 800d936:	4606      	mov	r6, r0
 800d938:	4611      	mov	r1, r2
 800d93a:	4648      	mov	r0, r9
 800d93c:	4614      	mov	r4, r2
 800d93e:	f7ff ffdb 	bl	800d8f8 <__mcmp>
 800d942:	1e05      	subs	r5, r0, #0
 800d944:	d112      	bne.n	800d96c <__mdiff+0x3c>
 800d946:	4629      	mov	r1, r5
 800d948:	4630      	mov	r0, r6
 800d94a:	f7ff fd11 	bl	800d370 <_Balloc>
 800d94e:	4602      	mov	r2, r0
 800d950:	b928      	cbnz	r0, 800d95e <__mdiff+0x2e>
 800d952:	4b3f      	ldr	r3, [pc, #252]	@ (800da50 <__mdiff+0x120>)
 800d954:	f240 2137 	movw	r1, #567	@ 0x237
 800d958:	483e      	ldr	r0, [pc, #248]	@ (800da54 <__mdiff+0x124>)
 800d95a:	f001 fc4d 	bl	800f1f8 <__assert_func>
 800d95e:	2301      	movs	r3, #1
 800d960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d964:	4610      	mov	r0, r2
 800d966:	b003      	add	sp, #12
 800d968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96c:	bfbc      	itt	lt
 800d96e:	464b      	movlt	r3, r9
 800d970:	46a1      	movlt	r9, r4
 800d972:	4630      	mov	r0, r6
 800d974:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d978:	bfba      	itte	lt
 800d97a:	461c      	movlt	r4, r3
 800d97c:	2501      	movlt	r5, #1
 800d97e:	2500      	movge	r5, #0
 800d980:	f7ff fcf6 	bl	800d370 <_Balloc>
 800d984:	4602      	mov	r2, r0
 800d986:	b918      	cbnz	r0, 800d990 <__mdiff+0x60>
 800d988:	4b31      	ldr	r3, [pc, #196]	@ (800da50 <__mdiff+0x120>)
 800d98a:	f240 2145 	movw	r1, #581	@ 0x245
 800d98e:	e7e3      	b.n	800d958 <__mdiff+0x28>
 800d990:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d994:	6926      	ldr	r6, [r4, #16]
 800d996:	60c5      	str	r5, [r0, #12]
 800d998:	f109 0310 	add.w	r3, r9, #16
 800d99c:	f109 0514 	add.w	r5, r9, #20
 800d9a0:	f104 0e14 	add.w	lr, r4, #20
 800d9a4:	f100 0b14 	add.w	fp, r0, #20
 800d9a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d9ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d9b0:	9301      	str	r3, [sp, #4]
 800d9b2:	46d9      	mov	r9, fp
 800d9b4:	f04f 0c00 	mov.w	ip, #0
 800d9b8:	9b01      	ldr	r3, [sp, #4]
 800d9ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d9be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d9c2:	9301      	str	r3, [sp, #4]
 800d9c4:	fa1f f38a 	uxth.w	r3, sl
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	b283      	uxth	r3, r0
 800d9cc:	1acb      	subs	r3, r1, r3
 800d9ce:	0c00      	lsrs	r0, r0, #16
 800d9d0:	4463      	add	r3, ip
 800d9d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d9d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d9e0:	4576      	cmp	r6, lr
 800d9e2:	f849 3b04 	str.w	r3, [r9], #4
 800d9e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9ea:	d8e5      	bhi.n	800d9b8 <__mdiff+0x88>
 800d9ec:	1b33      	subs	r3, r6, r4
 800d9ee:	3b15      	subs	r3, #21
 800d9f0:	f023 0303 	bic.w	r3, r3, #3
 800d9f4:	3415      	adds	r4, #21
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	42a6      	cmp	r6, r4
 800d9fa:	bf38      	it	cc
 800d9fc:	2304      	movcc	r3, #4
 800d9fe:	441d      	add	r5, r3
 800da00:	445b      	add	r3, fp
 800da02:	461e      	mov	r6, r3
 800da04:	462c      	mov	r4, r5
 800da06:	4544      	cmp	r4, r8
 800da08:	d30e      	bcc.n	800da28 <__mdiff+0xf8>
 800da0a:	f108 0103 	add.w	r1, r8, #3
 800da0e:	1b49      	subs	r1, r1, r5
 800da10:	f021 0103 	bic.w	r1, r1, #3
 800da14:	3d03      	subs	r5, #3
 800da16:	45a8      	cmp	r8, r5
 800da18:	bf38      	it	cc
 800da1a:	2100      	movcc	r1, #0
 800da1c:	440b      	add	r3, r1
 800da1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da22:	b191      	cbz	r1, 800da4a <__mdiff+0x11a>
 800da24:	6117      	str	r7, [r2, #16]
 800da26:	e79d      	b.n	800d964 <__mdiff+0x34>
 800da28:	f854 1b04 	ldr.w	r1, [r4], #4
 800da2c:	46e6      	mov	lr, ip
 800da2e:	0c08      	lsrs	r0, r1, #16
 800da30:	fa1c fc81 	uxtah	ip, ip, r1
 800da34:	4471      	add	r1, lr
 800da36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da3a:	b289      	uxth	r1, r1
 800da3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da40:	f846 1b04 	str.w	r1, [r6], #4
 800da44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da48:	e7dd      	b.n	800da06 <__mdiff+0xd6>
 800da4a:	3f01      	subs	r7, #1
 800da4c:	e7e7      	b.n	800da1e <__mdiff+0xee>
 800da4e:	bf00      	nop
 800da50:	0800fea5 	.word	0x0800fea5
 800da54:	0800feb6 	.word	0x0800feb6

0800da58 <__ulp>:
 800da58:	b082      	sub	sp, #8
 800da5a:	ed8d 0b00 	vstr	d0, [sp]
 800da5e:	9a01      	ldr	r2, [sp, #4]
 800da60:	4b0f      	ldr	r3, [pc, #60]	@ (800daa0 <__ulp+0x48>)
 800da62:	4013      	ands	r3, r2
 800da64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	dc08      	bgt.n	800da7e <__ulp+0x26>
 800da6c:	425b      	negs	r3, r3
 800da6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800da72:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da76:	da04      	bge.n	800da82 <__ulp+0x2a>
 800da78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800da7c:	4113      	asrs	r3, r2
 800da7e:	2200      	movs	r2, #0
 800da80:	e008      	b.n	800da94 <__ulp+0x3c>
 800da82:	f1a2 0314 	sub.w	r3, r2, #20
 800da86:	2b1e      	cmp	r3, #30
 800da88:	bfda      	itte	le
 800da8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800da8e:	40da      	lsrle	r2, r3
 800da90:	2201      	movgt	r2, #1
 800da92:	2300      	movs	r3, #0
 800da94:	4619      	mov	r1, r3
 800da96:	4610      	mov	r0, r2
 800da98:	ec41 0b10 	vmov	d0, r0, r1
 800da9c:	b002      	add	sp, #8
 800da9e:	4770      	bx	lr
 800daa0:	7ff00000 	.word	0x7ff00000

0800daa4 <__b2d>:
 800daa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa8:	6906      	ldr	r6, [r0, #16]
 800daaa:	f100 0814 	add.w	r8, r0, #20
 800daae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dab2:	1f37      	subs	r7, r6, #4
 800dab4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dab8:	4610      	mov	r0, r2
 800daba:	f7ff fd4b 	bl	800d554 <__hi0bits>
 800dabe:	f1c0 0320 	rsb	r3, r0, #32
 800dac2:	280a      	cmp	r0, #10
 800dac4:	600b      	str	r3, [r1, #0]
 800dac6:	491b      	ldr	r1, [pc, #108]	@ (800db34 <__b2d+0x90>)
 800dac8:	dc15      	bgt.n	800daf6 <__b2d+0x52>
 800daca:	f1c0 0c0b 	rsb	ip, r0, #11
 800dace:	fa22 f30c 	lsr.w	r3, r2, ip
 800dad2:	45b8      	cmp	r8, r7
 800dad4:	ea43 0501 	orr.w	r5, r3, r1
 800dad8:	bf34      	ite	cc
 800dada:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dade:	2300      	movcs	r3, #0
 800dae0:	3015      	adds	r0, #21
 800dae2:	fa02 f000 	lsl.w	r0, r2, r0
 800dae6:	fa23 f30c 	lsr.w	r3, r3, ip
 800daea:	4303      	orrs	r3, r0
 800daec:	461c      	mov	r4, r3
 800daee:	ec45 4b10 	vmov	d0, r4, r5
 800daf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf6:	45b8      	cmp	r8, r7
 800daf8:	bf3a      	itte	cc
 800dafa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dafe:	f1a6 0708 	subcc.w	r7, r6, #8
 800db02:	2300      	movcs	r3, #0
 800db04:	380b      	subs	r0, #11
 800db06:	d012      	beq.n	800db2e <__b2d+0x8a>
 800db08:	f1c0 0120 	rsb	r1, r0, #32
 800db0c:	fa23 f401 	lsr.w	r4, r3, r1
 800db10:	4082      	lsls	r2, r0
 800db12:	4322      	orrs	r2, r4
 800db14:	4547      	cmp	r7, r8
 800db16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800db1a:	bf8c      	ite	hi
 800db1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800db20:	2200      	movls	r2, #0
 800db22:	4083      	lsls	r3, r0
 800db24:	40ca      	lsrs	r2, r1
 800db26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800db2a:	4313      	orrs	r3, r2
 800db2c:	e7de      	b.n	800daec <__b2d+0x48>
 800db2e:	ea42 0501 	orr.w	r5, r2, r1
 800db32:	e7db      	b.n	800daec <__b2d+0x48>
 800db34:	3ff00000 	.word	0x3ff00000

0800db38 <__d2b>:
 800db38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db3c:	460f      	mov	r7, r1
 800db3e:	2101      	movs	r1, #1
 800db40:	ec59 8b10 	vmov	r8, r9, d0
 800db44:	4616      	mov	r6, r2
 800db46:	f7ff fc13 	bl	800d370 <_Balloc>
 800db4a:	4604      	mov	r4, r0
 800db4c:	b930      	cbnz	r0, 800db5c <__d2b+0x24>
 800db4e:	4602      	mov	r2, r0
 800db50:	4b23      	ldr	r3, [pc, #140]	@ (800dbe0 <__d2b+0xa8>)
 800db52:	4824      	ldr	r0, [pc, #144]	@ (800dbe4 <__d2b+0xac>)
 800db54:	f240 310f 	movw	r1, #783	@ 0x30f
 800db58:	f001 fb4e 	bl	800f1f8 <__assert_func>
 800db5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db64:	b10d      	cbz	r5, 800db6a <__d2b+0x32>
 800db66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800db6a:	9301      	str	r3, [sp, #4]
 800db6c:	f1b8 0300 	subs.w	r3, r8, #0
 800db70:	d023      	beq.n	800dbba <__d2b+0x82>
 800db72:	4668      	mov	r0, sp
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	f7ff fd0c 	bl	800d592 <__lo0bits>
 800db7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db7e:	b1d0      	cbz	r0, 800dbb6 <__d2b+0x7e>
 800db80:	f1c0 0320 	rsb	r3, r0, #32
 800db84:	fa02 f303 	lsl.w	r3, r2, r3
 800db88:	430b      	orrs	r3, r1
 800db8a:	40c2      	lsrs	r2, r0
 800db8c:	6163      	str	r3, [r4, #20]
 800db8e:	9201      	str	r2, [sp, #4]
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	61a3      	str	r3, [r4, #24]
 800db94:	2b00      	cmp	r3, #0
 800db96:	bf0c      	ite	eq
 800db98:	2201      	moveq	r2, #1
 800db9a:	2202      	movne	r2, #2
 800db9c:	6122      	str	r2, [r4, #16]
 800db9e:	b1a5      	cbz	r5, 800dbca <__d2b+0x92>
 800dba0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dba4:	4405      	add	r5, r0
 800dba6:	603d      	str	r5, [r7, #0]
 800dba8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dbac:	6030      	str	r0, [r6, #0]
 800dbae:	4620      	mov	r0, r4
 800dbb0:	b003      	add	sp, #12
 800dbb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbb6:	6161      	str	r1, [r4, #20]
 800dbb8:	e7ea      	b.n	800db90 <__d2b+0x58>
 800dbba:	a801      	add	r0, sp, #4
 800dbbc:	f7ff fce9 	bl	800d592 <__lo0bits>
 800dbc0:	9b01      	ldr	r3, [sp, #4]
 800dbc2:	6163      	str	r3, [r4, #20]
 800dbc4:	3020      	adds	r0, #32
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	e7e8      	b.n	800db9c <__d2b+0x64>
 800dbca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dbd2:	6038      	str	r0, [r7, #0]
 800dbd4:	6918      	ldr	r0, [r3, #16]
 800dbd6:	f7ff fcbd 	bl	800d554 <__hi0bits>
 800dbda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbde:	e7e5      	b.n	800dbac <__d2b+0x74>
 800dbe0:	0800fea5 	.word	0x0800fea5
 800dbe4:	0800feb6 	.word	0x0800feb6

0800dbe8 <__ratio>:
 800dbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	b085      	sub	sp, #20
 800dbee:	e9cd 1000 	strd	r1, r0, [sp]
 800dbf2:	a902      	add	r1, sp, #8
 800dbf4:	f7ff ff56 	bl	800daa4 <__b2d>
 800dbf8:	9800      	ldr	r0, [sp, #0]
 800dbfa:	a903      	add	r1, sp, #12
 800dbfc:	ec55 4b10 	vmov	r4, r5, d0
 800dc00:	f7ff ff50 	bl	800daa4 <__b2d>
 800dc04:	9b01      	ldr	r3, [sp, #4]
 800dc06:	6919      	ldr	r1, [r3, #16]
 800dc08:	9b00      	ldr	r3, [sp, #0]
 800dc0a:	691b      	ldr	r3, [r3, #16]
 800dc0c:	1ac9      	subs	r1, r1, r3
 800dc0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dc12:	1a9b      	subs	r3, r3, r2
 800dc14:	ec5b ab10 	vmov	sl, fp, d0
 800dc18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	bfce      	itee	gt
 800dc20:	462a      	movgt	r2, r5
 800dc22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dc26:	465a      	movle	r2, fp
 800dc28:	462f      	mov	r7, r5
 800dc2a:	46d9      	mov	r9, fp
 800dc2c:	bfcc      	ite	gt
 800dc2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dc32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dc36:	464b      	mov	r3, r9
 800dc38:	4652      	mov	r2, sl
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	4639      	mov	r1, r7
 800dc3e:	f7f2 fe2d 	bl	800089c <__aeabi_ddiv>
 800dc42:	ec41 0b10 	vmov	d0, r0, r1
 800dc46:	b005      	add	sp, #20
 800dc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc4c <__copybits>:
 800dc4c:	3901      	subs	r1, #1
 800dc4e:	b570      	push	{r4, r5, r6, lr}
 800dc50:	1149      	asrs	r1, r1, #5
 800dc52:	6914      	ldr	r4, [r2, #16]
 800dc54:	3101      	adds	r1, #1
 800dc56:	f102 0314 	add.w	r3, r2, #20
 800dc5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc62:	1f05      	subs	r5, r0, #4
 800dc64:	42a3      	cmp	r3, r4
 800dc66:	d30c      	bcc.n	800dc82 <__copybits+0x36>
 800dc68:	1aa3      	subs	r3, r4, r2
 800dc6a:	3b11      	subs	r3, #17
 800dc6c:	f023 0303 	bic.w	r3, r3, #3
 800dc70:	3211      	adds	r2, #17
 800dc72:	42a2      	cmp	r2, r4
 800dc74:	bf88      	it	hi
 800dc76:	2300      	movhi	r3, #0
 800dc78:	4418      	add	r0, r3
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	4288      	cmp	r0, r1
 800dc7e:	d305      	bcc.n	800dc8c <__copybits+0x40>
 800dc80:	bd70      	pop	{r4, r5, r6, pc}
 800dc82:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc86:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc8a:	e7eb      	b.n	800dc64 <__copybits+0x18>
 800dc8c:	f840 3b04 	str.w	r3, [r0], #4
 800dc90:	e7f4      	b.n	800dc7c <__copybits+0x30>

0800dc92 <__any_on>:
 800dc92:	f100 0214 	add.w	r2, r0, #20
 800dc96:	6900      	ldr	r0, [r0, #16]
 800dc98:	114b      	asrs	r3, r1, #5
 800dc9a:	4298      	cmp	r0, r3
 800dc9c:	b510      	push	{r4, lr}
 800dc9e:	db11      	blt.n	800dcc4 <__any_on+0x32>
 800dca0:	dd0a      	ble.n	800dcb8 <__any_on+0x26>
 800dca2:	f011 011f 	ands.w	r1, r1, #31
 800dca6:	d007      	beq.n	800dcb8 <__any_on+0x26>
 800dca8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dcac:	fa24 f001 	lsr.w	r0, r4, r1
 800dcb0:	fa00 f101 	lsl.w	r1, r0, r1
 800dcb4:	428c      	cmp	r4, r1
 800dcb6:	d10b      	bne.n	800dcd0 <__any_on+0x3e>
 800dcb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d803      	bhi.n	800dcc8 <__any_on+0x36>
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	bd10      	pop	{r4, pc}
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	e7f7      	b.n	800dcb8 <__any_on+0x26>
 800dcc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dccc:	2900      	cmp	r1, #0
 800dcce:	d0f5      	beq.n	800dcbc <__any_on+0x2a>
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	e7f6      	b.n	800dcc2 <__any_on+0x30>

0800dcd4 <sulp>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	4604      	mov	r4, r0
 800dcd8:	460d      	mov	r5, r1
 800dcda:	ec45 4b10 	vmov	d0, r4, r5
 800dcde:	4616      	mov	r6, r2
 800dce0:	f7ff feba 	bl	800da58 <__ulp>
 800dce4:	ec51 0b10 	vmov	r0, r1, d0
 800dce8:	b17e      	cbz	r6, 800dd0a <sulp+0x36>
 800dcea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dcee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	dd09      	ble.n	800dd0a <sulp+0x36>
 800dcf6:	051b      	lsls	r3, r3, #20
 800dcf8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dcfc:	2400      	movs	r4, #0
 800dcfe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dd02:	4622      	mov	r2, r4
 800dd04:	462b      	mov	r3, r5
 800dd06:	f7f2 fc9f 	bl	8000648 <__aeabi_dmul>
 800dd0a:	ec41 0b10 	vmov	d0, r0, r1
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}

0800dd10 <_strtod_l>:
 800dd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd14:	b09f      	sub	sp, #124	@ 0x7c
 800dd16:	460c      	mov	r4, r1
 800dd18:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	921a      	str	r2, [sp, #104]	@ 0x68
 800dd1e:	9005      	str	r0, [sp, #20]
 800dd20:	f04f 0a00 	mov.w	sl, #0
 800dd24:	f04f 0b00 	mov.w	fp, #0
 800dd28:	460a      	mov	r2, r1
 800dd2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd2c:	7811      	ldrb	r1, [r2, #0]
 800dd2e:	292b      	cmp	r1, #43	@ 0x2b
 800dd30:	d04a      	beq.n	800ddc8 <_strtod_l+0xb8>
 800dd32:	d838      	bhi.n	800dda6 <_strtod_l+0x96>
 800dd34:	290d      	cmp	r1, #13
 800dd36:	d832      	bhi.n	800dd9e <_strtod_l+0x8e>
 800dd38:	2908      	cmp	r1, #8
 800dd3a:	d832      	bhi.n	800dda2 <_strtod_l+0x92>
 800dd3c:	2900      	cmp	r1, #0
 800dd3e:	d03b      	beq.n	800ddb8 <_strtod_l+0xa8>
 800dd40:	2200      	movs	r2, #0
 800dd42:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dd44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dd46:	782a      	ldrb	r2, [r5, #0]
 800dd48:	2a30      	cmp	r2, #48	@ 0x30
 800dd4a:	f040 80b3 	bne.w	800deb4 <_strtod_l+0x1a4>
 800dd4e:	786a      	ldrb	r2, [r5, #1]
 800dd50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd54:	2a58      	cmp	r2, #88	@ 0x58
 800dd56:	d16e      	bne.n	800de36 <_strtod_l+0x126>
 800dd58:	9302      	str	r3, [sp, #8]
 800dd5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd5c:	9301      	str	r3, [sp, #4]
 800dd5e:	ab1a      	add	r3, sp, #104	@ 0x68
 800dd60:	9300      	str	r3, [sp, #0]
 800dd62:	4a8e      	ldr	r2, [pc, #568]	@ (800df9c <_strtod_l+0x28c>)
 800dd64:	9805      	ldr	r0, [sp, #20]
 800dd66:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dd68:	a919      	add	r1, sp, #100	@ 0x64
 800dd6a:	f001 fadf 	bl	800f32c <__gethex>
 800dd6e:	f010 060f 	ands.w	r6, r0, #15
 800dd72:	4604      	mov	r4, r0
 800dd74:	d005      	beq.n	800dd82 <_strtod_l+0x72>
 800dd76:	2e06      	cmp	r6, #6
 800dd78:	d128      	bne.n	800ddcc <_strtod_l+0xbc>
 800dd7a:	3501      	adds	r5, #1
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	9519      	str	r5, [sp, #100]	@ 0x64
 800dd80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f040 858e 	bne.w	800e8a6 <_strtod_l+0xb96>
 800dd8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd8c:	b1cb      	cbz	r3, 800ddc2 <_strtod_l+0xb2>
 800dd8e:	4652      	mov	r2, sl
 800dd90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dd94:	ec43 2b10 	vmov	d0, r2, r3
 800dd98:	b01f      	add	sp, #124	@ 0x7c
 800dd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9e:	2920      	cmp	r1, #32
 800dda0:	d1ce      	bne.n	800dd40 <_strtod_l+0x30>
 800dda2:	3201      	adds	r2, #1
 800dda4:	e7c1      	b.n	800dd2a <_strtod_l+0x1a>
 800dda6:	292d      	cmp	r1, #45	@ 0x2d
 800dda8:	d1ca      	bne.n	800dd40 <_strtod_l+0x30>
 800ddaa:	2101      	movs	r1, #1
 800ddac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ddae:	1c51      	adds	r1, r2, #1
 800ddb0:	9119      	str	r1, [sp, #100]	@ 0x64
 800ddb2:	7852      	ldrb	r2, [r2, #1]
 800ddb4:	2a00      	cmp	r2, #0
 800ddb6:	d1c5      	bne.n	800dd44 <_strtod_l+0x34>
 800ddb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ddba:	9419      	str	r4, [sp, #100]	@ 0x64
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f040 8570 	bne.w	800e8a2 <_strtod_l+0xb92>
 800ddc2:	4652      	mov	r2, sl
 800ddc4:	465b      	mov	r3, fp
 800ddc6:	e7e5      	b.n	800dd94 <_strtod_l+0x84>
 800ddc8:	2100      	movs	r1, #0
 800ddca:	e7ef      	b.n	800ddac <_strtod_l+0x9c>
 800ddcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ddce:	b13a      	cbz	r2, 800dde0 <_strtod_l+0xd0>
 800ddd0:	2135      	movs	r1, #53	@ 0x35
 800ddd2:	a81c      	add	r0, sp, #112	@ 0x70
 800ddd4:	f7ff ff3a 	bl	800dc4c <__copybits>
 800ddd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddda:	9805      	ldr	r0, [sp, #20]
 800dddc:	f7ff fb08 	bl	800d3f0 <_Bfree>
 800dde0:	3e01      	subs	r6, #1
 800dde2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800dde4:	2e04      	cmp	r6, #4
 800dde6:	d806      	bhi.n	800ddf6 <_strtod_l+0xe6>
 800dde8:	e8df f006 	tbb	[pc, r6]
 800ddec:	201d0314 	.word	0x201d0314
 800ddf0:	14          	.byte	0x14
 800ddf1:	00          	.byte	0x00
 800ddf2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ddf6:	05e1      	lsls	r1, r4, #23
 800ddf8:	bf48      	it	mi
 800ddfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ddfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de02:	0d1b      	lsrs	r3, r3, #20
 800de04:	051b      	lsls	r3, r3, #20
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1bb      	bne.n	800dd82 <_strtod_l+0x72>
 800de0a:	f7fe fb21 	bl	800c450 <__errno>
 800de0e:	2322      	movs	r3, #34	@ 0x22
 800de10:	6003      	str	r3, [r0, #0]
 800de12:	e7b6      	b.n	800dd82 <_strtod_l+0x72>
 800de14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800de18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800de1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800de20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800de24:	e7e7      	b.n	800ddf6 <_strtod_l+0xe6>
 800de26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dfa4 <_strtod_l+0x294>
 800de2a:	e7e4      	b.n	800ddf6 <_strtod_l+0xe6>
 800de2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800de30:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800de34:	e7df      	b.n	800ddf6 <_strtod_l+0xe6>
 800de36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800de3c:	785b      	ldrb	r3, [r3, #1]
 800de3e:	2b30      	cmp	r3, #48	@ 0x30
 800de40:	d0f9      	beq.n	800de36 <_strtod_l+0x126>
 800de42:	2b00      	cmp	r3, #0
 800de44:	d09d      	beq.n	800dd82 <_strtod_l+0x72>
 800de46:	2301      	movs	r3, #1
 800de48:	9309      	str	r3, [sp, #36]	@ 0x24
 800de4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800de4e:	2300      	movs	r3, #0
 800de50:	9308      	str	r3, [sp, #32]
 800de52:	930a      	str	r3, [sp, #40]	@ 0x28
 800de54:	461f      	mov	r7, r3
 800de56:	220a      	movs	r2, #10
 800de58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800de5a:	7805      	ldrb	r5, [r0, #0]
 800de5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800de60:	b2d9      	uxtb	r1, r3
 800de62:	2909      	cmp	r1, #9
 800de64:	d928      	bls.n	800deb8 <_strtod_l+0x1a8>
 800de66:	494e      	ldr	r1, [pc, #312]	@ (800dfa0 <_strtod_l+0x290>)
 800de68:	2201      	movs	r2, #1
 800de6a:	f001 f979 	bl	800f160 <strncmp>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d032      	beq.n	800ded8 <_strtod_l+0x1c8>
 800de72:	2000      	movs	r0, #0
 800de74:	462a      	mov	r2, r5
 800de76:	4681      	mov	r9, r0
 800de78:	463d      	mov	r5, r7
 800de7a:	4603      	mov	r3, r0
 800de7c:	2a65      	cmp	r2, #101	@ 0x65
 800de7e:	d001      	beq.n	800de84 <_strtod_l+0x174>
 800de80:	2a45      	cmp	r2, #69	@ 0x45
 800de82:	d114      	bne.n	800deae <_strtod_l+0x19e>
 800de84:	b91d      	cbnz	r5, 800de8e <_strtod_l+0x17e>
 800de86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de88:	4302      	orrs	r2, r0
 800de8a:	d095      	beq.n	800ddb8 <_strtod_l+0xa8>
 800de8c:	2500      	movs	r5, #0
 800de8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800de90:	1c62      	adds	r2, r4, #1
 800de92:	9219      	str	r2, [sp, #100]	@ 0x64
 800de94:	7862      	ldrb	r2, [r4, #1]
 800de96:	2a2b      	cmp	r2, #43	@ 0x2b
 800de98:	d077      	beq.n	800df8a <_strtod_l+0x27a>
 800de9a:	2a2d      	cmp	r2, #45	@ 0x2d
 800de9c:	d07b      	beq.n	800df96 <_strtod_l+0x286>
 800de9e:	f04f 0c00 	mov.w	ip, #0
 800dea2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dea6:	2909      	cmp	r1, #9
 800dea8:	f240 8082 	bls.w	800dfb0 <_strtod_l+0x2a0>
 800deac:	9419      	str	r4, [sp, #100]	@ 0x64
 800deae:	f04f 0800 	mov.w	r8, #0
 800deb2:	e0a2      	b.n	800dffa <_strtod_l+0x2ea>
 800deb4:	2300      	movs	r3, #0
 800deb6:	e7c7      	b.n	800de48 <_strtod_l+0x138>
 800deb8:	2f08      	cmp	r7, #8
 800deba:	bfd5      	itete	le
 800debc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800debe:	9908      	ldrgt	r1, [sp, #32]
 800dec0:	fb02 3301 	mlale	r3, r2, r1, r3
 800dec4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dec8:	f100 0001 	add.w	r0, r0, #1
 800decc:	bfd4      	ite	le
 800dece:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ded0:	9308      	strgt	r3, [sp, #32]
 800ded2:	3701      	adds	r7, #1
 800ded4:	9019      	str	r0, [sp, #100]	@ 0x64
 800ded6:	e7bf      	b.n	800de58 <_strtod_l+0x148>
 800ded8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800deda:	1c5a      	adds	r2, r3, #1
 800dedc:	9219      	str	r2, [sp, #100]	@ 0x64
 800dede:	785a      	ldrb	r2, [r3, #1]
 800dee0:	b37f      	cbz	r7, 800df42 <_strtod_l+0x232>
 800dee2:	4681      	mov	r9, r0
 800dee4:	463d      	mov	r5, r7
 800dee6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800deea:	2b09      	cmp	r3, #9
 800deec:	d912      	bls.n	800df14 <_strtod_l+0x204>
 800deee:	2301      	movs	r3, #1
 800def0:	e7c4      	b.n	800de7c <_strtod_l+0x16c>
 800def2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	9219      	str	r2, [sp, #100]	@ 0x64
 800def8:	785a      	ldrb	r2, [r3, #1]
 800defa:	3001      	adds	r0, #1
 800defc:	2a30      	cmp	r2, #48	@ 0x30
 800defe:	d0f8      	beq.n	800def2 <_strtod_l+0x1e2>
 800df00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800df04:	2b08      	cmp	r3, #8
 800df06:	f200 84d3 	bhi.w	800e8b0 <_strtod_l+0xba0>
 800df0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800df0e:	4681      	mov	r9, r0
 800df10:	2000      	movs	r0, #0
 800df12:	4605      	mov	r5, r0
 800df14:	3a30      	subs	r2, #48	@ 0x30
 800df16:	f100 0301 	add.w	r3, r0, #1
 800df1a:	d02a      	beq.n	800df72 <_strtod_l+0x262>
 800df1c:	4499      	add	r9, r3
 800df1e:	eb00 0c05 	add.w	ip, r0, r5
 800df22:	462b      	mov	r3, r5
 800df24:	210a      	movs	r1, #10
 800df26:	4563      	cmp	r3, ip
 800df28:	d10d      	bne.n	800df46 <_strtod_l+0x236>
 800df2a:	1c69      	adds	r1, r5, #1
 800df2c:	4401      	add	r1, r0
 800df2e:	4428      	add	r0, r5
 800df30:	2808      	cmp	r0, #8
 800df32:	dc16      	bgt.n	800df62 <_strtod_l+0x252>
 800df34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df36:	230a      	movs	r3, #10
 800df38:	fb03 2300 	mla	r3, r3, r0, r2
 800df3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800df3e:	2300      	movs	r3, #0
 800df40:	e018      	b.n	800df74 <_strtod_l+0x264>
 800df42:	4638      	mov	r0, r7
 800df44:	e7da      	b.n	800defc <_strtod_l+0x1ec>
 800df46:	2b08      	cmp	r3, #8
 800df48:	f103 0301 	add.w	r3, r3, #1
 800df4c:	dc03      	bgt.n	800df56 <_strtod_l+0x246>
 800df4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800df50:	434e      	muls	r6, r1
 800df52:	960a      	str	r6, [sp, #40]	@ 0x28
 800df54:	e7e7      	b.n	800df26 <_strtod_l+0x216>
 800df56:	2b10      	cmp	r3, #16
 800df58:	bfde      	ittt	le
 800df5a:	9e08      	ldrle	r6, [sp, #32]
 800df5c:	434e      	mulle	r6, r1
 800df5e:	9608      	strle	r6, [sp, #32]
 800df60:	e7e1      	b.n	800df26 <_strtod_l+0x216>
 800df62:	280f      	cmp	r0, #15
 800df64:	dceb      	bgt.n	800df3e <_strtod_l+0x22e>
 800df66:	9808      	ldr	r0, [sp, #32]
 800df68:	230a      	movs	r3, #10
 800df6a:	fb03 2300 	mla	r3, r3, r0, r2
 800df6e:	9308      	str	r3, [sp, #32]
 800df70:	e7e5      	b.n	800df3e <_strtod_l+0x22e>
 800df72:	4629      	mov	r1, r5
 800df74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df76:	1c50      	adds	r0, r2, #1
 800df78:	9019      	str	r0, [sp, #100]	@ 0x64
 800df7a:	7852      	ldrb	r2, [r2, #1]
 800df7c:	4618      	mov	r0, r3
 800df7e:	460d      	mov	r5, r1
 800df80:	e7b1      	b.n	800dee6 <_strtod_l+0x1d6>
 800df82:	f04f 0900 	mov.w	r9, #0
 800df86:	2301      	movs	r3, #1
 800df88:	e77d      	b.n	800de86 <_strtod_l+0x176>
 800df8a:	f04f 0c00 	mov.w	ip, #0
 800df8e:	1ca2      	adds	r2, r4, #2
 800df90:	9219      	str	r2, [sp, #100]	@ 0x64
 800df92:	78a2      	ldrb	r2, [r4, #2]
 800df94:	e785      	b.n	800dea2 <_strtod_l+0x192>
 800df96:	f04f 0c01 	mov.w	ip, #1
 800df9a:	e7f8      	b.n	800df8e <_strtod_l+0x27e>
 800df9c:	08010028 	.word	0x08010028
 800dfa0:	08010010 	.word	0x08010010
 800dfa4:	7ff00000 	.word	0x7ff00000
 800dfa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dfaa:	1c51      	adds	r1, r2, #1
 800dfac:	9119      	str	r1, [sp, #100]	@ 0x64
 800dfae:	7852      	ldrb	r2, [r2, #1]
 800dfb0:	2a30      	cmp	r2, #48	@ 0x30
 800dfb2:	d0f9      	beq.n	800dfa8 <_strtod_l+0x298>
 800dfb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dfb8:	2908      	cmp	r1, #8
 800dfba:	f63f af78 	bhi.w	800deae <_strtod_l+0x19e>
 800dfbe:	3a30      	subs	r2, #48	@ 0x30
 800dfc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800dfc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dfc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dfc6:	f04f 080a 	mov.w	r8, #10
 800dfca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dfcc:	1c56      	adds	r6, r2, #1
 800dfce:	9619      	str	r6, [sp, #100]	@ 0x64
 800dfd0:	7852      	ldrb	r2, [r2, #1]
 800dfd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dfd6:	f1be 0f09 	cmp.w	lr, #9
 800dfda:	d939      	bls.n	800e050 <_strtod_l+0x340>
 800dfdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dfde:	1a76      	subs	r6, r6, r1
 800dfe0:	2e08      	cmp	r6, #8
 800dfe2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dfe6:	dc03      	bgt.n	800dff0 <_strtod_l+0x2e0>
 800dfe8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dfea:	4588      	cmp	r8, r1
 800dfec:	bfa8      	it	ge
 800dfee:	4688      	movge	r8, r1
 800dff0:	f1bc 0f00 	cmp.w	ip, #0
 800dff4:	d001      	beq.n	800dffa <_strtod_l+0x2ea>
 800dff6:	f1c8 0800 	rsb	r8, r8, #0
 800dffa:	2d00      	cmp	r5, #0
 800dffc:	d14e      	bne.n	800e09c <_strtod_l+0x38c>
 800dffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e000:	4308      	orrs	r0, r1
 800e002:	f47f aebe 	bne.w	800dd82 <_strtod_l+0x72>
 800e006:	2b00      	cmp	r3, #0
 800e008:	f47f aed6 	bne.w	800ddb8 <_strtod_l+0xa8>
 800e00c:	2a69      	cmp	r2, #105	@ 0x69
 800e00e:	d028      	beq.n	800e062 <_strtod_l+0x352>
 800e010:	dc25      	bgt.n	800e05e <_strtod_l+0x34e>
 800e012:	2a49      	cmp	r2, #73	@ 0x49
 800e014:	d025      	beq.n	800e062 <_strtod_l+0x352>
 800e016:	2a4e      	cmp	r2, #78	@ 0x4e
 800e018:	f47f aece 	bne.w	800ddb8 <_strtod_l+0xa8>
 800e01c:	499b      	ldr	r1, [pc, #620]	@ (800e28c <_strtod_l+0x57c>)
 800e01e:	a819      	add	r0, sp, #100	@ 0x64
 800e020:	f001 fba6 	bl	800f770 <__match>
 800e024:	2800      	cmp	r0, #0
 800e026:	f43f aec7 	beq.w	800ddb8 <_strtod_l+0xa8>
 800e02a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	2b28      	cmp	r3, #40	@ 0x28
 800e030:	d12e      	bne.n	800e090 <_strtod_l+0x380>
 800e032:	4997      	ldr	r1, [pc, #604]	@ (800e290 <_strtod_l+0x580>)
 800e034:	aa1c      	add	r2, sp, #112	@ 0x70
 800e036:	a819      	add	r0, sp, #100	@ 0x64
 800e038:	f001 fbae 	bl	800f798 <__hexnan>
 800e03c:	2805      	cmp	r0, #5
 800e03e:	d127      	bne.n	800e090 <_strtod_l+0x380>
 800e040:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e042:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e046:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e04a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e04e:	e698      	b.n	800dd82 <_strtod_l+0x72>
 800e050:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e052:	fb08 2101 	mla	r1, r8, r1, r2
 800e056:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e05a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e05c:	e7b5      	b.n	800dfca <_strtod_l+0x2ba>
 800e05e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e060:	e7da      	b.n	800e018 <_strtod_l+0x308>
 800e062:	498c      	ldr	r1, [pc, #560]	@ (800e294 <_strtod_l+0x584>)
 800e064:	a819      	add	r0, sp, #100	@ 0x64
 800e066:	f001 fb83 	bl	800f770 <__match>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	f43f aea4 	beq.w	800ddb8 <_strtod_l+0xa8>
 800e070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e072:	4989      	ldr	r1, [pc, #548]	@ (800e298 <_strtod_l+0x588>)
 800e074:	3b01      	subs	r3, #1
 800e076:	a819      	add	r0, sp, #100	@ 0x64
 800e078:	9319      	str	r3, [sp, #100]	@ 0x64
 800e07a:	f001 fb79 	bl	800f770 <__match>
 800e07e:	b910      	cbnz	r0, 800e086 <_strtod_l+0x376>
 800e080:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e082:	3301      	adds	r3, #1
 800e084:	9319      	str	r3, [sp, #100]	@ 0x64
 800e086:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e2a8 <_strtod_l+0x598>
 800e08a:	f04f 0a00 	mov.w	sl, #0
 800e08e:	e678      	b.n	800dd82 <_strtod_l+0x72>
 800e090:	4882      	ldr	r0, [pc, #520]	@ (800e29c <_strtod_l+0x58c>)
 800e092:	f001 f8a9 	bl	800f1e8 <nan>
 800e096:	ec5b ab10 	vmov	sl, fp, d0
 800e09a:	e672      	b.n	800dd82 <_strtod_l+0x72>
 800e09c:	eba8 0309 	sub.w	r3, r8, r9
 800e0a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e0a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0a4:	2f00      	cmp	r7, #0
 800e0a6:	bf08      	it	eq
 800e0a8:	462f      	moveq	r7, r5
 800e0aa:	2d10      	cmp	r5, #16
 800e0ac:	462c      	mov	r4, r5
 800e0ae:	bfa8      	it	ge
 800e0b0:	2410      	movge	r4, #16
 800e0b2:	f7f2 fa4f 	bl	8000554 <__aeabi_ui2d>
 800e0b6:	2d09      	cmp	r5, #9
 800e0b8:	4682      	mov	sl, r0
 800e0ba:	468b      	mov	fp, r1
 800e0bc:	dc13      	bgt.n	800e0e6 <_strtod_l+0x3d6>
 800e0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f43f ae5e 	beq.w	800dd82 <_strtod_l+0x72>
 800e0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0c8:	dd78      	ble.n	800e1bc <_strtod_l+0x4ac>
 800e0ca:	2b16      	cmp	r3, #22
 800e0cc:	dc5f      	bgt.n	800e18e <_strtod_l+0x47e>
 800e0ce:	4974      	ldr	r1, [pc, #464]	@ (800e2a0 <_strtod_l+0x590>)
 800e0d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0d8:	4652      	mov	r2, sl
 800e0da:	465b      	mov	r3, fp
 800e0dc:	f7f2 fab4 	bl	8000648 <__aeabi_dmul>
 800e0e0:	4682      	mov	sl, r0
 800e0e2:	468b      	mov	fp, r1
 800e0e4:	e64d      	b.n	800dd82 <_strtod_l+0x72>
 800e0e6:	4b6e      	ldr	r3, [pc, #440]	@ (800e2a0 <_strtod_l+0x590>)
 800e0e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e0f0:	f7f2 faaa 	bl	8000648 <__aeabi_dmul>
 800e0f4:	4682      	mov	sl, r0
 800e0f6:	9808      	ldr	r0, [sp, #32]
 800e0f8:	468b      	mov	fp, r1
 800e0fa:	f7f2 fa2b 	bl	8000554 <__aeabi_ui2d>
 800e0fe:	4602      	mov	r2, r0
 800e100:	460b      	mov	r3, r1
 800e102:	4650      	mov	r0, sl
 800e104:	4659      	mov	r1, fp
 800e106:	f7f2 f8e9 	bl	80002dc <__adddf3>
 800e10a:	2d0f      	cmp	r5, #15
 800e10c:	4682      	mov	sl, r0
 800e10e:	468b      	mov	fp, r1
 800e110:	ddd5      	ble.n	800e0be <_strtod_l+0x3ae>
 800e112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e114:	1b2c      	subs	r4, r5, r4
 800e116:	441c      	add	r4, r3
 800e118:	2c00      	cmp	r4, #0
 800e11a:	f340 8096 	ble.w	800e24a <_strtod_l+0x53a>
 800e11e:	f014 030f 	ands.w	r3, r4, #15
 800e122:	d00a      	beq.n	800e13a <_strtod_l+0x42a>
 800e124:	495e      	ldr	r1, [pc, #376]	@ (800e2a0 <_strtod_l+0x590>)
 800e126:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e12a:	4652      	mov	r2, sl
 800e12c:	465b      	mov	r3, fp
 800e12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e132:	f7f2 fa89 	bl	8000648 <__aeabi_dmul>
 800e136:	4682      	mov	sl, r0
 800e138:	468b      	mov	fp, r1
 800e13a:	f034 040f 	bics.w	r4, r4, #15
 800e13e:	d073      	beq.n	800e228 <_strtod_l+0x518>
 800e140:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e144:	dd48      	ble.n	800e1d8 <_strtod_l+0x4c8>
 800e146:	2400      	movs	r4, #0
 800e148:	46a0      	mov	r8, r4
 800e14a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e14c:	46a1      	mov	r9, r4
 800e14e:	9a05      	ldr	r2, [sp, #20]
 800e150:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e2a8 <_strtod_l+0x598>
 800e154:	2322      	movs	r3, #34	@ 0x22
 800e156:	6013      	str	r3, [r2, #0]
 800e158:	f04f 0a00 	mov.w	sl, #0
 800e15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f43f ae0f 	beq.w	800dd82 <_strtod_l+0x72>
 800e164:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e166:	9805      	ldr	r0, [sp, #20]
 800e168:	f7ff f942 	bl	800d3f0 <_Bfree>
 800e16c:	9805      	ldr	r0, [sp, #20]
 800e16e:	4649      	mov	r1, r9
 800e170:	f7ff f93e 	bl	800d3f0 <_Bfree>
 800e174:	9805      	ldr	r0, [sp, #20]
 800e176:	4641      	mov	r1, r8
 800e178:	f7ff f93a 	bl	800d3f0 <_Bfree>
 800e17c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e17e:	9805      	ldr	r0, [sp, #20]
 800e180:	f7ff f936 	bl	800d3f0 <_Bfree>
 800e184:	9805      	ldr	r0, [sp, #20]
 800e186:	4621      	mov	r1, r4
 800e188:	f7ff f932 	bl	800d3f0 <_Bfree>
 800e18c:	e5f9      	b.n	800dd82 <_strtod_l+0x72>
 800e18e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e190:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e194:	4293      	cmp	r3, r2
 800e196:	dbbc      	blt.n	800e112 <_strtod_l+0x402>
 800e198:	4c41      	ldr	r4, [pc, #260]	@ (800e2a0 <_strtod_l+0x590>)
 800e19a:	f1c5 050f 	rsb	r5, r5, #15
 800e19e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e1a2:	4652      	mov	r2, sl
 800e1a4:	465b      	mov	r3, fp
 800e1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1aa:	f7f2 fa4d 	bl	8000648 <__aeabi_dmul>
 800e1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1b0:	1b5d      	subs	r5, r3, r5
 800e1b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e1b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e1ba:	e78f      	b.n	800e0dc <_strtod_l+0x3cc>
 800e1bc:	3316      	adds	r3, #22
 800e1be:	dba8      	blt.n	800e112 <_strtod_l+0x402>
 800e1c0:	4b37      	ldr	r3, [pc, #220]	@ (800e2a0 <_strtod_l+0x590>)
 800e1c2:	eba9 0808 	sub.w	r8, r9, r8
 800e1c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e1ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e1ce:	4650      	mov	r0, sl
 800e1d0:	4659      	mov	r1, fp
 800e1d2:	f7f2 fb63 	bl	800089c <__aeabi_ddiv>
 800e1d6:	e783      	b.n	800e0e0 <_strtod_l+0x3d0>
 800e1d8:	4b32      	ldr	r3, [pc, #200]	@ (800e2a4 <_strtod_l+0x594>)
 800e1da:	9308      	str	r3, [sp, #32]
 800e1dc:	2300      	movs	r3, #0
 800e1de:	1124      	asrs	r4, r4, #4
 800e1e0:	4650      	mov	r0, sl
 800e1e2:	4659      	mov	r1, fp
 800e1e4:	461e      	mov	r6, r3
 800e1e6:	2c01      	cmp	r4, #1
 800e1e8:	dc21      	bgt.n	800e22e <_strtod_l+0x51e>
 800e1ea:	b10b      	cbz	r3, 800e1f0 <_strtod_l+0x4e0>
 800e1ec:	4682      	mov	sl, r0
 800e1ee:	468b      	mov	fp, r1
 800e1f0:	492c      	ldr	r1, [pc, #176]	@ (800e2a4 <_strtod_l+0x594>)
 800e1f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e1f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e1fa:	4652      	mov	r2, sl
 800e1fc:	465b      	mov	r3, fp
 800e1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e202:	f7f2 fa21 	bl	8000648 <__aeabi_dmul>
 800e206:	4b28      	ldr	r3, [pc, #160]	@ (800e2a8 <_strtod_l+0x598>)
 800e208:	460a      	mov	r2, r1
 800e20a:	400b      	ands	r3, r1
 800e20c:	4927      	ldr	r1, [pc, #156]	@ (800e2ac <_strtod_l+0x59c>)
 800e20e:	428b      	cmp	r3, r1
 800e210:	4682      	mov	sl, r0
 800e212:	d898      	bhi.n	800e146 <_strtod_l+0x436>
 800e214:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e218:	428b      	cmp	r3, r1
 800e21a:	bf86      	itte	hi
 800e21c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e2b0 <_strtod_l+0x5a0>
 800e220:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800e224:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e228:	2300      	movs	r3, #0
 800e22a:	9308      	str	r3, [sp, #32]
 800e22c:	e07a      	b.n	800e324 <_strtod_l+0x614>
 800e22e:	07e2      	lsls	r2, r4, #31
 800e230:	d505      	bpl.n	800e23e <_strtod_l+0x52e>
 800e232:	9b08      	ldr	r3, [sp, #32]
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	f7f2 fa06 	bl	8000648 <__aeabi_dmul>
 800e23c:	2301      	movs	r3, #1
 800e23e:	9a08      	ldr	r2, [sp, #32]
 800e240:	3208      	adds	r2, #8
 800e242:	3601      	adds	r6, #1
 800e244:	1064      	asrs	r4, r4, #1
 800e246:	9208      	str	r2, [sp, #32]
 800e248:	e7cd      	b.n	800e1e6 <_strtod_l+0x4d6>
 800e24a:	d0ed      	beq.n	800e228 <_strtod_l+0x518>
 800e24c:	4264      	negs	r4, r4
 800e24e:	f014 020f 	ands.w	r2, r4, #15
 800e252:	d00a      	beq.n	800e26a <_strtod_l+0x55a>
 800e254:	4b12      	ldr	r3, [pc, #72]	@ (800e2a0 <_strtod_l+0x590>)
 800e256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e25a:	4650      	mov	r0, sl
 800e25c:	4659      	mov	r1, fp
 800e25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e262:	f7f2 fb1b 	bl	800089c <__aeabi_ddiv>
 800e266:	4682      	mov	sl, r0
 800e268:	468b      	mov	fp, r1
 800e26a:	1124      	asrs	r4, r4, #4
 800e26c:	d0dc      	beq.n	800e228 <_strtod_l+0x518>
 800e26e:	2c1f      	cmp	r4, #31
 800e270:	dd20      	ble.n	800e2b4 <_strtod_l+0x5a4>
 800e272:	2400      	movs	r4, #0
 800e274:	46a0      	mov	r8, r4
 800e276:	940a      	str	r4, [sp, #40]	@ 0x28
 800e278:	46a1      	mov	r9, r4
 800e27a:	9a05      	ldr	r2, [sp, #20]
 800e27c:	2322      	movs	r3, #34	@ 0x22
 800e27e:	f04f 0a00 	mov.w	sl, #0
 800e282:	f04f 0b00 	mov.w	fp, #0
 800e286:	6013      	str	r3, [r2, #0]
 800e288:	e768      	b.n	800e15c <_strtod_l+0x44c>
 800e28a:	bf00      	nop
 800e28c:	0800fdfd 	.word	0x0800fdfd
 800e290:	08010014 	.word	0x08010014
 800e294:	0800fdf5 	.word	0x0800fdf5
 800e298:	0800fe2c 	.word	0x0800fe2c
 800e29c:	080101bd 	.word	0x080101bd
 800e2a0:	0800ff48 	.word	0x0800ff48
 800e2a4:	0800ff20 	.word	0x0800ff20
 800e2a8:	7ff00000 	.word	0x7ff00000
 800e2ac:	7ca00000 	.word	0x7ca00000
 800e2b0:	7fefffff 	.word	0x7fefffff
 800e2b4:	f014 0310 	ands.w	r3, r4, #16
 800e2b8:	bf18      	it	ne
 800e2ba:	236a      	movne	r3, #106	@ 0x6a
 800e2bc:	4ea9      	ldr	r6, [pc, #676]	@ (800e564 <_strtod_l+0x854>)
 800e2be:	9308      	str	r3, [sp, #32]
 800e2c0:	4650      	mov	r0, sl
 800e2c2:	4659      	mov	r1, fp
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	07e2      	lsls	r2, r4, #31
 800e2c8:	d504      	bpl.n	800e2d4 <_strtod_l+0x5c4>
 800e2ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e2ce:	f7f2 f9bb 	bl	8000648 <__aeabi_dmul>
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	1064      	asrs	r4, r4, #1
 800e2d6:	f106 0608 	add.w	r6, r6, #8
 800e2da:	d1f4      	bne.n	800e2c6 <_strtod_l+0x5b6>
 800e2dc:	b10b      	cbz	r3, 800e2e2 <_strtod_l+0x5d2>
 800e2de:	4682      	mov	sl, r0
 800e2e0:	468b      	mov	fp, r1
 800e2e2:	9b08      	ldr	r3, [sp, #32]
 800e2e4:	b1b3      	cbz	r3, 800e314 <_strtod_l+0x604>
 800e2e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e2ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	4659      	mov	r1, fp
 800e2f2:	dd0f      	ble.n	800e314 <_strtod_l+0x604>
 800e2f4:	2b1f      	cmp	r3, #31
 800e2f6:	dd55      	ble.n	800e3a4 <_strtod_l+0x694>
 800e2f8:	2b34      	cmp	r3, #52	@ 0x34
 800e2fa:	bfde      	ittt	le
 800e2fc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800e300:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e304:	4093      	lslle	r3, r2
 800e306:	f04f 0a00 	mov.w	sl, #0
 800e30a:	bfcc      	ite	gt
 800e30c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e310:	ea03 0b01 	andle.w	fp, r3, r1
 800e314:	2200      	movs	r2, #0
 800e316:	2300      	movs	r3, #0
 800e318:	4650      	mov	r0, sl
 800e31a:	4659      	mov	r1, fp
 800e31c:	f7f2 fbfc 	bl	8000b18 <__aeabi_dcmpeq>
 800e320:	2800      	cmp	r0, #0
 800e322:	d1a6      	bne.n	800e272 <_strtod_l+0x562>
 800e324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e326:	9300      	str	r3, [sp, #0]
 800e328:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e32a:	9805      	ldr	r0, [sp, #20]
 800e32c:	462b      	mov	r3, r5
 800e32e:	463a      	mov	r2, r7
 800e330:	f7ff f8c6 	bl	800d4c0 <__s2b>
 800e334:	900a      	str	r0, [sp, #40]	@ 0x28
 800e336:	2800      	cmp	r0, #0
 800e338:	f43f af05 	beq.w	800e146 <_strtod_l+0x436>
 800e33c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e33e:	2a00      	cmp	r2, #0
 800e340:	eba9 0308 	sub.w	r3, r9, r8
 800e344:	bfa8      	it	ge
 800e346:	2300      	movge	r3, #0
 800e348:	9312      	str	r3, [sp, #72]	@ 0x48
 800e34a:	2400      	movs	r4, #0
 800e34c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e350:	9316      	str	r3, [sp, #88]	@ 0x58
 800e352:	46a0      	mov	r8, r4
 800e354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e356:	9805      	ldr	r0, [sp, #20]
 800e358:	6859      	ldr	r1, [r3, #4]
 800e35a:	f7ff f809 	bl	800d370 <_Balloc>
 800e35e:	4681      	mov	r9, r0
 800e360:	2800      	cmp	r0, #0
 800e362:	f43f aef4 	beq.w	800e14e <_strtod_l+0x43e>
 800e366:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e368:	691a      	ldr	r2, [r3, #16]
 800e36a:	3202      	adds	r2, #2
 800e36c:	f103 010c 	add.w	r1, r3, #12
 800e370:	0092      	lsls	r2, r2, #2
 800e372:	300c      	adds	r0, #12
 800e374:	f7fe f899 	bl	800c4aa <memcpy>
 800e378:	ec4b ab10 	vmov	d0, sl, fp
 800e37c:	9805      	ldr	r0, [sp, #20]
 800e37e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e380:	a91b      	add	r1, sp, #108	@ 0x6c
 800e382:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e386:	f7ff fbd7 	bl	800db38 <__d2b>
 800e38a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e38c:	2800      	cmp	r0, #0
 800e38e:	f43f aede 	beq.w	800e14e <_strtod_l+0x43e>
 800e392:	9805      	ldr	r0, [sp, #20]
 800e394:	2101      	movs	r1, #1
 800e396:	f7ff f929 	bl	800d5ec <__i2b>
 800e39a:	4680      	mov	r8, r0
 800e39c:	b948      	cbnz	r0, 800e3b2 <_strtod_l+0x6a2>
 800e39e:	f04f 0800 	mov.w	r8, #0
 800e3a2:	e6d4      	b.n	800e14e <_strtod_l+0x43e>
 800e3a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e3ac:	ea03 0a0a 	and.w	sl, r3, sl
 800e3b0:	e7b0      	b.n	800e314 <_strtod_l+0x604>
 800e3b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e3b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e3b6:	2d00      	cmp	r5, #0
 800e3b8:	bfab      	itete	ge
 800e3ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e3bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e3be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e3c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e3c2:	bfac      	ite	ge
 800e3c4:	18ef      	addge	r7, r5, r3
 800e3c6:	1b5e      	sublt	r6, r3, r5
 800e3c8:	9b08      	ldr	r3, [sp, #32]
 800e3ca:	1aed      	subs	r5, r5, r3
 800e3cc:	4415      	add	r5, r2
 800e3ce:	4b66      	ldr	r3, [pc, #408]	@ (800e568 <_strtod_l+0x858>)
 800e3d0:	3d01      	subs	r5, #1
 800e3d2:	429d      	cmp	r5, r3
 800e3d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e3d8:	da50      	bge.n	800e47c <_strtod_l+0x76c>
 800e3da:	1b5b      	subs	r3, r3, r5
 800e3dc:	2b1f      	cmp	r3, #31
 800e3de:	eba2 0203 	sub.w	r2, r2, r3
 800e3e2:	f04f 0101 	mov.w	r1, #1
 800e3e6:	dc3d      	bgt.n	800e464 <_strtod_l+0x754>
 800e3e8:	fa01 f303 	lsl.w	r3, r1, r3
 800e3ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3f2:	18bd      	adds	r5, r7, r2
 800e3f4:	9b08      	ldr	r3, [sp, #32]
 800e3f6:	42af      	cmp	r7, r5
 800e3f8:	4416      	add	r6, r2
 800e3fa:	441e      	add	r6, r3
 800e3fc:	463b      	mov	r3, r7
 800e3fe:	bfa8      	it	ge
 800e400:	462b      	movge	r3, r5
 800e402:	42b3      	cmp	r3, r6
 800e404:	bfa8      	it	ge
 800e406:	4633      	movge	r3, r6
 800e408:	2b00      	cmp	r3, #0
 800e40a:	bfc2      	ittt	gt
 800e40c:	1aed      	subgt	r5, r5, r3
 800e40e:	1af6      	subgt	r6, r6, r3
 800e410:	1aff      	subgt	r7, r7, r3
 800e412:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e414:	2b00      	cmp	r3, #0
 800e416:	dd16      	ble.n	800e446 <_strtod_l+0x736>
 800e418:	4641      	mov	r1, r8
 800e41a:	9805      	ldr	r0, [sp, #20]
 800e41c:	461a      	mov	r2, r3
 800e41e:	f7ff f9a5 	bl	800d76c <__pow5mult>
 800e422:	4680      	mov	r8, r0
 800e424:	2800      	cmp	r0, #0
 800e426:	d0ba      	beq.n	800e39e <_strtod_l+0x68e>
 800e428:	4601      	mov	r1, r0
 800e42a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e42c:	9805      	ldr	r0, [sp, #20]
 800e42e:	f7ff f8f3 	bl	800d618 <__multiply>
 800e432:	900e      	str	r0, [sp, #56]	@ 0x38
 800e434:	2800      	cmp	r0, #0
 800e436:	f43f ae8a 	beq.w	800e14e <_strtod_l+0x43e>
 800e43a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e43c:	9805      	ldr	r0, [sp, #20]
 800e43e:	f7fe ffd7 	bl	800d3f0 <_Bfree>
 800e442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e444:	931a      	str	r3, [sp, #104]	@ 0x68
 800e446:	2d00      	cmp	r5, #0
 800e448:	dc1d      	bgt.n	800e486 <_strtod_l+0x776>
 800e44a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	dd23      	ble.n	800e498 <_strtod_l+0x788>
 800e450:	4649      	mov	r1, r9
 800e452:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e454:	9805      	ldr	r0, [sp, #20]
 800e456:	f7ff f989 	bl	800d76c <__pow5mult>
 800e45a:	4681      	mov	r9, r0
 800e45c:	b9e0      	cbnz	r0, 800e498 <_strtod_l+0x788>
 800e45e:	f04f 0900 	mov.w	r9, #0
 800e462:	e674      	b.n	800e14e <_strtod_l+0x43e>
 800e464:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e468:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e46c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e470:	35e2      	adds	r5, #226	@ 0xe2
 800e472:	fa01 f305 	lsl.w	r3, r1, r5
 800e476:	9310      	str	r3, [sp, #64]	@ 0x40
 800e478:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e47a:	e7ba      	b.n	800e3f2 <_strtod_l+0x6e2>
 800e47c:	2300      	movs	r3, #0
 800e47e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e480:	2301      	movs	r3, #1
 800e482:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e484:	e7b5      	b.n	800e3f2 <_strtod_l+0x6e2>
 800e486:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e488:	9805      	ldr	r0, [sp, #20]
 800e48a:	462a      	mov	r2, r5
 800e48c:	f7ff f9c8 	bl	800d820 <__lshift>
 800e490:	901a      	str	r0, [sp, #104]	@ 0x68
 800e492:	2800      	cmp	r0, #0
 800e494:	d1d9      	bne.n	800e44a <_strtod_l+0x73a>
 800e496:	e65a      	b.n	800e14e <_strtod_l+0x43e>
 800e498:	2e00      	cmp	r6, #0
 800e49a:	dd07      	ble.n	800e4ac <_strtod_l+0x79c>
 800e49c:	4649      	mov	r1, r9
 800e49e:	9805      	ldr	r0, [sp, #20]
 800e4a0:	4632      	mov	r2, r6
 800e4a2:	f7ff f9bd 	bl	800d820 <__lshift>
 800e4a6:	4681      	mov	r9, r0
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d0d8      	beq.n	800e45e <_strtod_l+0x74e>
 800e4ac:	2f00      	cmp	r7, #0
 800e4ae:	dd08      	ble.n	800e4c2 <_strtod_l+0x7b2>
 800e4b0:	4641      	mov	r1, r8
 800e4b2:	9805      	ldr	r0, [sp, #20]
 800e4b4:	463a      	mov	r2, r7
 800e4b6:	f7ff f9b3 	bl	800d820 <__lshift>
 800e4ba:	4680      	mov	r8, r0
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	f43f ae46 	beq.w	800e14e <_strtod_l+0x43e>
 800e4c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4c4:	9805      	ldr	r0, [sp, #20]
 800e4c6:	464a      	mov	r2, r9
 800e4c8:	f7ff fa32 	bl	800d930 <__mdiff>
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	f43f ae3d 	beq.w	800e14e <_strtod_l+0x43e>
 800e4d4:	68c3      	ldr	r3, [r0, #12]
 800e4d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4d8:	2300      	movs	r3, #0
 800e4da:	60c3      	str	r3, [r0, #12]
 800e4dc:	4641      	mov	r1, r8
 800e4de:	f7ff fa0b 	bl	800d8f8 <__mcmp>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	da46      	bge.n	800e574 <_strtod_l+0x864>
 800e4e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4e8:	ea53 030a 	orrs.w	r3, r3, sl
 800e4ec:	d16c      	bne.n	800e5c8 <_strtod_l+0x8b8>
 800e4ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d168      	bne.n	800e5c8 <_strtod_l+0x8b8>
 800e4f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4fa:	0d1b      	lsrs	r3, r3, #20
 800e4fc:	051b      	lsls	r3, r3, #20
 800e4fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e502:	d961      	bls.n	800e5c8 <_strtod_l+0x8b8>
 800e504:	6963      	ldr	r3, [r4, #20]
 800e506:	b913      	cbnz	r3, 800e50e <_strtod_l+0x7fe>
 800e508:	6923      	ldr	r3, [r4, #16]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	dd5c      	ble.n	800e5c8 <_strtod_l+0x8b8>
 800e50e:	4621      	mov	r1, r4
 800e510:	2201      	movs	r2, #1
 800e512:	9805      	ldr	r0, [sp, #20]
 800e514:	f7ff f984 	bl	800d820 <__lshift>
 800e518:	4641      	mov	r1, r8
 800e51a:	4604      	mov	r4, r0
 800e51c:	f7ff f9ec 	bl	800d8f8 <__mcmp>
 800e520:	2800      	cmp	r0, #0
 800e522:	dd51      	ble.n	800e5c8 <_strtod_l+0x8b8>
 800e524:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e528:	9a08      	ldr	r2, [sp, #32]
 800e52a:	0d1b      	lsrs	r3, r3, #20
 800e52c:	051b      	lsls	r3, r3, #20
 800e52e:	2a00      	cmp	r2, #0
 800e530:	d06b      	beq.n	800e60a <_strtod_l+0x8fa>
 800e532:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e536:	d868      	bhi.n	800e60a <_strtod_l+0x8fa>
 800e538:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e53c:	f67f ae9d 	bls.w	800e27a <_strtod_l+0x56a>
 800e540:	4b0a      	ldr	r3, [pc, #40]	@ (800e56c <_strtod_l+0x85c>)
 800e542:	4650      	mov	r0, sl
 800e544:	4659      	mov	r1, fp
 800e546:	2200      	movs	r2, #0
 800e548:	f7f2 f87e 	bl	8000648 <__aeabi_dmul>
 800e54c:	4b08      	ldr	r3, [pc, #32]	@ (800e570 <_strtod_l+0x860>)
 800e54e:	400b      	ands	r3, r1
 800e550:	4682      	mov	sl, r0
 800e552:	468b      	mov	fp, r1
 800e554:	2b00      	cmp	r3, #0
 800e556:	f47f ae05 	bne.w	800e164 <_strtod_l+0x454>
 800e55a:	9a05      	ldr	r2, [sp, #20]
 800e55c:	2322      	movs	r3, #34	@ 0x22
 800e55e:	6013      	str	r3, [r2, #0]
 800e560:	e600      	b.n	800e164 <_strtod_l+0x454>
 800e562:	bf00      	nop
 800e564:	08010040 	.word	0x08010040
 800e568:	fffffc02 	.word	0xfffffc02
 800e56c:	39500000 	.word	0x39500000
 800e570:	7ff00000 	.word	0x7ff00000
 800e574:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e578:	d165      	bne.n	800e646 <_strtod_l+0x936>
 800e57a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e57c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e580:	b35a      	cbz	r2, 800e5da <_strtod_l+0x8ca>
 800e582:	4a9f      	ldr	r2, [pc, #636]	@ (800e800 <_strtod_l+0xaf0>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d12b      	bne.n	800e5e0 <_strtod_l+0x8d0>
 800e588:	9b08      	ldr	r3, [sp, #32]
 800e58a:	4651      	mov	r1, sl
 800e58c:	b303      	cbz	r3, 800e5d0 <_strtod_l+0x8c0>
 800e58e:	4b9d      	ldr	r3, [pc, #628]	@ (800e804 <_strtod_l+0xaf4>)
 800e590:	465a      	mov	r2, fp
 800e592:	4013      	ands	r3, r2
 800e594:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e59c:	d81b      	bhi.n	800e5d6 <_strtod_l+0x8c6>
 800e59e:	0d1b      	lsrs	r3, r3, #20
 800e5a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e5a8:	4299      	cmp	r1, r3
 800e5aa:	d119      	bne.n	800e5e0 <_strtod_l+0x8d0>
 800e5ac:	4b96      	ldr	r3, [pc, #600]	@ (800e808 <_strtod_l+0xaf8>)
 800e5ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d102      	bne.n	800e5ba <_strtod_l+0x8aa>
 800e5b4:	3101      	adds	r1, #1
 800e5b6:	f43f adca 	beq.w	800e14e <_strtod_l+0x43e>
 800e5ba:	4b92      	ldr	r3, [pc, #584]	@ (800e804 <_strtod_l+0xaf4>)
 800e5bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5be:	401a      	ands	r2, r3
 800e5c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e5c4:	f04f 0a00 	mov.w	sl, #0
 800e5c8:	9b08      	ldr	r3, [sp, #32]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1b8      	bne.n	800e540 <_strtod_l+0x830>
 800e5ce:	e5c9      	b.n	800e164 <_strtod_l+0x454>
 800e5d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e5d4:	e7e8      	b.n	800e5a8 <_strtod_l+0x898>
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	e7e6      	b.n	800e5a8 <_strtod_l+0x898>
 800e5da:	ea53 030a 	orrs.w	r3, r3, sl
 800e5de:	d0a1      	beq.n	800e524 <_strtod_l+0x814>
 800e5e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e5e2:	b1db      	cbz	r3, 800e61c <_strtod_l+0x90c>
 800e5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5e6:	4213      	tst	r3, r2
 800e5e8:	d0ee      	beq.n	800e5c8 <_strtod_l+0x8b8>
 800e5ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ec:	9a08      	ldr	r2, [sp, #32]
 800e5ee:	4650      	mov	r0, sl
 800e5f0:	4659      	mov	r1, fp
 800e5f2:	b1bb      	cbz	r3, 800e624 <_strtod_l+0x914>
 800e5f4:	f7ff fb6e 	bl	800dcd4 <sulp>
 800e5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5fc:	ec53 2b10 	vmov	r2, r3, d0
 800e600:	f7f1 fe6c 	bl	80002dc <__adddf3>
 800e604:	4682      	mov	sl, r0
 800e606:	468b      	mov	fp, r1
 800e608:	e7de      	b.n	800e5c8 <_strtod_l+0x8b8>
 800e60a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e60e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e612:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e616:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e61a:	e7d5      	b.n	800e5c8 <_strtod_l+0x8b8>
 800e61c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e61e:	ea13 0f0a 	tst.w	r3, sl
 800e622:	e7e1      	b.n	800e5e8 <_strtod_l+0x8d8>
 800e624:	f7ff fb56 	bl	800dcd4 <sulp>
 800e628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e62c:	ec53 2b10 	vmov	r2, r3, d0
 800e630:	f7f1 fe52 	bl	80002d8 <__aeabi_dsub>
 800e634:	2200      	movs	r2, #0
 800e636:	2300      	movs	r3, #0
 800e638:	4682      	mov	sl, r0
 800e63a:	468b      	mov	fp, r1
 800e63c:	f7f2 fa6c 	bl	8000b18 <__aeabi_dcmpeq>
 800e640:	2800      	cmp	r0, #0
 800e642:	d0c1      	beq.n	800e5c8 <_strtod_l+0x8b8>
 800e644:	e619      	b.n	800e27a <_strtod_l+0x56a>
 800e646:	4641      	mov	r1, r8
 800e648:	4620      	mov	r0, r4
 800e64a:	f7ff facd 	bl	800dbe8 <__ratio>
 800e64e:	ec57 6b10 	vmov	r6, r7, d0
 800e652:	2200      	movs	r2, #0
 800e654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e658:	4630      	mov	r0, r6
 800e65a:	4639      	mov	r1, r7
 800e65c:	f7f2 fa70 	bl	8000b40 <__aeabi_dcmple>
 800e660:	2800      	cmp	r0, #0
 800e662:	d06f      	beq.n	800e744 <_strtod_l+0xa34>
 800e664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e666:	2b00      	cmp	r3, #0
 800e668:	d17a      	bne.n	800e760 <_strtod_l+0xa50>
 800e66a:	f1ba 0f00 	cmp.w	sl, #0
 800e66e:	d158      	bne.n	800e722 <_strtod_l+0xa12>
 800e670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e676:	2b00      	cmp	r3, #0
 800e678:	d15a      	bne.n	800e730 <_strtod_l+0xa20>
 800e67a:	4b64      	ldr	r3, [pc, #400]	@ (800e80c <_strtod_l+0xafc>)
 800e67c:	2200      	movs	r2, #0
 800e67e:	4630      	mov	r0, r6
 800e680:	4639      	mov	r1, r7
 800e682:	f7f2 fa53 	bl	8000b2c <__aeabi_dcmplt>
 800e686:	2800      	cmp	r0, #0
 800e688:	d159      	bne.n	800e73e <_strtod_l+0xa2e>
 800e68a:	4630      	mov	r0, r6
 800e68c:	4639      	mov	r1, r7
 800e68e:	4b60      	ldr	r3, [pc, #384]	@ (800e810 <_strtod_l+0xb00>)
 800e690:	2200      	movs	r2, #0
 800e692:	f7f1 ffd9 	bl	8000648 <__aeabi_dmul>
 800e696:	4606      	mov	r6, r0
 800e698:	460f      	mov	r7, r1
 800e69a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e69e:	9606      	str	r6, [sp, #24]
 800e6a0:	9307      	str	r3, [sp, #28]
 800e6a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6a6:	4d57      	ldr	r5, [pc, #348]	@ (800e804 <_strtod_l+0xaf4>)
 800e6a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6ae:	401d      	ands	r5, r3
 800e6b0:	4b58      	ldr	r3, [pc, #352]	@ (800e814 <_strtod_l+0xb04>)
 800e6b2:	429d      	cmp	r5, r3
 800e6b4:	f040 80b2 	bne.w	800e81c <_strtod_l+0xb0c>
 800e6b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e6be:	ec4b ab10 	vmov	d0, sl, fp
 800e6c2:	f7ff f9c9 	bl	800da58 <__ulp>
 800e6c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6ca:	ec51 0b10 	vmov	r0, r1, d0
 800e6ce:	f7f1 ffbb 	bl	8000648 <__aeabi_dmul>
 800e6d2:	4652      	mov	r2, sl
 800e6d4:	465b      	mov	r3, fp
 800e6d6:	f7f1 fe01 	bl	80002dc <__adddf3>
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4949      	ldr	r1, [pc, #292]	@ (800e804 <_strtod_l+0xaf4>)
 800e6de:	4a4e      	ldr	r2, [pc, #312]	@ (800e818 <_strtod_l+0xb08>)
 800e6e0:	4019      	ands	r1, r3
 800e6e2:	4291      	cmp	r1, r2
 800e6e4:	4682      	mov	sl, r0
 800e6e6:	d942      	bls.n	800e76e <_strtod_l+0xa5e>
 800e6e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e6ea:	4b47      	ldr	r3, [pc, #284]	@ (800e808 <_strtod_l+0xaf8>)
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d103      	bne.n	800e6f8 <_strtod_l+0x9e8>
 800e6f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	f43f ad2b 	beq.w	800e14e <_strtod_l+0x43e>
 800e6f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e808 <_strtod_l+0xaf8>
 800e6fc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e702:	9805      	ldr	r0, [sp, #20]
 800e704:	f7fe fe74 	bl	800d3f0 <_Bfree>
 800e708:	9805      	ldr	r0, [sp, #20]
 800e70a:	4649      	mov	r1, r9
 800e70c:	f7fe fe70 	bl	800d3f0 <_Bfree>
 800e710:	9805      	ldr	r0, [sp, #20]
 800e712:	4641      	mov	r1, r8
 800e714:	f7fe fe6c 	bl	800d3f0 <_Bfree>
 800e718:	9805      	ldr	r0, [sp, #20]
 800e71a:	4621      	mov	r1, r4
 800e71c:	f7fe fe68 	bl	800d3f0 <_Bfree>
 800e720:	e618      	b.n	800e354 <_strtod_l+0x644>
 800e722:	f1ba 0f01 	cmp.w	sl, #1
 800e726:	d103      	bne.n	800e730 <_strtod_l+0xa20>
 800e728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f43f ada5 	beq.w	800e27a <_strtod_l+0x56a>
 800e730:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e7e0 <_strtod_l+0xad0>
 800e734:	4f35      	ldr	r7, [pc, #212]	@ (800e80c <_strtod_l+0xafc>)
 800e736:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e73a:	2600      	movs	r6, #0
 800e73c:	e7b1      	b.n	800e6a2 <_strtod_l+0x992>
 800e73e:	4f34      	ldr	r7, [pc, #208]	@ (800e810 <_strtod_l+0xb00>)
 800e740:	2600      	movs	r6, #0
 800e742:	e7aa      	b.n	800e69a <_strtod_l+0x98a>
 800e744:	4b32      	ldr	r3, [pc, #200]	@ (800e810 <_strtod_l+0xb00>)
 800e746:	4630      	mov	r0, r6
 800e748:	4639      	mov	r1, r7
 800e74a:	2200      	movs	r2, #0
 800e74c:	f7f1 ff7c 	bl	8000648 <__aeabi_dmul>
 800e750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e752:	4606      	mov	r6, r0
 800e754:	460f      	mov	r7, r1
 800e756:	2b00      	cmp	r3, #0
 800e758:	d09f      	beq.n	800e69a <_strtod_l+0x98a>
 800e75a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e75e:	e7a0      	b.n	800e6a2 <_strtod_l+0x992>
 800e760:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e7e8 <_strtod_l+0xad8>
 800e764:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e768:	ec57 6b17 	vmov	r6, r7, d7
 800e76c:	e799      	b.n	800e6a2 <_strtod_l+0x992>
 800e76e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e772:	9b08      	ldr	r3, [sp, #32]
 800e774:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1c1      	bne.n	800e700 <_strtod_l+0x9f0>
 800e77c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e780:	0d1b      	lsrs	r3, r3, #20
 800e782:	051b      	lsls	r3, r3, #20
 800e784:	429d      	cmp	r5, r3
 800e786:	d1bb      	bne.n	800e700 <_strtod_l+0x9f0>
 800e788:	4630      	mov	r0, r6
 800e78a:	4639      	mov	r1, r7
 800e78c:	f7f2 fabc 	bl	8000d08 <__aeabi_d2lz>
 800e790:	f7f1 ff2c 	bl	80005ec <__aeabi_l2d>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	4630      	mov	r0, r6
 800e79a:	4639      	mov	r1, r7
 800e79c:	f7f1 fd9c 	bl	80002d8 <__aeabi_dsub>
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e7a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7ae:	ea46 060a 	orr.w	r6, r6, sl
 800e7b2:	431e      	orrs	r6, r3
 800e7b4:	d06f      	beq.n	800e896 <_strtod_l+0xb86>
 800e7b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e7f0 <_strtod_l+0xae0>)
 800e7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7bc:	f7f2 f9b6 	bl	8000b2c <__aeabi_dcmplt>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	f47f accf 	bne.w	800e164 <_strtod_l+0x454>
 800e7c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e7f8 <_strtod_l+0xae8>)
 800e7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e7d0:	f7f2 f9ca 	bl	8000b68 <__aeabi_dcmpgt>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d093      	beq.n	800e700 <_strtod_l+0x9f0>
 800e7d8:	e4c4      	b.n	800e164 <_strtod_l+0x454>
 800e7da:	bf00      	nop
 800e7dc:	f3af 8000 	nop.w
 800e7e0:	00000000 	.word	0x00000000
 800e7e4:	bff00000 	.word	0xbff00000
 800e7e8:	00000000 	.word	0x00000000
 800e7ec:	3ff00000 	.word	0x3ff00000
 800e7f0:	94a03595 	.word	0x94a03595
 800e7f4:	3fdfffff 	.word	0x3fdfffff
 800e7f8:	35afe535 	.word	0x35afe535
 800e7fc:	3fe00000 	.word	0x3fe00000
 800e800:	000fffff 	.word	0x000fffff
 800e804:	7ff00000 	.word	0x7ff00000
 800e808:	7fefffff 	.word	0x7fefffff
 800e80c:	3ff00000 	.word	0x3ff00000
 800e810:	3fe00000 	.word	0x3fe00000
 800e814:	7fe00000 	.word	0x7fe00000
 800e818:	7c9fffff 	.word	0x7c9fffff
 800e81c:	9b08      	ldr	r3, [sp, #32]
 800e81e:	b323      	cbz	r3, 800e86a <_strtod_l+0xb5a>
 800e820:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e824:	d821      	bhi.n	800e86a <_strtod_l+0xb5a>
 800e826:	a328      	add	r3, pc, #160	@ (adr r3, 800e8c8 <_strtod_l+0xbb8>)
 800e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82c:	4630      	mov	r0, r6
 800e82e:	4639      	mov	r1, r7
 800e830:	f7f2 f986 	bl	8000b40 <__aeabi_dcmple>
 800e834:	b1a0      	cbz	r0, 800e860 <_strtod_l+0xb50>
 800e836:	4639      	mov	r1, r7
 800e838:	4630      	mov	r0, r6
 800e83a:	f7f2 f9dd 	bl	8000bf8 <__aeabi_d2uiz>
 800e83e:	2801      	cmp	r0, #1
 800e840:	bf38      	it	cc
 800e842:	2001      	movcc	r0, #1
 800e844:	f7f1 fe86 	bl	8000554 <__aeabi_ui2d>
 800e848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e84a:	4606      	mov	r6, r0
 800e84c:	460f      	mov	r7, r1
 800e84e:	b9fb      	cbnz	r3, 800e890 <_strtod_l+0xb80>
 800e850:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e854:	9014      	str	r0, [sp, #80]	@ 0x50
 800e856:	9315      	str	r3, [sp, #84]	@ 0x54
 800e858:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e85c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e862:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e866:	1b5b      	subs	r3, r3, r5
 800e868:	9311      	str	r3, [sp, #68]	@ 0x44
 800e86a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e86e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e872:	f7ff f8f1 	bl	800da58 <__ulp>
 800e876:	4650      	mov	r0, sl
 800e878:	ec53 2b10 	vmov	r2, r3, d0
 800e87c:	4659      	mov	r1, fp
 800e87e:	f7f1 fee3 	bl	8000648 <__aeabi_dmul>
 800e882:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e886:	f7f1 fd29 	bl	80002dc <__adddf3>
 800e88a:	4682      	mov	sl, r0
 800e88c:	468b      	mov	fp, r1
 800e88e:	e770      	b.n	800e772 <_strtod_l+0xa62>
 800e890:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e894:	e7e0      	b.n	800e858 <_strtod_l+0xb48>
 800e896:	a30e      	add	r3, pc, #56	@ (adr r3, 800e8d0 <_strtod_l+0xbc0>)
 800e898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89c:	f7f2 f946 	bl	8000b2c <__aeabi_dcmplt>
 800e8a0:	e798      	b.n	800e7d4 <_strtod_l+0xac4>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8aa:	6013      	str	r3, [r2, #0]
 800e8ac:	f7ff ba6d 	b.w	800dd8a <_strtod_l+0x7a>
 800e8b0:	2a65      	cmp	r2, #101	@ 0x65
 800e8b2:	f43f ab66 	beq.w	800df82 <_strtod_l+0x272>
 800e8b6:	2a45      	cmp	r2, #69	@ 0x45
 800e8b8:	f43f ab63 	beq.w	800df82 <_strtod_l+0x272>
 800e8bc:	2301      	movs	r3, #1
 800e8be:	f7ff bb9e 	b.w	800dffe <_strtod_l+0x2ee>
 800e8c2:	bf00      	nop
 800e8c4:	f3af 8000 	nop.w
 800e8c8:	ffc00000 	.word	0xffc00000
 800e8cc:	41dfffff 	.word	0x41dfffff
 800e8d0:	94a03595 	.word	0x94a03595
 800e8d4:	3fcfffff 	.word	0x3fcfffff

0800e8d8 <_strtod_r>:
 800e8d8:	4b01      	ldr	r3, [pc, #4]	@ (800e8e0 <_strtod_r+0x8>)
 800e8da:	f7ff ba19 	b.w	800dd10 <_strtod_l>
 800e8de:	bf00      	nop
 800e8e0:	2000006c 	.word	0x2000006c

0800e8e4 <_strtol_l.constprop.0>:
 800e8e4:	2b24      	cmp	r3, #36	@ 0x24
 800e8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ea:	4686      	mov	lr, r0
 800e8ec:	4690      	mov	r8, r2
 800e8ee:	d801      	bhi.n	800e8f4 <_strtol_l.constprop.0+0x10>
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d106      	bne.n	800e902 <_strtol_l.constprop.0+0x1e>
 800e8f4:	f7fd fdac 	bl	800c450 <__errno>
 800e8f8:	2316      	movs	r3, #22
 800e8fa:	6003      	str	r3, [r0, #0]
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e902:	4834      	ldr	r0, [pc, #208]	@ (800e9d4 <_strtol_l.constprop.0+0xf0>)
 800e904:	460d      	mov	r5, r1
 800e906:	462a      	mov	r2, r5
 800e908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e90c:	5d06      	ldrb	r6, [r0, r4]
 800e90e:	f016 0608 	ands.w	r6, r6, #8
 800e912:	d1f8      	bne.n	800e906 <_strtol_l.constprop.0+0x22>
 800e914:	2c2d      	cmp	r4, #45	@ 0x2d
 800e916:	d12d      	bne.n	800e974 <_strtol_l.constprop.0+0x90>
 800e918:	782c      	ldrb	r4, [r5, #0]
 800e91a:	2601      	movs	r6, #1
 800e91c:	1c95      	adds	r5, r2, #2
 800e91e:	f033 0210 	bics.w	r2, r3, #16
 800e922:	d109      	bne.n	800e938 <_strtol_l.constprop.0+0x54>
 800e924:	2c30      	cmp	r4, #48	@ 0x30
 800e926:	d12a      	bne.n	800e97e <_strtol_l.constprop.0+0x9a>
 800e928:	782a      	ldrb	r2, [r5, #0]
 800e92a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e92e:	2a58      	cmp	r2, #88	@ 0x58
 800e930:	d125      	bne.n	800e97e <_strtol_l.constprop.0+0x9a>
 800e932:	786c      	ldrb	r4, [r5, #1]
 800e934:	2310      	movs	r3, #16
 800e936:	3502      	adds	r5, #2
 800e938:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e93c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800e940:	2200      	movs	r2, #0
 800e942:	fbbc f9f3 	udiv	r9, ip, r3
 800e946:	4610      	mov	r0, r2
 800e948:	fb03 ca19 	mls	sl, r3, r9, ip
 800e94c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e950:	2f09      	cmp	r7, #9
 800e952:	d81b      	bhi.n	800e98c <_strtol_l.constprop.0+0xa8>
 800e954:	463c      	mov	r4, r7
 800e956:	42a3      	cmp	r3, r4
 800e958:	dd27      	ble.n	800e9aa <_strtol_l.constprop.0+0xc6>
 800e95a:	1c57      	adds	r7, r2, #1
 800e95c:	d007      	beq.n	800e96e <_strtol_l.constprop.0+0x8a>
 800e95e:	4581      	cmp	r9, r0
 800e960:	d320      	bcc.n	800e9a4 <_strtol_l.constprop.0+0xc0>
 800e962:	d101      	bne.n	800e968 <_strtol_l.constprop.0+0x84>
 800e964:	45a2      	cmp	sl, r4
 800e966:	db1d      	blt.n	800e9a4 <_strtol_l.constprop.0+0xc0>
 800e968:	fb00 4003 	mla	r0, r0, r3, r4
 800e96c:	2201      	movs	r2, #1
 800e96e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e972:	e7eb      	b.n	800e94c <_strtol_l.constprop.0+0x68>
 800e974:	2c2b      	cmp	r4, #43	@ 0x2b
 800e976:	bf04      	itt	eq
 800e978:	782c      	ldrbeq	r4, [r5, #0]
 800e97a:	1c95      	addeq	r5, r2, #2
 800e97c:	e7cf      	b.n	800e91e <_strtol_l.constprop.0+0x3a>
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d1da      	bne.n	800e938 <_strtol_l.constprop.0+0x54>
 800e982:	2c30      	cmp	r4, #48	@ 0x30
 800e984:	bf0c      	ite	eq
 800e986:	2308      	moveq	r3, #8
 800e988:	230a      	movne	r3, #10
 800e98a:	e7d5      	b.n	800e938 <_strtol_l.constprop.0+0x54>
 800e98c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e990:	2f19      	cmp	r7, #25
 800e992:	d801      	bhi.n	800e998 <_strtol_l.constprop.0+0xb4>
 800e994:	3c37      	subs	r4, #55	@ 0x37
 800e996:	e7de      	b.n	800e956 <_strtol_l.constprop.0+0x72>
 800e998:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e99c:	2f19      	cmp	r7, #25
 800e99e:	d804      	bhi.n	800e9aa <_strtol_l.constprop.0+0xc6>
 800e9a0:	3c57      	subs	r4, #87	@ 0x57
 800e9a2:	e7d8      	b.n	800e956 <_strtol_l.constprop.0+0x72>
 800e9a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e9a8:	e7e1      	b.n	800e96e <_strtol_l.constprop.0+0x8a>
 800e9aa:	1c53      	adds	r3, r2, #1
 800e9ac:	d108      	bne.n	800e9c0 <_strtol_l.constprop.0+0xdc>
 800e9ae:	2322      	movs	r3, #34	@ 0x22
 800e9b0:	f8ce 3000 	str.w	r3, [lr]
 800e9b4:	4660      	mov	r0, ip
 800e9b6:	f1b8 0f00 	cmp.w	r8, #0
 800e9ba:	d0a0      	beq.n	800e8fe <_strtol_l.constprop.0+0x1a>
 800e9bc:	1e69      	subs	r1, r5, #1
 800e9be:	e006      	b.n	800e9ce <_strtol_l.constprop.0+0xea>
 800e9c0:	b106      	cbz	r6, 800e9c4 <_strtol_l.constprop.0+0xe0>
 800e9c2:	4240      	negs	r0, r0
 800e9c4:	f1b8 0f00 	cmp.w	r8, #0
 800e9c8:	d099      	beq.n	800e8fe <_strtol_l.constprop.0+0x1a>
 800e9ca:	2a00      	cmp	r2, #0
 800e9cc:	d1f6      	bne.n	800e9bc <_strtol_l.constprop.0+0xd8>
 800e9ce:	f8c8 1000 	str.w	r1, [r8]
 800e9d2:	e794      	b.n	800e8fe <_strtol_l.constprop.0+0x1a>
 800e9d4:	08010069 	.word	0x08010069

0800e9d8 <_strtol_r>:
 800e9d8:	f7ff bf84 	b.w	800e8e4 <_strtol_l.constprop.0>

0800e9dc <__ssputs_r>:
 800e9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e0:	688e      	ldr	r6, [r1, #8]
 800e9e2:	461f      	mov	r7, r3
 800e9e4:	42be      	cmp	r6, r7
 800e9e6:	680b      	ldr	r3, [r1, #0]
 800e9e8:	4682      	mov	sl, r0
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	4690      	mov	r8, r2
 800e9ee:	d82d      	bhi.n	800ea4c <__ssputs_r+0x70>
 800e9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e9f8:	d026      	beq.n	800ea48 <__ssputs_r+0x6c>
 800e9fa:	6965      	ldr	r5, [r4, #20]
 800e9fc:	6909      	ldr	r1, [r1, #16]
 800e9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea02:	eba3 0901 	sub.w	r9, r3, r1
 800ea06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea0a:	1c7b      	adds	r3, r7, #1
 800ea0c:	444b      	add	r3, r9
 800ea0e:	106d      	asrs	r5, r5, #1
 800ea10:	429d      	cmp	r5, r3
 800ea12:	bf38      	it	cc
 800ea14:	461d      	movcc	r5, r3
 800ea16:	0553      	lsls	r3, r2, #21
 800ea18:	d527      	bpl.n	800ea6a <__ssputs_r+0x8e>
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	f7fe fc1c 	bl	800d258 <_malloc_r>
 800ea20:	4606      	mov	r6, r0
 800ea22:	b360      	cbz	r0, 800ea7e <__ssputs_r+0xa2>
 800ea24:	6921      	ldr	r1, [r4, #16]
 800ea26:	464a      	mov	r2, r9
 800ea28:	f7fd fd3f 	bl	800c4aa <memcpy>
 800ea2c:	89a3      	ldrh	r3, [r4, #12]
 800ea2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ea32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea36:	81a3      	strh	r3, [r4, #12]
 800ea38:	6126      	str	r6, [r4, #16]
 800ea3a:	6165      	str	r5, [r4, #20]
 800ea3c:	444e      	add	r6, r9
 800ea3e:	eba5 0509 	sub.w	r5, r5, r9
 800ea42:	6026      	str	r6, [r4, #0]
 800ea44:	60a5      	str	r5, [r4, #8]
 800ea46:	463e      	mov	r6, r7
 800ea48:	42be      	cmp	r6, r7
 800ea4a:	d900      	bls.n	800ea4e <__ssputs_r+0x72>
 800ea4c:	463e      	mov	r6, r7
 800ea4e:	6820      	ldr	r0, [r4, #0]
 800ea50:	4632      	mov	r2, r6
 800ea52:	4641      	mov	r1, r8
 800ea54:	f000 fb6a 	bl	800f12c <memmove>
 800ea58:	68a3      	ldr	r3, [r4, #8]
 800ea5a:	1b9b      	subs	r3, r3, r6
 800ea5c:	60a3      	str	r3, [r4, #8]
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	4433      	add	r3, r6
 800ea62:	6023      	str	r3, [r4, #0]
 800ea64:	2000      	movs	r0, #0
 800ea66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea6a:	462a      	mov	r2, r5
 800ea6c:	f000 ff41 	bl	800f8f2 <_realloc_r>
 800ea70:	4606      	mov	r6, r0
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d1e0      	bne.n	800ea38 <__ssputs_r+0x5c>
 800ea76:	6921      	ldr	r1, [r4, #16]
 800ea78:	4650      	mov	r0, sl
 800ea7a:	f7fe fb79 	bl	800d170 <_free_r>
 800ea7e:	230c      	movs	r3, #12
 800ea80:	f8ca 3000 	str.w	r3, [sl]
 800ea84:	89a3      	ldrh	r3, [r4, #12]
 800ea86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea8a:	81a3      	strh	r3, [r4, #12]
 800ea8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea90:	e7e9      	b.n	800ea66 <__ssputs_r+0x8a>
	...

0800ea94 <_svfiprintf_r>:
 800ea94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea98:	4698      	mov	r8, r3
 800ea9a:	898b      	ldrh	r3, [r1, #12]
 800ea9c:	061b      	lsls	r3, r3, #24
 800ea9e:	b09d      	sub	sp, #116	@ 0x74
 800eaa0:	4607      	mov	r7, r0
 800eaa2:	460d      	mov	r5, r1
 800eaa4:	4614      	mov	r4, r2
 800eaa6:	d510      	bpl.n	800eaca <_svfiprintf_r+0x36>
 800eaa8:	690b      	ldr	r3, [r1, #16]
 800eaaa:	b973      	cbnz	r3, 800eaca <_svfiprintf_r+0x36>
 800eaac:	2140      	movs	r1, #64	@ 0x40
 800eaae:	f7fe fbd3 	bl	800d258 <_malloc_r>
 800eab2:	6028      	str	r0, [r5, #0]
 800eab4:	6128      	str	r0, [r5, #16]
 800eab6:	b930      	cbnz	r0, 800eac6 <_svfiprintf_r+0x32>
 800eab8:	230c      	movs	r3, #12
 800eaba:	603b      	str	r3, [r7, #0]
 800eabc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eac0:	b01d      	add	sp, #116	@ 0x74
 800eac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac6:	2340      	movs	r3, #64	@ 0x40
 800eac8:	616b      	str	r3, [r5, #20]
 800eaca:	2300      	movs	r3, #0
 800eacc:	9309      	str	r3, [sp, #36]	@ 0x24
 800eace:	2320      	movs	r3, #32
 800ead0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ead4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ead8:	2330      	movs	r3, #48	@ 0x30
 800eada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ec78 <_svfiprintf_r+0x1e4>
 800eade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eae2:	f04f 0901 	mov.w	r9, #1
 800eae6:	4623      	mov	r3, r4
 800eae8:	469a      	mov	sl, r3
 800eaea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaee:	b10a      	cbz	r2, 800eaf4 <_svfiprintf_r+0x60>
 800eaf0:	2a25      	cmp	r2, #37	@ 0x25
 800eaf2:	d1f9      	bne.n	800eae8 <_svfiprintf_r+0x54>
 800eaf4:	ebba 0b04 	subs.w	fp, sl, r4
 800eaf8:	d00b      	beq.n	800eb12 <_svfiprintf_r+0x7e>
 800eafa:	465b      	mov	r3, fp
 800eafc:	4622      	mov	r2, r4
 800eafe:	4629      	mov	r1, r5
 800eb00:	4638      	mov	r0, r7
 800eb02:	f7ff ff6b 	bl	800e9dc <__ssputs_r>
 800eb06:	3001      	adds	r0, #1
 800eb08:	f000 80a7 	beq.w	800ec5a <_svfiprintf_r+0x1c6>
 800eb0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb0e:	445a      	add	r2, fp
 800eb10:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb12:	f89a 3000 	ldrb.w	r3, [sl]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f000 809f 	beq.w	800ec5a <_svfiprintf_r+0x1c6>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eb22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb26:	f10a 0a01 	add.w	sl, sl, #1
 800eb2a:	9304      	str	r3, [sp, #16]
 800eb2c:	9307      	str	r3, [sp, #28]
 800eb2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb32:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb34:	4654      	mov	r4, sl
 800eb36:	2205      	movs	r2, #5
 800eb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb3c:	484e      	ldr	r0, [pc, #312]	@ (800ec78 <_svfiprintf_r+0x1e4>)
 800eb3e:	f7f1 fb6f 	bl	8000220 <memchr>
 800eb42:	9a04      	ldr	r2, [sp, #16]
 800eb44:	b9d8      	cbnz	r0, 800eb7e <_svfiprintf_r+0xea>
 800eb46:	06d0      	lsls	r0, r2, #27
 800eb48:	bf44      	itt	mi
 800eb4a:	2320      	movmi	r3, #32
 800eb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb50:	0711      	lsls	r1, r2, #28
 800eb52:	bf44      	itt	mi
 800eb54:	232b      	movmi	r3, #43	@ 0x2b
 800eb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb60:	d015      	beq.n	800eb8e <_svfiprintf_r+0xfa>
 800eb62:	9a07      	ldr	r2, [sp, #28]
 800eb64:	4654      	mov	r4, sl
 800eb66:	2000      	movs	r0, #0
 800eb68:	f04f 0c0a 	mov.w	ip, #10
 800eb6c:	4621      	mov	r1, r4
 800eb6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb72:	3b30      	subs	r3, #48	@ 0x30
 800eb74:	2b09      	cmp	r3, #9
 800eb76:	d94b      	bls.n	800ec10 <_svfiprintf_r+0x17c>
 800eb78:	b1b0      	cbz	r0, 800eba8 <_svfiprintf_r+0x114>
 800eb7a:	9207      	str	r2, [sp, #28]
 800eb7c:	e014      	b.n	800eba8 <_svfiprintf_r+0x114>
 800eb7e:	eba0 0308 	sub.w	r3, r0, r8
 800eb82:	fa09 f303 	lsl.w	r3, r9, r3
 800eb86:	4313      	orrs	r3, r2
 800eb88:	9304      	str	r3, [sp, #16]
 800eb8a:	46a2      	mov	sl, r4
 800eb8c:	e7d2      	b.n	800eb34 <_svfiprintf_r+0xa0>
 800eb8e:	9b03      	ldr	r3, [sp, #12]
 800eb90:	1d19      	adds	r1, r3, #4
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	9103      	str	r1, [sp, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	bfbb      	ittet	lt
 800eb9a:	425b      	neglt	r3, r3
 800eb9c:	f042 0202 	orrlt.w	r2, r2, #2
 800eba0:	9307      	strge	r3, [sp, #28]
 800eba2:	9307      	strlt	r3, [sp, #28]
 800eba4:	bfb8      	it	lt
 800eba6:	9204      	strlt	r2, [sp, #16]
 800eba8:	7823      	ldrb	r3, [r4, #0]
 800ebaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebac:	d10a      	bne.n	800ebc4 <_svfiprintf_r+0x130>
 800ebae:	7863      	ldrb	r3, [r4, #1]
 800ebb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebb2:	d132      	bne.n	800ec1a <_svfiprintf_r+0x186>
 800ebb4:	9b03      	ldr	r3, [sp, #12]
 800ebb6:	1d1a      	adds	r2, r3, #4
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	9203      	str	r2, [sp, #12]
 800ebbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebc0:	3402      	adds	r4, #2
 800ebc2:	9305      	str	r3, [sp, #20]
 800ebc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ec88 <_svfiprintf_r+0x1f4>
 800ebc8:	7821      	ldrb	r1, [r4, #0]
 800ebca:	2203      	movs	r2, #3
 800ebcc:	4650      	mov	r0, sl
 800ebce:	f7f1 fb27 	bl	8000220 <memchr>
 800ebd2:	b138      	cbz	r0, 800ebe4 <_svfiprintf_r+0x150>
 800ebd4:	9b04      	ldr	r3, [sp, #16]
 800ebd6:	eba0 000a 	sub.w	r0, r0, sl
 800ebda:	2240      	movs	r2, #64	@ 0x40
 800ebdc:	4082      	lsls	r2, r0
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	3401      	adds	r4, #1
 800ebe2:	9304      	str	r3, [sp, #16]
 800ebe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebe8:	4824      	ldr	r0, [pc, #144]	@ (800ec7c <_svfiprintf_r+0x1e8>)
 800ebea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebee:	2206      	movs	r2, #6
 800ebf0:	f7f1 fb16 	bl	8000220 <memchr>
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d036      	beq.n	800ec66 <_svfiprintf_r+0x1d2>
 800ebf8:	4b21      	ldr	r3, [pc, #132]	@ (800ec80 <_svfiprintf_r+0x1ec>)
 800ebfa:	bb1b      	cbnz	r3, 800ec44 <_svfiprintf_r+0x1b0>
 800ebfc:	9b03      	ldr	r3, [sp, #12]
 800ebfe:	3307      	adds	r3, #7
 800ec00:	f023 0307 	bic.w	r3, r3, #7
 800ec04:	3308      	adds	r3, #8
 800ec06:	9303      	str	r3, [sp, #12]
 800ec08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec0a:	4433      	add	r3, r6
 800ec0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec0e:	e76a      	b.n	800eae6 <_svfiprintf_r+0x52>
 800ec10:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec14:	460c      	mov	r4, r1
 800ec16:	2001      	movs	r0, #1
 800ec18:	e7a8      	b.n	800eb6c <_svfiprintf_r+0xd8>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	3401      	adds	r4, #1
 800ec1e:	9305      	str	r3, [sp, #20]
 800ec20:	4619      	mov	r1, r3
 800ec22:	f04f 0c0a 	mov.w	ip, #10
 800ec26:	4620      	mov	r0, r4
 800ec28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec2c:	3a30      	subs	r2, #48	@ 0x30
 800ec2e:	2a09      	cmp	r2, #9
 800ec30:	d903      	bls.n	800ec3a <_svfiprintf_r+0x1a6>
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d0c6      	beq.n	800ebc4 <_svfiprintf_r+0x130>
 800ec36:	9105      	str	r1, [sp, #20]
 800ec38:	e7c4      	b.n	800ebc4 <_svfiprintf_r+0x130>
 800ec3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec3e:	4604      	mov	r4, r0
 800ec40:	2301      	movs	r3, #1
 800ec42:	e7f0      	b.n	800ec26 <_svfiprintf_r+0x192>
 800ec44:	ab03      	add	r3, sp, #12
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	462a      	mov	r2, r5
 800ec4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ec84 <_svfiprintf_r+0x1f0>)
 800ec4c:	a904      	add	r1, sp, #16
 800ec4e:	4638      	mov	r0, r7
 800ec50:	f7fc fb60 	bl	800b314 <_printf_float>
 800ec54:	1c42      	adds	r2, r0, #1
 800ec56:	4606      	mov	r6, r0
 800ec58:	d1d6      	bne.n	800ec08 <_svfiprintf_r+0x174>
 800ec5a:	89ab      	ldrh	r3, [r5, #12]
 800ec5c:	065b      	lsls	r3, r3, #25
 800ec5e:	f53f af2d 	bmi.w	800eabc <_svfiprintf_r+0x28>
 800ec62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec64:	e72c      	b.n	800eac0 <_svfiprintf_r+0x2c>
 800ec66:	ab03      	add	r3, sp, #12
 800ec68:	9300      	str	r3, [sp, #0]
 800ec6a:	462a      	mov	r2, r5
 800ec6c:	4b05      	ldr	r3, [pc, #20]	@ (800ec84 <_svfiprintf_r+0x1f0>)
 800ec6e:	a904      	add	r1, sp, #16
 800ec70:	4638      	mov	r0, r7
 800ec72:	f7fc fde7 	bl	800b844 <_printf_i>
 800ec76:	e7ed      	b.n	800ec54 <_svfiprintf_r+0x1c0>
 800ec78:	08010169 	.word	0x08010169
 800ec7c:	08010173 	.word	0x08010173
 800ec80:	0800b315 	.word	0x0800b315
 800ec84:	0800e9dd 	.word	0x0800e9dd
 800ec88:	0801016f 	.word	0x0801016f

0800ec8c <__sfputc_r>:
 800ec8c:	6893      	ldr	r3, [r2, #8]
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	b410      	push	{r4}
 800ec94:	6093      	str	r3, [r2, #8]
 800ec96:	da08      	bge.n	800ecaa <__sfputc_r+0x1e>
 800ec98:	6994      	ldr	r4, [r2, #24]
 800ec9a:	42a3      	cmp	r3, r4
 800ec9c:	db01      	blt.n	800eca2 <__sfputc_r+0x16>
 800ec9e:	290a      	cmp	r1, #10
 800eca0:	d103      	bne.n	800ecaa <__sfputc_r+0x1e>
 800eca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eca6:	f7fd ba96 	b.w	800c1d6 <__swbuf_r>
 800ecaa:	6813      	ldr	r3, [r2, #0]
 800ecac:	1c58      	adds	r0, r3, #1
 800ecae:	6010      	str	r0, [r2, #0]
 800ecb0:	7019      	strb	r1, [r3, #0]
 800ecb2:	4608      	mov	r0, r1
 800ecb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecb8:	4770      	bx	lr

0800ecba <__sfputs_r>:
 800ecba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecbc:	4606      	mov	r6, r0
 800ecbe:	460f      	mov	r7, r1
 800ecc0:	4614      	mov	r4, r2
 800ecc2:	18d5      	adds	r5, r2, r3
 800ecc4:	42ac      	cmp	r4, r5
 800ecc6:	d101      	bne.n	800eccc <__sfputs_r+0x12>
 800ecc8:	2000      	movs	r0, #0
 800ecca:	e007      	b.n	800ecdc <__sfputs_r+0x22>
 800eccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecd0:	463a      	mov	r2, r7
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	f7ff ffda 	bl	800ec8c <__sfputc_r>
 800ecd8:	1c43      	adds	r3, r0, #1
 800ecda:	d1f3      	bne.n	800ecc4 <__sfputs_r+0xa>
 800ecdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ece0 <_vfiprintf_r>:
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	460d      	mov	r5, r1
 800ece6:	b09d      	sub	sp, #116	@ 0x74
 800ece8:	4614      	mov	r4, r2
 800ecea:	4698      	mov	r8, r3
 800ecec:	4606      	mov	r6, r0
 800ecee:	b118      	cbz	r0, 800ecf8 <_vfiprintf_r+0x18>
 800ecf0:	6a03      	ldr	r3, [r0, #32]
 800ecf2:	b90b      	cbnz	r3, 800ecf8 <_vfiprintf_r+0x18>
 800ecf4:	f7fd f966 	bl	800bfc4 <__sinit>
 800ecf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ecfa:	07d9      	lsls	r1, r3, #31
 800ecfc:	d405      	bmi.n	800ed0a <_vfiprintf_r+0x2a>
 800ecfe:	89ab      	ldrh	r3, [r5, #12]
 800ed00:	059a      	lsls	r2, r3, #22
 800ed02:	d402      	bmi.n	800ed0a <_vfiprintf_r+0x2a>
 800ed04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed06:	f7fd fbce 	bl	800c4a6 <__retarget_lock_acquire_recursive>
 800ed0a:	89ab      	ldrh	r3, [r5, #12]
 800ed0c:	071b      	lsls	r3, r3, #28
 800ed0e:	d501      	bpl.n	800ed14 <_vfiprintf_r+0x34>
 800ed10:	692b      	ldr	r3, [r5, #16]
 800ed12:	b99b      	cbnz	r3, 800ed3c <_vfiprintf_r+0x5c>
 800ed14:	4629      	mov	r1, r5
 800ed16:	4630      	mov	r0, r6
 800ed18:	f7fd fa9c 	bl	800c254 <__swsetup_r>
 800ed1c:	b170      	cbz	r0, 800ed3c <_vfiprintf_r+0x5c>
 800ed1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed20:	07dc      	lsls	r4, r3, #31
 800ed22:	d504      	bpl.n	800ed2e <_vfiprintf_r+0x4e>
 800ed24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed28:	b01d      	add	sp, #116	@ 0x74
 800ed2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed2e:	89ab      	ldrh	r3, [r5, #12]
 800ed30:	0598      	lsls	r0, r3, #22
 800ed32:	d4f7      	bmi.n	800ed24 <_vfiprintf_r+0x44>
 800ed34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed36:	f7fd fbb7 	bl	800c4a8 <__retarget_lock_release_recursive>
 800ed3a:	e7f3      	b.n	800ed24 <_vfiprintf_r+0x44>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed40:	2320      	movs	r3, #32
 800ed42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed4a:	2330      	movs	r3, #48	@ 0x30
 800ed4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eefc <_vfiprintf_r+0x21c>
 800ed50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed54:	f04f 0901 	mov.w	r9, #1
 800ed58:	4623      	mov	r3, r4
 800ed5a:	469a      	mov	sl, r3
 800ed5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed60:	b10a      	cbz	r2, 800ed66 <_vfiprintf_r+0x86>
 800ed62:	2a25      	cmp	r2, #37	@ 0x25
 800ed64:	d1f9      	bne.n	800ed5a <_vfiprintf_r+0x7a>
 800ed66:	ebba 0b04 	subs.w	fp, sl, r4
 800ed6a:	d00b      	beq.n	800ed84 <_vfiprintf_r+0xa4>
 800ed6c:	465b      	mov	r3, fp
 800ed6e:	4622      	mov	r2, r4
 800ed70:	4629      	mov	r1, r5
 800ed72:	4630      	mov	r0, r6
 800ed74:	f7ff ffa1 	bl	800ecba <__sfputs_r>
 800ed78:	3001      	adds	r0, #1
 800ed7a:	f000 80a7 	beq.w	800eecc <_vfiprintf_r+0x1ec>
 800ed7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed80:	445a      	add	r2, fp
 800ed82:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed84:	f89a 3000 	ldrb.w	r3, [sl]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	f000 809f 	beq.w	800eecc <_vfiprintf_r+0x1ec>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ed94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed98:	f10a 0a01 	add.w	sl, sl, #1
 800ed9c:	9304      	str	r3, [sp, #16]
 800ed9e:	9307      	str	r3, [sp, #28]
 800eda0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eda4:	931a      	str	r3, [sp, #104]	@ 0x68
 800eda6:	4654      	mov	r4, sl
 800eda8:	2205      	movs	r2, #5
 800edaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edae:	4853      	ldr	r0, [pc, #332]	@ (800eefc <_vfiprintf_r+0x21c>)
 800edb0:	f7f1 fa36 	bl	8000220 <memchr>
 800edb4:	9a04      	ldr	r2, [sp, #16]
 800edb6:	b9d8      	cbnz	r0, 800edf0 <_vfiprintf_r+0x110>
 800edb8:	06d1      	lsls	r1, r2, #27
 800edba:	bf44      	itt	mi
 800edbc:	2320      	movmi	r3, #32
 800edbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edc2:	0713      	lsls	r3, r2, #28
 800edc4:	bf44      	itt	mi
 800edc6:	232b      	movmi	r3, #43	@ 0x2b
 800edc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edcc:	f89a 3000 	ldrb.w	r3, [sl]
 800edd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800edd2:	d015      	beq.n	800ee00 <_vfiprintf_r+0x120>
 800edd4:	9a07      	ldr	r2, [sp, #28]
 800edd6:	4654      	mov	r4, sl
 800edd8:	2000      	movs	r0, #0
 800edda:	f04f 0c0a 	mov.w	ip, #10
 800edde:	4621      	mov	r1, r4
 800ede0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ede4:	3b30      	subs	r3, #48	@ 0x30
 800ede6:	2b09      	cmp	r3, #9
 800ede8:	d94b      	bls.n	800ee82 <_vfiprintf_r+0x1a2>
 800edea:	b1b0      	cbz	r0, 800ee1a <_vfiprintf_r+0x13a>
 800edec:	9207      	str	r2, [sp, #28]
 800edee:	e014      	b.n	800ee1a <_vfiprintf_r+0x13a>
 800edf0:	eba0 0308 	sub.w	r3, r0, r8
 800edf4:	fa09 f303 	lsl.w	r3, r9, r3
 800edf8:	4313      	orrs	r3, r2
 800edfa:	9304      	str	r3, [sp, #16]
 800edfc:	46a2      	mov	sl, r4
 800edfe:	e7d2      	b.n	800eda6 <_vfiprintf_r+0xc6>
 800ee00:	9b03      	ldr	r3, [sp, #12]
 800ee02:	1d19      	adds	r1, r3, #4
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	9103      	str	r1, [sp, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	bfbb      	ittet	lt
 800ee0c:	425b      	neglt	r3, r3
 800ee0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ee12:	9307      	strge	r3, [sp, #28]
 800ee14:	9307      	strlt	r3, [sp, #28]
 800ee16:	bfb8      	it	lt
 800ee18:	9204      	strlt	r2, [sp, #16]
 800ee1a:	7823      	ldrb	r3, [r4, #0]
 800ee1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee1e:	d10a      	bne.n	800ee36 <_vfiprintf_r+0x156>
 800ee20:	7863      	ldrb	r3, [r4, #1]
 800ee22:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee24:	d132      	bne.n	800ee8c <_vfiprintf_r+0x1ac>
 800ee26:	9b03      	ldr	r3, [sp, #12]
 800ee28:	1d1a      	adds	r2, r3, #4
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	9203      	str	r2, [sp, #12]
 800ee2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee32:	3402      	adds	r4, #2
 800ee34:	9305      	str	r3, [sp, #20]
 800ee36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef0c <_vfiprintf_r+0x22c>
 800ee3a:	7821      	ldrb	r1, [r4, #0]
 800ee3c:	2203      	movs	r2, #3
 800ee3e:	4650      	mov	r0, sl
 800ee40:	f7f1 f9ee 	bl	8000220 <memchr>
 800ee44:	b138      	cbz	r0, 800ee56 <_vfiprintf_r+0x176>
 800ee46:	9b04      	ldr	r3, [sp, #16]
 800ee48:	eba0 000a 	sub.w	r0, r0, sl
 800ee4c:	2240      	movs	r2, #64	@ 0x40
 800ee4e:	4082      	lsls	r2, r0
 800ee50:	4313      	orrs	r3, r2
 800ee52:	3401      	adds	r4, #1
 800ee54:	9304      	str	r3, [sp, #16]
 800ee56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee5a:	4829      	ldr	r0, [pc, #164]	@ (800ef00 <_vfiprintf_r+0x220>)
 800ee5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee60:	2206      	movs	r2, #6
 800ee62:	f7f1 f9dd 	bl	8000220 <memchr>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d03f      	beq.n	800eeea <_vfiprintf_r+0x20a>
 800ee6a:	4b26      	ldr	r3, [pc, #152]	@ (800ef04 <_vfiprintf_r+0x224>)
 800ee6c:	bb1b      	cbnz	r3, 800eeb6 <_vfiprintf_r+0x1d6>
 800ee6e:	9b03      	ldr	r3, [sp, #12]
 800ee70:	3307      	adds	r3, #7
 800ee72:	f023 0307 	bic.w	r3, r3, #7
 800ee76:	3308      	adds	r3, #8
 800ee78:	9303      	str	r3, [sp, #12]
 800ee7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee7c:	443b      	add	r3, r7
 800ee7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee80:	e76a      	b.n	800ed58 <_vfiprintf_r+0x78>
 800ee82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee86:	460c      	mov	r4, r1
 800ee88:	2001      	movs	r0, #1
 800ee8a:	e7a8      	b.n	800edde <_vfiprintf_r+0xfe>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	3401      	adds	r4, #1
 800ee90:	9305      	str	r3, [sp, #20]
 800ee92:	4619      	mov	r1, r3
 800ee94:	f04f 0c0a 	mov.w	ip, #10
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee9e:	3a30      	subs	r2, #48	@ 0x30
 800eea0:	2a09      	cmp	r2, #9
 800eea2:	d903      	bls.n	800eeac <_vfiprintf_r+0x1cc>
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d0c6      	beq.n	800ee36 <_vfiprintf_r+0x156>
 800eea8:	9105      	str	r1, [sp, #20]
 800eeaa:	e7c4      	b.n	800ee36 <_vfiprintf_r+0x156>
 800eeac:	fb0c 2101 	mla	r1, ip, r1, r2
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e7f0      	b.n	800ee98 <_vfiprintf_r+0x1b8>
 800eeb6:	ab03      	add	r3, sp, #12
 800eeb8:	9300      	str	r3, [sp, #0]
 800eeba:	462a      	mov	r2, r5
 800eebc:	4b12      	ldr	r3, [pc, #72]	@ (800ef08 <_vfiprintf_r+0x228>)
 800eebe:	a904      	add	r1, sp, #16
 800eec0:	4630      	mov	r0, r6
 800eec2:	f7fc fa27 	bl	800b314 <_printf_float>
 800eec6:	4607      	mov	r7, r0
 800eec8:	1c78      	adds	r0, r7, #1
 800eeca:	d1d6      	bne.n	800ee7a <_vfiprintf_r+0x19a>
 800eecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eece:	07d9      	lsls	r1, r3, #31
 800eed0:	d405      	bmi.n	800eede <_vfiprintf_r+0x1fe>
 800eed2:	89ab      	ldrh	r3, [r5, #12]
 800eed4:	059a      	lsls	r2, r3, #22
 800eed6:	d402      	bmi.n	800eede <_vfiprintf_r+0x1fe>
 800eed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eeda:	f7fd fae5 	bl	800c4a8 <__retarget_lock_release_recursive>
 800eede:	89ab      	ldrh	r3, [r5, #12]
 800eee0:	065b      	lsls	r3, r3, #25
 800eee2:	f53f af1f 	bmi.w	800ed24 <_vfiprintf_r+0x44>
 800eee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eee8:	e71e      	b.n	800ed28 <_vfiprintf_r+0x48>
 800eeea:	ab03      	add	r3, sp, #12
 800eeec:	9300      	str	r3, [sp, #0]
 800eeee:	462a      	mov	r2, r5
 800eef0:	4b05      	ldr	r3, [pc, #20]	@ (800ef08 <_vfiprintf_r+0x228>)
 800eef2:	a904      	add	r1, sp, #16
 800eef4:	4630      	mov	r0, r6
 800eef6:	f7fc fca5 	bl	800b844 <_printf_i>
 800eefa:	e7e4      	b.n	800eec6 <_vfiprintf_r+0x1e6>
 800eefc:	08010169 	.word	0x08010169
 800ef00:	08010173 	.word	0x08010173
 800ef04:	0800b315 	.word	0x0800b315
 800ef08:	0800ecbb 	.word	0x0800ecbb
 800ef0c:	0801016f 	.word	0x0801016f

0800ef10 <__sflush_r>:
 800ef10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef18:	0716      	lsls	r6, r2, #28
 800ef1a:	4605      	mov	r5, r0
 800ef1c:	460c      	mov	r4, r1
 800ef1e:	d454      	bmi.n	800efca <__sflush_r+0xba>
 800ef20:	684b      	ldr	r3, [r1, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	dc02      	bgt.n	800ef2c <__sflush_r+0x1c>
 800ef26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	dd48      	ble.n	800efbe <__sflush_r+0xae>
 800ef2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef2e:	2e00      	cmp	r6, #0
 800ef30:	d045      	beq.n	800efbe <__sflush_r+0xae>
 800ef32:	2300      	movs	r3, #0
 800ef34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef38:	682f      	ldr	r7, [r5, #0]
 800ef3a:	6a21      	ldr	r1, [r4, #32]
 800ef3c:	602b      	str	r3, [r5, #0]
 800ef3e:	d030      	beq.n	800efa2 <__sflush_r+0x92>
 800ef40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef42:	89a3      	ldrh	r3, [r4, #12]
 800ef44:	0759      	lsls	r1, r3, #29
 800ef46:	d505      	bpl.n	800ef54 <__sflush_r+0x44>
 800ef48:	6863      	ldr	r3, [r4, #4]
 800ef4a:	1ad2      	subs	r2, r2, r3
 800ef4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef4e:	b10b      	cbz	r3, 800ef54 <__sflush_r+0x44>
 800ef50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef52:	1ad2      	subs	r2, r2, r3
 800ef54:	2300      	movs	r3, #0
 800ef56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef58:	6a21      	ldr	r1, [r4, #32]
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	47b0      	blx	r6
 800ef5e:	1c43      	adds	r3, r0, #1
 800ef60:	89a3      	ldrh	r3, [r4, #12]
 800ef62:	d106      	bne.n	800ef72 <__sflush_r+0x62>
 800ef64:	6829      	ldr	r1, [r5, #0]
 800ef66:	291d      	cmp	r1, #29
 800ef68:	d82b      	bhi.n	800efc2 <__sflush_r+0xb2>
 800ef6a:	4a2a      	ldr	r2, [pc, #168]	@ (800f014 <__sflush_r+0x104>)
 800ef6c:	410a      	asrs	r2, r1
 800ef6e:	07d6      	lsls	r6, r2, #31
 800ef70:	d427      	bmi.n	800efc2 <__sflush_r+0xb2>
 800ef72:	2200      	movs	r2, #0
 800ef74:	6062      	str	r2, [r4, #4]
 800ef76:	04d9      	lsls	r1, r3, #19
 800ef78:	6922      	ldr	r2, [r4, #16]
 800ef7a:	6022      	str	r2, [r4, #0]
 800ef7c:	d504      	bpl.n	800ef88 <__sflush_r+0x78>
 800ef7e:	1c42      	adds	r2, r0, #1
 800ef80:	d101      	bne.n	800ef86 <__sflush_r+0x76>
 800ef82:	682b      	ldr	r3, [r5, #0]
 800ef84:	b903      	cbnz	r3, 800ef88 <__sflush_r+0x78>
 800ef86:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef8a:	602f      	str	r7, [r5, #0]
 800ef8c:	b1b9      	cbz	r1, 800efbe <__sflush_r+0xae>
 800ef8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef92:	4299      	cmp	r1, r3
 800ef94:	d002      	beq.n	800ef9c <__sflush_r+0x8c>
 800ef96:	4628      	mov	r0, r5
 800ef98:	f7fe f8ea 	bl	800d170 <_free_r>
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800efa0:	e00d      	b.n	800efbe <__sflush_r+0xae>
 800efa2:	2301      	movs	r3, #1
 800efa4:	4628      	mov	r0, r5
 800efa6:	47b0      	blx	r6
 800efa8:	4602      	mov	r2, r0
 800efaa:	1c50      	adds	r0, r2, #1
 800efac:	d1c9      	bne.n	800ef42 <__sflush_r+0x32>
 800efae:	682b      	ldr	r3, [r5, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d0c6      	beq.n	800ef42 <__sflush_r+0x32>
 800efb4:	2b1d      	cmp	r3, #29
 800efb6:	d001      	beq.n	800efbc <__sflush_r+0xac>
 800efb8:	2b16      	cmp	r3, #22
 800efba:	d11e      	bne.n	800effa <__sflush_r+0xea>
 800efbc:	602f      	str	r7, [r5, #0]
 800efbe:	2000      	movs	r0, #0
 800efc0:	e022      	b.n	800f008 <__sflush_r+0xf8>
 800efc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efc6:	b21b      	sxth	r3, r3
 800efc8:	e01b      	b.n	800f002 <__sflush_r+0xf2>
 800efca:	690f      	ldr	r7, [r1, #16]
 800efcc:	2f00      	cmp	r7, #0
 800efce:	d0f6      	beq.n	800efbe <__sflush_r+0xae>
 800efd0:	0793      	lsls	r3, r2, #30
 800efd2:	680e      	ldr	r6, [r1, #0]
 800efd4:	bf08      	it	eq
 800efd6:	694b      	ldreq	r3, [r1, #20]
 800efd8:	600f      	str	r7, [r1, #0]
 800efda:	bf18      	it	ne
 800efdc:	2300      	movne	r3, #0
 800efde:	eba6 0807 	sub.w	r8, r6, r7
 800efe2:	608b      	str	r3, [r1, #8]
 800efe4:	f1b8 0f00 	cmp.w	r8, #0
 800efe8:	dde9      	ble.n	800efbe <__sflush_r+0xae>
 800efea:	6a21      	ldr	r1, [r4, #32]
 800efec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800efee:	4643      	mov	r3, r8
 800eff0:	463a      	mov	r2, r7
 800eff2:	4628      	mov	r0, r5
 800eff4:	47b0      	blx	r6
 800eff6:	2800      	cmp	r0, #0
 800eff8:	dc08      	bgt.n	800f00c <__sflush_r+0xfc>
 800effa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800effe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f002:	81a3      	strh	r3, [r4, #12]
 800f004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f00c:	4407      	add	r7, r0
 800f00e:	eba8 0800 	sub.w	r8, r8, r0
 800f012:	e7e7      	b.n	800efe4 <__sflush_r+0xd4>
 800f014:	dfbffffe 	.word	0xdfbffffe

0800f018 <_fflush_r>:
 800f018:	b538      	push	{r3, r4, r5, lr}
 800f01a:	690b      	ldr	r3, [r1, #16]
 800f01c:	4605      	mov	r5, r0
 800f01e:	460c      	mov	r4, r1
 800f020:	b913      	cbnz	r3, 800f028 <_fflush_r+0x10>
 800f022:	2500      	movs	r5, #0
 800f024:	4628      	mov	r0, r5
 800f026:	bd38      	pop	{r3, r4, r5, pc}
 800f028:	b118      	cbz	r0, 800f032 <_fflush_r+0x1a>
 800f02a:	6a03      	ldr	r3, [r0, #32]
 800f02c:	b90b      	cbnz	r3, 800f032 <_fflush_r+0x1a>
 800f02e:	f7fc ffc9 	bl	800bfc4 <__sinit>
 800f032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d0f3      	beq.n	800f022 <_fflush_r+0xa>
 800f03a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f03c:	07d0      	lsls	r0, r2, #31
 800f03e:	d404      	bmi.n	800f04a <_fflush_r+0x32>
 800f040:	0599      	lsls	r1, r3, #22
 800f042:	d402      	bmi.n	800f04a <_fflush_r+0x32>
 800f044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f046:	f7fd fa2e 	bl	800c4a6 <__retarget_lock_acquire_recursive>
 800f04a:	4628      	mov	r0, r5
 800f04c:	4621      	mov	r1, r4
 800f04e:	f7ff ff5f 	bl	800ef10 <__sflush_r>
 800f052:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f054:	07da      	lsls	r2, r3, #31
 800f056:	4605      	mov	r5, r0
 800f058:	d4e4      	bmi.n	800f024 <_fflush_r+0xc>
 800f05a:	89a3      	ldrh	r3, [r4, #12]
 800f05c:	059b      	lsls	r3, r3, #22
 800f05e:	d4e1      	bmi.n	800f024 <_fflush_r+0xc>
 800f060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f062:	f7fd fa21 	bl	800c4a8 <__retarget_lock_release_recursive>
 800f066:	e7dd      	b.n	800f024 <_fflush_r+0xc>

0800f068 <__swhatbuf_r>:
 800f068:	b570      	push	{r4, r5, r6, lr}
 800f06a:	460c      	mov	r4, r1
 800f06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f070:	2900      	cmp	r1, #0
 800f072:	b096      	sub	sp, #88	@ 0x58
 800f074:	4615      	mov	r5, r2
 800f076:	461e      	mov	r6, r3
 800f078:	da0d      	bge.n	800f096 <__swhatbuf_r+0x2e>
 800f07a:	89a3      	ldrh	r3, [r4, #12]
 800f07c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f080:	f04f 0100 	mov.w	r1, #0
 800f084:	bf14      	ite	ne
 800f086:	2340      	movne	r3, #64	@ 0x40
 800f088:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f08c:	2000      	movs	r0, #0
 800f08e:	6031      	str	r1, [r6, #0]
 800f090:	602b      	str	r3, [r5, #0]
 800f092:	b016      	add	sp, #88	@ 0x58
 800f094:	bd70      	pop	{r4, r5, r6, pc}
 800f096:	466a      	mov	r2, sp
 800f098:	f000 f874 	bl	800f184 <_fstat_r>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	dbec      	blt.n	800f07a <__swhatbuf_r+0x12>
 800f0a0:	9901      	ldr	r1, [sp, #4]
 800f0a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0aa:	4259      	negs	r1, r3
 800f0ac:	4159      	adcs	r1, r3
 800f0ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0b2:	e7eb      	b.n	800f08c <__swhatbuf_r+0x24>

0800f0b4 <__smakebuf_r>:
 800f0b4:	898b      	ldrh	r3, [r1, #12]
 800f0b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0b8:	079d      	lsls	r5, r3, #30
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	460c      	mov	r4, r1
 800f0be:	d507      	bpl.n	800f0d0 <__smakebuf_r+0x1c>
 800f0c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0c4:	6023      	str	r3, [r4, #0]
 800f0c6:	6123      	str	r3, [r4, #16]
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	6163      	str	r3, [r4, #20]
 800f0cc:	b003      	add	sp, #12
 800f0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d0:	ab01      	add	r3, sp, #4
 800f0d2:	466a      	mov	r2, sp
 800f0d4:	f7ff ffc8 	bl	800f068 <__swhatbuf_r>
 800f0d8:	9f00      	ldr	r7, [sp, #0]
 800f0da:	4605      	mov	r5, r0
 800f0dc:	4639      	mov	r1, r7
 800f0de:	4630      	mov	r0, r6
 800f0e0:	f7fe f8ba 	bl	800d258 <_malloc_r>
 800f0e4:	b948      	cbnz	r0, 800f0fa <__smakebuf_r+0x46>
 800f0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0ea:	059a      	lsls	r2, r3, #22
 800f0ec:	d4ee      	bmi.n	800f0cc <__smakebuf_r+0x18>
 800f0ee:	f023 0303 	bic.w	r3, r3, #3
 800f0f2:	f043 0302 	orr.w	r3, r3, #2
 800f0f6:	81a3      	strh	r3, [r4, #12]
 800f0f8:	e7e2      	b.n	800f0c0 <__smakebuf_r+0xc>
 800f0fa:	89a3      	ldrh	r3, [r4, #12]
 800f0fc:	6020      	str	r0, [r4, #0]
 800f0fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f102:	81a3      	strh	r3, [r4, #12]
 800f104:	9b01      	ldr	r3, [sp, #4]
 800f106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f10a:	b15b      	cbz	r3, 800f124 <__smakebuf_r+0x70>
 800f10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f110:	4630      	mov	r0, r6
 800f112:	f000 f849 	bl	800f1a8 <_isatty_r>
 800f116:	b128      	cbz	r0, 800f124 <__smakebuf_r+0x70>
 800f118:	89a3      	ldrh	r3, [r4, #12]
 800f11a:	f023 0303 	bic.w	r3, r3, #3
 800f11e:	f043 0301 	orr.w	r3, r3, #1
 800f122:	81a3      	strh	r3, [r4, #12]
 800f124:	89a3      	ldrh	r3, [r4, #12]
 800f126:	431d      	orrs	r5, r3
 800f128:	81a5      	strh	r5, [r4, #12]
 800f12a:	e7cf      	b.n	800f0cc <__smakebuf_r+0x18>

0800f12c <memmove>:
 800f12c:	4288      	cmp	r0, r1
 800f12e:	b510      	push	{r4, lr}
 800f130:	eb01 0402 	add.w	r4, r1, r2
 800f134:	d902      	bls.n	800f13c <memmove+0x10>
 800f136:	4284      	cmp	r4, r0
 800f138:	4623      	mov	r3, r4
 800f13a:	d807      	bhi.n	800f14c <memmove+0x20>
 800f13c:	1e43      	subs	r3, r0, #1
 800f13e:	42a1      	cmp	r1, r4
 800f140:	d008      	beq.n	800f154 <memmove+0x28>
 800f142:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f14a:	e7f8      	b.n	800f13e <memmove+0x12>
 800f14c:	4402      	add	r2, r0
 800f14e:	4601      	mov	r1, r0
 800f150:	428a      	cmp	r2, r1
 800f152:	d100      	bne.n	800f156 <memmove+0x2a>
 800f154:	bd10      	pop	{r4, pc}
 800f156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f15a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f15e:	e7f7      	b.n	800f150 <memmove+0x24>

0800f160 <strncmp>:
 800f160:	b510      	push	{r4, lr}
 800f162:	b16a      	cbz	r2, 800f180 <strncmp+0x20>
 800f164:	3901      	subs	r1, #1
 800f166:	1884      	adds	r4, r0, r2
 800f168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f16c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f170:	429a      	cmp	r2, r3
 800f172:	d103      	bne.n	800f17c <strncmp+0x1c>
 800f174:	42a0      	cmp	r0, r4
 800f176:	d001      	beq.n	800f17c <strncmp+0x1c>
 800f178:	2a00      	cmp	r2, #0
 800f17a:	d1f5      	bne.n	800f168 <strncmp+0x8>
 800f17c:	1ad0      	subs	r0, r2, r3
 800f17e:	bd10      	pop	{r4, pc}
 800f180:	4610      	mov	r0, r2
 800f182:	e7fc      	b.n	800f17e <strncmp+0x1e>

0800f184 <_fstat_r>:
 800f184:	b538      	push	{r3, r4, r5, lr}
 800f186:	4d07      	ldr	r5, [pc, #28]	@ (800f1a4 <_fstat_r+0x20>)
 800f188:	2300      	movs	r3, #0
 800f18a:	4604      	mov	r4, r0
 800f18c:	4608      	mov	r0, r1
 800f18e:	4611      	mov	r1, r2
 800f190:	602b      	str	r3, [r5, #0]
 800f192:	f7f2 fd77 	bl	8001c84 <_fstat>
 800f196:	1c43      	adds	r3, r0, #1
 800f198:	d102      	bne.n	800f1a0 <_fstat_r+0x1c>
 800f19a:	682b      	ldr	r3, [r5, #0]
 800f19c:	b103      	cbz	r3, 800f1a0 <_fstat_r+0x1c>
 800f19e:	6023      	str	r3, [r4, #0]
 800f1a0:	bd38      	pop	{r3, r4, r5, pc}
 800f1a2:	bf00      	nop
 800f1a4:	2000147c 	.word	0x2000147c

0800f1a8 <_isatty_r>:
 800f1a8:	b538      	push	{r3, r4, r5, lr}
 800f1aa:	4d06      	ldr	r5, [pc, #24]	@ (800f1c4 <_isatty_r+0x1c>)
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	4608      	mov	r0, r1
 800f1b2:	602b      	str	r3, [r5, #0]
 800f1b4:	f7f2 fd76 	bl	8001ca4 <_isatty>
 800f1b8:	1c43      	adds	r3, r0, #1
 800f1ba:	d102      	bne.n	800f1c2 <_isatty_r+0x1a>
 800f1bc:	682b      	ldr	r3, [r5, #0]
 800f1be:	b103      	cbz	r3, 800f1c2 <_isatty_r+0x1a>
 800f1c0:	6023      	str	r3, [r4, #0]
 800f1c2:	bd38      	pop	{r3, r4, r5, pc}
 800f1c4:	2000147c 	.word	0x2000147c

0800f1c8 <_sbrk_r>:
 800f1c8:	b538      	push	{r3, r4, r5, lr}
 800f1ca:	4d06      	ldr	r5, [pc, #24]	@ (800f1e4 <_sbrk_r+0x1c>)
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	4608      	mov	r0, r1
 800f1d2:	602b      	str	r3, [r5, #0]
 800f1d4:	f7f2 fd7e 	bl	8001cd4 <_sbrk>
 800f1d8:	1c43      	adds	r3, r0, #1
 800f1da:	d102      	bne.n	800f1e2 <_sbrk_r+0x1a>
 800f1dc:	682b      	ldr	r3, [r5, #0]
 800f1de:	b103      	cbz	r3, 800f1e2 <_sbrk_r+0x1a>
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	bd38      	pop	{r3, r4, r5, pc}
 800f1e4:	2000147c 	.word	0x2000147c

0800f1e8 <nan>:
 800f1e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f1f0 <nan+0x8>
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop
 800f1f0:	00000000 	.word	0x00000000
 800f1f4:	7ff80000 	.word	0x7ff80000

0800f1f8 <__assert_func>:
 800f1f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1fa:	4614      	mov	r4, r2
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	4b09      	ldr	r3, [pc, #36]	@ (800f224 <__assert_func+0x2c>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	4605      	mov	r5, r0
 800f204:	68d8      	ldr	r0, [r3, #12]
 800f206:	b954      	cbnz	r4, 800f21e <__assert_func+0x26>
 800f208:	4b07      	ldr	r3, [pc, #28]	@ (800f228 <__assert_func+0x30>)
 800f20a:	461c      	mov	r4, r3
 800f20c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f210:	9100      	str	r1, [sp, #0]
 800f212:	462b      	mov	r3, r5
 800f214:	4905      	ldr	r1, [pc, #20]	@ (800f22c <__assert_func+0x34>)
 800f216:	f000 fba7 	bl	800f968 <fiprintf>
 800f21a:	f000 fbb7 	bl	800f98c <abort>
 800f21e:	4b04      	ldr	r3, [pc, #16]	@ (800f230 <__assert_func+0x38>)
 800f220:	e7f4      	b.n	800f20c <__assert_func+0x14>
 800f222:	bf00      	nop
 800f224:	2000001c 	.word	0x2000001c
 800f228:	080101bd 	.word	0x080101bd
 800f22c:	0801018f 	.word	0x0801018f
 800f230:	08010182 	.word	0x08010182

0800f234 <_calloc_r>:
 800f234:	b570      	push	{r4, r5, r6, lr}
 800f236:	fba1 5402 	umull	r5, r4, r1, r2
 800f23a:	b93c      	cbnz	r4, 800f24c <_calloc_r+0x18>
 800f23c:	4629      	mov	r1, r5
 800f23e:	f7fe f80b 	bl	800d258 <_malloc_r>
 800f242:	4606      	mov	r6, r0
 800f244:	b928      	cbnz	r0, 800f252 <_calloc_r+0x1e>
 800f246:	2600      	movs	r6, #0
 800f248:	4630      	mov	r0, r6
 800f24a:	bd70      	pop	{r4, r5, r6, pc}
 800f24c:	220c      	movs	r2, #12
 800f24e:	6002      	str	r2, [r0, #0]
 800f250:	e7f9      	b.n	800f246 <_calloc_r+0x12>
 800f252:	462a      	mov	r2, r5
 800f254:	4621      	mov	r1, r4
 800f256:	f7fd f853 	bl	800c300 <memset>
 800f25a:	e7f5      	b.n	800f248 <_calloc_r+0x14>

0800f25c <rshift>:
 800f25c:	6903      	ldr	r3, [r0, #16]
 800f25e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f262:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f266:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f26a:	f100 0414 	add.w	r4, r0, #20
 800f26e:	dd45      	ble.n	800f2fc <rshift+0xa0>
 800f270:	f011 011f 	ands.w	r1, r1, #31
 800f274:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f278:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f27c:	d10c      	bne.n	800f298 <rshift+0x3c>
 800f27e:	f100 0710 	add.w	r7, r0, #16
 800f282:	4629      	mov	r1, r5
 800f284:	42b1      	cmp	r1, r6
 800f286:	d334      	bcc.n	800f2f2 <rshift+0x96>
 800f288:	1a9b      	subs	r3, r3, r2
 800f28a:	009b      	lsls	r3, r3, #2
 800f28c:	1eea      	subs	r2, r5, #3
 800f28e:	4296      	cmp	r6, r2
 800f290:	bf38      	it	cc
 800f292:	2300      	movcc	r3, #0
 800f294:	4423      	add	r3, r4
 800f296:	e015      	b.n	800f2c4 <rshift+0x68>
 800f298:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f29c:	f1c1 0820 	rsb	r8, r1, #32
 800f2a0:	40cf      	lsrs	r7, r1
 800f2a2:	f105 0e04 	add.w	lr, r5, #4
 800f2a6:	46a1      	mov	r9, r4
 800f2a8:	4576      	cmp	r6, lr
 800f2aa:	46f4      	mov	ip, lr
 800f2ac:	d815      	bhi.n	800f2da <rshift+0x7e>
 800f2ae:	1a9a      	subs	r2, r3, r2
 800f2b0:	0092      	lsls	r2, r2, #2
 800f2b2:	3a04      	subs	r2, #4
 800f2b4:	3501      	adds	r5, #1
 800f2b6:	42ae      	cmp	r6, r5
 800f2b8:	bf38      	it	cc
 800f2ba:	2200      	movcc	r2, #0
 800f2bc:	18a3      	adds	r3, r4, r2
 800f2be:	50a7      	str	r7, [r4, r2]
 800f2c0:	b107      	cbz	r7, 800f2c4 <rshift+0x68>
 800f2c2:	3304      	adds	r3, #4
 800f2c4:	1b1a      	subs	r2, r3, r4
 800f2c6:	42a3      	cmp	r3, r4
 800f2c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f2cc:	bf08      	it	eq
 800f2ce:	2300      	moveq	r3, #0
 800f2d0:	6102      	str	r2, [r0, #16]
 800f2d2:	bf08      	it	eq
 800f2d4:	6143      	streq	r3, [r0, #20]
 800f2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2da:	f8dc c000 	ldr.w	ip, [ip]
 800f2de:	fa0c fc08 	lsl.w	ip, ip, r8
 800f2e2:	ea4c 0707 	orr.w	r7, ip, r7
 800f2e6:	f849 7b04 	str.w	r7, [r9], #4
 800f2ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f2ee:	40cf      	lsrs	r7, r1
 800f2f0:	e7da      	b.n	800f2a8 <rshift+0x4c>
 800f2f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f2f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f2fa:	e7c3      	b.n	800f284 <rshift+0x28>
 800f2fc:	4623      	mov	r3, r4
 800f2fe:	e7e1      	b.n	800f2c4 <rshift+0x68>

0800f300 <__hexdig_fun>:
 800f300:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f304:	2b09      	cmp	r3, #9
 800f306:	d802      	bhi.n	800f30e <__hexdig_fun+0xe>
 800f308:	3820      	subs	r0, #32
 800f30a:	b2c0      	uxtb	r0, r0
 800f30c:	4770      	bx	lr
 800f30e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f312:	2b05      	cmp	r3, #5
 800f314:	d801      	bhi.n	800f31a <__hexdig_fun+0x1a>
 800f316:	3847      	subs	r0, #71	@ 0x47
 800f318:	e7f7      	b.n	800f30a <__hexdig_fun+0xa>
 800f31a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f31e:	2b05      	cmp	r3, #5
 800f320:	d801      	bhi.n	800f326 <__hexdig_fun+0x26>
 800f322:	3827      	subs	r0, #39	@ 0x27
 800f324:	e7f1      	b.n	800f30a <__hexdig_fun+0xa>
 800f326:	2000      	movs	r0, #0
 800f328:	4770      	bx	lr
	...

0800f32c <__gethex>:
 800f32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f330:	b085      	sub	sp, #20
 800f332:	468a      	mov	sl, r1
 800f334:	9302      	str	r3, [sp, #8]
 800f336:	680b      	ldr	r3, [r1, #0]
 800f338:	9001      	str	r0, [sp, #4]
 800f33a:	4690      	mov	r8, r2
 800f33c:	1c9c      	adds	r4, r3, #2
 800f33e:	46a1      	mov	r9, r4
 800f340:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f344:	2830      	cmp	r0, #48	@ 0x30
 800f346:	d0fa      	beq.n	800f33e <__gethex+0x12>
 800f348:	eba9 0303 	sub.w	r3, r9, r3
 800f34c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f350:	f7ff ffd6 	bl	800f300 <__hexdig_fun>
 800f354:	4605      	mov	r5, r0
 800f356:	2800      	cmp	r0, #0
 800f358:	d168      	bne.n	800f42c <__gethex+0x100>
 800f35a:	49a0      	ldr	r1, [pc, #640]	@ (800f5dc <__gethex+0x2b0>)
 800f35c:	2201      	movs	r2, #1
 800f35e:	4648      	mov	r0, r9
 800f360:	f7ff fefe 	bl	800f160 <strncmp>
 800f364:	4607      	mov	r7, r0
 800f366:	2800      	cmp	r0, #0
 800f368:	d167      	bne.n	800f43a <__gethex+0x10e>
 800f36a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f36e:	4626      	mov	r6, r4
 800f370:	f7ff ffc6 	bl	800f300 <__hexdig_fun>
 800f374:	2800      	cmp	r0, #0
 800f376:	d062      	beq.n	800f43e <__gethex+0x112>
 800f378:	4623      	mov	r3, r4
 800f37a:	7818      	ldrb	r0, [r3, #0]
 800f37c:	2830      	cmp	r0, #48	@ 0x30
 800f37e:	4699      	mov	r9, r3
 800f380:	f103 0301 	add.w	r3, r3, #1
 800f384:	d0f9      	beq.n	800f37a <__gethex+0x4e>
 800f386:	f7ff ffbb 	bl	800f300 <__hexdig_fun>
 800f38a:	fab0 f580 	clz	r5, r0
 800f38e:	096d      	lsrs	r5, r5, #5
 800f390:	f04f 0b01 	mov.w	fp, #1
 800f394:	464a      	mov	r2, r9
 800f396:	4616      	mov	r6, r2
 800f398:	3201      	adds	r2, #1
 800f39a:	7830      	ldrb	r0, [r6, #0]
 800f39c:	f7ff ffb0 	bl	800f300 <__hexdig_fun>
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d1f8      	bne.n	800f396 <__gethex+0x6a>
 800f3a4:	498d      	ldr	r1, [pc, #564]	@ (800f5dc <__gethex+0x2b0>)
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f7ff fed9 	bl	800f160 <strncmp>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d13f      	bne.n	800f432 <__gethex+0x106>
 800f3b2:	b944      	cbnz	r4, 800f3c6 <__gethex+0x9a>
 800f3b4:	1c74      	adds	r4, r6, #1
 800f3b6:	4622      	mov	r2, r4
 800f3b8:	4616      	mov	r6, r2
 800f3ba:	3201      	adds	r2, #1
 800f3bc:	7830      	ldrb	r0, [r6, #0]
 800f3be:	f7ff ff9f 	bl	800f300 <__hexdig_fun>
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	d1f8      	bne.n	800f3b8 <__gethex+0x8c>
 800f3c6:	1ba4      	subs	r4, r4, r6
 800f3c8:	00a7      	lsls	r7, r4, #2
 800f3ca:	7833      	ldrb	r3, [r6, #0]
 800f3cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f3d0:	2b50      	cmp	r3, #80	@ 0x50
 800f3d2:	d13e      	bne.n	800f452 <__gethex+0x126>
 800f3d4:	7873      	ldrb	r3, [r6, #1]
 800f3d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800f3d8:	d033      	beq.n	800f442 <__gethex+0x116>
 800f3da:	2b2d      	cmp	r3, #45	@ 0x2d
 800f3dc:	d034      	beq.n	800f448 <__gethex+0x11c>
 800f3de:	1c71      	adds	r1, r6, #1
 800f3e0:	2400      	movs	r4, #0
 800f3e2:	7808      	ldrb	r0, [r1, #0]
 800f3e4:	f7ff ff8c 	bl	800f300 <__hexdig_fun>
 800f3e8:	1e43      	subs	r3, r0, #1
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	2b18      	cmp	r3, #24
 800f3ee:	d830      	bhi.n	800f452 <__gethex+0x126>
 800f3f0:	f1a0 0210 	sub.w	r2, r0, #16
 800f3f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f3f8:	f7ff ff82 	bl	800f300 <__hexdig_fun>
 800f3fc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800f400:	fa5f fc8c 	uxtb.w	ip, ip
 800f404:	f1bc 0f18 	cmp.w	ip, #24
 800f408:	f04f 030a 	mov.w	r3, #10
 800f40c:	d91e      	bls.n	800f44c <__gethex+0x120>
 800f40e:	b104      	cbz	r4, 800f412 <__gethex+0xe6>
 800f410:	4252      	negs	r2, r2
 800f412:	4417      	add	r7, r2
 800f414:	f8ca 1000 	str.w	r1, [sl]
 800f418:	b1ed      	cbz	r5, 800f456 <__gethex+0x12a>
 800f41a:	f1bb 0f00 	cmp.w	fp, #0
 800f41e:	bf0c      	ite	eq
 800f420:	2506      	moveq	r5, #6
 800f422:	2500      	movne	r5, #0
 800f424:	4628      	mov	r0, r5
 800f426:	b005      	add	sp, #20
 800f428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f42c:	2500      	movs	r5, #0
 800f42e:	462c      	mov	r4, r5
 800f430:	e7b0      	b.n	800f394 <__gethex+0x68>
 800f432:	2c00      	cmp	r4, #0
 800f434:	d1c7      	bne.n	800f3c6 <__gethex+0x9a>
 800f436:	4627      	mov	r7, r4
 800f438:	e7c7      	b.n	800f3ca <__gethex+0x9e>
 800f43a:	464e      	mov	r6, r9
 800f43c:	462f      	mov	r7, r5
 800f43e:	2501      	movs	r5, #1
 800f440:	e7c3      	b.n	800f3ca <__gethex+0x9e>
 800f442:	2400      	movs	r4, #0
 800f444:	1cb1      	adds	r1, r6, #2
 800f446:	e7cc      	b.n	800f3e2 <__gethex+0xb6>
 800f448:	2401      	movs	r4, #1
 800f44a:	e7fb      	b.n	800f444 <__gethex+0x118>
 800f44c:	fb03 0002 	mla	r0, r3, r2, r0
 800f450:	e7ce      	b.n	800f3f0 <__gethex+0xc4>
 800f452:	4631      	mov	r1, r6
 800f454:	e7de      	b.n	800f414 <__gethex+0xe8>
 800f456:	eba6 0309 	sub.w	r3, r6, r9
 800f45a:	3b01      	subs	r3, #1
 800f45c:	4629      	mov	r1, r5
 800f45e:	2b07      	cmp	r3, #7
 800f460:	dc0a      	bgt.n	800f478 <__gethex+0x14c>
 800f462:	9801      	ldr	r0, [sp, #4]
 800f464:	f7fd ff84 	bl	800d370 <_Balloc>
 800f468:	4604      	mov	r4, r0
 800f46a:	b940      	cbnz	r0, 800f47e <__gethex+0x152>
 800f46c:	4b5c      	ldr	r3, [pc, #368]	@ (800f5e0 <__gethex+0x2b4>)
 800f46e:	4602      	mov	r2, r0
 800f470:	21e4      	movs	r1, #228	@ 0xe4
 800f472:	485c      	ldr	r0, [pc, #368]	@ (800f5e4 <__gethex+0x2b8>)
 800f474:	f7ff fec0 	bl	800f1f8 <__assert_func>
 800f478:	3101      	adds	r1, #1
 800f47a:	105b      	asrs	r3, r3, #1
 800f47c:	e7ef      	b.n	800f45e <__gethex+0x132>
 800f47e:	f100 0a14 	add.w	sl, r0, #20
 800f482:	2300      	movs	r3, #0
 800f484:	4655      	mov	r5, sl
 800f486:	469b      	mov	fp, r3
 800f488:	45b1      	cmp	r9, r6
 800f48a:	d337      	bcc.n	800f4fc <__gethex+0x1d0>
 800f48c:	f845 bb04 	str.w	fp, [r5], #4
 800f490:	eba5 050a 	sub.w	r5, r5, sl
 800f494:	10ad      	asrs	r5, r5, #2
 800f496:	6125      	str	r5, [r4, #16]
 800f498:	4658      	mov	r0, fp
 800f49a:	f7fe f85b 	bl	800d554 <__hi0bits>
 800f49e:	016d      	lsls	r5, r5, #5
 800f4a0:	f8d8 6000 	ldr.w	r6, [r8]
 800f4a4:	1a2d      	subs	r5, r5, r0
 800f4a6:	42b5      	cmp	r5, r6
 800f4a8:	dd54      	ble.n	800f554 <__gethex+0x228>
 800f4aa:	1bad      	subs	r5, r5, r6
 800f4ac:	4629      	mov	r1, r5
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f7fe fbef 	bl	800dc92 <__any_on>
 800f4b4:	4681      	mov	r9, r0
 800f4b6:	b178      	cbz	r0, 800f4d8 <__gethex+0x1ac>
 800f4b8:	1e6b      	subs	r3, r5, #1
 800f4ba:	1159      	asrs	r1, r3, #5
 800f4bc:	f003 021f 	and.w	r2, r3, #31
 800f4c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f4c4:	f04f 0901 	mov.w	r9, #1
 800f4c8:	fa09 f202 	lsl.w	r2, r9, r2
 800f4cc:	420a      	tst	r2, r1
 800f4ce:	d003      	beq.n	800f4d8 <__gethex+0x1ac>
 800f4d0:	454b      	cmp	r3, r9
 800f4d2:	dc36      	bgt.n	800f542 <__gethex+0x216>
 800f4d4:	f04f 0902 	mov.w	r9, #2
 800f4d8:	4629      	mov	r1, r5
 800f4da:	4620      	mov	r0, r4
 800f4dc:	f7ff febe 	bl	800f25c <rshift>
 800f4e0:	442f      	add	r7, r5
 800f4e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4e6:	42bb      	cmp	r3, r7
 800f4e8:	da42      	bge.n	800f570 <__gethex+0x244>
 800f4ea:	9801      	ldr	r0, [sp, #4]
 800f4ec:	4621      	mov	r1, r4
 800f4ee:	f7fd ff7f 	bl	800d3f0 <_Bfree>
 800f4f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	6013      	str	r3, [r2, #0]
 800f4f8:	25a3      	movs	r5, #163	@ 0xa3
 800f4fa:	e793      	b.n	800f424 <__gethex+0xf8>
 800f4fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f500:	2a2e      	cmp	r2, #46	@ 0x2e
 800f502:	d012      	beq.n	800f52a <__gethex+0x1fe>
 800f504:	2b20      	cmp	r3, #32
 800f506:	d104      	bne.n	800f512 <__gethex+0x1e6>
 800f508:	f845 bb04 	str.w	fp, [r5], #4
 800f50c:	f04f 0b00 	mov.w	fp, #0
 800f510:	465b      	mov	r3, fp
 800f512:	7830      	ldrb	r0, [r6, #0]
 800f514:	9303      	str	r3, [sp, #12]
 800f516:	f7ff fef3 	bl	800f300 <__hexdig_fun>
 800f51a:	9b03      	ldr	r3, [sp, #12]
 800f51c:	f000 000f 	and.w	r0, r0, #15
 800f520:	4098      	lsls	r0, r3
 800f522:	ea4b 0b00 	orr.w	fp, fp, r0
 800f526:	3304      	adds	r3, #4
 800f528:	e7ae      	b.n	800f488 <__gethex+0x15c>
 800f52a:	45b1      	cmp	r9, r6
 800f52c:	d8ea      	bhi.n	800f504 <__gethex+0x1d8>
 800f52e:	492b      	ldr	r1, [pc, #172]	@ (800f5dc <__gethex+0x2b0>)
 800f530:	9303      	str	r3, [sp, #12]
 800f532:	2201      	movs	r2, #1
 800f534:	4630      	mov	r0, r6
 800f536:	f7ff fe13 	bl	800f160 <strncmp>
 800f53a:	9b03      	ldr	r3, [sp, #12]
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d1e1      	bne.n	800f504 <__gethex+0x1d8>
 800f540:	e7a2      	b.n	800f488 <__gethex+0x15c>
 800f542:	1ea9      	subs	r1, r5, #2
 800f544:	4620      	mov	r0, r4
 800f546:	f7fe fba4 	bl	800dc92 <__any_on>
 800f54a:	2800      	cmp	r0, #0
 800f54c:	d0c2      	beq.n	800f4d4 <__gethex+0x1a8>
 800f54e:	f04f 0903 	mov.w	r9, #3
 800f552:	e7c1      	b.n	800f4d8 <__gethex+0x1ac>
 800f554:	da09      	bge.n	800f56a <__gethex+0x23e>
 800f556:	1b75      	subs	r5, r6, r5
 800f558:	4621      	mov	r1, r4
 800f55a:	9801      	ldr	r0, [sp, #4]
 800f55c:	462a      	mov	r2, r5
 800f55e:	f7fe f95f 	bl	800d820 <__lshift>
 800f562:	1b7f      	subs	r7, r7, r5
 800f564:	4604      	mov	r4, r0
 800f566:	f100 0a14 	add.w	sl, r0, #20
 800f56a:	f04f 0900 	mov.w	r9, #0
 800f56e:	e7b8      	b.n	800f4e2 <__gethex+0x1b6>
 800f570:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f574:	42bd      	cmp	r5, r7
 800f576:	dd6f      	ble.n	800f658 <__gethex+0x32c>
 800f578:	1bed      	subs	r5, r5, r7
 800f57a:	42ae      	cmp	r6, r5
 800f57c:	dc34      	bgt.n	800f5e8 <__gethex+0x2bc>
 800f57e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f582:	2b02      	cmp	r3, #2
 800f584:	d022      	beq.n	800f5cc <__gethex+0x2a0>
 800f586:	2b03      	cmp	r3, #3
 800f588:	d024      	beq.n	800f5d4 <__gethex+0x2a8>
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d115      	bne.n	800f5ba <__gethex+0x28e>
 800f58e:	42ae      	cmp	r6, r5
 800f590:	d113      	bne.n	800f5ba <__gethex+0x28e>
 800f592:	2e01      	cmp	r6, #1
 800f594:	d10b      	bne.n	800f5ae <__gethex+0x282>
 800f596:	9a02      	ldr	r2, [sp, #8]
 800f598:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f59c:	6013      	str	r3, [r2, #0]
 800f59e:	2301      	movs	r3, #1
 800f5a0:	6123      	str	r3, [r4, #16]
 800f5a2:	f8ca 3000 	str.w	r3, [sl]
 800f5a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5a8:	2562      	movs	r5, #98	@ 0x62
 800f5aa:	601c      	str	r4, [r3, #0]
 800f5ac:	e73a      	b.n	800f424 <__gethex+0xf8>
 800f5ae:	1e71      	subs	r1, r6, #1
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f7fe fb6e 	bl	800dc92 <__any_on>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d1ed      	bne.n	800f596 <__gethex+0x26a>
 800f5ba:	9801      	ldr	r0, [sp, #4]
 800f5bc:	4621      	mov	r1, r4
 800f5be:	f7fd ff17 	bl	800d3f0 <_Bfree>
 800f5c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	6013      	str	r3, [r2, #0]
 800f5c8:	2550      	movs	r5, #80	@ 0x50
 800f5ca:	e72b      	b.n	800f424 <__gethex+0xf8>
 800f5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d1f3      	bne.n	800f5ba <__gethex+0x28e>
 800f5d2:	e7e0      	b.n	800f596 <__gethex+0x26a>
 800f5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1dd      	bne.n	800f596 <__gethex+0x26a>
 800f5da:	e7ee      	b.n	800f5ba <__gethex+0x28e>
 800f5dc:	08010010 	.word	0x08010010
 800f5e0:	0800fea5 	.word	0x0800fea5
 800f5e4:	080101be 	.word	0x080101be
 800f5e8:	1e6f      	subs	r7, r5, #1
 800f5ea:	f1b9 0f00 	cmp.w	r9, #0
 800f5ee:	d130      	bne.n	800f652 <__gethex+0x326>
 800f5f0:	b127      	cbz	r7, 800f5fc <__gethex+0x2d0>
 800f5f2:	4639      	mov	r1, r7
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f7fe fb4c 	bl	800dc92 <__any_on>
 800f5fa:	4681      	mov	r9, r0
 800f5fc:	117a      	asrs	r2, r7, #5
 800f5fe:	2301      	movs	r3, #1
 800f600:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f604:	f007 071f 	and.w	r7, r7, #31
 800f608:	40bb      	lsls	r3, r7
 800f60a:	4213      	tst	r3, r2
 800f60c:	4629      	mov	r1, r5
 800f60e:	4620      	mov	r0, r4
 800f610:	bf18      	it	ne
 800f612:	f049 0902 	orrne.w	r9, r9, #2
 800f616:	f7ff fe21 	bl	800f25c <rshift>
 800f61a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f61e:	1b76      	subs	r6, r6, r5
 800f620:	2502      	movs	r5, #2
 800f622:	f1b9 0f00 	cmp.w	r9, #0
 800f626:	d047      	beq.n	800f6b8 <__gethex+0x38c>
 800f628:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	d015      	beq.n	800f65c <__gethex+0x330>
 800f630:	2b03      	cmp	r3, #3
 800f632:	d017      	beq.n	800f664 <__gethex+0x338>
 800f634:	2b01      	cmp	r3, #1
 800f636:	d109      	bne.n	800f64c <__gethex+0x320>
 800f638:	f019 0f02 	tst.w	r9, #2
 800f63c:	d006      	beq.n	800f64c <__gethex+0x320>
 800f63e:	f8da 3000 	ldr.w	r3, [sl]
 800f642:	ea49 0903 	orr.w	r9, r9, r3
 800f646:	f019 0f01 	tst.w	r9, #1
 800f64a:	d10e      	bne.n	800f66a <__gethex+0x33e>
 800f64c:	f045 0510 	orr.w	r5, r5, #16
 800f650:	e032      	b.n	800f6b8 <__gethex+0x38c>
 800f652:	f04f 0901 	mov.w	r9, #1
 800f656:	e7d1      	b.n	800f5fc <__gethex+0x2d0>
 800f658:	2501      	movs	r5, #1
 800f65a:	e7e2      	b.n	800f622 <__gethex+0x2f6>
 800f65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f65e:	f1c3 0301 	rsb	r3, r3, #1
 800f662:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f666:	2b00      	cmp	r3, #0
 800f668:	d0f0      	beq.n	800f64c <__gethex+0x320>
 800f66a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f66e:	f104 0314 	add.w	r3, r4, #20
 800f672:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f676:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f67a:	f04f 0c00 	mov.w	ip, #0
 800f67e:	4618      	mov	r0, r3
 800f680:	f853 2b04 	ldr.w	r2, [r3], #4
 800f684:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800f688:	d01b      	beq.n	800f6c2 <__gethex+0x396>
 800f68a:	3201      	adds	r2, #1
 800f68c:	6002      	str	r2, [r0, #0]
 800f68e:	2d02      	cmp	r5, #2
 800f690:	f104 0314 	add.w	r3, r4, #20
 800f694:	d13c      	bne.n	800f710 <__gethex+0x3e4>
 800f696:	f8d8 2000 	ldr.w	r2, [r8]
 800f69a:	3a01      	subs	r2, #1
 800f69c:	42b2      	cmp	r2, r6
 800f69e:	d109      	bne.n	800f6b4 <__gethex+0x388>
 800f6a0:	1171      	asrs	r1, r6, #5
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f6a8:	f006 061f 	and.w	r6, r6, #31
 800f6ac:	fa02 f606 	lsl.w	r6, r2, r6
 800f6b0:	421e      	tst	r6, r3
 800f6b2:	d13a      	bne.n	800f72a <__gethex+0x3fe>
 800f6b4:	f045 0520 	orr.w	r5, r5, #32
 800f6b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6ba:	601c      	str	r4, [r3, #0]
 800f6bc:	9b02      	ldr	r3, [sp, #8]
 800f6be:	601f      	str	r7, [r3, #0]
 800f6c0:	e6b0      	b.n	800f424 <__gethex+0xf8>
 800f6c2:	4299      	cmp	r1, r3
 800f6c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f6c8:	d8d9      	bhi.n	800f67e <__gethex+0x352>
 800f6ca:	68a3      	ldr	r3, [r4, #8]
 800f6cc:	459b      	cmp	fp, r3
 800f6ce:	db17      	blt.n	800f700 <__gethex+0x3d4>
 800f6d0:	6861      	ldr	r1, [r4, #4]
 800f6d2:	9801      	ldr	r0, [sp, #4]
 800f6d4:	3101      	adds	r1, #1
 800f6d6:	f7fd fe4b 	bl	800d370 <_Balloc>
 800f6da:	4681      	mov	r9, r0
 800f6dc:	b918      	cbnz	r0, 800f6e6 <__gethex+0x3ba>
 800f6de:	4b1a      	ldr	r3, [pc, #104]	@ (800f748 <__gethex+0x41c>)
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	2184      	movs	r1, #132	@ 0x84
 800f6e4:	e6c5      	b.n	800f472 <__gethex+0x146>
 800f6e6:	6922      	ldr	r2, [r4, #16]
 800f6e8:	3202      	adds	r2, #2
 800f6ea:	f104 010c 	add.w	r1, r4, #12
 800f6ee:	0092      	lsls	r2, r2, #2
 800f6f0:	300c      	adds	r0, #12
 800f6f2:	f7fc feda 	bl	800c4aa <memcpy>
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	9801      	ldr	r0, [sp, #4]
 800f6fa:	f7fd fe79 	bl	800d3f0 <_Bfree>
 800f6fe:	464c      	mov	r4, r9
 800f700:	6923      	ldr	r3, [r4, #16]
 800f702:	1c5a      	adds	r2, r3, #1
 800f704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f708:	6122      	str	r2, [r4, #16]
 800f70a:	2201      	movs	r2, #1
 800f70c:	615a      	str	r2, [r3, #20]
 800f70e:	e7be      	b.n	800f68e <__gethex+0x362>
 800f710:	6922      	ldr	r2, [r4, #16]
 800f712:	455a      	cmp	r2, fp
 800f714:	dd0b      	ble.n	800f72e <__gethex+0x402>
 800f716:	2101      	movs	r1, #1
 800f718:	4620      	mov	r0, r4
 800f71a:	f7ff fd9f 	bl	800f25c <rshift>
 800f71e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f722:	3701      	adds	r7, #1
 800f724:	42bb      	cmp	r3, r7
 800f726:	f6ff aee0 	blt.w	800f4ea <__gethex+0x1be>
 800f72a:	2501      	movs	r5, #1
 800f72c:	e7c2      	b.n	800f6b4 <__gethex+0x388>
 800f72e:	f016 061f 	ands.w	r6, r6, #31
 800f732:	d0fa      	beq.n	800f72a <__gethex+0x3fe>
 800f734:	4453      	add	r3, sl
 800f736:	f1c6 0620 	rsb	r6, r6, #32
 800f73a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f73e:	f7fd ff09 	bl	800d554 <__hi0bits>
 800f742:	42b0      	cmp	r0, r6
 800f744:	dbe7      	blt.n	800f716 <__gethex+0x3ea>
 800f746:	e7f0      	b.n	800f72a <__gethex+0x3fe>
 800f748:	0800fea5 	.word	0x0800fea5

0800f74c <L_shift>:
 800f74c:	f1c2 0208 	rsb	r2, r2, #8
 800f750:	0092      	lsls	r2, r2, #2
 800f752:	b570      	push	{r4, r5, r6, lr}
 800f754:	f1c2 0620 	rsb	r6, r2, #32
 800f758:	6843      	ldr	r3, [r0, #4]
 800f75a:	6804      	ldr	r4, [r0, #0]
 800f75c:	fa03 f506 	lsl.w	r5, r3, r6
 800f760:	432c      	orrs	r4, r5
 800f762:	40d3      	lsrs	r3, r2
 800f764:	6004      	str	r4, [r0, #0]
 800f766:	f840 3f04 	str.w	r3, [r0, #4]!
 800f76a:	4288      	cmp	r0, r1
 800f76c:	d3f4      	bcc.n	800f758 <L_shift+0xc>
 800f76e:	bd70      	pop	{r4, r5, r6, pc}

0800f770 <__match>:
 800f770:	b530      	push	{r4, r5, lr}
 800f772:	6803      	ldr	r3, [r0, #0]
 800f774:	3301      	adds	r3, #1
 800f776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f77a:	b914      	cbnz	r4, 800f782 <__match+0x12>
 800f77c:	6003      	str	r3, [r0, #0]
 800f77e:	2001      	movs	r0, #1
 800f780:	bd30      	pop	{r4, r5, pc}
 800f782:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f786:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f78a:	2d19      	cmp	r5, #25
 800f78c:	bf98      	it	ls
 800f78e:	3220      	addls	r2, #32
 800f790:	42a2      	cmp	r2, r4
 800f792:	d0f0      	beq.n	800f776 <__match+0x6>
 800f794:	2000      	movs	r0, #0
 800f796:	e7f3      	b.n	800f780 <__match+0x10>

0800f798 <__hexnan>:
 800f798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f79c:	680b      	ldr	r3, [r1, #0]
 800f79e:	6801      	ldr	r1, [r0, #0]
 800f7a0:	115e      	asrs	r6, r3, #5
 800f7a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f7a6:	f013 031f 	ands.w	r3, r3, #31
 800f7aa:	b087      	sub	sp, #28
 800f7ac:	bf18      	it	ne
 800f7ae:	3604      	addne	r6, #4
 800f7b0:	2500      	movs	r5, #0
 800f7b2:	1f37      	subs	r7, r6, #4
 800f7b4:	4682      	mov	sl, r0
 800f7b6:	4690      	mov	r8, r2
 800f7b8:	9301      	str	r3, [sp, #4]
 800f7ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800f7be:	46b9      	mov	r9, r7
 800f7c0:	463c      	mov	r4, r7
 800f7c2:	9502      	str	r5, [sp, #8]
 800f7c4:	46ab      	mov	fp, r5
 800f7c6:	784a      	ldrb	r2, [r1, #1]
 800f7c8:	1c4b      	adds	r3, r1, #1
 800f7ca:	9303      	str	r3, [sp, #12]
 800f7cc:	b342      	cbz	r2, 800f820 <__hexnan+0x88>
 800f7ce:	4610      	mov	r0, r2
 800f7d0:	9105      	str	r1, [sp, #20]
 800f7d2:	9204      	str	r2, [sp, #16]
 800f7d4:	f7ff fd94 	bl	800f300 <__hexdig_fun>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d151      	bne.n	800f880 <__hexnan+0xe8>
 800f7dc:	9a04      	ldr	r2, [sp, #16]
 800f7de:	9905      	ldr	r1, [sp, #20]
 800f7e0:	2a20      	cmp	r2, #32
 800f7e2:	d818      	bhi.n	800f816 <__hexnan+0x7e>
 800f7e4:	9b02      	ldr	r3, [sp, #8]
 800f7e6:	459b      	cmp	fp, r3
 800f7e8:	dd13      	ble.n	800f812 <__hexnan+0x7a>
 800f7ea:	454c      	cmp	r4, r9
 800f7ec:	d206      	bcs.n	800f7fc <__hexnan+0x64>
 800f7ee:	2d07      	cmp	r5, #7
 800f7f0:	dc04      	bgt.n	800f7fc <__hexnan+0x64>
 800f7f2:	462a      	mov	r2, r5
 800f7f4:	4649      	mov	r1, r9
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f7ff ffa8 	bl	800f74c <L_shift>
 800f7fc:	4544      	cmp	r4, r8
 800f7fe:	d952      	bls.n	800f8a6 <__hexnan+0x10e>
 800f800:	2300      	movs	r3, #0
 800f802:	f1a4 0904 	sub.w	r9, r4, #4
 800f806:	f844 3c04 	str.w	r3, [r4, #-4]
 800f80a:	f8cd b008 	str.w	fp, [sp, #8]
 800f80e:	464c      	mov	r4, r9
 800f810:	461d      	mov	r5, r3
 800f812:	9903      	ldr	r1, [sp, #12]
 800f814:	e7d7      	b.n	800f7c6 <__hexnan+0x2e>
 800f816:	2a29      	cmp	r2, #41	@ 0x29
 800f818:	d157      	bne.n	800f8ca <__hexnan+0x132>
 800f81a:	3102      	adds	r1, #2
 800f81c:	f8ca 1000 	str.w	r1, [sl]
 800f820:	f1bb 0f00 	cmp.w	fp, #0
 800f824:	d051      	beq.n	800f8ca <__hexnan+0x132>
 800f826:	454c      	cmp	r4, r9
 800f828:	d206      	bcs.n	800f838 <__hexnan+0xa0>
 800f82a:	2d07      	cmp	r5, #7
 800f82c:	dc04      	bgt.n	800f838 <__hexnan+0xa0>
 800f82e:	462a      	mov	r2, r5
 800f830:	4649      	mov	r1, r9
 800f832:	4620      	mov	r0, r4
 800f834:	f7ff ff8a 	bl	800f74c <L_shift>
 800f838:	4544      	cmp	r4, r8
 800f83a:	d936      	bls.n	800f8aa <__hexnan+0x112>
 800f83c:	f1a8 0204 	sub.w	r2, r8, #4
 800f840:	4623      	mov	r3, r4
 800f842:	f853 1b04 	ldr.w	r1, [r3], #4
 800f846:	f842 1f04 	str.w	r1, [r2, #4]!
 800f84a:	429f      	cmp	r7, r3
 800f84c:	d2f9      	bcs.n	800f842 <__hexnan+0xaa>
 800f84e:	1b3b      	subs	r3, r7, r4
 800f850:	f023 0303 	bic.w	r3, r3, #3
 800f854:	3304      	adds	r3, #4
 800f856:	3401      	adds	r4, #1
 800f858:	3e03      	subs	r6, #3
 800f85a:	42b4      	cmp	r4, r6
 800f85c:	bf88      	it	hi
 800f85e:	2304      	movhi	r3, #4
 800f860:	4443      	add	r3, r8
 800f862:	2200      	movs	r2, #0
 800f864:	f843 2b04 	str.w	r2, [r3], #4
 800f868:	429f      	cmp	r7, r3
 800f86a:	d2fb      	bcs.n	800f864 <__hexnan+0xcc>
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	b91b      	cbnz	r3, 800f878 <__hexnan+0xe0>
 800f870:	4547      	cmp	r7, r8
 800f872:	d128      	bne.n	800f8c6 <__hexnan+0x12e>
 800f874:	2301      	movs	r3, #1
 800f876:	603b      	str	r3, [r7, #0]
 800f878:	2005      	movs	r0, #5
 800f87a:	b007      	add	sp, #28
 800f87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f880:	3501      	adds	r5, #1
 800f882:	2d08      	cmp	r5, #8
 800f884:	f10b 0b01 	add.w	fp, fp, #1
 800f888:	dd06      	ble.n	800f898 <__hexnan+0x100>
 800f88a:	4544      	cmp	r4, r8
 800f88c:	d9c1      	bls.n	800f812 <__hexnan+0x7a>
 800f88e:	2300      	movs	r3, #0
 800f890:	f844 3c04 	str.w	r3, [r4, #-4]
 800f894:	2501      	movs	r5, #1
 800f896:	3c04      	subs	r4, #4
 800f898:	6822      	ldr	r2, [r4, #0]
 800f89a:	f000 000f 	and.w	r0, r0, #15
 800f89e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f8a2:	6020      	str	r0, [r4, #0]
 800f8a4:	e7b5      	b.n	800f812 <__hexnan+0x7a>
 800f8a6:	2508      	movs	r5, #8
 800f8a8:	e7b3      	b.n	800f812 <__hexnan+0x7a>
 800f8aa:	9b01      	ldr	r3, [sp, #4]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d0dd      	beq.n	800f86c <__hexnan+0xd4>
 800f8b0:	f1c3 0320 	rsb	r3, r3, #32
 800f8b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f8b8:	40da      	lsrs	r2, r3
 800f8ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f8be:	4013      	ands	r3, r2
 800f8c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f8c4:	e7d2      	b.n	800f86c <__hexnan+0xd4>
 800f8c6:	3f04      	subs	r7, #4
 800f8c8:	e7d0      	b.n	800f86c <__hexnan+0xd4>
 800f8ca:	2004      	movs	r0, #4
 800f8cc:	e7d5      	b.n	800f87a <__hexnan+0xe2>

0800f8ce <__ascii_mbtowc>:
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	b901      	cbnz	r1, 800f8d4 <__ascii_mbtowc+0x6>
 800f8d2:	a901      	add	r1, sp, #4
 800f8d4:	b142      	cbz	r2, 800f8e8 <__ascii_mbtowc+0x1a>
 800f8d6:	b14b      	cbz	r3, 800f8ec <__ascii_mbtowc+0x1e>
 800f8d8:	7813      	ldrb	r3, [r2, #0]
 800f8da:	600b      	str	r3, [r1, #0]
 800f8dc:	7812      	ldrb	r2, [r2, #0]
 800f8de:	1e10      	subs	r0, r2, #0
 800f8e0:	bf18      	it	ne
 800f8e2:	2001      	movne	r0, #1
 800f8e4:	b002      	add	sp, #8
 800f8e6:	4770      	bx	lr
 800f8e8:	4610      	mov	r0, r2
 800f8ea:	e7fb      	b.n	800f8e4 <__ascii_mbtowc+0x16>
 800f8ec:	f06f 0001 	mvn.w	r0, #1
 800f8f0:	e7f8      	b.n	800f8e4 <__ascii_mbtowc+0x16>

0800f8f2 <_realloc_r>:
 800f8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	4615      	mov	r5, r2
 800f8fa:	460c      	mov	r4, r1
 800f8fc:	b921      	cbnz	r1, 800f908 <_realloc_r+0x16>
 800f8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f902:	4611      	mov	r1, r2
 800f904:	f7fd bca8 	b.w	800d258 <_malloc_r>
 800f908:	b92a      	cbnz	r2, 800f916 <_realloc_r+0x24>
 800f90a:	f7fd fc31 	bl	800d170 <_free_r>
 800f90e:	2400      	movs	r4, #0
 800f910:	4620      	mov	r0, r4
 800f912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f916:	f000 f840 	bl	800f99a <_malloc_usable_size_r>
 800f91a:	4285      	cmp	r5, r0
 800f91c:	4606      	mov	r6, r0
 800f91e:	d802      	bhi.n	800f926 <_realloc_r+0x34>
 800f920:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f924:	d8f4      	bhi.n	800f910 <_realloc_r+0x1e>
 800f926:	4629      	mov	r1, r5
 800f928:	4640      	mov	r0, r8
 800f92a:	f7fd fc95 	bl	800d258 <_malloc_r>
 800f92e:	4607      	mov	r7, r0
 800f930:	2800      	cmp	r0, #0
 800f932:	d0ec      	beq.n	800f90e <_realloc_r+0x1c>
 800f934:	42b5      	cmp	r5, r6
 800f936:	462a      	mov	r2, r5
 800f938:	4621      	mov	r1, r4
 800f93a:	bf28      	it	cs
 800f93c:	4632      	movcs	r2, r6
 800f93e:	f7fc fdb4 	bl	800c4aa <memcpy>
 800f942:	4621      	mov	r1, r4
 800f944:	4640      	mov	r0, r8
 800f946:	f7fd fc13 	bl	800d170 <_free_r>
 800f94a:	463c      	mov	r4, r7
 800f94c:	e7e0      	b.n	800f910 <_realloc_r+0x1e>

0800f94e <__ascii_wctomb>:
 800f94e:	4603      	mov	r3, r0
 800f950:	4608      	mov	r0, r1
 800f952:	b141      	cbz	r1, 800f966 <__ascii_wctomb+0x18>
 800f954:	2aff      	cmp	r2, #255	@ 0xff
 800f956:	d904      	bls.n	800f962 <__ascii_wctomb+0x14>
 800f958:	228a      	movs	r2, #138	@ 0x8a
 800f95a:	601a      	str	r2, [r3, #0]
 800f95c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f960:	4770      	bx	lr
 800f962:	700a      	strb	r2, [r1, #0]
 800f964:	2001      	movs	r0, #1
 800f966:	4770      	bx	lr

0800f968 <fiprintf>:
 800f968:	b40e      	push	{r1, r2, r3}
 800f96a:	b503      	push	{r0, r1, lr}
 800f96c:	4601      	mov	r1, r0
 800f96e:	ab03      	add	r3, sp, #12
 800f970:	4805      	ldr	r0, [pc, #20]	@ (800f988 <fiprintf+0x20>)
 800f972:	f853 2b04 	ldr.w	r2, [r3], #4
 800f976:	6800      	ldr	r0, [r0, #0]
 800f978:	9301      	str	r3, [sp, #4]
 800f97a:	f7ff f9b1 	bl	800ece0 <_vfiprintf_r>
 800f97e:	b002      	add	sp, #8
 800f980:	f85d eb04 	ldr.w	lr, [sp], #4
 800f984:	b003      	add	sp, #12
 800f986:	4770      	bx	lr
 800f988:	2000001c 	.word	0x2000001c

0800f98c <abort>:
 800f98c:	b508      	push	{r3, lr}
 800f98e:	2006      	movs	r0, #6
 800f990:	f000 f834 	bl	800f9fc <raise>
 800f994:	2001      	movs	r0, #1
 800f996:	f7f2 f925 	bl	8001be4 <_exit>

0800f99a <_malloc_usable_size_r>:
 800f99a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f99e:	1f18      	subs	r0, r3, #4
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	bfbc      	itt	lt
 800f9a4:	580b      	ldrlt	r3, [r1, r0]
 800f9a6:	18c0      	addlt	r0, r0, r3
 800f9a8:	4770      	bx	lr

0800f9aa <_raise_r>:
 800f9aa:	291f      	cmp	r1, #31
 800f9ac:	b538      	push	{r3, r4, r5, lr}
 800f9ae:	4605      	mov	r5, r0
 800f9b0:	460c      	mov	r4, r1
 800f9b2:	d904      	bls.n	800f9be <_raise_r+0x14>
 800f9b4:	2316      	movs	r3, #22
 800f9b6:	6003      	str	r3, [r0, #0]
 800f9b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9bc:	bd38      	pop	{r3, r4, r5, pc}
 800f9be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9c0:	b112      	cbz	r2, 800f9c8 <_raise_r+0x1e>
 800f9c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9c6:	b94b      	cbnz	r3, 800f9dc <_raise_r+0x32>
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	f000 f831 	bl	800fa30 <_getpid_r>
 800f9ce:	4622      	mov	r2, r4
 800f9d0:	4601      	mov	r1, r0
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9d8:	f000 b818 	b.w	800fa0c <_kill_r>
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d00a      	beq.n	800f9f6 <_raise_r+0x4c>
 800f9e0:	1c59      	adds	r1, r3, #1
 800f9e2:	d103      	bne.n	800f9ec <_raise_r+0x42>
 800f9e4:	2316      	movs	r3, #22
 800f9e6:	6003      	str	r3, [r0, #0]
 800f9e8:	2001      	movs	r0, #1
 800f9ea:	e7e7      	b.n	800f9bc <_raise_r+0x12>
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	4798      	blx	r3
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	e7e0      	b.n	800f9bc <_raise_r+0x12>
	...

0800f9fc <raise>:
 800f9fc:	4b02      	ldr	r3, [pc, #8]	@ (800fa08 <raise+0xc>)
 800f9fe:	4601      	mov	r1, r0
 800fa00:	6818      	ldr	r0, [r3, #0]
 800fa02:	f7ff bfd2 	b.w	800f9aa <_raise_r>
 800fa06:	bf00      	nop
 800fa08:	2000001c 	.word	0x2000001c

0800fa0c <_kill_r>:
 800fa0c:	b538      	push	{r3, r4, r5, lr}
 800fa0e:	4d07      	ldr	r5, [pc, #28]	@ (800fa2c <_kill_r+0x20>)
 800fa10:	2300      	movs	r3, #0
 800fa12:	4604      	mov	r4, r0
 800fa14:	4608      	mov	r0, r1
 800fa16:	4611      	mov	r1, r2
 800fa18:	602b      	str	r3, [r5, #0]
 800fa1a:	f7f2 f8d3 	bl	8001bc4 <_kill>
 800fa1e:	1c43      	adds	r3, r0, #1
 800fa20:	d102      	bne.n	800fa28 <_kill_r+0x1c>
 800fa22:	682b      	ldr	r3, [r5, #0]
 800fa24:	b103      	cbz	r3, 800fa28 <_kill_r+0x1c>
 800fa26:	6023      	str	r3, [r4, #0]
 800fa28:	bd38      	pop	{r3, r4, r5, pc}
 800fa2a:	bf00      	nop
 800fa2c:	2000147c 	.word	0x2000147c

0800fa30 <_getpid_r>:
 800fa30:	f7f2 b8c0 	b.w	8001bb4 <_getpid>

0800fa34 <_init>:
 800fa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa36:	bf00      	nop
 800fa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa3a:	bc08      	pop	{r3}
 800fa3c:	469e      	mov	lr, r3
 800fa3e:	4770      	bx	lr

0800fa40 <_fini>:
 800fa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa42:	bf00      	nop
 800fa44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa46:	bc08      	pop	{r3}
 800fa48:	469e      	mov	lr, r3
 800fa4a:	4770      	bx	lr
