
Projet_V-NOM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e078  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  0800e258  0800e258  0000f258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebf0  0800ebf0  00011118  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebf0  0800ebf0  0000fbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebf8  0800ebf8  00011118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebf8  0800ebf8  0000fbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ebfc  0800ebfc  0000fbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001118  20000000  0800ec00  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  20001118  0800fd18  00011118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019bc  0800fd18  000119bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccd0  00000000  00000000  00011148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c26  00000000  00000000  0002de18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00031a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001301  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d25  00000000  00000000  000345c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da9e  00000000  00000000  000582ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1c8c  00000000  00000000  00075d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157a18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e0c  00000000  00000000  00157a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0015f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001118 	.word	0x20001118
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e240 	.word	0x0800e240

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000111c 	.word	0x2000111c
 800021c:	0800e240 	.word	0x0800e240

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f009 fc2d 	bl	800a8ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f002 f8e9 	bl	8003294 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fa5d 	bl	8001586 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f003 f9ee 	bl	80044b8 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fa50 	bl	8001586 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f002 fc20 	bl	8003948 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 fa3a 	bl	8001586 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20001134 	.word	0x20001134
 8001120:	0c900008 	.word	0x0c900008

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f009 fbb1 	bl	800a8ac <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d134      	bne.n	80011be <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f004 fb97 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 fa09 	bl	8001586 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ToF2_Pin|ToF1_Pin;
 80011a4:	2305      	movs	r3, #5
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ba:	f003 fbf1 	bl	80049a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3768      	adds	r7, #104	@ 0x68
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b42      	ldr	r3, [pc, #264]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a41      	ldr	r2, [pc, #260]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fa:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <MX_GPIO_Init+0x120>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	4a3b      	ldr	r2, [pc, #236]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001206:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	4a35      	ldr	r2, [pc, #212]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121e:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <MX_GPIO_Init+0x120>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a2f      	ldr	r2, [pc, #188]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <MX_GPIO_Init+0x120>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8001248:	4829      	ldr	r0, [pc, #164]	@ (80012f0 <MX_GPIO_Init+0x124>)
 800124a:	f003 fd2b 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2103      	movs	r1, #3
 8001252:	4828      	ldr	r0, [pc, #160]	@ (80012f4 <MX_GPIO_Init+0x128>)
 8001254:	f003 fd26 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4820      	ldr	r0, [pc, #128]	@ (80012f0 <MX_GPIO_Init+0x124>)
 800126e:	f003 fb97 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AG_INT1_Pin|AG_INT2_Pin;
 8001272:	2318      	movs	r3, #24
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001276:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128a:	f003 fb89 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin;
 800128e:	f44f 6341 	mov.w	r3, #3088	@ 0xc10
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4812      	ldr	r0, [pc, #72]	@ (80012f0 <MX_GPIO_Init+0x124>)
 80012a8:	f003 fb7a 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80012ac:	2303      	movs	r3, #3
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <MX_GPIO_Init+0x128>)
 80012c4:	f003 fb6c 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin;
 80012c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_MODE_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_GPIO_Init+0x128>)
 80012de:	f003 fb5f 	bl	80049a0 <HAL_GPIO_Init>

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000400 	.word	0x48000400

080012f8 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001300:	1d39      	adds	r1, r7, #4
 8001302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001306:	2201      	movs	r2, #1
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <__io_putchar+0x20>)
 800130a:	f006 f94c 	bl	80075a6 <HAL_UART_Transmit>

	return ch;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20001340 	.word	0x20001340

0800131c <HAL_UART_RxCpltCallback>:
 * @brief UART receive complete callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <HAL_UART_RxCpltCallback+0x2c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d107      	bne.n	800133e <HAL_UART_RxCpltCallback+0x22>
	{
		//printf("UART2: 0x%X\r\n", rxByte);
		YLIDARX2_UART_irq(&hYLIDAR);
 800132e:	4807      	ldr	r0, [pc, #28]	@ (800134c <HAL_UART_RxCpltCallback+0x30>)
 8001330:	f001 fc5c 	bl	8002bec <YLIDARX2_UART_irq>

		// Restart reception for the next byte
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	4906      	ldr	r1, [pc, #24]	@ (8001350 <HAL_UART_RxCpltCallback+0x34>)
 8001338:	4806      	ldr	r0, [pc, #24]	@ (8001354 <HAL_UART_RxCpltCallback+0x38>)
 800133a:	f006 f9c3 	bl	80076c4 <HAL_UART_Receive_IT>
	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40004400 	.word	0x40004400
 800134c:	200011a4 	.word	0x200011a4
 8001350:	200011a0 	.word	0x200011a0
 8001354:	200013d4 	.word	0x200013d4

08001358 <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1b      	ldr	r2, [pc, #108]	@ (80013d4 <HAL_UART_ErrorCallback+0x7c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d130      	bne.n	80013cc <HAL_UART_ErrorCallback+0x74>
	{
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f006 fd4e 	bl	8007e0c <HAL_UART_GetError>
 8001370:	4603      	mov	r3, r0
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_UART_ErrorCallback+0x28>
			printf("Parity Error!\r\n");
 800137a:	4817      	ldr	r0, [pc, #92]	@ (80013d8 <HAL_UART_ErrorCallback+0x80>)
 800137c:	f009 f97c 	bl	800a678 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f006 fd43 	bl	8007e0c <HAL_UART_GetError>
 8001386:	4603      	mov	r3, r0
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HAL_UART_ErrorCallback+0x3e>
			printf("Noise Error!\r\n");
 8001390:	4812      	ldr	r0, [pc, #72]	@ (80013dc <HAL_UART_ErrorCallback+0x84>)
 8001392:	f009 f971 	bl	800a678 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f006 fd38 	bl	8007e0c <HAL_UART_GetError>
 800139c:	4603      	mov	r3, r0
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <HAL_UART_ErrorCallback+0x54>
			printf("Framing Error!\r\n");
 80013a6:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <HAL_UART_ErrorCallback+0x88>)
 80013a8:	f009 f966 	bl	800a678 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f006 fd2d 	bl	8007e0c <HAL_UART_GetError>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_UART_ErrorCallback+0x6a>
			printf("Overrun Error!\r\n");
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <HAL_UART_ErrorCallback+0x8c>)
 80013be:	f009 f95b 	bl	800a678 <puts>

		// Restart UART reception after error
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80013c2:	2201      	movs	r2, #1
 80013c4:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <HAL_UART_ErrorCallback+0x90>)
 80013c6:	4809      	ldr	r0, [pc, #36]	@ (80013ec <HAL_UART_ErrorCallback+0x94>)
 80013c8:	f006 f97c 	bl	80076c4 <HAL_UART_Receive_IT>
	}
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40004400 	.word	0x40004400
 80013d8:	0800e258 	.word	0x0800e258
 80013dc:	0800e268 	.word	0x0800e268
 80013e0:	0800e278 	.word	0x0800e278
 80013e4:	0800e288 	.word	0x0800e288
 80013e8:	200011a0 	.word	0x200011a0
 80013ec:	200013d4 	.word	0x200013d4

080013f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013f4:	f001 fc64 	bl	8002cc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013f8:	f000 f87a 	bl	80014f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013fc:	f7ff fee6 	bl	80011cc <MX_GPIO_Init>
	MX_SPI1_Init();
 8001400:	f000 f8c8 	bl	8001594 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001404:	f000 fa7c 	bl	8001900 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001408:	f000 fb42 	bl	8001a90 <MX_TIM3_Init>
	MX_TIM4_Init();
 800140c:	f000 fb96 	bl	8001b3c <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8001410:	f000 fd22 	bl	8001e58 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001414:	f000 fcd4 	bl	8001dc0 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8001418:	f7ff fe0c 	bl	8001034 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n*** Waking up V-NOM ***\r\n");
 800141c:	4824      	ldr	r0, [pc, #144]	@ (80014b0 <main+0xc0>)
 800141e:	f009 f92b 	bl	800a678 <puts>
	printf("%s", jumbo_logo_msg);
 8001422:	4924      	ldr	r1, [pc, #144]	@ (80014b4 <main+0xc4>)
 8001424:	4824      	ldr	r0, [pc, #144]	@ (80014b8 <main+0xc8>)
 8001426:	f009 f8bf 	bl	800a5a8 <iprintf>

	// Motor initialization
	Motor_Init(&hMotors, &htim1);
 800142a:	4924      	ldr	r1, [pc, #144]	@ (80014bc <main+0xcc>)
 800142c:	4824      	ldr	r0, [pc, #144]	@ (80014c0 <main+0xd0>)
 800142e:	f000 ff95 	bl	800235c <Motor_Init>
	hMotors.mode_mot1 = FORWARD_MODE;
 8001432:	4b23      	ldr	r3, [pc, #140]	@ (80014c0 <main+0xd0>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
	hMotors.mode_mot2 = FORWARD_MODE;
 8001438:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <main+0xd0>)
 800143a:	2201      	movs	r2, #1
 800143c:	705a      	strb	r2, [r3, #1]
	Motor_SetMode(&hMotors);
 800143e:	4820      	ldr	r0, [pc, #128]	@ (80014c0 <main+0xd0>)
 8001440:	f000 ffdc 	bl	80023fc <Motor_SetMode>
	Motor_SetSpeed_percent(&hMotors, 90.0, 90.0);
 8001444:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80014c4 <main+0xd4>
 8001448:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80014c4 <main+0xd4>
 800144c:	481c      	ldr	r0, [pc, #112]	@ (80014c0 <main+0xd0>)
 800144e:	f001 f857 	bl	8002500 <Motor_SetSpeed_percent>

	/* YLIDAR X2 Initialization */
	printf("YLIDAR X2 Initialization...\r\n");
 8001452:	481d      	ldr	r0, [pc, #116]	@ (80014c8 <main+0xd8>)
 8001454:	f009 f910 	bl	800a678 <puts>
	hYLIDAR.uart_buffer = &rxByte;
 8001458:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <main+0xdc>)
 800145a:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <main+0xe0>)
 800145c:	601a      	str	r2, [r3, #0]
	// Start UART reception in interrupt mode (1 byte at a time)
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800145e:	2201      	movs	r2, #1
 8001460:	491b      	ldr	r1, [pc, #108]	@ (80014d0 <main+0xe0>)
 8001462:	481c      	ldr	r0, [pc, #112]	@ (80014d4 <main+0xe4>)
 8001464:	f006 f92e 	bl	80076c4 <HAL_UART_Receive_IT>
	printf("YLIDAR X2 Initialization Successful!\r\n");
 8001468:	481b      	ldr	r0, [pc, #108]	@ (80014d8 <main+0xe8>)
 800146a:	f009 f905 	bl	800a678 <puts>

	// ToF sensors Initialization
	printf("GP2Y0A41SK0F Initialization...\r\n");
 800146e:	481b      	ldr	r0, [pc, #108]	@ (80014dc <main+0xec>)
 8001470:	f009 f902 	bl	800a678 <puts>
	GP2Y0A41SK0F_Init(&hTof);
 8001474:	481a      	ldr	r0, [pc, #104]	@ (80014e0 <main+0xf0>)
 8001476:	f000 fe21 	bl	80020bc <GP2Y0A41SK0F_Init>
	printf("GP2Y0A41SK0F Initialization Successful!\r\n");
 800147a:	481a      	ldr	r0, [pc, #104]	@ (80014e4 <main+0xf4>)
 800147c:	f009 f8fc 	bl	800a678 <puts>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* ToF test */
		GP2Y0A41SK0F_get_distance(&hTof);
 8001480:	4817      	ldr	r0, [pc, #92]	@ (80014e0 <main+0xf0>)
 8001482:	f000 fed9 	bl	8002238 <GP2Y0A41SK0F_get_distance>
		printf("ToF1 distance: %d, ToF2 distance: %d", hTof.distance_tof1, hTof.distance_tof2);
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <main+0xf0>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	4a15      	ldr	r2, [pc, #84]	@ (80014e0 <main+0xf0>)
 800148c:	6992      	ldr	r2, [r2, #24]
 800148e:	4619      	mov	r1, r3
 8001490:	4815      	ldr	r0, [pc, #84]	@ (80014e8 <main+0xf8>)
 8001492:	f009 f889 	bl	800a5a8 <iprintf>
		/* Motors test */
		printf("Mot1 speed: %d, Mot2 speed: %d\r\n", hMotors.current_speed1, hMotors.current_speed2);
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <main+0xd0>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	4a09      	ldr	r2, [pc, #36]	@ (80014c0 <main+0xd0>)
 800149c:	6912      	ldr	r2, [r2, #16]
 800149e:	4619      	mov	r1, r3
 80014a0:	4812      	ldr	r0, [pc, #72]	@ (80014ec <main+0xfc>)
 80014a2:	f009 f881 	bl	800a5a8 <iprintf>
		Motor_UpdateSpeed(&hMotors);
 80014a6:	4806      	ldr	r0, [pc, #24]	@ (80014c0 <main+0xd0>)
 80014a8:	f001 f872 	bl	8002590 <Motor_UpdateSpeed>
		GP2Y0A41SK0F_get_distance(&hTof);
 80014ac:	bf00      	nop
 80014ae:	e7e7      	b.n	8001480 <main+0x90>
 80014b0:	0800e354 	.word	0x0800e354
 80014b4:	20000000 	.word	0x20000000
 80014b8:	0800e370 	.word	0x0800e370
 80014bc:	2000125c 	.word	0x2000125c
 80014c0:	200011b8 	.word	0x200011b8
 80014c4:	42b40000 	.word	0x42b40000
 80014c8:	0800e374 	.word	0x0800e374
 80014cc:	200011a4 	.word	0x200011a4
 80014d0:	200011a0 	.word	0x200011a0
 80014d4:	200013d4 	.word	0x200013d4
 80014d8:	0800e394 	.word	0x0800e394
 80014dc:	0800e3bc 	.word	0x0800e3bc
 80014e0:	200011d8 	.word	0x200011d8
 80014e4:	0800e3dc 	.word	0x0800e3dc
 80014e8:	0800e408 	.word	0x0800e408
 80014ec:	0800e430 	.word	0x0800e430

080014f0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	@ 0x50
 80014f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	2238      	movs	r2, #56	@ 0x38
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f009 f9d4 	bl	800a8ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001512:	2000      	movs	r0, #0
 8001514:	f003 fbde 	bl	8004cd4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001518:	2302      	movs	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001522:	2340      	movs	r3, #64	@ 0x40
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152a:	2302      	movs	r3, #2
 800152c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800152e:	2304      	movs	r3, #4
 8001530:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001532:	2355      	movs	r3, #85	@ 0x55
 8001534:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 0318 	add.w	r3, r7, #24
 8001546:	4618      	mov	r0, r3
 8001548:	f003 fc78 	bl	8004e3c <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001552:	f000 f818 	bl	8001586 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2303      	movs	r3, #3
 800155c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2104      	movs	r1, #4
 800156e:	4618      	mov	r0, r3
 8001570:	f003 ff76 	bl	8005460 <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800157a:	f000 f804 	bl	8001586 <Error_Handler>
	}
}
 800157e:	bf00      	nop
 8001580:	3750      	adds	r7, #80	@ 0x50
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158a:	b672      	cpsid	i
}
 800158c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800158e:	bf00      	nop
 8001590:	e7fd      	b.n	800158e <Error_Handler+0x8>
	...

08001594 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <MX_SPI1_Init+0x74>)
 800159a:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <MX_SPI1_Init+0x78>)
 800159c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015ae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015ca:	2210      	movs	r2, #16
 80015cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015e2:	2207      	movs	r2, #7
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015ee:	2208      	movs	r2, #8
 80015f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	@ (8001608 <MX_SPI1_Init+0x74>)
 80015f4:	f004 fb40 	bl	8005c78 <HAL_SPI_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015fe:	f7ff ffc2 	bl	8001586 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200011f4 	.word	0x200011f4
 800160c:	40013000 	.word	0x40013000

08001610 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a17      	ldr	r2, [pc, #92]	@ (800168c <HAL_SPI_MspInit+0x7c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d128      	bne.n	8001684 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001632:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 8001634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001636:	4a16      	ldr	r2, [pc, #88]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 8001638:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800163c:	6613      	str	r3, [r2, #96]	@ 0x60
 800163e:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 8001640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a10      	ldr	r2, [pc, #64]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <HAL_SPI_MspInit+0x80>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001662:	23e0      	movs	r3, #224	@ 0xe0
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001672:	2305      	movs	r3, #5
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001680:	f003 f98e 	bl	80049a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40013000 	.word	0x40013000
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169e:	4a0e      	ldr	r2, [pc, #56]	@ (80016d8 <HAL_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_MspInit+0x44>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	4a08      	ldr	r2, [pc, #32]	@ (80016d8 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_MspInit+0x44>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016ca:	f003 fba7 	bl	8004e1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <NMI_Handler+0x4>

080016e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <MemManage_Handler+0x4>

080016f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <UsageFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001732:	f001 fb17 	bl	8002d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <USART2_IRQHandler+0x10>)
 8001742:	f006 f80b 	bl	800775c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200013d4 	.word	0x200013d4

08001750 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return 1;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_kill>:

int _kill(int pid, int sig)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800176a:	f009 f8f1 	bl	800a950 <__errno>
 800176e:	4603      	mov	r3, r0
 8001770:	2216      	movs	r2, #22
 8001772:	601a      	str	r2, [r3, #0]
  return -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_exit>:

void _exit (int status)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001788:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe7 	bl	8001760 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001792:	bf00      	nop
 8001794:	e7fd      	b.n	8001792 <_exit+0x12>

08001796 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e00a      	b.n	80017be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a8:	f3af 8000 	nop.w
 80017ac:	4601      	mov	r1, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	60ba      	str	r2, [r7, #8]
 80017b4:	b2ca      	uxtb	r2, r1
 80017b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dbf0      	blt.n	80017a8 <_read+0x12>
  }

  return len;
 80017c6:	687b      	ldr	r3, [r7, #4]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e009      	b.n	80017f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	60ba      	str	r2, [r7, #8]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fd84 	bl	80012f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3301      	adds	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dbf1      	blt.n	80017e2 <_write+0x12>
  }
  return len;
 80017fe:	687b      	ldr	r3, [r7, #4]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_close>:

int _close(int file)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001830:	605a      	str	r2, [r3, #4]
  return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_isatty>:

int _isatty(int file)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001848:	2301      	movs	r3, #1
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001856:	b480      	push	{r7}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	@ (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f009 f856 	bl	800a950 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20008000 	.word	0x20008000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	20001258 	.word	0x20001258
 80018d8:	200019c0 	.word	0x200019c0

080018dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b09c      	sub	sp, #112	@ 0x70
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001920:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
 8001930:	615a      	str	r2, [r3, #20]
 8001932:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2234      	movs	r2, #52	@ 0x34
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f008 ffb6 	bl	800a8ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001940:	4b51      	ldr	r3, [pc, #324]	@ (8001a88 <MX_TIM1_Init+0x188>)
 8001942:	4a52      	ldr	r2, [pc, #328]	@ (8001a8c <MX_TIM1_Init+0x18c>)
 8001944:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001946:	4b50      	ldr	r3, [pc, #320]	@ (8001a88 <MX_TIM1_Init+0x188>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <MX_TIM1_Init+0x188>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001952:	4b4d      	ldr	r3, [pc, #308]	@ (8001a88 <MX_TIM1_Init+0x188>)
 8001954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001958:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a88 <MX_TIM1_Init+0x188>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001960:	4b49      	ldr	r3, [pc, #292]	@ (8001a88 <MX_TIM1_Init+0x188>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001966:	4b48      	ldr	r3, [pc, #288]	@ (8001a88 <MX_TIM1_Init+0x188>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800196c:	4846      	ldr	r0, [pc, #280]	@ (8001a88 <MX_TIM1_Init+0x188>)
 800196e:	f004 fa2e 	bl	8005dce <HAL_TIM_Base_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001978:	f7ff fe05 	bl	8001586 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001980:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001982:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001986:	4619      	mov	r1, r3
 8001988:	483f      	ldr	r0, [pc, #252]	@ (8001a88 <MX_TIM1_Init+0x188>)
 800198a:	f004 fe29 	bl	80065e0 <HAL_TIM_ConfigClockSource>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001994:	f7ff fdf7 	bl	8001586 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001998:	483b      	ldr	r0, [pc, #236]	@ (8001a88 <MX_TIM1_Init+0x188>)
 800199a:	f004 fa6f 	bl	8005e7c <HAL_TIM_PWM_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019a4:	f7ff fdef 	bl	8001586 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019b8:	4619      	mov	r1, r3
 80019ba:	4833      	ldr	r0, [pc, #204]	@ (8001a88 <MX_TIM1_Init+0x188>)
 80019bc:	f005 fc70 	bl	80072a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019c6:	f7ff fdde 	bl	8001586 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ca:	2360      	movs	r3, #96	@ 0x60
 80019cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d2:	2300      	movs	r3, #0
 80019d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d6:	2300      	movs	r3, #0
 80019d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ea:	2200      	movs	r2, #0
 80019ec:	4619      	mov	r1, r3
 80019ee:	4826      	ldr	r0, [pc, #152]	@ (8001a88 <MX_TIM1_Init+0x188>)
 80019f0:	f004 fce2 	bl	80063b8 <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019fa:	f7ff fdc4 	bl	8001586 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a02:	2204      	movs	r2, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4820      	ldr	r0, [pc, #128]	@ (8001a88 <MX_TIM1_Init+0x188>)
 8001a08:	f004 fcd6 	bl	80063b8 <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a12:	f7ff fdb8 	bl	8001586 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	481a      	ldr	r0, [pc, #104]	@ (8001a88 <MX_TIM1_Init+0x188>)
 8001a20:	f004 fcca 	bl	80063b8 <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001a2a:	f7ff fdac 	bl	8001586 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <MX_TIM1_Init+0x188>)
 8001a6c:	f005 fc9a 	bl	80073a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001a76:	f7ff fd86 	bl	8001586 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a7a:	4803      	ldr	r0, [pc, #12]	@ (8001a88 <MX_TIM1_Init+0x188>)
 8001a7c:	f000 f94a 	bl	8001d14 <HAL_TIM_MspPostInit>

}
 8001a80:	bf00      	nop
 8001a82:	3770      	adds	r7, #112	@ 0x70
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000125c 	.word	0x2000125c
 8001a8c:	40012c00 	.word	0x40012c00

08001a90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	@ 0x30
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	2224      	movs	r2, #36	@ 0x24
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f008 ff04 	bl	800a8ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aae:	4b21      	ldr	r3, [pc, #132]	@ (8001b34 <MX_TIM3_Init+0xa4>)
 8001ab0:	4a21      	ldr	r2, [pc, #132]	@ (8001b38 <MX_TIM3_Init+0xa8>)
 8001ab2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <MX_TIM3_Init+0xa4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <MX_TIM3_Init+0xa4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <MX_TIM3_Init+0xa4>)
 8001ac2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <MX_TIM3_Init+0xa4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <MX_TIM3_Init+0xa4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001adc:	2301      	movs	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aec:	2301      	movs	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	@ (8001b34 <MX_TIM3_Init+0xa4>)
 8001b00:	f004 fbb4 	bl	800626c <HAL_TIM_Encoder_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b0a:	f7ff fd3c 	bl	8001586 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	@ (8001b34 <MX_TIM3_Init+0xa4>)
 8001b1c:	f005 fbc0 	bl	80072a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b26:	f7ff fd2e 	bl	8001586 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	3730      	adds	r7, #48	@ 0x30
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200012a8 	.word	0x200012a8
 8001b38:	40000400 	.word	0x40000400

08001b3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	2224      	movs	r2, #36	@ 0x24
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f008 feae 	bl	800a8ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b5a:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <MX_TIM4_Init+0xa4>)
 8001b5c:	4a21      	ldr	r2, [pc, #132]	@ (8001be4 <MX_TIM4_Init+0xa8>)
 8001b5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b60:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <MX_TIM4_Init+0xa4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <MX_TIM4_Init+0xa4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <MX_TIM4_Init+0xa4>)
 8001b6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <MX_TIM4_Init+0xa4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <MX_TIM4_Init+0xa4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <MX_TIM4_Init+0xa4>)
 8001bac:	f004 fb5e 	bl	800626c <HAL_TIM_Encoder_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001bb6:	f7ff fce6 	bl	8001586 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <MX_TIM4_Init+0xa4>)
 8001bc8:	f005 fb6a 	bl	80072a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001bd2:	f7ff fcd8 	bl	8001586 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	3730      	adds	r7, #48	@ 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200012f4 	.word	0x200012f4
 8001be4:	40000800 	.word	0x40000800

08001be8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <HAL_TIM_Base_MspInit+0x38>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10b      	bne.n	8001c12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_TIM_Base_MspInit+0x3c>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfe:	4a09      	ldr	r2, [pc, #36]	@ (8001c24 <HAL_TIM_Base_MspInit+0x3c>)
 8001c00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <HAL_TIM_Base_MspInit+0x3c>)
 8001c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	@ 0x30
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2f      	ldr	r2, [pc, #188]	@ (8001d04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d128      	bne.n	8001c9c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c56:	4b2c      	ldr	r3, [pc, #176]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b29      	ldr	r3, [pc, #164]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c66:	4a28      	ldr	r2, [pc, #160]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c6e:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c7a:	2330      	movs	r3, #48	@ 0x30
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	481d      	ldr	r0, [pc, #116]	@ (8001d0c <HAL_TIM_Encoder_MspInit+0xe4>)
 8001c96:	f002 fe83 	bl	80049a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c9a:	e02e      	b.n	8001cfa <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d129      	bne.n	8001cfa <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	4a17      	ldr	r2, [pc, #92]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc2:	4a11      	ldr	r2, [pc, #68]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cd6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001ce8:	230a      	movs	r3, #10
 8001cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf6:	f002 fe53 	bl	80049a0 <HAL_GPIO_Init>
}
 8001cfa:	bf00      	nop
 8001cfc:	3730      	adds	r7, #48	@ 0x30
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000400 	.word	0x48000400
 8001d10:	40000800 	.word	0x40000800

08001d14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	@ 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a20      	ldr	r2, [pc, #128]	@ (8001db4 <HAL_TIM_MspPostInit+0xa0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d13a      	bne.n	8001dac <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_TIM_MspPostInit+0xa4>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001db8 <HAL_TIM_MspPostInit+0xa4>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d42:	4b1d      	ldr	r3, [pc, #116]	@ (8001db8 <HAL_TIM_MspPostInit+0xa4>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <HAL_TIM_MspPostInit+0xa4>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	4a19      	ldr	r2, [pc, #100]	@ (8001db8 <HAL_TIM_MspPostInit+0xa4>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <HAL_TIM_MspPostInit+0xa4>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d66:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d78:	2306      	movs	r3, #6
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	480e      	ldr	r0, [pc, #56]	@ (8001dbc <HAL_TIM_MspPostInit+0xa8>)
 8001d84:	f002 fe0c 	bl	80049a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d88:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da8:	f002 fdfa 	bl	80049a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	@ 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40012c00 	.word	0x40012c00
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	48000400 	.word	0x48000400

08001dc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001dc6:	4a23      	ldr	r2, [pc, #140]	@ (8001e54 <MX_USART1_UART_Init+0x94>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dca:	4b21      	ldr	r3, [pc, #132]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001df6:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e02:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e08:	4811      	ldr	r0, [pc, #68]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001e0a:	f005 fb7c 	bl	8007506 <HAL_UART_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e14:	f7ff fbb7 	bl	8001586 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001e1c:	f007 fbcb 	bl	80095b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e26:	f7ff fbae 	bl	8001586 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4808      	ldr	r0, [pc, #32]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001e2e:	f007 fc00 	bl	8009632 <HAL_UARTEx_SetRxFifoThreshold>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e38:	f7ff fba5 	bl	8001586 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e3c:	4804      	ldr	r0, [pc, #16]	@ (8001e50 <MX_USART1_UART_Init+0x90>)
 8001e3e:	f007 fb81 	bl	8009544 <HAL_UARTEx_DisableFifoMode>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e48:	f7ff fb9d 	bl	8001586 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20001340 	.word	0x20001340
 8001e54:	40013800 	.word	0x40013800

08001e58 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e5e:	4a23      	ldr	r2, [pc, #140]	@ (8001eec <MX_USART2_UART_Init+0x94>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e62:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e7e:	2204      	movs	r2, #4
 8001e80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e94:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ea0:	4811      	ldr	r0, [pc, #68]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001ea2:	f005 fb30 	bl	8007506 <HAL_UART_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001eac:	f7ff fb6b 	bl	8001586 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001eb4:	f007 fb7f 	bl	80095b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ebe:	f7ff fb62 	bl	8001586 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4808      	ldr	r0, [pc, #32]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001ec6:	f007 fbb4 	bl	8009632 <HAL_UARTEx_SetRxFifoThreshold>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ed0:	f7ff fb59 	bl	8001586 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <MX_USART2_UART_Init+0x90>)
 8001ed6:	f007 fb35 	bl	8009544 <HAL_UARTEx_DisableFifoMode>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ee0:	f7ff fb51 	bl	8001586 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200013d4 	.word	0x200013d4
 8001eec:	40004400 	.word	0x40004400

08001ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b09e      	sub	sp, #120	@ 0x78
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f08:	f107 0320 	add.w	r3, r7, #32
 8001f0c:	2244      	movs	r2, #68	@ 0x44
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f008 fccb 	bl	800a8ac <memset>
  if(uartHandle->Instance==USART1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a4f      	ldr	r2, [pc, #316]	@ (8002058 <HAL_UART_MspInit+0x168>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d136      	bne.n	8001f8e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f28:	f107 0320 	add.w	r3, r7, #32
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 fcb3 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f38:	f7ff fb25 	bl	8001586 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f3c:	4b47      	ldr	r3, [pc, #284]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f40:	4a46      	ldr	r2, [pc, #280]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001f42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f46:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f48:	4b44      	ldr	r3, [pc, #272]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	4b41      	ldr	r3, [pc, #260]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f58:	4a40      	ldr	r2, [pc, #256]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001f5a:	f043 0302 	orr.w	r3, r3, #2
 8001f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f60:	4b3e      	ldr	r3, [pc, #248]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001f6c:	23c0      	movs	r3, #192	@ 0xc0
 8001f6e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f84:	4619      	mov	r1, r3
 8001f86:	4836      	ldr	r0, [pc, #216]	@ (8002060 <HAL_UART_MspInit+0x170>)
 8001f88:	f002 fd0a 	bl	80049a0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f8c:	e060      	b.n	8002050 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a34      	ldr	r2, [pc, #208]	@ (8002064 <HAL_UART_MspInit+0x174>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d15b      	bne.n	8002050 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa0:	f107 0320 	add.w	r3, r7, #32
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 fc77 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001fb0:	f7ff fae9 	bl	8001586 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb4:	4b29      	ldr	r3, [pc, #164]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb8:	4a28      	ldr	r2, [pc, #160]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc0:	4b26      	ldr	r3, [pc, #152]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b23      	ldr	r3, [pc, #140]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd0:	4a22      	ldr	r2, [pc, #136]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd8:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <HAL_UART_MspInit+0x16c>)
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8001ffc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002000:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800200e:	2307      	movs	r3, #7
 8002010:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002016:	4619      	mov	r1, r3
 8002018:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800201c:	f002 fcc0 	bl	80049a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 8002020:	2308      	movs	r3, #8
 8002022:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002030:	2307      	movs	r3, #7
 8002032:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8002034:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002038:	4619      	mov	r1, r3
 800203a:	4809      	ldr	r0, [pc, #36]	@ (8002060 <HAL_UART_MspInit+0x170>)
 800203c:	f002 fcb0 	bl	80049a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2026      	movs	r0, #38	@ 0x26
 8002046:	f002 fbb6 	bl	80047b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800204a:	2026      	movs	r0, #38	@ 0x26
 800204c:	f002 fbcd 	bl	80047ea <HAL_NVIC_EnableIRQ>
}
 8002050:	bf00      	nop
 8002052:	3778      	adds	r7, #120	@ 0x78
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40013800 	.word	0x40013800
 800205c:	40021000 	.word	0x40021000
 8002060:	48000400 	.word	0x48000400
 8002064:	40004400 	.word	0x40004400

08002068 <Reset_Handler>:
 8002068:	480d      	ldr	r0, [pc, #52]	@ (80020a0 <LoopForever+0x2>)
 800206a:	4685      	mov	sp, r0
 800206c:	f7ff fc36 	bl	80018dc <SystemInit>
 8002070:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <LoopForever+0x6>)
 8002072:	490d      	ldr	r1, [pc, #52]	@ (80020a8 <LoopForever+0xa>)
 8002074:	4a0d      	ldr	r2, [pc, #52]	@ (80020ac <LoopForever+0xe>)
 8002076:	2300      	movs	r3, #0
 8002078:	e002      	b.n	8002080 <LoopCopyDataInit>

0800207a <CopyDataInit>:
 800207a:	58d4      	ldr	r4, [r2, r3]
 800207c:	50c4      	str	r4, [r0, r3]
 800207e:	3304      	adds	r3, #4

08002080 <LoopCopyDataInit>:
 8002080:	18c4      	adds	r4, r0, r3
 8002082:	428c      	cmp	r4, r1
 8002084:	d3f9      	bcc.n	800207a <CopyDataInit>
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <LoopForever+0x12>)
 8002088:	4c0a      	ldr	r4, [pc, #40]	@ (80020b4 <LoopForever+0x16>)
 800208a:	2300      	movs	r3, #0
 800208c:	e001      	b.n	8002092 <LoopFillZerobss>

0800208e <FillZerobss>:
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	3204      	adds	r2, #4

08002092 <LoopFillZerobss>:
 8002092:	42a2      	cmp	r2, r4
 8002094:	d3fb      	bcc.n	800208e <FillZerobss>
 8002096:	f008 fc61 	bl	800a95c <__libc_init_array>
 800209a:	f7ff f9a9 	bl	80013f0 <main>

0800209e <LoopForever>:
 800209e:	e7fe      	b.n	800209e <LoopForever>
 80020a0:	20008000 	.word	0x20008000
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20001118 	.word	0x20001118
 80020ac:	0800ec00 	.word	0x0800ec00
 80020b0:	20001118 	.word	0x20001118
 80020b4:	200019bc 	.word	0x200019bc

080020b8 <ADC1_2_IRQHandler>:
 80020b8:	e7fe      	b.n	80020b8 <ADC1_2_IRQHandler>
	...

080020bc <GP2Y0A41SK0F_Init>:
#include <stdio.h>

#define DEBUG 1


void GP2Y0A41SK0F_Init(h_GP2Y0A41SK0F_t * htof) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	// The ADC used is wired on the board so it's ADC1
	htof->hadc = &hadc1;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a14      	ldr	r2, [pc, #80]	@ (8002118 <GP2Y0A41SK0F_Init+0x5c>)
 80020c8:	601a      	str	r2, [r3, #0]

	if (HAL_ADC_Init(htof->hadc) != HAL_OK) {
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 f8e0 	bl	8003294 <HAL_ADC_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <GP2Y0A41SK0F_Init+0x22>
		Error_Handler();
 80020da:	f7ff fa54 	bl	8001586 <Error_Handler>
	}

	// Channel Config ADC ToF1
	htof->cConfig_tof1->Channel = ADC_CHANNEL_3;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4a0e      	ldr	r2, [pc, #56]	@ (800211c <GP2Y0A41SK0F_Init+0x60>)
 80020e4:	601a      	str	r2, [r3, #0]
	htof->cConfig_tof1->Rank = ADC_REGULAR_RANK_1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2206      	movs	r2, #6
 80020ec:	605a      	str	r2, [r3, #4]
	htof->cConfig_tof1->SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2204      	movs	r2, #4
 80020f4:	609a      	str	r2, [r3, #8]

	// Channel Config ADC ToF2
	htof->cConfig_tof2->Channel = ADC_CHANNEL_1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4a09      	ldr	r2, [pc, #36]	@ (8002120 <GP2Y0A41SK0F_Init+0x64>)
 80020fc:	601a      	str	r2, [r3, #0]
	htof->cConfig_tof2->Rank = ADC_REGULAR_RANK_1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2206      	movs	r2, #6
 8002104:	605a      	str	r2, [r3, #4]
	htof->cConfig_tof2->SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2204      	movs	r2, #4
 800210c:	609a      	str	r2, [r3, #8]
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20001134 	.word	0x20001134
 800211c:	0c900008 	.word	0x0c900008
 8002120:	04300002 	.word	0x04300002

08002124 <GP2Y0A41SK0F_Read_ToF1>:


void GP2Y0A41SK0F_Read_ToF1(h_GP2Y0A41SK0F_t * htof)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
#if (DEBUG)
		printf("HAL_ADC_ConfigChannel ToF1\r\n");
 800212c:	481d      	ldr	r0, [pc, #116]	@ (80021a4 <GP2Y0A41SK0F_Read_ToF1+0x80>)
 800212e:	f008 faa3 	bl	800a678 <puts>
#endif
	if (HAL_ADC_ConfigChannel(htof->hadc, htof->cConfig_tof1) != HAL_OK) {
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4619      	mov	r1, r3
 800213c:	4610      	mov	r0, r2
 800213e:	f001 fc03 	bl	8003948 <HAL_ADC_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <GP2Y0A41SK0F_Read_ToF1+0x2e>
#if (DEBUG)
		printf("GP2Y0A41SK0F error: HAL_ADC_ConfigChannel failure\r\n");
 8002148:	4817      	ldr	r0, [pc, #92]	@ (80021a8 <GP2Y0A41SK0F_Read_ToF1+0x84>)
 800214a:	f008 fa95 	bl	800a678 <puts>
#endif
		Error_Handler();
 800214e:	f7ff fa1a 	bl	8001586 <Error_Handler>
	}

#if (DEBUG)
		printf("HAL_ADC_Start ToF1\r\n");
 8002152:	4816      	ldr	r0, [pc, #88]	@ (80021ac <GP2Y0A41SK0F_Read_ToF1+0x88>)
 8002154:	f008 fa90 	bl	800a678 <puts>
#endif
	HAL_ADC_Start(htof->hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f001 fa1d 	bl	800359c <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(htof->hadc, HAL_MAX_DELAY) != HAL_OK) {
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800216a:	4618      	mov	r0, r3
 800216c:	f001 fb06 	bl	800377c <HAL_ADC_PollForConversion>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <GP2Y0A41SK0F_Read_ToF1+0x5c>
#if (DEBUG)
		printf("GP2Y0A41SK0F error: HAL_ADC_PollForConversion failure\r\n");
 8002176:	480e      	ldr	r0, [pc, #56]	@ (80021b0 <GP2Y0A41SK0F_Read_ToF1+0x8c>)
 8002178:	f008 fa7e 	bl	800a678 <puts>
#endif
		Error_Handler();
 800217c:	f7ff fa03 	bl	8001586 <Error_Handler>
	}

	htof->adc_val_tof1 = HAL_ADC_GetValue(htof->hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f001 fbd1 	bl	800392c <HAL_ADC_GetValue>
 800218a:	4602      	mov	r2, r0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
	HAL_ADC_Stop(htof->hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f001 fabd 	bl	8003714 <HAL_ADC_Stop>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	0800e454 	.word	0x0800e454
 80021a8:	0800e470 	.word	0x0800e470
 80021ac:	0800e4a4 	.word	0x0800e4a4
 80021b0:	0800e4b8 	.word	0x0800e4b8

080021b4 <GP2Y0A41SK0F_Read_ToF2>:


void GP2Y0A41SK0F_Read_ToF2(h_GP2Y0A41SK0F_t * htof) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_ConfigChannel(htof->hadc, htof->cConfig_tof2) != HAL_OK) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f001 fbbe 	bl	8003948 <HAL_ADC_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <GP2Y0A41SK0F_Read_ToF2+0x28>
#if (DEBUG)
		printf("GP2Y0A41SK0F error: HAL_ADC_ConfigChannel failure\r\n");
 80021d2:	4816      	ldr	r0, [pc, #88]	@ (800222c <GP2Y0A41SK0F_Read_ToF2+0x78>)
 80021d4:	f008 fa50 	bl	800a678 <puts>
#endif
		Error_Handler();
 80021d8:	f7ff f9d5 	bl	8001586 <Error_Handler>
	}

#if (DEBUG)
		printf("HAL_ADC_Start ToF2\r\n");
 80021dc:	4814      	ldr	r0, [pc, #80]	@ (8002230 <GP2Y0A41SK0F_Read_ToF2+0x7c>)
 80021de:	f008 fa4b 	bl	800a678 <puts>
#endif
	HAL_ADC_Start(htof->hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 f9d8 	bl	800359c <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(htof->hadc, HAL_MAX_DELAY) != HAL_OK) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 fac1 	bl	800377c <HAL_ADC_PollForConversion>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <GP2Y0A41SK0F_Read_ToF2+0x56>
#if (DEBUG)
		printf("GP2Y0A41SK0F error: HAL_ADC_PollForConversion failure\r\n");
 8002200:	480c      	ldr	r0, [pc, #48]	@ (8002234 <GP2Y0A41SK0F_Read_ToF2+0x80>)
 8002202:	f008 fa39 	bl	800a678 <puts>
#endif
		Error_Handler();
 8002206:	f7ff f9be 	bl	8001586 <Error_Handler>
	}

	htof->adc_val_tof2 = HAL_ADC_GetValue(htof->hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f001 fb8c 	bl	800392c <HAL_ADC_GetValue>
 8002214:	4602      	mov	r2, r0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	611a      	str	r2, [r3, #16]
	HAL_ADC_Stop(htof->hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f001 fa78 	bl	8003714 <HAL_ADC_Stop>
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	0800e470 	.word	0x0800e470
 8002230:	0800e4f0 	.word	0x0800e4f0
 8002234:	0800e4b8 	.word	0x0800e4b8

08002238 <GP2Y0A41SK0F_get_distance>:
 * 	- It's expected to use a 12 bits ADC as an imput
 * Source:
 * 	- https://github.com/sharpsensoruser/sharp-sensor-demos/blob/master/sharp_gp2y0a41sk0f_demo/sharp_gp2y0a41sk0f_demo.ino
 */
void GP2Y0A41SK0F_get_distance(h_GP2Y0A41SK0F_t * htof)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	// Convert to Distance in units of mm
	// by approximating datasheet graph
	// using equation of form: y = a/x + b
	// and two (x,y) points on the graph:
	// (60mm, 2.02V) and (300mm, 0.435V)
	const float a = 118.875;
 8002240:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <GP2Y0A41SK0F_get_distance+0x110>)
 8002242:	617b      	str	r3, [r7, #20]
	const float b = 0.03875;
 8002244:	4b41      	ldr	r3, [pc, #260]	@ (800234c <GP2Y0A41SK0F_get_distance+0x114>)
 8002246:	613b      	str	r3, [r7, #16]
	float Vo = 0;
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]

#if (DEBUG)
		printf("Reading ToF1\r\n");
 800224e:	4840      	ldr	r0, [pc, #256]	@ (8002350 <GP2Y0A41SK0F_get_distance+0x118>)
 8002250:	f008 fa12 	bl	800a678 <puts>
#endif
	GP2Y0A41SK0F_Read_ToF1(htof);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff65 	bl	8002124 <GP2Y0A41SK0F_Read_ToF1>
#if (DEBUG)
		printf("Reading ToF2\r\n");
 800225a:	483e      	ldr	r0, [pc, #248]	@ (8002354 <GP2Y0A41SK0F_get_distance+0x11c>)
 800225c:	f008 fa0c 	bl	800a678 <puts>
#endif
	GP2Y0A41SK0F_Read_ToF2(htof);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ffa7 	bl	80021b4 <GP2Y0A41SK0F_Read_ToF2>

	Vo = (5.0 * htof->adc_val_tof1) / GP2Y0A41SK0F_ADC_MAX_VALUE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f972 	bl	8000554 <__aeabi_ui2d>
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	4b38      	ldr	r3, [pc, #224]	@ (8002358 <GP2Y0A41SK0F_get_distance+0x120>)
 8002276:	f7fe f9e7 	bl	8000648 <__aeabi_dmul>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	a32f      	add	r3, pc, #188	@ (adr r3, 8002340 <GP2Y0A41SK0F_get_distance+0x108>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fe fb08 	bl	800089c <__aeabi_ddiv>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fcd0 	bl	8000c38 <__aeabi_d2f>
 8002298:	4603      	mov	r3, r0
 800229a:	60fb      	str	r3, [r7, #12]

	if ( Vo > b ) {
 800229c:	ed97 7a03 	vldr	s14, [r7, #12]
 80022a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	dd0f      	ble.n	80022ce <GP2Y0A41SK0F_get_distance+0x96>
		// Distance measured by ToF1 in mm
		htof->distance_tof1 = (int)( a / (Vo - b) );
 80022ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80022b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ba:	edd7 6a05 	vldr	s13, [r7, #20]
 80022be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c6:	ee17 2a90 	vmov	r2, s15
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	615a      	str	r2, [r3, #20]
	}

	Vo = (5.0 * htof->adc_val_tof2) / GP2Y0A41SK0F_ADC_MAX_VALUE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f93e 	bl	8000554 <__aeabi_ui2d>
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <GP2Y0A41SK0F_get_distance+0x120>)
 80022de:	f7fe f9b3 	bl	8000648 <__aeabi_dmul>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	a315      	add	r3, pc, #84	@ (adr r3, 8002340 <GP2Y0A41SK0F_get_distance+0x108>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe fad4 	bl	800089c <__aeabi_ddiv>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f7fe fc9c 	bl	8000c38 <__aeabi_d2f>
 8002300:	4603      	mov	r3, r0
 8002302:	60fb      	str	r3, [r7, #12]

	if ( Vo > b ) {
 8002304:	ed97 7a03 	vldr	s14, [r7, #12]
 8002308:	edd7 7a04 	vldr	s15, [r7, #16]
 800230c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002314:	dc00      	bgt.n	8002318 <GP2Y0A41SK0F_get_distance+0xe0>
		// Distance measured by ToF2 in mm
		htof->distance_tof2 = (int)( a / (Vo - b) );
	}
}
 8002316:	e00f      	b.n	8002338 <GP2Y0A41SK0F_get_distance+0x100>
		htof->distance_tof2 = (int)( a / (Vo - b) );
 8002318:	ed97 7a03 	vldr	s14, [r7, #12]
 800231c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002320:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002324:	edd7 6a05 	vldr	s13, [r7, #20]
 8002328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800232c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002330:	ee17 2a90 	vmov	r2, s15
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
}
 8002338:	bf00      	nop
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	00000000 	.word	0x00000000
 8002344:	40affe00 	.word	0x40affe00
 8002348:	42edc000 	.word	0x42edc000
 800234c:	3d1eb852 	.word	0x3d1eb852
 8002350:	0800e504 	.word	0x0800e504
 8002354:	0800e514 	.word	0x0800e514
 8002358:	40140000 	.word	0x40140000

0800235c <Motor_Init>:
/**
 * @brief Initialize the motors.
 * @param hMotors Pointer to the motor handle structure.
 * @param htim Pointer to the timer handle used for PWM control.
 */
void Motor_Init(h_Motor_t * hMotors, TIM_HandleTypeDef * htim) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
	// Allows to get direct parameters from the timer used
	hMotors->htim = htim;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	61da      	str	r2, [r3, #28]
	hMotors->speed_increase_rate1 = 100;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2264      	movs	r2, #100	@ 0x64
 8002370:	615a      	str	r2, [r3, #20]
	hMotors->speed_increase_rate2 = 100;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2264      	movs	r2, #100	@ 0x64
 8002376:	619a      	str	r2, [r3, #24]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <Motor_Init+0x9c>)
 800237a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237c:	4a1e      	ldr	r2, [pc, #120]	@ (80023f8 <Motor_Init+0x9c>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002384:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <Motor_Init+0x9c>)
 8002386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <Motor_Init+0x9c>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002394:	4a18      	ldr	r2, [pc, #96]	@ (80023f8 <Motor_Init+0x9c>)
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <Motor_Init+0x9c>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]

	MX_TIM1_Init();
 80023a8:	f7ff faaa 	bl	8001900 <MX_TIM1_Init>
	//MX_TIM2_Init();

	HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 fdc4 	bl	8005f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_2);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2104      	movs	r1, #4
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fdbe 	bl	8005f40 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fe56 	bl	800707c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_2);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2104      	movs	r1, #4
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 fe50 	bl	800707c <HAL_TIMEx_PWMN_Start>

	hMotors->mode_mot1 = STANDBY_MODE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
	hMotors->mode_mot2 = STANDBY_MODE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	705a      	strb	r2, [r3, #1]
	Motor_SetMode(hMotors);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f807 	bl	80023fc <Motor_SetMode>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000

080023fc <Motor_SetMode>:
/**
 * @brief Set the operating mode of the motors.
 * @param hMotors Pointer to the motor handle structure.
 */
void Motor_SetMode(h_Motor_t * hMotors)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	switch (hMotors->mode_mot1) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d002      	beq.n	8002412 <Motor_SetMode+0x16>
 800240c:	2b02      	cmp	r3, #2
 800240e:	d010      	beq.n	8002432 <Motor_SetMode+0x36>
 8002410:	e01f      	b.n	8002452 <Motor_SetMode+0x56>
	case FORWARD_MODE:
		printf("Mot1: FORWARD_MODE\r\n");
 8002412:	4837      	ldr	r0, [pc, #220]	@ (80024f0 <Motor_SetMode+0xf4>)
 8002414:	f008 f930 	bl	800a678 <puts>
		HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f003 fd8e 	bl	8005f40 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f004 feda 	bl	80071e4 <HAL_TIMEx_PWMN_Stop>
		break;
 8002430:	e021      	b.n	8002476 <Motor_SetMode+0x7a>

	case REVERSE_MODE:
		printf("Mot1: REVERSE_MODE\r\n");
 8002432:	4830      	ldr	r0, [pc, #192]	@ (80024f4 <Motor_SetMode+0xf8>)
 8002434:	f008 f920 	bl	800a678 <puts>
		HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f004 fe1c 	bl	800707c <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fe78 	bl	8006140 <HAL_TIM_PWM_Stop>
		break;
 8002450:	e011      	b.n	8002476 <Motor_SetMode+0x7a>

	case STANDBY_MODE:
	default:
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fec3 	bl	80071e4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f003 fe6b 	bl	8006140 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_1, 0);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2200      	movs	r2, #0
 8002472:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8002474:	bf00      	nop
	}

	switch (hMotors->mode_mot2) {
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d002      	beq.n	8002484 <Motor_SetMode+0x88>
 800247e:	2b02      	cmp	r3, #2
 8002480:	d010      	beq.n	80024a4 <Motor_SetMode+0xa8>
 8002482:	e01f      	b.n	80024c4 <Motor_SetMode+0xc8>
	case FORWARD_MODE:
		printf("Mot2: FORWARD_MODE\r\n");
 8002484:	481c      	ldr	r0, [pc, #112]	@ (80024f8 <Motor_SetMode+0xfc>)
 8002486:	f008 f8f7 	bl	800a678 <puts>
		HAL_TIM_PWM_Start(hMotors->htim, TIM_CHANNEL_2);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	2104      	movs	r1, #4
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fd55 	bl	8005f40 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_2);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	2104      	movs	r1, #4
 800249c:	4618      	mov	r0, r3
 800249e:	f004 fea1 	bl	80071e4 <HAL_TIMEx_PWMN_Stop>
		break;
 80024a2:	e021      	b.n	80024e8 <Motor_SetMode+0xec>

	case REVERSE_MODE:
		printf("Mot2: REVERSE_MODE\r\n");
 80024a4:	4815      	ldr	r0, [pc, #84]	@ (80024fc <Motor_SetMode+0x100>)
 80024a6:	f008 f8e7 	bl	800a678 <puts>
		HAL_TIMEx_PWMN_Start(hMotors->htim, TIM_CHANNEL_2);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	2104      	movs	r1, #4
 80024b0:	4618      	mov	r0, r3
 80024b2:	f004 fde3 	bl	800707c <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_2);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	2104      	movs	r1, #4
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 fe3f 	bl	8006140 <HAL_TIM_PWM_Stop>
		break;
 80024c2:	e011      	b.n	80024e8 <Motor_SetMode+0xec>

	case STANDBY_MODE:
	default:
		HAL_TIMEx_PWMN_Stop(hMotors->htim, TIM_CHANNEL_2);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2104      	movs	r1, #4
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 fe8a 	bl	80071e4 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(hMotors->htim, TIM_CHANNEL_2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2104      	movs	r1, #4
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fe32 	bl	8006140 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_2, 0);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 80024e6:	bf00      	nop
	}
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	0800e524 	.word	0x0800e524
 80024f4:	0800e538 	.word	0x0800e538
 80024f8:	0800e54c 	.word	0x0800e54c
 80024fc:	0800e560 	.word	0x0800e560

08002500 <Motor_SetSpeed_percent>:
 * @brief Set the speed of the motors as a percentage of maximum speed.
 * @param hMotor Pointer to the motor handle structure.
 * @param percent1 Speed percentage for motor 1 (0.0 to 100.0).
 * @param percent2 Speed percentage for motor 2 (0.0 to 100.0).
 */
void Motor_SetSpeed_percent(h_Motor_t * hMotor, float percent1, float percent2) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	ed87 0a02 	vstr	s0, [r7, #8]
 800250c:	edc7 0a01 	vstr	s1, [r7, #4]
	hMotor->speed1 = (int)(hMotor->htim->Init.Period * percent1/100.0);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800251e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002526:	ee17 0a90 	vmov	r0, s15
 800252a:	f7fe f835 	bl	8000598 <__aeabi_f2d>
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	4b16      	ldr	r3, [pc, #88]	@ (800258c <Motor_SetSpeed_percent+0x8c>)
 8002534:	f7fe f9b2 	bl	800089c <__aeabi_ddiv>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fb32 	bl	8000ba8 <__aeabi_d2iz>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	605a      	str	r2, [r3, #4]
	hMotor->speed2 = (int)(hMotor->htim->Init.Period * percent2/100.0);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002558:	edd7 7a01 	vldr	s15, [r7, #4]
 800255c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002560:	ee17 0a90 	vmov	r0, s15
 8002564:	f7fe f818 	bl	8000598 <__aeabi_f2d>
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	4b07      	ldr	r3, [pc, #28]	@ (800258c <Motor_SetSpeed_percent+0x8c>)
 800256e:	f7fe f995 	bl	800089c <__aeabi_ddiv>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	f7fe fb15 	bl	8000ba8 <__aeabi_d2iz>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	609a      	str	r2, [r3, #8]
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40590000 	.word	0x40590000

08002590 <Motor_UpdateSpeed>:

/**
 * @brief Update motor speeds gradually to achieve smoother transitions.
 * @param hMotor Pointer to the motor handle structure.
 */
void Motor_UpdateSpeed(h_Motor_t * hMotors) {
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	// Increase speed progressively
	if (hMotors->speed1 > hMotors->current_speed1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dd06      	ble.n	80025b2 <Motor_UpdateSpeed+0x22>
		hMotors->current_speed1 += hMotors->speed_increase_rate1;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	441a      	add	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60da      	str	r2, [r3, #12]
	if (hMotors->speed2 > hMotors->current_speed2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	dd06      	ble.n	80025cc <Motor_UpdateSpeed+0x3c>
		hMotors->current_speed2 += hMotors->speed_increase_rate2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	441a      	add	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	611a      	str	r2, [r3, #16]

	// Decrease speed progressively
	if (hMotors->speed1 < hMotors->current_speed1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	da06      	bge.n	80025e6 <Motor_UpdateSpeed+0x56>
		hMotors->current_speed1 -= hMotors->speed_increase_rate1;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	1ad2      	subs	r2, r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	60da      	str	r2, [r3, #12]
	if (hMotors->speed2 < hMotors->current_speed2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	da06      	bge.n	8002600 <Motor_UpdateSpeed+0x70>
		hMotors->current_speed2 -= hMotors->speed_increase_rate2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	611a      	str	r2, [r3, #16]

	__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_1, hMotors->current_speed1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(hMotors->htim, TIM_CHANNEL_2, hMotors->current_speed2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <YLIDARX2_PrintData>:

/**
 * Debugging function to print data
 */
void YLIDARX2_PrintData(h_YLIDARX2_t * hYLIDAR)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
#if (LOGS)
		// Extract fields in little-endian mode
		uint16_t packetHeader = (hYLIDAR->data_buffer[1] << 8) | hYLIDAR->data_buffer[0];
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	3301      	adds	r3, #1
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	b21a      	sxth	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	b21b      	sxth	r3, r3
 8002644:	817b      	strh	r3, [r7, #10]
		uint8_t packageType = hYLIDAR->data_buffer[2] & 0x1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	3302      	adds	r3, #2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	727b      	strb	r3, [r7, #9]
		uint8_t scan_frequency = (hYLIDAR->data_buffer[2] >> 1)/10;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	3302      	adds	r3, #2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4a27      	ldr	r2, [pc, #156]	@ (8002700 <YLIDARX2_PrintData+0xdc>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	08db      	lsrs	r3, r3, #3
 8002668:	723b      	strb	r3, [r7, #8]

		printf("Packet Header: 0x%X\r\n", packetHeader);
 800266a:	897b      	ldrh	r3, [r7, #10]
 800266c:	4619      	mov	r1, r3
 800266e:	4825      	ldr	r0, [pc, #148]	@ (8002704 <YLIDARX2_PrintData+0xe0>)
 8002670:	f007 ff9a 	bl	800a5a8 <iprintf>
		printf("Package Type: %s\r\n", YLIDAR_PACKAGE_TYPE(packageType));
 8002674:	7a7b      	ldrb	r3, [r7, #9]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <YLIDARX2_PrintData+0x5e>
 800267e:	4b22      	ldr	r3, [pc, #136]	@ (8002708 <YLIDARX2_PrintData+0xe4>)
 8002680:	e000      	b.n	8002684 <YLIDARX2_PrintData+0x60>
 8002682:	4b22      	ldr	r3, [pc, #136]	@ (800270c <YLIDARX2_PrintData+0xe8>)
 8002684:	4619      	mov	r1, r3
 8002686:	4822      	ldr	r0, [pc, #136]	@ (8002710 <YLIDARX2_PrintData+0xec>)
 8002688:	f007 ff8e 	bl	800a5a8 <iprintf>
		printf("Scan frequency: %d Hz\r\n", scan_frequency);
 800268c:	7a3b      	ldrb	r3, [r7, #8]
 800268e:	4619      	mov	r1, r3
 8002690:	4820      	ldr	r0, [pc, #128]	@ (8002714 <YLIDARX2_PrintData+0xf0>)
 8002692:	f007 ff89 	bl	800a5a8 <iprintf>
#endif
		printf("Sample Quantity: %d\r\n", hYLIDAR->sample_quantity);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7b1b      	ldrb	r3, [r3, #12]
 800269a:	4619      	mov	r1, r3
 800269c:	481e      	ldr	r0, [pc, #120]	@ (8002718 <YLIDARX2_PrintData+0xf4>)
 800269e:	f007 ff83 	bl	800a5a8 <iprintf>

	printf("Data: ");
 80026a2:	481e      	ldr	r0, [pc, #120]	@ (800271c <YLIDARX2_PrintData+0xf8>)
 80026a4:	f007 ff80 	bl	800a5a8 <iprintf>

	for (int i=0; i < hYLIDAR->data_length; i++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e01c      	b.n	80026e8 <YLIDARX2_PrintData+0xc4>
	{
		printf("0x%X ", hYLIDAR->data_buffer[i]);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4413      	add	r3, r2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4819      	ldr	r0, [pc, #100]	@ (8002720 <YLIDARX2_PrintData+0xfc>)
 80026bc:	f007 ff74 	bl	800a5a8 <iprintf>

		if (i%10 == 0) printf("\r\n");
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <YLIDARX2_PrintData+0x100>)
 80026c4:	fb83 2301 	smull	r2, r3, r3, r1
 80026c8:	109a      	asrs	r2, r3, #2
 80026ca:	17cb      	asrs	r3, r1, #31
 80026cc:	1ad2      	subs	r2, r2, r3
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	1aca      	subs	r2, r1, r3
 80026d8:	2a00      	cmp	r2, #0
 80026da:	d102      	bne.n	80026e2 <YLIDARX2_PrintData+0xbe>
 80026dc:	4812      	ldr	r0, [pc, #72]	@ (8002728 <YLIDARX2_PrintData+0x104>)
 80026de:	f007 ffcb 	bl	800a678 <puts>
	for (int i=0; i < hYLIDAR->data_length; i++)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3301      	adds	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	dbdd      	blt.n	80026ae <YLIDARX2_PrintData+0x8a>
	}

	printf("\r\n");
 80026f2:	480d      	ldr	r0, [pc, #52]	@ (8002728 <YLIDARX2_PrintData+0x104>)
 80026f4:	f007 ffc0 	bl	800a678 <puts>
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	cccccccd 	.word	0xcccccccd
 8002704:	0800e574 	.word	0x0800e574
 8002708:	0800e58c 	.word	0x0800e58c
 800270c:	0800e5a8 	.word	0x0800e5a8
 8002710:	0800e5c0 	.word	0x0800e5c0
 8002714:	0800e5d4 	.word	0x0800e5d4
 8002718:	0800e5ec 	.word	0x0800e5ec
 800271c:	0800e604 	.word	0x0800e604
 8002720:	0800e60c 	.word	0x0800e60c
 8002724:	66666667 	.word	0x66666667
 8002728:	0800e614 	.word	0x0800e614

0800272c <YLIDARX2_PrintSamples>:

/**
 * Debugging function to print samples
 */
void YLIDARX2_PrintSamples(h_YLIDARX2_t * hYLIDAR)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	for (int i=0; i < hYLIDAR->sample_quantity; i++)
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e030      	b.n	800279c <YLIDARX2_PrintSamples+0x70>
			{
				printf("Sample %d: Distance = %d mm, ", i + 1, hYLIDAR->samples[i].distance);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1c58      	adds	r0, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	885b      	ldrh	r3, [r3, #2]
 8002750:	461a      	mov	r2, r3
 8002752:	4601      	mov	r1, r0
 8002754:	4817      	ldr	r0, [pc, #92]	@ (80027b4 <YLIDARX2_PrintSamples+0x88>)
 8002756:	f007 ff27 	bl	800a5a8 <iprintf>
	#if (LOGS)
				printf("Interference = %d, ", hYLIDAR->samples[i].interference_flag);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	791b      	ldrb	r3, [r3, #4]
 800276c:	4619      	mov	r1, r3
 800276e:	4812      	ldr	r0, [pc, #72]	@ (80027b8 <YLIDARX2_PrintSamples+0x8c>)
 8002770:	f007 ff1a 	bl	800a5a8 <iprintf>
	#endif
				printf("Corrected Angle = %.2f°\r\n", hYLIDAR->samples[i].corrected_angle);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6919      	ldr	r1, [r3, #16]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd ff06 	bl	8000598 <__aeabi_f2d>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	480a      	ldr	r0, [pc, #40]	@ (80027bc <YLIDARX2_PrintSamples+0x90>)
 8002792:	f007 ff09 	bl	800a5a8 <iprintf>
	for (int i=0; i < hYLIDAR->sample_quantity; i++)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3301      	adds	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7b1b      	ldrb	r3, [r3, #12]
 80027a0:	461a      	mov	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4293      	cmp	r3, r2
 80027a6:	dbc8      	blt.n	800273a <YLIDARX2_PrintSamples+0xe>
			}
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	0800e618 	.word	0x0800e618
 80027b8:	0800e638 	.word	0x0800e638
 80027bc:	0800e64c 	.word	0x0800e64c

080027c0 <YLIDARX2_CalculateChecksum>:

uint16_t YLIDARX2_CalculateChecksum(uint8_t *data, uint16_t length)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
	uint16_t checksum = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < length; i+=2) // Exclude received checksum bytes
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	e015      	b.n	8002802 <YLIDARX2_CalculateChecksum+0x42>
	{
		checksum ^= data[i] | (data[i+1] << 8);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b21a      	sxth	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	3301      	adds	r3, #1
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	440b      	add	r3, r1
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	4313      	orrs	r3, r2
 80027f0:	b21a      	sxth	r2, r3
 80027f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f6:	4053      	eors	r3, r2
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < length; i+=2) // Exclude received checksum bytes
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	3302      	adds	r3, #2
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	dbe5      	blt.n	80027d6 <YLIDARX2_CalculateChecksum+0x16>
	}

	return checksum;
 800280a:	89fb      	ldrh	r3, [r7, #14]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <YLIDARX2_ParseData>:
 * @brief Parse and print YDLIDAR X2 scan data.
 * @param data: Pointer to the received data buffer.
 * @retval None
 */
void YLIDARX2_ParseData(h_YLIDARX2_t * hYLIDAR)
{
 8002818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800281c:	b097      	sub	sp, #92	@ 0x5c
 800281e:	af02      	add	r7, sp, #8
 8002820:	6278      	str	r0, [r7, #36]	@ 0x24
	if (hYLIDAR->data_buffer[0] == YLIDAR_START_BYTE2 && hYLIDAR->data_buffer[1] == YLIDAR_START_BYTE1)
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2baa      	cmp	r3, #170	@ 0xaa
 800282a:	f040 81d2 	bne.w	8002bd2 <YLIDARX2_ParseData+0x3ba>
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	3301      	adds	r3, #1
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b55      	cmp	r3, #85	@ 0x55
 8002838:	f040 81cb 	bne.w	8002bd2 <YLIDARX2_ParseData+0x3ba>
	{
 800283c:	466b      	mov	r3, sp
 800283e:	461e      	mov	r6, r3
#if (LOGS)
		printf("Started parsing\r\n");
 8002840:	4875      	ldr	r0, [pc, #468]	@ (8002a18 <YLIDARX2_ParseData+0x200>)
 8002842:	f007 ff19 	bl	800a678 <puts>
#endif

		// Verify checksum
		uint16_t checksum = hYLIDAR->data_buffer[8] | (hYLIDAR->data_buffer[9] << 8);
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	3308      	adds	r3, #8
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b21a      	sxth	r2, r3
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	3309      	adds	r3, #9
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	b21b      	sxth	r3, r3
 800285c:	4313      	orrs	r3, r2
 800285e:	b21b      	sxth	r3, r3
 8002860:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		uint16_t calculatedChecksum = YLIDARX2_CalculateChecksum(hYLIDAR->data_buffer, YLIDAR_SAMPLE_BYTE_OFFSET);
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2108      	movs	r1, #8
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ffa8 	bl	80027c0 <YLIDARX2_CalculateChecksum>
 8002870:	4603      	mov	r3, r0
 8002872:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

		if (calculatedChecksum != checksum)
 8002876:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800287a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800287e:	429a      	cmp	r2, r3
 8002880:	d009      	beq.n	8002896 <YLIDARX2_ParseData+0x7e>
		{
#if (LOGS)
			printf("Checksum mismatch! Calculated: 0x%X, Received: 0x%X\r\n", calculatedChecksum, checksum);
 8002882:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002886:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800288a:	4619      	mov	r1, r3
 800288c:	4863      	ldr	r0, [pc, #396]	@ (8002a1c <YLIDARX2_ParseData+0x204>)
 800288e:	f007 fe8b 	bl	800a5a8 <iprintf>
#endif
			return;
 8002892:	46b5      	mov	sp, r6
 8002894:	e1a0      	b.n	8002bd8 <YLIDARX2_ParseData+0x3c0>
		}
#if (DEBUG)
		YLIDARX2_PrintData(hYLIDAR);
 8002896:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002898:	f7ff fec4 	bl	8002624 <YLIDARX2_PrintData>
#endif
		uint16_t startAngleRaw = hYLIDAR->data_buffer[4] | (hYLIDAR->data_buffer[5] << 8);
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b21a      	sxth	r2, r3
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	3305      	adds	r3, #5
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	b21b      	sxth	r3, r3
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		uint16_t endAngleRaw = hYLIDAR->data_buffer[6] | (hYLIDAR->data_buffer[7] << 8);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	3306      	adds	r3, #6
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	3307      	adds	r3, #7
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

		// Calculate starting and ending angles
		float Angle_FSA = (startAngleRaw >> 1) / 64.0f; // Formula: Rshiftbit(FSA) / 64
 80028d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	b29b      	uxth	r3, r3
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028e8:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002a20 <YLIDARX2_ParseData+0x208>
 80028ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		float Angle_LSA = (endAngleRaw >> 1) / 64.0f;   // Formula: Rshiftbit(LSA) / 64
 80028f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002904:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002a20 <YLIDARX2_ParseData+0x208>
 8002908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800290c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
#if (LOGS)
		printf("Start Angle: %.2f°, End Angle: %.2f°\r\n", Angle_FSA, Angle_LSA);
 8002910:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002912:	f7fd fe41 	bl	8000598 <__aeabi_f2d>
 8002916:	4604      	mov	r4, r0
 8002918:	460d      	mov	r5, r1
 800291a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800291c:	f7fd fe3c 	bl	8000598 <__aeabi_f2d>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	e9cd 2300 	strd	r2, r3, [sp]
 8002928:	4622      	mov	r2, r4
 800292a:	462b      	mov	r3, r5
 800292c:	483d      	ldr	r0, [pc, #244]	@ (8002a24 <YLIDARX2_ParseData+0x20c>)
 800292e:	f007 fe3b 	bl	800a5a8 <iprintf>
#endif

		// Calculate the angle difference
		float diffAngle = (Angle_LSA > Angle_FSA) ? (Angle_LSA - Angle_FSA) : (360.0f + Angle_LSA - Angle_FSA);
 8002932:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002936:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800293a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002942:	dd06      	ble.n	8002952 <YLIDARX2_ParseData+0x13a>
 8002944:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002948:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800294c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002950:	e009      	b.n	8002966 <YLIDARX2_ParseData+0x14e>
 8002952:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002956:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002a28 <YLIDARX2_ParseData+0x210>
 800295a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800295e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002966:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
#if (DEBUG)
		// Process sample data
		printf("Sample Data:\r\n");
 800296a:	4830      	ldr	r0, [pc, #192]	@ (8002a2c <YLIDARX2_ParseData+0x214>)
 800296c:	f007 fe84 	bl	800a678 <puts>
#endif
		YLIDARX2_sample_t samples[hYLIDAR->sample_quantity];
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	7b19      	ldrb	r1, [r3, #12]
 8002974:	460b      	mov	r3, r1
 8002976:	3b01      	subs	r3, #1
 8002978:	633b      	str	r3, [r7, #48]	@ 0x30
 800297a:	b2cb      	uxtb	r3, r1
 800297c:	2200      	movs	r2, #0
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	61fa      	str	r2, [r7, #28]
 8002982:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002986:	4622      	mov	r2, r4
 8002988:	462b      	mov	r3, r5
 800298a:	1890      	adds	r0, r2, r2
 800298c:	60b8      	str	r0, [r7, #8]
 800298e:	415b      	adcs	r3, r3
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002996:	4620      	mov	r0, r4
 8002998:	eb12 0a00 	adds.w	sl, r2, r0
 800299c:	4628      	mov	r0, r5
 800299e:	eb43 0b00 	adc.w	fp, r3, r0
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80029ae:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80029b2:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80029b6:	b2cb      	uxtb	r3, r1
 80029b8:	2200      	movs	r2, #0
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	617a      	str	r2, [r7, #20]
 80029be:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029c2:	4622      	mov	r2, r4
 80029c4:	462b      	mov	r3, r5
 80029c6:	1890      	adds	r0, r2, r2
 80029c8:	6038      	str	r0, [r7, #0]
 80029ca:	415b      	adcs	r3, r3
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d2:	4620      	mov	r0, r4
 80029d4:	eb12 0800 	adds.w	r8, r2, r0
 80029d8:	4628      	mov	r0, r5
 80029da:	eb43 0900 	adc.w	r9, r3, r0
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80029ea:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80029ee:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80029f2:	460a      	mov	r2, r1
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	3307      	adds	r3, #7
 80029fe:	08db      	lsrs	r3, r3, #3
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	ebad 0d03 	sub.w	sp, sp, r3
 8002a06:	ab02      	add	r3, sp, #8
 8002a08:	3303      	adds	r3, #3
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		for (int i = 0; i < hYLIDAR->sample_quantity; i++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a14:	e0ce      	b.n	8002bb4 <YLIDARX2_ParseData+0x39c>
 8002a16:	bf00      	nop
 8002a18:	0800e668 	.word	0x0800e668
 8002a1c:	0800e67c 	.word	0x0800e67c
 8002a20:	42800000 	.word	0x42800000
 8002a24:	0800e6b4 	.word	0x0800e6b4
 8002a28:	43b40000 	.word	0x43b40000
 8002a2c:	0800e6e0 	.word	0x0800e6e0
 8002a30:	41ae6666 	.word	0x41ae6666
 8002a34:	431b4ccd 	.word	0x431b4ccd
		{
			samples[i].data = hYLIDAR->data_buffer[10 + i*2] | (hYLIDAR->data_buffer[11 + i*2] << 8);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a3e:	3205      	adds	r2, #5
 8002a40:	0052      	lsls	r2, r2, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	b21a      	sxth	r2, r3
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002a4e:	0049      	lsls	r1, r1, #1
 8002a50:	310b      	adds	r1, #11
 8002a52:	440b      	add	r3, r1
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	b21b      	sxth	r3, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	b298      	uxth	r0, r3
 8002a60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	4602      	mov	r2, r0
 8002a70:	801a      	strh	r2, [r3, #0]
			samples[i].distance = (uint16_t)((samples[i].data) >> 2);
 8002a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	b298      	uxth	r0, r3
 8002a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	3302      	adds	r3, #2
 8002a96:	4602      	mov	r2, r0
 8002a98:	801a      	strh	r2, [r3, #0]
			samples[i].interference_flag = (samples[i].data) & 0b11; // Lower 2 bits
 8002a9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	b2d8      	uxtb	r0, r3
 8002ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ab4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	701a      	strb	r2, [r3, #0]

			// Compute the intermediate angle
			float Angle_i = diffAngle * (float)((i - 1)/(hYLIDAR->sample_quantity-1)) + Angle_FSA;
 8002ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	7b1b      	ldrb	r3, [r3, #12]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002adc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

			// Compute angle correction
			float AngCorrect = 0.0f;
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	64bb      	str	r3, [r7, #72]	@ 0x48

			if (samples[i].distance > 0)
 8002af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002af8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3302      	adds	r3, #2
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d040      	beq.n	8002b8e <YLIDARX2_ParseData+0x376>
			{
				AngCorrect = atan(21.8f * (155.3f - samples[i].distance)/(155.3f * samples[i].distance) ) * (180.0f / PI);
 8002b0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b26:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 8002a34 <YLIDARX2_ParseData+0x21c>
 8002b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2e:	ed1f 7a40 	vldr	s14, [pc, #-256]	@ 8002a30 <YLIDARX2_ParseData+0x218>
 8002b32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3302      	adds	r3, #2
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b50:	ed5f 6a48 	vldr	s13, [pc, #-288]	@ 8002a34 <YLIDARX2_ParseData+0x21c>
 8002b54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b5c:	ee16 0a90 	vmov	r0, s13
 8002b60:	f7fd fd1a 	bl	8000598 <__aeabi_f2d>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	ec43 2b10 	vmov	d0, r2, r3
 8002b6c:	f00b f9c8 	bl	800df00 <atan>
 8002b70:	ec51 0b10 	vmov	r0, r1, d0
 8002b74:	a31b      	add	r3, pc, #108	@ (adr r3, 8002be4 <YLIDARX2_ParseData+0x3cc>)
 8002b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7a:	f7fd fd65 	bl	8000648 <__aeabi_dmul>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4610      	mov	r0, r2
 8002b84:	4619      	mov	r1, r3
 8002b86:	f7fe f857 	bl	8000c38 <__aeabi_d2f>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
			}

			samples[i].corrected_angle = Angle_i + AngCorrect;
 8002b8e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002b92:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3308      	adds	r3, #8
 8002baa:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < hYLIDAR->sample_quantity; i++)
 8002bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	7b1b      	ldrb	r3, [r3, #12]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	f6ff af3b 	blt.w	8002a38 <YLIDARX2_ParseData+0x220>
		}

		hYLIDAR->samples = samples;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bc6:	611a      	str	r2, [r3, #16]
#if (DEBUG)
		YLIDARX2_PrintSamples(hYLIDAR);
 8002bc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002bca:	f7ff fdaf 	bl	800272c <YLIDARX2_PrintSamples>
 8002bce:	46b5      	mov	sp, r6
	{
 8002bd0:	e002      	b.n	8002bd8 <YLIDARX2_ParseData+0x3c0>
#endif
	}
	else
	{
		printf("YLIDAR X2: Invalid start bytes!\r\n");
 8002bd2:	4803      	ldr	r0, [pc, #12]	@ (8002be0 <YLIDARX2_ParseData+0x3c8>)
 8002bd4:	f007 fd50 	bl	800a678 <puts>
	}
}
 8002bd8:	3754      	adds	r7, #84	@ 0x54
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002be0:	0800e6f0 	.word	0x0800e6f0
 8002be4:	1a63bfe5 	.word	0x1a63bfe5
 8002be8:	404ca5dc 	.word	0x404ca5dc

08002bec <YLIDARX2_UART_irq>:

/**
 * @param	UART buffer, should be a variable or an array of 1.
 */
void YLIDARX2_UART_irq(h_YLIDARX2_t * hYLIDAR)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	// Add received byte to the buffer
	uartBuffer[bufferIndex++] = hYLIDAR->uart_buffer[0];
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	1c59      	adds	r1, r3, #1
 8002bfe:	b288      	uxth	r0, r1
 8002c00:	492b      	ldr	r1, [pc, #172]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c02:	8008      	strh	r0, [r1, #0]
 8002c04:	4619      	mov	r1, r3
 8002c06:	7812      	ldrb	r2, [r2, #0]
 8002c08:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb4 <YLIDARX2_UART_irq+0xc8>)
 8002c0a:	545a      	strb	r2, [r3, r1]

	// Check for start bytes and process data only if a full packet is received
	if (bufferIndex >= 2)
 8002c0c:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d93e      	bls.n	8002c92 <YLIDARX2_UART_irq+0xa6>
	{
		if(uartBuffer[0] == YLIDAR_START_BYTE2 && uartBuffer[1] == YLIDAR_START_BYTE1)
 8002c14:	4b27      	ldr	r3, [pc, #156]	@ (8002cb4 <YLIDARX2_UART_irq+0xc8>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2baa      	cmp	r3, #170	@ 0xaa
 8002c1a:	d12b      	bne.n	8002c74 <YLIDARX2_UART_irq+0x88>
 8002c1c:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <YLIDARX2_UART_irq+0xc8>)
 8002c1e:	785b      	ldrb	r3, [r3, #1]
 8002c20:	2b55      	cmp	r3, #85	@ 0x55
 8002c22:	d127      	bne.n	8002c74 <YLIDARX2_UART_irq+0x88>
		{
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 8002c24:	4b22      	ldr	r3, [pc, #136]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	2b19      	cmp	r3, #25
 8002c2a:	d931      	bls.n	8002c90 <YLIDARX2_UART_irq+0xa4>
			{
				// Extract sample quantity
				hYLIDAR->sample_quantity = uartBuffer[3];
 8002c2c:	4b21      	ldr	r3, [pc, #132]	@ (8002cb4 <YLIDARX2_UART_irq+0xc8>)
 8002c2e:	78da      	ldrb	r2, [r3, #3]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	731a      	strb	r2, [r3, #12]
				uint16_t expectedLength = YLIDAR_PACKET_HEADER_LENGTH + (hYLIDAR->sample_quantity * 2);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7b1b      	ldrb	r3, [r3, #12]
 8002c38:	330d      	adds	r3, #13
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	81fb      	strh	r3, [r7, #14]

				// Process only when the full packet is received
				if (bufferIndex >= expectedLength)
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	89fa      	ldrh	r2, [r7, #14]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d822      	bhi.n	8002c90 <YLIDARX2_UART_irq+0xa4>
				{
					hYLIDAR->data_buffer = uartBuffer;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a19      	ldr	r2, [pc, #100]	@ (8002cb4 <YLIDARX2_UART_irq+0xc8>)
 8002c4e:	605a      	str	r2, [r3, #4]
					hYLIDAR->data_length = bufferIndex;
 8002c50:	4b17      	ldr	r3, [pc, #92]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	609a      	str	r2, [r3, #8]

					YLIDARX2_ParseData(hYLIDAR);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fddc 	bl	8002818 <YLIDARX2_ParseData>

					// Reset the buffer
					bufferIndex = 0;
 8002c60:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	801a      	strh	r2, [r3, #0]
					memset(uartBuffer, 0, sizeof(uartBuffer));
 8002c66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4811      	ldr	r0, [pc, #68]	@ (8002cb4 <YLIDARX2_UART_irq+0xc8>)
 8002c6e:	f007 fe1d 	bl	800a8ac <memset>
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 8002c72:	e00d      	b.n	8002c90 <YLIDARX2_UART_irq+0xa4>
			}
		}
		else
		{
			// Shift buffer to discard invalid start bytes
			memmove(uartBuffer, uartBuffer + 1, --bufferIndex);
 8002c74:	4910      	ldr	r1, [pc, #64]	@ (8002cb8 <YLIDARX2_UART_irq+0xcc>)
 8002c76:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	480a      	ldr	r0, [pc, #40]	@ (8002cb4 <YLIDARX2_UART_irq+0xc8>)
 8002c8a:	f007 fdf5 	bl	800a878 <memmove>
 8002c8e:	e000      	b.n	8002c92 <YLIDARX2_UART_irq+0xa6>
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 8002c90:	bf00      	nop
		}
	}

	if (bufferIndex >= USART_BUFFER_SIZE)
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c9a:	d305      	bcc.n	8002ca8 <YLIDARX2_UART_irq+0xbc>
	{
		// Reset buffer if overflow occurs
		bufferIndex = 0;
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <YLIDARX2_UART_irq+0xc4>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	801a      	strh	r2, [r3, #0]
#if (LOGS)
		printf("YLIDAR X2: Buffer overflow! Clearing buffer.\r\n");
 8002ca2:	4806      	ldr	r0, [pc, #24]	@ (8002cbc <YLIDARX2_UART_irq+0xd0>)
 8002ca4:	f007 fce8 	bl	800a678 <puts>
#endif
	}
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20001468 	.word	0x20001468
 8002cb4:	2000146c 	.word	0x2000146c
 8002cb8:	2000146d 	.word	0x2000146d
 8002cbc:	0800e714 	.word	0x0800e714

08002cc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cca:	2003      	movs	r0, #3
 8002ccc:	f001 fd68 	bl	80047a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cd0:	200f      	movs	r0, #15
 8002cd2:	f000 f80d 	bl	8002cf0 <HAL_InitTick>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	71fb      	strb	r3, [r7, #7]
 8002ce0:	e001      	b.n	8002ce6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ce2:	f7fe fcd7 	bl	8001694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ce6:	79fb      	ldrb	r3, [r7, #7]

}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002cfc:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <HAL_InitTick+0x68>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d022      	beq.n	8002d4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d04:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <HAL_InitTick+0x6c>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <HAL_InitTick+0x68>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 fd74 	bl	8004806 <HAL_SYSTICK_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10f      	bne.n	8002d44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	d809      	bhi.n	8002d3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d32:	f001 fd40 	bl	80047b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d36:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <HAL_InitTick+0x70>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	e007      	b.n	8002d4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
 8002d42:	e004      	b.n	8002d4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	e001      	b.n	8002d4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000f4c 	.word	0x20000f4c
 8002d5c:	20000f44 	.word	0x20000f44
 8002d60:	20000f48 	.word	0x20000f48

08002d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_IncTick+0x1c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <HAL_IncTick+0x20>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	4a03      	ldr	r2, [pc, #12]	@ (8002d80 <HAL_IncTick+0x1c>)
 8002d74:	6013      	str	r3, [r2, #0]
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	2000186c 	.word	0x2000186c
 8002d84:	20000f4c 	.word	0x20000f4c

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	@ (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	2000186c 	.word	0x2000186c

08002da0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	609a      	str	r2, [r3, #8]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3360      	adds	r3, #96	@ 0x60
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <LL_ADC_SetOffset+0x44>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	03fff000 	.word	0x03fff000

08002e50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3360      	adds	r3, #96	@ 0x60
 8002e5e:	461a      	mov	r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3360      	adds	r3, #96	@ 0x60
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3360      	adds	r3, #96	@ 0x60
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002edc:	bf00      	nop
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3360      	adds	r3, #96	@ 0x60
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	615a      	str	r2, [r3, #20]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b087      	sub	sp, #28
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3330      	adds	r3, #48	@ 0x30
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	4413      	add	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	211f      	movs	r1, #31
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0e9b      	lsrs	r3, r3, #26
 8002fa2:	f003 011f 	and.w	r1, r3, #31
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b087      	sub	sp, #28
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	0e5b      	lsrs	r3, r3, #25
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	4413      	add	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	0d1b      	lsrs	r3, r3, #20
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2107      	movs	r1, #7
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	0d1b      	lsrs	r3, r3, #20
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	431a      	orrs	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003030:	43db      	mvns	r3, r3
 8003032:	401a      	ands	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0318 	and.w	r3, r3, #24
 800303a:	4908      	ldr	r1, [pc, #32]	@ (800305c <LL_ADC_SetChannelSingleDiff+0x44>)
 800303c:	40d9      	lsrs	r1, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	400b      	ands	r3, r1
 8003042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003046:	431a      	orrs	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	0007ffff 	.word	0x0007ffff

08003060 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 031f 	and.w	r3, r3, #31
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80030a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6093      	str	r3, [r2, #8]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030d0:	d101      	bne.n	80030d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80030f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003120:	d101      	bne.n	8003126 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003144:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800316c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003170:	f043 0202 	orr.w	r2, r3, #2
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <LL_ADC_IsEnabled+0x18>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <LL_ADC_IsEnabled+0x1a>
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d101      	bne.n	80031c2 <LL_ADC_IsDisableOngoing+0x18>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <LL_ADC_IsDisableOngoing+0x1a>
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031e4:	f043 0204 	orr.w	r2, r3, #4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003208:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800320c:	f043 0210 	orr.w	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b04      	cmp	r3, #4
 8003232:	d101      	bne.n	8003238 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003256:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b08      	cmp	r3, #8
 8003280:	d101      	bne.n	8003286 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b089      	sub	sp, #36	@ 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e167      	b.n	800357e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fd ff31 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fef1 	bl	80030bc <LL_ADC_IsDeepPowerDownEnabled>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fed7 	bl	8003098 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ff0c 	bl	800310c <LL_ADC_IsInternalRegulatorEnabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d115      	bne.n	8003326 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fef0 	bl	80030e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003304:	4ba0      	ldr	r3, [pc, #640]	@ (8003588 <HAL_ADC_Init+0x2f4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	4aa0      	ldr	r2, [pc, #640]	@ (800358c <HAL_ADC_Init+0x2f8>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	3301      	adds	r3, #1
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003318:	e002      	b.n	8003320 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3b01      	subs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f9      	bne.n	800331a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff feee 	bl	800310c <LL_ADC_IsInternalRegulatorEnabled>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10d      	bne.n	8003352 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333a:	f043 0210 	orr.w	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff62 	bl	8003220 <LL_ADC_REG_IsConversionOngoing>
 800335c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 8100 	bne.w	800356c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 80fc 	bne.w	800356c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800337c:	f043 0202 	orr.w	r2, r3, #2
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fefb 	bl	8003184 <LL_ADC_IsEnabled>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d111      	bne.n	80033b8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003394:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003398:	f7ff fef4 	bl	8003184 <LL_ADC_IsEnabled>
 800339c:	4604      	mov	r4, r0
 800339e:	487c      	ldr	r0, [pc, #496]	@ (8003590 <HAL_ADC_Init+0x2fc>)
 80033a0:	f7ff fef0 	bl	8003184 <LL_ADC_IsEnabled>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4323      	orrs	r3, r4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4619      	mov	r1, r3
 80033b2:	4878      	ldr	r0, [pc, #480]	@ (8003594 <HAL_ADC_Init+0x300>)
 80033b4:	f7ff fcf4 	bl	8002da0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	7f5b      	ldrb	r3, [r3, #29]
 80033bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80033c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80033ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d106      	bne.n	80033f4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	045b      	lsls	r3, r3, #17
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d009      	beq.n	8003410 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	4b60      	ldr	r3, [pc, #384]	@ (8003598 <HAL_ADC_Init+0x304>)
 8003418:	4013      	ands	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	430b      	orrs	r3, r1
 8003422:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ff15 	bl	800326e <LL_ADC_INJ_IsConversionOngoing>
 8003444:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d16d      	bne.n	8003528 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d16a      	bne.n	8003528 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003456:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800345e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800346e:	f023 0302 	bic.w	r3, r3, #2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	69b9      	ldr	r1, [r7, #24]
 8003478:	430b      	orrs	r3, r1
 800347a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d017      	beq.n	80034b4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003492:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800349c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80034a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6911      	ldr	r1, [r2, #16]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80034b2:	e013      	b.n	80034dc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80034c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80034d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d118      	bne.n	8003518 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80034f0:	f023 0304 	bic.w	r3, r3, #4
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034fc:	4311      	orrs	r1, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003502:	4311      	orrs	r1, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003508:	430a      	orrs	r2, r1
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	611a      	str	r2, [r3, #16]
 8003516:	e007      	b.n	8003528 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d10c      	bne.n	800354a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	f023 010f 	bic.w	r1, r3, #15
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
 8003548:	e007      	b.n	800355a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 020f 	bic.w	r2, r2, #15
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	@ 0x5c
 800356a:	e007      	b.n	800357c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003570:	f043 0210 	orr.w	r2, r3, #16
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800357c:	7ffb      	ldrb	r3, [r7, #31]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3724      	adds	r7, #36	@ 0x24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd90      	pop	{r4, r7, pc}
 8003586:	bf00      	nop
 8003588:	20000f44 	.word	0x20000f44
 800358c:	053e2d63 	.word	0x053e2d63
 8003590:	50000100 	.word	0x50000100
 8003594:	50000300 	.word	0x50000300
 8003598:	fff04007 	.word	0xfff04007

0800359c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035a4:	4859      	ldr	r0, [pc, #356]	@ (800370c <HAL_ADC_Start+0x170>)
 80035a6:	f7ff fd5b 	bl	8003060 <LL_ADC_GetMultimode>
 80035aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fe35 	bl	8003220 <LL_ADC_REG_IsConversionOngoing>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f040 809f 	bne.w	80036fc <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_Start+0x30>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e09a      	b.n	8003702 <HAL_ADC_Start+0x166>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fe63 	bl	80042a0 <ADC_Enable>
 80035da:	4603      	mov	r3, r0
 80035dc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 8086 	bne.w	80036f2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a44      	ldr	r2, [pc, #272]	@ (8003710 <HAL_ADC_Start+0x174>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d002      	beq.n	800360a <HAL_ADC_Start+0x6e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	e001      	b.n	800360e <HAL_ADC_Start+0x72>
 800360a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	4293      	cmp	r3, r2
 8003614:	d002      	beq.n	800361c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d105      	bne.n	8003628 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003620:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003634:	d106      	bne.n	8003644 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363a:	f023 0206 	bic.w	r2, r3, #6
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	661a      	str	r2, [r3, #96]	@ 0x60
 8003642:	e002      	b.n	800364a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	221c      	movs	r2, #28
 8003650:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a2c      	ldr	r2, [pc, #176]	@ (8003710 <HAL_ADC_Start+0x174>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d002      	beq.n	800366a <HAL_ADC_Start+0xce>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	e001      	b.n	800366e <HAL_ADC_Start+0xd2>
 800366a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	4293      	cmp	r3, r2
 8003674:	d008      	beq.n	8003688 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b05      	cmp	r3, #5
 8003680:	d002      	beq.n	8003688 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b09      	cmp	r3, #9
 8003686:	d114      	bne.n	80036b2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800369e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fd90 	bl	80031d0 <LL_ADC_REG_StartConversion>
 80036b0:	e026      	b.n	8003700 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a13      	ldr	r2, [pc, #76]	@ (8003710 <HAL_ADC_Start+0x174>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d002      	beq.n	80036ce <HAL_ADC_Start+0x132>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	e001      	b.n	80036d2 <HAL_ADC_Start+0x136>
 80036ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036d2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00f      	beq.n	8003700 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036f0:	e006      	b.n	8003700 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80036fa:	e001      	b.n	8003700 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
 80036fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	50000300 	.word	0x50000300
 8003710:	50000100 	.word	0x50000100

08003714 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_ADC_Stop+0x16>
 8003726:	2302      	movs	r3, #2
 8003728:	e023      	b.n	8003772 <HAL_ADC_Stop+0x5e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003732:	2103      	movs	r1, #3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fcf7 	bl	8004128 <ADC_ConversionStop>
 800373a:	4603      	mov	r3, r0
 800373c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d111      	bne.n	8003768 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fe31 	bl	80043ac <ADC_Disable>
 800374a:	4603      	mov	r3, r0
 800374c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003786:	4867      	ldr	r0, [pc, #412]	@ (8003924 <HAL_ADC_PollForConversion+0x1a8>)
 8003788:	f7ff fc6a 	bl	8003060 <LL_ADC_GetMultimode>
 800378c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b08      	cmp	r3, #8
 8003794:	d102      	bne.n	800379c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003796:	2308      	movs	r3, #8
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	e02a      	b.n	80037f2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d002      	beq.n	80037ae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b09      	cmp	r3, #9
 80037ac:	d111      	bne.n	80037d2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c0:	f043 0220 	orr.w	r2, r3, #32
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0a6      	b.n	800391a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80037cc:	2304      	movs	r3, #4
 80037ce:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80037d0:	e00f      	b.n	80037f2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037d2:	4854      	ldr	r0, [pc, #336]	@ (8003924 <HAL_ADC_PollForConversion+0x1a8>)
 80037d4:	f7ff fc52 	bl	800307c <LL_ADC_GetMultiDMATransfer>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e095      	b.n	800391a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80037ee:	2304      	movs	r3, #4
 80037f0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80037f2:	f7ff fac9 	bl	8002d88 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80037f8:	e021      	b.n	800383e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003800:	d01d      	beq.n	800383e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003802:	f7ff fac1 	bl	8002d88 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <HAL_ADC_PollForConversion+0x9c>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d112      	bne.n	800383e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10b      	bne.n	800383e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382a:	f043 0204 	orr.w	r2, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e06d      	b.n	800391a <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0d6      	beq.n	80037fa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003850:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fb71 	bl	8002f44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01c      	beq.n	80038a2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7f5b      	ldrb	r3, [r3, #29]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d118      	bne.n	80038a2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b08      	cmp	r3, #8
 800387c:	d111      	bne.n	80038a2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003882:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d105      	bne.n	80038a2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a20      	ldr	r2, [pc, #128]	@ (8003928 <HAL_ADC_PollForConversion+0x1ac>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d002      	beq.n	80038b2 <HAL_ADC_PollForConversion+0x136>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	e001      	b.n	80038b6 <HAL_ADC_PollForConversion+0x13a>
 80038b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d008      	beq.n	80038d0 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d002      	beq.n	80038d0 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b09      	cmp	r3, #9
 80038ce:	d104      	bne.n	80038da <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	e00d      	b.n	80038f6 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a12      	ldr	r2, [pc, #72]	@ (8003928 <HAL_ADC_PollForConversion+0x1ac>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d002      	beq.n	80038ea <HAL_ADC_PollForConversion+0x16e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	e001      	b.n	80038ee <HAL_ADC_PollForConversion+0x172>
 80038ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038ee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d104      	bne.n	8003906 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2208      	movs	r2, #8
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e008      	b.n	8003918 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	220c      	movs	r2, #12
 8003916:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	50000300 	.word	0x50000300
 8003928:	50000100 	.word	0x50000100

0800392c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b0b6      	sub	sp, #216	@ 0xd8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_ADC_ConfigChannel+0x22>
 8003966:	2302      	movs	r3, #2
 8003968:	e3c8      	b.n	80040fc <HAL_ADC_ConfigChannel+0x7b4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fc52 	bl	8003220 <LL_ADC_REG_IsConversionOngoing>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	f040 83ad 	bne.w	80040de <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	f7ff faea 	bl	8002f6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fc40 	bl	8003220 <LL_ADC_REG_IsConversionOngoing>
 80039a0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fc60 	bl	800326e <LL_ADC_INJ_IsConversionOngoing>
 80039ae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 81d9 	bne.w	8003d6e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f040 81d4 	bne.w	8003d6e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039ce:	d10f      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2200      	movs	r2, #0
 80039da:	4619      	mov	r1, r3
 80039dc:	f7ff faf1 	bl	8002fc2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fa98 	bl	8002f1e <LL_ADC_SetSamplingTimeCommonConfig>
 80039ee:	e00e      	b.n	8003a0e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f7ff fae0 	bl	8002fc2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fa88 	bl	8002f1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	08db      	lsrs	r3, r3, #3
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d022      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6919      	ldr	r1, [r3, #16]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a40:	f7ff f9e2 	bl	8002e08 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6919      	ldr	r1, [r3, #16]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	461a      	mov	r2, r3
 8003a52:	f7ff fa2e 	bl	8002eb2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d102      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x124>
 8003a66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a6a:	e000      	b.n	8003a6e <HAL_ADC_ConfigChannel+0x126>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f7ff fa3a 	bl	8002ee8 <LL_ADC_SetOffsetSaturation>
 8003a74:	e17b      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff f9e7 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x15a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff f9dc 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	0e9b      	lsrs	r3, r3, #26
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	e01e      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x198>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff f9d1 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	e004      	b.n	8003ade <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x1b0>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	0e9b      	lsrs	r3, r3, #26
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	e018      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x1e2>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003b14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	e004      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003b20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d106      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff f9a0 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff f984 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x220>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2101      	movs	r1, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f979 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	0e9b      	lsrs	r3, r3, #26
 8003b62:	f003 021f 	and.w	r2, r3, #31
 8003b66:	e01e      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x25e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f96e 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003b96:	2320      	movs	r3, #32
 8003b98:	e004      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x276>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	0e9b      	lsrs	r3, r3, #26
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	e018      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x2a8>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003be2:	2320      	movs	r3, #32
 8003be4:	e004      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d106      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff f93d 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2102      	movs	r1, #2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff f921 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x2e6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff f916 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003c24:	4603      	mov	r3, r0
 8003c26:	0e9b      	lsrs	r3, r3, #26
 8003c28:	f003 021f 	and.w	r2, r3, #31
 8003c2c:	e01e      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x324>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2102      	movs	r1, #2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff f90b 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e004      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x33c>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0e9b      	lsrs	r3, r3, #26
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	e016      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x36a>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003c96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e004      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d106      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff f8dc 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2103      	movs	r1, #3
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff f8c0 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x3a8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2103      	movs	r1, #3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f8b5 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	0e9b      	lsrs	r3, r3, #26
 8003cea:	f003 021f 	and.w	r2, r3, #31
 8003cee:	e017      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x3d8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2103      	movs	r1, #3
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff f8aa 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003d08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003d0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003d12:	2320      	movs	r3, #32
 8003d14:	e003      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d18:	fab3 f383 	clz	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x3f0>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	0e9b      	lsrs	r3, r3, #26
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	e011      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x414>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003d46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003d50:	2320      	movs	r3, #32
 8003d52:	e003      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d106      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2103      	movs	r1, #3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff f887 	bl	8002e7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fa06 	bl	8003184 <LL_ADC_IsEnabled>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 8140 	bne.w	8004000 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6819      	ldr	r1, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f7ff f943 	bl	8003018 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4a8f      	ldr	r2, [pc, #572]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x68c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	f040 8131 	bne.w	8004000 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x47e>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0e9b      	lsrs	r3, r3, #26
 8003db4:	3301      	adds	r3, #1
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2b09      	cmp	r3, #9
 8003dbc:	bf94      	ite	ls
 8003dbe:	2301      	movls	r3, #1
 8003dc0:	2300      	movhi	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e019      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x4b2>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003dd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dd6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003dd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003dde:	2320      	movs	r3, #32
 8003de0:	e003      	b.n	8003dea <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003de4:	fab3 f383 	clz	r3, r3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2b09      	cmp	r3, #9
 8003df2:	bf94      	ite	ls
 8003df4:	2301      	movls	r3, #1
 8003df6:	2300      	movhi	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d079      	beq.n	8003ef2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d107      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x4d2>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	0e9b      	lsrs	r3, r3, #26
 8003e10:	3301      	adds	r3, #1
 8003e12:	069b      	lsls	r3, r3, #26
 8003e14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e18:	e015      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x4fe>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e2a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003e32:	2320      	movs	r3, #32
 8003e34:	e003      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	069b      	lsls	r3, r3, #26
 8003e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x51e>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0e9b      	lsrs	r3, r3, #26
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2101      	movs	r1, #1
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	e017      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x54e>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e76:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003e7e:	2320      	movs	r3, #32
 8003e80:	e003      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e84:	fab3 f383 	clz	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	ea42 0103 	orr.w	r1, r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x574>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	0e9b      	lsrs	r3, r3, #26
 8003eac:	3301      	adds	r3, #1
 8003eae:	f003 021f 	and.w	r2, r3, #31
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	051b      	lsls	r3, r3, #20
 8003eba:	e018      	b.n	8003eee <HAL_ADC_ConfigChannel+0x5a6>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	e003      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f003 021f 	and.w	r2, r3, #31
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	e081      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d107      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x5c6>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	0e9b      	lsrs	r3, r3, #26
 8003f04:	3301      	adds	r3, #1
 8003f06:	069b      	lsls	r3, r3, #26
 8003f08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f0c:	e015      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x5f2>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003f26:	2320      	movs	r3, #32
 8003f28:	e003      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	fab3 f383 	clz	r3, r3
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	3301      	adds	r3, #1
 8003f34:	069b      	lsls	r3, r3, #26
 8003f36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x612>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	0e9b      	lsrs	r3, r3, #26
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2101      	movs	r1, #1
 8003f54:	fa01 f303 	lsl.w	r3, r1, r3
 8003f58:	e017      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x642>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	61fb      	str	r3, [r7, #28]
  return result;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003f72:	2320      	movs	r3, #32
 8003f74:	e003      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	fab3 f383 	clz	r3, r3
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	ea42 0103 	orr.w	r1, r2, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x66e>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	0e9b      	lsrs	r3, r3, #26
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f003 021f 	and.w	r2, r3, #31
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	3b1e      	subs	r3, #30
 8003fae:	051b      	lsls	r3, r3, #20
 8003fb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fb4:	e01e      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x6ac>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	613b      	str	r3, [r7, #16]
  return result;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003fce:	2320      	movs	r3, #32
 8003fd0:	e006      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x698>
 8003fd2:	bf00      	nop
 8003fd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f003 021f 	and.w	r2, r3, #31
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	3b1e      	subs	r3, #30
 8003fee:	051b      	lsls	r3, r3, #20
 8003ff0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ff4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7fe ffe1 	bl	8002fc2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b3f      	ldr	r3, [pc, #252]	@ (8004104 <HAL_ADC_ConfigChannel+0x7bc>)
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d071      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800400c:	483e      	ldr	r0, [pc, #248]	@ (8004108 <HAL_ADC_ConfigChannel+0x7c0>)
 800400e:	f7fe feed 	bl	8002dec <LL_ADC_GetCommonPathInternalCh>
 8004012:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a3c      	ldr	r2, [pc, #240]	@ (800410c <HAL_ADC_ConfigChannel+0x7c4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_ADC_ConfigChannel+0x6e2>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3a      	ldr	r2, [pc, #232]	@ (8004110 <HAL_ADC_ConfigChannel+0x7c8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d127      	bne.n	800407a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800402a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800402e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d121      	bne.n	800407a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800403e:	d157      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004044:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004048:	4619      	mov	r1, r3
 800404a:	482f      	ldr	r0, [pc, #188]	@ (8004108 <HAL_ADC_ConfigChannel+0x7c0>)
 800404c:	f7fe febb 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004050:	4b30      	ldr	r3, [pc, #192]	@ (8004114 <HAL_ADC_ConfigChannel+0x7cc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	4a30      	ldr	r2, [pc, #192]	@ (8004118 <HAL_ADC_ConfigChannel+0x7d0>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800406a:	e002      	b.n	8004072 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3b01      	subs	r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f9      	bne.n	800406c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004078:	e03a      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a27      	ldr	r2, [pc, #156]	@ (800411c <HAL_ADC_ConfigChannel+0x7d4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d113      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004088:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10d      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a22      	ldr	r2, [pc, #136]	@ (8004120 <HAL_ADC_ConfigChannel+0x7d8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02a      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800409a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800409e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040a2:	4619      	mov	r1, r3
 80040a4:	4818      	ldr	r0, [pc, #96]	@ (8004108 <HAL_ADC_ConfigChannel+0x7c0>)
 80040a6:	f7fe fe8e 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040aa:	e021      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004124 <HAL_ADC_ConfigChannel+0x7dc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d11c      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d116      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a16      	ldr	r2, [pc, #88]	@ (8004120 <HAL_ADC_ConfigChannel+0x7d8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d011      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040d4:	4619      	mov	r1, r3
 80040d6:	480c      	ldr	r0, [pc, #48]	@ (8004108 <HAL_ADC_ConfigChannel+0x7c0>)
 80040d8:	f7fe fe75 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
 80040dc:	e008      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e2:	f043 0220 	orr.w	r2, r3, #32
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80040f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	37d8      	adds	r7, #216	@ 0xd8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	80080000 	.word	0x80080000
 8004108:	50000300 	.word	0x50000300
 800410c:	c3210000 	.word	0xc3210000
 8004110:	90c00010 	.word	0x90c00010
 8004114:	20000f44 	.word	0x20000f44
 8004118:	053e2d63 	.word	0x053e2d63
 800411c:	c7520000 	.word	0xc7520000
 8004120:	50000100 	.word	0x50000100
 8004124:	cb840000 	.word	0xcb840000

08004128 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff f86e 	bl	8003220 <LL_ADC_REG_IsConversionOngoing>
 8004144:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff f88f 	bl	800326e <LL_ADC_INJ_IsConversionOngoing>
 8004150:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8098 	beq.w	8004290 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d02a      	beq.n	80041c4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	7f5b      	ldrb	r3, [r3, #29]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d126      	bne.n	80041c4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	7f1b      	ldrb	r3, [r3, #28]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d122      	bne.n	80041c4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800417e:	2301      	movs	r3, #1
 8004180:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004182:	e014      	b.n	80041ae <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4a45      	ldr	r2, [pc, #276]	@ (800429c <ADC_ConversionStop+0x174>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d90d      	bls.n	80041a8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004190:	f043 0210 	orr.w	r2, r3, #16
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419c:	f043 0201 	orr.w	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e074      	b.n	8004292 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	3301      	adds	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b8:	2b40      	cmp	r3, #64	@ 0x40
 80041ba:	d1e3      	bne.n	8004184 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2240      	movs	r2, #64	@ 0x40
 80041c2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d014      	beq.n	80041f4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff f826 	bl	8003220 <LL_ADC_REG_IsConversionOngoing>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe ffe3 	bl	80031aa <LL_ADC_IsDisableOngoing>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff f802 	bl	80031f8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d014      	beq.n	8004224 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff f835 	bl	800326e <LL_ADC_INJ_IsConversionOngoing>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00c      	beq.n	8004224 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe ffcb 	bl	80031aa <LL_ADC_IsDisableOngoing>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d104      	bne.n	8004224 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff f811 	bl	8003246 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d005      	beq.n	8004236 <ADC_ConversionStop+0x10e>
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d105      	bne.n	800423c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004230:	230c      	movs	r3, #12
 8004232:	617b      	str	r3, [r7, #20]
        break;
 8004234:	e005      	b.n	8004242 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004236:	2308      	movs	r3, #8
 8004238:	617b      	str	r3, [r7, #20]
        break;
 800423a:	e002      	b.n	8004242 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800423c:	2304      	movs	r3, #4
 800423e:	617b      	str	r3, [r7, #20]
        break;
 8004240:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004242:	f7fe fda1 	bl	8002d88 <HAL_GetTick>
 8004246:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004248:	e01b      	b.n	8004282 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800424a:	f7fe fd9d 	bl	8002d88 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b05      	cmp	r3, #5
 8004256:	d914      	bls.n	8004282 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426a:	f043 0210 	orr.w	r2, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e007      	b.n	8004292 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1dc      	bne.n	800424a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	a33fffff 	.word	0xa33fffff

080042a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe ff67 	bl	8003184 <LL_ADC_IsEnabled>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d169      	bne.n	8004390 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	4b36      	ldr	r3, [pc, #216]	@ (800439c <ADC_Enable+0xfc>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00d      	beq.n	80042e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ce:	f043 0210 	orr.w	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042da:	f043 0201 	orr.w	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e055      	b.n	8004392 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe ff22 	bl	8003134 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80042f0:	482b      	ldr	r0, [pc, #172]	@ (80043a0 <ADC_Enable+0x100>)
 80042f2:	f7fe fd7b 	bl	8002dec <LL_ADC_GetCommonPathInternalCh>
 80042f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80042f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d013      	beq.n	8004328 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004300:	4b28      	ldr	r3, [pc, #160]	@ (80043a4 <ADC_Enable+0x104>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	099b      	lsrs	r3, r3, #6
 8004306:	4a28      	ldr	r2, [pc, #160]	@ (80043a8 <ADC_Enable+0x108>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	4613      	mov	r3, r2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800431a:	e002      	b.n	8004322 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3b01      	subs	r3, #1
 8004320:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f9      	bne.n	800431c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004328:	f7fe fd2e 	bl	8002d88 <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800432e:	e028      	b.n	8004382 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe ff25 	bl	8003184 <LL_ADC_IsEnabled>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe fef5 	bl	8003134 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800434a:	f7fe fd1d 	bl	8002d88 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d914      	bls.n	8004382 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d00d      	beq.n	8004382 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436a:	f043 0210 	orr.w	r2, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004376:	f043 0201 	orr.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e007      	b.n	8004392 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b01      	cmp	r3, #1
 800438e:	d1cf      	bne.n	8004330 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	8000003f 	.word	0x8000003f
 80043a0:	50000300 	.word	0x50000300
 80043a4:	20000f44 	.word	0x20000f44
 80043a8:	053e2d63 	.word	0x053e2d63

080043ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fef6 	bl	80031aa <LL_ADC_IsDisableOngoing>
 80043be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fedd 	bl	8003184 <LL_ADC_IsEnabled>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d047      	beq.n	8004460 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d144      	bne.n	8004460 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030d 	and.w	r3, r3, #13
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d10c      	bne.n	80043fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe feb7 	bl	800315c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2203      	movs	r2, #3
 80043f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043f6:	f7fe fcc7 	bl	8002d88 <HAL_GetTick>
 80043fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043fc:	e029      	b.n	8004452 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004402:	f043 0210 	orr.w	r2, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e023      	b.n	8004462 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800441a:	f7fe fcb5 	bl	8002d88 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d914      	bls.n	8004452 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	f043 0210 	orr.w	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004446:	f043 0201 	orr.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e007      	b.n	8004462 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1dc      	bne.n	800441a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <LL_ADC_IsEnabled>:
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <LL_ADC_IsEnabled+0x18>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <LL_ADC_IsEnabled+0x1a>
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_REG_IsConversionOngoing>:
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d101      	bne.n	80044a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b0a1      	sub	sp, #132	@ 0x84
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e08b      	b.n	80045ee <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80044de:	2300      	movs	r3, #0
 80044e0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80044e2:	2300      	movs	r3, #0
 80044e4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044ee:	d102      	bne.n	80044f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044f0:	4b41      	ldr	r3, [pc, #260]	@ (80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	e001      	b.n	80044fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e06a      	b.n	80045ee <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ffb8 	bl	8004490 <LL_ADC_REG_IsConversionOngoing>
 8004520:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ffb2 	bl	8004490 <LL_ADC_REG_IsConversionOngoing>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d14c      	bne.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004532:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004534:	2b00      	cmp	r3, #0
 8004536:	d149      	bne.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004538:	4b30      	ldr	r3, [pc, #192]	@ (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800453a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d028      	beq.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6859      	ldr	r1, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004556:	035b      	lsls	r3, r3, #13
 8004558:	430b      	orrs	r3, r1
 800455a:	431a      	orrs	r2, r3
 800455c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800455e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004560:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004564:	f7ff ff81 	bl	800446a <LL_ADC_IsEnabled>
 8004568:	4604      	mov	r4, r0
 800456a:	4823      	ldr	r0, [pc, #140]	@ (80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800456c:	f7ff ff7d 	bl	800446a <LL_ADC_IsEnabled>
 8004570:	4603      	mov	r3, r0
 8004572:	4323      	orrs	r3, r4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d133      	bne.n	80045e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004578:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004580:	f023 030f 	bic.w	r3, r3, #15
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	6811      	ldr	r1, [r2, #0]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	6892      	ldr	r2, [r2, #8]
 800458c:	430a      	orrs	r2, r1
 800458e:	431a      	orrs	r2, r3
 8004590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004592:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004594:	e024      	b.n	80045e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800459e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045a2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80045a6:	f7ff ff60 	bl	800446a <LL_ADC_IsEnabled>
 80045aa:	4604      	mov	r4, r0
 80045ac:	4812      	ldr	r0, [pc, #72]	@ (80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80045ae:	f7ff ff5c 	bl	800446a <LL_ADC_IsEnabled>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4323      	orrs	r3, r4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d112      	bne.n	80045e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80045c2:	f023 030f 	bic.w	r3, r3, #15
 80045c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80045c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045ca:	e009      	b.n	80045e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80045de:	e000      	b.n	80045e2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80045ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3784      	adds	r7, #132	@ 0x84
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd90      	pop	{r4, r7, pc}
 80045f6:	bf00      	nop
 80045f8:	50000100 	.word	0x50000100
 80045fc:	50000300 	.word	0x50000300

08004600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004610:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800461c:	4013      	ands	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800462c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004632:	4a04      	ldr	r2, [pc, #16]	@ (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	60d3      	str	r3, [r2, #12]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	e000ed00 	.word	0xe000ed00

08004648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800464c:	4b04      	ldr	r3, [pc, #16]	@ (8004660 <__NVIC_GetPriorityGrouping+0x18>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	f003 0307 	and.w	r3, r3, #7
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	2b00      	cmp	r3, #0
 8004674:	db0b      	blt.n	800468e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	4907      	ldr	r1, [pc, #28]	@ (800469c <__NVIC_EnableIRQ+0x38>)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2001      	movs	r0, #1
 8004686:	fa00 f202 	lsl.w	r2, r0, r2
 800468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000e100 	.word	0xe000e100

080046a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db0a      	blt.n	80046ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	490c      	ldr	r1, [pc, #48]	@ (80046ec <__NVIC_SetPriority+0x4c>)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	0112      	lsls	r2, r2, #4
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	440b      	add	r3, r1
 80046c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c8:	e00a      	b.n	80046e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4908      	ldr	r1, [pc, #32]	@ (80046f0 <__NVIC_SetPriority+0x50>)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	3b04      	subs	r3, #4
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	440b      	add	r3, r1
 80046de:	761a      	strb	r2, [r3, #24]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000e100 	.word	0xe000e100
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	@ 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f1c3 0307 	rsb	r3, r3, #7
 800470e:	2b04      	cmp	r3, #4
 8004710:	bf28      	it	cs
 8004712:	2304      	movcs	r3, #4
 8004714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3304      	adds	r3, #4
 800471a:	2b06      	cmp	r3, #6
 800471c:	d902      	bls.n	8004724 <NVIC_EncodePriority+0x30>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3b03      	subs	r3, #3
 8004722:	e000      	b.n	8004726 <NVIC_EncodePriority+0x32>
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	401a      	ands	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800473c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	43d9      	mvns	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	4313      	orrs	r3, r2
         );
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	@ 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800476c:	d301      	bcc.n	8004772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800476e:	2301      	movs	r3, #1
 8004770:	e00f      	b.n	8004792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004772:	4a0a      	ldr	r2, [pc, #40]	@ (800479c <SysTick_Config+0x40>)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800477a:	210f      	movs	r1, #15
 800477c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004780:	f7ff ff8e 	bl	80046a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004784:	4b05      	ldr	r3, [pc, #20]	@ (800479c <SysTick_Config+0x40>)
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800478a:	4b04      	ldr	r3, [pc, #16]	@ (800479c <SysTick_Config+0x40>)
 800478c:	2207      	movs	r2, #7
 800478e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	e000e010 	.word	0xe000e010

080047a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff29 	bl	8004600 <__NVIC_SetPriorityGrouping>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	4603      	mov	r3, r0
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047c4:	f7ff ff40 	bl	8004648 <__NVIC_GetPriorityGrouping>
 80047c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	6978      	ldr	r0, [r7, #20]
 80047d0:	f7ff ff90 	bl	80046f4 <NVIC_EncodePriority>
 80047d4:	4602      	mov	r2, r0
 80047d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff ff5f 	bl	80046a0 <__NVIC_SetPriority>
}
 80047e2:	bf00      	nop
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	4603      	mov	r3, r0
 80047f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ff33 	bl	8004664 <__NVIC_EnableIRQ>
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff ffa4 	bl	800475c <SysTick_Config>
 8004814:	4603      	mov	r3, r0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d005      	beq.n	8004842 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2204      	movs	r2, #4
 800483a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
 8004840:	e037      	b.n	80048b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 020e 	bic.w	r2, r2, #14
 8004850:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800485c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004860:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f003 021f 	and.w	r2, r3, #31
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	2101      	movs	r1, #1
 8004880:	fa01 f202 	lsl.w	r2, r1, r2
 8004884:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800488e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00c      	beq.n	80048b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d00d      	beq.n	8004904 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2204      	movs	r2, #4
 80048ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
 8004902:	e047      	b.n	8004994 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 020e 	bic.w	r2, r2, #14
 8004912:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0201 	bic.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004938:	f003 021f 	and.w	r2, r3, #31
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	2101      	movs	r1, #1
 8004942:	fa01 f202 	lsl.w	r2, r1, r2
 8004946:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004950:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00c      	beq.n	8004974 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004964:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004968:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004972:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
    }
  }
  return status;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049ae:	e15a      	b.n	8004c66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2101      	movs	r1, #1
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	4013      	ands	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 814c 	beq.w	8004c60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d005      	beq.n	80049e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d130      	bne.n	8004a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	2203      	movs	r2, #3
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4013      	ands	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a16:	2201      	movs	r2, #1
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4013      	ands	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0201 	and.w	r2, r3, #1
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d017      	beq.n	8004a7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	2203      	movs	r2, #3
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4013      	ands	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d123      	bne.n	8004ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	08da      	lsrs	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3208      	adds	r2, #8
 8004a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	220f      	movs	r2, #15
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	08da      	lsrs	r2, r3, #3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3208      	adds	r2, #8
 8004acc:	6939      	ldr	r1, [r7, #16]
 8004ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	2203      	movs	r2, #3
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f003 0203 	and.w	r2, r3, #3
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80a6 	beq.w	8004c60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b14:	4b5b      	ldr	r3, [pc, #364]	@ (8004c84 <HAL_GPIO_Init+0x2e4>)
 8004b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b18:	4a5a      	ldr	r2, [pc, #360]	@ (8004c84 <HAL_GPIO_Init+0x2e4>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b20:	4b58      	ldr	r3, [pc, #352]	@ (8004c84 <HAL_GPIO_Init+0x2e4>)
 8004b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b2c:	4a56      	ldr	r2, [pc, #344]	@ (8004c88 <HAL_GPIO_Init+0x2e8>)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	3302      	adds	r3, #2
 8004b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	220f      	movs	r2, #15
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b56:	d01f      	beq.n	8004b98 <HAL_GPIO_Init+0x1f8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a4c      	ldr	r2, [pc, #304]	@ (8004c8c <HAL_GPIO_Init+0x2ec>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d019      	beq.n	8004b94 <HAL_GPIO_Init+0x1f4>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a4b      	ldr	r2, [pc, #300]	@ (8004c90 <HAL_GPIO_Init+0x2f0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <HAL_GPIO_Init+0x1f0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c94 <HAL_GPIO_Init+0x2f4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00d      	beq.n	8004b8c <HAL_GPIO_Init+0x1ec>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a49      	ldr	r2, [pc, #292]	@ (8004c98 <HAL_GPIO_Init+0x2f8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d007      	beq.n	8004b88 <HAL_GPIO_Init+0x1e8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a48      	ldr	r2, [pc, #288]	@ (8004c9c <HAL_GPIO_Init+0x2fc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d101      	bne.n	8004b84 <HAL_GPIO_Init+0x1e4>
 8004b80:	2305      	movs	r3, #5
 8004b82:	e00a      	b.n	8004b9a <HAL_GPIO_Init+0x1fa>
 8004b84:	2306      	movs	r3, #6
 8004b86:	e008      	b.n	8004b9a <HAL_GPIO_Init+0x1fa>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	e006      	b.n	8004b9a <HAL_GPIO_Init+0x1fa>
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e004      	b.n	8004b9a <HAL_GPIO_Init+0x1fa>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e002      	b.n	8004b9a <HAL_GPIO_Init+0x1fa>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_GPIO_Init+0x1fa>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	f002 0203 	and.w	r2, r2, #3
 8004ba0:	0092      	lsls	r2, r2, #2
 8004ba2:	4093      	lsls	r3, r2
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004baa:	4937      	ldr	r1, [pc, #220]	@ (8004c88 <HAL_GPIO_Init+0x2e8>)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	089b      	lsrs	r3, r3, #2
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bb8:	4b39      	ldr	r3, [pc, #228]	@ (8004ca0 <HAL_GPIO_Init+0x300>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bdc:	4a30      	ldr	r2, [pc, #192]	@ (8004ca0 <HAL_GPIO_Init+0x300>)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004be2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca0 <HAL_GPIO_Init+0x300>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	43db      	mvns	r3, r3
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c06:	4a26      	ldr	r2, [pc, #152]	@ (8004ca0 <HAL_GPIO_Init+0x300>)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c0c:	4b24      	ldr	r3, [pc, #144]	@ (8004ca0 <HAL_GPIO_Init+0x300>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	43db      	mvns	r3, r3
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c30:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca0 <HAL_GPIO_Init+0x300>)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca0 <HAL_GPIO_Init+0x300>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ca0 <HAL_GPIO_Init+0x300>)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	3301      	adds	r3, #1
 8004c64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f47f ae9d 	bne.w	80049b0 <HAL_GPIO_Init+0x10>
  }
}
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	48000400 	.word	0x48000400
 8004c90:	48000800 	.word	0x48000800
 8004c94:	48000c00 	.word	0x48000c00
 8004c98:	48001000 	.word	0x48001000
 8004c9c:	48001400 	.word	0x48001400
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cb4:	787b      	ldrb	r3, [r7, #1]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004cc0:	e002      	b.n	8004cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d141      	bne.n	8004d66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cee:	d131      	bne.n	8004d54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cf0:	4b47      	ldr	r3, [pc, #284]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cf6:	4a46      	ldr	r2, [pc, #280]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d00:	4b43      	ldr	r3, [pc, #268]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d08:	4a41      	ldr	r2, [pc, #260]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d10:	4b40      	ldr	r3, [pc, #256]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2232      	movs	r2, #50	@ 0x32
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004e18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	0c9b      	lsrs	r3, r3, #18
 8004d22:	3301      	adds	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d26:	e002      	b.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d2e:	4b38      	ldr	r3, [pc, #224]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d3a:	d102      	bne.n	8004d42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f2      	bne.n	8004d28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d42:	4b33      	ldr	r3, [pc, #204]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4e:	d158      	bne.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e057      	b.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d54:	4b2e      	ldr	r3, [pc, #184]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d64:	e04d      	b.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d6c:	d141      	bne.n	8004df2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d6e:	4b28      	ldr	r3, [pc, #160]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d7a:	d131      	bne.n	8004de0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d7c:	4b24      	ldr	r3, [pc, #144]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d82:	4a23      	ldr	r2, [pc, #140]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d8c:	4b20      	ldr	r3, [pc, #128]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d94:	4a1e      	ldr	r2, [pc, #120]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2232      	movs	r2, #50	@ 0x32
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	0c9b      	lsrs	r3, r3, #18
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004db2:	e002      	b.n	8004dba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dba:	4b15      	ldr	r3, [pc, #84]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc6:	d102      	bne.n	8004dce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f2      	bne.n	8004db4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dce:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dda:	d112      	bne.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e011      	b.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004de0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004de6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004df0:	e007      	b.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004df2:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dfa:	4a05      	ldr	r2, [pc, #20]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	40007000 	.word	0x40007000
 8004e14:	20000f44 	.word	0x20000f44
 8004e18:	431bde83 	.word	0x431bde83

08004e1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e20:	4b05      	ldr	r3, [pc, #20]	@ (8004e38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	4a04      	ldr	r2, [pc, #16]	@ (8004e38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e2a:	6093      	str	r3, [r2, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40007000 	.word	0x40007000

08004e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e2fe      	b.n	800544c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d075      	beq.n	8004f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5a:	4b97      	ldr	r3, [pc, #604]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e64:	4b94      	ldr	r3, [pc, #592]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b0c      	cmp	r3, #12
 8004e72:	d102      	bne.n	8004e7a <HAL_RCC_OscConfig+0x3e>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d002      	beq.n	8004e80 <HAL_RCC_OscConfig+0x44>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d10b      	bne.n	8004e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e80:	4b8d      	ldr	r3, [pc, #564]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d05b      	beq.n	8004f44 <HAL_RCC_OscConfig+0x108>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d157      	bne.n	8004f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e2d9      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea0:	d106      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x74>
 8004ea2:	4b85      	ldr	r3, [pc, #532]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a84      	ldr	r2, [pc, #528]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e01d      	b.n	8004eec <HAL_RCC_OscConfig+0xb0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x98>
 8004eba:	4b7f      	ldr	r3, [pc, #508]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a7e      	ldr	r2, [pc, #504]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	4b7c      	ldr	r3, [pc, #496]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a7b      	ldr	r2, [pc, #492]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e00b      	b.n	8004eec <HAL_RCC_OscConfig+0xb0>
 8004ed4:	4b78      	ldr	r3, [pc, #480]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a77      	ldr	r2, [pc, #476]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	4b75      	ldr	r3, [pc, #468]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a74      	ldr	r2, [pc, #464]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d013      	beq.n	8004f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fd ff48 	bl	8002d88 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fd ff44 	bl	8002d88 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	@ 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e29e      	b.n	800544c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0xc0>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fd ff34 	bl	8002d88 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f24:	f7fd ff30 	bl	8002d88 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b64      	cmp	r3, #100	@ 0x64
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e28a      	b.n	800544c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f36:	4b60      	ldr	r3, [pc, #384]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0xe8>
 8004f42:	e000      	b.n	8004f46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d075      	beq.n	800503e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f52:	4b59      	ldr	r3, [pc, #356]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f5c:	4b56      	ldr	r3, [pc, #344]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b0c      	cmp	r3, #12
 8004f6a:	d102      	bne.n	8004f72 <HAL_RCC_OscConfig+0x136>
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d002      	beq.n	8004f78 <HAL_RCC_OscConfig+0x13c>
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d11f      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f78:	4b4f      	ldr	r3, [pc, #316]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_OscConfig+0x154>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e25d      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f90:	4b49      	ldr	r3, [pc, #292]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	061b      	lsls	r3, r3, #24
 8004f9e:	4946      	ldr	r1, [pc, #280]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fa4:	4b45      	ldr	r3, [pc, #276]	@ (80050bc <HAL_RCC_OscConfig+0x280>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fd fea1 	bl	8002cf0 <HAL_InitTick>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d043      	beq.n	800503c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e249      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d023      	beq.n	8005008 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a3c      	ldr	r2, [pc, #240]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fd fedc 	bl	8002d88 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd4:	f7fd fed8 	bl	8002d88 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e232      	b.n	800544c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe6:	4b34      	ldr	r3, [pc, #208]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff2:	4b31      	ldr	r3, [pc, #196]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	492d      	ldr	r1, [pc, #180]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	604b      	str	r3, [r1, #4]
 8005006:	e01a      	b.n	800503e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005008:	4b2b      	ldr	r3, [pc, #172]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2a      	ldr	r2, [pc, #168]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 800500e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fd feb8 	bl	8002d88 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501c:	f7fd feb4 	bl	8002d88 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e20e      	b.n	800544c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800502e:	4b22      	ldr	r3, [pc, #136]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x1e0>
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800503c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d041      	beq.n	80050ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01c      	beq.n	800508c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005052:	4b19      	ldr	r3, [pc, #100]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8005054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005058:	4a17      	ldr	r2, [pc, #92]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005062:	f7fd fe91 	bl	8002d88 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800506a:	f7fd fe8d 	bl	8002d88 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e1e7      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800507c:	4b0e      	ldr	r3, [pc, #56]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 800507e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0ef      	beq.n	800506a <HAL_RCC_OscConfig+0x22e>
 800508a:	e020      	b.n	80050ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800508c:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 800508e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005092:	4a09      	ldr	r2, [pc, #36]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509c:	f7fd fe74 	bl	8002d88 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050a2:	e00d      	b.n	80050c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a4:	f7fd fe70 	bl	8002d88 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d906      	bls.n	80050c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e1ca      	b.n	800544c <HAL_RCC_OscConfig+0x610>
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	20000f48 	.word	0x20000f48
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050c0:	4b8c      	ldr	r3, [pc, #560]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80050c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ea      	bne.n	80050a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80a6 	beq.w	8005228 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050dc:	2300      	movs	r3, #0
 80050de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050e0:	4b84      	ldr	r3, [pc, #528]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_OscConfig+0x2b4>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x2b6>
 80050f0:	2300      	movs	r3, #0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f6:	4b7f      	ldr	r3, [pc, #508]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fa:	4a7e      	ldr	r2, [pc, #504]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005100:	6593      	str	r3, [r2, #88]	@ 0x58
 8005102:	4b7c      	ldr	r3, [pc, #496]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800510e:	2301      	movs	r3, #1
 8005110:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005112:	4b79      	ldr	r3, [pc, #484]	@ (80052f8 <HAL_RCC_OscConfig+0x4bc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d118      	bne.n	8005150 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800511e:	4b76      	ldr	r3, [pc, #472]	@ (80052f8 <HAL_RCC_OscConfig+0x4bc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a75      	ldr	r2, [pc, #468]	@ (80052f8 <HAL_RCC_OscConfig+0x4bc>)
 8005124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800512a:	f7fd fe2d 	bl	8002d88 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005132:	f7fd fe29 	bl	8002d88 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e183      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005144:	4b6c      	ldr	r3, [pc, #432]	@ (80052f8 <HAL_RCC_OscConfig+0x4bc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d108      	bne.n	800516a <HAL_RCC_OscConfig+0x32e>
 8005158:	4b66      	ldr	r3, [pc, #408]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 800515a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515e:	4a65      	ldr	r2, [pc, #404]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005168:	e024      	b.n	80051b4 <HAL_RCC_OscConfig+0x378>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b05      	cmp	r3, #5
 8005170:	d110      	bne.n	8005194 <HAL_RCC_OscConfig+0x358>
 8005172:	4b60      	ldr	r3, [pc, #384]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 8005174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005178:	4a5e      	ldr	r2, [pc, #376]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 800517a:	f043 0304 	orr.w	r3, r3, #4
 800517e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005182:	4b5c      	ldr	r3, [pc, #368]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 8005184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005188:	4a5a      	ldr	r2, [pc, #360]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005192:	e00f      	b.n	80051b4 <HAL_RCC_OscConfig+0x378>
 8005194:	4b57      	ldr	r3, [pc, #348]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519a:	4a56      	ldr	r2, [pc, #344]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051a4:	4b53      	ldr	r3, [pc, #332]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051aa:	4a52      	ldr	r2, [pc, #328]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80051ac:	f023 0304 	bic.w	r3, r3, #4
 80051b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d016      	beq.n	80051ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fd fde4 	bl	8002d88 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fd fde0 	bl	8002d88 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e138      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051da:	4b46      	ldr	r3, [pc, #280]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ed      	beq.n	80051c4 <HAL_RCC_OscConfig+0x388>
 80051e8:	e015      	b.n	8005216 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ea:	f7fd fdcd 	bl	8002d88 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f0:	e00a      	b.n	8005208 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f2:	f7fd fdc9 	bl	8002d88 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005200:	4293      	cmp	r3, r2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e121      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005208:	4b3a      	ldr	r3, [pc, #232]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ed      	bne.n	80051f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005216:	7ffb      	ldrb	r3, [r7, #31]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521c:	4b35      	ldr	r3, [pc, #212]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005220:	4a34      	ldr	r2, [pc, #208]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 8005222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005226:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b00      	cmp	r3, #0
 8005232:	d03c      	beq.n	80052ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01c      	beq.n	8005276 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800523c:	4b2d      	ldr	r3, [pc, #180]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 800523e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005242:	4a2c      	ldr	r2, [pc, #176]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd fd9c 	bl	8002d88 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005254:	f7fd fd98 	bl	8002d88 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e0f2      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005266:	4b23      	ldr	r3, [pc, #140]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 8005268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ef      	beq.n	8005254 <HAL_RCC_OscConfig+0x418>
 8005274:	e01b      	b.n	80052ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005276:	4b1f      	ldr	r3, [pc, #124]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 8005278:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800527c:	4a1d      	ldr	r2, [pc, #116]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005286:	f7fd fd7f 	bl	8002d88 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800528e:	f7fd fd7b 	bl	8002d88 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e0d5      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052a0:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80052a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ef      	bne.n	800528e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80c9 	beq.w	800544a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052b8:	4b0e      	ldr	r3, [pc, #56]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 030c 	and.w	r3, r3, #12
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	f000 8083 	beq.w	80053cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d15e      	bne.n	800538c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ce:	4b09      	ldr	r3, [pc, #36]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a08      	ldr	r2, [pc, #32]	@ (80052f4 <HAL_RCC_OscConfig+0x4b8>)
 80052d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052da:	f7fd fd55 	bl	8002d88 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e0:	e00c      	b.n	80052fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e2:	f7fd fd51 	bl	8002d88 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d905      	bls.n	80052fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e0ab      	b.n	800544c <HAL_RCC_OscConfig+0x610>
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052fc:	4b55      	ldr	r3, [pc, #340]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ec      	bne.n	80052e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005308:	4b52      	ldr	r3, [pc, #328]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	4b52      	ldr	r3, [pc, #328]	@ (8005458 <HAL_RCC_OscConfig+0x61c>)
 800530e:	4013      	ands	r3, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6a11      	ldr	r1, [r2, #32]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005318:	3a01      	subs	r2, #1
 800531a:	0112      	lsls	r2, r2, #4
 800531c:	4311      	orrs	r1, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005322:	0212      	lsls	r2, r2, #8
 8005324:	4311      	orrs	r1, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800532a:	0852      	lsrs	r2, r2, #1
 800532c:	3a01      	subs	r2, #1
 800532e:	0552      	lsls	r2, r2, #21
 8005330:	4311      	orrs	r1, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005336:	0852      	lsrs	r2, r2, #1
 8005338:	3a01      	subs	r2, #1
 800533a:	0652      	lsls	r2, r2, #25
 800533c:	4311      	orrs	r1, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005342:	06d2      	lsls	r2, r2, #27
 8005344:	430a      	orrs	r2, r1
 8005346:	4943      	ldr	r1, [pc, #268]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 8005348:	4313      	orrs	r3, r2
 800534a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800534c:	4b41      	ldr	r3, [pc, #260]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a40      	ldr	r2, [pc, #256]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 8005352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005356:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005358:	4b3e      	ldr	r3, [pc, #248]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a3d      	ldr	r2, [pc, #244]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 800535e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005362:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fd fd10 	bl	8002d88 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536c:	f7fd fd0c 	bl	8002d88 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e066      	b.n	800544c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537e:	4b35      	ldr	r3, [pc, #212]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f0      	beq.n	800536c <HAL_RCC_OscConfig+0x530>
 800538a:	e05e      	b.n	800544a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538c:	4b31      	ldr	r3, [pc, #196]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a30      	ldr	r2, [pc, #192]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 8005392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fd fcf6 	bl	8002d88 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fd fcf2 	bl	8002d88 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e04c      	b.n	800544c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b2:	4b28      	ldr	r3, [pc, #160]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80053be:	4b25      	ldr	r3, [pc, #148]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	4924      	ldr	r1, [pc, #144]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 80053c4:	4b25      	ldr	r3, [pc, #148]	@ (800545c <HAL_RCC_OscConfig+0x620>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	60cb      	str	r3, [r1, #12]
 80053ca:	e03e      	b.n	800544a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e039      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80053d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005454 <HAL_RCC_OscConfig+0x618>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f003 0203 	and.w	r2, r3, #3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d12c      	bne.n	8005446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f6:	3b01      	subs	r3, #1
 80053f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d123      	bne.n	8005446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d11b      	bne.n	8005446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d113      	bne.n	8005446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005428:	085b      	lsrs	r3, r3, #1
 800542a:	3b01      	subs	r3, #1
 800542c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d109      	bne.n	8005446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	3b01      	subs	r3, #1
 8005440:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d001      	beq.n	800544a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000
 8005458:	019f800c 	.word	0x019f800c
 800545c:	feeefffc 	.word	0xfeeefffc

08005460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e11e      	b.n	80056b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005478:	4b91      	ldr	r3, [pc, #580]	@ (80056c0 <HAL_RCC_ClockConfig+0x260>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d910      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b8e      	ldr	r3, [pc, #568]	@ (80056c0 <HAL_RCC_ClockConfig+0x260>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 020f 	bic.w	r2, r3, #15
 800548e:	498c      	ldr	r1, [pc, #560]	@ (80056c0 <HAL_RCC_ClockConfig+0x260>)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b8a      	ldr	r3, [pc, #552]	@ (80056c0 <HAL_RCC_ClockConfig+0x260>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e106      	b.n	80056b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d073      	beq.n	800559c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d129      	bne.n	8005510 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054bc:	4b81      	ldr	r3, [pc, #516]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0f4      	b.n	80056b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80054cc:	f000 f99e 	bl	800580c <RCC_GetSysClockFreqFromPLLSource>
 80054d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	4a7c      	ldr	r2, [pc, #496]	@ (80056c8 <HAL_RCC_ClockConfig+0x268>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d93f      	bls.n	800555a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054da:	4b7a      	ldr	r3, [pc, #488]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d033      	beq.n	800555a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d12f      	bne.n	800555a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054fa:	4b72      	ldr	r3, [pc, #456]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005502:	4a70      	ldr	r2, [pc, #448]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 8005504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005508:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800550a:	2380      	movs	r3, #128	@ 0x80
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e024      	b.n	800555a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d107      	bne.n	8005528 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005518:	4b6a      	ldr	r3, [pc, #424]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0c6      	b.n	80056b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005528:	4b66      	ldr	r3, [pc, #408]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0be      	b.n	80056b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005538:	f000 f8ce 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 800553c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4a61      	ldr	r2, [pc, #388]	@ (80056c8 <HAL_RCC_ClockConfig+0x268>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d909      	bls.n	800555a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005546:	4b5f      	ldr	r3, [pc, #380]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800554e:	4a5d      	ldr	r2, [pc, #372]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 8005550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005554:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005556:	2380      	movs	r3, #128	@ 0x80
 8005558:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800555a:	4b5a      	ldr	r3, [pc, #360]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f023 0203 	bic.w	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4957      	ldr	r1, [pc, #348]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800556c:	f7fd fc0c 	bl	8002d88 <HAL_GetTick>
 8005570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005572:	e00a      	b.n	800558a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005574:	f7fd fc08 	bl	8002d88 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e095      	b.n	80056b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	4b4e      	ldr	r3, [pc, #312]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 020c 	and.w	r2, r3, #12
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	429a      	cmp	r2, r3
 800559a:	d1eb      	bne.n	8005574 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d023      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055b4:	4b43      	ldr	r3, [pc, #268]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4a42      	ldr	r2, [pc, #264]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80055ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055cc:	4b3d      	ldr	r3, [pc, #244]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055d4:	4a3b      	ldr	r2, [pc, #236]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80055d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055dc:	4b39      	ldr	r3, [pc, #228]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	4936      	ldr	r1, [pc, #216]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	608b      	str	r3, [r1, #8]
 80055ee:	e008      	b.n	8005602 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2b80      	cmp	r3, #128	@ 0x80
 80055f4:	d105      	bne.n	8005602 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80055f6:	4b33      	ldr	r3, [pc, #204]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	4a32      	ldr	r2, [pc, #200]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 80055fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005600:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005602:	4b2f      	ldr	r3, [pc, #188]	@ (80056c0 <HAL_RCC_ClockConfig+0x260>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d21d      	bcs.n	800564c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005610:	4b2b      	ldr	r3, [pc, #172]	@ (80056c0 <HAL_RCC_ClockConfig+0x260>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 020f 	bic.w	r2, r3, #15
 8005618:	4929      	ldr	r1, [pc, #164]	@ (80056c0 <HAL_RCC_ClockConfig+0x260>)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	4313      	orrs	r3, r2
 800561e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005620:	f7fd fbb2 	bl	8002d88 <HAL_GetTick>
 8005624:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005626:	e00a      	b.n	800563e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005628:	f7fd fbae 	bl	8002d88 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e03b      	b.n	80056b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800563e:	4b20      	ldr	r3, [pc, #128]	@ (80056c0 <HAL_RCC_ClockConfig+0x260>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d1ed      	bne.n	8005628 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005658:	4b1a      	ldr	r3, [pc, #104]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4917      	ldr	r1, [pc, #92]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 8005666:	4313      	orrs	r3, r2
 8005668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005676:	4b13      	ldr	r3, [pc, #76]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	490f      	ldr	r1, [pc, #60]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800568a:	f000 f825 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 800568e:	4602      	mov	r2, r0
 8005690:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <HAL_RCC_ClockConfig+0x264>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	490c      	ldr	r1, [pc, #48]	@ (80056cc <HAL_RCC_ClockConfig+0x26c>)
 800569c:	5ccb      	ldrb	r3, [r1, r3]
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	fa22 f303 	lsr.w	r3, r2, r3
 80056a6:	4a0a      	ldr	r2, [pc, #40]	@ (80056d0 <HAL_RCC_ClockConfig+0x270>)
 80056a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056aa:	4b0a      	ldr	r3, [pc, #40]	@ (80056d4 <HAL_RCC_ClockConfig+0x274>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fd fb1e 	bl	8002cf0 <HAL_InitTick>
 80056b4:	4603      	mov	r3, r0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40022000 	.word	0x40022000
 80056c4:	40021000 	.word	0x40021000
 80056c8:	04c4b400 	.word	0x04c4b400
 80056cc:	0800e744 	.word	0x0800e744
 80056d0:	20000f44 	.word	0x20000f44
 80056d4:	20000f48 	.word	0x20000f48

080056d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056de:	4b2c      	ldr	r3, [pc, #176]	@ (8005790 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d102      	bne.n	80056f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005794 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	e047      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80056f0:	4b27      	ldr	r3, [pc, #156]	@ (8005790 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 030c 	and.w	r3, r3, #12
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d102      	bne.n	8005702 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056fc:	4b26      	ldr	r3, [pc, #152]	@ (8005798 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	e03e      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005702:	4b23      	ldr	r3, [pc, #140]	@ (8005790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
 800570a:	2b0c      	cmp	r3, #12
 800570c:	d136      	bne.n	800577c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800570e:	4b20      	ldr	r3, [pc, #128]	@ (8005790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005718:	4b1d      	ldr	r3, [pc, #116]	@ (8005790 <HAL_RCC_GetSysClockFreq+0xb8>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	3301      	adds	r3, #1
 8005724:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d10c      	bne.n	8005746 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800572c:	4a1a      	ldr	r2, [pc, #104]	@ (8005798 <HAL_RCC_GetSysClockFreq+0xc0>)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	4a16      	ldr	r2, [pc, #88]	@ (8005790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005736:	68d2      	ldr	r2, [r2, #12]
 8005738:	0a12      	lsrs	r2, r2, #8
 800573a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800573e:	fb02 f303 	mul.w	r3, r2, r3
 8005742:	617b      	str	r3, [r7, #20]
      break;
 8005744:	e00c      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005746:	4a13      	ldr	r2, [pc, #76]	@ (8005794 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	4a10      	ldr	r2, [pc, #64]	@ (8005790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005750:	68d2      	ldr	r2, [r2, #12]
 8005752:	0a12      	lsrs	r2, r2, #8
 8005754:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	617b      	str	r3, [r7, #20]
      break;
 800575e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005760:	4b0b      	ldr	r3, [pc, #44]	@ (8005790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	0e5b      	lsrs	r3, r3, #25
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	3301      	adds	r3, #1
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	fbb2 f3f3 	udiv	r3, r2, r3
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	e001      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005780:	693b      	ldr	r3, [r7, #16]
}
 8005782:	4618      	mov	r0, r3
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000
 8005794:	00f42400 	.word	0x00f42400
 8005798:	007a1200 	.word	0x007a1200

0800579c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a0:	4b03      	ldr	r3, [pc, #12]	@ (80057b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057a2:	681b      	ldr	r3, [r3, #0]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000f44 	.word	0x20000f44

080057b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057b8:	f7ff fff0 	bl	800579c <HAL_RCC_GetHCLKFreq>
 80057bc:	4602      	mov	r2, r0
 80057be:	4b06      	ldr	r3, [pc, #24]	@ (80057d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	0a1b      	lsrs	r3, r3, #8
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	4904      	ldr	r1, [pc, #16]	@ (80057dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80057ca:	5ccb      	ldrb	r3, [r1, r3]
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40021000 	.word	0x40021000
 80057dc:	0800e754 	.word	0x0800e754

080057e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057e4:	f7ff ffda 	bl	800579c <HAL_RCC_GetHCLKFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b06      	ldr	r3, [pc, #24]	@ (8005804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	0adb      	lsrs	r3, r3, #11
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4904      	ldr	r1, [pc, #16]	@ (8005808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005800:	4618      	mov	r0, r3
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40021000 	.word	0x40021000
 8005808:	0800e754 	.word	0x0800e754

0800580c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005812:	4b1e      	ldr	r3, [pc, #120]	@ (800588c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800581c:	4b1b      	ldr	r3, [pc, #108]	@ (800588c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d10c      	bne.n	800584a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005830:	4a17      	ldr	r2, [pc, #92]	@ (8005890 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	4a14      	ldr	r2, [pc, #80]	@ (800588c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800583a:	68d2      	ldr	r2, [r2, #12]
 800583c:	0a12      	lsrs	r2, r2, #8
 800583e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005842:	fb02 f303 	mul.w	r3, r2, r3
 8005846:	617b      	str	r3, [r7, #20]
    break;
 8005848:	e00c      	b.n	8005864 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800584a:	4a12      	ldr	r2, [pc, #72]	@ (8005894 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005852:	4a0e      	ldr	r2, [pc, #56]	@ (800588c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005854:	68d2      	ldr	r2, [r2, #12]
 8005856:	0a12      	lsrs	r2, r2, #8
 8005858:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800585c:	fb02 f303 	mul.w	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]
    break;
 8005862:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005864:	4b09      	ldr	r3, [pc, #36]	@ (800588c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	0e5b      	lsrs	r3, r3, #25
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	3301      	adds	r3, #1
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	fbb2 f3f3 	udiv	r3, r2, r3
 800587c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800587e:	687b      	ldr	r3, [r7, #4]
}
 8005880:	4618      	mov	r0, r3
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	40021000 	.word	0x40021000
 8005890:	007a1200 	.word	0x007a1200
 8005894:	00f42400 	.word	0x00f42400

08005898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058a0:	2300      	movs	r3, #0
 80058a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058a4:	2300      	movs	r3, #0
 80058a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8098 	beq.w	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058b6:	2300      	movs	r3, #0
 80058b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ba:	4b43      	ldr	r3, [pc, #268]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10d      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058c6:	4b40      	ldr	r3, [pc, #256]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ca:	4a3f      	ldr	r2, [pc, #252]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80058d2:	4b3d      	ldr	r3, [pc, #244]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058de:	2301      	movs	r3, #1
 80058e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058e2:	4b3a      	ldr	r3, [pc, #232]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a39      	ldr	r2, [pc, #228]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ee:	f7fd fa4b 	bl	8002d88 <HAL_GetTick>
 80058f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f4:	e009      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f6:	f7fd fa47 	bl	8002d88 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d902      	bls.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	74fb      	strb	r3, [r7, #19]
        break;
 8005908:	e005      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800590a:	4b30      	ldr	r3, [pc, #192]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0ef      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005916:	7cfb      	ldrb	r3, [r7, #19]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d159      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800591c:	4b2a      	ldr	r3, [pc, #168]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005926:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d01e      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	429a      	cmp	r2, r3
 8005936:	d019      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005938:	4b23      	ldr	r3, [pc, #140]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005942:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005944:	4b20      	ldr	r3, [pc, #128]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594a:	4a1f      	ldr	r2, [pc, #124]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800594c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005954:	4b1c      	ldr	r3, [pc, #112]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595a:	4a1b      	ldr	r2, [pc, #108]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800595c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005964:	4a18      	ldr	r2, [pc, #96]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005976:	f7fd fa07 	bl	8002d88 <HAL_GetTick>
 800597a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800597c:	e00b      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fd fa03 	bl	8002d88 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d902      	bls.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	74fb      	strb	r3, [r7, #19]
            break;
 8005994:	e006      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005996:	4b0c      	ldr	r3, [pc, #48]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0ec      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80059a4:	7cfb      	ldrb	r3, [r7, #19]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059aa:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	4903      	ldr	r1, [pc, #12]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80059c0:	e008      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059c2:	7cfb      	ldrb	r3, [r7, #19]
 80059c4:	74bb      	strb	r3, [r7, #18]
 80059c6:	e005      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80059c8:	40021000 	.word	0x40021000
 80059cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	7cfb      	ldrb	r3, [r7, #19]
 80059d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059d4:	7c7b      	ldrb	r3, [r7, #17]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d105      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059da:	4ba6      	ldr	r3, [pc, #664]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059de:	4aa5      	ldr	r2, [pc, #660]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059f2:	4ba0      	ldr	r3, [pc, #640]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f8:	f023 0203 	bic.w	r2, r3, #3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	499c      	ldr	r1, [pc, #624]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a14:	4b97      	ldr	r3, [pc, #604]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1a:	f023 020c 	bic.w	r2, r3, #12
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	4994      	ldr	r1, [pc, #592]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a36:	4b8f      	ldr	r3, [pc, #572]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	498b      	ldr	r1, [pc, #556]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a58:	4b86      	ldr	r3, [pc, #536]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	4983      	ldr	r1, [pc, #524]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a7a:	4b7e      	ldr	r3, [pc, #504]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	497a      	ldr	r1, [pc, #488]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a9c:	4b75      	ldr	r3, [pc, #468]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	4972      	ldr	r1, [pc, #456]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005abe:	4b6d      	ldr	r3, [pc, #436]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	4969      	ldr	r1, [pc, #420]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ae0:	4b64      	ldr	r3, [pc, #400]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	4961      	ldr	r1, [pc, #388]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b02:	4b5c      	ldr	r3, [pc, #368]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b10:	4958      	ldr	r1, [pc, #352]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d015      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b24:	4b53      	ldr	r3, [pc, #332]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b32:	4950      	ldr	r1, [pc, #320]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b42:	d105      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b44:	4b4b      	ldr	r3, [pc, #300]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	4a4a      	ldr	r2, [pc, #296]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b4e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d015      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b5c:	4b45      	ldr	r3, [pc, #276]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6a:	4942      	ldr	r1, [pc, #264]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b7a:	d105      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4a3c      	ldr	r2, [pc, #240]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b86:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d015      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b94:	4b37      	ldr	r3, [pc, #220]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba2:	4934      	ldr	r1, [pc, #208]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bb2:	d105      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bbe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d015      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bcc:	4b29      	ldr	r3, [pc, #164]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bda:	4926      	ldr	r1, [pc, #152]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bea:	d105      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bec:	4b21      	ldr	r3, [pc, #132]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4a20      	ldr	r2, [pc, #128]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bf6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d015      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c04:	4b1b      	ldr	r3, [pc, #108]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	4918      	ldr	r1, [pc, #96]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c22:	d105      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c24:	4b13      	ldr	r3, [pc, #76]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4a12      	ldr	r2, [pc, #72]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d015      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4a:	490a      	ldr	r1, [pc, #40]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c5a:	d105      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c5c:	4b05      	ldr	r3, [pc, #20]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4a04      	ldr	r2, [pc, #16]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c68:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40021000 	.word	0x40021000

08005c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e09d      	b.n	8005dc6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d108      	bne.n	8005ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c9a:	d009      	beq.n	8005cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	61da      	str	r2, [r3, #28]
 8005ca2:	e005      	b.n	8005cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fb fca0 	bl	8001610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cf0:	d902      	bls.n	8005cf8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e002      	b.n	8005cfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d06:	d007      	beq.n	8005d18 <HAL_SPI_Init+0xa0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d10:	d002      	beq.n	8005d18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5a:	ea42 0103 	orr.w	r1, r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	0c1b      	lsrs	r3, r3, #16
 8005d74:	f003 0204 	and.w	r2, r3, #4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d94:	ea42 0103 	orr.w	r1, r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005db4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e049      	b.n	8005e74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d106      	bne.n	8005dfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7fb fef7 	bl	8001be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f000 fce1 	bl	80067d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e049      	b.n	8005f22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f841 	bl	8005f2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f000 fc8a 	bl	80067d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <HAL_TIM_PWM_Start+0x24>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e03c      	b.n	8005fde <HAL_TIM_PWM_Start+0x9e>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d109      	bne.n	8005f7e <HAL_TIM_PWM_Start+0x3e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	bf14      	ite	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	2300      	moveq	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	e02f      	b.n	8005fde <HAL_TIM_PWM_Start+0x9e>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d109      	bne.n	8005f98 <HAL_TIM_PWM_Start+0x58>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e022      	b.n	8005fde <HAL_TIM_PWM_Start+0x9e>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b0c      	cmp	r3, #12
 8005f9c:	d109      	bne.n	8005fb2 <HAL_TIM_PWM_Start+0x72>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	bf14      	ite	ne
 8005faa:	2301      	movne	r3, #1
 8005fac:	2300      	moveq	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	e015      	b.n	8005fde <HAL_TIM_PWM_Start+0x9e>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d109      	bne.n	8005fcc <HAL_TIM_PWM_Start+0x8c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	bf14      	ite	ne
 8005fc4:	2301      	movne	r3, #1
 8005fc6:	2300      	moveq	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e008      	b.n	8005fde <HAL_TIM_PWM_Start+0x9e>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	bf14      	ite	ne
 8005fd8:	2301      	movne	r3, #1
 8005fda:	2300      	moveq	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e097      	b.n	8006116 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d104      	bne.n	8005ff6 <HAL_TIM_PWM_Start+0xb6>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ff4:	e023      	b.n	800603e <HAL_TIM_PWM_Start+0xfe>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d104      	bne.n	8006006 <HAL_TIM_PWM_Start+0xc6>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006004:	e01b      	b.n	800603e <HAL_TIM_PWM_Start+0xfe>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b08      	cmp	r3, #8
 800600a:	d104      	bne.n	8006016 <HAL_TIM_PWM_Start+0xd6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006014:	e013      	b.n	800603e <HAL_TIM_PWM_Start+0xfe>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b0c      	cmp	r3, #12
 800601a:	d104      	bne.n	8006026 <HAL_TIM_PWM_Start+0xe6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006024:	e00b      	b.n	800603e <HAL_TIM_PWM_Start+0xfe>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b10      	cmp	r3, #16
 800602a:	d104      	bne.n	8006036 <HAL_TIM_PWM_Start+0xf6>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006034:	e003      	b.n	800603e <HAL_TIM_PWM_Start+0xfe>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2201      	movs	r2, #1
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fff2 	bl	8007030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a33      	ldr	r2, [pc, #204]	@ (8006120 <HAL_TIM_PWM_Start+0x1e0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <HAL_TIM_PWM_Start+0x13e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a32      	ldr	r2, [pc, #200]	@ (8006124 <HAL_TIM_PWM_Start+0x1e4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00e      	beq.n	800607e <HAL_TIM_PWM_Start+0x13e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a30      	ldr	r2, [pc, #192]	@ (8006128 <HAL_TIM_PWM_Start+0x1e8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d009      	beq.n	800607e <HAL_TIM_PWM_Start+0x13e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a2f      	ldr	r2, [pc, #188]	@ (800612c <HAL_TIM_PWM_Start+0x1ec>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d004      	beq.n	800607e <HAL_TIM_PWM_Start+0x13e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2d      	ldr	r2, [pc, #180]	@ (8006130 <HAL_TIM_PWM_Start+0x1f0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d101      	bne.n	8006082 <HAL_TIM_PWM_Start+0x142>
 800607e:	2301      	movs	r3, #1
 8006080:	e000      	b.n	8006084 <HAL_TIM_PWM_Start+0x144>
 8006082:	2300      	movs	r3, #0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006096:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <HAL_TIM_PWM_Start+0x1e0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_TIM_PWM_Start+0x194>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060aa:	d013      	beq.n	80060d4 <HAL_TIM_PWM_Start+0x194>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a20      	ldr	r2, [pc, #128]	@ (8006134 <HAL_TIM_PWM_Start+0x1f4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIM_PWM_Start+0x194>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006138 <HAL_TIM_PWM_Start+0x1f8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIM_PWM_Start+0x194>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a17      	ldr	r2, [pc, #92]	@ (8006124 <HAL_TIM_PWM_Start+0x1e4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIM_PWM_Start+0x194>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a16      	ldr	r2, [pc, #88]	@ (8006128 <HAL_TIM_PWM_Start+0x1e8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d115      	bne.n	8006100 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	4b18      	ldr	r3, [pc, #96]	@ (800613c <HAL_TIM_PWM_Start+0x1fc>)
 80060dc:	4013      	ands	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d015      	beq.n	8006112 <HAL_TIM_PWM_Start+0x1d2>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ec:	d011      	beq.n	8006112 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fe:	e008      	b.n	8006112 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e000      	b.n	8006114 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006112:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	40012c00 	.word	0x40012c00
 8006124:	40013400 	.word	0x40013400
 8006128:	40014000 	.word	0x40014000
 800612c:	40014400 	.word	0x40014400
 8006130:	40014800 	.word	0x40014800
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800
 800613c:	00010007 	.word	0x00010007

08006140 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 ff6c 	bl	8007030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a3e      	ldr	r2, [pc, #248]	@ (8006258 <HAL_TIM_PWM_Stop+0x118>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <HAL_TIM_PWM_Stop+0x4a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a3d      	ldr	r2, [pc, #244]	@ (800625c <HAL_TIM_PWM_Stop+0x11c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00e      	beq.n	800618a <HAL_TIM_PWM_Stop+0x4a>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a3b      	ldr	r2, [pc, #236]	@ (8006260 <HAL_TIM_PWM_Stop+0x120>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d009      	beq.n	800618a <HAL_TIM_PWM_Stop+0x4a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a3a      	ldr	r2, [pc, #232]	@ (8006264 <HAL_TIM_PWM_Stop+0x124>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_TIM_PWM_Stop+0x4a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a38      	ldr	r2, [pc, #224]	@ (8006268 <HAL_TIM_PWM_Stop+0x128>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d101      	bne.n	800618e <HAL_TIM_PWM_Stop+0x4e>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_TIM_PWM_Stop+0x50>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d017      	beq.n	80061c4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a1a      	ldr	r2, [r3, #32]
 800619a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10f      	bne.n	80061c4 <HAL_TIM_PWM_Stop+0x84>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6a1a      	ldr	r2, [r3, #32]
 80061aa:	f244 4344 	movw	r3, #17476	@ 0x4444
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d107      	bne.n	80061c4 <HAL_TIM_PWM_Stop+0x84>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6a1a      	ldr	r2, [r3, #32]
 80061ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10f      	bne.n	80061f4 <HAL_TIM_PWM_Stop+0xb4>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6a1a      	ldr	r2, [r3, #32]
 80061da:	f244 4344 	movw	r3, #17476	@ 0x4444
 80061de:	4013      	ands	r3, r2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d107      	bne.n	80061f4 <HAL_TIM_PWM_Stop+0xb4>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0201 	bic.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <HAL_TIM_PWM_Stop+0xc4>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006202:	e023      	b.n	800624c <HAL_TIM_PWM_Stop+0x10c>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b04      	cmp	r3, #4
 8006208:	d104      	bne.n	8006214 <HAL_TIM_PWM_Stop+0xd4>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006212:	e01b      	b.n	800624c <HAL_TIM_PWM_Stop+0x10c>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b08      	cmp	r3, #8
 8006218:	d104      	bne.n	8006224 <HAL_TIM_PWM_Stop+0xe4>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006222:	e013      	b.n	800624c <HAL_TIM_PWM_Stop+0x10c>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b0c      	cmp	r3, #12
 8006228:	d104      	bne.n	8006234 <HAL_TIM_PWM_Stop+0xf4>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006232:	e00b      	b.n	800624c <HAL_TIM_PWM_Stop+0x10c>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b10      	cmp	r3, #16
 8006238:	d104      	bne.n	8006244 <HAL_TIM_PWM_Stop+0x104>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006242:	e003      	b.n	800624c <HAL_TIM_PWM_Stop+0x10c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40012c00 	.word	0x40012c00
 800625c:	40013400 	.word	0x40013400
 8006260:	40014000 	.word	0x40014000
 8006264:	40014400 	.word	0x40014400
 8006268:	40014800 	.word	0x40014800

0800626c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e097      	b.n	80063b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fb fcc7 	bl	8001c28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80062b0:	f023 0307 	bic.w	r3, r3, #7
 80062b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f000 fa87 	bl	80067d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ee:	f023 0303 	bic.w	r3, r3, #3
 80062f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	4313      	orrs	r3, r2
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800630c:	f023 030c 	bic.w	r3, r3, #12
 8006310:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006318:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800631c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	4313      	orrs	r3, r2
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	011a      	lsls	r2, r3, #4
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	031b      	lsls	r3, r3, #12
 800633c:	4313      	orrs	r3, r2
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800634a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	4313      	orrs	r3, r2
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e0ff      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b14      	cmp	r3, #20
 80063e2:	f200 80f0 	bhi.w	80065c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063e6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	08006441 	.word	0x08006441
 80063f0:	080065c7 	.word	0x080065c7
 80063f4:	080065c7 	.word	0x080065c7
 80063f8:	080065c7 	.word	0x080065c7
 80063fc:	08006481 	.word	0x08006481
 8006400:	080065c7 	.word	0x080065c7
 8006404:	080065c7 	.word	0x080065c7
 8006408:	080065c7 	.word	0x080065c7
 800640c:	080064c3 	.word	0x080064c3
 8006410:	080065c7 	.word	0x080065c7
 8006414:	080065c7 	.word	0x080065c7
 8006418:	080065c7 	.word	0x080065c7
 800641c:	08006503 	.word	0x08006503
 8006420:	080065c7 	.word	0x080065c7
 8006424:	080065c7 	.word	0x080065c7
 8006428:	080065c7 	.word	0x080065c7
 800642c:	08006545 	.word	0x08006545
 8006430:	080065c7 	.word	0x080065c7
 8006434:	080065c7 	.word	0x080065c7
 8006438:	080065c7 	.word	0x080065c7
 800643c:	08006585 	.word	0x08006585
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fa60 	bl	800690c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699a      	ldr	r2, [r3, #24]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0208 	orr.w	r2, r2, #8
 800645a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0204 	bic.w	r2, r2, #4
 800646a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6999      	ldr	r1, [r3, #24]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	619a      	str	r2, [r3, #24]
      break;
 800647e:	e0a5      	b.n	80065cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fad0 	bl	8006a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800649a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699a      	ldr	r2, [r3, #24]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6999      	ldr	r1, [r3, #24]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	021a      	lsls	r2, r3, #8
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	619a      	str	r2, [r3, #24]
      break;
 80064c0:	e084      	b.n	80065cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fb39 	bl	8006b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69da      	ldr	r2, [r3, #28]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0208 	orr.w	r2, r2, #8
 80064dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0204 	bic.w	r2, r2, #4
 80064ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69d9      	ldr	r1, [r3, #28]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	61da      	str	r2, [r3, #28]
      break;
 8006500:	e064      	b.n	80065cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fba1 	bl	8006c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800651c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800652c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69d9      	ldr	r1, [r3, #28]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	021a      	lsls	r2, r3, #8
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	61da      	str	r2, [r3, #28]
      break;
 8006542:	e043      	b.n	80065cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fc0a 	bl	8006d64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0208 	orr.w	r2, r2, #8
 800655e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0204 	bic.w	r2, r2, #4
 800656e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006582:	e023      	b.n	80065cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fc4e 	bl	8006e2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800659e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	021a      	lsls	r2, r3, #8
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80065c4:	e002      	b.n	80065cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
      break;
 80065ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop

080065e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_TIM_ConfigClockSource+0x1c>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e0de      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x1da>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800661a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800661e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a63      	ldr	r2, [pc, #396]	@ (80067c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	f000 80a9 	beq.w	800678e <HAL_TIM_ConfigClockSource+0x1ae>
 800663c:	4a61      	ldr	r2, [pc, #388]	@ (80067c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	f200 80ae 	bhi.w	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006644:	4a60      	ldr	r2, [pc, #384]	@ (80067c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	f000 80a1 	beq.w	800678e <HAL_TIM_ConfigClockSource+0x1ae>
 800664c:	4a5e      	ldr	r2, [pc, #376]	@ (80067c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	f200 80a6 	bhi.w	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006654:	4a5d      	ldr	r2, [pc, #372]	@ (80067cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006656:	4293      	cmp	r3, r2
 8006658:	f000 8099 	beq.w	800678e <HAL_TIM_ConfigClockSource+0x1ae>
 800665c:	4a5b      	ldr	r2, [pc, #364]	@ (80067cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800665e:	4293      	cmp	r3, r2
 8006660:	f200 809e 	bhi.w	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006664:	4a5a      	ldr	r2, [pc, #360]	@ (80067d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	f000 8091 	beq.w	800678e <HAL_TIM_ConfigClockSource+0x1ae>
 800666c:	4a58      	ldr	r2, [pc, #352]	@ (80067d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	f200 8096 	bhi.w	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006674:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006678:	f000 8089 	beq.w	800678e <HAL_TIM_ConfigClockSource+0x1ae>
 800667c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006680:	f200 808e 	bhi.w	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006688:	d03e      	beq.n	8006708 <HAL_TIM_ConfigClockSource+0x128>
 800668a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800668e:	f200 8087 	bhi.w	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006696:	f000 8086 	beq.w	80067a6 <HAL_TIM_ConfigClockSource+0x1c6>
 800669a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800669e:	d87f      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80066a0:	2b70      	cmp	r3, #112	@ 0x70
 80066a2:	d01a      	beq.n	80066da <HAL_TIM_ConfigClockSource+0xfa>
 80066a4:	2b70      	cmp	r3, #112	@ 0x70
 80066a6:	d87b      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80066a8:	2b60      	cmp	r3, #96	@ 0x60
 80066aa:	d050      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x16e>
 80066ac:	2b60      	cmp	r3, #96	@ 0x60
 80066ae:	d877      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80066b0:	2b50      	cmp	r3, #80	@ 0x50
 80066b2:	d03c      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x14e>
 80066b4:	2b50      	cmp	r3, #80	@ 0x50
 80066b6:	d873      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80066b8:	2b40      	cmp	r3, #64	@ 0x40
 80066ba:	d058      	beq.n	800676e <HAL_TIM_ConfigClockSource+0x18e>
 80066bc:	2b40      	cmp	r3, #64	@ 0x40
 80066be:	d86f      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80066c0:	2b30      	cmp	r3, #48	@ 0x30
 80066c2:	d064      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x1ae>
 80066c4:	2b30      	cmp	r3, #48	@ 0x30
 80066c6:	d86b      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d060      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x1ae>
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d867      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d05c      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x1ae>
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d05a      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x1ae>
 80066d8:	e062      	b.n	80067a0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066ea:	f000 fc81 	bl	8006ff0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	609a      	str	r2, [r3, #8]
      break;
 8006706:	e04f      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006718:	f000 fc6a 	bl	8006ff0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800672a:	609a      	str	r2, [r3, #8]
      break;
 800672c:	e03c      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800673a:	461a      	mov	r2, r3
 800673c:	f000 fbdc 	bl	8006ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2150      	movs	r1, #80	@ 0x50
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fc35 	bl	8006fb6 <TIM_ITRx_SetConfig>
      break;
 800674c:	e02c      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800675a:	461a      	mov	r2, r3
 800675c:	f000 fbfb 	bl	8006f56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2160      	movs	r1, #96	@ 0x60
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fc25 	bl	8006fb6 <TIM_ITRx_SetConfig>
      break;
 800676c:	e01c      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800677a:	461a      	mov	r2, r3
 800677c:	f000 fbbc 	bl	8006ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2140      	movs	r1, #64	@ 0x40
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fc15 	bl	8006fb6 <TIM_ITRx_SetConfig>
      break;
 800678c:	e00c      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4619      	mov	r1, r3
 8006798:	4610      	mov	r0, r2
 800679a:	f000 fc0c 	bl	8006fb6 <TIM_ITRx_SetConfig>
      break;
 800679e:	e003      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	73fb      	strb	r3, [r7, #15]
      break;
 80067a4:	e000      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80067a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	00100070 	.word	0x00100070
 80067c8:	00100040 	.word	0x00100040
 80067cc:	00100030 	.word	0x00100030
 80067d0:	00100020 	.word	0x00100020

080067d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a42      	ldr	r2, [pc, #264]	@ (80068f0 <TIM_Base_SetConfig+0x11c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00f      	beq.n	800680c <TIM_Base_SetConfig+0x38>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f2:	d00b      	beq.n	800680c <TIM_Base_SetConfig+0x38>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a3f      	ldr	r2, [pc, #252]	@ (80068f4 <TIM_Base_SetConfig+0x120>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d007      	beq.n	800680c <TIM_Base_SetConfig+0x38>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a3e      	ldr	r2, [pc, #248]	@ (80068f8 <TIM_Base_SetConfig+0x124>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_Base_SetConfig+0x38>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a3d      	ldr	r2, [pc, #244]	@ (80068fc <TIM_Base_SetConfig+0x128>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d108      	bne.n	800681e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a33      	ldr	r2, [pc, #204]	@ (80068f0 <TIM_Base_SetConfig+0x11c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01b      	beq.n	800685e <TIM_Base_SetConfig+0x8a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800682c:	d017      	beq.n	800685e <TIM_Base_SetConfig+0x8a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a30      	ldr	r2, [pc, #192]	@ (80068f4 <TIM_Base_SetConfig+0x120>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d013      	beq.n	800685e <TIM_Base_SetConfig+0x8a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a2f      	ldr	r2, [pc, #188]	@ (80068f8 <TIM_Base_SetConfig+0x124>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00f      	beq.n	800685e <TIM_Base_SetConfig+0x8a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a2e      	ldr	r2, [pc, #184]	@ (80068fc <TIM_Base_SetConfig+0x128>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00b      	beq.n	800685e <TIM_Base_SetConfig+0x8a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a2d      	ldr	r2, [pc, #180]	@ (8006900 <TIM_Base_SetConfig+0x12c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d007      	beq.n	800685e <TIM_Base_SetConfig+0x8a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2c      	ldr	r2, [pc, #176]	@ (8006904 <TIM_Base_SetConfig+0x130>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d003      	beq.n	800685e <TIM_Base_SetConfig+0x8a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a2b      	ldr	r2, [pc, #172]	@ (8006908 <TIM_Base_SetConfig+0x134>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d108      	bne.n	8006870 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a16      	ldr	r2, [pc, #88]	@ (80068f0 <TIM_Base_SetConfig+0x11c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00f      	beq.n	80068bc <TIM_Base_SetConfig+0xe8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a17      	ldr	r2, [pc, #92]	@ (80068fc <TIM_Base_SetConfig+0x128>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00b      	beq.n	80068bc <TIM_Base_SetConfig+0xe8>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a16      	ldr	r2, [pc, #88]	@ (8006900 <TIM_Base_SetConfig+0x12c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d007      	beq.n	80068bc <TIM_Base_SetConfig+0xe8>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a15      	ldr	r2, [pc, #84]	@ (8006904 <TIM_Base_SetConfig+0x130>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d003      	beq.n	80068bc <TIM_Base_SetConfig+0xe8>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a14      	ldr	r2, [pc, #80]	@ (8006908 <TIM_Base_SetConfig+0x134>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d103      	bne.n	80068c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d105      	bne.n	80068e2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f023 0201 	bic.w	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	611a      	str	r2, [r3, #16]
  }
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800
 80068fc:	40013400 	.word	0x40013400
 8006900:	40014000 	.word	0x40014000
 8006904:	40014400 	.word	0x40014400
 8006908:	40014800 	.word	0x40014800

0800690c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	f023 0201 	bic.w	r2, r3, #1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800693a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 0302 	bic.w	r3, r3, #2
 8006958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a2c      	ldr	r2, [pc, #176]	@ (8006a18 <TIM_OC1_SetConfig+0x10c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00f      	beq.n	800698c <TIM_OC1_SetConfig+0x80>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a2b      	ldr	r2, [pc, #172]	@ (8006a1c <TIM_OC1_SetConfig+0x110>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00b      	beq.n	800698c <TIM_OC1_SetConfig+0x80>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a2a      	ldr	r2, [pc, #168]	@ (8006a20 <TIM_OC1_SetConfig+0x114>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d007      	beq.n	800698c <TIM_OC1_SetConfig+0x80>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a29      	ldr	r2, [pc, #164]	@ (8006a24 <TIM_OC1_SetConfig+0x118>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_OC1_SetConfig+0x80>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a28      	ldr	r2, [pc, #160]	@ (8006a28 <TIM_OC1_SetConfig+0x11c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d10c      	bne.n	80069a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f023 0308 	bic.w	r3, r3, #8
 8006992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f023 0304 	bic.w	r3, r3, #4
 80069a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a18 <TIM_OC1_SetConfig+0x10c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00f      	beq.n	80069ce <TIM_OC1_SetConfig+0xc2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a1a      	ldr	r2, [pc, #104]	@ (8006a1c <TIM_OC1_SetConfig+0x110>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00b      	beq.n	80069ce <TIM_OC1_SetConfig+0xc2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a19      	ldr	r2, [pc, #100]	@ (8006a20 <TIM_OC1_SetConfig+0x114>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d007      	beq.n	80069ce <TIM_OC1_SetConfig+0xc2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a18      	ldr	r2, [pc, #96]	@ (8006a24 <TIM_OC1_SetConfig+0x118>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_OC1_SetConfig+0xc2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a17      	ldr	r2, [pc, #92]	@ (8006a28 <TIM_OC1_SetConfig+0x11c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d111      	bne.n	80069f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	621a      	str	r2, [r3, #32]
}
 8006a0c:	bf00      	nop
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40013400 	.word	0x40013400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800

08006a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f023 0210 	bic.w	r2, r3, #16
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 0320 	bic.w	r3, r3, #32
 8006a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a28      	ldr	r2, [pc, #160]	@ (8006b2c <TIM_OC2_SetConfig+0x100>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_OC2_SetConfig+0x6c>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a27      	ldr	r2, [pc, #156]	@ (8006b30 <TIM_OC2_SetConfig+0x104>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d10d      	bne.n	8006ab4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8006b2c <TIM_OC2_SetConfig+0x100>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00f      	beq.n	8006adc <TIM_OC2_SetConfig+0xb0>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a1c      	ldr	r2, [pc, #112]	@ (8006b30 <TIM_OC2_SetConfig+0x104>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00b      	beq.n	8006adc <TIM_OC2_SetConfig+0xb0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b34 <TIM_OC2_SetConfig+0x108>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d007      	beq.n	8006adc <TIM_OC2_SetConfig+0xb0>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a1a      	ldr	r2, [pc, #104]	@ (8006b38 <TIM_OC2_SetConfig+0x10c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d003      	beq.n	8006adc <TIM_OC2_SetConfig+0xb0>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a19      	ldr	r2, [pc, #100]	@ (8006b3c <TIM_OC2_SetConfig+0x110>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d113      	bne.n	8006b04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	621a      	str	r2, [r3, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40012c00 	.word	0x40012c00
 8006b30:	40013400 	.word	0x40013400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40014400 	.word	0x40014400
 8006b3c:	40014800 	.word	0x40014800

08006b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0303 	bic.w	r3, r3, #3
 8006b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	021b      	lsls	r3, r3, #8
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a27      	ldr	r2, [pc, #156]	@ (8006c3c <TIM_OC3_SetConfig+0xfc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_OC3_SetConfig+0x6a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a26      	ldr	r2, [pc, #152]	@ (8006c40 <TIM_OC3_SetConfig+0x100>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d10d      	bne.n	8006bc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c3c <TIM_OC3_SetConfig+0xfc>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00f      	beq.n	8006bee <TIM_OC3_SetConfig+0xae>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006c40 <TIM_OC3_SetConfig+0x100>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00b      	beq.n	8006bee <TIM_OC3_SetConfig+0xae>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c44 <TIM_OC3_SetConfig+0x104>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d007      	beq.n	8006bee <TIM_OC3_SetConfig+0xae>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a19      	ldr	r2, [pc, #100]	@ (8006c48 <TIM_OC3_SetConfig+0x108>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d003      	beq.n	8006bee <TIM_OC3_SetConfig+0xae>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a18      	ldr	r2, [pc, #96]	@ (8006c4c <TIM_OC3_SetConfig+0x10c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d113      	bne.n	8006c16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	621a      	str	r2, [r3, #32]
}
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	40012c00 	.word	0x40012c00
 8006c40:	40013400 	.word	0x40013400
 8006c44:	40014000 	.word	0x40014000
 8006c48:	40014400 	.word	0x40014400
 8006c4c:	40014800 	.word	0x40014800

08006c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a28      	ldr	r2, [pc, #160]	@ (8006d50 <TIM_OC4_SetConfig+0x100>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_OC4_SetConfig+0x6c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a27      	ldr	r2, [pc, #156]	@ (8006d54 <TIM_OC4_SetConfig+0x104>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d10d      	bne.n	8006cd8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	031b      	lsls	r3, r3, #12
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a1d      	ldr	r2, [pc, #116]	@ (8006d50 <TIM_OC4_SetConfig+0x100>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00f      	beq.n	8006d00 <TIM_OC4_SetConfig+0xb0>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d54 <TIM_OC4_SetConfig+0x104>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00b      	beq.n	8006d00 <TIM_OC4_SetConfig+0xb0>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a1b      	ldr	r2, [pc, #108]	@ (8006d58 <TIM_OC4_SetConfig+0x108>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d007      	beq.n	8006d00 <TIM_OC4_SetConfig+0xb0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8006d5c <TIM_OC4_SetConfig+0x10c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_OC4_SetConfig+0xb0>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a19      	ldr	r2, [pc, #100]	@ (8006d60 <TIM_OC4_SetConfig+0x110>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d113      	bne.n	8006d28 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	019b      	lsls	r3, r3, #6
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	019b      	lsls	r3, r3, #6
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	621a      	str	r2, [r3, #32]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40012c00 	.word	0x40012c00
 8006d54:	40013400 	.word	0x40013400
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40014400 	.word	0x40014400
 8006d60:	40014800 	.word	0x40014800

08006d64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006da8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	041b      	lsls	r3, r3, #16
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a17      	ldr	r2, [pc, #92]	@ (8006e18 <TIM_OC5_SetConfig+0xb4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00f      	beq.n	8006dde <TIM_OC5_SetConfig+0x7a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a16      	ldr	r2, [pc, #88]	@ (8006e1c <TIM_OC5_SetConfig+0xb8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00b      	beq.n	8006dde <TIM_OC5_SetConfig+0x7a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a15      	ldr	r2, [pc, #84]	@ (8006e20 <TIM_OC5_SetConfig+0xbc>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d007      	beq.n	8006dde <TIM_OC5_SetConfig+0x7a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a14      	ldr	r2, [pc, #80]	@ (8006e24 <TIM_OC5_SetConfig+0xc0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d003      	beq.n	8006dde <TIM_OC5_SetConfig+0x7a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a13      	ldr	r2, [pc, #76]	@ (8006e28 <TIM_OC5_SetConfig+0xc4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d109      	bne.n	8006df2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	621a      	str	r2, [r3, #32]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40013400 	.word	0x40013400
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800

08006e2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	051b      	lsls	r3, r3, #20
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a18      	ldr	r2, [pc, #96]	@ (8006ee4 <TIM_OC6_SetConfig+0xb8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00f      	beq.n	8006ea8 <TIM_OC6_SetConfig+0x7c>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a17      	ldr	r2, [pc, #92]	@ (8006ee8 <TIM_OC6_SetConfig+0xbc>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00b      	beq.n	8006ea8 <TIM_OC6_SetConfig+0x7c>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a16      	ldr	r2, [pc, #88]	@ (8006eec <TIM_OC6_SetConfig+0xc0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d007      	beq.n	8006ea8 <TIM_OC6_SetConfig+0x7c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a15      	ldr	r2, [pc, #84]	@ (8006ef0 <TIM_OC6_SetConfig+0xc4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_OC6_SetConfig+0x7c>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a14      	ldr	r2, [pc, #80]	@ (8006ef4 <TIM_OC6_SetConfig+0xc8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d109      	bne.n	8006ebc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006eae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	029b      	lsls	r3, r3, #10
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40012c00 	.word	0x40012c00
 8006ee8:	40013400 	.word	0x40013400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40014400 	.word	0x40014400
 8006ef4:	40014800 	.word	0x40014800

08006ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f023 0201 	bic.w	r2, r3, #1
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f023 030a 	bic.w	r3, r3, #10
 8006f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	621a      	str	r2, [r3, #32]
}
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b087      	sub	sp, #28
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	f023 0210 	bic.w	r2, r3, #16
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	031b      	lsls	r3, r3, #12
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f043 0307 	orr.w	r3, r3, #7
 8006fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	609a      	str	r2, [r3, #8]
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800700a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	021a      	lsls	r2, r3, #8
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	431a      	orrs	r2, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4313      	orrs	r3, r2
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	609a      	str	r2, [r3, #8]
}
 8007024:	bf00      	nop
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	2201      	movs	r2, #1
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a1a      	ldr	r2, [r3, #32]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	43db      	mvns	r3, r3
 8007052:	401a      	ands	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1a      	ldr	r2, [r3, #32]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	fa01 f303 	lsl.w	r3, r1, r3
 8007068:	431a      	orrs	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d109      	bne.n	80070a0 <HAL_TIMEx_PWMN_Start+0x24>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	bf14      	ite	ne
 8007098:	2301      	movne	r3, #1
 800709a:	2300      	moveq	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	e022      	b.n	80070e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d109      	bne.n	80070ba <HAL_TIMEx_PWMN_Start+0x3e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	bf14      	ite	ne
 80070b2:	2301      	movne	r3, #1
 80070b4:	2300      	moveq	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	e015      	b.n	80070e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d109      	bne.n	80070d4 <HAL_TIMEx_PWMN_Start+0x58>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	bf14      	ite	ne
 80070cc:	2301      	movne	r3, #1
 80070ce:	2300      	moveq	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	e008      	b.n	80070e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	bf14      	ite	ne
 80070e0:	2301      	movne	r3, #1
 80070e2:	2300      	moveq	r3, #0
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e069      	b.n	80071c2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <HAL_TIMEx_PWMN_Start+0x82>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070fc:	e013      	b.n	8007126 <HAL_TIMEx_PWMN_Start+0xaa>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b04      	cmp	r3, #4
 8007102:	d104      	bne.n	800710e <HAL_TIMEx_PWMN_Start+0x92>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800710c:	e00b      	b.n	8007126 <HAL_TIMEx_PWMN_Start+0xaa>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b08      	cmp	r3, #8
 8007112:	d104      	bne.n	800711e <HAL_TIMEx_PWMN_Start+0xa2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800711c:	e003      	b.n	8007126 <HAL_TIMEx_PWMN_Start+0xaa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2202      	movs	r2, #2
 8007122:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2204      	movs	r2, #4
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f000 f9c4 	bl	80074bc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007142:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a20      	ldr	r2, [pc, #128]	@ (80071cc <HAL_TIMEx_PWMN_Start+0x150>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d018      	beq.n	8007180 <HAL_TIMEx_PWMN_Start+0x104>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007156:	d013      	beq.n	8007180 <HAL_TIMEx_PWMN_Start+0x104>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1c      	ldr	r2, [pc, #112]	@ (80071d0 <HAL_TIMEx_PWMN_Start+0x154>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00e      	beq.n	8007180 <HAL_TIMEx_PWMN_Start+0x104>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1b      	ldr	r2, [pc, #108]	@ (80071d4 <HAL_TIMEx_PWMN_Start+0x158>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d009      	beq.n	8007180 <HAL_TIMEx_PWMN_Start+0x104>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a19      	ldr	r2, [pc, #100]	@ (80071d8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <HAL_TIMEx_PWMN_Start+0x104>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a18      	ldr	r2, [pc, #96]	@ (80071dc <HAL_TIMEx_PWMN_Start+0x160>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d115      	bne.n	80071ac <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	4b16      	ldr	r3, [pc, #88]	@ (80071e0 <HAL_TIMEx_PWMN_Start+0x164>)
 8007188:	4013      	ands	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b06      	cmp	r3, #6
 8007190:	d015      	beq.n	80071be <HAL_TIMEx_PWMN_Start+0x142>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007198:	d011      	beq.n	80071be <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f042 0201 	orr.w	r2, r2, #1
 80071a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071aa:	e008      	b.n	80071be <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	e000      	b.n	80071c0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40012c00 	.word	0x40012c00
 80071d0:	40000400 	.word	0x40000400
 80071d4:	40000800 	.word	0x40000800
 80071d8:	40013400 	.word	0x40013400
 80071dc:	40014000 	.word	0x40014000
 80071e0:	00010007 	.word	0x00010007

080071e4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 f960 	bl	80074bc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6a1a      	ldr	r2, [r3, #32]
 8007202:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007206:	4013      	ands	r3, r2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10f      	bne.n	800722c <HAL_TIMEx_PWMN_Stop+0x48>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6a1a      	ldr	r2, [r3, #32]
 8007212:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007216:	4013      	ands	r3, r2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d107      	bne.n	800722c <HAL_TIMEx_PWMN_Stop+0x48>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800722a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6a1a      	ldr	r2, [r3, #32]
 8007232:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007236:	4013      	ands	r3, r2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10f      	bne.n	800725c <HAL_TIMEx_PWMN_Stop+0x78>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007246:	4013      	ands	r3, r2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d107      	bne.n	800725c <HAL_TIMEx_PWMN_Stop+0x78>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0201 	bic.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d104      	bne.n	800726c <HAL_TIMEx_PWMN_Stop+0x88>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800726a:	e013      	b.n	8007294 <HAL_TIMEx_PWMN_Stop+0xb0>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b04      	cmp	r3, #4
 8007270:	d104      	bne.n	800727c <HAL_TIMEx_PWMN_Stop+0x98>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800727a:	e00b      	b.n	8007294 <HAL_TIMEx_PWMN_Stop+0xb0>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b08      	cmp	r3, #8
 8007280:	d104      	bne.n	800728c <HAL_TIMEx_PWMN_Stop+0xa8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800728a:	e003      	b.n	8007294 <HAL_TIMEx_PWMN_Stop+0xb0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e065      	b.n	8007384 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007390 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d004      	beq.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a2b      	ldr	r2, [pc, #172]	@ (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d108      	bne.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007308:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1b      	ldr	r2, [pc, #108]	@ (8007390 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d018      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800732e:	d013      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a18      	ldr	r2, [pc, #96]	@ (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00e      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a17      	ldr	r2, [pc, #92]	@ (800739c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d009      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a12      	ldr	r2, [pc, #72]	@ (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a13      	ldr	r2, [pc, #76]	@ (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d10c      	bne.n	8007372 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800735e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	4313      	orrs	r3, r2
 8007368:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	40012c00 	.word	0x40012c00
 8007394:	40013400 	.word	0x40013400
 8007398:	40000400 	.word	0x40000400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40014000 	.word	0x40014000

080073a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073bc:	2302      	movs	r3, #2
 80073be:	e073      	b.n	80074a8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	041b      	lsls	r3, r3, #16
 8007436:	4313      	orrs	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a19      	ldr	r2, [pc, #100]	@ (80074b4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d004      	beq.n	800745c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a18      	ldr	r2, [pc, #96]	@ (80074b8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d11c      	bne.n	8007496 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007466:	051b      	lsls	r3, r3, #20
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007484:	4313      	orrs	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	40012c00 	.word	0x40012c00
 80074b8:	40013400 	.word	0x40013400

080074bc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 030f 	and.w	r3, r3, #15
 80074ce:	2204      	movs	r2, #4
 80074d0:	fa02 f303 	lsl.w	r3, r2, r3
 80074d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a1a      	ldr	r2, [r3, #32]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	43db      	mvns	r3, r3
 80074de:	401a      	ands	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6a1a      	ldr	r2, [r3, #32]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f003 030f 	and.w	r3, r3, #15
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	fa01 f303 	lsl.w	r3, r1, r3
 80074f4:	431a      	orrs	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e042      	b.n	800759e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fa fce0 	bl	8001ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2224      	movs	r2, #36	@ 0x24
 8007534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0201 	bic.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 ff35 	bl	80083c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fc66 	bl	8007e28 <UART_SetConfig>
 800755c:	4603      	mov	r3, r0
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e01b      	b.n	800759e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007574:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007584:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0201 	orr.w	r2, r2, #1
 8007594:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 ffb4 	bl	8008504 <UART_CheckIdleState>
 800759c:	4603      	mov	r3, r0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b08a      	sub	sp, #40	@ 0x28
 80075aa:	af02      	add	r7, sp, #8
 80075ac:	60f8      	str	r0, [r7, #12]
 80075ae:	60b9      	str	r1, [r7, #8]
 80075b0:	603b      	str	r3, [r7, #0]
 80075b2:	4613      	mov	r3, r2
 80075b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d17b      	bne.n	80076b8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <HAL_UART_Transmit+0x26>
 80075c6:	88fb      	ldrh	r3, [r7, #6]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e074      	b.n	80076ba <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2221      	movs	r2, #33	@ 0x21
 80075dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075e0:	f7fb fbd2 	bl	8002d88 <HAL_GetTick>
 80075e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	88fa      	ldrh	r2, [r7, #6]
 80075ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075fe:	d108      	bne.n	8007612 <HAL_UART_Transmit+0x6c>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d104      	bne.n	8007612 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007608:	2300      	movs	r3, #0
 800760a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	e003      	b.n	800761a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800761a:	e030      	b.n	800767e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2200      	movs	r2, #0
 8007624:	2180      	movs	r1, #128	@ 0x80
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f001 f816 	bl	8008658 <UART_WaitOnFlagUntilTimeout>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d005      	beq.n	800763e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e03d      	b.n	80076ba <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10b      	bne.n	800765c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007652:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	3302      	adds	r3, #2
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	e007      	b.n	800766c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3301      	adds	r3, #1
 800766a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007672:	b29b      	uxth	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1c8      	bne.n	800761c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	2140      	movs	r1, #64	@ 0x40
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 ffdf 	bl	8008658 <UART_WaitOnFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e006      	b.n	80076ba <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	e000      	b.n	80076ba <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80076b8:	2302      	movs	r3, #2
  }
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3720      	adds	r7, #32
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	@ 0x28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076d8:	2b20      	cmp	r3, #32
 80076da:	d137      	bne.n	800774c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <HAL_UART_Receive_IT+0x24>
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e030      	b.n	800774e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a18      	ldr	r2, [pc, #96]	@ (8007758 <HAL_UART_Receive_IT+0x94>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d01f      	beq.n	800773c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d018      	beq.n	800773c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	613b      	str	r3, [r7, #16]
   return(result);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800771e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	623b      	str	r3, [r7, #32]
 800772a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	69f9      	ldr	r1, [r7, #28]
 800772e:	6a3a      	ldr	r2, [r7, #32]
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	61bb      	str	r3, [r7, #24]
   return(result);
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e6      	bne.n	800770a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800773c:	88fb      	ldrh	r3, [r7, #6]
 800773e:	461a      	mov	r2, r3
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fff6 	bl	8008734 <UART_Start_Receive_IT>
 8007748:	4603      	mov	r3, r0
 800774a:	e000      	b.n	800774e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800774c:	2302      	movs	r3, #2
  }
}
 800774e:	4618      	mov	r0, r3
 8007750:	3728      	adds	r7, #40	@ 0x28
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40008000 	.word	0x40008000

0800775c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b0ba      	sub	sp, #232	@ 0xe8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007782:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007786:	f640 030f 	movw	r3, #2063	@ 0x80f
 800778a:	4013      	ands	r3, r2
 800778c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d11b      	bne.n	80077d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d015      	beq.n	80077d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d105      	bne.n	80077bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d009      	beq.n	80077d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 8300 	beq.w	8007dc6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	4798      	blx	r3
      }
      return;
 80077ce:	e2fa      	b.n	8007dc6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 8123 	beq.w	8007a20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80077da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80077de:	4b8d      	ldr	r3, [pc, #564]	@ (8007a14 <HAL_UART_IRQHandler+0x2b8>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80077e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80077ea:	4b8b      	ldr	r3, [pc, #556]	@ (8007a18 <HAL_UART_IRQHandler+0x2bc>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 8116 	beq.w	8007a20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d011      	beq.n	8007824 <HAL_UART_IRQHandler+0xc8>
 8007800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00b      	beq.n	8007824 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2201      	movs	r2, #1
 8007812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781a:	f043 0201 	orr.w	r2, r3, #1
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d011      	beq.n	8007854 <HAL_UART_IRQHandler+0xf8>
 8007830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2202      	movs	r2, #2
 8007842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800784a:	f043 0204 	orr.w	r2, r3, #4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d011      	beq.n	8007884 <HAL_UART_IRQHandler+0x128>
 8007860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2204      	movs	r2, #4
 8007872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787a:	f043 0202 	orr.w	r2, r3, #2
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b00      	cmp	r3, #0
 800788e:	d017      	beq.n	80078c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007894:	f003 0320 	and.w	r3, r3, #32
 8007898:	2b00      	cmp	r3, #0
 800789a:	d105      	bne.n	80078a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800789c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007a14 <HAL_UART_IRQHandler+0x2b8>)
 80078a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2208      	movs	r2, #8
 80078ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b6:	f043 0208 	orr.w	r2, r3, #8
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d012      	beq.n	80078f2 <HAL_UART_IRQHandler+0x196>
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00c      	beq.n	80078f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e8:	f043 0220 	orr.w	r2, r3, #32
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8266 	beq.w	8007dca <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d013      	beq.n	8007932 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800790a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d105      	bne.n	8007922 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800791a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d007      	beq.n	8007932 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007938:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007946:	2b40      	cmp	r3, #64	@ 0x40
 8007948:	d005      	beq.n	8007956 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800794a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800794e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007952:	2b00      	cmp	r3, #0
 8007954:	d054      	beq.n	8007a00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 f80e 	bl	8008978 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007966:	2b40      	cmp	r3, #64	@ 0x40
 8007968:	d146      	bne.n	80079f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007980:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3308      	adds	r3, #8
 8007992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007996:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800799a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1d9      	bne.n	800796a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d017      	beq.n	80079f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079c6:	4a15      	ldr	r2, [pc, #84]	@ (8007a1c <HAL_UART_IRQHandler+0x2c0>)
 80079c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fc ff7d 	bl	80048d0 <HAL_DMA_Abort_IT>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d019      	beq.n	8007a10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80079ea:	4610      	mov	r0, r2
 80079ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ee:	e00f      	b.n	8007a10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7f9 fcb1 	bl	8001358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f6:	e00b      	b.n	8007a10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7f9 fcad 	bl	8001358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079fe:	e007      	b.n	8007a10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7f9 fca9 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007a0e:	e1dc      	b.n	8007dca <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a10:	bf00      	nop
    return;
 8007a12:	e1da      	b.n	8007dca <HAL_UART_IRQHandler+0x66e>
 8007a14:	10000001 	.word	0x10000001
 8007a18:	04000120 	.word	0x04000120
 8007a1c:	08008a45 	.word	0x08008a45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	f040 8170 	bne.w	8007d0a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a2e:	f003 0310 	and.w	r3, r3, #16
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 8169 	beq.w	8007d0a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 8162 	beq.w	8007d0a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2210      	movs	r2, #16
 8007a4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a58:	2b40      	cmp	r3, #64	@ 0x40
 8007a5a:	f040 80d8 	bne.w	8007c0e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 80af 	beq.w	8007bd4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a80:	429a      	cmp	r2, r3
 8007a82:	f080 80a7 	bcs.w	8007bd4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f040 8087 	bne.w	8007bb2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ad2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1da      	bne.n	8007aa4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3308      	adds	r3, #8
 8007af4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007afe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b00:	f023 0301 	bic.w	r3, r3, #1
 8007b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e1      	bne.n	8007aee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3308      	adds	r3, #8
 8007b30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e3      	bne.n	8007b2a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b80:	f023 0310 	bic.w	r3, r3, #16
 8007b84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1e4      	bne.n	8007b70 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fc fe36 	bl	800481e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f911 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007bd2:	e0fc      	b.n	8007dce <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bde:	429a      	cmp	r2, r3
 8007be0:	f040 80f5 	bne.w	8007dce <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	f040 80eb 	bne.w	8007dce <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8f4 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
      return;
 8007c0c:	e0df      	b.n	8007dce <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 80d1 	beq.w	8007dd2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 80cc 	beq.w	8007dd2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e4      	bne.n	8007c3a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c98:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e1      	bne.n	8007c70 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f023 0310 	bic.w	r3, r3, #16
 8007cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	69b9      	ldr	r1, [r7, #24]
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e4      	bne.n	8007cc0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f876 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d08:	e063      	b.n	8007dd2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00e      	beq.n	8007d34 <HAL_UART_IRQHandler+0x5d8>
 8007d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fbeb 	bl	8009508 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d32:	e051      	b.n	8007dd8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d014      	beq.n	8007d6a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d105      	bne.n	8007d58 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d008      	beq.n	8007d6a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d03a      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
    }
    return;
 8007d68:	e035      	b.n	8007dd6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d009      	beq.n	8007d8a <HAL_UART_IRQHandler+0x62e>
 8007d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fe74 	bl	8008a70 <UART_EndTransmit_IT>
    return;
 8007d88:	e026      	b.n	8007dd8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <HAL_UART_IRQHandler+0x64e>
 8007d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fbc4 	bl	8009530 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007da8:	e016      	b.n	8007dd8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d010      	beq.n	8007dd8 <HAL_UART_IRQHandler+0x67c>
 8007db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	da0c      	bge.n	8007dd8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 fbac 	bl	800951c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dc4:	e008      	b.n	8007dd8 <HAL_UART_IRQHandler+0x67c>
      return;
 8007dc6:	bf00      	nop
 8007dc8:	e006      	b.n	8007dd8 <HAL_UART_IRQHandler+0x67c>
    return;
 8007dca:	bf00      	nop
 8007dcc:	e004      	b.n	8007dd8 <HAL_UART_IRQHandler+0x67c>
      return;
 8007dce:	bf00      	nop
 8007dd0:	e002      	b.n	8007dd8 <HAL_UART_IRQHandler+0x67c>
      return;
 8007dd2:	bf00      	nop
 8007dd4:	e000      	b.n	8007dd8 <HAL_UART_IRQHandler+0x67c>
    return;
 8007dd6:	bf00      	nop
  }
}
 8007dd8:	37e8      	adds	r7, #232	@ 0xe8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop

08007de0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
	...

08007e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e2c:	b08c      	sub	sp, #48	@ 0x30
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	431a      	orrs	r2, r3
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	4bab      	ldr	r3, [pc, #684]	@ (8008104 <UART_SetConfig+0x2dc>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	6812      	ldr	r2, [r2, #0]
 8007e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e60:	430b      	orrs	r3, r1
 8007e62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	68da      	ldr	r2, [r3, #12]
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4aa0      	ldr	r2, [pc, #640]	@ (8008108 <UART_SetConfig+0x2e0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d004      	beq.n	8007e94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e90:	4313      	orrs	r3, r2
 8007e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007e9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	6812      	ldr	r2, [r2, #0]
 8007ea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ea8:	430b      	orrs	r3, r1
 8007eaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb2:	f023 010f 	bic.w	r1, r3, #15
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a91      	ldr	r2, [pc, #580]	@ (800810c <UART_SetConfig+0x2e4>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d125      	bne.n	8007f18 <UART_SetConfig+0xf0>
 8007ecc:	4b90      	ldr	r3, [pc, #576]	@ (8008110 <UART_SetConfig+0x2e8>)
 8007ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d81a      	bhi.n	8007f10 <UART_SetConfig+0xe8>
 8007eda:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee0 <UART_SetConfig+0xb8>)
 8007edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee0:	08007ef1 	.word	0x08007ef1
 8007ee4:	08007f01 	.word	0x08007f01
 8007ee8:	08007ef9 	.word	0x08007ef9
 8007eec:	08007f09 	.word	0x08007f09
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ef6:	e0d6      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007efe:	e0d2      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007f00:	2304      	movs	r3, #4
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f06:	e0ce      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007f08:	2308      	movs	r3, #8
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f0e:	e0ca      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007f10:	2310      	movs	r3, #16
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f16:	e0c6      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a7d      	ldr	r2, [pc, #500]	@ (8008114 <UART_SetConfig+0x2ec>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d138      	bne.n	8007f94 <UART_SetConfig+0x16c>
 8007f22:	4b7b      	ldr	r3, [pc, #492]	@ (8008110 <UART_SetConfig+0x2e8>)
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f28:	f003 030c 	and.w	r3, r3, #12
 8007f2c:	2b0c      	cmp	r3, #12
 8007f2e:	d82d      	bhi.n	8007f8c <UART_SetConfig+0x164>
 8007f30:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <UART_SetConfig+0x110>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f6d 	.word	0x08007f6d
 8007f3c:	08007f8d 	.word	0x08007f8d
 8007f40:	08007f8d 	.word	0x08007f8d
 8007f44:	08007f8d 	.word	0x08007f8d
 8007f48:	08007f7d 	.word	0x08007f7d
 8007f4c:	08007f8d 	.word	0x08007f8d
 8007f50:	08007f8d 	.word	0x08007f8d
 8007f54:	08007f8d 	.word	0x08007f8d
 8007f58:	08007f75 	.word	0x08007f75
 8007f5c:	08007f8d 	.word	0x08007f8d
 8007f60:	08007f8d 	.word	0x08007f8d
 8007f64:	08007f8d 	.word	0x08007f8d
 8007f68:	08007f85 	.word	0x08007f85
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f72:	e098      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007f74:	2302      	movs	r3, #2
 8007f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7a:	e094      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007f7c:	2304      	movs	r3, #4
 8007f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f82:	e090      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007f84:	2308      	movs	r3, #8
 8007f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8a:	e08c      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007f8c:	2310      	movs	r3, #16
 8007f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f92:	e088      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a5f      	ldr	r2, [pc, #380]	@ (8008118 <UART_SetConfig+0x2f0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d125      	bne.n	8007fea <UART_SetConfig+0x1c2>
 8007f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8008110 <UART_SetConfig+0x2e8>)
 8007fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007fa8:	2b30      	cmp	r3, #48	@ 0x30
 8007faa:	d016      	beq.n	8007fda <UART_SetConfig+0x1b2>
 8007fac:	2b30      	cmp	r3, #48	@ 0x30
 8007fae:	d818      	bhi.n	8007fe2 <UART_SetConfig+0x1ba>
 8007fb0:	2b20      	cmp	r3, #32
 8007fb2:	d00a      	beq.n	8007fca <UART_SetConfig+0x1a2>
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d814      	bhi.n	8007fe2 <UART_SetConfig+0x1ba>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <UART_SetConfig+0x19a>
 8007fbc:	2b10      	cmp	r3, #16
 8007fbe:	d008      	beq.n	8007fd2 <UART_SetConfig+0x1aa>
 8007fc0:	e00f      	b.n	8007fe2 <UART_SetConfig+0x1ba>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc8:	e06d      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007fca:	2302      	movs	r3, #2
 8007fcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd0:	e069      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007fd2:	2304      	movs	r3, #4
 8007fd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd8:	e065      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007fda:	2308      	movs	r3, #8
 8007fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe0:	e061      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007fe2:	2310      	movs	r3, #16
 8007fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe8:	e05d      	b.n	80080a6 <UART_SetConfig+0x27e>
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a4b      	ldr	r2, [pc, #300]	@ (800811c <UART_SetConfig+0x2f4>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d125      	bne.n	8008040 <UART_SetConfig+0x218>
 8007ff4:	4b46      	ldr	r3, [pc, #280]	@ (8008110 <UART_SetConfig+0x2e8>)
 8007ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ffa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ffe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008000:	d016      	beq.n	8008030 <UART_SetConfig+0x208>
 8008002:	2bc0      	cmp	r3, #192	@ 0xc0
 8008004:	d818      	bhi.n	8008038 <UART_SetConfig+0x210>
 8008006:	2b80      	cmp	r3, #128	@ 0x80
 8008008:	d00a      	beq.n	8008020 <UART_SetConfig+0x1f8>
 800800a:	2b80      	cmp	r3, #128	@ 0x80
 800800c:	d814      	bhi.n	8008038 <UART_SetConfig+0x210>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <UART_SetConfig+0x1f0>
 8008012:	2b40      	cmp	r3, #64	@ 0x40
 8008014:	d008      	beq.n	8008028 <UART_SetConfig+0x200>
 8008016:	e00f      	b.n	8008038 <UART_SetConfig+0x210>
 8008018:	2300      	movs	r3, #0
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801e:	e042      	b.n	80080a6 <UART_SetConfig+0x27e>
 8008020:	2302      	movs	r3, #2
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008026:	e03e      	b.n	80080a6 <UART_SetConfig+0x27e>
 8008028:	2304      	movs	r3, #4
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802e:	e03a      	b.n	80080a6 <UART_SetConfig+0x27e>
 8008030:	2308      	movs	r3, #8
 8008032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008036:	e036      	b.n	80080a6 <UART_SetConfig+0x27e>
 8008038:	2310      	movs	r3, #16
 800803a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803e:	e032      	b.n	80080a6 <UART_SetConfig+0x27e>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a30      	ldr	r2, [pc, #192]	@ (8008108 <UART_SetConfig+0x2e0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d12a      	bne.n	80080a0 <UART_SetConfig+0x278>
 800804a:	4b31      	ldr	r3, [pc, #196]	@ (8008110 <UART_SetConfig+0x2e8>)
 800804c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008050:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008054:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008058:	d01a      	beq.n	8008090 <UART_SetConfig+0x268>
 800805a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800805e:	d81b      	bhi.n	8008098 <UART_SetConfig+0x270>
 8008060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008064:	d00c      	beq.n	8008080 <UART_SetConfig+0x258>
 8008066:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800806a:	d815      	bhi.n	8008098 <UART_SetConfig+0x270>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <UART_SetConfig+0x250>
 8008070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008074:	d008      	beq.n	8008088 <UART_SetConfig+0x260>
 8008076:	e00f      	b.n	8008098 <UART_SetConfig+0x270>
 8008078:	2300      	movs	r3, #0
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807e:	e012      	b.n	80080a6 <UART_SetConfig+0x27e>
 8008080:	2302      	movs	r3, #2
 8008082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008086:	e00e      	b.n	80080a6 <UART_SetConfig+0x27e>
 8008088:	2304      	movs	r3, #4
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800808e:	e00a      	b.n	80080a6 <UART_SetConfig+0x27e>
 8008090:	2308      	movs	r3, #8
 8008092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008096:	e006      	b.n	80080a6 <UART_SetConfig+0x27e>
 8008098:	2310      	movs	r3, #16
 800809a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800809e:	e002      	b.n	80080a6 <UART_SetConfig+0x27e>
 80080a0:	2310      	movs	r3, #16
 80080a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a17      	ldr	r2, [pc, #92]	@ (8008108 <UART_SetConfig+0x2e0>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	f040 80a8 	bne.w	8008202 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d834      	bhi.n	8008124 <UART_SetConfig+0x2fc>
 80080ba:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <UART_SetConfig+0x298>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080e5 	.word	0x080080e5
 80080c4:	08008125 	.word	0x08008125
 80080c8:	080080ed 	.word	0x080080ed
 80080cc:	08008125 	.word	0x08008125
 80080d0:	080080f3 	.word	0x080080f3
 80080d4:	08008125 	.word	0x08008125
 80080d8:	08008125 	.word	0x08008125
 80080dc:	08008125 	.word	0x08008125
 80080e0:	080080fb 	.word	0x080080fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080e4:	f7fd fb66 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 80080e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080ea:	e021      	b.n	8008130 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008120 <UART_SetConfig+0x2f8>)
 80080ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080f0:	e01e      	b.n	8008130 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080f2:	f7fd faf1 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 80080f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080f8:	e01a      	b.n	8008130 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008100:	e016      	b.n	8008130 <UART_SetConfig+0x308>
 8008102:	bf00      	nop
 8008104:	cfff69f3 	.word	0xcfff69f3
 8008108:	40008000 	.word	0x40008000
 800810c:	40013800 	.word	0x40013800
 8008110:	40021000 	.word	0x40021000
 8008114:	40004400 	.word	0x40004400
 8008118:	40004800 	.word	0x40004800
 800811c:	40004c00 	.word	0x40004c00
 8008120:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800812e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 812a 	beq.w	800838c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	4a9e      	ldr	r2, [pc, #632]	@ (80083b8 <UART_SetConfig+0x590>)
 800813e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008142:	461a      	mov	r2, r3
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	fbb3 f3f2 	udiv	r3, r3, r2
 800814a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	4613      	mov	r3, r2
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	4413      	add	r3, r2
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	429a      	cmp	r2, r3
 800815a:	d305      	bcc.n	8008168 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	429a      	cmp	r2, r3
 8008166:	d903      	bls.n	8008170 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800816e:	e10d      	b.n	800838c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008172:	2200      	movs	r2, #0
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	60fa      	str	r2, [r7, #12]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817c:	4a8e      	ldr	r2, [pc, #568]	@ (80083b8 <UART_SetConfig+0x590>)
 800817e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008182:	b29b      	uxth	r3, r3
 8008184:	2200      	movs	r2, #0
 8008186:	603b      	str	r3, [r7, #0]
 8008188:	607a      	str	r2, [r7, #4]
 800818a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800818e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008192:	f7f8 fda1 	bl	8000cd8 <__aeabi_uldivmod>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	020b      	lsls	r3, r1, #8
 80081a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081ac:	0202      	lsls	r2, r0, #8
 80081ae:	6979      	ldr	r1, [r7, #20]
 80081b0:	6849      	ldr	r1, [r1, #4]
 80081b2:	0849      	lsrs	r1, r1, #1
 80081b4:	2000      	movs	r0, #0
 80081b6:	460c      	mov	r4, r1
 80081b8:	4605      	mov	r5, r0
 80081ba:	eb12 0804 	adds.w	r8, r2, r4
 80081be:	eb43 0905 	adc.w	r9, r3, r5
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	469a      	mov	sl, r3
 80081ca:	4693      	mov	fp, r2
 80081cc:	4652      	mov	r2, sl
 80081ce:	465b      	mov	r3, fp
 80081d0:	4640      	mov	r0, r8
 80081d2:	4649      	mov	r1, r9
 80081d4:	f7f8 fd80 	bl	8000cd8 <__aeabi_uldivmod>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4613      	mov	r3, r2
 80081de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081e6:	d308      	bcc.n	80081fa <UART_SetConfig+0x3d2>
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ee:	d204      	bcs.n	80081fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6a3a      	ldr	r2, [r7, #32]
 80081f6:	60da      	str	r2, [r3, #12]
 80081f8:	e0c8      	b.n	800838c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008200:	e0c4      	b.n	800838c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800820a:	d167      	bne.n	80082dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800820c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008210:	2b08      	cmp	r3, #8
 8008212:	d828      	bhi.n	8008266 <UART_SetConfig+0x43e>
 8008214:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <UART_SetConfig+0x3f4>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008241 	.word	0x08008241
 8008220:	08008249 	.word	0x08008249
 8008224:	08008251 	.word	0x08008251
 8008228:	08008267 	.word	0x08008267
 800822c:	08008257 	.word	0x08008257
 8008230:	08008267 	.word	0x08008267
 8008234:	08008267 	.word	0x08008267
 8008238:	08008267 	.word	0x08008267
 800823c:	0800825f 	.word	0x0800825f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008240:	f7fd fab8 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8008244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008246:	e014      	b.n	8008272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008248:	f7fd faca 	bl	80057e0 <HAL_RCC_GetPCLK2Freq>
 800824c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800824e:	e010      	b.n	8008272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008250:	4b5a      	ldr	r3, [pc, #360]	@ (80083bc <UART_SetConfig+0x594>)
 8008252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008254:	e00d      	b.n	8008272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008256:	f7fd fa3f 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 800825a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800825c:	e009      	b.n	8008272 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800825e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008264:	e005      	b.n	8008272 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 8089 	beq.w	800838c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827e:	4a4e      	ldr	r2, [pc, #312]	@ (80083b8 <UART_SetConfig+0x590>)
 8008280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008284:	461a      	mov	r2, r3
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	fbb3 f3f2 	udiv	r3, r3, r2
 800828c:	005a      	lsls	r2, r3, #1
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	085b      	lsrs	r3, r3, #1
 8008294:	441a      	add	r2, r3
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	fbb2 f3f3 	udiv	r3, r2, r3
 800829e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	2b0f      	cmp	r3, #15
 80082a4:	d916      	bls.n	80082d4 <UART_SetConfig+0x4ac>
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ac:	d212      	bcs.n	80082d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f023 030f 	bic.w	r3, r3, #15
 80082b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	085b      	lsrs	r3, r3, #1
 80082bc:	b29b      	uxth	r3, r3
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	8bfb      	ldrh	r3, [r7, #30]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	8bfa      	ldrh	r2, [r7, #30]
 80082d0:	60da      	str	r2, [r3, #12]
 80082d2:	e05b      	b.n	800838c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082da:	e057      	b.n	800838c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d828      	bhi.n	8008336 <UART_SetConfig+0x50e>
 80082e4:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <UART_SetConfig+0x4c4>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	08008311 	.word	0x08008311
 80082f0:	08008319 	.word	0x08008319
 80082f4:	08008321 	.word	0x08008321
 80082f8:	08008337 	.word	0x08008337
 80082fc:	08008327 	.word	0x08008327
 8008300:	08008337 	.word	0x08008337
 8008304:	08008337 	.word	0x08008337
 8008308:	08008337 	.word	0x08008337
 800830c:	0800832f 	.word	0x0800832f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008310:	f7fd fa50 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8008314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008316:	e014      	b.n	8008342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008318:	f7fd fa62 	bl	80057e0 <HAL_RCC_GetPCLK2Freq>
 800831c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800831e:	e010      	b.n	8008342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008320:	4b26      	ldr	r3, [pc, #152]	@ (80083bc <UART_SetConfig+0x594>)
 8008322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008324:	e00d      	b.n	8008342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008326:	f7fd f9d7 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 800832a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800832c:	e009      	b.n	8008342 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800832e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008334:	e005      	b.n	8008342 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008340:	bf00      	nop
    }

    if (pclk != 0U)
 8008342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008344:	2b00      	cmp	r3, #0
 8008346:	d021      	beq.n	800838c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800834c:	4a1a      	ldr	r2, [pc, #104]	@ (80083b8 <UART_SetConfig+0x590>)
 800834e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008352:	461a      	mov	r2, r3
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	fbb3 f2f2 	udiv	r2, r3, r2
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	085b      	lsrs	r3, r3, #1
 8008360:	441a      	add	r2, r3
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	fbb2 f3f3 	udiv	r3, r2, r3
 800836a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	2b0f      	cmp	r3, #15
 8008370:	d909      	bls.n	8008386 <UART_SetConfig+0x55e>
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008378:	d205      	bcs.n	8008386 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	b29a      	uxth	r2, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60da      	str	r2, [r3, #12]
 8008384:	e002      	b.n	800838c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2201      	movs	r2, #1
 8008390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2201      	movs	r2, #1
 8008398:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2200      	movs	r2, #0
 80083a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2200      	movs	r2, #0
 80083a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80083a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3730      	adds	r7, #48	@ 0x30
 80083b0:	46bd      	mov	sp, r7
 80083b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083b6:	bf00      	nop
 80083b8:	0800e75c 	.word	0x0800e75c
 80083bc:	00f42400 	.word	0x00f42400

080083c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083cc:	f003 0308 	and.w	r3, r3, #8
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00a      	beq.n	80083ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00a      	beq.n	800842e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008432:	f003 0304 	and.w	r3, r3, #4
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008454:	f003 0310 	and.w	r3, r3, #16
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00a      	beq.n	8008472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	d01a      	beq.n	80084d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084be:	d10a      	bne.n	80084d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	605a      	str	r2, [r3, #4]
  }
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b098      	sub	sp, #96	@ 0x60
 8008508:	af02      	add	r7, sp, #8
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008514:	f7fa fc38 	bl	8002d88 <HAL_GetTick>
 8008518:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0308 	and.w	r3, r3, #8
 8008524:	2b08      	cmp	r3, #8
 8008526:	d12f      	bne.n	8008588 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008530:	2200      	movs	r2, #0
 8008532:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f88e 	bl	8008658 <UART_WaitOnFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d022      	beq.n	8008588 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854a:	e853 3f00 	ldrex	r3, [r3]
 800854e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008556:	653b      	str	r3, [r7, #80]	@ 0x50
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008560:	647b      	str	r3, [r7, #68]	@ 0x44
 8008562:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008568:	e841 2300 	strex	r3, r2, [r1]
 800856c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800856e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e6      	bne.n	8008542 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e063      	b.n	8008650 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b04      	cmp	r3, #4
 8008594:	d149      	bne.n	800862a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008596:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800859e:	2200      	movs	r2, #0
 80085a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f857 	bl	8008658 <UART_WaitOnFlagUntilTimeout>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d03c      	beq.n	800862a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	623b      	str	r3, [r7, #32]
   return(result);
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80085d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e6      	bne.n	80085b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008602:	61fa      	str	r2, [r7, #28]
 8008604:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	69b9      	ldr	r1, [r7, #24]
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	617b      	str	r3, [r7, #20]
   return(result);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e012      	b.n	8008650 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2220      	movs	r2, #32
 8008636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3758      	adds	r7, #88	@ 0x58
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	603b      	str	r3, [r7, #0]
 8008664:	4613      	mov	r3, r2
 8008666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008668:	e04f      	b.n	800870a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008670:	d04b      	beq.n	800870a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008672:	f7fa fb89 	bl	8002d88 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	429a      	cmp	r2, r3
 8008680:	d302      	bcc.n	8008688 <UART_WaitOnFlagUntilTimeout+0x30>
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d101      	bne.n	800868c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e04e      	b.n	800872a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0304 	and.w	r3, r3, #4
 8008696:	2b00      	cmp	r3, #0
 8008698:	d037      	beq.n	800870a <UART_WaitOnFlagUntilTimeout+0xb2>
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b80      	cmp	r3, #128	@ 0x80
 800869e:	d034      	beq.n	800870a <UART_WaitOnFlagUntilTimeout+0xb2>
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b40      	cmp	r3, #64	@ 0x40
 80086a4:	d031      	beq.n	800870a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	f003 0308 	and.w	r3, r3, #8
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d110      	bne.n	80086d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2208      	movs	r2, #8
 80086ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 f95b 	bl	8008978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2208      	movs	r2, #8
 80086c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e029      	b.n	800872a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086e4:	d111      	bne.n	800870a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 f941 	bl	8008978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e00f      	b.n	800872a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69da      	ldr	r2, [r3, #28]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	4013      	ands	r3, r2
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	429a      	cmp	r2, r3
 8008718:	bf0c      	ite	eq
 800871a:	2301      	moveq	r3, #1
 800871c:	2300      	movne	r3, #0
 800871e:	b2db      	uxtb	r3, r3
 8008720:	461a      	mov	r2, r3
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	429a      	cmp	r2, r3
 8008726:	d0a0      	beq.n	800866a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008734:	b480      	push	{r7}
 8008736:	b0a3      	sub	sp, #140	@ 0x8c
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	88fa      	ldrh	r2, [r7, #6]
 800874c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	88fa      	ldrh	r2, [r7, #6]
 8008754:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008766:	d10e      	bne.n	8008786 <UART_Start_Receive_IT+0x52>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d105      	bne.n	800877c <UART_Start_Receive_IT+0x48>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008776:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800877a:	e02d      	b.n	80087d8 <UART_Start_Receive_IT+0xa4>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	22ff      	movs	r2, #255	@ 0xff
 8008780:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008784:	e028      	b.n	80087d8 <UART_Start_Receive_IT+0xa4>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10d      	bne.n	80087aa <UART_Start_Receive_IT+0x76>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d104      	bne.n	80087a0 <UART_Start_Receive_IT+0x6c>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	22ff      	movs	r2, #255	@ 0xff
 800879a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800879e:	e01b      	b.n	80087d8 <UART_Start_Receive_IT+0xa4>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	227f      	movs	r2, #127	@ 0x7f
 80087a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087a8:	e016      	b.n	80087d8 <UART_Start_Receive_IT+0xa4>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087b2:	d10d      	bne.n	80087d0 <UART_Start_Receive_IT+0x9c>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <UART_Start_Receive_IT+0x92>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	227f      	movs	r2, #127	@ 0x7f
 80087c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087c4:	e008      	b.n	80087d8 <UART_Start_Receive_IT+0xa4>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	223f      	movs	r2, #63	@ 0x3f
 80087ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087ce:	e003      	b.n	80087d8 <UART_Start_Receive_IT+0xa4>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2222      	movs	r2, #34	@ 0x22
 80087e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087f2:	e853 3f00 	ldrex	r3, [r3]
 80087f6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80087f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087fa:	f043 0301 	orr.w	r3, r3, #1
 80087fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3308      	adds	r3, #8
 8008808:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800880c:	673a      	str	r2, [r7, #112]	@ 0x70
 800880e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008810:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008812:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008814:	e841 2300 	strex	r3, r2, [r1]
 8008818:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800881a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e3      	bne.n	80087e8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008828:	d14f      	bne.n	80088ca <UART_Start_Receive_IT+0x196>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008830:	88fa      	ldrh	r2, [r7, #6]
 8008832:	429a      	cmp	r2, r3
 8008834:	d349      	bcc.n	80088ca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800883e:	d107      	bne.n	8008850 <UART_Start_Receive_IT+0x11c>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d103      	bne.n	8008850 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4a47      	ldr	r2, [pc, #284]	@ (8008968 <UART_Start_Receive_IT+0x234>)
 800884c:	675a      	str	r2, [r3, #116]	@ 0x74
 800884e:	e002      	b.n	8008856 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a46      	ldr	r2, [pc, #280]	@ (800896c <UART_Start_Receive_IT+0x238>)
 8008854:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d01a      	beq.n	8008894 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800886c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800886e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008872:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008880:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008882:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008886:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800888e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e4      	bne.n	800885e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3308      	adds	r3, #8
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800889e:	e853 3f00 	ldrex	r3, [r3]
 80088a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3308      	adds	r3, #8
 80088b2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80088b4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80088b6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80088ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088bc:	e841 2300 	strex	r3, r2, [r1]
 80088c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80088c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1e5      	bne.n	8008894 <UART_Start_Receive_IT+0x160>
 80088c8:	e046      	b.n	8008958 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d2:	d107      	bne.n	80088e4 <UART_Start_Receive_IT+0x1b0>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d103      	bne.n	80088e4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4a24      	ldr	r2, [pc, #144]	@ (8008970 <UART_Start_Receive_IT+0x23c>)
 80088e0:	675a      	str	r2, [r3, #116]	@ 0x74
 80088e2:	e002      	b.n	80088ea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a23      	ldr	r2, [pc, #140]	@ (8008974 <UART_Start_Receive_IT+0x240>)
 80088e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d019      	beq.n	8008926 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008902:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008906:	677b      	str	r3, [r7, #116]	@ 0x74
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
 8008912:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008916:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800891e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e6      	bne.n	80088f2 <UART_Start_Receive_IT+0x1be>
 8008924:	e018      	b.n	8008958 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	e853 3f00 	ldrex	r3, [r3]
 8008932:	613b      	str	r3, [r7, #16]
   return(result);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f043 0320 	orr.w	r3, r3, #32
 800893a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008944:	623b      	str	r3, [r7, #32]
 8008946:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	69f9      	ldr	r1, [r7, #28]
 800894a:	6a3a      	ldr	r2, [r7, #32]
 800894c:	e841 2300 	strex	r3, r2, [r1]
 8008950:	61bb      	str	r3, [r7, #24]
   return(result);
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e6      	bne.n	8008926 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	378c      	adds	r7, #140	@ 0x8c
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	0800919d 	.word	0x0800919d
 800896c:	08008e39 	.word	0x08008e39
 8008970:	08008c81 	.word	0x08008c81
 8008974:	08008ac9 	.word	0x08008ac9

08008978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008978:	b480      	push	{r7}
 800897a:	b095      	sub	sp, #84	@ 0x54
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800898e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008994:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800899e:	643b      	str	r3, [r7, #64]	@ 0x40
 80089a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e6      	bne.n	8008980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3308      	adds	r3, #8
 80089b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089c8:	f023 0301 	bic.w	r3, r3, #1
 80089cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3308      	adds	r3, #8
 80089d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e3      	bne.n	80089b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d118      	bne.n	8008a24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	e853 3f00 	ldrex	r3, [r3]
 80089fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f023 0310 	bic.w	r3, r3, #16
 8008a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6979      	ldr	r1, [r7, #20]
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e6      	bne.n	80089f2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2220      	movs	r2, #32
 8008a28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a38:	bf00      	nop
 8008a3a:	3754      	adds	r7, #84	@ 0x54
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f7f8 fc78 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a68:	bf00      	nop
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a8c:	61fb      	str	r3, [r7, #28]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	61bb      	str	r3, [r7, #24]
 8008a98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	6979      	ldr	r1, [r7, #20]
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e6      	bne.n	8008a78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff f991 	bl	8007de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008abe:	bf00      	nop
 8008ac0:	3720      	adds	r7, #32
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b09c      	sub	sp, #112	@ 0x70
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ad6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ae0:	2b22      	cmp	r3, #34	@ 0x22
 8008ae2:	f040 80be 	bne.w	8008c62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008af0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008af4:	b2d9      	uxtb	r1, r3
 8008af6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b00:	400a      	ands	r2, r1
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f040 80a1 	bne.w	8008c72 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e6      	bne.n	8008b30 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3308      	adds	r3, #8
 8008b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b74:	f023 0301 	bic.w	r3, r3, #1
 8008b78:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3308      	adds	r3, #8
 8008b80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008b82:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e5      	bne.n	8008b62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a33      	ldr	r2, [pc, #204]	@ (8008c7c <UART_RxISR_8BIT+0x1b4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d01f      	beq.n	8008bf4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d018      	beq.n	8008bf4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	623b      	str	r3, [r7, #32]
   return(result);
 8008bd0:	6a3b      	ldr	r3, [r7, #32]
 8008bd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008bd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e6      	bne.n	8008bc2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d12e      	bne.n	8008c5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0310 	bic.w	r3, r3, #16
 8008c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c20:	61fb      	str	r3, [r7, #28]
 8008c22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	69b9      	ldr	r1, [r7, #24]
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e6      	bne.n	8008c02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	f003 0310 	and.w	r3, r3, #16
 8008c3e:	2b10      	cmp	r3, #16
 8008c40:	d103      	bne.n	8008c4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2210      	movs	r2, #16
 8008c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c50:	4619      	mov	r1, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff f8ce 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c58:	e00b      	b.n	8008c72 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7f8 fb5e 	bl	800131c <HAL_UART_RxCpltCallback>
}
 8008c60:	e007      	b.n	8008c72 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	699a      	ldr	r2, [r3, #24]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0208 	orr.w	r2, r2, #8
 8008c70:	619a      	str	r2, [r3, #24]
}
 8008c72:	bf00      	nop
 8008c74:	3770      	adds	r7, #112	@ 0x70
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	40008000 	.word	0x40008000

08008c80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b09c      	sub	sp, #112	@ 0x70
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c98:	2b22      	cmp	r3, #34	@ 0x22
 8008c9a:	f040 80be 	bne.w	8008e1a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008cae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008cb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cc2:	1c9a      	adds	r2, r3, #2
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f040 80a1 	bne.w	8008e2a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d06:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d08:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e6      	bne.n	8008ce8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3308      	adds	r3, #8
 8008d20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f023 0301 	bic.w	r3, r3, #1
 8008d30:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e5      	bne.n	8008d1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a33      	ldr	r2, [pc, #204]	@ (8008e34 <UART_RxISR_16BIT+0x1b4>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d01f      	beq.n	8008dac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d018      	beq.n	8008dac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	e853 3f00 	ldrex	r3, [r3]
 8008d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	461a      	mov	r2, r3
 8008d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e6      	bne.n	8008d7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d12e      	bne.n	8008e12 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	e853 3f00 	ldrex	r3, [r3]
 8008dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f023 0310 	bic.w	r3, r3, #16
 8008dce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008dd8:	61bb      	str	r3, [r7, #24]
 8008dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ddc:	6979      	ldr	r1, [r7, #20]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	e841 2300 	strex	r3, r2, [r1]
 8008de4:	613b      	str	r3, [r7, #16]
   return(result);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1e6      	bne.n	8008dba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	f003 0310 	and.w	r3, r3, #16
 8008df6:	2b10      	cmp	r3, #16
 8008df8:	d103      	bne.n	8008e02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2210      	movs	r2, #16
 8008e00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7fe fff2 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e10:	e00b      	b.n	8008e2a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7f8 fa82 	bl	800131c <HAL_UART_RxCpltCallback>
}
 8008e18:	e007      	b.n	8008e2a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	699a      	ldr	r2, [r3, #24]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f042 0208 	orr.w	r2, r2, #8
 8008e28:	619a      	str	r2, [r3, #24]
}
 8008e2a:	bf00      	nop
 8008e2c:	3770      	adds	r7, #112	@ 0x70
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	40008000 	.word	0x40008000

08008e38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b0ac      	sub	sp, #176	@ 0xb0
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e46:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e6e:	2b22      	cmp	r3, #34	@ 0x22
 8008e70:	f040 8183 	bne.w	800917a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e7a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e7e:	e126      	b.n	80090ce <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e86:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008e8e:	b2d9      	uxtb	r1, r3
 8008e90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9a:	400a      	ands	r2, r1
 8008e9c:	b2d2      	uxtb	r2, r2
 8008e9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea4:	1c5a      	adds	r2, r3, #1
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eca:	f003 0307 	and.w	r3, r3, #7
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d053      	beq.n	8008f7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d011      	beq.n	8008f02 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00b      	beq.n	8008f02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef8:	f043 0201 	orr.w	r2, r3, #1
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d011      	beq.n	8008f32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f28:	f043 0204 	orr.w	r2, r3, #4
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d011      	beq.n	8008f62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00b      	beq.n	8008f62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2204      	movs	r2, #4
 8008f50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f58:	f043 0202 	orr.w	r2, r3, #2
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d006      	beq.n	8008f7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7f8 f9f3 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f040 80a3 	bne.w	80090ce <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f90:	e853 3f00 	ldrex	r3, [r3]
 8008f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008fb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008fb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e4      	bne.n	8008f88 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008fce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fd4:	f023 0301 	bic.w	r3, r3, #1
 8008fd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008fe6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008fe8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008fec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008ff4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e1      	bne.n	8008fbe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a60      	ldr	r2, [pc, #384]	@ (8009194 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d021      	beq.n	800905c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d01a      	beq.n	800905c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009036:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800903a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009048:	657b      	str	r3, [r7, #84]	@ 0x54
 800904a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800904e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e4      	bne.n	8009026 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009060:	2b01      	cmp	r3, #1
 8009062:	d130      	bne.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	f023 0310 	bic.w	r3, r3, #16
 800907e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800908c:	643b      	str	r3, [r7, #64]	@ 0x40
 800908e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800909a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e4      	bne.n	800906a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f003 0310 	and.w	r3, r3, #16
 80090aa:	2b10      	cmp	r3, #16
 80090ac:	d103      	bne.n	80090b6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2210      	movs	r2, #16
 80090b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090bc:	4619      	mov	r1, r3
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7fe fe98 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80090c4:	e00e      	b.n	80090e4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7f8 f928 	bl	800131c <HAL_UART_RxCpltCallback>
        break;
 80090cc:	e00a      	b.n	80090e4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090ce:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d006      	beq.n	80090e4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80090d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090da:	f003 0320 	and.w	r3, r3, #32
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f47f aece 	bne.w	8008e80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090ea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d049      	beq.n	800918a <UART_RxISR_8BIT_FIFOEN+0x352>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80090fc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009100:	429a      	cmp	r2, r3
 8009102:	d242      	bcs.n	800918a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3308      	adds	r3, #8
 800910a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	61fb      	str	r3, [r7, #28]
   return(result);
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800911a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3308      	adds	r3, #8
 8009124:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009128:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800912a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800912e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e3      	bne.n	8009104 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a16      	ldr	r2, [pc, #88]	@ (8009198 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009140:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f043 0320 	orr.w	r3, r3, #32
 8009156:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6979      	ldr	r1, [r7, #20]
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	e841 2300 	strex	r3, r2, [r1]
 8009170:	613b      	str	r3, [r7, #16]
   return(result);
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e4      	bne.n	8009142 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009178:	e007      	b.n	800918a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f042 0208 	orr.w	r2, r2, #8
 8009188:	619a      	str	r2, [r3, #24]
}
 800918a:	bf00      	nop
 800918c:	37b0      	adds	r7, #176	@ 0xb0
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	40008000 	.word	0x40008000
 8009198:	08008ac9 	.word	0x08008ac9

0800919c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b0ae      	sub	sp, #184	@ 0xb8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80091aa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091d2:	2b22      	cmp	r3, #34	@ 0x22
 80091d4:	f040 8187 	bne.w	80094e6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091de:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091e2:	e12a      	b.n	800943a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80091f6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80091fa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80091fe:	4013      	ands	r3, r2
 8009200:	b29a      	uxth	r2, r3
 8009202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009206:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800920c:	1c9a      	adds	r2, r3, #2
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	b29a      	uxth	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800922e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	2b00      	cmp	r3, #0
 8009238:	d053      	beq.n	80092e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800923a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d011      	beq.n	800926a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800924a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2201      	movs	r2, #1
 8009258:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009260:	f043 0201 	orr.w	r2, r3, #1
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800926a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b00      	cmp	r3, #0
 8009274:	d011      	beq.n	800929a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2202      	movs	r2, #2
 8009288:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009290:	f043 0204 	orr.w	r2, r3, #4
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800929a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800929e:	f003 0304 	and.w	r3, r3, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d011      	beq.n	80092ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 80092a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00b      	beq.n	80092ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2204      	movs	r2, #4
 80092b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c0:	f043 0202 	orr.w	r2, r3, #2
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d006      	beq.n	80092e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7f8 f83f 	bl	8001358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f040 80a5 	bne.w	800943a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009312:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009316:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800931a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e2      	bne.n	80092f0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3308      	adds	r3, #8
 8009330:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800933a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800933c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009340:	f023 0301 	bic.w	r3, r3, #1
 8009344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3308      	adds	r3, #8
 800934e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009352:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009354:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009358:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e1      	bne.n	800932a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a60      	ldr	r2, [pc, #384]	@ (8009500 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d021      	beq.n	80093c8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d01a      	beq.n	80093c8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80093b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e4      	bne.n	8009392 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d130      	bne.n	8009432 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	e853 3f00 	ldrex	r3, [r3]
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e6:	f023 0310 	bic.w	r3, r3, #16
 80093ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80093fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009400:	e841 2300 	strex	r3, r2, [r1]
 8009404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e4      	bne.n	80093d6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	f003 0310 	and.w	r3, r3, #16
 8009416:	2b10      	cmp	r3, #16
 8009418:	d103      	bne.n	8009422 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2210      	movs	r2, #16
 8009420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7fe fce2 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009430:	e00e      	b.n	8009450 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7f7 ff72 	bl	800131c <HAL_UART_RxCpltCallback>
        break;
 8009438:	e00a      	b.n	8009450 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800943a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800943e:	2b00      	cmp	r3, #0
 8009440:	d006      	beq.n	8009450 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009442:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009446:	f003 0320 	and.w	r3, r3, #32
 800944a:	2b00      	cmp	r3, #0
 800944c:	f47f aeca 	bne.w	80091e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009456:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800945a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800945e:	2b00      	cmp	r3, #0
 8009460:	d049      	beq.n	80094f6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009468:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800946c:	429a      	cmp	r2, r3
 800946e:	d242      	bcs.n	80094f6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3308      	adds	r3, #8
 8009476:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	623b      	str	r3, [r7, #32]
   return(result);
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009486:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3308      	adds	r3, #8
 8009490:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009494:	633a      	str	r2, [r7, #48]	@ 0x30
 8009496:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800949a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800949c:	e841 2300 	strex	r3, r2, [r1]
 80094a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1e3      	bne.n	8009470 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a16      	ldr	r2, [pc, #88]	@ (8009504 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80094ac:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f043 0320 	orr.w	r3, r3, #32
 80094c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094d0:	61fb      	str	r3, [r7, #28]
 80094d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	69b9      	ldr	r1, [r7, #24]
 80094d6:	69fa      	ldr	r2, [r7, #28]
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	617b      	str	r3, [r7, #20]
   return(result);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e4      	bne.n	80094ae <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094e4:	e007      	b.n	80094f6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 0208 	orr.w	r2, r2, #8
 80094f4:	619a      	str	r2, [r3, #24]
}
 80094f6:	bf00      	nop
 80094f8:	37b8      	adds	r7, #184	@ 0xb8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	40008000 	.word	0x40008000
 8009504:	08008c81 	.word	0x08008c81

08009508 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009552:	2b01      	cmp	r3, #1
 8009554:	d101      	bne.n	800955a <HAL_UARTEx_DisableFifoMode+0x16>
 8009556:	2302      	movs	r3, #2
 8009558:	e027      	b.n	80095aa <HAL_UARTEx_DisableFifoMode+0x66>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2224      	movs	r2, #36	@ 0x24
 8009566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0201 	bic.w	r2, r2, #1
 8009580:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009588:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2220      	movs	r2, #32
 800959c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d101      	bne.n	80095ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095ca:	2302      	movs	r3, #2
 80095cc:	e02d      	b.n	800962a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2224      	movs	r2, #36	@ 0x24
 80095da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 0201 	bic.w	r2, r2, #1
 80095f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f850 	bl	80096b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2220      	movs	r2, #32
 800961c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009642:	2b01      	cmp	r3, #1
 8009644:	d101      	bne.n	800964a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009646:	2302      	movs	r3, #2
 8009648:	e02d      	b.n	80096a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2224      	movs	r2, #36	@ 0x24
 8009656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0201 	bic.w	r2, r2, #1
 8009670:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f812 	bl	80096b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2220      	movs	r2, #32
 8009698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
	...

080096b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d108      	bne.n	80096d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096d0:	e031      	b.n	8009736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096d2:	2308      	movs	r3, #8
 80096d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096d6:	2308      	movs	r3, #8
 80096d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	0e5b      	lsrs	r3, r3, #25
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 0307 	and.w	r3, r3, #7
 80096e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	0f5b      	lsrs	r3, r3, #29
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	f003 0307 	and.w	r3, r3, #7
 80096f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	7b3a      	ldrb	r2, [r7, #12]
 80096fe:	4911      	ldr	r1, [pc, #68]	@ (8009744 <UARTEx_SetNbDataToProcess+0x94>)
 8009700:	5c8a      	ldrb	r2, [r1, r2]
 8009702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009706:	7b3a      	ldrb	r2, [r7, #12]
 8009708:	490f      	ldr	r1, [pc, #60]	@ (8009748 <UARTEx_SetNbDataToProcess+0x98>)
 800970a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800970c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009710:	b29a      	uxth	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	7b7a      	ldrb	r2, [r7, #13]
 800971c:	4909      	ldr	r1, [pc, #36]	@ (8009744 <UARTEx_SetNbDataToProcess+0x94>)
 800971e:	5c8a      	ldrb	r2, [r1, r2]
 8009720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009724:	7b7a      	ldrb	r2, [r7, #13]
 8009726:	4908      	ldr	r1, [pc, #32]	@ (8009748 <UARTEx_SetNbDataToProcess+0x98>)
 8009728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800972a:	fb93 f3f2 	sdiv	r3, r3, r2
 800972e:	b29a      	uxth	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009736:	bf00      	nop
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	0800e774 	.word	0x0800e774
 8009748:	0800e77c 	.word	0x0800e77c

0800974c <__cvt>:
 800974c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009750:	ec57 6b10 	vmov	r6, r7, d0
 8009754:	2f00      	cmp	r7, #0
 8009756:	460c      	mov	r4, r1
 8009758:	4619      	mov	r1, r3
 800975a:	463b      	mov	r3, r7
 800975c:	bfbb      	ittet	lt
 800975e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009762:	461f      	movlt	r7, r3
 8009764:	2300      	movge	r3, #0
 8009766:	232d      	movlt	r3, #45	@ 0x2d
 8009768:	700b      	strb	r3, [r1, #0]
 800976a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800976c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009770:	4691      	mov	r9, r2
 8009772:	f023 0820 	bic.w	r8, r3, #32
 8009776:	bfbc      	itt	lt
 8009778:	4632      	movlt	r2, r6
 800977a:	4616      	movlt	r6, r2
 800977c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009780:	d005      	beq.n	800978e <__cvt+0x42>
 8009782:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009786:	d100      	bne.n	800978a <__cvt+0x3e>
 8009788:	3401      	adds	r4, #1
 800978a:	2102      	movs	r1, #2
 800978c:	e000      	b.n	8009790 <__cvt+0x44>
 800978e:	2103      	movs	r1, #3
 8009790:	ab03      	add	r3, sp, #12
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	ab02      	add	r3, sp, #8
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	ec47 6b10 	vmov	d0, r6, r7
 800979c:	4653      	mov	r3, sl
 800979e:	4622      	mov	r2, r4
 80097a0:	f001 f992 	bl	800aac8 <_dtoa_r>
 80097a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80097a8:	4605      	mov	r5, r0
 80097aa:	d119      	bne.n	80097e0 <__cvt+0x94>
 80097ac:	f019 0f01 	tst.w	r9, #1
 80097b0:	d00e      	beq.n	80097d0 <__cvt+0x84>
 80097b2:	eb00 0904 	add.w	r9, r0, r4
 80097b6:	2200      	movs	r2, #0
 80097b8:	2300      	movs	r3, #0
 80097ba:	4630      	mov	r0, r6
 80097bc:	4639      	mov	r1, r7
 80097be:	f7f7 f9ab 	bl	8000b18 <__aeabi_dcmpeq>
 80097c2:	b108      	cbz	r0, 80097c8 <__cvt+0x7c>
 80097c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80097c8:	2230      	movs	r2, #48	@ 0x30
 80097ca:	9b03      	ldr	r3, [sp, #12]
 80097cc:	454b      	cmp	r3, r9
 80097ce:	d31e      	bcc.n	800980e <__cvt+0xc2>
 80097d0:	9b03      	ldr	r3, [sp, #12]
 80097d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097d4:	1b5b      	subs	r3, r3, r5
 80097d6:	4628      	mov	r0, r5
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	b004      	add	sp, #16
 80097dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80097e4:	eb00 0904 	add.w	r9, r0, r4
 80097e8:	d1e5      	bne.n	80097b6 <__cvt+0x6a>
 80097ea:	7803      	ldrb	r3, [r0, #0]
 80097ec:	2b30      	cmp	r3, #48	@ 0x30
 80097ee:	d10a      	bne.n	8009806 <__cvt+0xba>
 80097f0:	2200      	movs	r2, #0
 80097f2:	2300      	movs	r3, #0
 80097f4:	4630      	mov	r0, r6
 80097f6:	4639      	mov	r1, r7
 80097f8:	f7f7 f98e 	bl	8000b18 <__aeabi_dcmpeq>
 80097fc:	b918      	cbnz	r0, 8009806 <__cvt+0xba>
 80097fe:	f1c4 0401 	rsb	r4, r4, #1
 8009802:	f8ca 4000 	str.w	r4, [sl]
 8009806:	f8da 3000 	ldr.w	r3, [sl]
 800980a:	4499      	add	r9, r3
 800980c:	e7d3      	b.n	80097b6 <__cvt+0x6a>
 800980e:	1c59      	adds	r1, r3, #1
 8009810:	9103      	str	r1, [sp, #12]
 8009812:	701a      	strb	r2, [r3, #0]
 8009814:	e7d9      	b.n	80097ca <__cvt+0x7e>

08009816 <__exponent>:
 8009816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009818:	2900      	cmp	r1, #0
 800981a:	bfba      	itte	lt
 800981c:	4249      	neglt	r1, r1
 800981e:	232d      	movlt	r3, #45	@ 0x2d
 8009820:	232b      	movge	r3, #43	@ 0x2b
 8009822:	2909      	cmp	r1, #9
 8009824:	7002      	strb	r2, [r0, #0]
 8009826:	7043      	strb	r3, [r0, #1]
 8009828:	dd29      	ble.n	800987e <__exponent+0x68>
 800982a:	f10d 0307 	add.w	r3, sp, #7
 800982e:	461d      	mov	r5, r3
 8009830:	270a      	movs	r7, #10
 8009832:	461a      	mov	r2, r3
 8009834:	fbb1 f6f7 	udiv	r6, r1, r7
 8009838:	fb07 1416 	mls	r4, r7, r6, r1
 800983c:	3430      	adds	r4, #48	@ 0x30
 800983e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009842:	460c      	mov	r4, r1
 8009844:	2c63      	cmp	r4, #99	@ 0x63
 8009846:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800984a:	4631      	mov	r1, r6
 800984c:	dcf1      	bgt.n	8009832 <__exponent+0x1c>
 800984e:	3130      	adds	r1, #48	@ 0x30
 8009850:	1e94      	subs	r4, r2, #2
 8009852:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009856:	1c41      	adds	r1, r0, #1
 8009858:	4623      	mov	r3, r4
 800985a:	42ab      	cmp	r3, r5
 800985c:	d30a      	bcc.n	8009874 <__exponent+0x5e>
 800985e:	f10d 0309 	add.w	r3, sp, #9
 8009862:	1a9b      	subs	r3, r3, r2
 8009864:	42ac      	cmp	r4, r5
 8009866:	bf88      	it	hi
 8009868:	2300      	movhi	r3, #0
 800986a:	3302      	adds	r3, #2
 800986c:	4403      	add	r3, r0
 800986e:	1a18      	subs	r0, r3, r0
 8009870:	b003      	add	sp, #12
 8009872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009874:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009878:	f801 6f01 	strb.w	r6, [r1, #1]!
 800987c:	e7ed      	b.n	800985a <__exponent+0x44>
 800987e:	2330      	movs	r3, #48	@ 0x30
 8009880:	3130      	adds	r1, #48	@ 0x30
 8009882:	7083      	strb	r3, [r0, #2]
 8009884:	70c1      	strb	r1, [r0, #3]
 8009886:	1d03      	adds	r3, r0, #4
 8009888:	e7f1      	b.n	800986e <__exponent+0x58>
	...

0800988c <_printf_float>:
 800988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	b08d      	sub	sp, #52	@ 0x34
 8009892:	460c      	mov	r4, r1
 8009894:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009898:	4616      	mov	r6, r2
 800989a:	461f      	mov	r7, r3
 800989c:	4605      	mov	r5, r0
 800989e:	f001 f80d 	bl	800a8bc <_localeconv_r>
 80098a2:	6803      	ldr	r3, [r0, #0]
 80098a4:	9304      	str	r3, [sp, #16]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7f6 fd0a 	bl	80002c0 <strlen>
 80098ac:	2300      	movs	r3, #0
 80098ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b0:	f8d8 3000 	ldr.w	r3, [r8]
 80098b4:	9005      	str	r0, [sp, #20]
 80098b6:	3307      	adds	r3, #7
 80098b8:	f023 0307 	bic.w	r3, r3, #7
 80098bc:	f103 0208 	add.w	r2, r3, #8
 80098c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80098c4:	f8d4 b000 	ldr.w	fp, [r4]
 80098c8:	f8c8 2000 	str.w	r2, [r8]
 80098cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80098d4:	9307      	str	r3, [sp, #28]
 80098d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80098da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80098de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098e2:	4b9c      	ldr	r3, [pc, #624]	@ (8009b54 <_printf_float+0x2c8>)
 80098e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80098e8:	f7f7 f948 	bl	8000b7c <__aeabi_dcmpun>
 80098ec:	bb70      	cbnz	r0, 800994c <_printf_float+0xc0>
 80098ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098f2:	4b98      	ldr	r3, [pc, #608]	@ (8009b54 <_printf_float+0x2c8>)
 80098f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80098f8:	f7f7 f922 	bl	8000b40 <__aeabi_dcmple>
 80098fc:	bb30      	cbnz	r0, 800994c <_printf_float+0xc0>
 80098fe:	2200      	movs	r2, #0
 8009900:	2300      	movs	r3, #0
 8009902:	4640      	mov	r0, r8
 8009904:	4649      	mov	r1, r9
 8009906:	f7f7 f911 	bl	8000b2c <__aeabi_dcmplt>
 800990a:	b110      	cbz	r0, 8009912 <_printf_float+0x86>
 800990c:	232d      	movs	r3, #45	@ 0x2d
 800990e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009912:	4a91      	ldr	r2, [pc, #580]	@ (8009b58 <_printf_float+0x2cc>)
 8009914:	4b91      	ldr	r3, [pc, #580]	@ (8009b5c <_printf_float+0x2d0>)
 8009916:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800991a:	bf94      	ite	ls
 800991c:	4690      	movls	r8, r2
 800991e:	4698      	movhi	r8, r3
 8009920:	2303      	movs	r3, #3
 8009922:	6123      	str	r3, [r4, #16]
 8009924:	f02b 0304 	bic.w	r3, fp, #4
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	f04f 0900 	mov.w	r9, #0
 800992e:	9700      	str	r7, [sp, #0]
 8009930:	4633      	mov	r3, r6
 8009932:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009934:	4621      	mov	r1, r4
 8009936:	4628      	mov	r0, r5
 8009938:	f000 f9d2 	bl	8009ce0 <_printf_common>
 800993c:	3001      	adds	r0, #1
 800993e:	f040 808d 	bne.w	8009a5c <_printf_float+0x1d0>
 8009942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009946:	b00d      	add	sp, #52	@ 0x34
 8009948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994c:	4642      	mov	r2, r8
 800994e:	464b      	mov	r3, r9
 8009950:	4640      	mov	r0, r8
 8009952:	4649      	mov	r1, r9
 8009954:	f7f7 f912 	bl	8000b7c <__aeabi_dcmpun>
 8009958:	b140      	cbz	r0, 800996c <_printf_float+0xe0>
 800995a:	464b      	mov	r3, r9
 800995c:	2b00      	cmp	r3, #0
 800995e:	bfbc      	itt	lt
 8009960:	232d      	movlt	r3, #45	@ 0x2d
 8009962:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009966:	4a7e      	ldr	r2, [pc, #504]	@ (8009b60 <_printf_float+0x2d4>)
 8009968:	4b7e      	ldr	r3, [pc, #504]	@ (8009b64 <_printf_float+0x2d8>)
 800996a:	e7d4      	b.n	8009916 <_printf_float+0x8a>
 800996c:	6863      	ldr	r3, [r4, #4]
 800996e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009972:	9206      	str	r2, [sp, #24]
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	d13b      	bne.n	80099f0 <_printf_float+0x164>
 8009978:	2306      	movs	r3, #6
 800997a:	6063      	str	r3, [r4, #4]
 800997c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009980:	2300      	movs	r3, #0
 8009982:	6022      	str	r2, [r4, #0]
 8009984:	9303      	str	r3, [sp, #12]
 8009986:	ab0a      	add	r3, sp, #40	@ 0x28
 8009988:	e9cd a301 	strd	sl, r3, [sp, #4]
 800998c:	ab09      	add	r3, sp, #36	@ 0x24
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	6861      	ldr	r1, [r4, #4]
 8009992:	ec49 8b10 	vmov	d0, r8, r9
 8009996:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800999a:	4628      	mov	r0, r5
 800999c:	f7ff fed6 	bl	800974c <__cvt>
 80099a0:	9b06      	ldr	r3, [sp, #24]
 80099a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099a4:	2b47      	cmp	r3, #71	@ 0x47
 80099a6:	4680      	mov	r8, r0
 80099a8:	d129      	bne.n	80099fe <_printf_float+0x172>
 80099aa:	1cc8      	adds	r0, r1, #3
 80099ac:	db02      	blt.n	80099b4 <_printf_float+0x128>
 80099ae:	6863      	ldr	r3, [r4, #4]
 80099b0:	4299      	cmp	r1, r3
 80099b2:	dd41      	ble.n	8009a38 <_printf_float+0x1ac>
 80099b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80099b8:	fa5f fa8a 	uxtb.w	sl, sl
 80099bc:	3901      	subs	r1, #1
 80099be:	4652      	mov	r2, sl
 80099c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80099c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80099c6:	f7ff ff26 	bl	8009816 <__exponent>
 80099ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099cc:	1813      	adds	r3, r2, r0
 80099ce:	2a01      	cmp	r2, #1
 80099d0:	4681      	mov	r9, r0
 80099d2:	6123      	str	r3, [r4, #16]
 80099d4:	dc02      	bgt.n	80099dc <_printf_float+0x150>
 80099d6:	6822      	ldr	r2, [r4, #0]
 80099d8:	07d2      	lsls	r2, r2, #31
 80099da:	d501      	bpl.n	80099e0 <_printf_float+0x154>
 80099dc:	3301      	adds	r3, #1
 80099de:	6123      	str	r3, [r4, #16]
 80099e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d0a2      	beq.n	800992e <_printf_float+0xa2>
 80099e8:	232d      	movs	r3, #45	@ 0x2d
 80099ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099ee:	e79e      	b.n	800992e <_printf_float+0xa2>
 80099f0:	9a06      	ldr	r2, [sp, #24]
 80099f2:	2a47      	cmp	r2, #71	@ 0x47
 80099f4:	d1c2      	bne.n	800997c <_printf_float+0xf0>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1c0      	bne.n	800997c <_printf_float+0xf0>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e7bd      	b.n	800997a <_printf_float+0xee>
 80099fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a02:	d9db      	bls.n	80099bc <_printf_float+0x130>
 8009a04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a08:	d118      	bne.n	8009a3c <_printf_float+0x1b0>
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	6863      	ldr	r3, [r4, #4]
 8009a0e:	dd0b      	ble.n	8009a28 <_printf_float+0x19c>
 8009a10:	6121      	str	r1, [r4, #16]
 8009a12:	b913      	cbnz	r3, 8009a1a <_printf_float+0x18e>
 8009a14:	6822      	ldr	r2, [r4, #0]
 8009a16:	07d0      	lsls	r0, r2, #31
 8009a18:	d502      	bpl.n	8009a20 <_printf_float+0x194>
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	440b      	add	r3, r1
 8009a1e:	6123      	str	r3, [r4, #16]
 8009a20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a22:	f04f 0900 	mov.w	r9, #0
 8009a26:	e7db      	b.n	80099e0 <_printf_float+0x154>
 8009a28:	b913      	cbnz	r3, 8009a30 <_printf_float+0x1a4>
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	07d2      	lsls	r2, r2, #31
 8009a2e:	d501      	bpl.n	8009a34 <_printf_float+0x1a8>
 8009a30:	3302      	adds	r3, #2
 8009a32:	e7f4      	b.n	8009a1e <_printf_float+0x192>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e7f2      	b.n	8009a1e <_printf_float+0x192>
 8009a38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a3e:	4299      	cmp	r1, r3
 8009a40:	db05      	blt.n	8009a4e <_printf_float+0x1c2>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	6121      	str	r1, [r4, #16]
 8009a46:	07d8      	lsls	r0, r3, #31
 8009a48:	d5ea      	bpl.n	8009a20 <_printf_float+0x194>
 8009a4a:	1c4b      	adds	r3, r1, #1
 8009a4c:	e7e7      	b.n	8009a1e <_printf_float+0x192>
 8009a4e:	2900      	cmp	r1, #0
 8009a50:	bfd4      	ite	le
 8009a52:	f1c1 0202 	rsble	r2, r1, #2
 8009a56:	2201      	movgt	r2, #1
 8009a58:	4413      	add	r3, r2
 8009a5a:	e7e0      	b.n	8009a1e <_printf_float+0x192>
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	055a      	lsls	r2, r3, #21
 8009a60:	d407      	bmi.n	8009a72 <_printf_float+0x1e6>
 8009a62:	6923      	ldr	r3, [r4, #16]
 8009a64:	4642      	mov	r2, r8
 8009a66:	4631      	mov	r1, r6
 8009a68:	4628      	mov	r0, r5
 8009a6a:	47b8      	blx	r7
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d12b      	bne.n	8009ac8 <_printf_float+0x23c>
 8009a70:	e767      	b.n	8009942 <_printf_float+0xb6>
 8009a72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a76:	f240 80dd 	bls.w	8009c34 <_printf_float+0x3a8>
 8009a7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2300      	movs	r3, #0
 8009a82:	f7f7 f849 	bl	8000b18 <__aeabi_dcmpeq>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d033      	beq.n	8009af2 <_printf_float+0x266>
 8009a8a:	4a37      	ldr	r2, [pc, #220]	@ (8009b68 <_printf_float+0x2dc>)
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	4631      	mov	r1, r6
 8009a90:	4628      	mov	r0, r5
 8009a92:	47b8      	blx	r7
 8009a94:	3001      	adds	r0, #1
 8009a96:	f43f af54 	beq.w	8009942 <_printf_float+0xb6>
 8009a9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009a9e:	4543      	cmp	r3, r8
 8009aa0:	db02      	blt.n	8009aa8 <_printf_float+0x21c>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	07d8      	lsls	r0, r3, #31
 8009aa6:	d50f      	bpl.n	8009ac8 <_printf_float+0x23c>
 8009aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aac:	4631      	mov	r1, r6
 8009aae:	4628      	mov	r0, r5
 8009ab0:	47b8      	blx	r7
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	f43f af45 	beq.w	8009942 <_printf_float+0xb6>
 8009ab8:	f04f 0900 	mov.w	r9, #0
 8009abc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009ac0:	f104 0a1a 	add.w	sl, r4, #26
 8009ac4:	45c8      	cmp	r8, r9
 8009ac6:	dc09      	bgt.n	8009adc <_printf_float+0x250>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	079b      	lsls	r3, r3, #30
 8009acc:	f100 8103 	bmi.w	8009cd6 <_printf_float+0x44a>
 8009ad0:	68e0      	ldr	r0, [r4, #12]
 8009ad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ad4:	4298      	cmp	r0, r3
 8009ad6:	bfb8      	it	lt
 8009ad8:	4618      	movlt	r0, r3
 8009ada:	e734      	b.n	8009946 <_printf_float+0xba>
 8009adc:	2301      	movs	r3, #1
 8009ade:	4652      	mov	r2, sl
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	47b8      	blx	r7
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	f43f af2b 	beq.w	8009942 <_printf_float+0xb6>
 8009aec:	f109 0901 	add.w	r9, r9, #1
 8009af0:	e7e8      	b.n	8009ac4 <_printf_float+0x238>
 8009af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dc39      	bgt.n	8009b6c <_printf_float+0x2e0>
 8009af8:	4a1b      	ldr	r2, [pc, #108]	@ (8009b68 <_printf_float+0x2dc>)
 8009afa:	2301      	movs	r3, #1
 8009afc:	4631      	mov	r1, r6
 8009afe:	4628      	mov	r0, r5
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	f43f af1d 	beq.w	8009942 <_printf_float+0xb6>
 8009b08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009b0c:	ea59 0303 	orrs.w	r3, r9, r3
 8009b10:	d102      	bne.n	8009b18 <_printf_float+0x28c>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	07d9      	lsls	r1, r3, #31
 8009b16:	d5d7      	bpl.n	8009ac8 <_printf_float+0x23c>
 8009b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	f43f af0d 	beq.w	8009942 <_printf_float+0xb6>
 8009b28:	f04f 0a00 	mov.w	sl, #0
 8009b2c:	f104 0b1a 	add.w	fp, r4, #26
 8009b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b32:	425b      	negs	r3, r3
 8009b34:	4553      	cmp	r3, sl
 8009b36:	dc01      	bgt.n	8009b3c <_printf_float+0x2b0>
 8009b38:	464b      	mov	r3, r9
 8009b3a:	e793      	b.n	8009a64 <_printf_float+0x1d8>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	465a      	mov	r2, fp
 8009b40:	4631      	mov	r1, r6
 8009b42:	4628      	mov	r0, r5
 8009b44:	47b8      	blx	r7
 8009b46:	3001      	adds	r0, #1
 8009b48:	f43f aefb 	beq.w	8009942 <_printf_float+0xb6>
 8009b4c:	f10a 0a01 	add.w	sl, sl, #1
 8009b50:	e7ee      	b.n	8009b30 <_printf_float+0x2a4>
 8009b52:	bf00      	nop
 8009b54:	7fefffff 	.word	0x7fefffff
 8009b58:	0800e784 	.word	0x0800e784
 8009b5c:	0800e788 	.word	0x0800e788
 8009b60:	0800e78c 	.word	0x0800e78c
 8009b64:	0800e790 	.word	0x0800e790
 8009b68:	0800e794 	.word	0x0800e794
 8009b6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b72:	4553      	cmp	r3, sl
 8009b74:	bfa8      	it	ge
 8009b76:	4653      	movge	r3, sl
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	4699      	mov	r9, r3
 8009b7c:	dc36      	bgt.n	8009bec <_printf_float+0x360>
 8009b7e:	f04f 0b00 	mov.w	fp, #0
 8009b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b86:	f104 021a 	add.w	r2, r4, #26
 8009b8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b8c:	9306      	str	r3, [sp, #24]
 8009b8e:	eba3 0309 	sub.w	r3, r3, r9
 8009b92:	455b      	cmp	r3, fp
 8009b94:	dc31      	bgt.n	8009bfa <_printf_float+0x36e>
 8009b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b98:	459a      	cmp	sl, r3
 8009b9a:	dc3a      	bgt.n	8009c12 <_printf_float+0x386>
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	07da      	lsls	r2, r3, #31
 8009ba0:	d437      	bmi.n	8009c12 <_printf_float+0x386>
 8009ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba4:	ebaa 0903 	sub.w	r9, sl, r3
 8009ba8:	9b06      	ldr	r3, [sp, #24]
 8009baa:	ebaa 0303 	sub.w	r3, sl, r3
 8009bae:	4599      	cmp	r9, r3
 8009bb0:	bfa8      	it	ge
 8009bb2:	4699      	movge	r9, r3
 8009bb4:	f1b9 0f00 	cmp.w	r9, #0
 8009bb8:	dc33      	bgt.n	8009c22 <_printf_float+0x396>
 8009bba:	f04f 0800 	mov.w	r8, #0
 8009bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bc2:	f104 0b1a 	add.w	fp, r4, #26
 8009bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc8:	ebaa 0303 	sub.w	r3, sl, r3
 8009bcc:	eba3 0309 	sub.w	r3, r3, r9
 8009bd0:	4543      	cmp	r3, r8
 8009bd2:	f77f af79 	ble.w	8009ac8 <_printf_float+0x23c>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	465a      	mov	r2, fp
 8009bda:	4631      	mov	r1, r6
 8009bdc:	4628      	mov	r0, r5
 8009bde:	47b8      	blx	r7
 8009be0:	3001      	adds	r0, #1
 8009be2:	f43f aeae 	beq.w	8009942 <_printf_float+0xb6>
 8009be6:	f108 0801 	add.w	r8, r8, #1
 8009bea:	e7ec      	b.n	8009bc6 <_printf_float+0x33a>
 8009bec:	4642      	mov	r2, r8
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	47b8      	blx	r7
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d1c2      	bne.n	8009b7e <_printf_float+0x2f2>
 8009bf8:	e6a3      	b.n	8009942 <_printf_float+0xb6>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4628      	mov	r0, r5
 8009c00:	9206      	str	r2, [sp, #24]
 8009c02:	47b8      	blx	r7
 8009c04:	3001      	adds	r0, #1
 8009c06:	f43f ae9c 	beq.w	8009942 <_printf_float+0xb6>
 8009c0a:	9a06      	ldr	r2, [sp, #24]
 8009c0c:	f10b 0b01 	add.w	fp, fp, #1
 8009c10:	e7bb      	b.n	8009b8a <_printf_float+0x2fe>
 8009c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c16:	4631      	mov	r1, r6
 8009c18:	4628      	mov	r0, r5
 8009c1a:	47b8      	blx	r7
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d1c0      	bne.n	8009ba2 <_printf_float+0x316>
 8009c20:	e68f      	b.n	8009942 <_printf_float+0xb6>
 8009c22:	9a06      	ldr	r2, [sp, #24]
 8009c24:	464b      	mov	r3, r9
 8009c26:	4442      	add	r2, r8
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	47b8      	blx	r7
 8009c2e:	3001      	adds	r0, #1
 8009c30:	d1c3      	bne.n	8009bba <_printf_float+0x32e>
 8009c32:	e686      	b.n	8009942 <_printf_float+0xb6>
 8009c34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c38:	f1ba 0f01 	cmp.w	sl, #1
 8009c3c:	dc01      	bgt.n	8009c42 <_printf_float+0x3b6>
 8009c3e:	07db      	lsls	r3, r3, #31
 8009c40:	d536      	bpl.n	8009cb0 <_printf_float+0x424>
 8009c42:	2301      	movs	r3, #1
 8009c44:	4642      	mov	r2, r8
 8009c46:	4631      	mov	r1, r6
 8009c48:	4628      	mov	r0, r5
 8009c4a:	47b8      	blx	r7
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	f43f ae78 	beq.w	8009942 <_printf_float+0xb6>
 8009c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c56:	4631      	mov	r1, r6
 8009c58:	4628      	mov	r0, r5
 8009c5a:	47b8      	blx	r7
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	f43f ae70 	beq.w	8009942 <_printf_float+0xb6>
 8009c62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c66:	2200      	movs	r2, #0
 8009c68:	2300      	movs	r3, #0
 8009c6a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009c6e:	f7f6 ff53 	bl	8000b18 <__aeabi_dcmpeq>
 8009c72:	b9c0      	cbnz	r0, 8009ca6 <_printf_float+0x41a>
 8009c74:	4653      	mov	r3, sl
 8009c76:	f108 0201 	add.w	r2, r8, #1
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	47b8      	blx	r7
 8009c80:	3001      	adds	r0, #1
 8009c82:	d10c      	bne.n	8009c9e <_printf_float+0x412>
 8009c84:	e65d      	b.n	8009942 <_printf_float+0xb6>
 8009c86:	2301      	movs	r3, #1
 8009c88:	465a      	mov	r2, fp
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b8      	blx	r7
 8009c90:	3001      	adds	r0, #1
 8009c92:	f43f ae56 	beq.w	8009942 <_printf_float+0xb6>
 8009c96:	f108 0801 	add.w	r8, r8, #1
 8009c9a:	45d0      	cmp	r8, sl
 8009c9c:	dbf3      	blt.n	8009c86 <_printf_float+0x3fa>
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ca4:	e6df      	b.n	8009a66 <_printf_float+0x1da>
 8009ca6:	f04f 0800 	mov.w	r8, #0
 8009caa:	f104 0b1a 	add.w	fp, r4, #26
 8009cae:	e7f4      	b.n	8009c9a <_printf_float+0x40e>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4642      	mov	r2, r8
 8009cb4:	e7e1      	b.n	8009c7a <_printf_float+0x3ee>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	464a      	mov	r2, r9
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	47b8      	blx	r7
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	f43f ae3e 	beq.w	8009942 <_printf_float+0xb6>
 8009cc6:	f108 0801 	add.w	r8, r8, #1
 8009cca:	68e3      	ldr	r3, [r4, #12]
 8009ccc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cce:	1a5b      	subs	r3, r3, r1
 8009cd0:	4543      	cmp	r3, r8
 8009cd2:	dcf0      	bgt.n	8009cb6 <_printf_float+0x42a>
 8009cd4:	e6fc      	b.n	8009ad0 <_printf_float+0x244>
 8009cd6:	f04f 0800 	mov.w	r8, #0
 8009cda:	f104 0919 	add.w	r9, r4, #25
 8009cde:	e7f4      	b.n	8009cca <_printf_float+0x43e>

08009ce0 <_printf_common>:
 8009ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce4:	4616      	mov	r6, r2
 8009ce6:	4698      	mov	r8, r3
 8009ce8:	688a      	ldr	r2, [r1, #8]
 8009cea:	690b      	ldr	r3, [r1, #16]
 8009cec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	bfb8      	it	lt
 8009cf4:	4613      	movlt	r3, r2
 8009cf6:	6033      	str	r3, [r6, #0]
 8009cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009cfc:	4607      	mov	r7, r0
 8009cfe:	460c      	mov	r4, r1
 8009d00:	b10a      	cbz	r2, 8009d06 <_printf_common+0x26>
 8009d02:	3301      	adds	r3, #1
 8009d04:	6033      	str	r3, [r6, #0]
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	0699      	lsls	r1, r3, #26
 8009d0a:	bf42      	ittt	mi
 8009d0c:	6833      	ldrmi	r3, [r6, #0]
 8009d0e:	3302      	addmi	r3, #2
 8009d10:	6033      	strmi	r3, [r6, #0]
 8009d12:	6825      	ldr	r5, [r4, #0]
 8009d14:	f015 0506 	ands.w	r5, r5, #6
 8009d18:	d106      	bne.n	8009d28 <_printf_common+0x48>
 8009d1a:	f104 0a19 	add.w	sl, r4, #25
 8009d1e:	68e3      	ldr	r3, [r4, #12]
 8009d20:	6832      	ldr	r2, [r6, #0]
 8009d22:	1a9b      	subs	r3, r3, r2
 8009d24:	42ab      	cmp	r3, r5
 8009d26:	dc26      	bgt.n	8009d76 <_printf_common+0x96>
 8009d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d2c:	6822      	ldr	r2, [r4, #0]
 8009d2e:	3b00      	subs	r3, #0
 8009d30:	bf18      	it	ne
 8009d32:	2301      	movne	r3, #1
 8009d34:	0692      	lsls	r2, r2, #26
 8009d36:	d42b      	bmi.n	8009d90 <_printf_common+0xb0>
 8009d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d3c:	4641      	mov	r1, r8
 8009d3e:	4638      	mov	r0, r7
 8009d40:	47c8      	blx	r9
 8009d42:	3001      	adds	r0, #1
 8009d44:	d01e      	beq.n	8009d84 <_printf_common+0xa4>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	6922      	ldr	r2, [r4, #16]
 8009d4a:	f003 0306 	and.w	r3, r3, #6
 8009d4e:	2b04      	cmp	r3, #4
 8009d50:	bf02      	ittt	eq
 8009d52:	68e5      	ldreq	r5, [r4, #12]
 8009d54:	6833      	ldreq	r3, [r6, #0]
 8009d56:	1aed      	subeq	r5, r5, r3
 8009d58:	68a3      	ldr	r3, [r4, #8]
 8009d5a:	bf0c      	ite	eq
 8009d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d60:	2500      	movne	r5, #0
 8009d62:	4293      	cmp	r3, r2
 8009d64:	bfc4      	itt	gt
 8009d66:	1a9b      	subgt	r3, r3, r2
 8009d68:	18ed      	addgt	r5, r5, r3
 8009d6a:	2600      	movs	r6, #0
 8009d6c:	341a      	adds	r4, #26
 8009d6e:	42b5      	cmp	r5, r6
 8009d70:	d11a      	bne.n	8009da8 <_printf_common+0xc8>
 8009d72:	2000      	movs	r0, #0
 8009d74:	e008      	b.n	8009d88 <_printf_common+0xa8>
 8009d76:	2301      	movs	r3, #1
 8009d78:	4652      	mov	r2, sl
 8009d7a:	4641      	mov	r1, r8
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	47c8      	blx	r9
 8009d80:	3001      	adds	r0, #1
 8009d82:	d103      	bne.n	8009d8c <_printf_common+0xac>
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8c:	3501      	adds	r5, #1
 8009d8e:	e7c6      	b.n	8009d1e <_printf_common+0x3e>
 8009d90:	18e1      	adds	r1, r4, r3
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	2030      	movs	r0, #48	@ 0x30
 8009d96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d9a:	4422      	add	r2, r4
 8009d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009da0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009da4:	3302      	adds	r3, #2
 8009da6:	e7c7      	b.n	8009d38 <_printf_common+0x58>
 8009da8:	2301      	movs	r3, #1
 8009daa:	4622      	mov	r2, r4
 8009dac:	4641      	mov	r1, r8
 8009dae:	4638      	mov	r0, r7
 8009db0:	47c8      	blx	r9
 8009db2:	3001      	adds	r0, #1
 8009db4:	d0e6      	beq.n	8009d84 <_printf_common+0xa4>
 8009db6:	3601      	adds	r6, #1
 8009db8:	e7d9      	b.n	8009d6e <_printf_common+0x8e>
	...

08009dbc <_printf_i>:
 8009dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc0:	7e0f      	ldrb	r7, [r1, #24]
 8009dc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009dc4:	2f78      	cmp	r7, #120	@ 0x78
 8009dc6:	4691      	mov	r9, r2
 8009dc8:	4680      	mov	r8, r0
 8009dca:	460c      	mov	r4, r1
 8009dcc:	469a      	mov	sl, r3
 8009dce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dd2:	d807      	bhi.n	8009de4 <_printf_i+0x28>
 8009dd4:	2f62      	cmp	r7, #98	@ 0x62
 8009dd6:	d80a      	bhi.n	8009dee <_printf_i+0x32>
 8009dd8:	2f00      	cmp	r7, #0
 8009dda:	f000 80d2 	beq.w	8009f82 <_printf_i+0x1c6>
 8009dde:	2f58      	cmp	r7, #88	@ 0x58
 8009de0:	f000 80b9 	beq.w	8009f56 <_printf_i+0x19a>
 8009de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009de8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009dec:	e03a      	b.n	8009e64 <_printf_i+0xa8>
 8009dee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009df2:	2b15      	cmp	r3, #21
 8009df4:	d8f6      	bhi.n	8009de4 <_printf_i+0x28>
 8009df6:	a101      	add	r1, pc, #4	@ (adr r1, 8009dfc <_printf_i+0x40>)
 8009df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dfc:	08009e55 	.word	0x08009e55
 8009e00:	08009e69 	.word	0x08009e69
 8009e04:	08009de5 	.word	0x08009de5
 8009e08:	08009de5 	.word	0x08009de5
 8009e0c:	08009de5 	.word	0x08009de5
 8009e10:	08009de5 	.word	0x08009de5
 8009e14:	08009e69 	.word	0x08009e69
 8009e18:	08009de5 	.word	0x08009de5
 8009e1c:	08009de5 	.word	0x08009de5
 8009e20:	08009de5 	.word	0x08009de5
 8009e24:	08009de5 	.word	0x08009de5
 8009e28:	08009f69 	.word	0x08009f69
 8009e2c:	08009e93 	.word	0x08009e93
 8009e30:	08009f23 	.word	0x08009f23
 8009e34:	08009de5 	.word	0x08009de5
 8009e38:	08009de5 	.word	0x08009de5
 8009e3c:	08009f8b 	.word	0x08009f8b
 8009e40:	08009de5 	.word	0x08009de5
 8009e44:	08009e93 	.word	0x08009e93
 8009e48:	08009de5 	.word	0x08009de5
 8009e4c:	08009de5 	.word	0x08009de5
 8009e50:	08009f2b 	.word	0x08009f2b
 8009e54:	6833      	ldr	r3, [r6, #0]
 8009e56:	1d1a      	adds	r2, r3, #4
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6032      	str	r2, [r6, #0]
 8009e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e64:	2301      	movs	r3, #1
 8009e66:	e09d      	b.n	8009fa4 <_printf_i+0x1e8>
 8009e68:	6833      	ldr	r3, [r6, #0]
 8009e6a:	6820      	ldr	r0, [r4, #0]
 8009e6c:	1d19      	adds	r1, r3, #4
 8009e6e:	6031      	str	r1, [r6, #0]
 8009e70:	0606      	lsls	r6, r0, #24
 8009e72:	d501      	bpl.n	8009e78 <_printf_i+0xbc>
 8009e74:	681d      	ldr	r5, [r3, #0]
 8009e76:	e003      	b.n	8009e80 <_printf_i+0xc4>
 8009e78:	0645      	lsls	r5, r0, #25
 8009e7a:	d5fb      	bpl.n	8009e74 <_printf_i+0xb8>
 8009e7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e80:	2d00      	cmp	r5, #0
 8009e82:	da03      	bge.n	8009e8c <_printf_i+0xd0>
 8009e84:	232d      	movs	r3, #45	@ 0x2d
 8009e86:	426d      	negs	r5, r5
 8009e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e8c:	4859      	ldr	r0, [pc, #356]	@ (8009ff4 <_printf_i+0x238>)
 8009e8e:	230a      	movs	r3, #10
 8009e90:	e011      	b.n	8009eb6 <_printf_i+0xfa>
 8009e92:	6821      	ldr	r1, [r4, #0]
 8009e94:	6833      	ldr	r3, [r6, #0]
 8009e96:	0608      	lsls	r0, r1, #24
 8009e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e9c:	d402      	bmi.n	8009ea4 <_printf_i+0xe8>
 8009e9e:	0649      	lsls	r1, r1, #25
 8009ea0:	bf48      	it	mi
 8009ea2:	b2ad      	uxthmi	r5, r5
 8009ea4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ea6:	4853      	ldr	r0, [pc, #332]	@ (8009ff4 <_printf_i+0x238>)
 8009ea8:	6033      	str	r3, [r6, #0]
 8009eaa:	bf14      	ite	ne
 8009eac:	230a      	movne	r3, #10
 8009eae:	2308      	moveq	r3, #8
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009eb6:	6866      	ldr	r6, [r4, #4]
 8009eb8:	60a6      	str	r6, [r4, #8]
 8009eba:	2e00      	cmp	r6, #0
 8009ebc:	bfa2      	ittt	ge
 8009ebe:	6821      	ldrge	r1, [r4, #0]
 8009ec0:	f021 0104 	bicge.w	r1, r1, #4
 8009ec4:	6021      	strge	r1, [r4, #0]
 8009ec6:	b90d      	cbnz	r5, 8009ecc <_printf_i+0x110>
 8009ec8:	2e00      	cmp	r6, #0
 8009eca:	d04b      	beq.n	8009f64 <_printf_i+0x1a8>
 8009ecc:	4616      	mov	r6, r2
 8009ece:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ed2:	fb03 5711 	mls	r7, r3, r1, r5
 8009ed6:	5dc7      	ldrb	r7, [r0, r7]
 8009ed8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009edc:	462f      	mov	r7, r5
 8009ede:	42bb      	cmp	r3, r7
 8009ee0:	460d      	mov	r5, r1
 8009ee2:	d9f4      	bls.n	8009ece <_printf_i+0x112>
 8009ee4:	2b08      	cmp	r3, #8
 8009ee6:	d10b      	bne.n	8009f00 <_printf_i+0x144>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	07df      	lsls	r7, r3, #31
 8009eec:	d508      	bpl.n	8009f00 <_printf_i+0x144>
 8009eee:	6923      	ldr	r3, [r4, #16]
 8009ef0:	6861      	ldr	r1, [r4, #4]
 8009ef2:	4299      	cmp	r1, r3
 8009ef4:	bfde      	ittt	le
 8009ef6:	2330      	movle	r3, #48	@ 0x30
 8009ef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009efc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009f00:	1b92      	subs	r2, r2, r6
 8009f02:	6122      	str	r2, [r4, #16]
 8009f04:	f8cd a000 	str.w	sl, [sp]
 8009f08:	464b      	mov	r3, r9
 8009f0a:	aa03      	add	r2, sp, #12
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4640      	mov	r0, r8
 8009f10:	f7ff fee6 	bl	8009ce0 <_printf_common>
 8009f14:	3001      	adds	r0, #1
 8009f16:	d14a      	bne.n	8009fae <_printf_i+0x1f2>
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f1c:	b004      	add	sp, #16
 8009f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	f043 0320 	orr.w	r3, r3, #32
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	4833      	ldr	r0, [pc, #204]	@ (8009ff8 <_printf_i+0x23c>)
 8009f2c:	2778      	movs	r7, #120	@ 0x78
 8009f2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	6831      	ldr	r1, [r6, #0]
 8009f36:	061f      	lsls	r7, r3, #24
 8009f38:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f3c:	d402      	bmi.n	8009f44 <_printf_i+0x188>
 8009f3e:	065f      	lsls	r7, r3, #25
 8009f40:	bf48      	it	mi
 8009f42:	b2ad      	uxthmi	r5, r5
 8009f44:	6031      	str	r1, [r6, #0]
 8009f46:	07d9      	lsls	r1, r3, #31
 8009f48:	bf44      	itt	mi
 8009f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f4e:	6023      	strmi	r3, [r4, #0]
 8009f50:	b11d      	cbz	r5, 8009f5a <_printf_i+0x19e>
 8009f52:	2310      	movs	r3, #16
 8009f54:	e7ac      	b.n	8009eb0 <_printf_i+0xf4>
 8009f56:	4827      	ldr	r0, [pc, #156]	@ (8009ff4 <_printf_i+0x238>)
 8009f58:	e7e9      	b.n	8009f2e <_printf_i+0x172>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	f023 0320 	bic.w	r3, r3, #32
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	e7f6      	b.n	8009f52 <_printf_i+0x196>
 8009f64:	4616      	mov	r6, r2
 8009f66:	e7bd      	b.n	8009ee4 <_printf_i+0x128>
 8009f68:	6833      	ldr	r3, [r6, #0]
 8009f6a:	6825      	ldr	r5, [r4, #0]
 8009f6c:	6961      	ldr	r1, [r4, #20]
 8009f6e:	1d18      	adds	r0, r3, #4
 8009f70:	6030      	str	r0, [r6, #0]
 8009f72:	062e      	lsls	r6, r5, #24
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	d501      	bpl.n	8009f7c <_printf_i+0x1c0>
 8009f78:	6019      	str	r1, [r3, #0]
 8009f7a:	e002      	b.n	8009f82 <_printf_i+0x1c6>
 8009f7c:	0668      	lsls	r0, r5, #25
 8009f7e:	d5fb      	bpl.n	8009f78 <_printf_i+0x1bc>
 8009f80:	8019      	strh	r1, [r3, #0]
 8009f82:	2300      	movs	r3, #0
 8009f84:	6123      	str	r3, [r4, #16]
 8009f86:	4616      	mov	r6, r2
 8009f88:	e7bc      	b.n	8009f04 <_printf_i+0x148>
 8009f8a:	6833      	ldr	r3, [r6, #0]
 8009f8c:	1d1a      	adds	r2, r3, #4
 8009f8e:	6032      	str	r2, [r6, #0]
 8009f90:	681e      	ldr	r6, [r3, #0]
 8009f92:	6862      	ldr	r2, [r4, #4]
 8009f94:	2100      	movs	r1, #0
 8009f96:	4630      	mov	r0, r6
 8009f98:	f7f6 f942 	bl	8000220 <memchr>
 8009f9c:	b108      	cbz	r0, 8009fa2 <_printf_i+0x1e6>
 8009f9e:	1b80      	subs	r0, r0, r6
 8009fa0:	6060      	str	r0, [r4, #4]
 8009fa2:	6863      	ldr	r3, [r4, #4]
 8009fa4:	6123      	str	r3, [r4, #16]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fac:	e7aa      	b.n	8009f04 <_printf_i+0x148>
 8009fae:	6923      	ldr	r3, [r4, #16]
 8009fb0:	4632      	mov	r2, r6
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	47d0      	blx	sl
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d0ad      	beq.n	8009f18 <_printf_i+0x15c>
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	079b      	lsls	r3, r3, #30
 8009fc0:	d413      	bmi.n	8009fea <_printf_i+0x22e>
 8009fc2:	68e0      	ldr	r0, [r4, #12]
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	4298      	cmp	r0, r3
 8009fc8:	bfb8      	it	lt
 8009fca:	4618      	movlt	r0, r3
 8009fcc:	e7a6      	b.n	8009f1c <_printf_i+0x160>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	4632      	mov	r2, r6
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	47d0      	blx	sl
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d09d      	beq.n	8009f18 <_printf_i+0x15c>
 8009fdc:	3501      	adds	r5, #1
 8009fde:	68e3      	ldr	r3, [r4, #12]
 8009fe0:	9903      	ldr	r1, [sp, #12]
 8009fe2:	1a5b      	subs	r3, r3, r1
 8009fe4:	42ab      	cmp	r3, r5
 8009fe6:	dcf2      	bgt.n	8009fce <_printf_i+0x212>
 8009fe8:	e7eb      	b.n	8009fc2 <_printf_i+0x206>
 8009fea:	2500      	movs	r5, #0
 8009fec:	f104 0619 	add.w	r6, r4, #25
 8009ff0:	e7f5      	b.n	8009fde <_printf_i+0x222>
 8009ff2:	bf00      	nop
 8009ff4:	0800e796 	.word	0x0800e796
 8009ff8:	0800e7a7 	.word	0x0800e7a7

08009ffc <_scanf_float>:
 8009ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	b087      	sub	sp, #28
 800a002:	4617      	mov	r7, r2
 800a004:	9303      	str	r3, [sp, #12]
 800a006:	688b      	ldr	r3, [r1, #8]
 800a008:	1e5a      	subs	r2, r3, #1
 800a00a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a00e:	bf81      	itttt	hi
 800a010:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a014:	eb03 0b05 	addhi.w	fp, r3, r5
 800a018:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a01c:	608b      	strhi	r3, [r1, #8]
 800a01e:	680b      	ldr	r3, [r1, #0]
 800a020:	460a      	mov	r2, r1
 800a022:	f04f 0500 	mov.w	r5, #0
 800a026:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a02a:	f842 3b1c 	str.w	r3, [r2], #28
 800a02e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a032:	4680      	mov	r8, r0
 800a034:	460c      	mov	r4, r1
 800a036:	bf98      	it	ls
 800a038:	f04f 0b00 	movls.w	fp, #0
 800a03c:	9201      	str	r2, [sp, #4]
 800a03e:	4616      	mov	r6, r2
 800a040:	46aa      	mov	sl, r5
 800a042:	46a9      	mov	r9, r5
 800a044:	9502      	str	r5, [sp, #8]
 800a046:	68a2      	ldr	r2, [r4, #8]
 800a048:	b152      	cbz	r2, 800a060 <_scanf_float+0x64>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a050:	d864      	bhi.n	800a11c <_scanf_float+0x120>
 800a052:	2b40      	cmp	r3, #64	@ 0x40
 800a054:	d83c      	bhi.n	800a0d0 <_scanf_float+0xd4>
 800a056:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a05a:	b2c8      	uxtb	r0, r1
 800a05c:	280e      	cmp	r0, #14
 800a05e:	d93a      	bls.n	800a0d6 <_scanf_float+0xda>
 800a060:	f1b9 0f00 	cmp.w	r9, #0
 800a064:	d003      	beq.n	800a06e <_scanf_float+0x72>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a072:	f1ba 0f01 	cmp.w	sl, #1
 800a076:	f200 8117 	bhi.w	800a2a8 <_scanf_float+0x2ac>
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	429e      	cmp	r6, r3
 800a07e:	f200 8108 	bhi.w	800a292 <_scanf_float+0x296>
 800a082:	2001      	movs	r0, #1
 800a084:	b007      	add	sp, #28
 800a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a08e:	2a0d      	cmp	r2, #13
 800a090:	d8e6      	bhi.n	800a060 <_scanf_float+0x64>
 800a092:	a101      	add	r1, pc, #4	@ (adr r1, 800a098 <_scanf_float+0x9c>)
 800a094:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a098:	0800a1df 	.word	0x0800a1df
 800a09c:	0800a061 	.word	0x0800a061
 800a0a0:	0800a061 	.word	0x0800a061
 800a0a4:	0800a061 	.word	0x0800a061
 800a0a8:	0800a23f 	.word	0x0800a23f
 800a0ac:	0800a217 	.word	0x0800a217
 800a0b0:	0800a061 	.word	0x0800a061
 800a0b4:	0800a061 	.word	0x0800a061
 800a0b8:	0800a1ed 	.word	0x0800a1ed
 800a0bc:	0800a061 	.word	0x0800a061
 800a0c0:	0800a061 	.word	0x0800a061
 800a0c4:	0800a061 	.word	0x0800a061
 800a0c8:	0800a061 	.word	0x0800a061
 800a0cc:	0800a1a5 	.word	0x0800a1a5
 800a0d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a0d4:	e7db      	b.n	800a08e <_scanf_float+0x92>
 800a0d6:	290e      	cmp	r1, #14
 800a0d8:	d8c2      	bhi.n	800a060 <_scanf_float+0x64>
 800a0da:	a001      	add	r0, pc, #4	@ (adr r0, 800a0e0 <_scanf_float+0xe4>)
 800a0dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a0e0:	0800a195 	.word	0x0800a195
 800a0e4:	0800a061 	.word	0x0800a061
 800a0e8:	0800a195 	.word	0x0800a195
 800a0ec:	0800a22b 	.word	0x0800a22b
 800a0f0:	0800a061 	.word	0x0800a061
 800a0f4:	0800a13d 	.word	0x0800a13d
 800a0f8:	0800a17b 	.word	0x0800a17b
 800a0fc:	0800a17b 	.word	0x0800a17b
 800a100:	0800a17b 	.word	0x0800a17b
 800a104:	0800a17b 	.word	0x0800a17b
 800a108:	0800a17b 	.word	0x0800a17b
 800a10c:	0800a17b 	.word	0x0800a17b
 800a110:	0800a17b 	.word	0x0800a17b
 800a114:	0800a17b 	.word	0x0800a17b
 800a118:	0800a17b 	.word	0x0800a17b
 800a11c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a11e:	d809      	bhi.n	800a134 <_scanf_float+0x138>
 800a120:	2b60      	cmp	r3, #96	@ 0x60
 800a122:	d8b2      	bhi.n	800a08a <_scanf_float+0x8e>
 800a124:	2b54      	cmp	r3, #84	@ 0x54
 800a126:	d07b      	beq.n	800a220 <_scanf_float+0x224>
 800a128:	2b59      	cmp	r3, #89	@ 0x59
 800a12a:	d199      	bne.n	800a060 <_scanf_float+0x64>
 800a12c:	2d07      	cmp	r5, #7
 800a12e:	d197      	bne.n	800a060 <_scanf_float+0x64>
 800a130:	2508      	movs	r5, #8
 800a132:	e02c      	b.n	800a18e <_scanf_float+0x192>
 800a134:	2b74      	cmp	r3, #116	@ 0x74
 800a136:	d073      	beq.n	800a220 <_scanf_float+0x224>
 800a138:	2b79      	cmp	r3, #121	@ 0x79
 800a13a:	e7f6      	b.n	800a12a <_scanf_float+0x12e>
 800a13c:	6821      	ldr	r1, [r4, #0]
 800a13e:	05c8      	lsls	r0, r1, #23
 800a140:	d51b      	bpl.n	800a17a <_scanf_float+0x17e>
 800a142:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a146:	6021      	str	r1, [r4, #0]
 800a148:	f109 0901 	add.w	r9, r9, #1
 800a14c:	f1bb 0f00 	cmp.w	fp, #0
 800a150:	d003      	beq.n	800a15a <_scanf_float+0x15e>
 800a152:	3201      	adds	r2, #1
 800a154:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800a158:	60a2      	str	r2, [r4, #8]
 800a15a:	68a3      	ldr	r3, [r4, #8]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	60a3      	str	r3, [r4, #8]
 800a160:	6923      	ldr	r3, [r4, #16]
 800a162:	3301      	adds	r3, #1
 800a164:	6123      	str	r3, [r4, #16]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	3b01      	subs	r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	607b      	str	r3, [r7, #4]
 800a16e:	f340 8087 	ble.w	800a280 <_scanf_float+0x284>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	3301      	adds	r3, #1
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	e765      	b.n	800a046 <_scanf_float+0x4a>
 800a17a:	eb1a 0105 	adds.w	r1, sl, r5
 800a17e:	f47f af6f 	bne.w	800a060 <_scanf_float+0x64>
 800a182:	6822      	ldr	r2, [r4, #0]
 800a184:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a188:	6022      	str	r2, [r4, #0]
 800a18a:	460d      	mov	r5, r1
 800a18c:	468a      	mov	sl, r1
 800a18e:	f806 3b01 	strb.w	r3, [r6], #1
 800a192:	e7e2      	b.n	800a15a <_scanf_float+0x15e>
 800a194:	6822      	ldr	r2, [r4, #0]
 800a196:	0610      	lsls	r0, r2, #24
 800a198:	f57f af62 	bpl.w	800a060 <_scanf_float+0x64>
 800a19c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a1a0:	6022      	str	r2, [r4, #0]
 800a1a2:	e7f4      	b.n	800a18e <_scanf_float+0x192>
 800a1a4:	f1ba 0f00 	cmp.w	sl, #0
 800a1a8:	d10e      	bne.n	800a1c8 <_scanf_float+0x1cc>
 800a1aa:	f1b9 0f00 	cmp.w	r9, #0
 800a1ae:	d10e      	bne.n	800a1ce <_scanf_float+0x1d2>
 800a1b0:	6822      	ldr	r2, [r4, #0]
 800a1b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a1b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a1ba:	d108      	bne.n	800a1ce <_scanf_float+0x1d2>
 800a1bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a1c0:	6022      	str	r2, [r4, #0]
 800a1c2:	f04f 0a01 	mov.w	sl, #1
 800a1c6:	e7e2      	b.n	800a18e <_scanf_float+0x192>
 800a1c8:	f1ba 0f02 	cmp.w	sl, #2
 800a1cc:	d055      	beq.n	800a27a <_scanf_float+0x27e>
 800a1ce:	2d01      	cmp	r5, #1
 800a1d0:	d002      	beq.n	800a1d8 <_scanf_float+0x1dc>
 800a1d2:	2d04      	cmp	r5, #4
 800a1d4:	f47f af44 	bne.w	800a060 <_scanf_float+0x64>
 800a1d8:	3501      	adds	r5, #1
 800a1da:	b2ed      	uxtb	r5, r5
 800a1dc:	e7d7      	b.n	800a18e <_scanf_float+0x192>
 800a1de:	f1ba 0f01 	cmp.w	sl, #1
 800a1e2:	f47f af3d 	bne.w	800a060 <_scanf_float+0x64>
 800a1e6:	f04f 0a02 	mov.w	sl, #2
 800a1ea:	e7d0      	b.n	800a18e <_scanf_float+0x192>
 800a1ec:	b97d      	cbnz	r5, 800a20e <_scanf_float+0x212>
 800a1ee:	f1b9 0f00 	cmp.w	r9, #0
 800a1f2:	f47f af38 	bne.w	800a066 <_scanf_float+0x6a>
 800a1f6:	6822      	ldr	r2, [r4, #0]
 800a1f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a1fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a200:	f040 8108 	bne.w	800a414 <_scanf_float+0x418>
 800a204:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a208:	6022      	str	r2, [r4, #0]
 800a20a:	2501      	movs	r5, #1
 800a20c:	e7bf      	b.n	800a18e <_scanf_float+0x192>
 800a20e:	2d03      	cmp	r5, #3
 800a210:	d0e2      	beq.n	800a1d8 <_scanf_float+0x1dc>
 800a212:	2d05      	cmp	r5, #5
 800a214:	e7de      	b.n	800a1d4 <_scanf_float+0x1d8>
 800a216:	2d02      	cmp	r5, #2
 800a218:	f47f af22 	bne.w	800a060 <_scanf_float+0x64>
 800a21c:	2503      	movs	r5, #3
 800a21e:	e7b6      	b.n	800a18e <_scanf_float+0x192>
 800a220:	2d06      	cmp	r5, #6
 800a222:	f47f af1d 	bne.w	800a060 <_scanf_float+0x64>
 800a226:	2507      	movs	r5, #7
 800a228:	e7b1      	b.n	800a18e <_scanf_float+0x192>
 800a22a:	6822      	ldr	r2, [r4, #0]
 800a22c:	0591      	lsls	r1, r2, #22
 800a22e:	f57f af17 	bpl.w	800a060 <_scanf_float+0x64>
 800a232:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a236:	6022      	str	r2, [r4, #0]
 800a238:	f8cd 9008 	str.w	r9, [sp, #8]
 800a23c:	e7a7      	b.n	800a18e <_scanf_float+0x192>
 800a23e:	6822      	ldr	r2, [r4, #0]
 800a240:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a244:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a248:	d006      	beq.n	800a258 <_scanf_float+0x25c>
 800a24a:	0550      	lsls	r0, r2, #21
 800a24c:	f57f af08 	bpl.w	800a060 <_scanf_float+0x64>
 800a250:	f1b9 0f00 	cmp.w	r9, #0
 800a254:	f000 80de 	beq.w	800a414 <_scanf_float+0x418>
 800a258:	0591      	lsls	r1, r2, #22
 800a25a:	bf58      	it	pl
 800a25c:	9902      	ldrpl	r1, [sp, #8]
 800a25e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a262:	bf58      	it	pl
 800a264:	eba9 0101 	subpl.w	r1, r9, r1
 800a268:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a26c:	bf58      	it	pl
 800a26e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a272:	6022      	str	r2, [r4, #0]
 800a274:	f04f 0900 	mov.w	r9, #0
 800a278:	e789      	b.n	800a18e <_scanf_float+0x192>
 800a27a:	f04f 0a03 	mov.w	sl, #3
 800a27e:	e786      	b.n	800a18e <_scanf_float+0x192>
 800a280:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a284:	4639      	mov	r1, r7
 800a286:	4640      	mov	r0, r8
 800a288:	4798      	blx	r3
 800a28a:	2800      	cmp	r0, #0
 800a28c:	f43f aedb 	beq.w	800a046 <_scanf_float+0x4a>
 800a290:	e6e6      	b.n	800a060 <_scanf_float+0x64>
 800a292:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a29a:	463a      	mov	r2, r7
 800a29c:	4640      	mov	r0, r8
 800a29e:	4798      	blx	r3
 800a2a0:	6923      	ldr	r3, [r4, #16]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	6123      	str	r3, [r4, #16]
 800a2a6:	e6e8      	b.n	800a07a <_scanf_float+0x7e>
 800a2a8:	1e6b      	subs	r3, r5, #1
 800a2aa:	2b06      	cmp	r3, #6
 800a2ac:	d824      	bhi.n	800a2f8 <_scanf_float+0x2fc>
 800a2ae:	2d02      	cmp	r5, #2
 800a2b0:	d836      	bhi.n	800a320 <_scanf_float+0x324>
 800a2b2:	9b01      	ldr	r3, [sp, #4]
 800a2b4:	429e      	cmp	r6, r3
 800a2b6:	f67f aee4 	bls.w	800a082 <_scanf_float+0x86>
 800a2ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a2be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2c2:	463a      	mov	r2, r7
 800a2c4:	4640      	mov	r0, r8
 800a2c6:	4798      	blx	r3
 800a2c8:	6923      	ldr	r3, [r4, #16]
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	6123      	str	r3, [r4, #16]
 800a2ce:	e7f0      	b.n	800a2b2 <_scanf_float+0x2b6>
 800a2d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a2d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a2d8:	463a      	mov	r2, r7
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4798      	blx	r3
 800a2de:	6923      	ldr	r3, [r4, #16]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	6123      	str	r3, [r4, #16]
 800a2e4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a2e8:	fa5f fa8a 	uxtb.w	sl, sl
 800a2ec:	f1ba 0f02 	cmp.w	sl, #2
 800a2f0:	d1ee      	bne.n	800a2d0 <_scanf_float+0x2d4>
 800a2f2:	3d03      	subs	r5, #3
 800a2f4:	b2ed      	uxtb	r5, r5
 800a2f6:	1b76      	subs	r6, r6, r5
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	05da      	lsls	r2, r3, #23
 800a2fc:	d530      	bpl.n	800a360 <_scanf_float+0x364>
 800a2fe:	055b      	lsls	r3, r3, #21
 800a300:	d511      	bpl.n	800a326 <_scanf_float+0x32a>
 800a302:	9b01      	ldr	r3, [sp, #4]
 800a304:	429e      	cmp	r6, r3
 800a306:	f67f aebc 	bls.w	800a082 <_scanf_float+0x86>
 800a30a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a30e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a312:	463a      	mov	r2, r7
 800a314:	4640      	mov	r0, r8
 800a316:	4798      	blx	r3
 800a318:	6923      	ldr	r3, [r4, #16]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	6123      	str	r3, [r4, #16]
 800a31e:	e7f0      	b.n	800a302 <_scanf_float+0x306>
 800a320:	46aa      	mov	sl, r5
 800a322:	46b3      	mov	fp, r6
 800a324:	e7de      	b.n	800a2e4 <_scanf_float+0x2e8>
 800a326:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a32a:	6923      	ldr	r3, [r4, #16]
 800a32c:	2965      	cmp	r1, #101	@ 0x65
 800a32e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a332:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a336:	6123      	str	r3, [r4, #16]
 800a338:	d00c      	beq.n	800a354 <_scanf_float+0x358>
 800a33a:	2945      	cmp	r1, #69	@ 0x45
 800a33c:	d00a      	beq.n	800a354 <_scanf_float+0x358>
 800a33e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a342:	463a      	mov	r2, r7
 800a344:	4640      	mov	r0, r8
 800a346:	4798      	blx	r3
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a34e:	3b01      	subs	r3, #1
 800a350:	1eb5      	subs	r5, r6, #2
 800a352:	6123      	str	r3, [r4, #16]
 800a354:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a358:	463a      	mov	r2, r7
 800a35a:	4640      	mov	r0, r8
 800a35c:	4798      	blx	r3
 800a35e:	462e      	mov	r6, r5
 800a360:	6822      	ldr	r2, [r4, #0]
 800a362:	f012 0210 	ands.w	r2, r2, #16
 800a366:	d001      	beq.n	800a36c <_scanf_float+0x370>
 800a368:	2000      	movs	r0, #0
 800a36a:	e68b      	b.n	800a084 <_scanf_float+0x88>
 800a36c:	7032      	strb	r2, [r6, #0]
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a378:	d11c      	bne.n	800a3b4 <_scanf_float+0x3b8>
 800a37a:	9b02      	ldr	r3, [sp, #8]
 800a37c:	454b      	cmp	r3, r9
 800a37e:	eba3 0209 	sub.w	r2, r3, r9
 800a382:	d123      	bne.n	800a3cc <_scanf_float+0x3d0>
 800a384:	9901      	ldr	r1, [sp, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	4640      	mov	r0, r8
 800a38a:	f002 fd15 	bl	800cdb8 <_strtod_r>
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	6821      	ldr	r1, [r4, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f011 0f02 	tst.w	r1, #2
 800a398:	ec57 6b10 	vmov	r6, r7, d0
 800a39c:	f103 0204 	add.w	r2, r3, #4
 800a3a0:	d01f      	beq.n	800a3e2 <_scanf_float+0x3e6>
 800a3a2:	9903      	ldr	r1, [sp, #12]
 800a3a4:	600a      	str	r2, [r1, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	e9c3 6700 	strd	r6, r7, [r3]
 800a3ac:	68e3      	ldr	r3, [r4, #12]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60e3      	str	r3, [r4, #12]
 800a3b2:	e7d9      	b.n	800a368 <_scanf_float+0x36c>
 800a3b4:	9b04      	ldr	r3, [sp, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0e4      	beq.n	800a384 <_scanf_float+0x388>
 800a3ba:	9905      	ldr	r1, [sp, #20]
 800a3bc:	230a      	movs	r3, #10
 800a3be:	3101      	adds	r1, #1
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	f002 fd79 	bl	800ceb8 <_strtol_r>
 800a3c6:	9b04      	ldr	r3, [sp, #16]
 800a3c8:	9e05      	ldr	r6, [sp, #20]
 800a3ca:	1ac2      	subs	r2, r0, r3
 800a3cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a3d0:	429e      	cmp	r6, r3
 800a3d2:	bf28      	it	cs
 800a3d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a3d8:	4910      	ldr	r1, [pc, #64]	@ (800a41c <_scanf_float+0x420>)
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f000 f954 	bl	800a688 <siprintf>
 800a3e0:	e7d0      	b.n	800a384 <_scanf_float+0x388>
 800a3e2:	f011 0f04 	tst.w	r1, #4
 800a3e6:	9903      	ldr	r1, [sp, #12]
 800a3e8:	600a      	str	r2, [r1, #0]
 800a3ea:	d1dc      	bne.n	800a3a6 <_scanf_float+0x3aa>
 800a3ec:	681d      	ldr	r5, [r3, #0]
 800a3ee:	4632      	mov	r2, r6
 800a3f0:	463b      	mov	r3, r7
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	f7f6 fbc1 	bl	8000b7c <__aeabi_dcmpun>
 800a3fa:	b128      	cbz	r0, 800a408 <_scanf_float+0x40c>
 800a3fc:	4808      	ldr	r0, [pc, #32]	@ (800a420 <_scanf_float+0x424>)
 800a3fe:	f000 fad5 	bl	800a9ac <nanf>
 800a402:	ed85 0a00 	vstr	s0, [r5]
 800a406:	e7d1      	b.n	800a3ac <_scanf_float+0x3b0>
 800a408:	4630      	mov	r0, r6
 800a40a:	4639      	mov	r1, r7
 800a40c:	f7f6 fc14 	bl	8000c38 <__aeabi_d2f>
 800a410:	6028      	str	r0, [r5, #0]
 800a412:	e7cb      	b.n	800a3ac <_scanf_float+0x3b0>
 800a414:	f04f 0900 	mov.w	r9, #0
 800a418:	e629      	b.n	800a06e <_scanf_float+0x72>
 800a41a:	bf00      	nop
 800a41c:	0800e7b8 	.word	0x0800e7b8
 800a420:	0800eb4d 	.word	0x0800eb4d

0800a424 <std>:
 800a424:	2300      	movs	r3, #0
 800a426:	b510      	push	{r4, lr}
 800a428:	4604      	mov	r4, r0
 800a42a:	e9c0 3300 	strd	r3, r3, [r0]
 800a42e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a432:	6083      	str	r3, [r0, #8]
 800a434:	8181      	strh	r1, [r0, #12]
 800a436:	6643      	str	r3, [r0, #100]	@ 0x64
 800a438:	81c2      	strh	r2, [r0, #14]
 800a43a:	6183      	str	r3, [r0, #24]
 800a43c:	4619      	mov	r1, r3
 800a43e:	2208      	movs	r2, #8
 800a440:	305c      	adds	r0, #92	@ 0x5c
 800a442:	f000 fa33 	bl	800a8ac <memset>
 800a446:	4b0d      	ldr	r3, [pc, #52]	@ (800a47c <std+0x58>)
 800a448:	6263      	str	r3, [r4, #36]	@ 0x24
 800a44a:	4b0d      	ldr	r3, [pc, #52]	@ (800a480 <std+0x5c>)
 800a44c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a44e:	4b0d      	ldr	r3, [pc, #52]	@ (800a484 <std+0x60>)
 800a450:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a452:	4b0d      	ldr	r3, [pc, #52]	@ (800a488 <std+0x64>)
 800a454:	6323      	str	r3, [r4, #48]	@ 0x30
 800a456:	4b0d      	ldr	r3, [pc, #52]	@ (800a48c <std+0x68>)
 800a458:	6224      	str	r4, [r4, #32]
 800a45a:	429c      	cmp	r4, r3
 800a45c:	d006      	beq.n	800a46c <std+0x48>
 800a45e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a462:	4294      	cmp	r4, r2
 800a464:	d002      	beq.n	800a46c <std+0x48>
 800a466:	33d0      	adds	r3, #208	@ 0xd0
 800a468:	429c      	cmp	r4, r3
 800a46a:	d105      	bne.n	800a478 <std+0x54>
 800a46c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a474:	f000 ba96 	b.w	800a9a4 <__retarget_lock_init_recursive>
 800a478:	bd10      	pop	{r4, pc}
 800a47a:	bf00      	nop
 800a47c:	0800a6c9 	.word	0x0800a6c9
 800a480:	0800a6eb 	.word	0x0800a6eb
 800a484:	0800a723 	.word	0x0800a723
 800a488:	0800a747 	.word	0x0800a747
 800a48c:	20001870 	.word	0x20001870

0800a490 <stdio_exit_handler>:
 800a490:	4a02      	ldr	r2, [pc, #8]	@ (800a49c <stdio_exit_handler+0xc>)
 800a492:	4903      	ldr	r1, [pc, #12]	@ (800a4a0 <stdio_exit_handler+0x10>)
 800a494:	4803      	ldr	r0, [pc, #12]	@ (800a4a4 <stdio_exit_handler+0x14>)
 800a496:	f000 b869 	b.w	800a56c <_fwalk_sglue>
 800a49a:	bf00      	nop
 800a49c:	20000f50 	.word	0x20000f50
 800a4a0:	0800d4f9 	.word	0x0800d4f9
 800a4a4:	20000f60 	.word	0x20000f60

0800a4a8 <cleanup_stdio>:
 800a4a8:	6841      	ldr	r1, [r0, #4]
 800a4aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a4dc <cleanup_stdio+0x34>)
 800a4ac:	4299      	cmp	r1, r3
 800a4ae:	b510      	push	{r4, lr}
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	d001      	beq.n	800a4b8 <cleanup_stdio+0x10>
 800a4b4:	f003 f820 	bl	800d4f8 <_fflush_r>
 800a4b8:	68a1      	ldr	r1, [r4, #8]
 800a4ba:	4b09      	ldr	r3, [pc, #36]	@ (800a4e0 <cleanup_stdio+0x38>)
 800a4bc:	4299      	cmp	r1, r3
 800a4be:	d002      	beq.n	800a4c6 <cleanup_stdio+0x1e>
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f003 f819 	bl	800d4f8 <_fflush_r>
 800a4c6:	68e1      	ldr	r1, [r4, #12]
 800a4c8:	4b06      	ldr	r3, [pc, #24]	@ (800a4e4 <cleanup_stdio+0x3c>)
 800a4ca:	4299      	cmp	r1, r3
 800a4cc:	d004      	beq.n	800a4d8 <cleanup_stdio+0x30>
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d4:	f003 b810 	b.w	800d4f8 <_fflush_r>
 800a4d8:	bd10      	pop	{r4, pc}
 800a4da:	bf00      	nop
 800a4dc:	20001870 	.word	0x20001870
 800a4e0:	200018d8 	.word	0x200018d8
 800a4e4:	20001940 	.word	0x20001940

0800a4e8 <global_stdio_init.part.0>:
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a518 <global_stdio_init.part.0+0x30>)
 800a4ec:	4c0b      	ldr	r4, [pc, #44]	@ (800a51c <global_stdio_init.part.0+0x34>)
 800a4ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a520 <global_stdio_init.part.0+0x38>)
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	2104      	movs	r1, #4
 800a4f8:	f7ff ff94 	bl	800a424 <std>
 800a4fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a500:	2201      	movs	r2, #1
 800a502:	2109      	movs	r1, #9
 800a504:	f7ff ff8e 	bl	800a424 <std>
 800a508:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a50c:	2202      	movs	r2, #2
 800a50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a512:	2112      	movs	r1, #18
 800a514:	f7ff bf86 	b.w	800a424 <std>
 800a518:	200019a8 	.word	0x200019a8
 800a51c:	20001870 	.word	0x20001870
 800a520:	0800a491 	.word	0x0800a491

0800a524 <__sfp_lock_acquire>:
 800a524:	4801      	ldr	r0, [pc, #4]	@ (800a52c <__sfp_lock_acquire+0x8>)
 800a526:	f000 ba3e 	b.w	800a9a6 <__retarget_lock_acquire_recursive>
 800a52a:	bf00      	nop
 800a52c:	200019b1 	.word	0x200019b1

0800a530 <__sfp_lock_release>:
 800a530:	4801      	ldr	r0, [pc, #4]	@ (800a538 <__sfp_lock_release+0x8>)
 800a532:	f000 ba39 	b.w	800a9a8 <__retarget_lock_release_recursive>
 800a536:	bf00      	nop
 800a538:	200019b1 	.word	0x200019b1

0800a53c <__sinit>:
 800a53c:	b510      	push	{r4, lr}
 800a53e:	4604      	mov	r4, r0
 800a540:	f7ff fff0 	bl	800a524 <__sfp_lock_acquire>
 800a544:	6a23      	ldr	r3, [r4, #32]
 800a546:	b11b      	cbz	r3, 800a550 <__sinit+0x14>
 800a548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a54c:	f7ff bff0 	b.w	800a530 <__sfp_lock_release>
 800a550:	4b04      	ldr	r3, [pc, #16]	@ (800a564 <__sinit+0x28>)
 800a552:	6223      	str	r3, [r4, #32]
 800a554:	4b04      	ldr	r3, [pc, #16]	@ (800a568 <__sinit+0x2c>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1f5      	bne.n	800a548 <__sinit+0xc>
 800a55c:	f7ff ffc4 	bl	800a4e8 <global_stdio_init.part.0>
 800a560:	e7f2      	b.n	800a548 <__sinit+0xc>
 800a562:	bf00      	nop
 800a564:	0800a4a9 	.word	0x0800a4a9
 800a568:	200019a8 	.word	0x200019a8

0800a56c <_fwalk_sglue>:
 800a56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a570:	4607      	mov	r7, r0
 800a572:	4688      	mov	r8, r1
 800a574:	4614      	mov	r4, r2
 800a576:	2600      	movs	r6, #0
 800a578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a57c:	f1b9 0901 	subs.w	r9, r9, #1
 800a580:	d505      	bpl.n	800a58e <_fwalk_sglue+0x22>
 800a582:	6824      	ldr	r4, [r4, #0]
 800a584:	2c00      	cmp	r4, #0
 800a586:	d1f7      	bne.n	800a578 <_fwalk_sglue+0xc>
 800a588:	4630      	mov	r0, r6
 800a58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58e:	89ab      	ldrh	r3, [r5, #12]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d907      	bls.n	800a5a4 <_fwalk_sglue+0x38>
 800a594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a598:	3301      	adds	r3, #1
 800a59a:	d003      	beq.n	800a5a4 <_fwalk_sglue+0x38>
 800a59c:	4629      	mov	r1, r5
 800a59e:	4638      	mov	r0, r7
 800a5a0:	47c0      	blx	r8
 800a5a2:	4306      	orrs	r6, r0
 800a5a4:	3568      	adds	r5, #104	@ 0x68
 800a5a6:	e7e9      	b.n	800a57c <_fwalk_sglue+0x10>

0800a5a8 <iprintf>:
 800a5a8:	b40f      	push	{r0, r1, r2, r3}
 800a5aa:	b507      	push	{r0, r1, r2, lr}
 800a5ac:	4906      	ldr	r1, [pc, #24]	@ (800a5c8 <iprintf+0x20>)
 800a5ae:	ab04      	add	r3, sp, #16
 800a5b0:	6808      	ldr	r0, [r1, #0]
 800a5b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b6:	6881      	ldr	r1, [r0, #8]
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	f002 fe01 	bl	800d1c0 <_vfiprintf_r>
 800a5be:	b003      	add	sp, #12
 800a5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5c4:	b004      	add	sp, #16
 800a5c6:	4770      	bx	lr
 800a5c8:	20000f5c 	.word	0x20000f5c

0800a5cc <_puts_r>:
 800a5cc:	6a03      	ldr	r3, [r0, #32]
 800a5ce:	b570      	push	{r4, r5, r6, lr}
 800a5d0:	6884      	ldr	r4, [r0, #8]
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	460e      	mov	r6, r1
 800a5d6:	b90b      	cbnz	r3, 800a5dc <_puts_r+0x10>
 800a5d8:	f7ff ffb0 	bl	800a53c <__sinit>
 800a5dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5de:	07db      	lsls	r3, r3, #31
 800a5e0:	d405      	bmi.n	800a5ee <_puts_r+0x22>
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	0598      	lsls	r0, r3, #22
 800a5e6:	d402      	bmi.n	800a5ee <_puts_r+0x22>
 800a5e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ea:	f000 f9dc 	bl	800a9a6 <__retarget_lock_acquire_recursive>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	0719      	lsls	r1, r3, #28
 800a5f2:	d502      	bpl.n	800a5fa <_puts_r+0x2e>
 800a5f4:	6923      	ldr	r3, [r4, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d135      	bne.n	800a666 <_puts_r+0x9a>
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	f000 f8e5 	bl	800a7cc <__swsetup_r>
 800a602:	b380      	cbz	r0, 800a666 <_puts_r+0x9a>
 800a604:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a60a:	07da      	lsls	r2, r3, #31
 800a60c:	d405      	bmi.n	800a61a <_puts_r+0x4e>
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	059b      	lsls	r3, r3, #22
 800a612:	d402      	bmi.n	800a61a <_puts_r+0x4e>
 800a614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a616:	f000 f9c7 	bl	800a9a8 <__retarget_lock_release_recursive>
 800a61a:	4628      	mov	r0, r5
 800a61c:	bd70      	pop	{r4, r5, r6, pc}
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da04      	bge.n	800a62c <_puts_r+0x60>
 800a622:	69a2      	ldr	r2, [r4, #24]
 800a624:	429a      	cmp	r2, r3
 800a626:	dc17      	bgt.n	800a658 <_puts_r+0x8c>
 800a628:	290a      	cmp	r1, #10
 800a62a:	d015      	beq.n	800a658 <_puts_r+0x8c>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	6022      	str	r2, [r4, #0]
 800a632:	7019      	strb	r1, [r3, #0]
 800a634:	68a3      	ldr	r3, [r4, #8]
 800a636:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a63a:	3b01      	subs	r3, #1
 800a63c:	60a3      	str	r3, [r4, #8]
 800a63e:	2900      	cmp	r1, #0
 800a640:	d1ed      	bne.n	800a61e <_puts_r+0x52>
 800a642:	2b00      	cmp	r3, #0
 800a644:	da11      	bge.n	800a66a <_puts_r+0x9e>
 800a646:	4622      	mov	r2, r4
 800a648:	210a      	movs	r1, #10
 800a64a:	4628      	mov	r0, r5
 800a64c:	f000 f87f 	bl	800a74e <__swbuf_r>
 800a650:	3001      	adds	r0, #1
 800a652:	d0d7      	beq.n	800a604 <_puts_r+0x38>
 800a654:	250a      	movs	r5, #10
 800a656:	e7d7      	b.n	800a608 <_puts_r+0x3c>
 800a658:	4622      	mov	r2, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 f877 	bl	800a74e <__swbuf_r>
 800a660:	3001      	adds	r0, #1
 800a662:	d1e7      	bne.n	800a634 <_puts_r+0x68>
 800a664:	e7ce      	b.n	800a604 <_puts_r+0x38>
 800a666:	3e01      	subs	r6, #1
 800a668:	e7e4      	b.n	800a634 <_puts_r+0x68>
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	1c5a      	adds	r2, r3, #1
 800a66e:	6022      	str	r2, [r4, #0]
 800a670:	220a      	movs	r2, #10
 800a672:	701a      	strb	r2, [r3, #0]
 800a674:	e7ee      	b.n	800a654 <_puts_r+0x88>
	...

0800a678 <puts>:
 800a678:	4b02      	ldr	r3, [pc, #8]	@ (800a684 <puts+0xc>)
 800a67a:	4601      	mov	r1, r0
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	f7ff bfa5 	b.w	800a5cc <_puts_r>
 800a682:	bf00      	nop
 800a684:	20000f5c 	.word	0x20000f5c

0800a688 <siprintf>:
 800a688:	b40e      	push	{r1, r2, r3}
 800a68a:	b500      	push	{lr}
 800a68c:	b09c      	sub	sp, #112	@ 0x70
 800a68e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a690:	9002      	str	r0, [sp, #8]
 800a692:	9006      	str	r0, [sp, #24]
 800a694:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a698:	4809      	ldr	r0, [pc, #36]	@ (800a6c0 <siprintf+0x38>)
 800a69a:	9107      	str	r1, [sp, #28]
 800a69c:	9104      	str	r1, [sp, #16]
 800a69e:	4909      	ldr	r1, [pc, #36]	@ (800a6c4 <siprintf+0x3c>)
 800a6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a4:	9105      	str	r1, [sp, #20]
 800a6a6:	6800      	ldr	r0, [r0, #0]
 800a6a8:	9301      	str	r3, [sp, #4]
 800a6aa:	a902      	add	r1, sp, #8
 800a6ac:	f002 fc62 	bl	800cf74 <_svfiprintf_r>
 800a6b0:	9b02      	ldr	r3, [sp, #8]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	701a      	strb	r2, [r3, #0]
 800a6b6:	b01c      	add	sp, #112	@ 0x70
 800a6b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6bc:	b003      	add	sp, #12
 800a6be:	4770      	bx	lr
 800a6c0:	20000f5c 	.word	0x20000f5c
 800a6c4:	ffff0208 	.word	0xffff0208

0800a6c8 <__sread>:
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d0:	f000 f91a 	bl	800a908 <_read_r>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	bfab      	itete	ge
 800a6d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6da:	89a3      	ldrhlt	r3, [r4, #12]
 800a6dc:	181b      	addge	r3, r3, r0
 800a6de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6e2:	bfac      	ite	ge
 800a6e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6e6:	81a3      	strhlt	r3, [r4, #12]
 800a6e8:	bd10      	pop	{r4, pc}

0800a6ea <__swrite>:
 800a6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ee:	461f      	mov	r7, r3
 800a6f0:	898b      	ldrh	r3, [r1, #12]
 800a6f2:	05db      	lsls	r3, r3, #23
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	4616      	mov	r6, r2
 800a6fa:	d505      	bpl.n	800a708 <__swrite+0x1e>
 800a6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a700:	2302      	movs	r3, #2
 800a702:	2200      	movs	r2, #0
 800a704:	f000 f8ee 	bl	800a8e4 <_lseek_r>
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a70e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a712:	81a3      	strh	r3, [r4, #12]
 800a714:	4632      	mov	r2, r6
 800a716:	463b      	mov	r3, r7
 800a718:	4628      	mov	r0, r5
 800a71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a71e:	f000 b905 	b.w	800a92c <_write_r>

0800a722 <__sseek>:
 800a722:	b510      	push	{r4, lr}
 800a724:	460c      	mov	r4, r1
 800a726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72a:	f000 f8db 	bl	800a8e4 <_lseek_r>
 800a72e:	1c43      	adds	r3, r0, #1
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	bf15      	itete	ne
 800a734:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a736:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a73a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a73e:	81a3      	strheq	r3, [r4, #12]
 800a740:	bf18      	it	ne
 800a742:	81a3      	strhne	r3, [r4, #12]
 800a744:	bd10      	pop	{r4, pc}

0800a746 <__sclose>:
 800a746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a74a:	f000 b8bb 	b.w	800a8c4 <_close_r>

0800a74e <__swbuf_r>:
 800a74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a750:	460e      	mov	r6, r1
 800a752:	4614      	mov	r4, r2
 800a754:	4605      	mov	r5, r0
 800a756:	b118      	cbz	r0, 800a760 <__swbuf_r+0x12>
 800a758:	6a03      	ldr	r3, [r0, #32]
 800a75a:	b90b      	cbnz	r3, 800a760 <__swbuf_r+0x12>
 800a75c:	f7ff feee 	bl	800a53c <__sinit>
 800a760:	69a3      	ldr	r3, [r4, #24]
 800a762:	60a3      	str	r3, [r4, #8]
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	071a      	lsls	r2, r3, #28
 800a768:	d501      	bpl.n	800a76e <__swbuf_r+0x20>
 800a76a:	6923      	ldr	r3, [r4, #16]
 800a76c:	b943      	cbnz	r3, 800a780 <__swbuf_r+0x32>
 800a76e:	4621      	mov	r1, r4
 800a770:	4628      	mov	r0, r5
 800a772:	f000 f82b 	bl	800a7cc <__swsetup_r>
 800a776:	b118      	cbz	r0, 800a780 <__swbuf_r+0x32>
 800a778:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a77c:	4638      	mov	r0, r7
 800a77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	6922      	ldr	r2, [r4, #16]
 800a784:	1a98      	subs	r0, r3, r2
 800a786:	6963      	ldr	r3, [r4, #20]
 800a788:	b2f6      	uxtb	r6, r6
 800a78a:	4283      	cmp	r3, r0
 800a78c:	4637      	mov	r7, r6
 800a78e:	dc05      	bgt.n	800a79c <__swbuf_r+0x4e>
 800a790:	4621      	mov	r1, r4
 800a792:	4628      	mov	r0, r5
 800a794:	f002 feb0 	bl	800d4f8 <_fflush_r>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d1ed      	bne.n	800a778 <__swbuf_r+0x2a>
 800a79c:	68a3      	ldr	r3, [r4, #8]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	60a3      	str	r3, [r4, #8]
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	6022      	str	r2, [r4, #0]
 800a7a8:	701e      	strb	r6, [r3, #0]
 800a7aa:	6962      	ldr	r2, [r4, #20]
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d004      	beq.n	800a7bc <__swbuf_r+0x6e>
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	07db      	lsls	r3, r3, #31
 800a7b6:	d5e1      	bpl.n	800a77c <__swbuf_r+0x2e>
 800a7b8:	2e0a      	cmp	r6, #10
 800a7ba:	d1df      	bne.n	800a77c <__swbuf_r+0x2e>
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4628      	mov	r0, r5
 800a7c0:	f002 fe9a 	bl	800d4f8 <_fflush_r>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d0d9      	beq.n	800a77c <__swbuf_r+0x2e>
 800a7c8:	e7d6      	b.n	800a778 <__swbuf_r+0x2a>
	...

0800a7cc <__swsetup_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4b29      	ldr	r3, [pc, #164]	@ (800a874 <__swsetup_r+0xa8>)
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	6818      	ldr	r0, [r3, #0]
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	b118      	cbz	r0, 800a7e0 <__swsetup_r+0x14>
 800a7d8:	6a03      	ldr	r3, [r0, #32]
 800a7da:	b90b      	cbnz	r3, 800a7e0 <__swsetup_r+0x14>
 800a7dc:	f7ff feae 	bl	800a53c <__sinit>
 800a7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e4:	0719      	lsls	r1, r3, #28
 800a7e6:	d422      	bmi.n	800a82e <__swsetup_r+0x62>
 800a7e8:	06da      	lsls	r2, r3, #27
 800a7ea:	d407      	bmi.n	800a7fc <__swsetup_r+0x30>
 800a7ec:	2209      	movs	r2, #9
 800a7ee:	602a      	str	r2, [r5, #0]
 800a7f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7f4:	81a3      	strh	r3, [r4, #12]
 800a7f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7fa:	e033      	b.n	800a864 <__swsetup_r+0x98>
 800a7fc:	0758      	lsls	r0, r3, #29
 800a7fe:	d512      	bpl.n	800a826 <__swsetup_r+0x5a>
 800a800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a802:	b141      	cbz	r1, 800a816 <__swsetup_r+0x4a>
 800a804:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a808:	4299      	cmp	r1, r3
 800a80a:	d002      	beq.n	800a812 <__swsetup_r+0x46>
 800a80c:	4628      	mov	r0, r5
 800a80e:	f000 ff1f 	bl	800b650 <_free_r>
 800a812:	2300      	movs	r3, #0
 800a814:	6363      	str	r3, [r4, #52]	@ 0x34
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	2300      	movs	r3, #0
 800a820:	6063      	str	r3, [r4, #4]
 800a822:	6923      	ldr	r3, [r4, #16]
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	f043 0308 	orr.w	r3, r3, #8
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	6923      	ldr	r3, [r4, #16]
 800a830:	b94b      	cbnz	r3, 800a846 <__swsetup_r+0x7a>
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a83c:	d003      	beq.n	800a846 <__swsetup_r+0x7a>
 800a83e:	4621      	mov	r1, r4
 800a840:	4628      	mov	r0, r5
 800a842:	f002 fea7 	bl	800d594 <__smakebuf_r>
 800a846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a84a:	f013 0201 	ands.w	r2, r3, #1
 800a84e:	d00a      	beq.n	800a866 <__swsetup_r+0x9a>
 800a850:	2200      	movs	r2, #0
 800a852:	60a2      	str	r2, [r4, #8]
 800a854:	6962      	ldr	r2, [r4, #20]
 800a856:	4252      	negs	r2, r2
 800a858:	61a2      	str	r2, [r4, #24]
 800a85a:	6922      	ldr	r2, [r4, #16]
 800a85c:	b942      	cbnz	r2, 800a870 <__swsetup_r+0xa4>
 800a85e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a862:	d1c5      	bne.n	800a7f0 <__swsetup_r+0x24>
 800a864:	bd38      	pop	{r3, r4, r5, pc}
 800a866:	0799      	lsls	r1, r3, #30
 800a868:	bf58      	it	pl
 800a86a:	6962      	ldrpl	r2, [r4, #20]
 800a86c:	60a2      	str	r2, [r4, #8]
 800a86e:	e7f4      	b.n	800a85a <__swsetup_r+0x8e>
 800a870:	2000      	movs	r0, #0
 800a872:	e7f7      	b.n	800a864 <__swsetup_r+0x98>
 800a874:	20000f5c 	.word	0x20000f5c

0800a878 <memmove>:
 800a878:	4288      	cmp	r0, r1
 800a87a:	b510      	push	{r4, lr}
 800a87c:	eb01 0402 	add.w	r4, r1, r2
 800a880:	d902      	bls.n	800a888 <memmove+0x10>
 800a882:	4284      	cmp	r4, r0
 800a884:	4623      	mov	r3, r4
 800a886:	d807      	bhi.n	800a898 <memmove+0x20>
 800a888:	1e43      	subs	r3, r0, #1
 800a88a:	42a1      	cmp	r1, r4
 800a88c:	d008      	beq.n	800a8a0 <memmove+0x28>
 800a88e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a892:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a896:	e7f8      	b.n	800a88a <memmove+0x12>
 800a898:	4402      	add	r2, r0
 800a89a:	4601      	mov	r1, r0
 800a89c:	428a      	cmp	r2, r1
 800a89e:	d100      	bne.n	800a8a2 <memmove+0x2a>
 800a8a0:	bd10      	pop	{r4, pc}
 800a8a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8aa:	e7f7      	b.n	800a89c <memmove+0x24>

0800a8ac <memset>:
 800a8ac:	4402      	add	r2, r0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d100      	bne.n	800a8b6 <memset+0xa>
 800a8b4:	4770      	bx	lr
 800a8b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ba:	e7f9      	b.n	800a8b0 <memset+0x4>

0800a8bc <_localeconv_r>:
 800a8bc:	4800      	ldr	r0, [pc, #0]	@ (800a8c0 <_localeconv_r+0x4>)
 800a8be:	4770      	bx	lr
 800a8c0:	2000109c 	.word	0x2000109c

0800a8c4 <_close_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d06      	ldr	r5, [pc, #24]	@ (800a8e0 <_close_r+0x1c>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	f7f6 ff9a 	bl	8001808 <_close>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d102      	bne.n	800a8de <_close_r+0x1a>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	b103      	cbz	r3, 800a8de <_close_r+0x1a>
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	200019ac 	.word	0x200019ac

0800a8e4 <_lseek_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	@ (800a904 <_lseek_r+0x20>)
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	4608      	mov	r0, r1
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	602a      	str	r2, [r5, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f7f6 ffaf 	bl	8001856 <_lseek>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_lseek_r+0x1e>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_lseek_r+0x1e>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	200019ac 	.word	0x200019ac

0800a908 <_read_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d07      	ldr	r5, [pc, #28]	@ (800a928 <_read_r+0x20>)
 800a90c:	4604      	mov	r4, r0
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	2200      	movs	r2, #0
 800a914:	602a      	str	r2, [r5, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f7f6 ff3d 	bl	8001796 <_read>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_read_r+0x1e>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	b103      	cbz	r3, 800a926 <_read_r+0x1e>
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	200019ac 	.word	0x200019ac

0800a92c <_write_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4d07      	ldr	r5, [pc, #28]	@ (800a94c <_write_r+0x20>)
 800a930:	4604      	mov	r4, r0
 800a932:	4608      	mov	r0, r1
 800a934:	4611      	mov	r1, r2
 800a936:	2200      	movs	r2, #0
 800a938:	602a      	str	r2, [r5, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	f7f6 ff48 	bl	80017d0 <_write>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d102      	bne.n	800a94a <_write_r+0x1e>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b103      	cbz	r3, 800a94a <_write_r+0x1e>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	200019ac 	.word	0x200019ac

0800a950 <__errno>:
 800a950:	4b01      	ldr	r3, [pc, #4]	@ (800a958 <__errno+0x8>)
 800a952:	6818      	ldr	r0, [r3, #0]
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	20000f5c 	.word	0x20000f5c

0800a95c <__libc_init_array>:
 800a95c:	b570      	push	{r4, r5, r6, lr}
 800a95e:	4d0d      	ldr	r5, [pc, #52]	@ (800a994 <__libc_init_array+0x38>)
 800a960:	4c0d      	ldr	r4, [pc, #52]	@ (800a998 <__libc_init_array+0x3c>)
 800a962:	1b64      	subs	r4, r4, r5
 800a964:	10a4      	asrs	r4, r4, #2
 800a966:	2600      	movs	r6, #0
 800a968:	42a6      	cmp	r6, r4
 800a96a:	d109      	bne.n	800a980 <__libc_init_array+0x24>
 800a96c:	4d0b      	ldr	r5, [pc, #44]	@ (800a99c <__libc_init_array+0x40>)
 800a96e:	4c0c      	ldr	r4, [pc, #48]	@ (800a9a0 <__libc_init_array+0x44>)
 800a970:	f003 fc66 	bl	800e240 <_init>
 800a974:	1b64      	subs	r4, r4, r5
 800a976:	10a4      	asrs	r4, r4, #2
 800a978:	2600      	movs	r6, #0
 800a97a:	42a6      	cmp	r6, r4
 800a97c:	d105      	bne.n	800a98a <__libc_init_array+0x2e>
 800a97e:	bd70      	pop	{r4, r5, r6, pc}
 800a980:	f855 3b04 	ldr.w	r3, [r5], #4
 800a984:	4798      	blx	r3
 800a986:	3601      	adds	r6, #1
 800a988:	e7ee      	b.n	800a968 <__libc_init_array+0xc>
 800a98a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a98e:	4798      	blx	r3
 800a990:	3601      	adds	r6, #1
 800a992:	e7f2      	b.n	800a97a <__libc_init_array+0x1e>
 800a994:	0800ebf8 	.word	0x0800ebf8
 800a998:	0800ebf8 	.word	0x0800ebf8
 800a99c:	0800ebf8 	.word	0x0800ebf8
 800a9a0:	0800ebfc 	.word	0x0800ebfc

0800a9a4 <__retarget_lock_init_recursive>:
 800a9a4:	4770      	bx	lr

0800a9a6 <__retarget_lock_acquire_recursive>:
 800a9a6:	4770      	bx	lr

0800a9a8 <__retarget_lock_release_recursive>:
 800a9a8:	4770      	bx	lr
	...

0800a9ac <nanf>:
 800a9ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a9b4 <nanf+0x8>
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	7fc00000 	.word	0x7fc00000

0800a9b8 <quorem>:
 800a9b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9bc:	6903      	ldr	r3, [r0, #16]
 800a9be:	690c      	ldr	r4, [r1, #16]
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	4607      	mov	r7, r0
 800a9c4:	db7e      	blt.n	800aac4 <quorem+0x10c>
 800a9c6:	3c01      	subs	r4, #1
 800a9c8:	f101 0814 	add.w	r8, r1, #20
 800a9cc:	00a3      	lsls	r3, r4, #2
 800a9ce:	f100 0514 	add.w	r5, r0, #20
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9d8:	9301      	str	r3, [sp, #4]
 800a9da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a9de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9ee:	d32e      	bcc.n	800aa4e <quorem+0x96>
 800a9f0:	f04f 0a00 	mov.w	sl, #0
 800a9f4:	46c4      	mov	ip, r8
 800a9f6:	46ae      	mov	lr, r5
 800a9f8:	46d3      	mov	fp, sl
 800a9fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a9fe:	b298      	uxth	r0, r3
 800aa00:	fb06 a000 	mla	r0, r6, r0, sl
 800aa04:	0c02      	lsrs	r2, r0, #16
 800aa06:	0c1b      	lsrs	r3, r3, #16
 800aa08:	fb06 2303 	mla	r3, r6, r3, r2
 800aa0c:	f8de 2000 	ldr.w	r2, [lr]
 800aa10:	b280      	uxth	r0, r0
 800aa12:	b292      	uxth	r2, r2
 800aa14:	1a12      	subs	r2, r2, r0
 800aa16:	445a      	add	r2, fp
 800aa18:	f8de 0000 	ldr.w	r0, [lr]
 800aa1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa2a:	b292      	uxth	r2, r2
 800aa2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa30:	45e1      	cmp	r9, ip
 800aa32:	f84e 2b04 	str.w	r2, [lr], #4
 800aa36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa3a:	d2de      	bcs.n	800a9fa <quorem+0x42>
 800aa3c:	9b00      	ldr	r3, [sp, #0]
 800aa3e:	58eb      	ldr	r3, [r5, r3]
 800aa40:	b92b      	cbnz	r3, 800aa4e <quorem+0x96>
 800aa42:	9b01      	ldr	r3, [sp, #4]
 800aa44:	3b04      	subs	r3, #4
 800aa46:	429d      	cmp	r5, r3
 800aa48:	461a      	mov	r2, r3
 800aa4a:	d32f      	bcc.n	800aaac <quorem+0xf4>
 800aa4c:	613c      	str	r4, [r7, #16]
 800aa4e:	4638      	mov	r0, r7
 800aa50:	f001 f9c2 	bl	800bdd8 <__mcmp>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	db25      	blt.n	800aaa4 <quorem+0xec>
 800aa58:	4629      	mov	r1, r5
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa60:	f8d1 c000 	ldr.w	ip, [r1]
 800aa64:	fa1f fe82 	uxth.w	lr, r2
 800aa68:	fa1f f38c 	uxth.w	r3, ip
 800aa6c:	eba3 030e 	sub.w	r3, r3, lr
 800aa70:	4403      	add	r3, r0
 800aa72:	0c12      	lsrs	r2, r2, #16
 800aa74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aa78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa82:	45c1      	cmp	r9, r8
 800aa84:	f841 3b04 	str.w	r3, [r1], #4
 800aa88:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aa8c:	d2e6      	bcs.n	800aa5c <quorem+0xa4>
 800aa8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa96:	b922      	cbnz	r2, 800aaa2 <quorem+0xea>
 800aa98:	3b04      	subs	r3, #4
 800aa9a:	429d      	cmp	r5, r3
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	d30b      	bcc.n	800aab8 <quorem+0x100>
 800aaa0:	613c      	str	r4, [r7, #16]
 800aaa2:	3601      	adds	r6, #1
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	b003      	add	sp, #12
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	6812      	ldr	r2, [r2, #0]
 800aaae:	3b04      	subs	r3, #4
 800aab0:	2a00      	cmp	r2, #0
 800aab2:	d1cb      	bne.n	800aa4c <quorem+0x94>
 800aab4:	3c01      	subs	r4, #1
 800aab6:	e7c6      	b.n	800aa46 <quorem+0x8e>
 800aab8:	6812      	ldr	r2, [r2, #0]
 800aaba:	3b04      	subs	r3, #4
 800aabc:	2a00      	cmp	r2, #0
 800aabe:	d1ef      	bne.n	800aaa0 <quorem+0xe8>
 800aac0:	3c01      	subs	r4, #1
 800aac2:	e7ea      	b.n	800aa9a <quorem+0xe2>
 800aac4:	2000      	movs	r0, #0
 800aac6:	e7ee      	b.n	800aaa6 <quorem+0xee>

0800aac8 <_dtoa_r>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	69c7      	ldr	r7, [r0, #28]
 800aace:	b099      	sub	sp, #100	@ 0x64
 800aad0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aad4:	ec55 4b10 	vmov	r4, r5, d0
 800aad8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800aada:	9109      	str	r1, [sp, #36]	@ 0x24
 800aadc:	4683      	mov	fp, r0
 800aade:	920e      	str	r2, [sp, #56]	@ 0x38
 800aae0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aae2:	b97f      	cbnz	r7, 800ab04 <_dtoa_r+0x3c>
 800aae4:	2010      	movs	r0, #16
 800aae6:	f000 fdfd 	bl	800b6e4 <malloc>
 800aaea:	4602      	mov	r2, r0
 800aaec:	f8cb 001c 	str.w	r0, [fp, #28]
 800aaf0:	b920      	cbnz	r0, 800aafc <_dtoa_r+0x34>
 800aaf2:	4ba7      	ldr	r3, [pc, #668]	@ (800ad90 <_dtoa_r+0x2c8>)
 800aaf4:	21ef      	movs	r1, #239	@ 0xef
 800aaf6:	48a7      	ldr	r0, [pc, #668]	@ (800ad94 <_dtoa_r+0x2cc>)
 800aaf8:	f002 fde2 	bl	800d6c0 <__assert_func>
 800aafc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab00:	6007      	str	r7, [r0, #0]
 800ab02:	60c7      	str	r7, [r0, #12]
 800ab04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab08:	6819      	ldr	r1, [r3, #0]
 800ab0a:	b159      	cbz	r1, 800ab24 <_dtoa_r+0x5c>
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	604a      	str	r2, [r1, #4]
 800ab10:	2301      	movs	r3, #1
 800ab12:	4093      	lsls	r3, r2
 800ab14:	608b      	str	r3, [r1, #8]
 800ab16:	4658      	mov	r0, fp
 800ab18:	f000 feda 	bl	800b8d0 <_Bfree>
 800ab1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab20:	2200      	movs	r2, #0
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	1e2b      	subs	r3, r5, #0
 800ab26:	bfb9      	ittee	lt
 800ab28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab2c:	9303      	strlt	r3, [sp, #12]
 800ab2e:	2300      	movge	r3, #0
 800ab30:	6033      	strge	r3, [r6, #0]
 800ab32:	9f03      	ldr	r7, [sp, #12]
 800ab34:	4b98      	ldr	r3, [pc, #608]	@ (800ad98 <_dtoa_r+0x2d0>)
 800ab36:	bfbc      	itt	lt
 800ab38:	2201      	movlt	r2, #1
 800ab3a:	6032      	strlt	r2, [r6, #0]
 800ab3c:	43bb      	bics	r3, r7
 800ab3e:	d112      	bne.n	800ab66 <_dtoa_r+0x9e>
 800ab40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ab42:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab4c:	4323      	orrs	r3, r4
 800ab4e:	f000 854d 	beq.w	800b5ec <_dtoa_r+0xb24>
 800ab52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800adac <_dtoa_r+0x2e4>
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 854f 	beq.w	800b5fc <_dtoa_r+0xb34>
 800ab5e:	f10a 0303 	add.w	r3, sl, #3
 800ab62:	f000 bd49 	b.w	800b5f8 <_dtoa_r+0xb30>
 800ab66:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	ec51 0b17 	vmov	r0, r1, d7
 800ab70:	2300      	movs	r3, #0
 800ab72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ab76:	f7f5 ffcf 	bl	8000b18 <__aeabi_dcmpeq>
 800ab7a:	4680      	mov	r8, r0
 800ab7c:	b158      	cbz	r0, 800ab96 <_dtoa_r+0xce>
 800ab7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ab80:	2301      	movs	r3, #1
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab86:	b113      	cbz	r3, 800ab8e <_dtoa_r+0xc6>
 800ab88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ab8a:	4b84      	ldr	r3, [pc, #528]	@ (800ad9c <_dtoa_r+0x2d4>)
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800adb0 <_dtoa_r+0x2e8>
 800ab92:	f000 bd33 	b.w	800b5fc <_dtoa_r+0xb34>
 800ab96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ab9a:	aa16      	add	r2, sp, #88	@ 0x58
 800ab9c:	a917      	add	r1, sp, #92	@ 0x5c
 800ab9e:	4658      	mov	r0, fp
 800aba0:	f001 fa3a 	bl	800c018 <__d2b>
 800aba4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aba8:	4681      	mov	r9, r0
 800abaa:	2e00      	cmp	r6, #0
 800abac:	d077      	beq.n	800ac9e <_dtoa_r+0x1d6>
 800abae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800abb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800abc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800abc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800abc8:	4619      	mov	r1, r3
 800abca:	2200      	movs	r2, #0
 800abcc:	4b74      	ldr	r3, [pc, #464]	@ (800ada0 <_dtoa_r+0x2d8>)
 800abce:	f7f5 fb83 	bl	80002d8 <__aeabi_dsub>
 800abd2:	a369      	add	r3, pc, #420	@ (adr r3, 800ad78 <_dtoa_r+0x2b0>)
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	f7f5 fd36 	bl	8000648 <__aeabi_dmul>
 800abdc:	a368      	add	r3, pc, #416	@ (adr r3, 800ad80 <_dtoa_r+0x2b8>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	f7f5 fb7b 	bl	80002dc <__adddf3>
 800abe6:	4604      	mov	r4, r0
 800abe8:	4630      	mov	r0, r6
 800abea:	460d      	mov	r5, r1
 800abec:	f7f5 fcc2 	bl	8000574 <__aeabi_i2d>
 800abf0:	a365      	add	r3, pc, #404	@ (adr r3, 800ad88 <_dtoa_r+0x2c0>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f7f5 fd27 	bl	8000648 <__aeabi_dmul>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4620      	mov	r0, r4
 800ac00:	4629      	mov	r1, r5
 800ac02:	f7f5 fb6b 	bl	80002dc <__adddf3>
 800ac06:	4604      	mov	r4, r0
 800ac08:	460d      	mov	r5, r1
 800ac0a:	f7f5 ffcd 	bl	8000ba8 <__aeabi_d2iz>
 800ac0e:	2200      	movs	r2, #0
 800ac10:	4607      	mov	r7, r0
 800ac12:	2300      	movs	r3, #0
 800ac14:	4620      	mov	r0, r4
 800ac16:	4629      	mov	r1, r5
 800ac18:	f7f5 ff88 	bl	8000b2c <__aeabi_dcmplt>
 800ac1c:	b140      	cbz	r0, 800ac30 <_dtoa_r+0x168>
 800ac1e:	4638      	mov	r0, r7
 800ac20:	f7f5 fca8 	bl	8000574 <__aeabi_i2d>
 800ac24:	4622      	mov	r2, r4
 800ac26:	462b      	mov	r3, r5
 800ac28:	f7f5 ff76 	bl	8000b18 <__aeabi_dcmpeq>
 800ac2c:	b900      	cbnz	r0, 800ac30 <_dtoa_r+0x168>
 800ac2e:	3f01      	subs	r7, #1
 800ac30:	2f16      	cmp	r7, #22
 800ac32:	d851      	bhi.n	800acd8 <_dtoa_r+0x210>
 800ac34:	4b5b      	ldr	r3, [pc, #364]	@ (800ada4 <_dtoa_r+0x2dc>)
 800ac36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac42:	f7f5 ff73 	bl	8000b2c <__aeabi_dcmplt>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d048      	beq.n	800acdc <_dtoa_r+0x214>
 800ac4a:	3f01      	subs	r7, #1
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ac50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac52:	1b9b      	subs	r3, r3, r6
 800ac54:	1e5a      	subs	r2, r3, #1
 800ac56:	bf44      	itt	mi
 800ac58:	f1c3 0801 	rsbmi	r8, r3, #1
 800ac5c:	2300      	movmi	r3, #0
 800ac5e:	9208      	str	r2, [sp, #32]
 800ac60:	bf54      	ite	pl
 800ac62:	f04f 0800 	movpl.w	r8, #0
 800ac66:	9308      	strmi	r3, [sp, #32]
 800ac68:	2f00      	cmp	r7, #0
 800ac6a:	db39      	blt.n	800ace0 <_dtoa_r+0x218>
 800ac6c:	9b08      	ldr	r3, [sp, #32]
 800ac6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ac70:	443b      	add	r3, r7
 800ac72:	9308      	str	r3, [sp, #32]
 800ac74:	2300      	movs	r3, #0
 800ac76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac7a:	2b09      	cmp	r3, #9
 800ac7c:	d864      	bhi.n	800ad48 <_dtoa_r+0x280>
 800ac7e:	2b05      	cmp	r3, #5
 800ac80:	bfc4      	itt	gt
 800ac82:	3b04      	subgt	r3, #4
 800ac84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ac86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac88:	f1a3 0302 	sub.w	r3, r3, #2
 800ac8c:	bfcc      	ite	gt
 800ac8e:	2400      	movgt	r4, #0
 800ac90:	2401      	movle	r4, #1
 800ac92:	2b03      	cmp	r3, #3
 800ac94:	d863      	bhi.n	800ad5e <_dtoa_r+0x296>
 800ac96:	e8df f003 	tbb	[pc, r3]
 800ac9a:	372a      	.short	0x372a
 800ac9c:	5535      	.short	0x5535
 800ac9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aca2:	441e      	add	r6, r3
 800aca4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aca8:	2b20      	cmp	r3, #32
 800acaa:	bfc1      	itttt	gt
 800acac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800acb0:	409f      	lslgt	r7, r3
 800acb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800acb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800acba:	bfd6      	itet	le
 800acbc:	f1c3 0320 	rsble	r3, r3, #32
 800acc0:	ea47 0003 	orrgt.w	r0, r7, r3
 800acc4:	fa04 f003 	lslle.w	r0, r4, r3
 800acc8:	f7f5 fc44 	bl	8000554 <__aeabi_ui2d>
 800accc:	2201      	movs	r2, #1
 800acce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800acd2:	3e01      	subs	r6, #1
 800acd4:	9214      	str	r2, [sp, #80]	@ 0x50
 800acd6:	e777      	b.n	800abc8 <_dtoa_r+0x100>
 800acd8:	2301      	movs	r3, #1
 800acda:	e7b8      	b.n	800ac4e <_dtoa_r+0x186>
 800acdc:	9012      	str	r0, [sp, #72]	@ 0x48
 800acde:	e7b7      	b.n	800ac50 <_dtoa_r+0x188>
 800ace0:	427b      	negs	r3, r7
 800ace2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ace4:	2300      	movs	r3, #0
 800ace6:	eba8 0807 	sub.w	r8, r8, r7
 800acea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800acec:	e7c4      	b.n	800ac78 <_dtoa_r+0x1b0>
 800acee:	2300      	movs	r3, #0
 800acf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dc35      	bgt.n	800ad64 <_dtoa_r+0x29c>
 800acf8:	2301      	movs	r3, #1
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	9307      	str	r3, [sp, #28]
 800acfe:	461a      	mov	r2, r3
 800ad00:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad02:	e00b      	b.n	800ad1c <_dtoa_r+0x254>
 800ad04:	2301      	movs	r3, #1
 800ad06:	e7f3      	b.n	800acf0 <_dtoa_r+0x228>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad0e:	18fb      	adds	r3, r7, r3
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	3301      	adds	r3, #1
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	9307      	str	r3, [sp, #28]
 800ad18:	bfb8      	it	lt
 800ad1a:	2301      	movlt	r3, #1
 800ad1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ad20:	2100      	movs	r1, #0
 800ad22:	2204      	movs	r2, #4
 800ad24:	f102 0514 	add.w	r5, r2, #20
 800ad28:	429d      	cmp	r5, r3
 800ad2a:	d91f      	bls.n	800ad6c <_dtoa_r+0x2a4>
 800ad2c:	6041      	str	r1, [r0, #4]
 800ad2e:	4658      	mov	r0, fp
 800ad30:	f000 fd8e 	bl	800b850 <_Balloc>
 800ad34:	4682      	mov	sl, r0
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d13c      	bne.n	800adb4 <_dtoa_r+0x2ec>
 800ad3a:	4b1b      	ldr	r3, [pc, #108]	@ (800ada8 <_dtoa_r+0x2e0>)
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad42:	e6d8      	b.n	800aaf6 <_dtoa_r+0x2e>
 800ad44:	2301      	movs	r3, #1
 800ad46:	e7e0      	b.n	800ad0a <_dtoa_r+0x242>
 800ad48:	2401      	movs	r4, #1
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ad50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	9307      	str	r3, [sp, #28]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	2312      	movs	r3, #18
 800ad5c:	e7d0      	b.n	800ad00 <_dtoa_r+0x238>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad62:	e7f5      	b.n	800ad50 <_dtoa_r+0x288>
 800ad64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	9307      	str	r3, [sp, #28]
 800ad6a:	e7d7      	b.n	800ad1c <_dtoa_r+0x254>
 800ad6c:	3101      	adds	r1, #1
 800ad6e:	0052      	lsls	r2, r2, #1
 800ad70:	e7d8      	b.n	800ad24 <_dtoa_r+0x25c>
 800ad72:	bf00      	nop
 800ad74:	f3af 8000 	nop.w
 800ad78:	636f4361 	.word	0x636f4361
 800ad7c:	3fd287a7 	.word	0x3fd287a7
 800ad80:	8b60c8b3 	.word	0x8b60c8b3
 800ad84:	3fc68a28 	.word	0x3fc68a28
 800ad88:	509f79fb 	.word	0x509f79fb
 800ad8c:	3fd34413 	.word	0x3fd34413
 800ad90:	0800e7ca 	.word	0x0800e7ca
 800ad94:	0800e7e1 	.word	0x0800e7e1
 800ad98:	7ff00000 	.word	0x7ff00000
 800ad9c:	0800e795 	.word	0x0800e795
 800ada0:	3ff80000 	.word	0x3ff80000
 800ada4:	0800e8d8 	.word	0x0800e8d8
 800ada8:	0800e839 	.word	0x0800e839
 800adac:	0800e7c6 	.word	0x0800e7c6
 800adb0:	0800e794 	.word	0x0800e794
 800adb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800adb8:	6018      	str	r0, [r3, #0]
 800adba:	9b07      	ldr	r3, [sp, #28]
 800adbc:	2b0e      	cmp	r3, #14
 800adbe:	f200 80a4 	bhi.w	800af0a <_dtoa_r+0x442>
 800adc2:	2c00      	cmp	r4, #0
 800adc4:	f000 80a1 	beq.w	800af0a <_dtoa_r+0x442>
 800adc8:	2f00      	cmp	r7, #0
 800adca:	dd33      	ble.n	800ae34 <_dtoa_r+0x36c>
 800adcc:	4bad      	ldr	r3, [pc, #692]	@ (800b084 <_dtoa_r+0x5bc>)
 800adce:	f007 020f 	and.w	r2, r7, #15
 800add2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800add6:	ed93 7b00 	vldr	d7, [r3]
 800adda:	05f8      	lsls	r0, r7, #23
 800addc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ade0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ade4:	d516      	bpl.n	800ae14 <_dtoa_r+0x34c>
 800ade6:	4ba8      	ldr	r3, [pc, #672]	@ (800b088 <_dtoa_r+0x5c0>)
 800ade8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800adf0:	f7f5 fd54 	bl	800089c <__aeabi_ddiv>
 800adf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adf8:	f004 040f 	and.w	r4, r4, #15
 800adfc:	2603      	movs	r6, #3
 800adfe:	4da2      	ldr	r5, [pc, #648]	@ (800b088 <_dtoa_r+0x5c0>)
 800ae00:	b954      	cbnz	r4, 800ae18 <_dtoa_r+0x350>
 800ae02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae0a:	f7f5 fd47 	bl	800089c <__aeabi_ddiv>
 800ae0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae12:	e028      	b.n	800ae66 <_dtoa_r+0x39e>
 800ae14:	2602      	movs	r6, #2
 800ae16:	e7f2      	b.n	800adfe <_dtoa_r+0x336>
 800ae18:	07e1      	lsls	r1, r4, #31
 800ae1a:	d508      	bpl.n	800ae2e <_dtoa_r+0x366>
 800ae1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae24:	f7f5 fc10 	bl	8000648 <__aeabi_dmul>
 800ae28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae2c:	3601      	adds	r6, #1
 800ae2e:	1064      	asrs	r4, r4, #1
 800ae30:	3508      	adds	r5, #8
 800ae32:	e7e5      	b.n	800ae00 <_dtoa_r+0x338>
 800ae34:	f000 80d2 	beq.w	800afdc <_dtoa_r+0x514>
 800ae38:	427c      	negs	r4, r7
 800ae3a:	4b92      	ldr	r3, [pc, #584]	@ (800b084 <_dtoa_r+0x5bc>)
 800ae3c:	4d92      	ldr	r5, [pc, #584]	@ (800b088 <_dtoa_r+0x5c0>)
 800ae3e:	f004 020f 	and.w	r2, r4, #15
 800ae42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae4e:	f7f5 fbfb 	bl	8000648 <__aeabi_dmul>
 800ae52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae56:	1124      	asrs	r4, r4, #4
 800ae58:	2300      	movs	r3, #0
 800ae5a:	2602      	movs	r6, #2
 800ae5c:	2c00      	cmp	r4, #0
 800ae5e:	f040 80b2 	bne.w	800afc6 <_dtoa_r+0x4fe>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1d3      	bne.n	800ae0e <_dtoa_r+0x346>
 800ae66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ae68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 80b7 	beq.w	800afe0 <_dtoa_r+0x518>
 800ae72:	4b86      	ldr	r3, [pc, #536]	@ (800b08c <_dtoa_r+0x5c4>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	4620      	mov	r0, r4
 800ae78:	4629      	mov	r1, r5
 800ae7a:	f7f5 fe57 	bl	8000b2c <__aeabi_dcmplt>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	f000 80ae 	beq.w	800afe0 <_dtoa_r+0x518>
 800ae84:	9b07      	ldr	r3, [sp, #28]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f000 80aa 	beq.w	800afe0 <_dtoa_r+0x518>
 800ae8c:	9b00      	ldr	r3, [sp, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	dd37      	ble.n	800af02 <_dtoa_r+0x43a>
 800ae92:	1e7b      	subs	r3, r7, #1
 800ae94:	9304      	str	r3, [sp, #16]
 800ae96:	4620      	mov	r0, r4
 800ae98:	4b7d      	ldr	r3, [pc, #500]	@ (800b090 <_dtoa_r+0x5c8>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	f7f5 fbd3 	bl	8000648 <__aeabi_dmul>
 800aea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aea6:	9c00      	ldr	r4, [sp, #0]
 800aea8:	3601      	adds	r6, #1
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f7f5 fb62 	bl	8000574 <__aeabi_i2d>
 800aeb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeb4:	f7f5 fbc8 	bl	8000648 <__aeabi_dmul>
 800aeb8:	4b76      	ldr	r3, [pc, #472]	@ (800b094 <_dtoa_r+0x5cc>)
 800aeba:	2200      	movs	r2, #0
 800aebc:	f7f5 fa0e 	bl	80002dc <__adddf3>
 800aec0:	4605      	mov	r5, r0
 800aec2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aec6:	2c00      	cmp	r4, #0
 800aec8:	f040 808d 	bne.w	800afe6 <_dtoa_r+0x51e>
 800aecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aed0:	4b71      	ldr	r3, [pc, #452]	@ (800b098 <_dtoa_r+0x5d0>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	f7f5 fa00 	bl	80002d8 <__aeabi_dsub>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aee0:	462a      	mov	r2, r5
 800aee2:	4633      	mov	r3, r6
 800aee4:	f7f5 fe40 	bl	8000b68 <__aeabi_dcmpgt>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	f040 828b 	bne.w	800b404 <_dtoa_r+0x93c>
 800aeee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aef2:	462a      	mov	r2, r5
 800aef4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aef8:	f7f5 fe18 	bl	8000b2c <__aeabi_dcmplt>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f040 8128 	bne.w	800b152 <_dtoa_r+0x68a>
 800af02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800af06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800af0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f2c0 815a 	blt.w	800b1c6 <_dtoa_r+0x6fe>
 800af12:	2f0e      	cmp	r7, #14
 800af14:	f300 8157 	bgt.w	800b1c6 <_dtoa_r+0x6fe>
 800af18:	4b5a      	ldr	r3, [pc, #360]	@ (800b084 <_dtoa_r+0x5bc>)
 800af1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af1e:	ed93 7b00 	vldr	d7, [r3]
 800af22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af24:	2b00      	cmp	r3, #0
 800af26:	ed8d 7b00 	vstr	d7, [sp]
 800af2a:	da03      	bge.n	800af34 <_dtoa_r+0x46c>
 800af2c:	9b07      	ldr	r3, [sp, #28]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f340 8101 	ble.w	800b136 <_dtoa_r+0x66e>
 800af34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800af38:	4656      	mov	r6, sl
 800af3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af3e:	4620      	mov	r0, r4
 800af40:	4629      	mov	r1, r5
 800af42:	f7f5 fcab 	bl	800089c <__aeabi_ddiv>
 800af46:	f7f5 fe2f 	bl	8000ba8 <__aeabi_d2iz>
 800af4a:	4680      	mov	r8, r0
 800af4c:	f7f5 fb12 	bl	8000574 <__aeabi_i2d>
 800af50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af54:	f7f5 fb78 	bl	8000648 <__aeabi_dmul>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	4620      	mov	r0, r4
 800af5e:	4629      	mov	r1, r5
 800af60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800af64:	f7f5 f9b8 	bl	80002d8 <__aeabi_dsub>
 800af68:	f806 4b01 	strb.w	r4, [r6], #1
 800af6c:	9d07      	ldr	r5, [sp, #28]
 800af6e:	eba6 040a 	sub.w	r4, r6, sl
 800af72:	42a5      	cmp	r5, r4
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	f040 8117 	bne.w	800b1aa <_dtoa_r+0x6e2>
 800af7c:	f7f5 f9ae 	bl	80002dc <__adddf3>
 800af80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af84:	4604      	mov	r4, r0
 800af86:	460d      	mov	r5, r1
 800af88:	f7f5 fdee 	bl	8000b68 <__aeabi_dcmpgt>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	f040 80f9 	bne.w	800b184 <_dtoa_r+0x6bc>
 800af92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af96:	4620      	mov	r0, r4
 800af98:	4629      	mov	r1, r5
 800af9a:	f7f5 fdbd 	bl	8000b18 <__aeabi_dcmpeq>
 800af9e:	b118      	cbz	r0, 800afa8 <_dtoa_r+0x4e0>
 800afa0:	f018 0f01 	tst.w	r8, #1
 800afa4:	f040 80ee 	bne.w	800b184 <_dtoa_r+0x6bc>
 800afa8:	4649      	mov	r1, r9
 800afaa:	4658      	mov	r0, fp
 800afac:	f000 fc90 	bl	800b8d0 <_Bfree>
 800afb0:	2300      	movs	r3, #0
 800afb2:	7033      	strb	r3, [r6, #0]
 800afb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800afb6:	3701      	adds	r7, #1
 800afb8:	601f      	str	r7, [r3, #0]
 800afba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f000 831d 	beq.w	800b5fc <_dtoa_r+0xb34>
 800afc2:	601e      	str	r6, [r3, #0]
 800afc4:	e31a      	b.n	800b5fc <_dtoa_r+0xb34>
 800afc6:	07e2      	lsls	r2, r4, #31
 800afc8:	d505      	bpl.n	800afd6 <_dtoa_r+0x50e>
 800afca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afce:	f7f5 fb3b 	bl	8000648 <__aeabi_dmul>
 800afd2:	3601      	adds	r6, #1
 800afd4:	2301      	movs	r3, #1
 800afd6:	1064      	asrs	r4, r4, #1
 800afd8:	3508      	adds	r5, #8
 800afda:	e73f      	b.n	800ae5c <_dtoa_r+0x394>
 800afdc:	2602      	movs	r6, #2
 800afde:	e742      	b.n	800ae66 <_dtoa_r+0x39e>
 800afe0:	9c07      	ldr	r4, [sp, #28]
 800afe2:	9704      	str	r7, [sp, #16]
 800afe4:	e761      	b.n	800aeaa <_dtoa_r+0x3e2>
 800afe6:	4b27      	ldr	r3, [pc, #156]	@ (800b084 <_dtoa_r+0x5bc>)
 800afe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aff2:	4454      	add	r4, sl
 800aff4:	2900      	cmp	r1, #0
 800aff6:	d053      	beq.n	800b0a0 <_dtoa_r+0x5d8>
 800aff8:	4928      	ldr	r1, [pc, #160]	@ (800b09c <_dtoa_r+0x5d4>)
 800affa:	2000      	movs	r0, #0
 800affc:	f7f5 fc4e 	bl	800089c <__aeabi_ddiv>
 800b000:	4633      	mov	r3, r6
 800b002:	462a      	mov	r2, r5
 800b004:	f7f5 f968 	bl	80002d8 <__aeabi_dsub>
 800b008:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b00c:	4656      	mov	r6, sl
 800b00e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b012:	f7f5 fdc9 	bl	8000ba8 <__aeabi_d2iz>
 800b016:	4605      	mov	r5, r0
 800b018:	f7f5 faac 	bl	8000574 <__aeabi_i2d>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b024:	f7f5 f958 	bl	80002d8 <__aeabi_dsub>
 800b028:	3530      	adds	r5, #48	@ 0x30
 800b02a:	4602      	mov	r2, r0
 800b02c:	460b      	mov	r3, r1
 800b02e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b032:	f806 5b01 	strb.w	r5, [r6], #1
 800b036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b03a:	f7f5 fd77 	bl	8000b2c <__aeabi_dcmplt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d171      	bne.n	800b126 <_dtoa_r+0x65e>
 800b042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b046:	4911      	ldr	r1, [pc, #68]	@ (800b08c <_dtoa_r+0x5c4>)
 800b048:	2000      	movs	r0, #0
 800b04a:	f7f5 f945 	bl	80002d8 <__aeabi_dsub>
 800b04e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b052:	f7f5 fd6b 	bl	8000b2c <__aeabi_dcmplt>
 800b056:	2800      	cmp	r0, #0
 800b058:	f040 8095 	bne.w	800b186 <_dtoa_r+0x6be>
 800b05c:	42a6      	cmp	r6, r4
 800b05e:	f43f af50 	beq.w	800af02 <_dtoa_r+0x43a>
 800b062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b066:	4b0a      	ldr	r3, [pc, #40]	@ (800b090 <_dtoa_r+0x5c8>)
 800b068:	2200      	movs	r2, #0
 800b06a:	f7f5 faed 	bl	8000648 <__aeabi_dmul>
 800b06e:	4b08      	ldr	r3, [pc, #32]	@ (800b090 <_dtoa_r+0x5c8>)
 800b070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b074:	2200      	movs	r2, #0
 800b076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b07a:	f7f5 fae5 	bl	8000648 <__aeabi_dmul>
 800b07e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b082:	e7c4      	b.n	800b00e <_dtoa_r+0x546>
 800b084:	0800e8d8 	.word	0x0800e8d8
 800b088:	0800e8b0 	.word	0x0800e8b0
 800b08c:	3ff00000 	.word	0x3ff00000
 800b090:	40240000 	.word	0x40240000
 800b094:	401c0000 	.word	0x401c0000
 800b098:	40140000 	.word	0x40140000
 800b09c:	3fe00000 	.word	0x3fe00000
 800b0a0:	4631      	mov	r1, r6
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f7f5 fad0 	bl	8000648 <__aeabi_dmul>
 800b0a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b0ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800b0ae:	4656      	mov	r6, sl
 800b0b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0b4:	f7f5 fd78 	bl	8000ba8 <__aeabi_d2iz>
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	f7f5 fa5b 	bl	8000574 <__aeabi_i2d>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0c6:	f7f5 f907 	bl	80002d8 <__aeabi_dsub>
 800b0ca:	3530      	adds	r5, #48	@ 0x30
 800b0cc:	f806 5b01 	strb.w	r5, [r6], #1
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	42a6      	cmp	r6, r4
 800b0d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0da:	f04f 0200 	mov.w	r2, #0
 800b0de:	d124      	bne.n	800b12a <_dtoa_r+0x662>
 800b0e0:	4bac      	ldr	r3, [pc, #688]	@ (800b394 <_dtoa_r+0x8cc>)
 800b0e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b0e6:	f7f5 f8f9 	bl	80002dc <__adddf3>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0f2:	f7f5 fd39 	bl	8000b68 <__aeabi_dcmpgt>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d145      	bne.n	800b186 <_dtoa_r+0x6be>
 800b0fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b0fe:	49a5      	ldr	r1, [pc, #660]	@ (800b394 <_dtoa_r+0x8cc>)
 800b100:	2000      	movs	r0, #0
 800b102:	f7f5 f8e9 	bl	80002d8 <__aeabi_dsub>
 800b106:	4602      	mov	r2, r0
 800b108:	460b      	mov	r3, r1
 800b10a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b10e:	f7f5 fd0d 	bl	8000b2c <__aeabi_dcmplt>
 800b112:	2800      	cmp	r0, #0
 800b114:	f43f aef5 	beq.w	800af02 <_dtoa_r+0x43a>
 800b118:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b11a:	1e73      	subs	r3, r6, #1
 800b11c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b11e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b122:	2b30      	cmp	r3, #48	@ 0x30
 800b124:	d0f8      	beq.n	800b118 <_dtoa_r+0x650>
 800b126:	9f04      	ldr	r7, [sp, #16]
 800b128:	e73e      	b.n	800afa8 <_dtoa_r+0x4e0>
 800b12a:	4b9b      	ldr	r3, [pc, #620]	@ (800b398 <_dtoa_r+0x8d0>)
 800b12c:	f7f5 fa8c 	bl	8000648 <__aeabi_dmul>
 800b130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b134:	e7bc      	b.n	800b0b0 <_dtoa_r+0x5e8>
 800b136:	d10c      	bne.n	800b152 <_dtoa_r+0x68a>
 800b138:	4b98      	ldr	r3, [pc, #608]	@ (800b39c <_dtoa_r+0x8d4>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b140:	f7f5 fa82 	bl	8000648 <__aeabi_dmul>
 800b144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b148:	f7f5 fd04 	bl	8000b54 <__aeabi_dcmpge>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	f000 8157 	beq.w	800b400 <_dtoa_r+0x938>
 800b152:	2400      	movs	r4, #0
 800b154:	4625      	mov	r5, r4
 800b156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b158:	43db      	mvns	r3, r3
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	4656      	mov	r6, sl
 800b15e:	2700      	movs	r7, #0
 800b160:	4621      	mov	r1, r4
 800b162:	4658      	mov	r0, fp
 800b164:	f000 fbb4 	bl	800b8d0 <_Bfree>
 800b168:	2d00      	cmp	r5, #0
 800b16a:	d0dc      	beq.n	800b126 <_dtoa_r+0x65e>
 800b16c:	b12f      	cbz	r7, 800b17a <_dtoa_r+0x6b2>
 800b16e:	42af      	cmp	r7, r5
 800b170:	d003      	beq.n	800b17a <_dtoa_r+0x6b2>
 800b172:	4639      	mov	r1, r7
 800b174:	4658      	mov	r0, fp
 800b176:	f000 fbab 	bl	800b8d0 <_Bfree>
 800b17a:	4629      	mov	r1, r5
 800b17c:	4658      	mov	r0, fp
 800b17e:	f000 fba7 	bl	800b8d0 <_Bfree>
 800b182:	e7d0      	b.n	800b126 <_dtoa_r+0x65e>
 800b184:	9704      	str	r7, [sp, #16]
 800b186:	4633      	mov	r3, r6
 800b188:	461e      	mov	r6, r3
 800b18a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b18e:	2a39      	cmp	r2, #57	@ 0x39
 800b190:	d107      	bne.n	800b1a2 <_dtoa_r+0x6da>
 800b192:	459a      	cmp	sl, r3
 800b194:	d1f8      	bne.n	800b188 <_dtoa_r+0x6c0>
 800b196:	9a04      	ldr	r2, [sp, #16]
 800b198:	3201      	adds	r2, #1
 800b19a:	9204      	str	r2, [sp, #16]
 800b19c:	2230      	movs	r2, #48	@ 0x30
 800b19e:	f88a 2000 	strb.w	r2, [sl]
 800b1a2:	781a      	ldrb	r2, [r3, #0]
 800b1a4:	3201      	adds	r2, #1
 800b1a6:	701a      	strb	r2, [r3, #0]
 800b1a8:	e7bd      	b.n	800b126 <_dtoa_r+0x65e>
 800b1aa:	4b7b      	ldr	r3, [pc, #492]	@ (800b398 <_dtoa_r+0x8d0>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f7f5 fa4b 	bl	8000648 <__aeabi_dmul>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	460d      	mov	r5, r1
 800b1ba:	f7f5 fcad 	bl	8000b18 <__aeabi_dcmpeq>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f43f aebb 	beq.w	800af3a <_dtoa_r+0x472>
 800b1c4:	e6f0      	b.n	800afa8 <_dtoa_r+0x4e0>
 800b1c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	f000 80db 	beq.w	800b384 <_dtoa_r+0x8bc>
 800b1ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1d0:	2a01      	cmp	r2, #1
 800b1d2:	f300 80bf 	bgt.w	800b354 <_dtoa_r+0x88c>
 800b1d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	f000 80b7 	beq.w	800b34c <_dtoa_r+0x884>
 800b1de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b1e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1e4:	4646      	mov	r6, r8
 800b1e6:	9a08      	ldr	r2, [sp, #32]
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	441a      	add	r2, r3
 800b1ec:	4658      	mov	r0, fp
 800b1ee:	4498      	add	r8, r3
 800b1f0:	9208      	str	r2, [sp, #32]
 800b1f2:	f000 fc6b 	bl	800bacc <__i2b>
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	b15e      	cbz	r6, 800b212 <_dtoa_r+0x74a>
 800b1fa:	9b08      	ldr	r3, [sp, #32]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dd08      	ble.n	800b212 <_dtoa_r+0x74a>
 800b200:	42b3      	cmp	r3, r6
 800b202:	9a08      	ldr	r2, [sp, #32]
 800b204:	bfa8      	it	ge
 800b206:	4633      	movge	r3, r6
 800b208:	eba8 0803 	sub.w	r8, r8, r3
 800b20c:	1af6      	subs	r6, r6, r3
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	9308      	str	r3, [sp, #32]
 800b212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b214:	b1f3      	cbz	r3, 800b254 <_dtoa_r+0x78c>
 800b216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 80b7 	beq.w	800b38c <_dtoa_r+0x8c4>
 800b21e:	b18c      	cbz	r4, 800b244 <_dtoa_r+0x77c>
 800b220:	4629      	mov	r1, r5
 800b222:	4622      	mov	r2, r4
 800b224:	4658      	mov	r0, fp
 800b226:	f000 fd11 	bl	800bc4c <__pow5mult>
 800b22a:	464a      	mov	r2, r9
 800b22c:	4601      	mov	r1, r0
 800b22e:	4605      	mov	r5, r0
 800b230:	4658      	mov	r0, fp
 800b232:	f000 fc61 	bl	800baf8 <__multiply>
 800b236:	4649      	mov	r1, r9
 800b238:	9004      	str	r0, [sp, #16]
 800b23a:	4658      	mov	r0, fp
 800b23c:	f000 fb48 	bl	800b8d0 <_Bfree>
 800b240:	9b04      	ldr	r3, [sp, #16]
 800b242:	4699      	mov	r9, r3
 800b244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b246:	1b1a      	subs	r2, r3, r4
 800b248:	d004      	beq.n	800b254 <_dtoa_r+0x78c>
 800b24a:	4649      	mov	r1, r9
 800b24c:	4658      	mov	r0, fp
 800b24e:	f000 fcfd 	bl	800bc4c <__pow5mult>
 800b252:	4681      	mov	r9, r0
 800b254:	2101      	movs	r1, #1
 800b256:	4658      	mov	r0, fp
 800b258:	f000 fc38 	bl	800bacc <__i2b>
 800b25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b25e:	4604      	mov	r4, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 81cf 	beq.w	800b604 <_dtoa_r+0xb3c>
 800b266:	461a      	mov	r2, r3
 800b268:	4601      	mov	r1, r0
 800b26a:	4658      	mov	r0, fp
 800b26c:	f000 fcee 	bl	800bc4c <__pow5mult>
 800b270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b272:	2b01      	cmp	r3, #1
 800b274:	4604      	mov	r4, r0
 800b276:	f300 8095 	bgt.w	800b3a4 <_dtoa_r+0x8dc>
 800b27a:	9b02      	ldr	r3, [sp, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f040 8087 	bne.w	800b390 <_dtoa_r+0x8c8>
 800b282:	9b03      	ldr	r3, [sp, #12]
 800b284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f040 8089 	bne.w	800b3a0 <_dtoa_r+0x8d8>
 800b28e:	9b03      	ldr	r3, [sp, #12]
 800b290:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b294:	0d1b      	lsrs	r3, r3, #20
 800b296:	051b      	lsls	r3, r3, #20
 800b298:	b12b      	cbz	r3, 800b2a6 <_dtoa_r+0x7de>
 800b29a:	9b08      	ldr	r3, [sp, #32]
 800b29c:	3301      	adds	r3, #1
 800b29e:	9308      	str	r3, [sp, #32]
 800b2a0:	f108 0801 	add.w	r8, r8, #1
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 81b0 	beq.w	800b610 <_dtoa_r+0xb48>
 800b2b0:	6923      	ldr	r3, [r4, #16]
 800b2b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2b6:	6918      	ldr	r0, [r3, #16]
 800b2b8:	f000 fbbc 	bl	800ba34 <__hi0bits>
 800b2bc:	f1c0 0020 	rsb	r0, r0, #32
 800b2c0:	9b08      	ldr	r3, [sp, #32]
 800b2c2:	4418      	add	r0, r3
 800b2c4:	f010 001f 	ands.w	r0, r0, #31
 800b2c8:	d077      	beq.n	800b3ba <_dtoa_r+0x8f2>
 800b2ca:	f1c0 0320 	rsb	r3, r0, #32
 800b2ce:	2b04      	cmp	r3, #4
 800b2d0:	dd6b      	ble.n	800b3aa <_dtoa_r+0x8e2>
 800b2d2:	9b08      	ldr	r3, [sp, #32]
 800b2d4:	f1c0 001c 	rsb	r0, r0, #28
 800b2d8:	4403      	add	r3, r0
 800b2da:	4480      	add	r8, r0
 800b2dc:	4406      	add	r6, r0
 800b2de:	9308      	str	r3, [sp, #32]
 800b2e0:	f1b8 0f00 	cmp.w	r8, #0
 800b2e4:	dd05      	ble.n	800b2f2 <_dtoa_r+0x82a>
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	4642      	mov	r2, r8
 800b2ea:	4658      	mov	r0, fp
 800b2ec:	f000 fd08 	bl	800bd00 <__lshift>
 800b2f0:	4681      	mov	r9, r0
 800b2f2:	9b08      	ldr	r3, [sp, #32]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	dd05      	ble.n	800b304 <_dtoa_r+0x83c>
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	4658      	mov	r0, fp
 800b2fe:	f000 fcff 	bl	800bd00 <__lshift>
 800b302:	4604      	mov	r4, r0
 800b304:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b306:	2b00      	cmp	r3, #0
 800b308:	d059      	beq.n	800b3be <_dtoa_r+0x8f6>
 800b30a:	4621      	mov	r1, r4
 800b30c:	4648      	mov	r0, r9
 800b30e:	f000 fd63 	bl	800bdd8 <__mcmp>
 800b312:	2800      	cmp	r0, #0
 800b314:	da53      	bge.n	800b3be <_dtoa_r+0x8f6>
 800b316:	1e7b      	subs	r3, r7, #1
 800b318:	9304      	str	r3, [sp, #16]
 800b31a:	4649      	mov	r1, r9
 800b31c:	2300      	movs	r3, #0
 800b31e:	220a      	movs	r2, #10
 800b320:	4658      	mov	r0, fp
 800b322:	f000 faf7 	bl	800b914 <__multadd>
 800b326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b328:	4681      	mov	r9, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 8172 	beq.w	800b614 <_dtoa_r+0xb4c>
 800b330:	2300      	movs	r3, #0
 800b332:	4629      	mov	r1, r5
 800b334:	220a      	movs	r2, #10
 800b336:	4658      	mov	r0, fp
 800b338:	f000 faec 	bl	800b914 <__multadd>
 800b33c:	9b00      	ldr	r3, [sp, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	4605      	mov	r5, r0
 800b342:	dc67      	bgt.n	800b414 <_dtoa_r+0x94c>
 800b344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b346:	2b02      	cmp	r3, #2
 800b348:	dc41      	bgt.n	800b3ce <_dtoa_r+0x906>
 800b34a:	e063      	b.n	800b414 <_dtoa_r+0x94c>
 800b34c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b34e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b352:	e746      	b.n	800b1e2 <_dtoa_r+0x71a>
 800b354:	9b07      	ldr	r3, [sp, #28]
 800b356:	1e5c      	subs	r4, r3, #1
 800b358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b35a:	42a3      	cmp	r3, r4
 800b35c:	bfbf      	itttt	lt
 800b35e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b360:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b362:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b364:	1ae3      	sublt	r3, r4, r3
 800b366:	bfb4      	ite	lt
 800b368:	18d2      	addlt	r2, r2, r3
 800b36a:	1b1c      	subge	r4, r3, r4
 800b36c:	9b07      	ldr	r3, [sp, #28]
 800b36e:	bfbc      	itt	lt
 800b370:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b372:	2400      	movlt	r4, #0
 800b374:	2b00      	cmp	r3, #0
 800b376:	bfb5      	itete	lt
 800b378:	eba8 0603 	sublt.w	r6, r8, r3
 800b37c:	9b07      	ldrge	r3, [sp, #28]
 800b37e:	2300      	movlt	r3, #0
 800b380:	4646      	movge	r6, r8
 800b382:	e730      	b.n	800b1e6 <_dtoa_r+0x71e>
 800b384:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b386:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b388:	4646      	mov	r6, r8
 800b38a:	e735      	b.n	800b1f8 <_dtoa_r+0x730>
 800b38c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b38e:	e75c      	b.n	800b24a <_dtoa_r+0x782>
 800b390:	2300      	movs	r3, #0
 800b392:	e788      	b.n	800b2a6 <_dtoa_r+0x7de>
 800b394:	3fe00000 	.word	0x3fe00000
 800b398:	40240000 	.word	0x40240000
 800b39c:	40140000 	.word	0x40140000
 800b3a0:	9b02      	ldr	r3, [sp, #8]
 800b3a2:	e780      	b.n	800b2a6 <_dtoa_r+0x7de>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3a8:	e782      	b.n	800b2b0 <_dtoa_r+0x7e8>
 800b3aa:	d099      	beq.n	800b2e0 <_dtoa_r+0x818>
 800b3ac:	9a08      	ldr	r2, [sp, #32]
 800b3ae:	331c      	adds	r3, #28
 800b3b0:	441a      	add	r2, r3
 800b3b2:	4498      	add	r8, r3
 800b3b4:	441e      	add	r6, r3
 800b3b6:	9208      	str	r2, [sp, #32]
 800b3b8:	e792      	b.n	800b2e0 <_dtoa_r+0x818>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	e7f6      	b.n	800b3ac <_dtoa_r+0x8e4>
 800b3be:	9b07      	ldr	r3, [sp, #28]
 800b3c0:	9704      	str	r7, [sp, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dc20      	bgt.n	800b408 <_dtoa_r+0x940>
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	dd1e      	ble.n	800b40c <_dtoa_r+0x944>
 800b3ce:	9b00      	ldr	r3, [sp, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f47f aec0 	bne.w	800b156 <_dtoa_r+0x68e>
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	2205      	movs	r2, #5
 800b3da:	4658      	mov	r0, fp
 800b3dc:	f000 fa9a 	bl	800b914 <__multadd>
 800b3e0:	4601      	mov	r1, r0
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4648      	mov	r0, r9
 800b3e6:	f000 fcf7 	bl	800bdd8 <__mcmp>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f77f aeb3 	ble.w	800b156 <_dtoa_r+0x68e>
 800b3f0:	4656      	mov	r6, sl
 800b3f2:	2331      	movs	r3, #49	@ 0x31
 800b3f4:	f806 3b01 	strb.w	r3, [r6], #1
 800b3f8:	9b04      	ldr	r3, [sp, #16]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	9304      	str	r3, [sp, #16]
 800b3fe:	e6ae      	b.n	800b15e <_dtoa_r+0x696>
 800b400:	9c07      	ldr	r4, [sp, #28]
 800b402:	9704      	str	r7, [sp, #16]
 800b404:	4625      	mov	r5, r4
 800b406:	e7f3      	b.n	800b3f0 <_dtoa_r+0x928>
 800b408:	9b07      	ldr	r3, [sp, #28]
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f000 8104 	beq.w	800b61c <_dtoa_r+0xb54>
 800b414:	2e00      	cmp	r6, #0
 800b416:	dd05      	ble.n	800b424 <_dtoa_r+0x95c>
 800b418:	4629      	mov	r1, r5
 800b41a:	4632      	mov	r2, r6
 800b41c:	4658      	mov	r0, fp
 800b41e:	f000 fc6f 	bl	800bd00 <__lshift>
 800b422:	4605      	mov	r5, r0
 800b424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b426:	2b00      	cmp	r3, #0
 800b428:	d05a      	beq.n	800b4e0 <_dtoa_r+0xa18>
 800b42a:	6869      	ldr	r1, [r5, #4]
 800b42c:	4658      	mov	r0, fp
 800b42e:	f000 fa0f 	bl	800b850 <_Balloc>
 800b432:	4606      	mov	r6, r0
 800b434:	b928      	cbnz	r0, 800b442 <_dtoa_r+0x97a>
 800b436:	4b84      	ldr	r3, [pc, #528]	@ (800b648 <_dtoa_r+0xb80>)
 800b438:	4602      	mov	r2, r0
 800b43a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b43e:	f7ff bb5a 	b.w	800aaf6 <_dtoa_r+0x2e>
 800b442:	692a      	ldr	r2, [r5, #16]
 800b444:	3202      	adds	r2, #2
 800b446:	0092      	lsls	r2, r2, #2
 800b448:	f105 010c 	add.w	r1, r5, #12
 800b44c:	300c      	adds	r0, #12
 800b44e:	f002 f921 	bl	800d694 <memcpy>
 800b452:	2201      	movs	r2, #1
 800b454:	4631      	mov	r1, r6
 800b456:	4658      	mov	r0, fp
 800b458:	f000 fc52 	bl	800bd00 <__lshift>
 800b45c:	f10a 0301 	add.w	r3, sl, #1
 800b460:	9307      	str	r3, [sp, #28]
 800b462:	9b00      	ldr	r3, [sp, #0]
 800b464:	4453      	add	r3, sl
 800b466:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b468:	9b02      	ldr	r3, [sp, #8]
 800b46a:	f003 0301 	and.w	r3, r3, #1
 800b46e:	462f      	mov	r7, r5
 800b470:	930a      	str	r3, [sp, #40]	@ 0x28
 800b472:	4605      	mov	r5, r0
 800b474:	9b07      	ldr	r3, [sp, #28]
 800b476:	4621      	mov	r1, r4
 800b478:	3b01      	subs	r3, #1
 800b47a:	4648      	mov	r0, r9
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	f7ff fa9b 	bl	800a9b8 <quorem>
 800b482:	4639      	mov	r1, r7
 800b484:	9002      	str	r0, [sp, #8]
 800b486:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b48a:	4648      	mov	r0, r9
 800b48c:	f000 fca4 	bl	800bdd8 <__mcmp>
 800b490:	462a      	mov	r2, r5
 800b492:	9008      	str	r0, [sp, #32]
 800b494:	4621      	mov	r1, r4
 800b496:	4658      	mov	r0, fp
 800b498:	f000 fcba 	bl	800be10 <__mdiff>
 800b49c:	68c2      	ldr	r2, [r0, #12]
 800b49e:	4606      	mov	r6, r0
 800b4a0:	bb02      	cbnz	r2, 800b4e4 <_dtoa_r+0xa1c>
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	4648      	mov	r0, r9
 800b4a6:	f000 fc97 	bl	800bdd8 <__mcmp>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4658      	mov	r0, fp
 800b4b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4b2:	f000 fa0d 	bl	800b8d0 <_Bfree>
 800b4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4ba:	9e07      	ldr	r6, [sp, #28]
 800b4bc:	ea43 0102 	orr.w	r1, r3, r2
 800b4c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4c2:	4319      	orrs	r1, r3
 800b4c4:	d110      	bne.n	800b4e8 <_dtoa_r+0xa20>
 800b4c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b4ca:	d029      	beq.n	800b520 <_dtoa_r+0xa58>
 800b4cc:	9b08      	ldr	r3, [sp, #32]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	dd02      	ble.n	800b4d8 <_dtoa_r+0xa10>
 800b4d2:	9b02      	ldr	r3, [sp, #8]
 800b4d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b4d8:	9b00      	ldr	r3, [sp, #0]
 800b4da:	f883 8000 	strb.w	r8, [r3]
 800b4de:	e63f      	b.n	800b160 <_dtoa_r+0x698>
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	e7bb      	b.n	800b45c <_dtoa_r+0x994>
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	e7e1      	b.n	800b4ac <_dtoa_r+0x9e4>
 800b4e8:	9b08      	ldr	r3, [sp, #32]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	db04      	blt.n	800b4f8 <_dtoa_r+0xa30>
 800b4ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4f0:	430b      	orrs	r3, r1
 800b4f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	d120      	bne.n	800b53a <_dtoa_r+0xa72>
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	dded      	ble.n	800b4d8 <_dtoa_r+0xa10>
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	2201      	movs	r2, #1
 800b500:	4658      	mov	r0, fp
 800b502:	f000 fbfd 	bl	800bd00 <__lshift>
 800b506:	4621      	mov	r1, r4
 800b508:	4681      	mov	r9, r0
 800b50a:	f000 fc65 	bl	800bdd8 <__mcmp>
 800b50e:	2800      	cmp	r0, #0
 800b510:	dc03      	bgt.n	800b51a <_dtoa_r+0xa52>
 800b512:	d1e1      	bne.n	800b4d8 <_dtoa_r+0xa10>
 800b514:	f018 0f01 	tst.w	r8, #1
 800b518:	d0de      	beq.n	800b4d8 <_dtoa_r+0xa10>
 800b51a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b51e:	d1d8      	bne.n	800b4d2 <_dtoa_r+0xa0a>
 800b520:	9a00      	ldr	r2, [sp, #0]
 800b522:	2339      	movs	r3, #57	@ 0x39
 800b524:	7013      	strb	r3, [r2, #0]
 800b526:	4633      	mov	r3, r6
 800b528:	461e      	mov	r6, r3
 800b52a:	3b01      	subs	r3, #1
 800b52c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b530:	2a39      	cmp	r2, #57	@ 0x39
 800b532:	d052      	beq.n	800b5da <_dtoa_r+0xb12>
 800b534:	3201      	adds	r2, #1
 800b536:	701a      	strb	r2, [r3, #0]
 800b538:	e612      	b.n	800b160 <_dtoa_r+0x698>
 800b53a:	2a00      	cmp	r2, #0
 800b53c:	dd07      	ble.n	800b54e <_dtoa_r+0xa86>
 800b53e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b542:	d0ed      	beq.n	800b520 <_dtoa_r+0xa58>
 800b544:	9a00      	ldr	r2, [sp, #0]
 800b546:	f108 0301 	add.w	r3, r8, #1
 800b54a:	7013      	strb	r3, [r2, #0]
 800b54c:	e608      	b.n	800b160 <_dtoa_r+0x698>
 800b54e:	9b07      	ldr	r3, [sp, #28]
 800b550:	9a07      	ldr	r2, [sp, #28]
 800b552:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b558:	4293      	cmp	r3, r2
 800b55a:	d028      	beq.n	800b5ae <_dtoa_r+0xae6>
 800b55c:	4649      	mov	r1, r9
 800b55e:	2300      	movs	r3, #0
 800b560:	220a      	movs	r2, #10
 800b562:	4658      	mov	r0, fp
 800b564:	f000 f9d6 	bl	800b914 <__multadd>
 800b568:	42af      	cmp	r7, r5
 800b56a:	4681      	mov	r9, r0
 800b56c:	f04f 0300 	mov.w	r3, #0
 800b570:	f04f 020a 	mov.w	r2, #10
 800b574:	4639      	mov	r1, r7
 800b576:	4658      	mov	r0, fp
 800b578:	d107      	bne.n	800b58a <_dtoa_r+0xac2>
 800b57a:	f000 f9cb 	bl	800b914 <__multadd>
 800b57e:	4607      	mov	r7, r0
 800b580:	4605      	mov	r5, r0
 800b582:	9b07      	ldr	r3, [sp, #28]
 800b584:	3301      	adds	r3, #1
 800b586:	9307      	str	r3, [sp, #28]
 800b588:	e774      	b.n	800b474 <_dtoa_r+0x9ac>
 800b58a:	f000 f9c3 	bl	800b914 <__multadd>
 800b58e:	4629      	mov	r1, r5
 800b590:	4607      	mov	r7, r0
 800b592:	2300      	movs	r3, #0
 800b594:	220a      	movs	r2, #10
 800b596:	4658      	mov	r0, fp
 800b598:	f000 f9bc 	bl	800b914 <__multadd>
 800b59c:	4605      	mov	r5, r0
 800b59e:	e7f0      	b.n	800b582 <_dtoa_r+0xaba>
 800b5a0:	9b00      	ldr	r3, [sp, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	bfcc      	ite	gt
 800b5a6:	461e      	movgt	r6, r3
 800b5a8:	2601      	movle	r6, #1
 800b5aa:	4456      	add	r6, sl
 800b5ac:	2700      	movs	r7, #0
 800b5ae:	4649      	mov	r1, r9
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	4658      	mov	r0, fp
 800b5b4:	f000 fba4 	bl	800bd00 <__lshift>
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	4681      	mov	r9, r0
 800b5bc:	f000 fc0c 	bl	800bdd8 <__mcmp>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	dcb0      	bgt.n	800b526 <_dtoa_r+0xa5e>
 800b5c4:	d102      	bne.n	800b5cc <_dtoa_r+0xb04>
 800b5c6:	f018 0f01 	tst.w	r8, #1
 800b5ca:	d1ac      	bne.n	800b526 <_dtoa_r+0xa5e>
 800b5cc:	4633      	mov	r3, r6
 800b5ce:	461e      	mov	r6, r3
 800b5d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5d4:	2a30      	cmp	r2, #48	@ 0x30
 800b5d6:	d0fa      	beq.n	800b5ce <_dtoa_r+0xb06>
 800b5d8:	e5c2      	b.n	800b160 <_dtoa_r+0x698>
 800b5da:	459a      	cmp	sl, r3
 800b5dc:	d1a4      	bne.n	800b528 <_dtoa_r+0xa60>
 800b5de:	9b04      	ldr	r3, [sp, #16]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	9304      	str	r3, [sp, #16]
 800b5e4:	2331      	movs	r3, #49	@ 0x31
 800b5e6:	f88a 3000 	strb.w	r3, [sl]
 800b5ea:	e5b9      	b.n	800b160 <_dtoa_r+0x698>
 800b5ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b5ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b64c <_dtoa_r+0xb84>
 800b5f2:	b11b      	cbz	r3, 800b5fc <_dtoa_r+0xb34>
 800b5f4:	f10a 0308 	add.w	r3, sl, #8
 800b5f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	4650      	mov	r0, sl
 800b5fe:	b019      	add	sp, #100	@ 0x64
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b606:	2b01      	cmp	r3, #1
 800b608:	f77f ae37 	ble.w	800b27a <_dtoa_r+0x7b2>
 800b60c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b60e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b610:	2001      	movs	r0, #1
 800b612:	e655      	b.n	800b2c0 <_dtoa_r+0x7f8>
 800b614:	9b00      	ldr	r3, [sp, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	f77f aed6 	ble.w	800b3c8 <_dtoa_r+0x900>
 800b61c:	4656      	mov	r6, sl
 800b61e:	4621      	mov	r1, r4
 800b620:	4648      	mov	r0, r9
 800b622:	f7ff f9c9 	bl	800a9b8 <quorem>
 800b626:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b62a:	f806 8b01 	strb.w	r8, [r6], #1
 800b62e:	9b00      	ldr	r3, [sp, #0]
 800b630:	eba6 020a 	sub.w	r2, r6, sl
 800b634:	4293      	cmp	r3, r2
 800b636:	ddb3      	ble.n	800b5a0 <_dtoa_r+0xad8>
 800b638:	4649      	mov	r1, r9
 800b63a:	2300      	movs	r3, #0
 800b63c:	220a      	movs	r2, #10
 800b63e:	4658      	mov	r0, fp
 800b640:	f000 f968 	bl	800b914 <__multadd>
 800b644:	4681      	mov	r9, r0
 800b646:	e7ea      	b.n	800b61e <_dtoa_r+0xb56>
 800b648:	0800e839 	.word	0x0800e839
 800b64c:	0800e7bd 	.word	0x0800e7bd

0800b650 <_free_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4605      	mov	r5, r0
 800b654:	2900      	cmp	r1, #0
 800b656:	d041      	beq.n	800b6dc <_free_r+0x8c>
 800b658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b65c:	1f0c      	subs	r4, r1, #4
 800b65e:	2b00      	cmp	r3, #0
 800b660:	bfb8      	it	lt
 800b662:	18e4      	addlt	r4, r4, r3
 800b664:	f000 f8e8 	bl	800b838 <__malloc_lock>
 800b668:	4a1d      	ldr	r2, [pc, #116]	@ (800b6e0 <_free_r+0x90>)
 800b66a:	6813      	ldr	r3, [r2, #0]
 800b66c:	b933      	cbnz	r3, 800b67c <_free_r+0x2c>
 800b66e:	6063      	str	r3, [r4, #4]
 800b670:	6014      	str	r4, [r2, #0]
 800b672:	4628      	mov	r0, r5
 800b674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b678:	f000 b8e4 	b.w	800b844 <__malloc_unlock>
 800b67c:	42a3      	cmp	r3, r4
 800b67e:	d908      	bls.n	800b692 <_free_r+0x42>
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	1821      	adds	r1, r4, r0
 800b684:	428b      	cmp	r3, r1
 800b686:	bf01      	itttt	eq
 800b688:	6819      	ldreq	r1, [r3, #0]
 800b68a:	685b      	ldreq	r3, [r3, #4]
 800b68c:	1809      	addeq	r1, r1, r0
 800b68e:	6021      	streq	r1, [r4, #0]
 800b690:	e7ed      	b.n	800b66e <_free_r+0x1e>
 800b692:	461a      	mov	r2, r3
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	b10b      	cbz	r3, 800b69c <_free_r+0x4c>
 800b698:	42a3      	cmp	r3, r4
 800b69a:	d9fa      	bls.n	800b692 <_free_r+0x42>
 800b69c:	6811      	ldr	r1, [r2, #0]
 800b69e:	1850      	adds	r0, r2, r1
 800b6a0:	42a0      	cmp	r0, r4
 800b6a2:	d10b      	bne.n	800b6bc <_free_r+0x6c>
 800b6a4:	6820      	ldr	r0, [r4, #0]
 800b6a6:	4401      	add	r1, r0
 800b6a8:	1850      	adds	r0, r2, r1
 800b6aa:	4283      	cmp	r3, r0
 800b6ac:	6011      	str	r1, [r2, #0]
 800b6ae:	d1e0      	bne.n	800b672 <_free_r+0x22>
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	6053      	str	r3, [r2, #4]
 800b6b6:	4408      	add	r0, r1
 800b6b8:	6010      	str	r0, [r2, #0]
 800b6ba:	e7da      	b.n	800b672 <_free_r+0x22>
 800b6bc:	d902      	bls.n	800b6c4 <_free_r+0x74>
 800b6be:	230c      	movs	r3, #12
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	e7d6      	b.n	800b672 <_free_r+0x22>
 800b6c4:	6820      	ldr	r0, [r4, #0]
 800b6c6:	1821      	adds	r1, r4, r0
 800b6c8:	428b      	cmp	r3, r1
 800b6ca:	bf04      	itt	eq
 800b6cc:	6819      	ldreq	r1, [r3, #0]
 800b6ce:	685b      	ldreq	r3, [r3, #4]
 800b6d0:	6063      	str	r3, [r4, #4]
 800b6d2:	bf04      	itt	eq
 800b6d4:	1809      	addeq	r1, r1, r0
 800b6d6:	6021      	streq	r1, [r4, #0]
 800b6d8:	6054      	str	r4, [r2, #4]
 800b6da:	e7ca      	b.n	800b672 <_free_r+0x22>
 800b6dc:	bd38      	pop	{r3, r4, r5, pc}
 800b6de:	bf00      	nop
 800b6e0:	200019b8 	.word	0x200019b8

0800b6e4 <malloc>:
 800b6e4:	4b02      	ldr	r3, [pc, #8]	@ (800b6f0 <malloc+0xc>)
 800b6e6:	4601      	mov	r1, r0
 800b6e8:	6818      	ldr	r0, [r3, #0]
 800b6ea:	f000 b825 	b.w	800b738 <_malloc_r>
 800b6ee:	bf00      	nop
 800b6f0:	20000f5c 	.word	0x20000f5c

0800b6f4 <sbrk_aligned>:
 800b6f4:	b570      	push	{r4, r5, r6, lr}
 800b6f6:	4e0f      	ldr	r6, [pc, #60]	@ (800b734 <sbrk_aligned+0x40>)
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	6831      	ldr	r1, [r6, #0]
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	b911      	cbnz	r1, 800b706 <sbrk_aligned+0x12>
 800b700:	f001 ffb8 	bl	800d674 <_sbrk_r>
 800b704:	6030      	str	r0, [r6, #0]
 800b706:	4621      	mov	r1, r4
 800b708:	4628      	mov	r0, r5
 800b70a:	f001 ffb3 	bl	800d674 <_sbrk_r>
 800b70e:	1c43      	adds	r3, r0, #1
 800b710:	d103      	bne.n	800b71a <sbrk_aligned+0x26>
 800b712:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b716:	4620      	mov	r0, r4
 800b718:	bd70      	pop	{r4, r5, r6, pc}
 800b71a:	1cc4      	adds	r4, r0, #3
 800b71c:	f024 0403 	bic.w	r4, r4, #3
 800b720:	42a0      	cmp	r0, r4
 800b722:	d0f8      	beq.n	800b716 <sbrk_aligned+0x22>
 800b724:	1a21      	subs	r1, r4, r0
 800b726:	4628      	mov	r0, r5
 800b728:	f001 ffa4 	bl	800d674 <_sbrk_r>
 800b72c:	3001      	adds	r0, #1
 800b72e:	d1f2      	bne.n	800b716 <sbrk_aligned+0x22>
 800b730:	e7ef      	b.n	800b712 <sbrk_aligned+0x1e>
 800b732:	bf00      	nop
 800b734:	200019b4 	.word	0x200019b4

0800b738 <_malloc_r>:
 800b738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b73c:	1ccd      	adds	r5, r1, #3
 800b73e:	f025 0503 	bic.w	r5, r5, #3
 800b742:	3508      	adds	r5, #8
 800b744:	2d0c      	cmp	r5, #12
 800b746:	bf38      	it	cc
 800b748:	250c      	movcc	r5, #12
 800b74a:	2d00      	cmp	r5, #0
 800b74c:	4606      	mov	r6, r0
 800b74e:	db01      	blt.n	800b754 <_malloc_r+0x1c>
 800b750:	42a9      	cmp	r1, r5
 800b752:	d904      	bls.n	800b75e <_malloc_r+0x26>
 800b754:	230c      	movs	r3, #12
 800b756:	6033      	str	r3, [r6, #0]
 800b758:	2000      	movs	r0, #0
 800b75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b834 <_malloc_r+0xfc>
 800b762:	f000 f869 	bl	800b838 <__malloc_lock>
 800b766:	f8d8 3000 	ldr.w	r3, [r8]
 800b76a:	461c      	mov	r4, r3
 800b76c:	bb44      	cbnz	r4, 800b7c0 <_malloc_r+0x88>
 800b76e:	4629      	mov	r1, r5
 800b770:	4630      	mov	r0, r6
 800b772:	f7ff ffbf 	bl	800b6f4 <sbrk_aligned>
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	4604      	mov	r4, r0
 800b77a:	d158      	bne.n	800b82e <_malloc_r+0xf6>
 800b77c:	f8d8 4000 	ldr.w	r4, [r8]
 800b780:	4627      	mov	r7, r4
 800b782:	2f00      	cmp	r7, #0
 800b784:	d143      	bne.n	800b80e <_malloc_r+0xd6>
 800b786:	2c00      	cmp	r4, #0
 800b788:	d04b      	beq.n	800b822 <_malloc_r+0xea>
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	4639      	mov	r1, r7
 800b78e:	4630      	mov	r0, r6
 800b790:	eb04 0903 	add.w	r9, r4, r3
 800b794:	f001 ff6e 	bl	800d674 <_sbrk_r>
 800b798:	4581      	cmp	r9, r0
 800b79a:	d142      	bne.n	800b822 <_malloc_r+0xea>
 800b79c:	6821      	ldr	r1, [r4, #0]
 800b79e:	1a6d      	subs	r5, r5, r1
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f7ff ffa6 	bl	800b6f4 <sbrk_aligned>
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	d03a      	beq.n	800b822 <_malloc_r+0xea>
 800b7ac:	6823      	ldr	r3, [r4, #0]
 800b7ae:	442b      	add	r3, r5
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	bb62      	cbnz	r2, 800b814 <_malloc_r+0xdc>
 800b7ba:	f8c8 7000 	str.w	r7, [r8]
 800b7be:	e00f      	b.n	800b7e0 <_malloc_r+0xa8>
 800b7c0:	6822      	ldr	r2, [r4, #0]
 800b7c2:	1b52      	subs	r2, r2, r5
 800b7c4:	d420      	bmi.n	800b808 <_malloc_r+0xd0>
 800b7c6:	2a0b      	cmp	r2, #11
 800b7c8:	d917      	bls.n	800b7fa <_malloc_r+0xc2>
 800b7ca:	1961      	adds	r1, r4, r5
 800b7cc:	42a3      	cmp	r3, r4
 800b7ce:	6025      	str	r5, [r4, #0]
 800b7d0:	bf18      	it	ne
 800b7d2:	6059      	strne	r1, [r3, #4]
 800b7d4:	6863      	ldr	r3, [r4, #4]
 800b7d6:	bf08      	it	eq
 800b7d8:	f8c8 1000 	streq.w	r1, [r8]
 800b7dc:	5162      	str	r2, [r4, r5]
 800b7de:	604b      	str	r3, [r1, #4]
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f000 f82f 	bl	800b844 <__malloc_unlock>
 800b7e6:	f104 000b 	add.w	r0, r4, #11
 800b7ea:	1d23      	adds	r3, r4, #4
 800b7ec:	f020 0007 	bic.w	r0, r0, #7
 800b7f0:	1ac2      	subs	r2, r0, r3
 800b7f2:	bf1c      	itt	ne
 800b7f4:	1a1b      	subne	r3, r3, r0
 800b7f6:	50a3      	strne	r3, [r4, r2]
 800b7f8:	e7af      	b.n	800b75a <_malloc_r+0x22>
 800b7fa:	6862      	ldr	r2, [r4, #4]
 800b7fc:	42a3      	cmp	r3, r4
 800b7fe:	bf0c      	ite	eq
 800b800:	f8c8 2000 	streq.w	r2, [r8]
 800b804:	605a      	strne	r2, [r3, #4]
 800b806:	e7eb      	b.n	800b7e0 <_malloc_r+0xa8>
 800b808:	4623      	mov	r3, r4
 800b80a:	6864      	ldr	r4, [r4, #4]
 800b80c:	e7ae      	b.n	800b76c <_malloc_r+0x34>
 800b80e:	463c      	mov	r4, r7
 800b810:	687f      	ldr	r7, [r7, #4]
 800b812:	e7b6      	b.n	800b782 <_malloc_r+0x4a>
 800b814:	461a      	mov	r2, r3
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	42a3      	cmp	r3, r4
 800b81a:	d1fb      	bne.n	800b814 <_malloc_r+0xdc>
 800b81c:	2300      	movs	r3, #0
 800b81e:	6053      	str	r3, [r2, #4]
 800b820:	e7de      	b.n	800b7e0 <_malloc_r+0xa8>
 800b822:	230c      	movs	r3, #12
 800b824:	6033      	str	r3, [r6, #0]
 800b826:	4630      	mov	r0, r6
 800b828:	f000 f80c 	bl	800b844 <__malloc_unlock>
 800b82c:	e794      	b.n	800b758 <_malloc_r+0x20>
 800b82e:	6005      	str	r5, [r0, #0]
 800b830:	e7d6      	b.n	800b7e0 <_malloc_r+0xa8>
 800b832:	bf00      	nop
 800b834:	200019b8 	.word	0x200019b8

0800b838 <__malloc_lock>:
 800b838:	4801      	ldr	r0, [pc, #4]	@ (800b840 <__malloc_lock+0x8>)
 800b83a:	f7ff b8b4 	b.w	800a9a6 <__retarget_lock_acquire_recursive>
 800b83e:	bf00      	nop
 800b840:	200019b0 	.word	0x200019b0

0800b844 <__malloc_unlock>:
 800b844:	4801      	ldr	r0, [pc, #4]	@ (800b84c <__malloc_unlock+0x8>)
 800b846:	f7ff b8af 	b.w	800a9a8 <__retarget_lock_release_recursive>
 800b84a:	bf00      	nop
 800b84c:	200019b0 	.word	0x200019b0

0800b850 <_Balloc>:
 800b850:	b570      	push	{r4, r5, r6, lr}
 800b852:	69c6      	ldr	r6, [r0, #28]
 800b854:	4604      	mov	r4, r0
 800b856:	460d      	mov	r5, r1
 800b858:	b976      	cbnz	r6, 800b878 <_Balloc+0x28>
 800b85a:	2010      	movs	r0, #16
 800b85c:	f7ff ff42 	bl	800b6e4 <malloc>
 800b860:	4602      	mov	r2, r0
 800b862:	61e0      	str	r0, [r4, #28]
 800b864:	b920      	cbnz	r0, 800b870 <_Balloc+0x20>
 800b866:	4b18      	ldr	r3, [pc, #96]	@ (800b8c8 <_Balloc+0x78>)
 800b868:	4818      	ldr	r0, [pc, #96]	@ (800b8cc <_Balloc+0x7c>)
 800b86a:	216b      	movs	r1, #107	@ 0x6b
 800b86c:	f001 ff28 	bl	800d6c0 <__assert_func>
 800b870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b874:	6006      	str	r6, [r0, #0]
 800b876:	60c6      	str	r6, [r0, #12]
 800b878:	69e6      	ldr	r6, [r4, #28]
 800b87a:	68f3      	ldr	r3, [r6, #12]
 800b87c:	b183      	cbz	r3, 800b8a0 <_Balloc+0x50>
 800b87e:	69e3      	ldr	r3, [r4, #28]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b886:	b9b8      	cbnz	r0, 800b8b8 <_Balloc+0x68>
 800b888:	2101      	movs	r1, #1
 800b88a:	fa01 f605 	lsl.w	r6, r1, r5
 800b88e:	1d72      	adds	r2, r6, #5
 800b890:	0092      	lsls	r2, r2, #2
 800b892:	4620      	mov	r0, r4
 800b894:	f001 ff32 	bl	800d6fc <_calloc_r>
 800b898:	b160      	cbz	r0, 800b8b4 <_Balloc+0x64>
 800b89a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b89e:	e00e      	b.n	800b8be <_Balloc+0x6e>
 800b8a0:	2221      	movs	r2, #33	@ 0x21
 800b8a2:	2104      	movs	r1, #4
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f001 ff29 	bl	800d6fc <_calloc_r>
 800b8aa:	69e3      	ldr	r3, [r4, #28]
 800b8ac:	60f0      	str	r0, [r6, #12]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1e4      	bne.n	800b87e <_Balloc+0x2e>
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	bd70      	pop	{r4, r5, r6, pc}
 800b8b8:	6802      	ldr	r2, [r0, #0]
 800b8ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8c4:	e7f7      	b.n	800b8b6 <_Balloc+0x66>
 800b8c6:	bf00      	nop
 800b8c8:	0800e7ca 	.word	0x0800e7ca
 800b8cc:	0800e84a 	.word	0x0800e84a

0800b8d0 <_Bfree>:
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	69c6      	ldr	r6, [r0, #28]
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	b976      	cbnz	r6, 800b8f8 <_Bfree+0x28>
 800b8da:	2010      	movs	r0, #16
 800b8dc:	f7ff ff02 	bl	800b6e4 <malloc>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	61e8      	str	r0, [r5, #28]
 800b8e4:	b920      	cbnz	r0, 800b8f0 <_Bfree+0x20>
 800b8e6:	4b09      	ldr	r3, [pc, #36]	@ (800b90c <_Bfree+0x3c>)
 800b8e8:	4809      	ldr	r0, [pc, #36]	@ (800b910 <_Bfree+0x40>)
 800b8ea:	218f      	movs	r1, #143	@ 0x8f
 800b8ec:	f001 fee8 	bl	800d6c0 <__assert_func>
 800b8f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8f4:	6006      	str	r6, [r0, #0]
 800b8f6:	60c6      	str	r6, [r0, #12]
 800b8f8:	b13c      	cbz	r4, 800b90a <_Bfree+0x3a>
 800b8fa:	69eb      	ldr	r3, [r5, #28]
 800b8fc:	6862      	ldr	r2, [r4, #4]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b904:	6021      	str	r1, [r4, #0]
 800b906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	0800e7ca 	.word	0x0800e7ca
 800b910:	0800e84a 	.word	0x0800e84a

0800b914 <__multadd>:
 800b914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b918:	690d      	ldr	r5, [r1, #16]
 800b91a:	4607      	mov	r7, r0
 800b91c:	460c      	mov	r4, r1
 800b91e:	461e      	mov	r6, r3
 800b920:	f101 0c14 	add.w	ip, r1, #20
 800b924:	2000      	movs	r0, #0
 800b926:	f8dc 3000 	ldr.w	r3, [ip]
 800b92a:	b299      	uxth	r1, r3
 800b92c:	fb02 6101 	mla	r1, r2, r1, r6
 800b930:	0c1e      	lsrs	r6, r3, #16
 800b932:	0c0b      	lsrs	r3, r1, #16
 800b934:	fb02 3306 	mla	r3, r2, r6, r3
 800b938:	b289      	uxth	r1, r1
 800b93a:	3001      	adds	r0, #1
 800b93c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b940:	4285      	cmp	r5, r0
 800b942:	f84c 1b04 	str.w	r1, [ip], #4
 800b946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b94a:	dcec      	bgt.n	800b926 <__multadd+0x12>
 800b94c:	b30e      	cbz	r6, 800b992 <__multadd+0x7e>
 800b94e:	68a3      	ldr	r3, [r4, #8]
 800b950:	42ab      	cmp	r3, r5
 800b952:	dc19      	bgt.n	800b988 <__multadd+0x74>
 800b954:	6861      	ldr	r1, [r4, #4]
 800b956:	4638      	mov	r0, r7
 800b958:	3101      	adds	r1, #1
 800b95a:	f7ff ff79 	bl	800b850 <_Balloc>
 800b95e:	4680      	mov	r8, r0
 800b960:	b928      	cbnz	r0, 800b96e <__multadd+0x5a>
 800b962:	4602      	mov	r2, r0
 800b964:	4b0c      	ldr	r3, [pc, #48]	@ (800b998 <__multadd+0x84>)
 800b966:	480d      	ldr	r0, [pc, #52]	@ (800b99c <__multadd+0x88>)
 800b968:	21ba      	movs	r1, #186	@ 0xba
 800b96a:	f001 fea9 	bl	800d6c0 <__assert_func>
 800b96e:	6922      	ldr	r2, [r4, #16]
 800b970:	3202      	adds	r2, #2
 800b972:	f104 010c 	add.w	r1, r4, #12
 800b976:	0092      	lsls	r2, r2, #2
 800b978:	300c      	adds	r0, #12
 800b97a:	f001 fe8b 	bl	800d694 <memcpy>
 800b97e:	4621      	mov	r1, r4
 800b980:	4638      	mov	r0, r7
 800b982:	f7ff ffa5 	bl	800b8d0 <_Bfree>
 800b986:	4644      	mov	r4, r8
 800b988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b98c:	3501      	adds	r5, #1
 800b98e:	615e      	str	r6, [r3, #20]
 800b990:	6125      	str	r5, [r4, #16]
 800b992:	4620      	mov	r0, r4
 800b994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b998:	0800e839 	.word	0x0800e839
 800b99c:	0800e84a 	.word	0x0800e84a

0800b9a0 <__s2b>:
 800b9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	4615      	mov	r5, r2
 800b9a8:	461f      	mov	r7, r3
 800b9aa:	2209      	movs	r2, #9
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	db09      	blt.n	800b9d0 <__s2b+0x30>
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f7ff ff47 	bl	800b850 <_Balloc>
 800b9c2:	b940      	cbnz	r0, 800b9d6 <__s2b+0x36>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	4b19      	ldr	r3, [pc, #100]	@ (800ba2c <__s2b+0x8c>)
 800b9c8:	4819      	ldr	r0, [pc, #100]	@ (800ba30 <__s2b+0x90>)
 800b9ca:	21d3      	movs	r1, #211	@ 0xd3
 800b9cc:	f001 fe78 	bl	800d6c0 <__assert_func>
 800b9d0:	0052      	lsls	r2, r2, #1
 800b9d2:	3101      	adds	r1, #1
 800b9d4:	e7f0      	b.n	800b9b8 <__s2b+0x18>
 800b9d6:	9b08      	ldr	r3, [sp, #32]
 800b9d8:	6143      	str	r3, [r0, #20]
 800b9da:	2d09      	cmp	r5, #9
 800b9dc:	f04f 0301 	mov.w	r3, #1
 800b9e0:	6103      	str	r3, [r0, #16]
 800b9e2:	dd16      	ble.n	800ba12 <__s2b+0x72>
 800b9e4:	f104 0909 	add.w	r9, r4, #9
 800b9e8:	46c8      	mov	r8, r9
 800b9ea:	442c      	add	r4, r5
 800b9ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b9f0:	4601      	mov	r1, r0
 800b9f2:	3b30      	subs	r3, #48	@ 0x30
 800b9f4:	220a      	movs	r2, #10
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7ff ff8c 	bl	800b914 <__multadd>
 800b9fc:	45a0      	cmp	r8, r4
 800b9fe:	d1f5      	bne.n	800b9ec <__s2b+0x4c>
 800ba00:	f1a5 0408 	sub.w	r4, r5, #8
 800ba04:	444c      	add	r4, r9
 800ba06:	1b2d      	subs	r5, r5, r4
 800ba08:	1963      	adds	r3, r4, r5
 800ba0a:	42bb      	cmp	r3, r7
 800ba0c:	db04      	blt.n	800ba18 <__s2b+0x78>
 800ba0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba12:	340a      	adds	r4, #10
 800ba14:	2509      	movs	r5, #9
 800ba16:	e7f6      	b.n	800ba06 <__s2b+0x66>
 800ba18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba1c:	4601      	mov	r1, r0
 800ba1e:	3b30      	subs	r3, #48	@ 0x30
 800ba20:	220a      	movs	r2, #10
 800ba22:	4630      	mov	r0, r6
 800ba24:	f7ff ff76 	bl	800b914 <__multadd>
 800ba28:	e7ee      	b.n	800ba08 <__s2b+0x68>
 800ba2a:	bf00      	nop
 800ba2c:	0800e839 	.word	0x0800e839
 800ba30:	0800e84a 	.word	0x0800e84a

0800ba34 <__hi0bits>:
 800ba34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba38:	4603      	mov	r3, r0
 800ba3a:	bf36      	itet	cc
 800ba3c:	0403      	lslcc	r3, r0, #16
 800ba3e:	2000      	movcs	r0, #0
 800ba40:	2010      	movcc	r0, #16
 800ba42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba46:	bf3c      	itt	cc
 800ba48:	021b      	lslcc	r3, r3, #8
 800ba4a:	3008      	addcc	r0, #8
 800ba4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba50:	bf3c      	itt	cc
 800ba52:	011b      	lslcc	r3, r3, #4
 800ba54:	3004      	addcc	r0, #4
 800ba56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba5a:	bf3c      	itt	cc
 800ba5c:	009b      	lslcc	r3, r3, #2
 800ba5e:	3002      	addcc	r0, #2
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	db05      	blt.n	800ba70 <__hi0bits+0x3c>
 800ba64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba68:	f100 0001 	add.w	r0, r0, #1
 800ba6c:	bf08      	it	eq
 800ba6e:	2020      	moveq	r0, #32
 800ba70:	4770      	bx	lr

0800ba72 <__lo0bits>:
 800ba72:	6803      	ldr	r3, [r0, #0]
 800ba74:	4602      	mov	r2, r0
 800ba76:	f013 0007 	ands.w	r0, r3, #7
 800ba7a:	d00b      	beq.n	800ba94 <__lo0bits+0x22>
 800ba7c:	07d9      	lsls	r1, r3, #31
 800ba7e:	d421      	bmi.n	800bac4 <__lo0bits+0x52>
 800ba80:	0798      	lsls	r0, r3, #30
 800ba82:	bf49      	itett	mi
 800ba84:	085b      	lsrmi	r3, r3, #1
 800ba86:	089b      	lsrpl	r3, r3, #2
 800ba88:	2001      	movmi	r0, #1
 800ba8a:	6013      	strmi	r3, [r2, #0]
 800ba8c:	bf5c      	itt	pl
 800ba8e:	6013      	strpl	r3, [r2, #0]
 800ba90:	2002      	movpl	r0, #2
 800ba92:	4770      	bx	lr
 800ba94:	b299      	uxth	r1, r3
 800ba96:	b909      	cbnz	r1, 800ba9c <__lo0bits+0x2a>
 800ba98:	0c1b      	lsrs	r3, r3, #16
 800ba9a:	2010      	movs	r0, #16
 800ba9c:	b2d9      	uxtb	r1, r3
 800ba9e:	b909      	cbnz	r1, 800baa4 <__lo0bits+0x32>
 800baa0:	3008      	adds	r0, #8
 800baa2:	0a1b      	lsrs	r3, r3, #8
 800baa4:	0719      	lsls	r1, r3, #28
 800baa6:	bf04      	itt	eq
 800baa8:	091b      	lsreq	r3, r3, #4
 800baaa:	3004      	addeq	r0, #4
 800baac:	0799      	lsls	r1, r3, #30
 800baae:	bf04      	itt	eq
 800bab0:	089b      	lsreq	r3, r3, #2
 800bab2:	3002      	addeq	r0, #2
 800bab4:	07d9      	lsls	r1, r3, #31
 800bab6:	d403      	bmi.n	800bac0 <__lo0bits+0x4e>
 800bab8:	085b      	lsrs	r3, r3, #1
 800baba:	f100 0001 	add.w	r0, r0, #1
 800babe:	d003      	beq.n	800bac8 <__lo0bits+0x56>
 800bac0:	6013      	str	r3, [r2, #0]
 800bac2:	4770      	bx	lr
 800bac4:	2000      	movs	r0, #0
 800bac6:	4770      	bx	lr
 800bac8:	2020      	movs	r0, #32
 800baca:	4770      	bx	lr

0800bacc <__i2b>:
 800bacc:	b510      	push	{r4, lr}
 800bace:	460c      	mov	r4, r1
 800bad0:	2101      	movs	r1, #1
 800bad2:	f7ff febd 	bl	800b850 <_Balloc>
 800bad6:	4602      	mov	r2, r0
 800bad8:	b928      	cbnz	r0, 800bae6 <__i2b+0x1a>
 800bada:	4b05      	ldr	r3, [pc, #20]	@ (800baf0 <__i2b+0x24>)
 800badc:	4805      	ldr	r0, [pc, #20]	@ (800baf4 <__i2b+0x28>)
 800bade:	f240 1145 	movw	r1, #325	@ 0x145
 800bae2:	f001 fded 	bl	800d6c0 <__assert_func>
 800bae6:	2301      	movs	r3, #1
 800bae8:	6144      	str	r4, [r0, #20]
 800baea:	6103      	str	r3, [r0, #16]
 800baec:	bd10      	pop	{r4, pc}
 800baee:	bf00      	nop
 800baf0:	0800e839 	.word	0x0800e839
 800baf4:	0800e84a 	.word	0x0800e84a

0800baf8 <__multiply>:
 800baf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafc:	4614      	mov	r4, r2
 800bafe:	690a      	ldr	r2, [r1, #16]
 800bb00:	6923      	ldr	r3, [r4, #16]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	bfa8      	it	ge
 800bb06:	4623      	movge	r3, r4
 800bb08:	460f      	mov	r7, r1
 800bb0a:	bfa4      	itt	ge
 800bb0c:	460c      	movge	r4, r1
 800bb0e:	461f      	movge	r7, r3
 800bb10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bb14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bb18:	68a3      	ldr	r3, [r4, #8]
 800bb1a:	6861      	ldr	r1, [r4, #4]
 800bb1c:	eb0a 0609 	add.w	r6, sl, r9
 800bb20:	42b3      	cmp	r3, r6
 800bb22:	b085      	sub	sp, #20
 800bb24:	bfb8      	it	lt
 800bb26:	3101      	addlt	r1, #1
 800bb28:	f7ff fe92 	bl	800b850 <_Balloc>
 800bb2c:	b930      	cbnz	r0, 800bb3c <__multiply+0x44>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	4b44      	ldr	r3, [pc, #272]	@ (800bc44 <__multiply+0x14c>)
 800bb32:	4845      	ldr	r0, [pc, #276]	@ (800bc48 <__multiply+0x150>)
 800bb34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb38:	f001 fdc2 	bl	800d6c0 <__assert_func>
 800bb3c:	f100 0514 	add.w	r5, r0, #20
 800bb40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb44:	462b      	mov	r3, r5
 800bb46:	2200      	movs	r2, #0
 800bb48:	4543      	cmp	r3, r8
 800bb4a:	d321      	bcc.n	800bb90 <__multiply+0x98>
 800bb4c:	f107 0114 	add.w	r1, r7, #20
 800bb50:	f104 0214 	add.w	r2, r4, #20
 800bb54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bb58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bb5c:	9302      	str	r3, [sp, #8]
 800bb5e:	1b13      	subs	r3, r2, r4
 800bb60:	3b15      	subs	r3, #21
 800bb62:	f023 0303 	bic.w	r3, r3, #3
 800bb66:	3304      	adds	r3, #4
 800bb68:	f104 0715 	add.w	r7, r4, #21
 800bb6c:	42ba      	cmp	r2, r7
 800bb6e:	bf38      	it	cc
 800bb70:	2304      	movcc	r3, #4
 800bb72:	9301      	str	r3, [sp, #4]
 800bb74:	9b02      	ldr	r3, [sp, #8]
 800bb76:	9103      	str	r1, [sp, #12]
 800bb78:	428b      	cmp	r3, r1
 800bb7a:	d80c      	bhi.n	800bb96 <__multiply+0x9e>
 800bb7c:	2e00      	cmp	r6, #0
 800bb7e:	dd03      	ble.n	800bb88 <__multiply+0x90>
 800bb80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d05b      	beq.n	800bc40 <__multiply+0x148>
 800bb88:	6106      	str	r6, [r0, #16]
 800bb8a:	b005      	add	sp, #20
 800bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb90:	f843 2b04 	str.w	r2, [r3], #4
 800bb94:	e7d8      	b.n	800bb48 <__multiply+0x50>
 800bb96:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb9a:	f1ba 0f00 	cmp.w	sl, #0
 800bb9e:	d024      	beq.n	800bbea <__multiply+0xf2>
 800bba0:	f104 0e14 	add.w	lr, r4, #20
 800bba4:	46a9      	mov	r9, r5
 800bba6:	f04f 0c00 	mov.w	ip, #0
 800bbaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbae:	f8d9 3000 	ldr.w	r3, [r9]
 800bbb2:	fa1f fb87 	uxth.w	fp, r7
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	fb0a 330b 	mla	r3, sl, fp, r3
 800bbbc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bbc0:	f8d9 7000 	ldr.w	r7, [r9]
 800bbc4:	4463      	add	r3, ip
 800bbc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bbca:	fb0a c70b 	mla	r7, sl, fp, ip
 800bbce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bbd8:	4572      	cmp	r2, lr
 800bbda:	f849 3b04 	str.w	r3, [r9], #4
 800bbde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bbe2:	d8e2      	bhi.n	800bbaa <__multiply+0xb2>
 800bbe4:	9b01      	ldr	r3, [sp, #4]
 800bbe6:	f845 c003 	str.w	ip, [r5, r3]
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bbf0:	3104      	adds	r1, #4
 800bbf2:	f1b9 0f00 	cmp.w	r9, #0
 800bbf6:	d021      	beq.n	800bc3c <__multiply+0x144>
 800bbf8:	682b      	ldr	r3, [r5, #0]
 800bbfa:	f104 0c14 	add.w	ip, r4, #20
 800bbfe:	46ae      	mov	lr, r5
 800bc00:	f04f 0a00 	mov.w	sl, #0
 800bc04:	f8bc b000 	ldrh.w	fp, [ip]
 800bc08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bc0c:	fb09 770b 	mla	r7, r9, fp, r7
 800bc10:	4457      	add	r7, sl
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc18:	f84e 3b04 	str.w	r3, [lr], #4
 800bc1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc24:	f8be 3000 	ldrh.w	r3, [lr]
 800bc28:	fb09 330a 	mla	r3, r9, sl, r3
 800bc2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bc30:	4562      	cmp	r2, ip
 800bc32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc36:	d8e5      	bhi.n	800bc04 <__multiply+0x10c>
 800bc38:	9f01      	ldr	r7, [sp, #4]
 800bc3a:	51eb      	str	r3, [r5, r7]
 800bc3c:	3504      	adds	r5, #4
 800bc3e:	e799      	b.n	800bb74 <__multiply+0x7c>
 800bc40:	3e01      	subs	r6, #1
 800bc42:	e79b      	b.n	800bb7c <__multiply+0x84>
 800bc44:	0800e839 	.word	0x0800e839
 800bc48:	0800e84a 	.word	0x0800e84a

0800bc4c <__pow5mult>:
 800bc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc50:	4615      	mov	r5, r2
 800bc52:	f012 0203 	ands.w	r2, r2, #3
 800bc56:	4607      	mov	r7, r0
 800bc58:	460e      	mov	r6, r1
 800bc5a:	d007      	beq.n	800bc6c <__pow5mult+0x20>
 800bc5c:	4c25      	ldr	r4, [pc, #148]	@ (800bcf4 <__pow5mult+0xa8>)
 800bc5e:	3a01      	subs	r2, #1
 800bc60:	2300      	movs	r3, #0
 800bc62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc66:	f7ff fe55 	bl	800b914 <__multadd>
 800bc6a:	4606      	mov	r6, r0
 800bc6c:	10ad      	asrs	r5, r5, #2
 800bc6e:	d03d      	beq.n	800bcec <__pow5mult+0xa0>
 800bc70:	69fc      	ldr	r4, [r7, #28]
 800bc72:	b97c      	cbnz	r4, 800bc94 <__pow5mult+0x48>
 800bc74:	2010      	movs	r0, #16
 800bc76:	f7ff fd35 	bl	800b6e4 <malloc>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	61f8      	str	r0, [r7, #28]
 800bc7e:	b928      	cbnz	r0, 800bc8c <__pow5mult+0x40>
 800bc80:	4b1d      	ldr	r3, [pc, #116]	@ (800bcf8 <__pow5mult+0xac>)
 800bc82:	481e      	ldr	r0, [pc, #120]	@ (800bcfc <__pow5mult+0xb0>)
 800bc84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc88:	f001 fd1a 	bl	800d6c0 <__assert_func>
 800bc8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc90:	6004      	str	r4, [r0, #0]
 800bc92:	60c4      	str	r4, [r0, #12]
 800bc94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc9c:	b94c      	cbnz	r4, 800bcb2 <__pow5mult+0x66>
 800bc9e:	f240 2171 	movw	r1, #625	@ 0x271
 800bca2:	4638      	mov	r0, r7
 800bca4:	f7ff ff12 	bl	800bacc <__i2b>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcae:	4604      	mov	r4, r0
 800bcb0:	6003      	str	r3, [r0, #0]
 800bcb2:	f04f 0900 	mov.w	r9, #0
 800bcb6:	07eb      	lsls	r3, r5, #31
 800bcb8:	d50a      	bpl.n	800bcd0 <__pow5mult+0x84>
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4622      	mov	r2, r4
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	f7ff ff1a 	bl	800baf8 <__multiply>
 800bcc4:	4631      	mov	r1, r6
 800bcc6:	4680      	mov	r8, r0
 800bcc8:	4638      	mov	r0, r7
 800bcca:	f7ff fe01 	bl	800b8d0 <_Bfree>
 800bcce:	4646      	mov	r6, r8
 800bcd0:	106d      	asrs	r5, r5, #1
 800bcd2:	d00b      	beq.n	800bcec <__pow5mult+0xa0>
 800bcd4:	6820      	ldr	r0, [r4, #0]
 800bcd6:	b938      	cbnz	r0, 800bce8 <__pow5mult+0x9c>
 800bcd8:	4622      	mov	r2, r4
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f7ff ff0b 	bl	800baf8 <__multiply>
 800bce2:	6020      	str	r0, [r4, #0]
 800bce4:	f8c0 9000 	str.w	r9, [r0]
 800bce8:	4604      	mov	r4, r0
 800bcea:	e7e4      	b.n	800bcb6 <__pow5mult+0x6a>
 800bcec:	4630      	mov	r0, r6
 800bcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf2:	bf00      	nop
 800bcf4:	0800e8a4 	.word	0x0800e8a4
 800bcf8:	0800e7ca 	.word	0x0800e7ca
 800bcfc:	0800e84a 	.word	0x0800e84a

0800bd00 <__lshift>:
 800bd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd04:	460c      	mov	r4, r1
 800bd06:	6849      	ldr	r1, [r1, #4]
 800bd08:	6923      	ldr	r3, [r4, #16]
 800bd0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd0e:	68a3      	ldr	r3, [r4, #8]
 800bd10:	4607      	mov	r7, r0
 800bd12:	4691      	mov	r9, r2
 800bd14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd18:	f108 0601 	add.w	r6, r8, #1
 800bd1c:	42b3      	cmp	r3, r6
 800bd1e:	db0b      	blt.n	800bd38 <__lshift+0x38>
 800bd20:	4638      	mov	r0, r7
 800bd22:	f7ff fd95 	bl	800b850 <_Balloc>
 800bd26:	4605      	mov	r5, r0
 800bd28:	b948      	cbnz	r0, 800bd3e <__lshift+0x3e>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	4b28      	ldr	r3, [pc, #160]	@ (800bdd0 <__lshift+0xd0>)
 800bd2e:	4829      	ldr	r0, [pc, #164]	@ (800bdd4 <__lshift+0xd4>)
 800bd30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd34:	f001 fcc4 	bl	800d6c0 <__assert_func>
 800bd38:	3101      	adds	r1, #1
 800bd3a:	005b      	lsls	r3, r3, #1
 800bd3c:	e7ee      	b.n	800bd1c <__lshift+0x1c>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f100 0114 	add.w	r1, r0, #20
 800bd44:	f100 0210 	add.w	r2, r0, #16
 800bd48:	4618      	mov	r0, r3
 800bd4a:	4553      	cmp	r3, sl
 800bd4c:	db33      	blt.n	800bdb6 <__lshift+0xb6>
 800bd4e:	6920      	ldr	r0, [r4, #16]
 800bd50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd54:	f104 0314 	add.w	r3, r4, #20
 800bd58:	f019 091f 	ands.w	r9, r9, #31
 800bd5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd64:	d02b      	beq.n	800bdbe <__lshift+0xbe>
 800bd66:	f1c9 0e20 	rsb	lr, r9, #32
 800bd6a:	468a      	mov	sl, r1
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	6818      	ldr	r0, [r3, #0]
 800bd70:	fa00 f009 	lsl.w	r0, r0, r9
 800bd74:	4310      	orrs	r0, r2
 800bd76:	f84a 0b04 	str.w	r0, [sl], #4
 800bd7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd7e:	459c      	cmp	ip, r3
 800bd80:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd84:	d8f3      	bhi.n	800bd6e <__lshift+0x6e>
 800bd86:	ebac 0304 	sub.w	r3, ip, r4
 800bd8a:	3b15      	subs	r3, #21
 800bd8c:	f023 0303 	bic.w	r3, r3, #3
 800bd90:	3304      	adds	r3, #4
 800bd92:	f104 0015 	add.w	r0, r4, #21
 800bd96:	4584      	cmp	ip, r0
 800bd98:	bf38      	it	cc
 800bd9a:	2304      	movcc	r3, #4
 800bd9c:	50ca      	str	r2, [r1, r3]
 800bd9e:	b10a      	cbz	r2, 800bda4 <__lshift+0xa4>
 800bda0:	f108 0602 	add.w	r6, r8, #2
 800bda4:	3e01      	subs	r6, #1
 800bda6:	4638      	mov	r0, r7
 800bda8:	612e      	str	r6, [r5, #16]
 800bdaa:	4621      	mov	r1, r4
 800bdac:	f7ff fd90 	bl	800b8d0 <_Bfree>
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdba:	3301      	adds	r3, #1
 800bdbc:	e7c5      	b.n	800bd4a <__lshift+0x4a>
 800bdbe:	3904      	subs	r1, #4
 800bdc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdc8:	459c      	cmp	ip, r3
 800bdca:	d8f9      	bhi.n	800bdc0 <__lshift+0xc0>
 800bdcc:	e7ea      	b.n	800bda4 <__lshift+0xa4>
 800bdce:	bf00      	nop
 800bdd0:	0800e839 	.word	0x0800e839
 800bdd4:	0800e84a 	.word	0x0800e84a

0800bdd8 <__mcmp>:
 800bdd8:	690a      	ldr	r2, [r1, #16]
 800bdda:	4603      	mov	r3, r0
 800bddc:	6900      	ldr	r0, [r0, #16]
 800bdde:	1a80      	subs	r0, r0, r2
 800bde0:	b530      	push	{r4, r5, lr}
 800bde2:	d10e      	bne.n	800be02 <__mcmp+0x2a>
 800bde4:	3314      	adds	r3, #20
 800bde6:	3114      	adds	r1, #20
 800bde8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bdec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bdf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bdf8:	4295      	cmp	r5, r2
 800bdfa:	d003      	beq.n	800be04 <__mcmp+0x2c>
 800bdfc:	d205      	bcs.n	800be0a <__mcmp+0x32>
 800bdfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be02:	bd30      	pop	{r4, r5, pc}
 800be04:	42a3      	cmp	r3, r4
 800be06:	d3f3      	bcc.n	800bdf0 <__mcmp+0x18>
 800be08:	e7fb      	b.n	800be02 <__mcmp+0x2a>
 800be0a:	2001      	movs	r0, #1
 800be0c:	e7f9      	b.n	800be02 <__mcmp+0x2a>
	...

0800be10 <__mdiff>:
 800be10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	4689      	mov	r9, r1
 800be16:	4606      	mov	r6, r0
 800be18:	4611      	mov	r1, r2
 800be1a:	4648      	mov	r0, r9
 800be1c:	4614      	mov	r4, r2
 800be1e:	f7ff ffdb 	bl	800bdd8 <__mcmp>
 800be22:	1e05      	subs	r5, r0, #0
 800be24:	d112      	bne.n	800be4c <__mdiff+0x3c>
 800be26:	4629      	mov	r1, r5
 800be28:	4630      	mov	r0, r6
 800be2a:	f7ff fd11 	bl	800b850 <_Balloc>
 800be2e:	4602      	mov	r2, r0
 800be30:	b928      	cbnz	r0, 800be3e <__mdiff+0x2e>
 800be32:	4b3f      	ldr	r3, [pc, #252]	@ (800bf30 <__mdiff+0x120>)
 800be34:	f240 2137 	movw	r1, #567	@ 0x237
 800be38:	483e      	ldr	r0, [pc, #248]	@ (800bf34 <__mdiff+0x124>)
 800be3a:	f001 fc41 	bl	800d6c0 <__assert_func>
 800be3e:	2301      	movs	r3, #1
 800be40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be44:	4610      	mov	r0, r2
 800be46:	b003      	add	sp, #12
 800be48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4c:	bfbc      	itt	lt
 800be4e:	464b      	movlt	r3, r9
 800be50:	46a1      	movlt	r9, r4
 800be52:	4630      	mov	r0, r6
 800be54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be58:	bfba      	itte	lt
 800be5a:	461c      	movlt	r4, r3
 800be5c:	2501      	movlt	r5, #1
 800be5e:	2500      	movge	r5, #0
 800be60:	f7ff fcf6 	bl	800b850 <_Balloc>
 800be64:	4602      	mov	r2, r0
 800be66:	b918      	cbnz	r0, 800be70 <__mdiff+0x60>
 800be68:	4b31      	ldr	r3, [pc, #196]	@ (800bf30 <__mdiff+0x120>)
 800be6a:	f240 2145 	movw	r1, #581	@ 0x245
 800be6e:	e7e3      	b.n	800be38 <__mdiff+0x28>
 800be70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be74:	6926      	ldr	r6, [r4, #16]
 800be76:	60c5      	str	r5, [r0, #12]
 800be78:	f109 0310 	add.w	r3, r9, #16
 800be7c:	f109 0514 	add.w	r5, r9, #20
 800be80:	f104 0e14 	add.w	lr, r4, #20
 800be84:	f100 0b14 	add.w	fp, r0, #20
 800be88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	46d9      	mov	r9, fp
 800be94:	f04f 0c00 	mov.w	ip, #0
 800be98:	9b01      	ldr	r3, [sp, #4]
 800be9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	fa1f f38a 	uxth.w	r3, sl
 800bea8:	4619      	mov	r1, r3
 800beaa:	b283      	uxth	r3, r0
 800beac:	1acb      	subs	r3, r1, r3
 800beae:	0c00      	lsrs	r0, r0, #16
 800beb0:	4463      	add	r3, ip
 800beb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800beb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800beba:	b29b      	uxth	r3, r3
 800bebc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bec0:	4576      	cmp	r6, lr
 800bec2:	f849 3b04 	str.w	r3, [r9], #4
 800bec6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800beca:	d8e5      	bhi.n	800be98 <__mdiff+0x88>
 800becc:	1b33      	subs	r3, r6, r4
 800bece:	3b15      	subs	r3, #21
 800bed0:	f023 0303 	bic.w	r3, r3, #3
 800bed4:	3415      	adds	r4, #21
 800bed6:	3304      	adds	r3, #4
 800bed8:	42a6      	cmp	r6, r4
 800beda:	bf38      	it	cc
 800bedc:	2304      	movcc	r3, #4
 800bede:	441d      	add	r5, r3
 800bee0:	445b      	add	r3, fp
 800bee2:	461e      	mov	r6, r3
 800bee4:	462c      	mov	r4, r5
 800bee6:	4544      	cmp	r4, r8
 800bee8:	d30e      	bcc.n	800bf08 <__mdiff+0xf8>
 800beea:	f108 0103 	add.w	r1, r8, #3
 800beee:	1b49      	subs	r1, r1, r5
 800bef0:	f021 0103 	bic.w	r1, r1, #3
 800bef4:	3d03      	subs	r5, #3
 800bef6:	45a8      	cmp	r8, r5
 800bef8:	bf38      	it	cc
 800befa:	2100      	movcc	r1, #0
 800befc:	440b      	add	r3, r1
 800befe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf02:	b191      	cbz	r1, 800bf2a <__mdiff+0x11a>
 800bf04:	6117      	str	r7, [r2, #16]
 800bf06:	e79d      	b.n	800be44 <__mdiff+0x34>
 800bf08:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf0c:	46e6      	mov	lr, ip
 800bf0e:	0c08      	lsrs	r0, r1, #16
 800bf10:	fa1c fc81 	uxtah	ip, ip, r1
 800bf14:	4471      	add	r1, lr
 800bf16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf1a:	b289      	uxth	r1, r1
 800bf1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf20:	f846 1b04 	str.w	r1, [r6], #4
 800bf24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf28:	e7dd      	b.n	800bee6 <__mdiff+0xd6>
 800bf2a:	3f01      	subs	r7, #1
 800bf2c:	e7e7      	b.n	800befe <__mdiff+0xee>
 800bf2e:	bf00      	nop
 800bf30:	0800e839 	.word	0x0800e839
 800bf34:	0800e84a 	.word	0x0800e84a

0800bf38 <__ulp>:
 800bf38:	b082      	sub	sp, #8
 800bf3a:	ed8d 0b00 	vstr	d0, [sp]
 800bf3e:	9a01      	ldr	r2, [sp, #4]
 800bf40:	4b0f      	ldr	r3, [pc, #60]	@ (800bf80 <__ulp+0x48>)
 800bf42:	4013      	ands	r3, r2
 800bf44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	dc08      	bgt.n	800bf5e <__ulp+0x26>
 800bf4c:	425b      	negs	r3, r3
 800bf4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bf52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf56:	da04      	bge.n	800bf62 <__ulp+0x2a>
 800bf58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bf5c:	4113      	asrs	r3, r2
 800bf5e:	2200      	movs	r2, #0
 800bf60:	e008      	b.n	800bf74 <__ulp+0x3c>
 800bf62:	f1a2 0314 	sub.w	r3, r2, #20
 800bf66:	2b1e      	cmp	r3, #30
 800bf68:	bfda      	itte	le
 800bf6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bf6e:	40da      	lsrle	r2, r3
 800bf70:	2201      	movgt	r2, #1
 800bf72:	2300      	movs	r3, #0
 800bf74:	4619      	mov	r1, r3
 800bf76:	4610      	mov	r0, r2
 800bf78:	ec41 0b10 	vmov	d0, r0, r1
 800bf7c:	b002      	add	sp, #8
 800bf7e:	4770      	bx	lr
 800bf80:	7ff00000 	.word	0x7ff00000

0800bf84 <__b2d>:
 800bf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf88:	6906      	ldr	r6, [r0, #16]
 800bf8a:	f100 0814 	add.w	r8, r0, #20
 800bf8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bf92:	1f37      	subs	r7, r6, #4
 800bf94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf98:	4610      	mov	r0, r2
 800bf9a:	f7ff fd4b 	bl	800ba34 <__hi0bits>
 800bf9e:	f1c0 0320 	rsb	r3, r0, #32
 800bfa2:	280a      	cmp	r0, #10
 800bfa4:	600b      	str	r3, [r1, #0]
 800bfa6:	491b      	ldr	r1, [pc, #108]	@ (800c014 <__b2d+0x90>)
 800bfa8:	dc15      	bgt.n	800bfd6 <__b2d+0x52>
 800bfaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800bfae:	fa22 f30c 	lsr.w	r3, r2, ip
 800bfb2:	45b8      	cmp	r8, r7
 800bfb4:	ea43 0501 	orr.w	r5, r3, r1
 800bfb8:	bf34      	ite	cc
 800bfba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bfbe:	2300      	movcs	r3, #0
 800bfc0:	3015      	adds	r0, #21
 800bfc2:	fa02 f000 	lsl.w	r0, r2, r0
 800bfc6:	fa23 f30c 	lsr.w	r3, r3, ip
 800bfca:	4303      	orrs	r3, r0
 800bfcc:	461c      	mov	r4, r3
 800bfce:	ec45 4b10 	vmov	d0, r4, r5
 800bfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfd6:	45b8      	cmp	r8, r7
 800bfd8:	bf3a      	itte	cc
 800bfda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bfde:	f1a6 0708 	subcc.w	r7, r6, #8
 800bfe2:	2300      	movcs	r3, #0
 800bfe4:	380b      	subs	r0, #11
 800bfe6:	d012      	beq.n	800c00e <__b2d+0x8a>
 800bfe8:	f1c0 0120 	rsb	r1, r0, #32
 800bfec:	fa23 f401 	lsr.w	r4, r3, r1
 800bff0:	4082      	lsls	r2, r0
 800bff2:	4322      	orrs	r2, r4
 800bff4:	4547      	cmp	r7, r8
 800bff6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bffa:	bf8c      	ite	hi
 800bffc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c000:	2200      	movls	r2, #0
 800c002:	4083      	lsls	r3, r0
 800c004:	40ca      	lsrs	r2, r1
 800c006:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c00a:	4313      	orrs	r3, r2
 800c00c:	e7de      	b.n	800bfcc <__b2d+0x48>
 800c00e:	ea42 0501 	orr.w	r5, r2, r1
 800c012:	e7db      	b.n	800bfcc <__b2d+0x48>
 800c014:	3ff00000 	.word	0x3ff00000

0800c018 <__d2b>:
 800c018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c01c:	460f      	mov	r7, r1
 800c01e:	2101      	movs	r1, #1
 800c020:	ec59 8b10 	vmov	r8, r9, d0
 800c024:	4616      	mov	r6, r2
 800c026:	f7ff fc13 	bl	800b850 <_Balloc>
 800c02a:	4604      	mov	r4, r0
 800c02c:	b930      	cbnz	r0, 800c03c <__d2b+0x24>
 800c02e:	4602      	mov	r2, r0
 800c030:	4b23      	ldr	r3, [pc, #140]	@ (800c0c0 <__d2b+0xa8>)
 800c032:	4824      	ldr	r0, [pc, #144]	@ (800c0c4 <__d2b+0xac>)
 800c034:	f240 310f 	movw	r1, #783	@ 0x30f
 800c038:	f001 fb42 	bl	800d6c0 <__assert_func>
 800c03c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c044:	b10d      	cbz	r5, 800c04a <__d2b+0x32>
 800c046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	f1b8 0300 	subs.w	r3, r8, #0
 800c050:	d023      	beq.n	800c09a <__d2b+0x82>
 800c052:	4668      	mov	r0, sp
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	f7ff fd0c 	bl	800ba72 <__lo0bits>
 800c05a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c05e:	b1d0      	cbz	r0, 800c096 <__d2b+0x7e>
 800c060:	f1c0 0320 	rsb	r3, r0, #32
 800c064:	fa02 f303 	lsl.w	r3, r2, r3
 800c068:	430b      	orrs	r3, r1
 800c06a:	40c2      	lsrs	r2, r0
 800c06c:	6163      	str	r3, [r4, #20]
 800c06e:	9201      	str	r2, [sp, #4]
 800c070:	9b01      	ldr	r3, [sp, #4]
 800c072:	61a3      	str	r3, [r4, #24]
 800c074:	2b00      	cmp	r3, #0
 800c076:	bf0c      	ite	eq
 800c078:	2201      	moveq	r2, #1
 800c07a:	2202      	movne	r2, #2
 800c07c:	6122      	str	r2, [r4, #16]
 800c07e:	b1a5      	cbz	r5, 800c0aa <__d2b+0x92>
 800c080:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c084:	4405      	add	r5, r0
 800c086:	603d      	str	r5, [r7, #0]
 800c088:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c08c:	6030      	str	r0, [r6, #0]
 800c08e:	4620      	mov	r0, r4
 800c090:	b003      	add	sp, #12
 800c092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c096:	6161      	str	r1, [r4, #20]
 800c098:	e7ea      	b.n	800c070 <__d2b+0x58>
 800c09a:	a801      	add	r0, sp, #4
 800c09c:	f7ff fce9 	bl	800ba72 <__lo0bits>
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	6163      	str	r3, [r4, #20]
 800c0a4:	3020      	adds	r0, #32
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	e7e8      	b.n	800c07c <__d2b+0x64>
 800c0aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c0b2:	6038      	str	r0, [r7, #0]
 800c0b4:	6918      	ldr	r0, [r3, #16]
 800c0b6:	f7ff fcbd 	bl	800ba34 <__hi0bits>
 800c0ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0be:	e7e5      	b.n	800c08c <__d2b+0x74>
 800c0c0:	0800e839 	.word	0x0800e839
 800c0c4:	0800e84a 	.word	0x0800e84a

0800c0c8 <__ratio>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	b085      	sub	sp, #20
 800c0ce:	e9cd 1000 	strd	r1, r0, [sp]
 800c0d2:	a902      	add	r1, sp, #8
 800c0d4:	f7ff ff56 	bl	800bf84 <__b2d>
 800c0d8:	9800      	ldr	r0, [sp, #0]
 800c0da:	a903      	add	r1, sp, #12
 800c0dc:	ec55 4b10 	vmov	r4, r5, d0
 800c0e0:	f7ff ff50 	bl	800bf84 <__b2d>
 800c0e4:	9b01      	ldr	r3, [sp, #4]
 800c0e6:	6919      	ldr	r1, [r3, #16]
 800c0e8:	9b00      	ldr	r3, [sp, #0]
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	1ac9      	subs	r1, r1, r3
 800c0ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c0f2:	1a9b      	subs	r3, r3, r2
 800c0f4:	ec5b ab10 	vmov	sl, fp, d0
 800c0f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bfce      	itee	gt
 800c100:	462a      	movgt	r2, r5
 800c102:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c106:	465a      	movle	r2, fp
 800c108:	462f      	mov	r7, r5
 800c10a:	46d9      	mov	r9, fp
 800c10c:	bfcc      	ite	gt
 800c10e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c112:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c116:	464b      	mov	r3, r9
 800c118:	4652      	mov	r2, sl
 800c11a:	4620      	mov	r0, r4
 800c11c:	4639      	mov	r1, r7
 800c11e:	f7f4 fbbd 	bl	800089c <__aeabi_ddiv>
 800c122:	ec41 0b10 	vmov	d0, r0, r1
 800c126:	b005      	add	sp, #20
 800c128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c12c <__copybits>:
 800c12c:	3901      	subs	r1, #1
 800c12e:	b570      	push	{r4, r5, r6, lr}
 800c130:	1149      	asrs	r1, r1, #5
 800c132:	6914      	ldr	r4, [r2, #16]
 800c134:	3101      	adds	r1, #1
 800c136:	f102 0314 	add.w	r3, r2, #20
 800c13a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c13e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c142:	1f05      	subs	r5, r0, #4
 800c144:	42a3      	cmp	r3, r4
 800c146:	d30c      	bcc.n	800c162 <__copybits+0x36>
 800c148:	1aa3      	subs	r3, r4, r2
 800c14a:	3b11      	subs	r3, #17
 800c14c:	f023 0303 	bic.w	r3, r3, #3
 800c150:	3211      	adds	r2, #17
 800c152:	42a2      	cmp	r2, r4
 800c154:	bf88      	it	hi
 800c156:	2300      	movhi	r3, #0
 800c158:	4418      	add	r0, r3
 800c15a:	2300      	movs	r3, #0
 800c15c:	4288      	cmp	r0, r1
 800c15e:	d305      	bcc.n	800c16c <__copybits+0x40>
 800c160:	bd70      	pop	{r4, r5, r6, pc}
 800c162:	f853 6b04 	ldr.w	r6, [r3], #4
 800c166:	f845 6f04 	str.w	r6, [r5, #4]!
 800c16a:	e7eb      	b.n	800c144 <__copybits+0x18>
 800c16c:	f840 3b04 	str.w	r3, [r0], #4
 800c170:	e7f4      	b.n	800c15c <__copybits+0x30>

0800c172 <__any_on>:
 800c172:	f100 0214 	add.w	r2, r0, #20
 800c176:	6900      	ldr	r0, [r0, #16]
 800c178:	114b      	asrs	r3, r1, #5
 800c17a:	4298      	cmp	r0, r3
 800c17c:	b510      	push	{r4, lr}
 800c17e:	db11      	blt.n	800c1a4 <__any_on+0x32>
 800c180:	dd0a      	ble.n	800c198 <__any_on+0x26>
 800c182:	f011 011f 	ands.w	r1, r1, #31
 800c186:	d007      	beq.n	800c198 <__any_on+0x26>
 800c188:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c18c:	fa24 f001 	lsr.w	r0, r4, r1
 800c190:	fa00 f101 	lsl.w	r1, r0, r1
 800c194:	428c      	cmp	r4, r1
 800c196:	d10b      	bne.n	800c1b0 <__any_on+0x3e>
 800c198:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d803      	bhi.n	800c1a8 <__any_on+0x36>
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	bd10      	pop	{r4, pc}
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	e7f7      	b.n	800c198 <__any_on+0x26>
 800c1a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1ac:	2900      	cmp	r1, #0
 800c1ae:	d0f5      	beq.n	800c19c <__any_on+0x2a>
 800c1b0:	2001      	movs	r0, #1
 800c1b2:	e7f6      	b.n	800c1a2 <__any_on+0x30>

0800c1b4 <sulp>:
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	460d      	mov	r5, r1
 800c1ba:	ec45 4b10 	vmov	d0, r4, r5
 800c1be:	4616      	mov	r6, r2
 800c1c0:	f7ff feba 	bl	800bf38 <__ulp>
 800c1c4:	ec51 0b10 	vmov	r0, r1, d0
 800c1c8:	b17e      	cbz	r6, 800c1ea <sulp+0x36>
 800c1ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c1ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	dd09      	ble.n	800c1ea <sulp+0x36>
 800c1d6:	051b      	lsls	r3, r3, #20
 800c1d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c1dc:	2400      	movs	r4, #0
 800c1de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c1e2:	4622      	mov	r2, r4
 800c1e4:	462b      	mov	r3, r5
 800c1e6:	f7f4 fa2f 	bl	8000648 <__aeabi_dmul>
 800c1ea:	ec41 0b10 	vmov	d0, r0, r1
 800c1ee:	bd70      	pop	{r4, r5, r6, pc}

0800c1f0 <_strtod_l>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	b09f      	sub	sp, #124	@ 0x7c
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c1fe:	9005      	str	r0, [sp, #20]
 800c200:	f04f 0a00 	mov.w	sl, #0
 800c204:	f04f 0b00 	mov.w	fp, #0
 800c208:	460a      	mov	r2, r1
 800c20a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c20c:	7811      	ldrb	r1, [r2, #0]
 800c20e:	292b      	cmp	r1, #43	@ 0x2b
 800c210:	d04a      	beq.n	800c2a8 <_strtod_l+0xb8>
 800c212:	d838      	bhi.n	800c286 <_strtod_l+0x96>
 800c214:	290d      	cmp	r1, #13
 800c216:	d832      	bhi.n	800c27e <_strtod_l+0x8e>
 800c218:	2908      	cmp	r1, #8
 800c21a:	d832      	bhi.n	800c282 <_strtod_l+0x92>
 800c21c:	2900      	cmp	r1, #0
 800c21e:	d03b      	beq.n	800c298 <_strtod_l+0xa8>
 800c220:	2200      	movs	r2, #0
 800c222:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c224:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c226:	782a      	ldrb	r2, [r5, #0]
 800c228:	2a30      	cmp	r2, #48	@ 0x30
 800c22a:	f040 80b3 	bne.w	800c394 <_strtod_l+0x1a4>
 800c22e:	786a      	ldrb	r2, [r5, #1]
 800c230:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c234:	2a58      	cmp	r2, #88	@ 0x58
 800c236:	d16e      	bne.n	800c316 <_strtod_l+0x126>
 800c238:	9302      	str	r3, [sp, #8]
 800c23a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c23c:	9301      	str	r3, [sp, #4]
 800c23e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	4a8e      	ldr	r2, [pc, #568]	@ (800c47c <_strtod_l+0x28c>)
 800c244:	9805      	ldr	r0, [sp, #20]
 800c246:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c248:	a919      	add	r1, sp, #100	@ 0x64
 800c24a:	f001 fad3 	bl	800d7f4 <__gethex>
 800c24e:	f010 060f 	ands.w	r6, r0, #15
 800c252:	4604      	mov	r4, r0
 800c254:	d005      	beq.n	800c262 <_strtod_l+0x72>
 800c256:	2e06      	cmp	r6, #6
 800c258:	d128      	bne.n	800c2ac <_strtod_l+0xbc>
 800c25a:	3501      	adds	r5, #1
 800c25c:	2300      	movs	r3, #0
 800c25e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c260:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c264:	2b00      	cmp	r3, #0
 800c266:	f040 858e 	bne.w	800cd86 <_strtod_l+0xb96>
 800c26a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c26c:	b1cb      	cbz	r3, 800c2a2 <_strtod_l+0xb2>
 800c26e:	4652      	mov	r2, sl
 800c270:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c274:	ec43 2b10 	vmov	d0, r2, r3
 800c278:	b01f      	add	sp, #124	@ 0x7c
 800c27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c27e:	2920      	cmp	r1, #32
 800c280:	d1ce      	bne.n	800c220 <_strtod_l+0x30>
 800c282:	3201      	adds	r2, #1
 800c284:	e7c1      	b.n	800c20a <_strtod_l+0x1a>
 800c286:	292d      	cmp	r1, #45	@ 0x2d
 800c288:	d1ca      	bne.n	800c220 <_strtod_l+0x30>
 800c28a:	2101      	movs	r1, #1
 800c28c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c28e:	1c51      	adds	r1, r2, #1
 800c290:	9119      	str	r1, [sp, #100]	@ 0x64
 800c292:	7852      	ldrb	r2, [r2, #1]
 800c294:	2a00      	cmp	r2, #0
 800c296:	d1c5      	bne.n	800c224 <_strtod_l+0x34>
 800c298:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c29a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f040 8570 	bne.w	800cd82 <_strtod_l+0xb92>
 800c2a2:	4652      	mov	r2, sl
 800c2a4:	465b      	mov	r3, fp
 800c2a6:	e7e5      	b.n	800c274 <_strtod_l+0x84>
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	e7ef      	b.n	800c28c <_strtod_l+0x9c>
 800c2ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c2ae:	b13a      	cbz	r2, 800c2c0 <_strtod_l+0xd0>
 800c2b0:	2135      	movs	r1, #53	@ 0x35
 800c2b2:	a81c      	add	r0, sp, #112	@ 0x70
 800c2b4:	f7ff ff3a 	bl	800c12c <__copybits>
 800c2b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2ba:	9805      	ldr	r0, [sp, #20]
 800c2bc:	f7ff fb08 	bl	800b8d0 <_Bfree>
 800c2c0:	3e01      	subs	r6, #1
 800c2c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c2c4:	2e04      	cmp	r6, #4
 800c2c6:	d806      	bhi.n	800c2d6 <_strtod_l+0xe6>
 800c2c8:	e8df f006 	tbb	[pc, r6]
 800c2cc:	201d0314 	.word	0x201d0314
 800c2d0:	14          	.byte	0x14
 800c2d1:	00          	.byte	0x00
 800c2d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c2d6:	05e1      	lsls	r1, r4, #23
 800c2d8:	bf48      	it	mi
 800c2da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c2de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2e2:	0d1b      	lsrs	r3, r3, #20
 800c2e4:	051b      	lsls	r3, r3, #20
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1bb      	bne.n	800c262 <_strtod_l+0x72>
 800c2ea:	f7fe fb31 	bl	800a950 <__errno>
 800c2ee:	2322      	movs	r3, #34	@ 0x22
 800c2f0:	6003      	str	r3, [r0, #0]
 800c2f2:	e7b6      	b.n	800c262 <_strtod_l+0x72>
 800c2f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c2f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c2fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c300:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c304:	e7e7      	b.n	800c2d6 <_strtod_l+0xe6>
 800c306:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c484 <_strtod_l+0x294>
 800c30a:	e7e4      	b.n	800c2d6 <_strtod_l+0xe6>
 800c30c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c310:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c314:	e7df      	b.n	800c2d6 <_strtod_l+0xe6>
 800c316:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c318:	1c5a      	adds	r2, r3, #1
 800c31a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c31c:	785b      	ldrb	r3, [r3, #1]
 800c31e:	2b30      	cmp	r3, #48	@ 0x30
 800c320:	d0f9      	beq.n	800c316 <_strtod_l+0x126>
 800c322:	2b00      	cmp	r3, #0
 800c324:	d09d      	beq.n	800c262 <_strtod_l+0x72>
 800c326:	2301      	movs	r3, #1
 800c328:	9309      	str	r3, [sp, #36]	@ 0x24
 800c32a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c32c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c32e:	2300      	movs	r3, #0
 800c330:	9308      	str	r3, [sp, #32]
 800c332:	930a      	str	r3, [sp, #40]	@ 0x28
 800c334:	461f      	mov	r7, r3
 800c336:	220a      	movs	r2, #10
 800c338:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c33a:	7805      	ldrb	r5, [r0, #0]
 800c33c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c340:	b2d9      	uxtb	r1, r3
 800c342:	2909      	cmp	r1, #9
 800c344:	d928      	bls.n	800c398 <_strtod_l+0x1a8>
 800c346:	494e      	ldr	r1, [pc, #312]	@ (800c480 <_strtod_l+0x290>)
 800c348:	2201      	movs	r2, #1
 800c34a:	f001 f95f 	bl	800d60c <strncmp>
 800c34e:	2800      	cmp	r0, #0
 800c350:	d032      	beq.n	800c3b8 <_strtod_l+0x1c8>
 800c352:	2000      	movs	r0, #0
 800c354:	462a      	mov	r2, r5
 800c356:	4681      	mov	r9, r0
 800c358:	463d      	mov	r5, r7
 800c35a:	4603      	mov	r3, r0
 800c35c:	2a65      	cmp	r2, #101	@ 0x65
 800c35e:	d001      	beq.n	800c364 <_strtod_l+0x174>
 800c360:	2a45      	cmp	r2, #69	@ 0x45
 800c362:	d114      	bne.n	800c38e <_strtod_l+0x19e>
 800c364:	b91d      	cbnz	r5, 800c36e <_strtod_l+0x17e>
 800c366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c368:	4302      	orrs	r2, r0
 800c36a:	d095      	beq.n	800c298 <_strtod_l+0xa8>
 800c36c:	2500      	movs	r5, #0
 800c36e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c370:	1c62      	adds	r2, r4, #1
 800c372:	9219      	str	r2, [sp, #100]	@ 0x64
 800c374:	7862      	ldrb	r2, [r4, #1]
 800c376:	2a2b      	cmp	r2, #43	@ 0x2b
 800c378:	d077      	beq.n	800c46a <_strtod_l+0x27a>
 800c37a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c37c:	d07b      	beq.n	800c476 <_strtod_l+0x286>
 800c37e:	f04f 0c00 	mov.w	ip, #0
 800c382:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c386:	2909      	cmp	r1, #9
 800c388:	f240 8082 	bls.w	800c490 <_strtod_l+0x2a0>
 800c38c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c38e:	f04f 0800 	mov.w	r8, #0
 800c392:	e0a2      	b.n	800c4da <_strtod_l+0x2ea>
 800c394:	2300      	movs	r3, #0
 800c396:	e7c7      	b.n	800c328 <_strtod_l+0x138>
 800c398:	2f08      	cmp	r7, #8
 800c39a:	bfd5      	itete	le
 800c39c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c39e:	9908      	ldrgt	r1, [sp, #32]
 800c3a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c3a8:	f100 0001 	add.w	r0, r0, #1
 800c3ac:	bfd4      	ite	le
 800c3ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c3b0:	9308      	strgt	r3, [sp, #32]
 800c3b2:	3701      	adds	r7, #1
 800c3b4:	9019      	str	r0, [sp, #100]	@ 0x64
 800c3b6:	e7bf      	b.n	800c338 <_strtod_l+0x148>
 800c3b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3ba:	1c5a      	adds	r2, r3, #1
 800c3bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3be:	785a      	ldrb	r2, [r3, #1]
 800c3c0:	b37f      	cbz	r7, 800c422 <_strtod_l+0x232>
 800c3c2:	4681      	mov	r9, r0
 800c3c4:	463d      	mov	r5, r7
 800c3c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c3ca:	2b09      	cmp	r3, #9
 800c3cc:	d912      	bls.n	800c3f4 <_strtod_l+0x204>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e7c4      	b.n	800c35c <_strtod_l+0x16c>
 800c3d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3d4:	1c5a      	adds	r2, r3, #1
 800c3d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3d8:	785a      	ldrb	r2, [r3, #1]
 800c3da:	3001      	adds	r0, #1
 800c3dc:	2a30      	cmp	r2, #48	@ 0x30
 800c3de:	d0f8      	beq.n	800c3d2 <_strtod_l+0x1e2>
 800c3e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c3e4:	2b08      	cmp	r3, #8
 800c3e6:	f200 84d3 	bhi.w	800cd90 <_strtod_l+0xba0>
 800c3ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3ee:	4681      	mov	r9, r0
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	3a30      	subs	r2, #48	@ 0x30
 800c3f6:	f100 0301 	add.w	r3, r0, #1
 800c3fa:	d02a      	beq.n	800c452 <_strtod_l+0x262>
 800c3fc:	4499      	add	r9, r3
 800c3fe:	eb00 0c05 	add.w	ip, r0, r5
 800c402:	462b      	mov	r3, r5
 800c404:	210a      	movs	r1, #10
 800c406:	4563      	cmp	r3, ip
 800c408:	d10d      	bne.n	800c426 <_strtod_l+0x236>
 800c40a:	1c69      	adds	r1, r5, #1
 800c40c:	4401      	add	r1, r0
 800c40e:	4428      	add	r0, r5
 800c410:	2808      	cmp	r0, #8
 800c412:	dc16      	bgt.n	800c442 <_strtod_l+0x252>
 800c414:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c416:	230a      	movs	r3, #10
 800c418:	fb03 2300 	mla	r3, r3, r0, r2
 800c41c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c41e:	2300      	movs	r3, #0
 800c420:	e018      	b.n	800c454 <_strtod_l+0x264>
 800c422:	4638      	mov	r0, r7
 800c424:	e7da      	b.n	800c3dc <_strtod_l+0x1ec>
 800c426:	2b08      	cmp	r3, #8
 800c428:	f103 0301 	add.w	r3, r3, #1
 800c42c:	dc03      	bgt.n	800c436 <_strtod_l+0x246>
 800c42e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c430:	434e      	muls	r6, r1
 800c432:	960a      	str	r6, [sp, #40]	@ 0x28
 800c434:	e7e7      	b.n	800c406 <_strtod_l+0x216>
 800c436:	2b10      	cmp	r3, #16
 800c438:	bfde      	ittt	le
 800c43a:	9e08      	ldrle	r6, [sp, #32]
 800c43c:	434e      	mulle	r6, r1
 800c43e:	9608      	strle	r6, [sp, #32]
 800c440:	e7e1      	b.n	800c406 <_strtod_l+0x216>
 800c442:	280f      	cmp	r0, #15
 800c444:	dceb      	bgt.n	800c41e <_strtod_l+0x22e>
 800c446:	9808      	ldr	r0, [sp, #32]
 800c448:	230a      	movs	r3, #10
 800c44a:	fb03 2300 	mla	r3, r3, r0, r2
 800c44e:	9308      	str	r3, [sp, #32]
 800c450:	e7e5      	b.n	800c41e <_strtod_l+0x22e>
 800c452:	4629      	mov	r1, r5
 800c454:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c456:	1c50      	adds	r0, r2, #1
 800c458:	9019      	str	r0, [sp, #100]	@ 0x64
 800c45a:	7852      	ldrb	r2, [r2, #1]
 800c45c:	4618      	mov	r0, r3
 800c45e:	460d      	mov	r5, r1
 800c460:	e7b1      	b.n	800c3c6 <_strtod_l+0x1d6>
 800c462:	f04f 0900 	mov.w	r9, #0
 800c466:	2301      	movs	r3, #1
 800c468:	e77d      	b.n	800c366 <_strtod_l+0x176>
 800c46a:	f04f 0c00 	mov.w	ip, #0
 800c46e:	1ca2      	adds	r2, r4, #2
 800c470:	9219      	str	r2, [sp, #100]	@ 0x64
 800c472:	78a2      	ldrb	r2, [r4, #2]
 800c474:	e785      	b.n	800c382 <_strtod_l+0x192>
 800c476:	f04f 0c01 	mov.w	ip, #1
 800c47a:	e7f8      	b.n	800c46e <_strtod_l+0x27e>
 800c47c:	0800e9b8 	.word	0x0800e9b8
 800c480:	0800e9a0 	.word	0x0800e9a0
 800c484:	7ff00000 	.word	0x7ff00000
 800c488:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c48a:	1c51      	adds	r1, r2, #1
 800c48c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c48e:	7852      	ldrb	r2, [r2, #1]
 800c490:	2a30      	cmp	r2, #48	@ 0x30
 800c492:	d0f9      	beq.n	800c488 <_strtod_l+0x298>
 800c494:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c498:	2908      	cmp	r1, #8
 800c49a:	f63f af78 	bhi.w	800c38e <_strtod_l+0x19e>
 800c49e:	3a30      	subs	r2, #48	@ 0x30
 800c4a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c4a6:	f04f 080a 	mov.w	r8, #10
 800c4aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4ac:	1c56      	adds	r6, r2, #1
 800c4ae:	9619      	str	r6, [sp, #100]	@ 0x64
 800c4b0:	7852      	ldrb	r2, [r2, #1]
 800c4b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c4b6:	f1be 0f09 	cmp.w	lr, #9
 800c4ba:	d939      	bls.n	800c530 <_strtod_l+0x340>
 800c4bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c4be:	1a76      	subs	r6, r6, r1
 800c4c0:	2e08      	cmp	r6, #8
 800c4c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c4c6:	dc03      	bgt.n	800c4d0 <_strtod_l+0x2e0>
 800c4c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c4ca:	4588      	cmp	r8, r1
 800c4cc:	bfa8      	it	ge
 800c4ce:	4688      	movge	r8, r1
 800c4d0:	f1bc 0f00 	cmp.w	ip, #0
 800c4d4:	d001      	beq.n	800c4da <_strtod_l+0x2ea>
 800c4d6:	f1c8 0800 	rsb	r8, r8, #0
 800c4da:	2d00      	cmp	r5, #0
 800c4dc:	d14e      	bne.n	800c57c <_strtod_l+0x38c>
 800c4de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4e0:	4308      	orrs	r0, r1
 800c4e2:	f47f aebe 	bne.w	800c262 <_strtod_l+0x72>
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f47f aed6 	bne.w	800c298 <_strtod_l+0xa8>
 800c4ec:	2a69      	cmp	r2, #105	@ 0x69
 800c4ee:	d028      	beq.n	800c542 <_strtod_l+0x352>
 800c4f0:	dc25      	bgt.n	800c53e <_strtod_l+0x34e>
 800c4f2:	2a49      	cmp	r2, #73	@ 0x49
 800c4f4:	d025      	beq.n	800c542 <_strtod_l+0x352>
 800c4f6:	2a4e      	cmp	r2, #78	@ 0x4e
 800c4f8:	f47f aece 	bne.w	800c298 <_strtod_l+0xa8>
 800c4fc:	499b      	ldr	r1, [pc, #620]	@ (800c76c <_strtod_l+0x57c>)
 800c4fe:	a819      	add	r0, sp, #100	@ 0x64
 800c500:	f001 fb9a 	bl	800dc38 <__match>
 800c504:	2800      	cmp	r0, #0
 800c506:	f43f aec7 	beq.w	800c298 <_strtod_l+0xa8>
 800c50a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	2b28      	cmp	r3, #40	@ 0x28
 800c510:	d12e      	bne.n	800c570 <_strtod_l+0x380>
 800c512:	4997      	ldr	r1, [pc, #604]	@ (800c770 <_strtod_l+0x580>)
 800c514:	aa1c      	add	r2, sp, #112	@ 0x70
 800c516:	a819      	add	r0, sp, #100	@ 0x64
 800c518:	f001 fba2 	bl	800dc60 <__hexnan>
 800c51c:	2805      	cmp	r0, #5
 800c51e:	d127      	bne.n	800c570 <_strtod_l+0x380>
 800c520:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c522:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c526:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c52a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c52e:	e698      	b.n	800c262 <_strtod_l+0x72>
 800c530:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c532:	fb08 2101 	mla	r1, r8, r1, r2
 800c536:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c53a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c53c:	e7b5      	b.n	800c4aa <_strtod_l+0x2ba>
 800c53e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c540:	e7da      	b.n	800c4f8 <_strtod_l+0x308>
 800c542:	498c      	ldr	r1, [pc, #560]	@ (800c774 <_strtod_l+0x584>)
 800c544:	a819      	add	r0, sp, #100	@ 0x64
 800c546:	f001 fb77 	bl	800dc38 <__match>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	f43f aea4 	beq.w	800c298 <_strtod_l+0xa8>
 800c550:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c552:	4989      	ldr	r1, [pc, #548]	@ (800c778 <_strtod_l+0x588>)
 800c554:	3b01      	subs	r3, #1
 800c556:	a819      	add	r0, sp, #100	@ 0x64
 800c558:	9319      	str	r3, [sp, #100]	@ 0x64
 800c55a:	f001 fb6d 	bl	800dc38 <__match>
 800c55e:	b910      	cbnz	r0, 800c566 <_strtod_l+0x376>
 800c560:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c562:	3301      	adds	r3, #1
 800c564:	9319      	str	r3, [sp, #100]	@ 0x64
 800c566:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c788 <_strtod_l+0x598>
 800c56a:	f04f 0a00 	mov.w	sl, #0
 800c56e:	e678      	b.n	800c262 <_strtod_l+0x72>
 800c570:	4882      	ldr	r0, [pc, #520]	@ (800c77c <_strtod_l+0x58c>)
 800c572:	f001 f89d 	bl	800d6b0 <nan>
 800c576:	ec5b ab10 	vmov	sl, fp, d0
 800c57a:	e672      	b.n	800c262 <_strtod_l+0x72>
 800c57c:	eba8 0309 	sub.w	r3, r8, r9
 800c580:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c582:	9309      	str	r3, [sp, #36]	@ 0x24
 800c584:	2f00      	cmp	r7, #0
 800c586:	bf08      	it	eq
 800c588:	462f      	moveq	r7, r5
 800c58a:	2d10      	cmp	r5, #16
 800c58c:	462c      	mov	r4, r5
 800c58e:	bfa8      	it	ge
 800c590:	2410      	movge	r4, #16
 800c592:	f7f3 ffdf 	bl	8000554 <__aeabi_ui2d>
 800c596:	2d09      	cmp	r5, #9
 800c598:	4682      	mov	sl, r0
 800c59a:	468b      	mov	fp, r1
 800c59c:	dc13      	bgt.n	800c5c6 <_strtod_l+0x3d6>
 800c59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f43f ae5e 	beq.w	800c262 <_strtod_l+0x72>
 800c5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a8:	dd78      	ble.n	800c69c <_strtod_l+0x4ac>
 800c5aa:	2b16      	cmp	r3, #22
 800c5ac:	dc5f      	bgt.n	800c66e <_strtod_l+0x47e>
 800c5ae:	4974      	ldr	r1, [pc, #464]	@ (800c780 <_strtod_l+0x590>)
 800c5b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c5b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5b8:	4652      	mov	r2, sl
 800c5ba:	465b      	mov	r3, fp
 800c5bc:	f7f4 f844 	bl	8000648 <__aeabi_dmul>
 800c5c0:	4682      	mov	sl, r0
 800c5c2:	468b      	mov	fp, r1
 800c5c4:	e64d      	b.n	800c262 <_strtod_l+0x72>
 800c5c6:	4b6e      	ldr	r3, [pc, #440]	@ (800c780 <_strtod_l+0x590>)
 800c5c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c5d0:	f7f4 f83a 	bl	8000648 <__aeabi_dmul>
 800c5d4:	4682      	mov	sl, r0
 800c5d6:	9808      	ldr	r0, [sp, #32]
 800c5d8:	468b      	mov	fp, r1
 800c5da:	f7f3 ffbb 	bl	8000554 <__aeabi_ui2d>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	4650      	mov	r0, sl
 800c5e4:	4659      	mov	r1, fp
 800c5e6:	f7f3 fe79 	bl	80002dc <__adddf3>
 800c5ea:	2d0f      	cmp	r5, #15
 800c5ec:	4682      	mov	sl, r0
 800c5ee:	468b      	mov	fp, r1
 800c5f0:	ddd5      	ble.n	800c59e <_strtod_l+0x3ae>
 800c5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f4:	1b2c      	subs	r4, r5, r4
 800c5f6:	441c      	add	r4, r3
 800c5f8:	2c00      	cmp	r4, #0
 800c5fa:	f340 8096 	ble.w	800c72a <_strtod_l+0x53a>
 800c5fe:	f014 030f 	ands.w	r3, r4, #15
 800c602:	d00a      	beq.n	800c61a <_strtod_l+0x42a>
 800c604:	495e      	ldr	r1, [pc, #376]	@ (800c780 <_strtod_l+0x590>)
 800c606:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c60a:	4652      	mov	r2, sl
 800c60c:	465b      	mov	r3, fp
 800c60e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c612:	f7f4 f819 	bl	8000648 <__aeabi_dmul>
 800c616:	4682      	mov	sl, r0
 800c618:	468b      	mov	fp, r1
 800c61a:	f034 040f 	bics.w	r4, r4, #15
 800c61e:	d073      	beq.n	800c708 <_strtod_l+0x518>
 800c620:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c624:	dd48      	ble.n	800c6b8 <_strtod_l+0x4c8>
 800c626:	2400      	movs	r4, #0
 800c628:	46a0      	mov	r8, r4
 800c62a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c62c:	46a1      	mov	r9, r4
 800c62e:	9a05      	ldr	r2, [sp, #20]
 800c630:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c788 <_strtod_l+0x598>
 800c634:	2322      	movs	r3, #34	@ 0x22
 800c636:	6013      	str	r3, [r2, #0]
 800c638:	f04f 0a00 	mov.w	sl, #0
 800c63c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c63e:	2b00      	cmp	r3, #0
 800c640:	f43f ae0f 	beq.w	800c262 <_strtod_l+0x72>
 800c644:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c646:	9805      	ldr	r0, [sp, #20]
 800c648:	f7ff f942 	bl	800b8d0 <_Bfree>
 800c64c:	9805      	ldr	r0, [sp, #20]
 800c64e:	4649      	mov	r1, r9
 800c650:	f7ff f93e 	bl	800b8d0 <_Bfree>
 800c654:	9805      	ldr	r0, [sp, #20]
 800c656:	4641      	mov	r1, r8
 800c658:	f7ff f93a 	bl	800b8d0 <_Bfree>
 800c65c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c65e:	9805      	ldr	r0, [sp, #20]
 800c660:	f7ff f936 	bl	800b8d0 <_Bfree>
 800c664:	9805      	ldr	r0, [sp, #20]
 800c666:	4621      	mov	r1, r4
 800c668:	f7ff f932 	bl	800b8d0 <_Bfree>
 800c66c:	e5f9      	b.n	800c262 <_strtod_l+0x72>
 800c66e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c670:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c674:	4293      	cmp	r3, r2
 800c676:	dbbc      	blt.n	800c5f2 <_strtod_l+0x402>
 800c678:	4c41      	ldr	r4, [pc, #260]	@ (800c780 <_strtod_l+0x590>)
 800c67a:	f1c5 050f 	rsb	r5, r5, #15
 800c67e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c682:	4652      	mov	r2, sl
 800c684:	465b      	mov	r3, fp
 800c686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c68a:	f7f3 ffdd 	bl	8000648 <__aeabi_dmul>
 800c68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c690:	1b5d      	subs	r5, r3, r5
 800c692:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c696:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c69a:	e78f      	b.n	800c5bc <_strtod_l+0x3cc>
 800c69c:	3316      	adds	r3, #22
 800c69e:	dba8      	blt.n	800c5f2 <_strtod_l+0x402>
 800c6a0:	4b37      	ldr	r3, [pc, #220]	@ (800c780 <_strtod_l+0x590>)
 800c6a2:	eba9 0808 	sub.w	r8, r9, r8
 800c6a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c6aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	4659      	mov	r1, fp
 800c6b2:	f7f4 f8f3 	bl	800089c <__aeabi_ddiv>
 800c6b6:	e783      	b.n	800c5c0 <_strtod_l+0x3d0>
 800c6b8:	4b32      	ldr	r3, [pc, #200]	@ (800c784 <_strtod_l+0x594>)
 800c6ba:	9308      	str	r3, [sp, #32]
 800c6bc:	2300      	movs	r3, #0
 800c6be:	1124      	asrs	r4, r4, #4
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	4659      	mov	r1, fp
 800c6c4:	461e      	mov	r6, r3
 800c6c6:	2c01      	cmp	r4, #1
 800c6c8:	dc21      	bgt.n	800c70e <_strtod_l+0x51e>
 800c6ca:	b10b      	cbz	r3, 800c6d0 <_strtod_l+0x4e0>
 800c6cc:	4682      	mov	sl, r0
 800c6ce:	468b      	mov	fp, r1
 800c6d0:	492c      	ldr	r1, [pc, #176]	@ (800c784 <_strtod_l+0x594>)
 800c6d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c6d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c6da:	4652      	mov	r2, sl
 800c6dc:	465b      	mov	r3, fp
 800c6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e2:	f7f3 ffb1 	bl	8000648 <__aeabi_dmul>
 800c6e6:	4b28      	ldr	r3, [pc, #160]	@ (800c788 <_strtod_l+0x598>)
 800c6e8:	460a      	mov	r2, r1
 800c6ea:	400b      	ands	r3, r1
 800c6ec:	4927      	ldr	r1, [pc, #156]	@ (800c78c <_strtod_l+0x59c>)
 800c6ee:	428b      	cmp	r3, r1
 800c6f0:	4682      	mov	sl, r0
 800c6f2:	d898      	bhi.n	800c626 <_strtod_l+0x436>
 800c6f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c6f8:	428b      	cmp	r3, r1
 800c6fa:	bf86      	itte	hi
 800c6fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c790 <_strtod_l+0x5a0>
 800c700:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800c704:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c708:	2300      	movs	r3, #0
 800c70a:	9308      	str	r3, [sp, #32]
 800c70c:	e07a      	b.n	800c804 <_strtod_l+0x614>
 800c70e:	07e2      	lsls	r2, r4, #31
 800c710:	d505      	bpl.n	800c71e <_strtod_l+0x52e>
 800c712:	9b08      	ldr	r3, [sp, #32]
 800c714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c718:	f7f3 ff96 	bl	8000648 <__aeabi_dmul>
 800c71c:	2301      	movs	r3, #1
 800c71e:	9a08      	ldr	r2, [sp, #32]
 800c720:	3208      	adds	r2, #8
 800c722:	3601      	adds	r6, #1
 800c724:	1064      	asrs	r4, r4, #1
 800c726:	9208      	str	r2, [sp, #32]
 800c728:	e7cd      	b.n	800c6c6 <_strtod_l+0x4d6>
 800c72a:	d0ed      	beq.n	800c708 <_strtod_l+0x518>
 800c72c:	4264      	negs	r4, r4
 800c72e:	f014 020f 	ands.w	r2, r4, #15
 800c732:	d00a      	beq.n	800c74a <_strtod_l+0x55a>
 800c734:	4b12      	ldr	r3, [pc, #72]	@ (800c780 <_strtod_l+0x590>)
 800c736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c73a:	4650      	mov	r0, sl
 800c73c:	4659      	mov	r1, fp
 800c73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c742:	f7f4 f8ab 	bl	800089c <__aeabi_ddiv>
 800c746:	4682      	mov	sl, r0
 800c748:	468b      	mov	fp, r1
 800c74a:	1124      	asrs	r4, r4, #4
 800c74c:	d0dc      	beq.n	800c708 <_strtod_l+0x518>
 800c74e:	2c1f      	cmp	r4, #31
 800c750:	dd20      	ble.n	800c794 <_strtod_l+0x5a4>
 800c752:	2400      	movs	r4, #0
 800c754:	46a0      	mov	r8, r4
 800c756:	940a      	str	r4, [sp, #40]	@ 0x28
 800c758:	46a1      	mov	r9, r4
 800c75a:	9a05      	ldr	r2, [sp, #20]
 800c75c:	2322      	movs	r3, #34	@ 0x22
 800c75e:	f04f 0a00 	mov.w	sl, #0
 800c762:	f04f 0b00 	mov.w	fp, #0
 800c766:	6013      	str	r3, [r2, #0]
 800c768:	e768      	b.n	800c63c <_strtod_l+0x44c>
 800c76a:	bf00      	nop
 800c76c:	0800e791 	.word	0x0800e791
 800c770:	0800e9a4 	.word	0x0800e9a4
 800c774:	0800e789 	.word	0x0800e789
 800c778:	0800e7c0 	.word	0x0800e7c0
 800c77c:	0800eb4d 	.word	0x0800eb4d
 800c780:	0800e8d8 	.word	0x0800e8d8
 800c784:	0800e8b0 	.word	0x0800e8b0
 800c788:	7ff00000 	.word	0x7ff00000
 800c78c:	7ca00000 	.word	0x7ca00000
 800c790:	7fefffff 	.word	0x7fefffff
 800c794:	f014 0310 	ands.w	r3, r4, #16
 800c798:	bf18      	it	ne
 800c79a:	236a      	movne	r3, #106	@ 0x6a
 800c79c:	4ea9      	ldr	r6, [pc, #676]	@ (800ca44 <_strtod_l+0x854>)
 800c79e:	9308      	str	r3, [sp, #32]
 800c7a0:	4650      	mov	r0, sl
 800c7a2:	4659      	mov	r1, fp
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	07e2      	lsls	r2, r4, #31
 800c7a8:	d504      	bpl.n	800c7b4 <_strtod_l+0x5c4>
 800c7aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7ae:	f7f3 ff4b 	bl	8000648 <__aeabi_dmul>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	1064      	asrs	r4, r4, #1
 800c7b6:	f106 0608 	add.w	r6, r6, #8
 800c7ba:	d1f4      	bne.n	800c7a6 <_strtod_l+0x5b6>
 800c7bc:	b10b      	cbz	r3, 800c7c2 <_strtod_l+0x5d2>
 800c7be:	4682      	mov	sl, r0
 800c7c0:	468b      	mov	fp, r1
 800c7c2:	9b08      	ldr	r3, [sp, #32]
 800c7c4:	b1b3      	cbz	r3, 800c7f4 <_strtod_l+0x604>
 800c7c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c7ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	4659      	mov	r1, fp
 800c7d2:	dd0f      	ble.n	800c7f4 <_strtod_l+0x604>
 800c7d4:	2b1f      	cmp	r3, #31
 800c7d6:	dd55      	ble.n	800c884 <_strtod_l+0x694>
 800c7d8:	2b34      	cmp	r3, #52	@ 0x34
 800c7da:	bfde      	ittt	le
 800c7dc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800c7e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c7e4:	4093      	lslle	r3, r2
 800c7e6:	f04f 0a00 	mov.w	sl, #0
 800c7ea:	bfcc      	ite	gt
 800c7ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c7f0:	ea03 0b01 	andle.w	fp, r3, r1
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	4659      	mov	r1, fp
 800c7fc:	f7f4 f98c 	bl	8000b18 <__aeabi_dcmpeq>
 800c800:	2800      	cmp	r0, #0
 800c802:	d1a6      	bne.n	800c752 <_strtod_l+0x562>
 800c804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c80a:	9805      	ldr	r0, [sp, #20]
 800c80c:	462b      	mov	r3, r5
 800c80e:	463a      	mov	r2, r7
 800c810:	f7ff f8c6 	bl	800b9a0 <__s2b>
 800c814:	900a      	str	r0, [sp, #40]	@ 0x28
 800c816:	2800      	cmp	r0, #0
 800c818:	f43f af05 	beq.w	800c626 <_strtod_l+0x436>
 800c81c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c81e:	2a00      	cmp	r2, #0
 800c820:	eba9 0308 	sub.w	r3, r9, r8
 800c824:	bfa8      	it	ge
 800c826:	2300      	movge	r3, #0
 800c828:	9312      	str	r3, [sp, #72]	@ 0x48
 800c82a:	2400      	movs	r4, #0
 800c82c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c830:	9316      	str	r3, [sp, #88]	@ 0x58
 800c832:	46a0      	mov	r8, r4
 800c834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c836:	9805      	ldr	r0, [sp, #20]
 800c838:	6859      	ldr	r1, [r3, #4]
 800c83a:	f7ff f809 	bl	800b850 <_Balloc>
 800c83e:	4681      	mov	r9, r0
 800c840:	2800      	cmp	r0, #0
 800c842:	f43f aef4 	beq.w	800c62e <_strtod_l+0x43e>
 800c846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c848:	691a      	ldr	r2, [r3, #16]
 800c84a:	3202      	adds	r2, #2
 800c84c:	f103 010c 	add.w	r1, r3, #12
 800c850:	0092      	lsls	r2, r2, #2
 800c852:	300c      	adds	r0, #12
 800c854:	f000 ff1e 	bl	800d694 <memcpy>
 800c858:	ec4b ab10 	vmov	d0, sl, fp
 800c85c:	9805      	ldr	r0, [sp, #20]
 800c85e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c860:	a91b      	add	r1, sp, #108	@ 0x6c
 800c862:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c866:	f7ff fbd7 	bl	800c018 <__d2b>
 800c86a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c86c:	2800      	cmp	r0, #0
 800c86e:	f43f aede 	beq.w	800c62e <_strtod_l+0x43e>
 800c872:	9805      	ldr	r0, [sp, #20]
 800c874:	2101      	movs	r1, #1
 800c876:	f7ff f929 	bl	800bacc <__i2b>
 800c87a:	4680      	mov	r8, r0
 800c87c:	b948      	cbnz	r0, 800c892 <_strtod_l+0x6a2>
 800c87e:	f04f 0800 	mov.w	r8, #0
 800c882:	e6d4      	b.n	800c62e <_strtod_l+0x43e>
 800c884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c888:	fa02 f303 	lsl.w	r3, r2, r3
 800c88c:	ea03 0a0a 	and.w	sl, r3, sl
 800c890:	e7b0      	b.n	800c7f4 <_strtod_l+0x604>
 800c892:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c894:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c896:	2d00      	cmp	r5, #0
 800c898:	bfab      	itete	ge
 800c89a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c89c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c89e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c8a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c8a2:	bfac      	ite	ge
 800c8a4:	18ef      	addge	r7, r5, r3
 800c8a6:	1b5e      	sublt	r6, r3, r5
 800c8a8:	9b08      	ldr	r3, [sp, #32]
 800c8aa:	1aed      	subs	r5, r5, r3
 800c8ac:	4415      	add	r5, r2
 800c8ae:	4b66      	ldr	r3, [pc, #408]	@ (800ca48 <_strtod_l+0x858>)
 800c8b0:	3d01      	subs	r5, #1
 800c8b2:	429d      	cmp	r5, r3
 800c8b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c8b8:	da50      	bge.n	800c95c <_strtod_l+0x76c>
 800c8ba:	1b5b      	subs	r3, r3, r5
 800c8bc:	2b1f      	cmp	r3, #31
 800c8be:	eba2 0203 	sub.w	r2, r2, r3
 800c8c2:	f04f 0101 	mov.w	r1, #1
 800c8c6:	dc3d      	bgt.n	800c944 <_strtod_l+0x754>
 800c8c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c8cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8d2:	18bd      	adds	r5, r7, r2
 800c8d4:	9b08      	ldr	r3, [sp, #32]
 800c8d6:	42af      	cmp	r7, r5
 800c8d8:	4416      	add	r6, r2
 800c8da:	441e      	add	r6, r3
 800c8dc:	463b      	mov	r3, r7
 800c8de:	bfa8      	it	ge
 800c8e0:	462b      	movge	r3, r5
 800c8e2:	42b3      	cmp	r3, r6
 800c8e4:	bfa8      	it	ge
 800c8e6:	4633      	movge	r3, r6
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	bfc2      	ittt	gt
 800c8ec:	1aed      	subgt	r5, r5, r3
 800c8ee:	1af6      	subgt	r6, r6, r3
 800c8f0:	1aff      	subgt	r7, r7, r3
 800c8f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dd16      	ble.n	800c926 <_strtod_l+0x736>
 800c8f8:	4641      	mov	r1, r8
 800c8fa:	9805      	ldr	r0, [sp, #20]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	f7ff f9a5 	bl	800bc4c <__pow5mult>
 800c902:	4680      	mov	r8, r0
 800c904:	2800      	cmp	r0, #0
 800c906:	d0ba      	beq.n	800c87e <_strtod_l+0x68e>
 800c908:	4601      	mov	r1, r0
 800c90a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c90c:	9805      	ldr	r0, [sp, #20]
 800c90e:	f7ff f8f3 	bl	800baf8 <__multiply>
 800c912:	900e      	str	r0, [sp, #56]	@ 0x38
 800c914:	2800      	cmp	r0, #0
 800c916:	f43f ae8a 	beq.w	800c62e <_strtod_l+0x43e>
 800c91a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c91c:	9805      	ldr	r0, [sp, #20]
 800c91e:	f7fe ffd7 	bl	800b8d0 <_Bfree>
 800c922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c924:	931a      	str	r3, [sp, #104]	@ 0x68
 800c926:	2d00      	cmp	r5, #0
 800c928:	dc1d      	bgt.n	800c966 <_strtod_l+0x776>
 800c92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dd23      	ble.n	800c978 <_strtod_l+0x788>
 800c930:	4649      	mov	r1, r9
 800c932:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c934:	9805      	ldr	r0, [sp, #20]
 800c936:	f7ff f989 	bl	800bc4c <__pow5mult>
 800c93a:	4681      	mov	r9, r0
 800c93c:	b9e0      	cbnz	r0, 800c978 <_strtod_l+0x788>
 800c93e:	f04f 0900 	mov.w	r9, #0
 800c942:	e674      	b.n	800c62e <_strtod_l+0x43e>
 800c944:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c948:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c94c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c950:	35e2      	adds	r5, #226	@ 0xe2
 800c952:	fa01 f305 	lsl.w	r3, r1, r5
 800c956:	9310      	str	r3, [sp, #64]	@ 0x40
 800c958:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c95a:	e7ba      	b.n	800c8d2 <_strtod_l+0x6e2>
 800c95c:	2300      	movs	r3, #0
 800c95e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c960:	2301      	movs	r3, #1
 800c962:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c964:	e7b5      	b.n	800c8d2 <_strtod_l+0x6e2>
 800c966:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c968:	9805      	ldr	r0, [sp, #20]
 800c96a:	462a      	mov	r2, r5
 800c96c:	f7ff f9c8 	bl	800bd00 <__lshift>
 800c970:	901a      	str	r0, [sp, #104]	@ 0x68
 800c972:	2800      	cmp	r0, #0
 800c974:	d1d9      	bne.n	800c92a <_strtod_l+0x73a>
 800c976:	e65a      	b.n	800c62e <_strtod_l+0x43e>
 800c978:	2e00      	cmp	r6, #0
 800c97a:	dd07      	ble.n	800c98c <_strtod_l+0x79c>
 800c97c:	4649      	mov	r1, r9
 800c97e:	9805      	ldr	r0, [sp, #20]
 800c980:	4632      	mov	r2, r6
 800c982:	f7ff f9bd 	bl	800bd00 <__lshift>
 800c986:	4681      	mov	r9, r0
 800c988:	2800      	cmp	r0, #0
 800c98a:	d0d8      	beq.n	800c93e <_strtod_l+0x74e>
 800c98c:	2f00      	cmp	r7, #0
 800c98e:	dd08      	ble.n	800c9a2 <_strtod_l+0x7b2>
 800c990:	4641      	mov	r1, r8
 800c992:	9805      	ldr	r0, [sp, #20]
 800c994:	463a      	mov	r2, r7
 800c996:	f7ff f9b3 	bl	800bd00 <__lshift>
 800c99a:	4680      	mov	r8, r0
 800c99c:	2800      	cmp	r0, #0
 800c99e:	f43f ae46 	beq.w	800c62e <_strtod_l+0x43e>
 800c9a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9a4:	9805      	ldr	r0, [sp, #20]
 800c9a6:	464a      	mov	r2, r9
 800c9a8:	f7ff fa32 	bl	800be10 <__mdiff>
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f43f ae3d 	beq.w	800c62e <_strtod_l+0x43e>
 800c9b4:	68c3      	ldr	r3, [r0, #12]
 800c9b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	60c3      	str	r3, [r0, #12]
 800c9bc:	4641      	mov	r1, r8
 800c9be:	f7ff fa0b 	bl	800bdd8 <__mcmp>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	da46      	bge.n	800ca54 <_strtod_l+0x864>
 800c9c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9c8:	ea53 030a 	orrs.w	r3, r3, sl
 800c9cc:	d16c      	bne.n	800caa8 <_strtod_l+0x8b8>
 800c9ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d168      	bne.n	800caa8 <_strtod_l+0x8b8>
 800c9d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9da:	0d1b      	lsrs	r3, r3, #20
 800c9dc:	051b      	lsls	r3, r3, #20
 800c9de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c9e2:	d961      	bls.n	800caa8 <_strtod_l+0x8b8>
 800c9e4:	6963      	ldr	r3, [r4, #20]
 800c9e6:	b913      	cbnz	r3, 800c9ee <_strtod_l+0x7fe>
 800c9e8:	6923      	ldr	r3, [r4, #16]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	dd5c      	ble.n	800caa8 <_strtod_l+0x8b8>
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	9805      	ldr	r0, [sp, #20]
 800c9f4:	f7ff f984 	bl	800bd00 <__lshift>
 800c9f8:	4641      	mov	r1, r8
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	f7ff f9ec 	bl	800bdd8 <__mcmp>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	dd51      	ble.n	800caa8 <_strtod_l+0x8b8>
 800ca04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca08:	9a08      	ldr	r2, [sp, #32]
 800ca0a:	0d1b      	lsrs	r3, r3, #20
 800ca0c:	051b      	lsls	r3, r3, #20
 800ca0e:	2a00      	cmp	r2, #0
 800ca10:	d06b      	beq.n	800caea <_strtod_l+0x8fa>
 800ca12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca16:	d868      	bhi.n	800caea <_strtod_l+0x8fa>
 800ca18:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ca1c:	f67f ae9d 	bls.w	800c75a <_strtod_l+0x56a>
 800ca20:	4b0a      	ldr	r3, [pc, #40]	@ (800ca4c <_strtod_l+0x85c>)
 800ca22:	4650      	mov	r0, sl
 800ca24:	4659      	mov	r1, fp
 800ca26:	2200      	movs	r2, #0
 800ca28:	f7f3 fe0e 	bl	8000648 <__aeabi_dmul>
 800ca2c:	4b08      	ldr	r3, [pc, #32]	@ (800ca50 <_strtod_l+0x860>)
 800ca2e:	400b      	ands	r3, r1
 800ca30:	4682      	mov	sl, r0
 800ca32:	468b      	mov	fp, r1
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f47f ae05 	bne.w	800c644 <_strtod_l+0x454>
 800ca3a:	9a05      	ldr	r2, [sp, #20]
 800ca3c:	2322      	movs	r3, #34	@ 0x22
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	e600      	b.n	800c644 <_strtod_l+0x454>
 800ca42:	bf00      	nop
 800ca44:	0800e9d0 	.word	0x0800e9d0
 800ca48:	fffffc02 	.word	0xfffffc02
 800ca4c:	39500000 	.word	0x39500000
 800ca50:	7ff00000 	.word	0x7ff00000
 800ca54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ca58:	d165      	bne.n	800cb26 <_strtod_l+0x936>
 800ca5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca60:	b35a      	cbz	r2, 800caba <_strtod_l+0x8ca>
 800ca62:	4a9f      	ldr	r2, [pc, #636]	@ (800cce0 <_strtod_l+0xaf0>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d12b      	bne.n	800cac0 <_strtod_l+0x8d0>
 800ca68:	9b08      	ldr	r3, [sp, #32]
 800ca6a:	4651      	mov	r1, sl
 800ca6c:	b303      	cbz	r3, 800cab0 <_strtod_l+0x8c0>
 800ca6e:	4b9d      	ldr	r3, [pc, #628]	@ (800cce4 <_strtod_l+0xaf4>)
 800ca70:	465a      	mov	r2, fp
 800ca72:	4013      	ands	r3, r2
 800ca74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ca78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca7c:	d81b      	bhi.n	800cab6 <_strtod_l+0x8c6>
 800ca7e:	0d1b      	lsrs	r3, r3, #20
 800ca80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca84:	fa02 f303 	lsl.w	r3, r2, r3
 800ca88:	4299      	cmp	r1, r3
 800ca8a:	d119      	bne.n	800cac0 <_strtod_l+0x8d0>
 800ca8c:	4b96      	ldr	r3, [pc, #600]	@ (800cce8 <_strtod_l+0xaf8>)
 800ca8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d102      	bne.n	800ca9a <_strtod_l+0x8aa>
 800ca94:	3101      	adds	r1, #1
 800ca96:	f43f adca 	beq.w	800c62e <_strtod_l+0x43e>
 800ca9a:	4b92      	ldr	r3, [pc, #584]	@ (800cce4 <_strtod_l+0xaf4>)
 800ca9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca9e:	401a      	ands	r2, r3
 800caa0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800caa4:	f04f 0a00 	mov.w	sl, #0
 800caa8:	9b08      	ldr	r3, [sp, #32]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1b8      	bne.n	800ca20 <_strtod_l+0x830>
 800caae:	e5c9      	b.n	800c644 <_strtod_l+0x454>
 800cab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cab4:	e7e8      	b.n	800ca88 <_strtod_l+0x898>
 800cab6:	4613      	mov	r3, r2
 800cab8:	e7e6      	b.n	800ca88 <_strtod_l+0x898>
 800caba:	ea53 030a 	orrs.w	r3, r3, sl
 800cabe:	d0a1      	beq.n	800ca04 <_strtod_l+0x814>
 800cac0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cac2:	b1db      	cbz	r3, 800cafc <_strtod_l+0x90c>
 800cac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cac6:	4213      	tst	r3, r2
 800cac8:	d0ee      	beq.n	800caa8 <_strtod_l+0x8b8>
 800caca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cacc:	9a08      	ldr	r2, [sp, #32]
 800cace:	4650      	mov	r0, sl
 800cad0:	4659      	mov	r1, fp
 800cad2:	b1bb      	cbz	r3, 800cb04 <_strtod_l+0x914>
 800cad4:	f7ff fb6e 	bl	800c1b4 <sulp>
 800cad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cadc:	ec53 2b10 	vmov	r2, r3, d0
 800cae0:	f7f3 fbfc 	bl	80002dc <__adddf3>
 800cae4:	4682      	mov	sl, r0
 800cae6:	468b      	mov	fp, r1
 800cae8:	e7de      	b.n	800caa8 <_strtod_l+0x8b8>
 800caea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800caee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800caf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800caf6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800cafa:	e7d5      	b.n	800caa8 <_strtod_l+0x8b8>
 800cafc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cafe:	ea13 0f0a 	tst.w	r3, sl
 800cb02:	e7e1      	b.n	800cac8 <_strtod_l+0x8d8>
 800cb04:	f7ff fb56 	bl	800c1b4 <sulp>
 800cb08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb0c:	ec53 2b10 	vmov	r2, r3, d0
 800cb10:	f7f3 fbe2 	bl	80002d8 <__aeabi_dsub>
 800cb14:	2200      	movs	r2, #0
 800cb16:	2300      	movs	r3, #0
 800cb18:	4682      	mov	sl, r0
 800cb1a:	468b      	mov	fp, r1
 800cb1c:	f7f3 fffc 	bl	8000b18 <__aeabi_dcmpeq>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d0c1      	beq.n	800caa8 <_strtod_l+0x8b8>
 800cb24:	e619      	b.n	800c75a <_strtod_l+0x56a>
 800cb26:	4641      	mov	r1, r8
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f7ff facd 	bl	800c0c8 <__ratio>
 800cb2e:	ec57 6b10 	vmov	r6, r7, d0
 800cb32:	2200      	movs	r2, #0
 800cb34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	f7f4 f800 	bl	8000b40 <__aeabi_dcmple>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d06f      	beq.n	800cc24 <_strtod_l+0xa34>
 800cb44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d17a      	bne.n	800cc40 <_strtod_l+0xa50>
 800cb4a:	f1ba 0f00 	cmp.w	sl, #0
 800cb4e:	d158      	bne.n	800cc02 <_strtod_l+0xa12>
 800cb50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d15a      	bne.n	800cc10 <_strtod_l+0xa20>
 800cb5a:	4b64      	ldr	r3, [pc, #400]	@ (800ccec <_strtod_l+0xafc>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	4630      	mov	r0, r6
 800cb60:	4639      	mov	r1, r7
 800cb62:	f7f3 ffe3 	bl	8000b2c <__aeabi_dcmplt>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d159      	bne.n	800cc1e <_strtod_l+0xa2e>
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	4b60      	ldr	r3, [pc, #384]	@ (800ccf0 <_strtod_l+0xb00>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	f7f3 fd69 	bl	8000648 <__aeabi_dmul>
 800cb76:	4606      	mov	r6, r0
 800cb78:	460f      	mov	r7, r1
 800cb7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cb7e:	9606      	str	r6, [sp, #24]
 800cb80:	9307      	str	r3, [sp, #28]
 800cb82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb86:	4d57      	ldr	r5, [pc, #348]	@ (800cce4 <_strtod_l+0xaf4>)
 800cb88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cb8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb8e:	401d      	ands	r5, r3
 800cb90:	4b58      	ldr	r3, [pc, #352]	@ (800ccf4 <_strtod_l+0xb04>)
 800cb92:	429d      	cmp	r5, r3
 800cb94:	f040 80b2 	bne.w	800ccfc <_strtod_l+0xb0c>
 800cb98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cb9e:	ec4b ab10 	vmov	d0, sl, fp
 800cba2:	f7ff f9c9 	bl	800bf38 <__ulp>
 800cba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbaa:	ec51 0b10 	vmov	r0, r1, d0
 800cbae:	f7f3 fd4b 	bl	8000648 <__aeabi_dmul>
 800cbb2:	4652      	mov	r2, sl
 800cbb4:	465b      	mov	r3, fp
 800cbb6:	f7f3 fb91 	bl	80002dc <__adddf3>
 800cbba:	460b      	mov	r3, r1
 800cbbc:	4949      	ldr	r1, [pc, #292]	@ (800cce4 <_strtod_l+0xaf4>)
 800cbbe:	4a4e      	ldr	r2, [pc, #312]	@ (800ccf8 <_strtod_l+0xb08>)
 800cbc0:	4019      	ands	r1, r3
 800cbc2:	4291      	cmp	r1, r2
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	d942      	bls.n	800cc4e <_strtod_l+0xa5e>
 800cbc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cbca:	4b47      	ldr	r3, [pc, #284]	@ (800cce8 <_strtod_l+0xaf8>)
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d103      	bne.n	800cbd8 <_strtod_l+0x9e8>
 800cbd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	f43f ad2b 	beq.w	800c62e <_strtod_l+0x43e>
 800cbd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cce8 <_strtod_l+0xaf8>
 800cbdc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800cbe0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbe2:	9805      	ldr	r0, [sp, #20]
 800cbe4:	f7fe fe74 	bl	800b8d0 <_Bfree>
 800cbe8:	9805      	ldr	r0, [sp, #20]
 800cbea:	4649      	mov	r1, r9
 800cbec:	f7fe fe70 	bl	800b8d0 <_Bfree>
 800cbf0:	9805      	ldr	r0, [sp, #20]
 800cbf2:	4641      	mov	r1, r8
 800cbf4:	f7fe fe6c 	bl	800b8d0 <_Bfree>
 800cbf8:	9805      	ldr	r0, [sp, #20]
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	f7fe fe68 	bl	800b8d0 <_Bfree>
 800cc00:	e618      	b.n	800c834 <_strtod_l+0x644>
 800cc02:	f1ba 0f01 	cmp.w	sl, #1
 800cc06:	d103      	bne.n	800cc10 <_strtod_l+0xa20>
 800cc08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f43f ada5 	beq.w	800c75a <_strtod_l+0x56a>
 800cc10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ccc0 <_strtod_l+0xad0>
 800cc14:	4f35      	ldr	r7, [pc, #212]	@ (800ccec <_strtod_l+0xafc>)
 800cc16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc1a:	2600      	movs	r6, #0
 800cc1c:	e7b1      	b.n	800cb82 <_strtod_l+0x992>
 800cc1e:	4f34      	ldr	r7, [pc, #208]	@ (800ccf0 <_strtod_l+0xb00>)
 800cc20:	2600      	movs	r6, #0
 800cc22:	e7aa      	b.n	800cb7a <_strtod_l+0x98a>
 800cc24:	4b32      	ldr	r3, [pc, #200]	@ (800ccf0 <_strtod_l+0xb00>)
 800cc26:	4630      	mov	r0, r6
 800cc28:	4639      	mov	r1, r7
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f7f3 fd0c 	bl	8000648 <__aeabi_dmul>
 800cc30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc32:	4606      	mov	r6, r0
 800cc34:	460f      	mov	r7, r1
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d09f      	beq.n	800cb7a <_strtod_l+0x98a>
 800cc3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc3e:	e7a0      	b.n	800cb82 <_strtod_l+0x992>
 800cc40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ccc8 <_strtod_l+0xad8>
 800cc44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc48:	ec57 6b17 	vmov	r6, r7, d7
 800cc4c:	e799      	b.n	800cb82 <_strtod_l+0x992>
 800cc4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cc52:	9b08      	ldr	r3, [sp, #32]
 800cc54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1c1      	bne.n	800cbe0 <_strtod_l+0x9f0>
 800cc5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc60:	0d1b      	lsrs	r3, r3, #20
 800cc62:	051b      	lsls	r3, r3, #20
 800cc64:	429d      	cmp	r5, r3
 800cc66:	d1bb      	bne.n	800cbe0 <_strtod_l+0x9f0>
 800cc68:	4630      	mov	r0, r6
 800cc6a:	4639      	mov	r1, r7
 800cc6c:	f7f4 f84c 	bl	8000d08 <__aeabi_d2lz>
 800cc70:	f7f3 fcbc 	bl	80005ec <__aeabi_l2d>
 800cc74:	4602      	mov	r2, r0
 800cc76:	460b      	mov	r3, r1
 800cc78:	4630      	mov	r0, r6
 800cc7a:	4639      	mov	r1, r7
 800cc7c:	f7f3 fb2c 	bl	80002d8 <__aeabi_dsub>
 800cc80:	460b      	mov	r3, r1
 800cc82:	4602      	mov	r2, r0
 800cc84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cc88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cc8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc8e:	ea46 060a 	orr.w	r6, r6, sl
 800cc92:	431e      	orrs	r6, r3
 800cc94:	d06f      	beq.n	800cd76 <_strtod_l+0xb86>
 800cc96:	a30e      	add	r3, pc, #56	@ (adr r3, 800ccd0 <_strtod_l+0xae0>)
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	f7f3 ff46 	bl	8000b2c <__aeabi_dcmplt>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	f47f accf 	bne.w	800c644 <_strtod_l+0x454>
 800cca6:	a30c      	add	r3, pc, #48	@ (adr r3, 800ccd8 <_strtod_l+0xae8>)
 800cca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccb0:	f7f3 ff5a 	bl	8000b68 <__aeabi_dcmpgt>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d093      	beq.n	800cbe0 <_strtod_l+0x9f0>
 800ccb8:	e4c4      	b.n	800c644 <_strtod_l+0x454>
 800ccba:	bf00      	nop
 800ccbc:	f3af 8000 	nop.w
 800ccc0:	00000000 	.word	0x00000000
 800ccc4:	bff00000 	.word	0xbff00000
 800ccc8:	00000000 	.word	0x00000000
 800cccc:	3ff00000 	.word	0x3ff00000
 800ccd0:	94a03595 	.word	0x94a03595
 800ccd4:	3fdfffff 	.word	0x3fdfffff
 800ccd8:	35afe535 	.word	0x35afe535
 800ccdc:	3fe00000 	.word	0x3fe00000
 800cce0:	000fffff 	.word	0x000fffff
 800cce4:	7ff00000 	.word	0x7ff00000
 800cce8:	7fefffff 	.word	0x7fefffff
 800ccec:	3ff00000 	.word	0x3ff00000
 800ccf0:	3fe00000 	.word	0x3fe00000
 800ccf4:	7fe00000 	.word	0x7fe00000
 800ccf8:	7c9fffff 	.word	0x7c9fffff
 800ccfc:	9b08      	ldr	r3, [sp, #32]
 800ccfe:	b323      	cbz	r3, 800cd4a <_strtod_l+0xb5a>
 800cd00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cd04:	d821      	bhi.n	800cd4a <_strtod_l+0xb5a>
 800cd06:	a328      	add	r3, pc, #160	@ (adr r3, 800cda8 <_strtod_l+0xbb8>)
 800cd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	4639      	mov	r1, r7
 800cd10:	f7f3 ff16 	bl	8000b40 <__aeabi_dcmple>
 800cd14:	b1a0      	cbz	r0, 800cd40 <_strtod_l+0xb50>
 800cd16:	4639      	mov	r1, r7
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f7f3 ff6d 	bl	8000bf8 <__aeabi_d2uiz>
 800cd1e:	2801      	cmp	r0, #1
 800cd20:	bf38      	it	cc
 800cd22:	2001      	movcc	r0, #1
 800cd24:	f7f3 fc16 	bl	8000554 <__aeabi_ui2d>
 800cd28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	460f      	mov	r7, r1
 800cd2e:	b9fb      	cbnz	r3, 800cd70 <_strtod_l+0xb80>
 800cd30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd34:	9014      	str	r0, [sp, #80]	@ 0x50
 800cd36:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cd3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cd46:	1b5b      	subs	r3, r3, r5
 800cd48:	9311      	str	r3, [sp, #68]	@ 0x44
 800cd4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cd52:	f7ff f8f1 	bl	800bf38 <__ulp>
 800cd56:	4650      	mov	r0, sl
 800cd58:	ec53 2b10 	vmov	r2, r3, d0
 800cd5c:	4659      	mov	r1, fp
 800cd5e:	f7f3 fc73 	bl	8000648 <__aeabi_dmul>
 800cd62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cd66:	f7f3 fab9 	bl	80002dc <__adddf3>
 800cd6a:	4682      	mov	sl, r0
 800cd6c:	468b      	mov	fp, r1
 800cd6e:	e770      	b.n	800cc52 <_strtod_l+0xa62>
 800cd70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cd74:	e7e0      	b.n	800cd38 <_strtod_l+0xb48>
 800cd76:	a30e      	add	r3, pc, #56	@ (adr r3, 800cdb0 <_strtod_l+0xbc0>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f7f3 fed6 	bl	8000b2c <__aeabi_dcmplt>
 800cd80:	e798      	b.n	800ccb4 <_strtod_l+0xac4>
 800cd82:	2300      	movs	r3, #0
 800cd84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cd88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd8a:	6013      	str	r3, [r2, #0]
 800cd8c:	f7ff ba6d 	b.w	800c26a <_strtod_l+0x7a>
 800cd90:	2a65      	cmp	r2, #101	@ 0x65
 800cd92:	f43f ab66 	beq.w	800c462 <_strtod_l+0x272>
 800cd96:	2a45      	cmp	r2, #69	@ 0x45
 800cd98:	f43f ab63 	beq.w	800c462 <_strtod_l+0x272>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	f7ff bb9e 	b.w	800c4de <_strtod_l+0x2ee>
 800cda2:	bf00      	nop
 800cda4:	f3af 8000 	nop.w
 800cda8:	ffc00000 	.word	0xffc00000
 800cdac:	41dfffff 	.word	0x41dfffff
 800cdb0:	94a03595 	.word	0x94a03595
 800cdb4:	3fcfffff 	.word	0x3fcfffff

0800cdb8 <_strtod_r>:
 800cdb8:	4b01      	ldr	r3, [pc, #4]	@ (800cdc0 <_strtod_r+0x8>)
 800cdba:	f7ff ba19 	b.w	800c1f0 <_strtod_l>
 800cdbe:	bf00      	nop
 800cdc0:	20000fac 	.word	0x20000fac

0800cdc4 <_strtol_l.constprop.0>:
 800cdc4:	2b24      	cmp	r3, #36	@ 0x24
 800cdc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdca:	4686      	mov	lr, r0
 800cdcc:	4690      	mov	r8, r2
 800cdce:	d801      	bhi.n	800cdd4 <_strtol_l.constprop.0+0x10>
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d106      	bne.n	800cde2 <_strtol_l.constprop.0+0x1e>
 800cdd4:	f7fd fdbc 	bl	800a950 <__errno>
 800cdd8:	2316      	movs	r3, #22
 800cdda:	6003      	str	r3, [r0, #0]
 800cddc:	2000      	movs	r0, #0
 800cdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde2:	4834      	ldr	r0, [pc, #208]	@ (800ceb4 <_strtol_l.constprop.0+0xf0>)
 800cde4:	460d      	mov	r5, r1
 800cde6:	462a      	mov	r2, r5
 800cde8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdec:	5d06      	ldrb	r6, [r0, r4]
 800cdee:	f016 0608 	ands.w	r6, r6, #8
 800cdf2:	d1f8      	bne.n	800cde6 <_strtol_l.constprop.0+0x22>
 800cdf4:	2c2d      	cmp	r4, #45	@ 0x2d
 800cdf6:	d12d      	bne.n	800ce54 <_strtol_l.constprop.0+0x90>
 800cdf8:	782c      	ldrb	r4, [r5, #0]
 800cdfa:	2601      	movs	r6, #1
 800cdfc:	1c95      	adds	r5, r2, #2
 800cdfe:	f033 0210 	bics.w	r2, r3, #16
 800ce02:	d109      	bne.n	800ce18 <_strtol_l.constprop.0+0x54>
 800ce04:	2c30      	cmp	r4, #48	@ 0x30
 800ce06:	d12a      	bne.n	800ce5e <_strtol_l.constprop.0+0x9a>
 800ce08:	782a      	ldrb	r2, [r5, #0]
 800ce0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce0e:	2a58      	cmp	r2, #88	@ 0x58
 800ce10:	d125      	bne.n	800ce5e <_strtol_l.constprop.0+0x9a>
 800ce12:	786c      	ldrb	r4, [r5, #1]
 800ce14:	2310      	movs	r3, #16
 800ce16:	3502      	adds	r5, #2
 800ce18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ce1c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ce20:	2200      	movs	r2, #0
 800ce22:	fbbc f9f3 	udiv	r9, ip, r3
 800ce26:	4610      	mov	r0, r2
 800ce28:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ce30:	2f09      	cmp	r7, #9
 800ce32:	d81b      	bhi.n	800ce6c <_strtol_l.constprop.0+0xa8>
 800ce34:	463c      	mov	r4, r7
 800ce36:	42a3      	cmp	r3, r4
 800ce38:	dd27      	ble.n	800ce8a <_strtol_l.constprop.0+0xc6>
 800ce3a:	1c57      	adds	r7, r2, #1
 800ce3c:	d007      	beq.n	800ce4e <_strtol_l.constprop.0+0x8a>
 800ce3e:	4581      	cmp	r9, r0
 800ce40:	d320      	bcc.n	800ce84 <_strtol_l.constprop.0+0xc0>
 800ce42:	d101      	bne.n	800ce48 <_strtol_l.constprop.0+0x84>
 800ce44:	45a2      	cmp	sl, r4
 800ce46:	db1d      	blt.n	800ce84 <_strtol_l.constprop.0+0xc0>
 800ce48:	fb00 4003 	mla	r0, r0, r3, r4
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce52:	e7eb      	b.n	800ce2c <_strtol_l.constprop.0+0x68>
 800ce54:	2c2b      	cmp	r4, #43	@ 0x2b
 800ce56:	bf04      	itt	eq
 800ce58:	782c      	ldrbeq	r4, [r5, #0]
 800ce5a:	1c95      	addeq	r5, r2, #2
 800ce5c:	e7cf      	b.n	800cdfe <_strtol_l.constprop.0+0x3a>
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1da      	bne.n	800ce18 <_strtol_l.constprop.0+0x54>
 800ce62:	2c30      	cmp	r4, #48	@ 0x30
 800ce64:	bf0c      	ite	eq
 800ce66:	2308      	moveq	r3, #8
 800ce68:	230a      	movne	r3, #10
 800ce6a:	e7d5      	b.n	800ce18 <_strtol_l.constprop.0+0x54>
 800ce6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ce70:	2f19      	cmp	r7, #25
 800ce72:	d801      	bhi.n	800ce78 <_strtol_l.constprop.0+0xb4>
 800ce74:	3c37      	subs	r4, #55	@ 0x37
 800ce76:	e7de      	b.n	800ce36 <_strtol_l.constprop.0+0x72>
 800ce78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ce7c:	2f19      	cmp	r7, #25
 800ce7e:	d804      	bhi.n	800ce8a <_strtol_l.constprop.0+0xc6>
 800ce80:	3c57      	subs	r4, #87	@ 0x57
 800ce82:	e7d8      	b.n	800ce36 <_strtol_l.constprop.0+0x72>
 800ce84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce88:	e7e1      	b.n	800ce4e <_strtol_l.constprop.0+0x8a>
 800ce8a:	1c53      	adds	r3, r2, #1
 800ce8c:	d108      	bne.n	800cea0 <_strtol_l.constprop.0+0xdc>
 800ce8e:	2322      	movs	r3, #34	@ 0x22
 800ce90:	f8ce 3000 	str.w	r3, [lr]
 800ce94:	4660      	mov	r0, ip
 800ce96:	f1b8 0f00 	cmp.w	r8, #0
 800ce9a:	d0a0      	beq.n	800cdde <_strtol_l.constprop.0+0x1a>
 800ce9c:	1e69      	subs	r1, r5, #1
 800ce9e:	e006      	b.n	800ceae <_strtol_l.constprop.0+0xea>
 800cea0:	b106      	cbz	r6, 800cea4 <_strtol_l.constprop.0+0xe0>
 800cea2:	4240      	negs	r0, r0
 800cea4:	f1b8 0f00 	cmp.w	r8, #0
 800cea8:	d099      	beq.n	800cdde <_strtol_l.constprop.0+0x1a>
 800ceaa:	2a00      	cmp	r2, #0
 800ceac:	d1f6      	bne.n	800ce9c <_strtol_l.constprop.0+0xd8>
 800ceae:	f8c8 1000 	str.w	r1, [r8]
 800ceb2:	e794      	b.n	800cdde <_strtol_l.constprop.0+0x1a>
 800ceb4:	0800e9f9 	.word	0x0800e9f9

0800ceb8 <_strtol_r>:
 800ceb8:	f7ff bf84 	b.w	800cdc4 <_strtol_l.constprop.0>

0800cebc <__ssputs_r>:
 800cebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cec0:	688e      	ldr	r6, [r1, #8]
 800cec2:	461f      	mov	r7, r3
 800cec4:	42be      	cmp	r6, r7
 800cec6:	680b      	ldr	r3, [r1, #0]
 800cec8:	4682      	mov	sl, r0
 800ceca:	460c      	mov	r4, r1
 800cecc:	4690      	mov	r8, r2
 800cece:	d82d      	bhi.n	800cf2c <__ssputs_r+0x70>
 800ced0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ced4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ced8:	d026      	beq.n	800cf28 <__ssputs_r+0x6c>
 800ceda:	6965      	ldr	r5, [r4, #20]
 800cedc:	6909      	ldr	r1, [r1, #16]
 800cede:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cee2:	eba3 0901 	sub.w	r9, r3, r1
 800cee6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ceea:	1c7b      	adds	r3, r7, #1
 800ceec:	444b      	add	r3, r9
 800ceee:	106d      	asrs	r5, r5, #1
 800cef0:	429d      	cmp	r5, r3
 800cef2:	bf38      	it	cc
 800cef4:	461d      	movcc	r5, r3
 800cef6:	0553      	lsls	r3, r2, #21
 800cef8:	d527      	bpl.n	800cf4a <__ssputs_r+0x8e>
 800cefa:	4629      	mov	r1, r5
 800cefc:	f7fe fc1c 	bl	800b738 <_malloc_r>
 800cf00:	4606      	mov	r6, r0
 800cf02:	b360      	cbz	r0, 800cf5e <__ssputs_r+0xa2>
 800cf04:	6921      	ldr	r1, [r4, #16]
 800cf06:	464a      	mov	r2, r9
 800cf08:	f000 fbc4 	bl	800d694 <memcpy>
 800cf0c:	89a3      	ldrh	r3, [r4, #12]
 800cf0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf16:	81a3      	strh	r3, [r4, #12]
 800cf18:	6126      	str	r6, [r4, #16]
 800cf1a:	6165      	str	r5, [r4, #20]
 800cf1c:	444e      	add	r6, r9
 800cf1e:	eba5 0509 	sub.w	r5, r5, r9
 800cf22:	6026      	str	r6, [r4, #0]
 800cf24:	60a5      	str	r5, [r4, #8]
 800cf26:	463e      	mov	r6, r7
 800cf28:	42be      	cmp	r6, r7
 800cf2a:	d900      	bls.n	800cf2e <__ssputs_r+0x72>
 800cf2c:	463e      	mov	r6, r7
 800cf2e:	6820      	ldr	r0, [r4, #0]
 800cf30:	4632      	mov	r2, r6
 800cf32:	4641      	mov	r1, r8
 800cf34:	f7fd fca0 	bl	800a878 <memmove>
 800cf38:	68a3      	ldr	r3, [r4, #8]
 800cf3a:	1b9b      	subs	r3, r3, r6
 800cf3c:	60a3      	str	r3, [r4, #8]
 800cf3e:	6823      	ldr	r3, [r4, #0]
 800cf40:	4433      	add	r3, r6
 800cf42:	6023      	str	r3, [r4, #0]
 800cf44:	2000      	movs	r0, #0
 800cf46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf4a:	462a      	mov	r2, r5
 800cf4c:	f000 ff35 	bl	800ddba <_realloc_r>
 800cf50:	4606      	mov	r6, r0
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d1e0      	bne.n	800cf18 <__ssputs_r+0x5c>
 800cf56:	6921      	ldr	r1, [r4, #16]
 800cf58:	4650      	mov	r0, sl
 800cf5a:	f7fe fb79 	bl	800b650 <_free_r>
 800cf5e:	230c      	movs	r3, #12
 800cf60:	f8ca 3000 	str.w	r3, [sl]
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf6a:	81a3      	strh	r3, [r4, #12]
 800cf6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf70:	e7e9      	b.n	800cf46 <__ssputs_r+0x8a>
	...

0800cf74 <_svfiprintf_r>:
 800cf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf78:	4698      	mov	r8, r3
 800cf7a:	898b      	ldrh	r3, [r1, #12]
 800cf7c:	061b      	lsls	r3, r3, #24
 800cf7e:	b09d      	sub	sp, #116	@ 0x74
 800cf80:	4607      	mov	r7, r0
 800cf82:	460d      	mov	r5, r1
 800cf84:	4614      	mov	r4, r2
 800cf86:	d510      	bpl.n	800cfaa <_svfiprintf_r+0x36>
 800cf88:	690b      	ldr	r3, [r1, #16]
 800cf8a:	b973      	cbnz	r3, 800cfaa <_svfiprintf_r+0x36>
 800cf8c:	2140      	movs	r1, #64	@ 0x40
 800cf8e:	f7fe fbd3 	bl	800b738 <_malloc_r>
 800cf92:	6028      	str	r0, [r5, #0]
 800cf94:	6128      	str	r0, [r5, #16]
 800cf96:	b930      	cbnz	r0, 800cfa6 <_svfiprintf_r+0x32>
 800cf98:	230c      	movs	r3, #12
 800cf9a:	603b      	str	r3, [r7, #0]
 800cf9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfa0:	b01d      	add	sp, #116	@ 0x74
 800cfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa6:	2340      	movs	r3, #64	@ 0x40
 800cfa8:	616b      	str	r3, [r5, #20]
 800cfaa:	2300      	movs	r3, #0
 800cfac:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfae:	2320      	movs	r3, #32
 800cfb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfb8:	2330      	movs	r3, #48	@ 0x30
 800cfba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d158 <_svfiprintf_r+0x1e4>
 800cfbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfc2:	f04f 0901 	mov.w	r9, #1
 800cfc6:	4623      	mov	r3, r4
 800cfc8:	469a      	mov	sl, r3
 800cfca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfce:	b10a      	cbz	r2, 800cfd4 <_svfiprintf_r+0x60>
 800cfd0:	2a25      	cmp	r2, #37	@ 0x25
 800cfd2:	d1f9      	bne.n	800cfc8 <_svfiprintf_r+0x54>
 800cfd4:	ebba 0b04 	subs.w	fp, sl, r4
 800cfd8:	d00b      	beq.n	800cff2 <_svfiprintf_r+0x7e>
 800cfda:	465b      	mov	r3, fp
 800cfdc:	4622      	mov	r2, r4
 800cfde:	4629      	mov	r1, r5
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	f7ff ff6b 	bl	800cebc <__ssputs_r>
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	f000 80a7 	beq.w	800d13a <_svfiprintf_r+0x1c6>
 800cfec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfee:	445a      	add	r2, fp
 800cff0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cff2:	f89a 3000 	ldrb.w	r3, [sl]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f000 809f 	beq.w	800d13a <_svfiprintf_r+0x1c6>
 800cffc:	2300      	movs	r3, #0
 800cffe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d006:	f10a 0a01 	add.w	sl, sl, #1
 800d00a:	9304      	str	r3, [sp, #16]
 800d00c:	9307      	str	r3, [sp, #28]
 800d00e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d012:	931a      	str	r3, [sp, #104]	@ 0x68
 800d014:	4654      	mov	r4, sl
 800d016:	2205      	movs	r2, #5
 800d018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d01c:	484e      	ldr	r0, [pc, #312]	@ (800d158 <_svfiprintf_r+0x1e4>)
 800d01e:	f7f3 f8ff 	bl	8000220 <memchr>
 800d022:	9a04      	ldr	r2, [sp, #16]
 800d024:	b9d8      	cbnz	r0, 800d05e <_svfiprintf_r+0xea>
 800d026:	06d0      	lsls	r0, r2, #27
 800d028:	bf44      	itt	mi
 800d02a:	2320      	movmi	r3, #32
 800d02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d030:	0711      	lsls	r1, r2, #28
 800d032:	bf44      	itt	mi
 800d034:	232b      	movmi	r3, #43	@ 0x2b
 800d036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d03a:	f89a 3000 	ldrb.w	r3, [sl]
 800d03e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d040:	d015      	beq.n	800d06e <_svfiprintf_r+0xfa>
 800d042:	9a07      	ldr	r2, [sp, #28]
 800d044:	4654      	mov	r4, sl
 800d046:	2000      	movs	r0, #0
 800d048:	f04f 0c0a 	mov.w	ip, #10
 800d04c:	4621      	mov	r1, r4
 800d04e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d052:	3b30      	subs	r3, #48	@ 0x30
 800d054:	2b09      	cmp	r3, #9
 800d056:	d94b      	bls.n	800d0f0 <_svfiprintf_r+0x17c>
 800d058:	b1b0      	cbz	r0, 800d088 <_svfiprintf_r+0x114>
 800d05a:	9207      	str	r2, [sp, #28]
 800d05c:	e014      	b.n	800d088 <_svfiprintf_r+0x114>
 800d05e:	eba0 0308 	sub.w	r3, r0, r8
 800d062:	fa09 f303 	lsl.w	r3, r9, r3
 800d066:	4313      	orrs	r3, r2
 800d068:	9304      	str	r3, [sp, #16]
 800d06a:	46a2      	mov	sl, r4
 800d06c:	e7d2      	b.n	800d014 <_svfiprintf_r+0xa0>
 800d06e:	9b03      	ldr	r3, [sp, #12]
 800d070:	1d19      	adds	r1, r3, #4
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	9103      	str	r1, [sp, #12]
 800d076:	2b00      	cmp	r3, #0
 800d078:	bfbb      	ittet	lt
 800d07a:	425b      	neglt	r3, r3
 800d07c:	f042 0202 	orrlt.w	r2, r2, #2
 800d080:	9307      	strge	r3, [sp, #28]
 800d082:	9307      	strlt	r3, [sp, #28]
 800d084:	bfb8      	it	lt
 800d086:	9204      	strlt	r2, [sp, #16]
 800d088:	7823      	ldrb	r3, [r4, #0]
 800d08a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d08c:	d10a      	bne.n	800d0a4 <_svfiprintf_r+0x130>
 800d08e:	7863      	ldrb	r3, [r4, #1]
 800d090:	2b2a      	cmp	r3, #42	@ 0x2a
 800d092:	d132      	bne.n	800d0fa <_svfiprintf_r+0x186>
 800d094:	9b03      	ldr	r3, [sp, #12]
 800d096:	1d1a      	adds	r2, r3, #4
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	9203      	str	r2, [sp, #12]
 800d09c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0a0:	3402      	adds	r4, #2
 800d0a2:	9305      	str	r3, [sp, #20]
 800d0a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d168 <_svfiprintf_r+0x1f4>
 800d0a8:	7821      	ldrb	r1, [r4, #0]
 800d0aa:	2203      	movs	r2, #3
 800d0ac:	4650      	mov	r0, sl
 800d0ae:	f7f3 f8b7 	bl	8000220 <memchr>
 800d0b2:	b138      	cbz	r0, 800d0c4 <_svfiprintf_r+0x150>
 800d0b4:	9b04      	ldr	r3, [sp, #16]
 800d0b6:	eba0 000a 	sub.w	r0, r0, sl
 800d0ba:	2240      	movs	r2, #64	@ 0x40
 800d0bc:	4082      	lsls	r2, r0
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	3401      	adds	r4, #1
 800d0c2:	9304      	str	r3, [sp, #16]
 800d0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0c8:	4824      	ldr	r0, [pc, #144]	@ (800d15c <_svfiprintf_r+0x1e8>)
 800d0ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0ce:	2206      	movs	r2, #6
 800d0d0:	f7f3 f8a6 	bl	8000220 <memchr>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d036      	beq.n	800d146 <_svfiprintf_r+0x1d2>
 800d0d8:	4b21      	ldr	r3, [pc, #132]	@ (800d160 <_svfiprintf_r+0x1ec>)
 800d0da:	bb1b      	cbnz	r3, 800d124 <_svfiprintf_r+0x1b0>
 800d0dc:	9b03      	ldr	r3, [sp, #12]
 800d0de:	3307      	adds	r3, #7
 800d0e0:	f023 0307 	bic.w	r3, r3, #7
 800d0e4:	3308      	adds	r3, #8
 800d0e6:	9303      	str	r3, [sp, #12]
 800d0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ea:	4433      	add	r3, r6
 800d0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0ee:	e76a      	b.n	800cfc6 <_svfiprintf_r+0x52>
 800d0f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0f4:	460c      	mov	r4, r1
 800d0f6:	2001      	movs	r0, #1
 800d0f8:	e7a8      	b.n	800d04c <_svfiprintf_r+0xd8>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	3401      	adds	r4, #1
 800d0fe:	9305      	str	r3, [sp, #20]
 800d100:	4619      	mov	r1, r3
 800d102:	f04f 0c0a 	mov.w	ip, #10
 800d106:	4620      	mov	r0, r4
 800d108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d10c:	3a30      	subs	r2, #48	@ 0x30
 800d10e:	2a09      	cmp	r2, #9
 800d110:	d903      	bls.n	800d11a <_svfiprintf_r+0x1a6>
 800d112:	2b00      	cmp	r3, #0
 800d114:	d0c6      	beq.n	800d0a4 <_svfiprintf_r+0x130>
 800d116:	9105      	str	r1, [sp, #20]
 800d118:	e7c4      	b.n	800d0a4 <_svfiprintf_r+0x130>
 800d11a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d11e:	4604      	mov	r4, r0
 800d120:	2301      	movs	r3, #1
 800d122:	e7f0      	b.n	800d106 <_svfiprintf_r+0x192>
 800d124:	ab03      	add	r3, sp, #12
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	462a      	mov	r2, r5
 800d12a:	4b0e      	ldr	r3, [pc, #56]	@ (800d164 <_svfiprintf_r+0x1f0>)
 800d12c:	a904      	add	r1, sp, #16
 800d12e:	4638      	mov	r0, r7
 800d130:	f7fc fbac 	bl	800988c <_printf_float>
 800d134:	1c42      	adds	r2, r0, #1
 800d136:	4606      	mov	r6, r0
 800d138:	d1d6      	bne.n	800d0e8 <_svfiprintf_r+0x174>
 800d13a:	89ab      	ldrh	r3, [r5, #12]
 800d13c:	065b      	lsls	r3, r3, #25
 800d13e:	f53f af2d 	bmi.w	800cf9c <_svfiprintf_r+0x28>
 800d142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d144:	e72c      	b.n	800cfa0 <_svfiprintf_r+0x2c>
 800d146:	ab03      	add	r3, sp, #12
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	462a      	mov	r2, r5
 800d14c:	4b05      	ldr	r3, [pc, #20]	@ (800d164 <_svfiprintf_r+0x1f0>)
 800d14e:	a904      	add	r1, sp, #16
 800d150:	4638      	mov	r0, r7
 800d152:	f7fc fe33 	bl	8009dbc <_printf_i>
 800d156:	e7ed      	b.n	800d134 <_svfiprintf_r+0x1c0>
 800d158:	0800eaf9 	.word	0x0800eaf9
 800d15c:	0800eb03 	.word	0x0800eb03
 800d160:	0800988d 	.word	0x0800988d
 800d164:	0800cebd 	.word	0x0800cebd
 800d168:	0800eaff 	.word	0x0800eaff

0800d16c <__sfputc_r>:
 800d16c:	6893      	ldr	r3, [r2, #8]
 800d16e:	3b01      	subs	r3, #1
 800d170:	2b00      	cmp	r3, #0
 800d172:	b410      	push	{r4}
 800d174:	6093      	str	r3, [r2, #8]
 800d176:	da08      	bge.n	800d18a <__sfputc_r+0x1e>
 800d178:	6994      	ldr	r4, [r2, #24]
 800d17a:	42a3      	cmp	r3, r4
 800d17c:	db01      	blt.n	800d182 <__sfputc_r+0x16>
 800d17e:	290a      	cmp	r1, #10
 800d180:	d103      	bne.n	800d18a <__sfputc_r+0x1e>
 800d182:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d186:	f7fd bae2 	b.w	800a74e <__swbuf_r>
 800d18a:	6813      	ldr	r3, [r2, #0]
 800d18c:	1c58      	adds	r0, r3, #1
 800d18e:	6010      	str	r0, [r2, #0]
 800d190:	7019      	strb	r1, [r3, #0]
 800d192:	4608      	mov	r0, r1
 800d194:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <__sfputs_r>:
 800d19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19c:	4606      	mov	r6, r0
 800d19e:	460f      	mov	r7, r1
 800d1a0:	4614      	mov	r4, r2
 800d1a2:	18d5      	adds	r5, r2, r3
 800d1a4:	42ac      	cmp	r4, r5
 800d1a6:	d101      	bne.n	800d1ac <__sfputs_r+0x12>
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	e007      	b.n	800d1bc <__sfputs_r+0x22>
 800d1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b0:	463a      	mov	r2, r7
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f7ff ffda 	bl	800d16c <__sfputc_r>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d1f3      	bne.n	800d1a4 <__sfputs_r+0xa>
 800d1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1c0 <_vfiprintf_r>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	460d      	mov	r5, r1
 800d1c6:	b09d      	sub	sp, #116	@ 0x74
 800d1c8:	4614      	mov	r4, r2
 800d1ca:	4698      	mov	r8, r3
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	b118      	cbz	r0, 800d1d8 <_vfiprintf_r+0x18>
 800d1d0:	6a03      	ldr	r3, [r0, #32]
 800d1d2:	b90b      	cbnz	r3, 800d1d8 <_vfiprintf_r+0x18>
 800d1d4:	f7fd f9b2 	bl	800a53c <__sinit>
 800d1d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1da:	07d9      	lsls	r1, r3, #31
 800d1dc:	d405      	bmi.n	800d1ea <_vfiprintf_r+0x2a>
 800d1de:	89ab      	ldrh	r3, [r5, #12]
 800d1e0:	059a      	lsls	r2, r3, #22
 800d1e2:	d402      	bmi.n	800d1ea <_vfiprintf_r+0x2a>
 800d1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1e6:	f7fd fbde 	bl	800a9a6 <__retarget_lock_acquire_recursive>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	071b      	lsls	r3, r3, #28
 800d1ee:	d501      	bpl.n	800d1f4 <_vfiprintf_r+0x34>
 800d1f0:	692b      	ldr	r3, [r5, #16]
 800d1f2:	b99b      	cbnz	r3, 800d21c <_vfiprintf_r+0x5c>
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f7fd fae8 	bl	800a7cc <__swsetup_r>
 800d1fc:	b170      	cbz	r0, 800d21c <_vfiprintf_r+0x5c>
 800d1fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d200:	07dc      	lsls	r4, r3, #31
 800d202:	d504      	bpl.n	800d20e <_vfiprintf_r+0x4e>
 800d204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d208:	b01d      	add	sp, #116	@ 0x74
 800d20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20e:	89ab      	ldrh	r3, [r5, #12]
 800d210:	0598      	lsls	r0, r3, #22
 800d212:	d4f7      	bmi.n	800d204 <_vfiprintf_r+0x44>
 800d214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d216:	f7fd fbc7 	bl	800a9a8 <__retarget_lock_release_recursive>
 800d21a:	e7f3      	b.n	800d204 <_vfiprintf_r+0x44>
 800d21c:	2300      	movs	r3, #0
 800d21e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d220:	2320      	movs	r3, #32
 800d222:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d226:	f8cd 800c 	str.w	r8, [sp, #12]
 800d22a:	2330      	movs	r3, #48	@ 0x30
 800d22c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d3dc <_vfiprintf_r+0x21c>
 800d230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d234:	f04f 0901 	mov.w	r9, #1
 800d238:	4623      	mov	r3, r4
 800d23a:	469a      	mov	sl, r3
 800d23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d240:	b10a      	cbz	r2, 800d246 <_vfiprintf_r+0x86>
 800d242:	2a25      	cmp	r2, #37	@ 0x25
 800d244:	d1f9      	bne.n	800d23a <_vfiprintf_r+0x7a>
 800d246:	ebba 0b04 	subs.w	fp, sl, r4
 800d24a:	d00b      	beq.n	800d264 <_vfiprintf_r+0xa4>
 800d24c:	465b      	mov	r3, fp
 800d24e:	4622      	mov	r2, r4
 800d250:	4629      	mov	r1, r5
 800d252:	4630      	mov	r0, r6
 800d254:	f7ff ffa1 	bl	800d19a <__sfputs_r>
 800d258:	3001      	adds	r0, #1
 800d25a:	f000 80a7 	beq.w	800d3ac <_vfiprintf_r+0x1ec>
 800d25e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d260:	445a      	add	r2, fp
 800d262:	9209      	str	r2, [sp, #36]	@ 0x24
 800d264:	f89a 3000 	ldrb.w	r3, [sl]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 809f 	beq.w	800d3ac <_vfiprintf_r+0x1ec>
 800d26e:	2300      	movs	r3, #0
 800d270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d278:	f10a 0a01 	add.w	sl, sl, #1
 800d27c:	9304      	str	r3, [sp, #16]
 800d27e:	9307      	str	r3, [sp, #28]
 800d280:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d284:	931a      	str	r3, [sp, #104]	@ 0x68
 800d286:	4654      	mov	r4, sl
 800d288:	2205      	movs	r2, #5
 800d28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d28e:	4853      	ldr	r0, [pc, #332]	@ (800d3dc <_vfiprintf_r+0x21c>)
 800d290:	f7f2 ffc6 	bl	8000220 <memchr>
 800d294:	9a04      	ldr	r2, [sp, #16]
 800d296:	b9d8      	cbnz	r0, 800d2d0 <_vfiprintf_r+0x110>
 800d298:	06d1      	lsls	r1, r2, #27
 800d29a:	bf44      	itt	mi
 800d29c:	2320      	movmi	r3, #32
 800d29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2a2:	0713      	lsls	r3, r2, #28
 800d2a4:	bf44      	itt	mi
 800d2a6:	232b      	movmi	r3, #43	@ 0x2b
 800d2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d2b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2b2:	d015      	beq.n	800d2e0 <_vfiprintf_r+0x120>
 800d2b4:	9a07      	ldr	r2, [sp, #28]
 800d2b6:	4654      	mov	r4, sl
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	f04f 0c0a 	mov.w	ip, #10
 800d2be:	4621      	mov	r1, r4
 800d2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2c4:	3b30      	subs	r3, #48	@ 0x30
 800d2c6:	2b09      	cmp	r3, #9
 800d2c8:	d94b      	bls.n	800d362 <_vfiprintf_r+0x1a2>
 800d2ca:	b1b0      	cbz	r0, 800d2fa <_vfiprintf_r+0x13a>
 800d2cc:	9207      	str	r2, [sp, #28]
 800d2ce:	e014      	b.n	800d2fa <_vfiprintf_r+0x13a>
 800d2d0:	eba0 0308 	sub.w	r3, r0, r8
 800d2d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	9304      	str	r3, [sp, #16]
 800d2dc:	46a2      	mov	sl, r4
 800d2de:	e7d2      	b.n	800d286 <_vfiprintf_r+0xc6>
 800d2e0:	9b03      	ldr	r3, [sp, #12]
 800d2e2:	1d19      	adds	r1, r3, #4
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	9103      	str	r1, [sp, #12]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	bfbb      	ittet	lt
 800d2ec:	425b      	neglt	r3, r3
 800d2ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d2f2:	9307      	strge	r3, [sp, #28]
 800d2f4:	9307      	strlt	r3, [sp, #28]
 800d2f6:	bfb8      	it	lt
 800d2f8:	9204      	strlt	r2, [sp, #16]
 800d2fa:	7823      	ldrb	r3, [r4, #0]
 800d2fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2fe:	d10a      	bne.n	800d316 <_vfiprintf_r+0x156>
 800d300:	7863      	ldrb	r3, [r4, #1]
 800d302:	2b2a      	cmp	r3, #42	@ 0x2a
 800d304:	d132      	bne.n	800d36c <_vfiprintf_r+0x1ac>
 800d306:	9b03      	ldr	r3, [sp, #12]
 800d308:	1d1a      	adds	r2, r3, #4
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	9203      	str	r2, [sp, #12]
 800d30e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d312:	3402      	adds	r4, #2
 800d314:	9305      	str	r3, [sp, #20]
 800d316:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d3ec <_vfiprintf_r+0x22c>
 800d31a:	7821      	ldrb	r1, [r4, #0]
 800d31c:	2203      	movs	r2, #3
 800d31e:	4650      	mov	r0, sl
 800d320:	f7f2 ff7e 	bl	8000220 <memchr>
 800d324:	b138      	cbz	r0, 800d336 <_vfiprintf_r+0x176>
 800d326:	9b04      	ldr	r3, [sp, #16]
 800d328:	eba0 000a 	sub.w	r0, r0, sl
 800d32c:	2240      	movs	r2, #64	@ 0x40
 800d32e:	4082      	lsls	r2, r0
 800d330:	4313      	orrs	r3, r2
 800d332:	3401      	adds	r4, #1
 800d334:	9304      	str	r3, [sp, #16]
 800d336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d33a:	4829      	ldr	r0, [pc, #164]	@ (800d3e0 <_vfiprintf_r+0x220>)
 800d33c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d340:	2206      	movs	r2, #6
 800d342:	f7f2 ff6d 	bl	8000220 <memchr>
 800d346:	2800      	cmp	r0, #0
 800d348:	d03f      	beq.n	800d3ca <_vfiprintf_r+0x20a>
 800d34a:	4b26      	ldr	r3, [pc, #152]	@ (800d3e4 <_vfiprintf_r+0x224>)
 800d34c:	bb1b      	cbnz	r3, 800d396 <_vfiprintf_r+0x1d6>
 800d34e:	9b03      	ldr	r3, [sp, #12]
 800d350:	3307      	adds	r3, #7
 800d352:	f023 0307 	bic.w	r3, r3, #7
 800d356:	3308      	adds	r3, #8
 800d358:	9303      	str	r3, [sp, #12]
 800d35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d35c:	443b      	add	r3, r7
 800d35e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d360:	e76a      	b.n	800d238 <_vfiprintf_r+0x78>
 800d362:	fb0c 3202 	mla	r2, ip, r2, r3
 800d366:	460c      	mov	r4, r1
 800d368:	2001      	movs	r0, #1
 800d36a:	e7a8      	b.n	800d2be <_vfiprintf_r+0xfe>
 800d36c:	2300      	movs	r3, #0
 800d36e:	3401      	adds	r4, #1
 800d370:	9305      	str	r3, [sp, #20]
 800d372:	4619      	mov	r1, r3
 800d374:	f04f 0c0a 	mov.w	ip, #10
 800d378:	4620      	mov	r0, r4
 800d37a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d37e:	3a30      	subs	r2, #48	@ 0x30
 800d380:	2a09      	cmp	r2, #9
 800d382:	d903      	bls.n	800d38c <_vfiprintf_r+0x1cc>
 800d384:	2b00      	cmp	r3, #0
 800d386:	d0c6      	beq.n	800d316 <_vfiprintf_r+0x156>
 800d388:	9105      	str	r1, [sp, #20]
 800d38a:	e7c4      	b.n	800d316 <_vfiprintf_r+0x156>
 800d38c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d390:	4604      	mov	r4, r0
 800d392:	2301      	movs	r3, #1
 800d394:	e7f0      	b.n	800d378 <_vfiprintf_r+0x1b8>
 800d396:	ab03      	add	r3, sp, #12
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	462a      	mov	r2, r5
 800d39c:	4b12      	ldr	r3, [pc, #72]	@ (800d3e8 <_vfiprintf_r+0x228>)
 800d39e:	a904      	add	r1, sp, #16
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f7fc fa73 	bl	800988c <_printf_float>
 800d3a6:	4607      	mov	r7, r0
 800d3a8:	1c78      	adds	r0, r7, #1
 800d3aa:	d1d6      	bne.n	800d35a <_vfiprintf_r+0x19a>
 800d3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3ae:	07d9      	lsls	r1, r3, #31
 800d3b0:	d405      	bmi.n	800d3be <_vfiprintf_r+0x1fe>
 800d3b2:	89ab      	ldrh	r3, [r5, #12]
 800d3b4:	059a      	lsls	r2, r3, #22
 800d3b6:	d402      	bmi.n	800d3be <_vfiprintf_r+0x1fe>
 800d3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3ba:	f7fd faf5 	bl	800a9a8 <__retarget_lock_release_recursive>
 800d3be:	89ab      	ldrh	r3, [r5, #12]
 800d3c0:	065b      	lsls	r3, r3, #25
 800d3c2:	f53f af1f 	bmi.w	800d204 <_vfiprintf_r+0x44>
 800d3c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3c8:	e71e      	b.n	800d208 <_vfiprintf_r+0x48>
 800d3ca:	ab03      	add	r3, sp, #12
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	462a      	mov	r2, r5
 800d3d0:	4b05      	ldr	r3, [pc, #20]	@ (800d3e8 <_vfiprintf_r+0x228>)
 800d3d2:	a904      	add	r1, sp, #16
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	f7fc fcf1 	bl	8009dbc <_printf_i>
 800d3da:	e7e4      	b.n	800d3a6 <_vfiprintf_r+0x1e6>
 800d3dc:	0800eaf9 	.word	0x0800eaf9
 800d3e0:	0800eb03 	.word	0x0800eb03
 800d3e4:	0800988d 	.word	0x0800988d
 800d3e8:	0800d19b 	.word	0x0800d19b
 800d3ec:	0800eaff 	.word	0x0800eaff

0800d3f0 <__sflush_r>:
 800d3f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f8:	0716      	lsls	r6, r2, #28
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	460c      	mov	r4, r1
 800d3fe:	d454      	bmi.n	800d4aa <__sflush_r+0xba>
 800d400:	684b      	ldr	r3, [r1, #4]
 800d402:	2b00      	cmp	r3, #0
 800d404:	dc02      	bgt.n	800d40c <__sflush_r+0x1c>
 800d406:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d408:	2b00      	cmp	r3, #0
 800d40a:	dd48      	ble.n	800d49e <__sflush_r+0xae>
 800d40c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d40e:	2e00      	cmp	r6, #0
 800d410:	d045      	beq.n	800d49e <__sflush_r+0xae>
 800d412:	2300      	movs	r3, #0
 800d414:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d418:	682f      	ldr	r7, [r5, #0]
 800d41a:	6a21      	ldr	r1, [r4, #32]
 800d41c:	602b      	str	r3, [r5, #0]
 800d41e:	d030      	beq.n	800d482 <__sflush_r+0x92>
 800d420:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d422:	89a3      	ldrh	r3, [r4, #12]
 800d424:	0759      	lsls	r1, r3, #29
 800d426:	d505      	bpl.n	800d434 <__sflush_r+0x44>
 800d428:	6863      	ldr	r3, [r4, #4]
 800d42a:	1ad2      	subs	r2, r2, r3
 800d42c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d42e:	b10b      	cbz	r3, 800d434 <__sflush_r+0x44>
 800d430:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d432:	1ad2      	subs	r2, r2, r3
 800d434:	2300      	movs	r3, #0
 800d436:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d438:	6a21      	ldr	r1, [r4, #32]
 800d43a:	4628      	mov	r0, r5
 800d43c:	47b0      	blx	r6
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	89a3      	ldrh	r3, [r4, #12]
 800d442:	d106      	bne.n	800d452 <__sflush_r+0x62>
 800d444:	6829      	ldr	r1, [r5, #0]
 800d446:	291d      	cmp	r1, #29
 800d448:	d82b      	bhi.n	800d4a2 <__sflush_r+0xb2>
 800d44a:	4a2a      	ldr	r2, [pc, #168]	@ (800d4f4 <__sflush_r+0x104>)
 800d44c:	410a      	asrs	r2, r1
 800d44e:	07d6      	lsls	r6, r2, #31
 800d450:	d427      	bmi.n	800d4a2 <__sflush_r+0xb2>
 800d452:	2200      	movs	r2, #0
 800d454:	6062      	str	r2, [r4, #4]
 800d456:	04d9      	lsls	r1, r3, #19
 800d458:	6922      	ldr	r2, [r4, #16]
 800d45a:	6022      	str	r2, [r4, #0]
 800d45c:	d504      	bpl.n	800d468 <__sflush_r+0x78>
 800d45e:	1c42      	adds	r2, r0, #1
 800d460:	d101      	bne.n	800d466 <__sflush_r+0x76>
 800d462:	682b      	ldr	r3, [r5, #0]
 800d464:	b903      	cbnz	r3, 800d468 <__sflush_r+0x78>
 800d466:	6560      	str	r0, [r4, #84]	@ 0x54
 800d468:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d46a:	602f      	str	r7, [r5, #0]
 800d46c:	b1b9      	cbz	r1, 800d49e <__sflush_r+0xae>
 800d46e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d472:	4299      	cmp	r1, r3
 800d474:	d002      	beq.n	800d47c <__sflush_r+0x8c>
 800d476:	4628      	mov	r0, r5
 800d478:	f7fe f8ea 	bl	800b650 <_free_r>
 800d47c:	2300      	movs	r3, #0
 800d47e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d480:	e00d      	b.n	800d49e <__sflush_r+0xae>
 800d482:	2301      	movs	r3, #1
 800d484:	4628      	mov	r0, r5
 800d486:	47b0      	blx	r6
 800d488:	4602      	mov	r2, r0
 800d48a:	1c50      	adds	r0, r2, #1
 800d48c:	d1c9      	bne.n	800d422 <__sflush_r+0x32>
 800d48e:	682b      	ldr	r3, [r5, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d0c6      	beq.n	800d422 <__sflush_r+0x32>
 800d494:	2b1d      	cmp	r3, #29
 800d496:	d001      	beq.n	800d49c <__sflush_r+0xac>
 800d498:	2b16      	cmp	r3, #22
 800d49a:	d11e      	bne.n	800d4da <__sflush_r+0xea>
 800d49c:	602f      	str	r7, [r5, #0]
 800d49e:	2000      	movs	r0, #0
 800d4a0:	e022      	b.n	800d4e8 <__sflush_r+0xf8>
 800d4a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4a6:	b21b      	sxth	r3, r3
 800d4a8:	e01b      	b.n	800d4e2 <__sflush_r+0xf2>
 800d4aa:	690f      	ldr	r7, [r1, #16]
 800d4ac:	2f00      	cmp	r7, #0
 800d4ae:	d0f6      	beq.n	800d49e <__sflush_r+0xae>
 800d4b0:	0793      	lsls	r3, r2, #30
 800d4b2:	680e      	ldr	r6, [r1, #0]
 800d4b4:	bf08      	it	eq
 800d4b6:	694b      	ldreq	r3, [r1, #20]
 800d4b8:	600f      	str	r7, [r1, #0]
 800d4ba:	bf18      	it	ne
 800d4bc:	2300      	movne	r3, #0
 800d4be:	eba6 0807 	sub.w	r8, r6, r7
 800d4c2:	608b      	str	r3, [r1, #8]
 800d4c4:	f1b8 0f00 	cmp.w	r8, #0
 800d4c8:	dde9      	ble.n	800d49e <__sflush_r+0xae>
 800d4ca:	6a21      	ldr	r1, [r4, #32]
 800d4cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d4ce:	4643      	mov	r3, r8
 800d4d0:	463a      	mov	r2, r7
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	47b0      	blx	r6
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	dc08      	bgt.n	800d4ec <__sflush_r+0xfc>
 800d4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4e2:	81a3      	strh	r3, [r4, #12]
 800d4e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ec:	4407      	add	r7, r0
 800d4ee:	eba8 0800 	sub.w	r8, r8, r0
 800d4f2:	e7e7      	b.n	800d4c4 <__sflush_r+0xd4>
 800d4f4:	dfbffffe 	.word	0xdfbffffe

0800d4f8 <_fflush_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	690b      	ldr	r3, [r1, #16]
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	460c      	mov	r4, r1
 800d500:	b913      	cbnz	r3, 800d508 <_fflush_r+0x10>
 800d502:	2500      	movs	r5, #0
 800d504:	4628      	mov	r0, r5
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	b118      	cbz	r0, 800d512 <_fflush_r+0x1a>
 800d50a:	6a03      	ldr	r3, [r0, #32]
 800d50c:	b90b      	cbnz	r3, 800d512 <_fflush_r+0x1a>
 800d50e:	f7fd f815 	bl	800a53c <__sinit>
 800d512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d0f3      	beq.n	800d502 <_fflush_r+0xa>
 800d51a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d51c:	07d0      	lsls	r0, r2, #31
 800d51e:	d404      	bmi.n	800d52a <_fflush_r+0x32>
 800d520:	0599      	lsls	r1, r3, #22
 800d522:	d402      	bmi.n	800d52a <_fflush_r+0x32>
 800d524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d526:	f7fd fa3e 	bl	800a9a6 <__retarget_lock_acquire_recursive>
 800d52a:	4628      	mov	r0, r5
 800d52c:	4621      	mov	r1, r4
 800d52e:	f7ff ff5f 	bl	800d3f0 <__sflush_r>
 800d532:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d534:	07da      	lsls	r2, r3, #31
 800d536:	4605      	mov	r5, r0
 800d538:	d4e4      	bmi.n	800d504 <_fflush_r+0xc>
 800d53a:	89a3      	ldrh	r3, [r4, #12]
 800d53c:	059b      	lsls	r3, r3, #22
 800d53e:	d4e1      	bmi.n	800d504 <_fflush_r+0xc>
 800d540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d542:	f7fd fa31 	bl	800a9a8 <__retarget_lock_release_recursive>
 800d546:	e7dd      	b.n	800d504 <_fflush_r+0xc>

0800d548 <__swhatbuf_r>:
 800d548:	b570      	push	{r4, r5, r6, lr}
 800d54a:	460c      	mov	r4, r1
 800d54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d550:	2900      	cmp	r1, #0
 800d552:	b096      	sub	sp, #88	@ 0x58
 800d554:	4615      	mov	r5, r2
 800d556:	461e      	mov	r6, r3
 800d558:	da0d      	bge.n	800d576 <__swhatbuf_r+0x2e>
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d560:	f04f 0100 	mov.w	r1, #0
 800d564:	bf14      	ite	ne
 800d566:	2340      	movne	r3, #64	@ 0x40
 800d568:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d56c:	2000      	movs	r0, #0
 800d56e:	6031      	str	r1, [r6, #0]
 800d570:	602b      	str	r3, [r5, #0]
 800d572:	b016      	add	sp, #88	@ 0x58
 800d574:	bd70      	pop	{r4, r5, r6, pc}
 800d576:	466a      	mov	r2, sp
 800d578:	f000 f85a 	bl	800d630 <_fstat_r>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	dbec      	blt.n	800d55a <__swhatbuf_r+0x12>
 800d580:	9901      	ldr	r1, [sp, #4]
 800d582:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d586:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d58a:	4259      	negs	r1, r3
 800d58c:	4159      	adcs	r1, r3
 800d58e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d592:	e7eb      	b.n	800d56c <__swhatbuf_r+0x24>

0800d594 <__smakebuf_r>:
 800d594:	898b      	ldrh	r3, [r1, #12]
 800d596:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d598:	079d      	lsls	r5, r3, #30
 800d59a:	4606      	mov	r6, r0
 800d59c:	460c      	mov	r4, r1
 800d59e:	d507      	bpl.n	800d5b0 <__smakebuf_r+0x1c>
 800d5a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5a4:	6023      	str	r3, [r4, #0]
 800d5a6:	6123      	str	r3, [r4, #16]
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	6163      	str	r3, [r4, #20]
 800d5ac:	b003      	add	sp, #12
 800d5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5b0:	ab01      	add	r3, sp, #4
 800d5b2:	466a      	mov	r2, sp
 800d5b4:	f7ff ffc8 	bl	800d548 <__swhatbuf_r>
 800d5b8:	9f00      	ldr	r7, [sp, #0]
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	4639      	mov	r1, r7
 800d5be:	4630      	mov	r0, r6
 800d5c0:	f7fe f8ba 	bl	800b738 <_malloc_r>
 800d5c4:	b948      	cbnz	r0, 800d5da <__smakebuf_r+0x46>
 800d5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ca:	059a      	lsls	r2, r3, #22
 800d5cc:	d4ee      	bmi.n	800d5ac <__smakebuf_r+0x18>
 800d5ce:	f023 0303 	bic.w	r3, r3, #3
 800d5d2:	f043 0302 	orr.w	r3, r3, #2
 800d5d6:	81a3      	strh	r3, [r4, #12]
 800d5d8:	e7e2      	b.n	800d5a0 <__smakebuf_r+0xc>
 800d5da:	89a3      	ldrh	r3, [r4, #12]
 800d5dc:	6020      	str	r0, [r4, #0]
 800d5de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5e2:	81a3      	strh	r3, [r4, #12]
 800d5e4:	9b01      	ldr	r3, [sp, #4]
 800d5e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d5ea:	b15b      	cbz	r3, 800d604 <__smakebuf_r+0x70>
 800d5ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f000 f82f 	bl	800d654 <_isatty_r>
 800d5f6:	b128      	cbz	r0, 800d604 <__smakebuf_r+0x70>
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	f023 0303 	bic.w	r3, r3, #3
 800d5fe:	f043 0301 	orr.w	r3, r3, #1
 800d602:	81a3      	strh	r3, [r4, #12]
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	431d      	orrs	r5, r3
 800d608:	81a5      	strh	r5, [r4, #12]
 800d60a:	e7cf      	b.n	800d5ac <__smakebuf_r+0x18>

0800d60c <strncmp>:
 800d60c:	b510      	push	{r4, lr}
 800d60e:	b16a      	cbz	r2, 800d62c <strncmp+0x20>
 800d610:	3901      	subs	r1, #1
 800d612:	1884      	adds	r4, r0, r2
 800d614:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d618:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d103      	bne.n	800d628 <strncmp+0x1c>
 800d620:	42a0      	cmp	r0, r4
 800d622:	d001      	beq.n	800d628 <strncmp+0x1c>
 800d624:	2a00      	cmp	r2, #0
 800d626:	d1f5      	bne.n	800d614 <strncmp+0x8>
 800d628:	1ad0      	subs	r0, r2, r3
 800d62a:	bd10      	pop	{r4, pc}
 800d62c:	4610      	mov	r0, r2
 800d62e:	e7fc      	b.n	800d62a <strncmp+0x1e>

0800d630 <_fstat_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d07      	ldr	r5, [pc, #28]	@ (800d650 <_fstat_r+0x20>)
 800d634:	2300      	movs	r3, #0
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	4611      	mov	r1, r2
 800d63c:	602b      	str	r3, [r5, #0]
 800d63e:	f7f4 f8ef 	bl	8001820 <_fstat>
 800d642:	1c43      	adds	r3, r0, #1
 800d644:	d102      	bne.n	800d64c <_fstat_r+0x1c>
 800d646:	682b      	ldr	r3, [r5, #0]
 800d648:	b103      	cbz	r3, 800d64c <_fstat_r+0x1c>
 800d64a:	6023      	str	r3, [r4, #0]
 800d64c:	bd38      	pop	{r3, r4, r5, pc}
 800d64e:	bf00      	nop
 800d650:	200019ac 	.word	0x200019ac

0800d654 <_isatty_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d06      	ldr	r5, [pc, #24]	@ (800d670 <_isatty_r+0x1c>)
 800d658:	2300      	movs	r3, #0
 800d65a:	4604      	mov	r4, r0
 800d65c:	4608      	mov	r0, r1
 800d65e:	602b      	str	r3, [r5, #0]
 800d660:	f7f4 f8ee 	bl	8001840 <_isatty>
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	d102      	bne.n	800d66e <_isatty_r+0x1a>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	b103      	cbz	r3, 800d66e <_isatty_r+0x1a>
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	200019ac 	.word	0x200019ac

0800d674 <_sbrk_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	4d06      	ldr	r5, [pc, #24]	@ (800d690 <_sbrk_r+0x1c>)
 800d678:	2300      	movs	r3, #0
 800d67a:	4604      	mov	r4, r0
 800d67c:	4608      	mov	r0, r1
 800d67e:	602b      	str	r3, [r5, #0]
 800d680:	f7f4 f8f6 	bl	8001870 <_sbrk>
 800d684:	1c43      	adds	r3, r0, #1
 800d686:	d102      	bne.n	800d68e <_sbrk_r+0x1a>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	b103      	cbz	r3, 800d68e <_sbrk_r+0x1a>
 800d68c:	6023      	str	r3, [r4, #0]
 800d68e:	bd38      	pop	{r3, r4, r5, pc}
 800d690:	200019ac 	.word	0x200019ac

0800d694 <memcpy>:
 800d694:	440a      	add	r2, r1
 800d696:	4291      	cmp	r1, r2
 800d698:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d69c:	d100      	bne.n	800d6a0 <memcpy+0xc>
 800d69e:	4770      	bx	lr
 800d6a0:	b510      	push	{r4, lr}
 800d6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6aa:	4291      	cmp	r1, r2
 800d6ac:	d1f9      	bne.n	800d6a2 <memcpy+0xe>
 800d6ae:	bd10      	pop	{r4, pc}

0800d6b0 <nan>:
 800d6b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d6b8 <nan+0x8>
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	00000000 	.word	0x00000000
 800d6bc:	7ff80000 	.word	0x7ff80000

0800d6c0 <__assert_func>:
 800d6c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6c2:	4614      	mov	r4, r2
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	4b09      	ldr	r3, [pc, #36]	@ (800d6ec <__assert_func+0x2c>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4605      	mov	r5, r0
 800d6cc:	68d8      	ldr	r0, [r3, #12]
 800d6ce:	b954      	cbnz	r4, 800d6e6 <__assert_func+0x26>
 800d6d0:	4b07      	ldr	r3, [pc, #28]	@ (800d6f0 <__assert_func+0x30>)
 800d6d2:	461c      	mov	r4, r3
 800d6d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6d8:	9100      	str	r1, [sp, #0]
 800d6da:	462b      	mov	r3, r5
 800d6dc:	4905      	ldr	r1, [pc, #20]	@ (800d6f4 <__assert_func+0x34>)
 800d6de:	f000 fba7 	bl	800de30 <fiprintf>
 800d6e2:	f000 fbb7 	bl	800de54 <abort>
 800d6e6:	4b04      	ldr	r3, [pc, #16]	@ (800d6f8 <__assert_func+0x38>)
 800d6e8:	e7f4      	b.n	800d6d4 <__assert_func+0x14>
 800d6ea:	bf00      	nop
 800d6ec:	20000f5c 	.word	0x20000f5c
 800d6f0:	0800eb4d 	.word	0x0800eb4d
 800d6f4:	0800eb1f 	.word	0x0800eb1f
 800d6f8:	0800eb12 	.word	0x0800eb12

0800d6fc <_calloc_r>:
 800d6fc:	b570      	push	{r4, r5, r6, lr}
 800d6fe:	fba1 5402 	umull	r5, r4, r1, r2
 800d702:	b93c      	cbnz	r4, 800d714 <_calloc_r+0x18>
 800d704:	4629      	mov	r1, r5
 800d706:	f7fe f817 	bl	800b738 <_malloc_r>
 800d70a:	4606      	mov	r6, r0
 800d70c:	b928      	cbnz	r0, 800d71a <_calloc_r+0x1e>
 800d70e:	2600      	movs	r6, #0
 800d710:	4630      	mov	r0, r6
 800d712:	bd70      	pop	{r4, r5, r6, pc}
 800d714:	220c      	movs	r2, #12
 800d716:	6002      	str	r2, [r0, #0]
 800d718:	e7f9      	b.n	800d70e <_calloc_r+0x12>
 800d71a:	462a      	mov	r2, r5
 800d71c:	4621      	mov	r1, r4
 800d71e:	f7fd f8c5 	bl	800a8ac <memset>
 800d722:	e7f5      	b.n	800d710 <_calloc_r+0x14>

0800d724 <rshift>:
 800d724:	6903      	ldr	r3, [r0, #16]
 800d726:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d72a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d72e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d732:	f100 0414 	add.w	r4, r0, #20
 800d736:	dd45      	ble.n	800d7c4 <rshift+0xa0>
 800d738:	f011 011f 	ands.w	r1, r1, #31
 800d73c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d740:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d744:	d10c      	bne.n	800d760 <rshift+0x3c>
 800d746:	f100 0710 	add.w	r7, r0, #16
 800d74a:	4629      	mov	r1, r5
 800d74c:	42b1      	cmp	r1, r6
 800d74e:	d334      	bcc.n	800d7ba <rshift+0x96>
 800d750:	1a9b      	subs	r3, r3, r2
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	1eea      	subs	r2, r5, #3
 800d756:	4296      	cmp	r6, r2
 800d758:	bf38      	it	cc
 800d75a:	2300      	movcc	r3, #0
 800d75c:	4423      	add	r3, r4
 800d75e:	e015      	b.n	800d78c <rshift+0x68>
 800d760:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d764:	f1c1 0820 	rsb	r8, r1, #32
 800d768:	40cf      	lsrs	r7, r1
 800d76a:	f105 0e04 	add.w	lr, r5, #4
 800d76e:	46a1      	mov	r9, r4
 800d770:	4576      	cmp	r6, lr
 800d772:	46f4      	mov	ip, lr
 800d774:	d815      	bhi.n	800d7a2 <rshift+0x7e>
 800d776:	1a9a      	subs	r2, r3, r2
 800d778:	0092      	lsls	r2, r2, #2
 800d77a:	3a04      	subs	r2, #4
 800d77c:	3501      	adds	r5, #1
 800d77e:	42ae      	cmp	r6, r5
 800d780:	bf38      	it	cc
 800d782:	2200      	movcc	r2, #0
 800d784:	18a3      	adds	r3, r4, r2
 800d786:	50a7      	str	r7, [r4, r2]
 800d788:	b107      	cbz	r7, 800d78c <rshift+0x68>
 800d78a:	3304      	adds	r3, #4
 800d78c:	1b1a      	subs	r2, r3, r4
 800d78e:	42a3      	cmp	r3, r4
 800d790:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d794:	bf08      	it	eq
 800d796:	2300      	moveq	r3, #0
 800d798:	6102      	str	r2, [r0, #16]
 800d79a:	bf08      	it	eq
 800d79c:	6143      	streq	r3, [r0, #20]
 800d79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7a2:	f8dc c000 	ldr.w	ip, [ip]
 800d7a6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d7aa:	ea4c 0707 	orr.w	r7, ip, r7
 800d7ae:	f849 7b04 	str.w	r7, [r9], #4
 800d7b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7b6:	40cf      	lsrs	r7, r1
 800d7b8:	e7da      	b.n	800d770 <rshift+0x4c>
 800d7ba:	f851 cb04 	ldr.w	ip, [r1], #4
 800d7be:	f847 cf04 	str.w	ip, [r7, #4]!
 800d7c2:	e7c3      	b.n	800d74c <rshift+0x28>
 800d7c4:	4623      	mov	r3, r4
 800d7c6:	e7e1      	b.n	800d78c <rshift+0x68>

0800d7c8 <__hexdig_fun>:
 800d7c8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d7cc:	2b09      	cmp	r3, #9
 800d7ce:	d802      	bhi.n	800d7d6 <__hexdig_fun+0xe>
 800d7d0:	3820      	subs	r0, #32
 800d7d2:	b2c0      	uxtb	r0, r0
 800d7d4:	4770      	bx	lr
 800d7d6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d7da:	2b05      	cmp	r3, #5
 800d7dc:	d801      	bhi.n	800d7e2 <__hexdig_fun+0x1a>
 800d7de:	3847      	subs	r0, #71	@ 0x47
 800d7e0:	e7f7      	b.n	800d7d2 <__hexdig_fun+0xa>
 800d7e2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d7e6:	2b05      	cmp	r3, #5
 800d7e8:	d801      	bhi.n	800d7ee <__hexdig_fun+0x26>
 800d7ea:	3827      	subs	r0, #39	@ 0x27
 800d7ec:	e7f1      	b.n	800d7d2 <__hexdig_fun+0xa>
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	4770      	bx	lr
	...

0800d7f4 <__gethex>:
 800d7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f8:	b085      	sub	sp, #20
 800d7fa:	468a      	mov	sl, r1
 800d7fc:	9302      	str	r3, [sp, #8]
 800d7fe:	680b      	ldr	r3, [r1, #0]
 800d800:	9001      	str	r0, [sp, #4]
 800d802:	4690      	mov	r8, r2
 800d804:	1c9c      	adds	r4, r3, #2
 800d806:	46a1      	mov	r9, r4
 800d808:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d80c:	2830      	cmp	r0, #48	@ 0x30
 800d80e:	d0fa      	beq.n	800d806 <__gethex+0x12>
 800d810:	eba9 0303 	sub.w	r3, r9, r3
 800d814:	f1a3 0b02 	sub.w	fp, r3, #2
 800d818:	f7ff ffd6 	bl	800d7c8 <__hexdig_fun>
 800d81c:	4605      	mov	r5, r0
 800d81e:	2800      	cmp	r0, #0
 800d820:	d168      	bne.n	800d8f4 <__gethex+0x100>
 800d822:	49a0      	ldr	r1, [pc, #640]	@ (800daa4 <__gethex+0x2b0>)
 800d824:	2201      	movs	r2, #1
 800d826:	4648      	mov	r0, r9
 800d828:	f7ff fef0 	bl	800d60c <strncmp>
 800d82c:	4607      	mov	r7, r0
 800d82e:	2800      	cmp	r0, #0
 800d830:	d167      	bne.n	800d902 <__gethex+0x10e>
 800d832:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d836:	4626      	mov	r6, r4
 800d838:	f7ff ffc6 	bl	800d7c8 <__hexdig_fun>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d062      	beq.n	800d906 <__gethex+0x112>
 800d840:	4623      	mov	r3, r4
 800d842:	7818      	ldrb	r0, [r3, #0]
 800d844:	2830      	cmp	r0, #48	@ 0x30
 800d846:	4699      	mov	r9, r3
 800d848:	f103 0301 	add.w	r3, r3, #1
 800d84c:	d0f9      	beq.n	800d842 <__gethex+0x4e>
 800d84e:	f7ff ffbb 	bl	800d7c8 <__hexdig_fun>
 800d852:	fab0 f580 	clz	r5, r0
 800d856:	096d      	lsrs	r5, r5, #5
 800d858:	f04f 0b01 	mov.w	fp, #1
 800d85c:	464a      	mov	r2, r9
 800d85e:	4616      	mov	r6, r2
 800d860:	3201      	adds	r2, #1
 800d862:	7830      	ldrb	r0, [r6, #0]
 800d864:	f7ff ffb0 	bl	800d7c8 <__hexdig_fun>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d1f8      	bne.n	800d85e <__gethex+0x6a>
 800d86c:	498d      	ldr	r1, [pc, #564]	@ (800daa4 <__gethex+0x2b0>)
 800d86e:	2201      	movs	r2, #1
 800d870:	4630      	mov	r0, r6
 800d872:	f7ff fecb 	bl	800d60c <strncmp>
 800d876:	2800      	cmp	r0, #0
 800d878:	d13f      	bne.n	800d8fa <__gethex+0x106>
 800d87a:	b944      	cbnz	r4, 800d88e <__gethex+0x9a>
 800d87c:	1c74      	adds	r4, r6, #1
 800d87e:	4622      	mov	r2, r4
 800d880:	4616      	mov	r6, r2
 800d882:	3201      	adds	r2, #1
 800d884:	7830      	ldrb	r0, [r6, #0]
 800d886:	f7ff ff9f 	bl	800d7c8 <__hexdig_fun>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d1f8      	bne.n	800d880 <__gethex+0x8c>
 800d88e:	1ba4      	subs	r4, r4, r6
 800d890:	00a7      	lsls	r7, r4, #2
 800d892:	7833      	ldrb	r3, [r6, #0]
 800d894:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d898:	2b50      	cmp	r3, #80	@ 0x50
 800d89a:	d13e      	bne.n	800d91a <__gethex+0x126>
 800d89c:	7873      	ldrb	r3, [r6, #1]
 800d89e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d8a0:	d033      	beq.n	800d90a <__gethex+0x116>
 800d8a2:	2b2d      	cmp	r3, #45	@ 0x2d
 800d8a4:	d034      	beq.n	800d910 <__gethex+0x11c>
 800d8a6:	1c71      	adds	r1, r6, #1
 800d8a8:	2400      	movs	r4, #0
 800d8aa:	7808      	ldrb	r0, [r1, #0]
 800d8ac:	f7ff ff8c 	bl	800d7c8 <__hexdig_fun>
 800d8b0:	1e43      	subs	r3, r0, #1
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	2b18      	cmp	r3, #24
 800d8b6:	d830      	bhi.n	800d91a <__gethex+0x126>
 800d8b8:	f1a0 0210 	sub.w	r2, r0, #16
 800d8bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d8c0:	f7ff ff82 	bl	800d7c8 <__hexdig_fun>
 800d8c4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d8c8:	fa5f fc8c 	uxtb.w	ip, ip
 800d8cc:	f1bc 0f18 	cmp.w	ip, #24
 800d8d0:	f04f 030a 	mov.w	r3, #10
 800d8d4:	d91e      	bls.n	800d914 <__gethex+0x120>
 800d8d6:	b104      	cbz	r4, 800d8da <__gethex+0xe6>
 800d8d8:	4252      	negs	r2, r2
 800d8da:	4417      	add	r7, r2
 800d8dc:	f8ca 1000 	str.w	r1, [sl]
 800d8e0:	b1ed      	cbz	r5, 800d91e <__gethex+0x12a>
 800d8e2:	f1bb 0f00 	cmp.w	fp, #0
 800d8e6:	bf0c      	ite	eq
 800d8e8:	2506      	moveq	r5, #6
 800d8ea:	2500      	movne	r5, #0
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	b005      	add	sp, #20
 800d8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f4:	2500      	movs	r5, #0
 800d8f6:	462c      	mov	r4, r5
 800d8f8:	e7b0      	b.n	800d85c <__gethex+0x68>
 800d8fa:	2c00      	cmp	r4, #0
 800d8fc:	d1c7      	bne.n	800d88e <__gethex+0x9a>
 800d8fe:	4627      	mov	r7, r4
 800d900:	e7c7      	b.n	800d892 <__gethex+0x9e>
 800d902:	464e      	mov	r6, r9
 800d904:	462f      	mov	r7, r5
 800d906:	2501      	movs	r5, #1
 800d908:	e7c3      	b.n	800d892 <__gethex+0x9e>
 800d90a:	2400      	movs	r4, #0
 800d90c:	1cb1      	adds	r1, r6, #2
 800d90e:	e7cc      	b.n	800d8aa <__gethex+0xb6>
 800d910:	2401      	movs	r4, #1
 800d912:	e7fb      	b.n	800d90c <__gethex+0x118>
 800d914:	fb03 0002 	mla	r0, r3, r2, r0
 800d918:	e7ce      	b.n	800d8b8 <__gethex+0xc4>
 800d91a:	4631      	mov	r1, r6
 800d91c:	e7de      	b.n	800d8dc <__gethex+0xe8>
 800d91e:	eba6 0309 	sub.w	r3, r6, r9
 800d922:	3b01      	subs	r3, #1
 800d924:	4629      	mov	r1, r5
 800d926:	2b07      	cmp	r3, #7
 800d928:	dc0a      	bgt.n	800d940 <__gethex+0x14c>
 800d92a:	9801      	ldr	r0, [sp, #4]
 800d92c:	f7fd ff90 	bl	800b850 <_Balloc>
 800d930:	4604      	mov	r4, r0
 800d932:	b940      	cbnz	r0, 800d946 <__gethex+0x152>
 800d934:	4b5c      	ldr	r3, [pc, #368]	@ (800daa8 <__gethex+0x2b4>)
 800d936:	4602      	mov	r2, r0
 800d938:	21e4      	movs	r1, #228	@ 0xe4
 800d93a:	485c      	ldr	r0, [pc, #368]	@ (800daac <__gethex+0x2b8>)
 800d93c:	f7ff fec0 	bl	800d6c0 <__assert_func>
 800d940:	3101      	adds	r1, #1
 800d942:	105b      	asrs	r3, r3, #1
 800d944:	e7ef      	b.n	800d926 <__gethex+0x132>
 800d946:	f100 0a14 	add.w	sl, r0, #20
 800d94a:	2300      	movs	r3, #0
 800d94c:	4655      	mov	r5, sl
 800d94e:	469b      	mov	fp, r3
 800d950:	45b1      	cmp	r9, r6
 800d952:	d337      	bcc.n	800d9c4 <__gethex+0x1d0>
 800d954:	f845 bb04 	str.w	fp, [r5], #4
 800d958:	eba5 050a 	sub.w	r5, r5, sl
 800d95c:	10ad      	asrs	r5, r5, #2
 800d95e:	6125      	str	r5, [r4, #16]
 800d960:	4658      	mov	r0, fp
 800d962:	f7fe f867 	bl	800ba34 <__hi0bits>
 800d966:	016d      	lsls	r5, r5, #5
 800d968:	f8d8 6000 	ldr.w	r6, [r8]
 800d96c:	1a2d      	subs	r5, r5, r0
 800d96e:	42b5      	cmp	r5, r6
 800d970:	dd54      	ble.n	800da1c <__gethex+0x228>
 800d972:	1bad      	subs	r5, r5, r6
 800d974:	4629      	mov	r1, r5
 800d976:	4620      	mov	r0, r4
 800d978:	f7fe fbfb 	bl	800c172 <__any_on>
 800d97c:	4681      	mov	r9, r0
 800d97e:	b178      	cbz	r0, 800d9a0 <__gethex+0x1ac>
 800d980:	1e6b      	subs	r3, r5, #1
 800d982:	1159      	asrs	r1, r3, #5
 800d984:	f003 021f 	and.w	r2, r3, #31
 800d988:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d98c:	f04f 0901 	mov.w	r9, #1
 800d990:	fa09 f202 	lsl.w	r2, r9, r2
 800d994:	420a      	tst	r2, r1
 800d996:	d003      	beq.n	800d9a0 <__gethex+0x1ac>
 800d998:	454b      	cmp	r3, r9
 800d99a:	dc36      	bgt.n	800da0a <__gethex+0x216>
 800d99c:	f04f 0902 	mov.w	r9, #2
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f7ff febe 	bl	800d724 <rshift>
 800d9a8:	442f      	add	r7, r5
 800d9aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9ae:	42bb      	cmp	r3, r7
 800d9b0:	da42      	bge.n	800da38 <__gethex+0x244>
 800d9b2:	9801      	ldr	r0, [sp, #4]
 800d9b4:	4621      	mov	r1, r4
 800d9b6:	f7fd ff8b 	bl	800b8d0 <_Bfree>
 800d9ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9bc:	2300      	movs	r3, #0
 800d9be:	6013      	str	r3, [r2, #0]
 800d9c0:	25a3      	movs	r5, #163	@ 0xa3
 800d9c2:	e793      	b.n	800d8ec <__gethex+0xf8>
 800d9c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d9c8:	2a2e      	cmp	r2, #46	@ 0x2e
 800d9ca:	d012      	beq.n	800d9f2 <__gethex+0x1fe>
 800d9cc:	2b20      	cmp	r3, #32
 800d9ce:	d104      	bne.n	800d9da <__gethex+0x1e6>
 800d9d0:	f845 bb04 	str.w	fp, [r5], #4
 800d9d4:	f04f 0b00 	mov.w	fp, #0
 800d9d8:	465b      	mov	r3, fp
 800d9da:	7830      	ldrb	r0, [r6, #0]
 800d9dc:	9303      	str	r3, [sp, #12]
 800d9de:	f7ff fef3 	bl	800d7c8 <__hexdig_fun>
 800d9e2:	9b03      	ldr	r3, [sp, #12]
 800d9e4:	f000 000f 	and.w	r0, r0, #15
 800d9e8:	4098      	lsls	r0, r3
 800d9ea:	ea4b 0b00 	orr.w	fp, fp, r0
 800d9ee:	3304      	adds	r3, #4
 800d9f0:	e7ae      	b.n	800d950 <__gethex+0x15c>
 800d9f2:	45b1      	cmp	r9, r6
 800d9f4:	d8ea      	bhi.n	800d9cc <__gethex+0x1d8>
 800d9f6:	492b      	ldr	r1, [pc, #172]	@ (800daa4 <__gethex+0x2b0>)
 800d9f8:	9303      	str	r3, [sp, #12]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f7ff fe05 	bl	800d60c <strncmp>
 800da02:	9b03      	ldr	r3, [sp, #12]
 800da04:	2800      	cmp	r0, #0
 800da06:	d1e1      	bne.n	800d9cc <__gethex+0x1d8>
 800da08:	e7a2      	b.n	800d950 <__gethex+0x15c>
 800da0a:	1ea9      	subs	r1, r5, #2
 800da0c:	4620      	mov	r0, r4
 800da0e:	f7fe fbb0 	bl	800c172 <__any_on>
 800da12:	2800      	cmp	r0, #0
 800da14:	d0c2      	beq.n	800d99c <__gethex+0x1a8>
 800da16:	f04f 0903 	mov.w	r9, #3
 800da1a:	e7c1      	b.n	800d9a0 <__gethex+0x1ac>
 800da1c:	da09      	bge.n	800da32 <__gethex+0x23e>
 800da1e:	1b75      	subs	r5, r6, r5
 800da20:	4621      	mov	r1, r4
 800da22:	9801      	ldr	r0, [sp, #4]
 800da24:	462a      	mov	r2, r5
 800da26:	f7fe f96b 	bl	800bd00 <__lshift>
 800da2a:	1b7f      	subs	r7, r7, r5
 800da2c:	4604      	mov	r4, r0
 800da2e:	f100 0a14 	add.w	sl, r0, #20
 800da32:	f04f 0900 	mov.w	r9, #0
 800da36:	e7b8      	b.n	800d9aa <__gethex+0x1b6>
 800da38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800da3c:	42bd      	cmp	r5, r7
 800da3e:	dd6f      	ble.n	800db20 <__gethex+0x32c>
 800da40:	1bed      	subs	r5, r5, r7
 800da42:	42ae      	cmp	r6, r5
 800da44:	dc34      	bgt.n	800dab0 <__gethex+0x2bc>
 800da46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d022      	beq.n	800da94 <__gethex+0x2a0>
 800da4e:	2b03      	cmp	r3, #3
 800da50:	d024      	beq.n	800da9c <__gethex+0x2a8>
 800da52:	2b01      	cmp	r3, #1
 800da54:	d115      	bne.n	800da82 <__gethex+0x28e>
 800da56:	42ae      	cmp	r6, r5
 800da58:	d113      	bne.n	800da82 <__gethex+0x28e>
 800da5a:	2e01      	cmp	r6, #1
 800da5c:	d10b      	bne.n	800da76 <__gethex+0x282>
 800da5e:	9a02      	ldr	r2, [sp, #8]
 800da60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da64:	6013      	str	r3, [r2, #0]
 800da66:	2301      	movs	r3, #1
 800da68:	6123      	str	r3, [r4, #16]
 800da6a:	f8ca 3000 	str.w	r3, [sl]
 800da6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da70:	2562      	movs	r5, #98	@ 0x62
 800da72:	601c      	str	r4, [r3, #0]
 800da74:	e73a      	b.n	800d8ec <__gethex+0xf8>
 800da76:	1e71      	subs	r1, r6, #1
 800da78:	4620      	mov	r0, r4
 800da7a:	f7fe fb7a 	bl	800c172 <__any_on>
 800da7e:	2800      	cmp	r0, #0
 800da80:	d1ed      	bne.n	800da5e <__gethex+0x26a>
 800da82:	9801      	ldr	r0, [sp, #4]
 800da84:	4621      	mov	r1, r4
 800da86:	f7fd ff23 	bl	800b8d0 <_Bfree>
 800da8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da8c:	2300      	movs	r3, #0
 800da8e:	6013      	str	r3, [r2, #0]
 800da90:	2550      	movs	r5, #80	@ 0x50
 800da92:	e72b      	b.n	800d8ec <__gethex+0xf8>
 800da94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1f3      	bne.n	800da82 <__gethex+0x28e>
 800da9a:	e7e0      	b.n	800da5e <__gethex+0x26a>
 800da9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1dd      	bne.n	800da5e <__gethex+0x26a>
 800daa2:	e7ee      	b.n	800da82 <__gethex+0x28e>
 800daa4:	0800e9a0 	.word	0x0800e9a0
 800daa8:	0800e839 	.word	0x0800e839
 800daac:	0800eb4e 	.word	0x0800eb4e
 800dab0:	1e6f      	subs	r7, r5, #1
 800dab2:	f1b9 0f00 	cmp.w	r9, #0
 800dab6:	d130      	bne.n	800db1a <__gethex+0x326>
 800dab8:	b127      	cbz	r7, 800dac4 <__gethex+0x2d0>
 800daba:	4639      	mov	r1, r7
 800dabc:	4620      	mov	r0, r4
 800dabe:	f7fe fb58 	bl	800c172 <__any_on>
 800dac2:	4681      	mov	r9, r0
 800dac4:	117a      	asrs	r2, r7, #5
 800dac6:	2301      	movs	r3, #1
 800dac8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dacc:	f007 071f 	and.w	r7, r7, #31
 800dad0:	40bb      	lsls	r3, r7
 800dad2:	4213      	tst	r3, r2
 800dad4:	4629      	mov	r1, r5
 800dad6:	4620      	mov	r0, r4
 800dad8:	bf18      	it	ne
 800dada:	f049 0902 	orrne.w	r9, r9, #2
 800dade:	f7ff fe21 	bl	800d724 <rshift>
 800dae2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dae6:	1b76      	subs	r6, r6, r5
 800dae8:	2502      	movs	r5, #2
 800daea:	f1b9 0f00 	cmp.w	r9, #0
 800daee:	d047      	beq.n	800db80 <__gethex+0x38c>
 800daf0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800daf4:	2b02      	cmp	r3, #2
 800daf6:	d015      	beq.n	800db24 <__gethex+0x330>
 800daf8:	2b03      	cmp	r3, #3
 800dafa:	d017      	beq.n	800db2c <__gethex+0x338>
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d109      	bne.n	800db14 <__gethex+0x320>
 800db00:	f019 0f02 	tst.w	r9, #2
 800db04:	d006      	beq.n	800db14 <__gethex+0x320>
 800db06:	f8da 3000 	ldr.w	r3, [sl]
 800db0a:	ea49 0903 	orr.w	r9, r9, r3
 800db0e:	f019 0f01 	tst.w	r9, #1
 800db12:	d10e      	bne.n	800db32 <__gethex+0x33e>
 800db14:	f045 0510 	orr.w	r5, r5, #16
 800db18:	e032      	b.n	800db80 <__gethex+0x38c>
 800db1a:	f04f 0901 	mov.w	r9, #1
 800db1e:	e7d1      	b.n	800dac4 <__gethex+0x2d0>
 800db20:	2501      	movs	r5, #1
 800db22:	e7e2      	b.n	800daea <__gethex+0x2f6>
 800db24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db26:	f1c3 0301 	rsb	r3, r3, #1
 800db2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d0f0      	beq.n	800db14 <__gethex+0x320>
 800db32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800db36:	f104 0314 	add.w	r3, r4, #20
 800db3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800db3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800db42:	f04f 0c00 	mov.w	ip, #0
 800db46:	4618      	mov	r0, r3
 800db48:	f853 2b04 	ldr.w	r2, [r3], #4
 800db4c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800db50:	d01b      	beq.n	800db8a <__gethex+0x396>
 800db52:	3201      	adds	r2, #1
 800db54:	6002      	str	r2, [r0, #0]
 800db56:	2d02      	cmp	r5, #2
 800db58:	f104 0314 	add.w	r3, r4, #20
 800db5c:	d13c      	bne.n	800dbd8 <__gethex+0x3e4>
 800db5e:	f8d8 2000 	ldr.w	r2, [r8]
 800db62:	3a01      	subs	r2, #1
 800db64:	42b2      	cmp	r2, r6
 800db66:	d109      	bne.n	800db7c <__gethex+0x388>
 800db68:	1171      	asrs	r1, r6, #5
 800db6a:	2201      	movs	r2, #1
 800db6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db70:	f006 061f 	and.w	r6, r6, #31
 800db74:	fa02 f606 	lsl.w	r6, r2, r6
 800db78:	421e      	tst	r6, r3
 800db7a:	d13a      	bne.n	800dbf2 <__gethex+0x3fe>
 800db7c:	f045 0520 	orr.w	r5, r5, #32
 800db80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db82:	601c      	str	r4, [r3, #0]
 800db84:	9b02      	ldr	r3, [sp, #8]
 800db86:	601f      	str	r7, [r3, #0]
 800db88:	e6b0      	b.n	800d8ec <__gethex+0xf8>
 800db8a:	4299      	cmp	r1, r3
 800db8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800db90:	d8d9      	bhi.n	800db46 <__gethex+0x352>
 800db92:	68a3      	ldr	r3, [r4, #8]
 800db94:	459b      	cmp	fp, r3
 800db96:	db17      	blt.n	800dbc8 <__gethex+0x3d4>
 800db98:	6861      	ldr	r1, [r4, #4]
 800db9a:	9801      	ldr	r0, [sp, #4]
 800db9c:	3101      	adds	r1, #1
 800db9e:	f7fd fe57 	bl	800b850 <_Balloc>
 800dba2:	4681      	mov	r9, r0
 800dba4:	b918      	cbnz	r0, 800dbae <__gethex+0x3ba>
 800dba6:	4b1a      	ldr	r3, [pc, #104]	@ (800dc10 <__gethex+0x41c>)
 800dba8:	4602      	mov	r2, r0
 800dbaa:	2184      	movs	r1, #132	@ 0x84
 800dbac:	e6c5      	b.n	800d93a <__gethex+0x146>
 800dbae:	6922      	ldr	r2, [r4, #16]
 800dbb0:	3202      	adds	r2, #2
 800dbb2:	f104 010c 	add.w	r1, r4, #12
 800dbb6:	0092      	lsls	r2, r2, #2
 800dbb8:	300c      	adds	r0, #12
 800dbba:	f7ff fd6b 	bl	800d694 <memcpy>
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	9801      	ldr	r0, [sp, #4]
 800dbc2:	f7fd fe85 	bl	800b8d0 <_Bfree>
 800dbc6:	464c      	mov	r4, r9
 800dbc8:	6923      	ldr	r3, [r4, #16]
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbd0:	6122      	str	r2, [r4, #16]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	615a      	str	r2, [r3, #20]
 800dbd6:	e7be      	b.n	800db56 <__gethex+0x362>
 800dbd8:	6922      	ldr	r2, [r4, #16]
 800dbda:	455a      	cmp	r2, fp
 800dbdc:	dd0b      	ble.n	800dbf6 <__gethex+0x402>
 800dbde:	2101      	movs	r1, #1
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f7ff fd9f 	bl	800d724 <rshift>
 800dbe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbea:	3701      	adds	r7, #1
 800dbec:	42bb      	cmp	r3, r7
 800dbee:	f6ff aee0 	blt.w	800d9b2 <__gethex+0x1be>
 800dbf2:	2501      	movs	r5, #1
 800dbf4:	e7c2      	b.n	800db7c <__gethex+0x388>
 800dbf6:	f016 061f 	ands.w	r6, r6, #31
 800dbfa:	d0fa      	beq.n	800dbf2 <__gethex+0x3fe>
 800dbfc:	4453      	add	r3, sl
 800dbfe:	f1c6 0620 	rsb	r6, r6, #32
 800dc02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dc06:	f7fd ff15 	bl	800ba34 <__hi0bits>
 800dc0a:	42b0      	cmp	r0, r6
 800dc0c:	dbe7      	blt.n	800dbde <__gethex+0x3ea>
 800dc0e:	e7f0      	b.n	800dbf2 <__gethex+0x3fe>
 800dc10:	0800e839 	.word	0x0800e839

0800dc14 <L_shift>:
 800dc14:	f1c2 0208 	rsb	r2, r2, #8
 800dc18:	0092      	lsls	r2, r2, #2
 800dc1a:	b570      	push	{r4, r5, r6, lr}
 800dc1c:	f1c2 0620 	rsb	r6, r2, #32
 800dc20:	6843      	ldr	r3, [r0, #4]
 800dc22:	6804      	ldr	r4, [r0, #0]
 800dc24:	fa03 f506 	lsl.w	r5, r3, r6
 800dc28:	432c      	orrs	r4, r5
 800dc2a:	40d3      	lsrs	r3, r2
 800dc2c:	6004      	str	r4, [r0, #0]
 800dc2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800dc32:	4288      	cmp	r0, r1
 800dc34:	d3f4      	bcc.n	800dc20 <L_shift+0xc>
 800dc36:	bd70      	pop	{r4, r5, r6, pc}

0800dc38 <__match>:
 800dc38:	b530      	push	{r4, r5, lr}
 800dc3a:	6803      	ldr	r3, [r0, #0]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc42:	b914      	cbnz	r4, 800dc4a <__match+0x12>
 800dc44:	6003      	str	r3, [r0, #0]
 800dc46:	2001      	movs	r0, #1
 800dc48:	bd30      	pop	{r4, r5, pc}
 800dc4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dc52:	2d19      	cmp	r5, #25
 800dc54:	bf98      	it	ls
 800dc56:	3220      	addls	r2, #32
 800dc58:	42a2      	cmp	r2, r4
 800dc5a:	d0f0      	beq.n	800dc3e <__match+0x6>
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	e7f3      	b.n	800dc48 <__match+0x10>

0800dc60 <__hexnan>:
 800dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc64:	680b      	ldr	r3, [r1, #0]
 800dc66:	6801      	ldr	r1, [r0, #0]
 800dc68:	115e      	asrs	r6, r3, #5
 800dc6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dc6e:	f013 031f 	ands.w	r3, r3, #31
 800dc72:	b087      	sub	sp, #28
 800dc74:	bf18      	it	ne
 800dc76:	3604      	addne	r6, #4
 800dc78:	2500      	movs	r5, #0
 800dc7a:	1f37      	subs	r7, r6, #4
 800dc7c:	4682      	mov	sl, r0
 800dc7e:	4690      	mov	r8, r2
 800dc80:	9301      	str	r3, [sp, #4]
 800dc82:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc86:	46b9      	mov	r9, r7
 800dc88:	463c      	mov	r4, r7
 800dc8a:	9502      	str	r5, [sp, #8]
 800dc8c:	46ab      	mov	fp, r5
 800dc8e:	784a      	ldrb	r2, [r1, #1]
 800dc90:	1c4b      	adds	r3, r1, #1
 800dc92:	9303      	str	r3, [sp, #12]
 800dc94:	b342      	cbz	r2, 800dce8 <__hexnan+0x88>
 800dc96:	4610      	mov	r0, r2
 800dc98:	9105      	str	r1, [sp, #20]
 800dc9a:	9204      	str	r2, [sp, #16]
 800dc9c:	f7ff fd94 	bl	800d7c8 <__hexdig_fun>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d151      	bne.n	800dd48 <__hexnan+0xe8>
 800dca4:	9a04      	ldr	r2, [sp, #16]
 800dca6:	9905      	ldr	r1, [sp, #20]
 800dca8:	2a20      	cmp	r2, #32
 800dcaa:	d818      	bhi.n	800dcde <__hexnan+0x7e>
 800dcac:	9b02      	ldr	r3, [sp, #8]
 800dcae:	459b      	cmp	fp, r3
 800dcb0:	dd13      	ble.n	800dcda <__hexnan+0x7a>
 800dcb2:	454c      	cmp	r4, r9
 800dcb4:	d206      	bcs.n	800dcc4 <__hexnan+0x64>
 800dcb6:	2d07      	cmp	r5, #7
 800dcb8:	dc04      	bgt.n	800dcc4 <__hexnan+0x64>
 800dcba:	462a      	mov	r2, r5
 800dcbc:	4649      	mov	r1, r9
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f7ff ffa8 	bl	800dc14 <L_shift>
 800dcc4:	4544      	cmp	r4, r8
 800dcc6:	d952      	bls.n	800dd6e <__hexnan+0x10e>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	f1a4 0904 	sub.w	r9, r4, #4
 800dcce:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcd2:	f8cd b008 	str.w	fp, [sp, #8]
 800dcd6:	464c      	mov	r4, r9
 800dcd8:	461d      	mov	r5, r3
 800dcda:	9903      	ldr	r1, [sp, #12]
 800dcdc:	e7d7      	b.n	800dc8e <__hexnan+0x2e>
 800dcde:	2a29      	cmp	r2, #41	@ 0x29
 800dce0:	d157      	bne.n	800dd92 <__hexnan+0x132>
 800dce2:	3102      	adds	r1, #2
 800dce4:	f8ca 1000 	str.w	r1, [sl]
 800dce8:	f1bb 0f00 	cmp.w	fp, #0
 800dcec:	d051      	beq.n	800dd92 <__hexnan+0x132>
 800dcee:	454c      	cmp	r4, r9
 800dcf0:	d206      	bcs.n	800dd00 <__hexnan+0xa0>
 800dcf2:	2d07      	cmp	r5, #7
 800dcf4:	dc04      	bgt.n	800dd00 <__hexnan+0xa0>
 800dcf6:	462a      	mov	r2, r5
 800dcf8:	4649      	mov	r1, r9
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f7ff ff8a 	bl	800dc14 <L_shift>
 800dd00:	4544      	cmp	r4, r8
 800dd02:	d936      	bls.n	800dd72 <__hexnan+0x112>
 800dd04:	f1a8 0204 	sub.w	r2, r8, #4
 800dd08:	4623      	mov	r3, r4
 800dd0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dd0e:	f842 1f04 	str.w	r1, [r2, #4]!
 800dd12:	429f      	cmp	r7, r3
 800dd14:	d2f9      	bcs.n	800dd0a <__hexnan+0xaa>
 800dd16:	1b3b      	subs	r3, r7, r4
 800dd18:	f023 0303 	bic.w	r3, r3, #3
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	3401      	adds	r4, #1
 800dd20:	3e03      	subs	r6, #3
 800dd22:	42b4      	cmp	r4, r6
 800dd24:	bf88      	it	hi
 800dd26:	2304      	movhi	r3, #4
 800dd28:	4443      	add	r3, r8
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f843 2b04 	str.w	r2, [r3], #4
 800dd30:	429f      	cmp	r7, r3
 800dd32:	d2fb      	bcs.n	800dd2c <__hexnan+0xcc>
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	b91b      	cbnz	r3, 800dd40 <__hexnan+0xe0>
 800dd38:	4547      	cmp	r7, r8
 800dd3a:	d128      	bne.n	800dd8e <__hexnan+0x12e>
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	603b      	str	r3, [r7, #0]
 800dd40:	2005      	movs	r0, #5
 800dd42:	b007      	add	sp, #28
 800dd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd48:	3501      	adds	r5, #1
 800dd4a:	2d08      	cmp	r5, #8
 800dd4c:	f10b 0b01 	add.w	fp, fp, #1
 800dd50:	dd06      	ble.n	800dd60 <__hexnan+0x100>
 800dd52:	4544      	cmp	r4, r8
 800dd54:	d9c1      	bls.n	800dcda <__hexnan+0x7a>
 800dd56:	2300      	movs	r3, #0
 800dd58:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd5c:	2501      	movs	r5, #1
 800dd5e:	3c04      	subs	r4, #4
 800dd60:	6822      	ldr	r2, [r4, #0]
 800dd62:	f000 000f 	and.w	r0, r0, #15
 800dd66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dd6a:	6020      	str	r0, [r4, #0]
 800dd6c:	e7b5      	b.n	800dcda <__hexnan+0x7a>
 800dd6e:	2508      	movs	r5, #8
 800dd70:	e7b3      	b.n	800dcda <__hexnan+0x7a>
 800dd72:	9b01      	ldr	r3, [sp, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d0dd      	beq.n	800dd34 <__hexnan+0xd4>
 800dd78:	f1c3 0320 	rsb	r3, r3, #32
 800dd7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd80:	40da      	lsrs	r2, r3
 800dd82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd86:	4013      	ands	r3, r2
 800dd88:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd8c:	e7d2      	b.n	800dd34 <__hexnan+0xd4>
 800dd8e:	3f04      	subs	r7, #4
 800dd90:	e7d0      	b.n	800dd34 <__hexnan+0xd4>
 800dd92:	2004      	movs	r0, #4
 800dd94:	e7d5      	b.n	800dd42 <__hexnan+0xe2>

0800dd96 <__ascii_mbtowc>:
 800dd96:	b082      	sub	sp, #8
 800dd98:	b901      	cbnz	r1, 800dd9c <__ascii_mbtowc+0x6>
 800dd9a:	a901      	add	r1, sp, #4
 800dd9c:	b142      	cbz	r2, 800ddb0 <__ascii_mbtowc+0x1a>
 800dd9e:	b14b      	cbz	r3, 800ddb4 <__ascii_mbtowc+0x1e>
 800dda0:	7813      	ldrb	r3, [r2, #0]
 800dda2:	600b      	str	r3, [r1, #0]
 800dda4:	7812      	ldrb	r2, [r2, #0]
 800dda6:	1e10      	subs	r0, r2, #0
 800dda8:	bf18      	it	ne
 800ddaa:	2001      	movne	r0, #1
 800ddac:	b002      	add	sp, #8
 800ddae:	4770      	bx	lr
 800ddb0:	4610      	mov	r0, r2
 800ddb2:	e7fb      	b.n	800ddac <__ascii_mbtowc+0x16>
 800ddb4:	f06f 0001 	mvn.w	r0, #1
 800ddb8:	e7f8      	b.n	800ddac <__ascii_mbtowc+0x16>

0800ddba <_realloc_r>:
 800ddba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddbe:	4680      	mov	r8, r0
 800ddc0:	4615      	mov	r5, r2
 800ddc2:	460c      	mov	r4, r1
 800ddc4:	b921      	cbnz	r1, 800ddd0 <_realloc_r+0x16>
 800ddc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddca:	4611      	mov	r1, r2
 800ddcc:	f7fd bcb4 	b.w	800b738 <_malloc_r>
 800ddd0:	b92a      	cbnz	r2, 800ddde <_realloc_r+0x24>
 800ddd2:	f7fd fc3d 	bl	800b650 <_free_r>
 800ddd6:	2400      	movs	r4, #0
 800ddd8:	4620      	mov	r0, r4
 800ddda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddde:	f000 f840 	bl	800de62 <_malloc_usable_size_r>
 800dde2:	4285      	cmp	r5, r0
 800dde4:	4606      	mov	r6, r0
 800dde6:	d802      	bhi.n	800ddee <_realloc_r+0x34>
 800dde8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ddec:	d8f4      	bhi.n	800ddd8 <_realloc_r+0x1e>
 800ddee:	4629      	mov	r1, r5
 800ddf0:	4640      	mov	r0, r8
 800ddf2:	f7fd fca1 	bl	800b738 <_malloc_r>
 800ddf6:	4607      	mov	r7, r0
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	d0ec      	beq.n	800ddd6 <_realloc_r+0x1c>
 800ddfc:	42b5      	cmp	r5, r6
 800ddfe:	462a      	mov	r2, r5
 800de00:	4621      	mov	r1, r4
 800de02:	bf28      	it	cs
 800de04:	4632      	movcs	r2, r6
 800de06:	f7ff fc45 	bl	800d694 <memcpy>
 800de0a:	4621      	mov	r1, r4
 800de0c:	4640      	mov	r0, r8
 800de0e:	f7fd fc1f 	bl	800b650 <_free_r>
 800de12:	463c      	mov	r4, r7
 800de14:	e7e0      	b.n	800ddd8 <_realloc_r+0x1e>

0800de16 <__ascii_wctomb>:
 800de16:	4603      	mov	r3, r0
 800de18:	4608      	mov	r0, r1
 800de1a:	b141      	cbz	r1, 800de2e <__ascii_wctomb+0x18>
 800de1c:	2aff      	cmp	r2, #255	@ 0xff
 800de1e:	d904      	bls.n	800de2a <__ascii_wctomb+0x14>
 800de20:	228a      	movs	r2, #138	@ 0x8a
 800de22:	601a      	str	r2, [r3, #0]
 800de24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de28:	4770      	bx	lr
 800de2a:	700a      	strb	r2, [r1, #0]
 800de2c:	2001      	movs	r0, #1
 800de2e:	4770      	bx	lr

0800de30 <fiprintf>:
 800de30:	b40e      	push	{r1, r2, r3}
 800de32:	b503      	push	{r0, r1, lr}
 800de34:	4601      	mov	r1, r0
 800de36:	ab03      	add	r3, sp, #12
 800de38:	4805      	ldr	r0, [pc, #20]	@ (800de50 <fiprintf+0x20>)
 800de3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de3e:	6800      	ldr	r0, [r0, #0]
 800de40:	9301      	str	r3, [sp, #4]
 800de42:	f7ff f9bd 	bl	800d1c0 <_vfiprintf_r>
 800de46:	b002      	add	sp, #8
 800de48:	f85d eb04 	ldr.w	lr, [sp], #4
 800de4c:	b003      	add	sp, #12
 800de4e:	4770      	bx	lr
 800de50:	20000f5c 	.word	0x20000f5c

0800de54 <abort>:
 800de54:	b508      	push	{r3, lr}
 800de56:	2006      	movs	r0, #6
 800de58:	f000 f834 	bl	800dec4 <raise>
 800de5c:	2001      	movs	r0, #1
 800de5e:	f7f3 fc8f 	bl	8001780 <_exit>

0800de62 <_malloc_usable_size_r>:
 800de62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de66:	1f18      	subs	r0, r3, #4
 800de68:	2b00      	cmp	r3, #0
 800de6a:	bfbc      	itt	lt
 800de6c:	580b      	ldrlt	r3, [r1, r0]
 800de6e:	18c0      	addlt	r0, r0, r3
 800de70:	4770      	bx	lr

0800de72 <_raise_r>:
 800de72:	291f      	cmp	r1, #31
 800de74:	b538      	push	{r3, r4, r5, lr}
 800de76:	4605      	mov	r5, r0
 800de78:	460c      	mov	r4, r1
 800de7a:	d904      	bls.n	800de86 <_raise_r+0x14>
 800de7c:	2316      	movs	r3, #22
 800de7e:	6003      	str	r3, [r0, #0]
 800de80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de84:	bd38      	pop	{r3, r4, r5, pc}
 800de86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de88:	b112      	cbz	r2, 800de90 <_raise_r+0x1e>
 800de8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de8e:	b94b      	cbnz	r3, 800dea4 <_raise_r+0x32>
 800de90:	4628      	mov	r0, r5
 800de92:	f000 f831 	bl	800def8 <_getpid_r>
 800de96:	4622      	mov	r2, r4
 800de98:	4601      	mov	r1, r0
 800de9a:	4628      	mov	r0, r5
 800de9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dea0:	f000 b818 	b.w	800ded4 <_kill_r>
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d00a      	beq.n	800debe <_raise_r+0x4c>
 800dea8:	1c59      	adds	r1, r3, #1
 800deaa:	d103      	bne.n	800deb4 <_raise_r+0x42>
 800deac:	2316      	movs	r3, #22
 800deae:	6003      	str	r3, [r0, #0]
 800deb0:	2001      	movs	r0, #1
 800deb2:	e7e7      	b.n	800de84 <_raise_r+0x12>
 800deb4:	2100      	movs	r1, #0
 800deb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800deba:	4620      	mov	r0, r4
 800debc:	4798      	blx	r3
 800debe:	2000      	movs	r0, #0
 800dec0:	e7e0      	b.n	800de84 <_raise_r+0x12>
	...

0800dec4 <raise>:
 800dec4:	4b02      	ldr	r3, [pc, #8]	@ (800ded0 <raise+0xc>)
 800dec6:	4601      	mov	r1, r0
 800dec8:	6818      	ldr	r0, [r3, #0]
 800deca:	f7ff bfd2 	b.w	800de72 <_raise_r>
 800dece:	bf00      	nop
 800ded0:	20000f5c 	.word	0x20000f5c

0800ded4 <_kill_r>:
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	4d07      	ldr	r5, [pc, #28]	@ (800def4 <_kill_r+0x20>)
 800ded8:	2300      	movs	r3, #0
 800deda:	4604      	mov	r4, r0
 800dedc:	4608      	mov	r0, r1
 800dede:	4611      	mov	r1, r2
 800dee0:	602b      	str	r3, [r5, #0]
 800dee2:	f7f3 fc3d 	bl	8001760 <_kill>
 800dee6:	1c43      	adds	r3, r0, #1
 800dee8:	d102      	bne.n	800def0 <_kill_r+0x1c>
 800deea:	682b      	ldr	r3, [r5, #0]
 800deec:	b103      	cbz	r3, 800def0 <_kill_r+0x1c>
 800deee:	6023      	str	r3, [r4, #0]
 800def0:	bd38      	pop	{r3, r4, r5, pc}
 800def2:	bf00      	nop
 800def4:	200019ac 	.word	0x200019ac

0800def8 <_getpid_r>:
 800def8:	f7f3 bc2a 	b.w	8001750 <_getpid>
 800defc:	0000      	movs	r0, r0
	...

0800df00 <atan>:
 800df00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df04:	ec55 4b10 	vmov	r4, r5, d0
 800df08:	4bbf      	ldr	r3, [pc, #764]	@ (800e208 <atan+0x308>)
 800df0a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800df0e:	429e      	cmp	r6, r3
 800df10:	46ab      	mov	fp, r5
 800df12:	d918      	bls.n	800df46 <atan+0x46>
 800df14:	4bbd      	ldr	r3, [pc, #756]	@ (800e20c <atan+0x30c>)
 800df16:	429e      	cmp	r6, r3
 800df18:	d801      	bhi.n	800df1e <atan+0x1e>
 800df1a:	d109      	bne.n	800df30 <atan+0x30>
 800df1c:	b144      	cbz	r4, 800df30 <atan+0x30>
 800df1e:	4622      	mov	r2, r4
 800df20:	462b      	mov	r3, r5
 800df22:	4620      	mov	r0, r4
 800df24:	4629      	mov	r1, r5
 800df26:	f7f2 f9d9 	bl	80002dc <__adddf3>
 800df2a:	4604      	mov	r4, r0
 800df2c:	460d      	mov	r5, r1
 800df2e:	e006      	b.n	800df3e <atan+0x3e>
 800df30:	f1bb 0f00 	cmp.w	fp, #0
 800df34:	f340 812b 	ble.w	800e18e <atan+0x28e>
 800df38:	a597      	add	r5, pc, #604	@ (adr r5, 800e198 <atan+0x298>)
 800df3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800df3e:	ec45 4b10 	vmov	d0, r4, r5
 800df42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df46:	4bb2      	ldr	r3, [pc, #712]	@ (800e210 <atan+0x310>)
 800df48:	429e      	cmp	r6, r3
 800df4a:	d813      	bhi.n	800df74 <atan+0x74>
 800df4c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800df50:	429e      	cmp	r6, r3
 800df52:	d80c      	bhi.n	800df6e <atan+0x6e>
 800df54:	a392      	add	r3, pc, #584	@ (adr r3, 800e1a0 <atan+0x2a0>)
 800df56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5a:	4620      	mov	r0, r4
 800df5c:	4629      	mov	r1, r5
 800df5e:	f7f2 f9bd 	bl	80002dc <__adddf3>
 800df62:	4bac      	ldr	r3, [pc, #688]	@ (800e214 <atan+0x314>)
 800df64:	2200      	movs	r2, #0
 800df66:	f7f2 fdff 	bl	8000b68 <__aeabi_dcmpgt>
 800df6a:	2800      	cmp	r0, #0
 800df6c:	d1e7      	bne.n	800df3e <atan+0x3e>
 800df6e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800df72:	e029      	b.n	800dfc8 <atan+0xc8>
 800df74:	f000 f95c 	bl	800e230 <fabs>
 800df78:	4ba7      	ldr	r3, [pc, #668]	@ (800e218 <atan+0x318>)
 800df7a:	429e      	cmp	r6, r3
 800df7c:	ec55 4b10 	vmov	r4, r5, d0
 800df80:	f200 80bc 	bhi.w	800e0fc <atan+0x1fc>
 800df84:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800df88:	429e      	cmp	r6, r3
 800df8a:	f200 809e 	bhi.w	800e0ca <atan+0x1ca>
 800df8e:	4622      	mov	r2, r4
 800df90:	462b      	mov	r3, r5
 800df92:	4620      	mov	r0, r4
 800df94:	4629      	mov	r1, r5
 800df96:	f7f2 f9a1 	bl	80002dc <__adddf3>
 800df9a:	4b9e      	ldr	r3, [pc, #632]	@ (800e214 <atan+0x314>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	f7f2 f99b 	bl	80002d8 <__aeabi_dsub>
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	460f      	mov	r7, r1
 800dfa8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dfac:	4620      	mov	r0, r4
 800dfae:	4629      	mov	r1, r5
 800dfb0:	f7f2 f994 	bl	80002dc <__adddf3>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	4630      	mov	r0, r6
 800dfba:	4639      	mov	r1, r7
 800dfbc:	f7f2 fc6e 	bl	800089c <__aeabi_ddiv>
 800dfc0:	f04f 0a00 	mov.w	sl, #0
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	460d      	mov	r5, r1
 800dfc8:	4622      	mov	r2, r4
 800dfca:	462b      	mov	r3, r5
 800dfcc:	4620      	mov	r0, r4
 800dfce:	4629      	mov	r1, r5
 800dfd0:	f7f2 fb3a 	bl	8000648 <__aeabi_dmul>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	4680      	mov	r8, r0
 800dfda:	4689      	mov	r9, r1
 800dfdc:	f7f2 fb34 	bl	8000648 <__aeabi_dmul>
 800dfe0:	a371      	add	r3, pc, #452	@ (adr r3, 800e1a8 <atan+0x2a8>)
 800dfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	460f      	mov	r7, r1
 800dfea:	f7f2 fb2d 	bl	8000648 <__aeabi_dmul>
 800dfee:	a370      	add	r3, pc, #448	@ (adr r3, 800e1b0 <atan+0x2b0>)
 800dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff4:	f7f2 f972 	bl	80002dc <__adddf3>
 800dff8:	4632      	mov	r2, r6
 800dffa:	463b      	mov	r3, r7
 800dffc:	f7f2 fb24 	bl	8000648 <__aeabi_dmul>
 800e000:	a36d      	add	r3, pc, #436	@ (adr r3, 800e1b8 <atan+0x2b8>)
 800e002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e006:	f7f2 f969 	bl	80002dc <__adddf3>
 800e00a:	4632      	mov	r2, r6
 800e00c:	463b      	mov	r3, r7
 800e00e:	f7f2 fb1b 	bl	8000648 <__aeabi_dmul>
 800e012:	a36b      	add	r3, pc, #428	@ (adr r3, 800e1c0 <atan+0x2c0>)
 800e014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e018:	f7f2 f960 	bl	80002dc <__adddf3>
 800e01c:	4632      	mov	r2, r6
 800e01e:	463b      	mov	r3, r7
 800e020:	f7f2 fb12 	bl	8000648 <__aeabi_dmul>
 800e024:	a368      	add	r3, pc, #416	@ (adr r3, 800e1c8 <atan+0x2c8>)
 800e026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02a:	f7f2 f957 	bl	80002dc <__adddf3>
 800e02e:	4632      	mov	r2, r6
 800e030:	463b      	mov	r3, r7
 800e032:	f7f2 fb09 	bl	8000648 <__aeabi_dmul>
 800e036:	a366      	add	r3, pc, #408	@ (adr r3, 800e1d0 <atan+0x2d0>)
 800e038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03c:	f7f2 f94e 	bl	80002dc <__adddf3>
 800e040:	4642      	mov	r2, r8
 800e042:	464b      	mov	r3, r9
 800e044:	f7f2 fb00 	bl	8000648 <__aeabi_dmul>
 800e048:	a363      	add	r3, pc, #396	@ (adr r3, 800e1d8 <atan+0x2d8>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	4680      	mov	r8, r0
 800e050:	4689      	mov	r9, r1
 800e052:	4630      	mov	r0, r6
 800e054:	4639      	mov	r1, r7
 800e056:	f7f2 faf7 	bl	8000648 <__aeabi_dmul>
 800e05a:	a361      	add	r3, pc, #388	@ (adr r3, 800e1e0 <atan+0x2e0>)
 800e05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e060:	f7f2 f93a 	bl	80002d8 <__aeabi_dsub>
 800e064:	4632      	mov	r2, r6
 800e066:	463b      	mov	r3, r7
 800e068:	f7f2 faee 	bl	8000648 <__aeabi_dmul>
 800e06c:	a35e      	add	r3, pc, #376	@ (adr r3, 800e1e8 <atan+0x2e8>)
 800e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e072:	f7f2 f931 	bl	80002d8 <__aeabi_dsub>
 800e076:	4632      	mov	r2, r6
 800e078:	463b      	mov	r3, r7
 800e07a:	f7f2 fae5 	bl	8000648 <__aeabi_dmul>
 800e07e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e1f0 <atan+0x2f0>)
 800e080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e084:	f7f2 f928 	bl	80002d8 <__aeabi_dsub>
 800e088:	4632      	mov	r2, r6
 800e08a:	463b      	mov	r3, r7
 800e08c:	f7f2 fadc 	bl	8000648 <__aeabi_dmul>
 800e090:	a359      	add	r3, pc, #356	@ (adr r3, 800e1f8 <atan+0x2f8>)
 800e092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e096:	f7f2 f91f 	bl	80002d8 <__aeabi_dsub>
 800e09a:	4632      	mov	r2, r6
 800e09c:	463b      	mov	r3, r7
 800e09e:	f7f2 fad3 	bl	8000648 <__aeabi_dmul>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4640      	mov	r0, r8
 800e0a8:	4649      	mov	r1, r9
 800e0aa:	f7f2 f917 	bl	80002dc <__adddf3>
 800e0ae:	4622      	mov	r2, r4
 800e0b0:	462b      	mov	r3, r5
 800e0b2:	f7f2 fac9 	bl	8000648 <__aeabi_dmul>
 800e0b6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	460b      	mov	r3, r1
 800e0be:	d148      	bne.n	800e152 <atan+0x252>
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	f7f2 f908 	bl	80002d8 <__aeabi_dsub>
 800e0c8:	e72f      	b.n	800df2a <atan+0x2a>
 800e0ca:	4b52      	ldr	r3, [pc, #328]	@ (800e214 <atan+0x314>)
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	f7f2 f901 	bl	80002d8 <__aeabi_dsub>
 800e0d6:	4b4f      	ldr	r3, [pc, #316]	@ (800e214 <atan+0x314>)
 800e0d8:	4606      	mov	r6, r0
 800e0da:	460f      	mov	r7, r1
 800e0dc:	2200      	movs	r2, #0
 800e0de:	4620      	mov	r0, r4
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	f7f2 f8fb 	bl	80002dc <__adddf3>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	4639      	mov	r1, r7
 800e0ee:	f7f2 fbd5 	bl	800089c <__aeabi_ddiv>
 800e0f2:	f04f 0a01 	mov.w	sl, #1
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	460d      	mov	r5, r1
 800e0fa:	e765      	b.n	800dfc8 <atan+0xc8>
 800e0fc:	4b47      	ldr	r3, [pc, #284]	@ (800e21c <atan+0x31c>)
 800e0fe:	429e      	cmp	r6, r3
 800e100:	d21c      	bcs.n	800e13c <atan+0x23c>
 800e102:	4b47      	ldr	r3, [pc, #284]	@ (800e220 <atan+0x320>)
 800e104:	2200      	movs	r2, #0
 800e106:	4620      	mov	r0, r4
 800e108:	4629      	mov	r1, r5
 800e10a:	f7f2 f8e5 	bl	80002d8 <__aeabi_dsub>
 800e10e:	4b44      	ldr	r3, [pc, #272]	@ (800e220 <atan+0x320>)
 800e110:	4606      	mov	r6, r0
 800e112:	460f      	mov	r7, r1
 800e114:	2200      	movs	r2, #0
 800e116:	4620      	mov	r0, r4
 800e118:	4629      	mov	r1, r5
 800e11a:	f7f2 fa95 	bl	8000648 <__aeabi_dmul>
 800e11e:	4b3d      	ldr	r3, [pc, #244]	@ (800e214 <atan+0x314>)
 800e120:	2200      	movs	r2, #0
 800e122:	f7f2 f8db 	bl	80002dc <__adddf3>
 800e126:	4602      	mov	r2, r0
 800e128:	460b      	mov	r3, r1
 800e12a:	4630      	mov	r0, r6
 800e12c:	4639      	mov	r1, r7
 800e12e:	f7f2 fbb5 	bl	800089c <__aeabi_ddiv>
 800e132:	f04f 0a02 	mov.w	sl, #2
 800e136:	4604      	mov	r4, r0
 800e138:	460d      	mov	r5, r1
 800e13a:	e745      	b.n	800dfc8 <atan+0xc8>
 800e13c:	4622      	mov	r2, r4
 800e13e:	462b      	mov	r3, r5
 800e140:	4938      	ldr	r1, [pc, #224]	@ (800e224 <atan+0x324>)
 800e142:	2000      	movs	r0, #0
 800e144:	f7f2 fbaa 	bl	800089c <__aeabi_ddiv>
 800e148:	f04f 0a03 	mov.w	sl, #3
 800e14c:	4604      	mov	r4, r0
 800e14e:	460d      	mov	r5, r1
 800e150:	e73a      	b.n	800dfc8 <atan+0xc8>
 800e152:	4b35      	ldr	r3, [pc, #212]	@ (800e228 <atan+0x328>)
 800e154:	4e35      	ldr	r6, [pc, #212]	@ (800e22c <atan+0x32c>)
 800e156:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	f7f2 f8bb 	bl	80002d8 <__aeabi_dsub>
 800e162:	4622      	mov	r2, r4
 800e164:	462b      	mov	r3, r5
 800e166:	f7f2 f8b7 	bl	80002d8 <__aeabi_dsub>
 800e16a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e176:	f7f2 f8af 	bl	80002d8 <__aeabi_dsub>
 800e17a:	f1bb 0f00 	cmp.w	fp, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	460d      	mov	r5, r1
 800e182:	f6bf aedc 	bge.w	800df3e <atan+0x3e>
 800e186:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e18a:	461d      	mov	r5, r3
 800e18c:	e6d7      	b.n	800df3e <atan+0x3e>
 800e18e:	a51c      	add	r5, pc, #112	@ (adr r5, 800e200 <atan+0x300>)
 800e190:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e194:	e6d3      	b.n	800df3e <atan+0x3e>
 800e196:	bf00      	nop
 800e198:	54442d18 	.word	0x54442d18
 800e19c:	3ff921fb 	.word	0x3ff921fb
 800e1a0:	8800759c 	.word	0x8800759c
 800e1a4:	7e37e43c 	.word	0x7e37e43c
 800e1a8:	e322da11 	.word	0xe322da11
 800e1ac:	3f90ad3a 	.word	0x3f90ad3a
 800e1b0:	24760deb 	.word	0x24760deb
 800e1b4:	3fa97b4b 	.word	0x3fa97b4b
 800e1b8:	a0d03d51 	.word	0xa0d03d51
 800e1bc:	3fb10d66 	.word	0x3fb10d66
 800e1c0:	c54c206e 	.word	0xc54c206e
 800e1c4:	3fb745cd 	.word	0x3fb745cd
 800e1c8:	920083ff 	.word	0x920083ff
 800e1cc:	3fc24924 	.word	0x3fc24924
 800e1d0:	5555550d 	.word	0x5555550d
 800e1d4:	3fd55555 	.word	0x3fd55555
 800e1d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800e1dc:	bfa2b444 	.word	0xbfa2b444
 800e1e0:	52defd9a 	.word	0x52defd9a
 800e1e4:	3fadde2d 	.word	0x3fadde2d
 800e1e8:	af749a6d 	.word	0xaf749a6d
 800e1ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800e1f0:	fe231671 	.word	0xfe231671
 800e1f4:	3fbc71c6 	.word	0x3fbc71c6
 800e1f8:	9998ebc4 	.word	0x9998ebc4
 800e1fc:	3fc99999 	.word	0x3fc99999
 800e200:	54442d18 	.word	0x54442d18
 800e204:	bff921fb 	.word	0xbff921fb
 800e208:	440fffff 	.word	0x440fffff
 800e20c:	7ff00000 	.word	0x7ff00000
 800e210:	3fdbffff 	.word	0x3fdbffff
 800e214:	3ff00000 	.word	0x3ff00000
 800e218:	3ff2ffff 	.word	0x3ff2ffff
 800e21c:	40038000 	.word	0x40038000
 800e220:	3ff80000 	.word	0x3ff80000
 800e224:	bff00000 	.word	0xbff00000
 800e228:	0800ebb0 	.word	0x0800ebb0
 800e22c:	0800ebd0 	.word	0x0800ebd0

0800e230 <fabs>:
 800e230:	ec51 0b10 	vmov	r0, r1, d0
 800e234:	4602      	mov	r2, r0
 800e236:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e23a:	ec43 2b10 	vmov	d0, r2, r3
 800e23e:	4770      	bx	lr

0800e240 <_init>:
 800e240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e242:	bf00      	nop
 800e244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e246:	bc08      	pop	{r3}
 800e248:	469e      	mov	lr, r3
 800e24a:	4770      	bx	lr

0800e24c <_fini>:
 800e24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e24e:	bf00      	nop
 800e250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e252:	bc08      	pop	{r3}
 800e254:	469e      	mov	lr, r3
 800e256:	4770      	bx	lr
